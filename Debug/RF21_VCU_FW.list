
RF21_VCU_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f12c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  0800f2bc  0800f2bc  0001f2bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f4b8  0800f4b8  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800f4b8  0800f4b8  0001f4b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f4c0  0800f4c0  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f4c0  0800f4c0  0001f4c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f4c4  0800f4c4  0001f4c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800f4c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          0000517c  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005210  20005210  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003406c  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000063fb  00000000  00000000  00054130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000022b0  00000000  00000000  0005a530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002090  00000000  00000000  0005c7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a42f  00000000  00000000  0005e870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002c0b4  00000000  00000000  00088c9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ef030  00000000  00000000  000b4d53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001a3d83  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000998c  00000000  00000000  001a3dd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f2a4 	.word	0x0800f2a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800f2a4 	.word	0x0800f2a4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295
 800089c:	f04f 30ff 	movne.w	r0, #4294967295
 80008a0:	f000 b96e 	b.w	8000b80 <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9d08      	ldr	r5, [sp, #32]
 80008c2:	4604      	mov	r4, r0
 80008c4:	468c      	mov	ip, r1
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	f040 8083 	bne.w	80009d2 <__udivmoddi4+0x116>
 80008cc:	428a      	cmp	r2, r1
 80008ce:	4617      	mov	r7, r2
 80008d0:	d947      	bls.n	8000962 <__udivmoddi4+0xa6>
 80008d2:	fab2 f282 	clz	r2, r2
 80008d6:	b142      	cbz	r2, 80008ea <__udivmoddi4+0x2e>
 80008d8:	f1c2 0020 	rsb	r0, r2, #32
 80008dc:	fa24 f000 	lsr.w	r0, r4, r0
 80008e0:	4091      	lsls	r1, r2
 80008e2:	4097      	lsls	r7, r2
 80008e4:	ea40 0c01 	orr.w	ip, r0, r1
 80008e8:	4094      	lsls	r4, r2
 80008ea:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008ee:	0c23      	lsrs	r3, r4, #16
 80008f0:	fbbc f6f8 	udiv	r6, ip, r8
 80008f4:	fa1f fe87 	uxth.w	lr, r7
 80008f8:	fb08 c116 	mls	r1, r8, r6, ip
 80008fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000900:	fb06 f10e 	mul.w	r1, r6, lr
 8000904:	4299      	cmp	r1, r3
 8000906:	d909      	bls.n	800091c <__udivmoddi4+0x60>
 8000908:	18fb      	adds	r3, r7, r3
 800090a:	f106 30ff 	add.w	r0, r6, #4294967295
 800090e:	f080 8119 	bcs.w	8000b44 <__udivmoddi4+0x288>
 8000912:	4299      	cmp	r1, r3
 8000914:	f240 8116 	bls.w	8000b44 <__udivmoddi4+0x288>
 8000918:	3e02      	subs	r6, #2
 800091a:	443b      	add	r3, r7
 800091c:	1a5b      	subs	r3, r3, r1
 800091e:	b2a4      	uxth	r4, r4
 8000920:	fbb3 f0f8 	udiv	r0, r3, r8
 8000924:	fb08 3310 	mls	r3, r8, r0, r3
 8000928:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800092c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000930:	45a6      	cmp	lr, r4
 8000932:	d909      	bls.n	8000948 <__udivmoddi4+0x8c>
 8000934:	193c      	adds	r4, r7, r4
 8000936:	f100 33ff 	add.w	r3, r0, #4294967295
 800093a:	f080 8105 	bcs.w	8000b48 <__udivmoddi4+0x28c>
 800093e:	45a6      	cmp	lr, r4
 8000940:	f240 8102 	bls.w	8000b48 <__udivmoddi4+0x28c>
 8000944:	3802      	subs	r0, #2
 8000946:	443c      	add	r4, r7
 8000948:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800094c:	eba4 040e 	sub.w	r4, r4, lr
 8000950:	2600      	movs	r6, #0
 8000952:	b11d      	cbz	r5, 800095c <__udivmoddi4+0xa0>
 8000954:	40d4      	lsrs	r4, r2
 8000956:	2300      	movs	r3, #0
 8000958:	e9c5 4300 	strd	r4, r3, [r5]
 800095c:	4631      	mov	r1, r6
 800095e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000962:	b902      	cbnz	r2, 8000966 <__udivmoddi4+0xaa>
 8000964:	deff      	udf	#255	; 0xff
 8000966:	fab2 f282 	clz	r2, r2
 800096a:	2a00      	cmp	r2, #0
 800096c:	d150      	bne.n	8000a10 <__udivmoddi4+0x154>
 800096e:	1bcb      	subs	r3, r1, r7
 8000970:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000974:	fa1f f887 	uxth.w	r8, r7
 8000978:	2601      	movs	r6, #1
 800097a:	fbb3 fcfe 	udiv	ip, r3, lr
 800097e:	0c21      	lsrs	r1, r4, #16
 8000980:	fb0e 331c 	mls	r3, lr, ip, r3
 8000984:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000988:	fb08 f30c 	mul.w	r3, r8, ip
 800098c:	428b      	cmp	r3, r1
 800098e:	d907      	bls.n	80009a0 <__udivmoddi4+0xe4>
 8000990:	1879      	adds	r1, r7, r1
 8000992:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000996:	d202      	bcs.n	800099e <__udivmoddi4+0xe2>
 8000998:	428b      	cmp	r3, r1
 800099a:	f200 80e9 	bhi.w	8000b70 <__udivmoddi4+0x2b4>
 800099e:	4684      	mov	ip, r0
 80009a0:	1ac9      	subs	r1, r1, r3
 80009a2:	b2a3      	uxth	r3, r4
 80009a4:	fbb1 f0fe 	udiv	r0, r1, lr
 80009a8:	fb0e 1110 	mls	r1, lr, r0, r1
 80009ac:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80009b0:	fb08 f800 	mul.w	r8, r8, r0
 80009b4:	45a0      	cmp	r8, r4
 80009b6:	d907      	bls.n	80009c8 <__udivmoddi4+0x10c>
 80009b8:	193c      	adds	r4, r7, r4
 80009ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80009be:	d202      	bcs.n	80009c6 <__udivmoddi4+0x10a>
 80009c0:	45a0      	cmp	r8, r4
 80009c2:	f200 80d9 	bhi.w	8000b78 <__udivmoddi4+0x2bc>
 80009c6:	4618      	mov	r0, r3
 80009c8:	eba4 0408 	sub.w	r4, r4, r8
 80009cc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80009d0:	e7bf      	b.n	8000952 <__udivmoddi4+0x96>
 80009d2:	428b      	cmp	r3, r1
 80009d4:	d909      	bls.n	80009ea <__udivmoddi4+0x12e>
 80009d6:	2d00      	cmp	r5, #0
 80009d8:	f000 80b1 	beq.w	8000b3e <__udivmoddi4+0x282>
 80009dc:	2600      	movs	r6, #0
 80009de:	e9c5 0100 	strd	r0, r1, [r5]
 80009e2:	4630      	mov	r0, r6
 80009e4:	4631      	mov	r1, r6
 80009e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ea:	fab3 f683 	clz	r6, r3
 80009ee:	2e00      	cmp	r6, #0
 80009f0:	d14a      	bne.n	8000a88 <__udivmoddi4+0x1cc>
 80009f2:	428b      	cmp	r3, r1
 80009f4:	d302      	bcc.n	80009fc <__udivmoddi4+0x140>
 80009f6:	4282      	cmp	r2, r0
 80009f8:	f200 80b8 	bhi.w	8000b6c <__udivmoddi4+0x2b0>
 80009fc:	1a84      	subs	r4, r0, r2
 80009fe:	eb61 0103 	sbc.w	r1, r1, r3
 8000a02:	2001      	movs	r0, #1
 8000a04:	468c      	mov	ip, r1
 8000a06:	2d00      	cmp	r5, #0
 8000a08:	d0a8      	beq.n	800095c <__udivmoddi4+0xa0>
 8000a0a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a0e:	e7a5      	b.n	800095c <__udivmoddi4+0xa0>
 8000a10:	f1c2 0320 	rsb	r3, r2, #32
 8000a14:	fa20 f603 	lsr.w	r6, r0, r3
 8000a18:	4097      	lsls	r7, r2
 8000a1a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a1e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a22:	40d9      	lsrs	r1, r3
 8000a24:	4330      	orrs	r0, r6
 8000a26:	0c03      	lsrs	r3, r0, #16
 8000a28:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a2c:	fa1f f887 	uxth.w	r8, r7
 8000a30:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a38:	fb06 f108 	mul.w	r1, r6, r8
 8000a3c:	4299      	cmp	r1, r3
 8000a3e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a42:	d909      	bls.n	8000a58 <__udivmoddi4+0x19c>
 8000a44:	18fb      	adds	r3, r7, r3
 8000a46:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a4a:	f080 808d 	bcs.w	8000b68 <__udivmoddi4+0x2ac>
 8000a4e:	4299      	cmp	r1, r3
 8000a50:	f240 808a 	bls.w	8000b68 <__udivmoddi4+0x2ac>
 8000a54:	3e02      	subs	r6, #2
 8000a56:	443b      	add	r3, r7
 8000a58:	1a5b      	subs	r3, r3, r1
 8000a5a:	b281      	uxth	r1, r0
 8000a5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a68:	fb00 f308 	mul.w	r3, r0, r8
 8000a6c:	428b      	cmp	r3, r1
 8000a6e:	d907      	bls.n	8000a80 <__udivmoddi4+0x1c4>
 8000a70:	1879      	adds	r1, r7, r1
 8000a72:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a76:	d273      	bcs.n	8000b60 <__udivmoddi4+0x2a4>
 8000a78:	428b      	cmp	r3, r1
 8000a7a:	d971      	bls.n	8000b60 <__udivmoddi4+0x2a4>
 8000a7c:	3802      	subs	r0, #2
 8000a7e:	4439      	add	r1, r7
 8000a80:	1acb      	subs	r3, r1, r3
 8000a82:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a86:	e778      	b.n	800097a <__udivmoddi4+0xbe>
 8000a88:	f1c6 0c20 	rsb	ip, r6, #32
 8000a8c:	fa03 f406 	lsl.w	r4, r3, r6
 8000a90:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a94:	431c      	orrs	r4, r3
 8000a96:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000a9e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000aa2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000aa6:	431f      	orrs	r7, r3
 8000aa8:	0c3b      	lsrs	r3, r7, #16
 8000aaa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000aae:	fa1f f884 	uxth.w	r8, r4
 8000ab2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ab6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000aba:	fb09 fa08 	mul.w	sl, r9, r8
 8000abe:	458a      	cmp	sl, r1
 8000ac0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ac4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ac8:	d908      	bls.n	8000adc <__udivmoddi4+0x220>
 8000aca:	1861      	adds	r1, r4, r1
 8000acc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ad0:	d248      	bcs.n	8000b64 <__udivmoddi4+0x2a8>
 8000ad2:	458a      	cmp	sl, r1
 8000ad4:	d946      	bls.n	8000b64 <__udivmoddi4+0x2a8>
 8000ad6:	f1a9 0902 	sub.w	r9, r9, #2
 8000ada:	4421      	add	r1, r4
 8000adc:	eba1 010a 	sub.w	r1, r1, sl
 8000ae0:	b2bf      	uxth	r7, r7
 8000ae2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ae6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000aea:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000aee:	fb00 f808 	mul.w	r8, r0, r8
 8000af2:	45b8      	cmp	r8, r7
 8000af4:	d907      	bls.n	8000b06 <__udivmoddi4+0x24a>
 8000af6:	19e7      	adds	r7, r4, r7
 8000af8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000afc:	d22e      	bcs.n	8000b5c <__udivmoddi4+0x2a0>
 8000afe:	45b8      	cmp	r8, r7
 8000b00:	d92c      	bls.n	8000b5c <__udivmoddi4+0x2a0>
 8000b02:	3802      	subs	r0, #2
 8000b04:	4427      	add	r7, r4
 8000b06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b0a:	eba7 0708 	sub.w	r7, r7, r8
 8000b0e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b12:	454f      	cmp	r7, r9
 8000b14:	46c6      	mov	lr, r8
 8000b16:	4649      	mov	r1, r9
 8000b18:	d31a      	bcc.n	8000b50 <__udivmoddi4+0x294>
 8000b1a:	d017      	beq.n	8000b4c <__udivmoddi4+0x290>
 8000b1c:	b15d      	cbz	r5, 8000b36 <__udivmoddi4+0x27a>
 8000b1e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b22:	eb67 0701 	sbc.w	r7, r7, r1
 8000b26:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b2a:	40f2      	lsrs	r2, r6
 8000b2c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b30:	40f7      	lsrs	r7, r6
 8000b32:	e9c5 2700 	strd	r2, r7, [r5]
 8000b36:	2600      	movs	r6, #0
 8000b38:	4631      	mov	r1, r6
 8000b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3e:	462e      	mov	r6, r5
 8000b40:	4628      	mov	r0, r5
 8000b42:	e70b      	b.n	800095c <__udivmoddi4+0xa0>
 8000b44:	4606      	mov	r6, r0
 8000b46:	e6e9      	b.n	800091c <__udivmoddi4+0x60>
 8000b48:	4618      	mov	r0, r3
 8000b4a:	e6fd      	b.n	8000948 <__udivmoddi4+0x8c>
 8000b4c:	4543      	cmp	r3, r8
 8000b4e:	d2e5      	bcs.n	8000b1c <__udivmoddi4+0x260>
 8000b50:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b54:	eb69 0104 	sbc.w	r1, r9, r4
 8000b58:	3801      	subs	r0, #1
 8000b5a:	e7df      	b.n	8000b1c <__udivmoddi4+0x260>
 8000b5c:	4608      	mov	r0, r1
 8000b5e:	e7d2      	b.n	8000b06 <__udivmoddi4+0x24a>
 8000b60:	4660      	mov	r0, ip
 8000b62:	e78d      	b.n	8000a80 <__udivmoddi4+0x1c4>
 8000b64:	4681      	mov	r9, r0
 8000b66:	e7b9      	b.n	8000adc <__udivmoddi4+0x220>
 8000b68:	4666      	mov	r6, ip
 8000b6a:	e775      	b.n	8000a58 <__udivmoddi4+0x19c>
 8000b6c:	4630      	mov	r0, r6
 8000b6e:	e74a      	b.n	8000a06 <__udivmoddi4+0x14a>
 8000b70:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b74:	4439      	add	r1, r7
 8000b76:	e713      	b.n	80009a0 <__udivmoddi4+0xe4>
 8000b78:	3802      	subs	r0, #2
 8000b7a:	443c      	add	r4, r7
 8000b7c:	e724      	b.n	80009c8 <__udivmoddi4+0x10c>
 8000b7e:	bf00      	nop

08000b80 <__aeabi_idiv0>:
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop

08000b84 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	4a07      	ldr	r2, [pc, #28]	; (8000bb0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b94:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	4a06      	ldr	r2, [pc, #24]	; (8000bb4 <vApplicationGetIdleTaskMemory+0x30>)
 8000b9a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2280      	movs	r2, #128	; 0x80
 8000ba0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000ba2:	bf00      	nop
 8000ba4:	3714      	adds	r7, #20
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	200000b0 	.word	0x200000b0
 8000bb4:	20000164 	.word	0x20000164

08000bb8 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	4a07      	ldr	r2, [pc, #28]	; (8000be4 <vApplicationGetTimerTaskMemory+0x2c>)
 8000bc8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	4a06      	ldr	r2, [pc, #24]	; (8000be8 <vApplicationGetTimerTaskMemory+0x30>)
 8000bce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bd6:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000bd8:	bf00      	nop
 8000bda:	3714      	adds	r7, #20
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	20000364 	.word	0x20000364
 8000be8:	20000418 	.word	0x20000418

08000bec <HAL_CAN_RxFifo0MsgPendingCallback>:
uint8_t TxData[8];
uint8_t RxData[8];

uint32_t TxMailbox;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]

	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8000bf4:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000bf6:	4a0b      	ldr	r2, [pc, #44]	; (8000c24 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f002 f988 	bl	8002f10 <HAL_CAN_GetRxMessage>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
		Error_Handler();
 8000c06:	f000 fe49 	bl	800189c <Error_Handler>
	}
	HAL_GPIO_WritePin(GPIOD, LD3_Pin, GPIO_PIN_SET);
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c10:	4805      	ldr	r0, [pc, #20]	; (8000c28 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000c12:	f003 faeb 	bl	80041ec <HAL_GPIO_WritePin>
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	2000492c 	.word	0x2000492c
 8000c24:	20004a1c 	.word	0x20004a1c
 8000c28:	40020c00 	.word	0x40020c00

08000c2c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000c2c:	b5b0      	push	{r4, r5, r7, lr}
 8000c2e:	b09e      	sub	sp, #120	; 0x78
 8000c30:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000c32:	f001 fad5 	bl	80021e0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000c36:	f000 f8c3 	bl	8000dc0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000c3a:	f000 fb85 	bl	8001348 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000c3e:	f000 fa71 	bl	8001124 <MX_I2C1_Init>
	MX_I2S3_Init();
 8000c42:	f000 fa9d 	bl	8001180 <MX_I2S3_Init>
	MX_SPI1_Init();
 8000c46:	f000 facb 	bl	80011e0 <MX_SPI1_Init>
	MX_DMA_Init();
 8000c4a:	f000 fb4d 	bl	80012e8 <MX_DMA_Init>
	MX_ADC1_Init();
 8000c4e:	f000 f921 	bl	8000e94 <MX_ADC1_Init>
	MX_USART2_UART_Init();
 8000c52:	f000 fb1f 	bl	8001294 <MX_USART2_UART_Init>
	MX_ADC2_Init();
 8000c56:	f000 f96f 	bl	8000f38 <MX_ADC2_Init>
	MX_ADC3_Init();
 8000c5a:	f000 f9bf 	bl	8000fdc <MX_ADC3_Init>
	MX_CAN1_Init();
 8000c5e:	f000 fa0f 	bl	8001080 <MX_CAN1_Init>
	MX_TIM10_Init();
 8000c62:	f000 faf3 	bl	800124c <MX_TIM10_Init>
	/* USER CODE BEGIN 2 */
	HAL_ADC_Start_DMA(&hadc1, &appsVal[0], 1); //start the ADC for APPS 1 (Linear Sensor) in DMA mode
 8000c66:	2201      	movs	r2, #1
 8000c68:	4943      	ldr	r1, [pc, #268]	; (8000d78 <main+0x14c>)
 8000c6a:	4844      	ldr	r0, [pc, #272]	; (8000d7c <main+0x150>)
 8000c6c:	f001 fb62 	bl	8002334 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc3, &bpsVal[0], 1); //start the ADC for Brake Pressure Sensors in DMA mode
 8000c70:	2201      	movs	r2, #1
 8000c72:	4943      	ldr	r1, [pc, #268]	; (8000d80 <main+0x154>)
 8000c74:	4843      	ldr	r0, [pc, #268]	; (8000d84 <main+0x158>)
 8000c76:	f001 fb5d 	bl	8002334 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, &appsVal[1], 1); //start the ADC for APPS 2 (Rotational Sensor) in DMA mode
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	4942      	ldr	r1, [pc, #264]	; (8000d88 <main+0x15c>)
 8000c7e:	4843      	ldr	r0, [pc, #268]	; (8000d8c <main+0x160>)
 8000c80:	f001 fb58 	bl	8002334 <HAL_ADC_Start_DMA>

	//Start the CAN Bus
	HAL_CAN_Start(&hcan1);
 8000c84:	4842      	ldr	r0, [pc, #264]	; (8000d90 <main+0x164>)
 8000c86:	f002 f8ff 	bl	8002e88 <HAL_CAN_Start>

	//Initialize the CAN RX Interrupt
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)
 8000c8a:	2102      	movs	r1, #2
 8000c8c:	4840      	ldr	r0, [pc, #256]	; (8000d90 <main+0x164>)
 8000c8e:	f002 fa51 	bl	8003134 <HAL_CAN_ActivateNotification>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <main+0x70>
			!= HAL_OK) {
		Error_Handler();
 8000c98:	f000 fe00 	bl	800189c <Error_Handler>
	}

	//Setting Required Data Values for CAN frame
	TxHeader.DLC = 8;	//data length in bytes
 8000c9c:	4b3d      	ldr	r3, [pc, #244]	; (8000d94 <main+0x168>)
 8000c9e:	2208      	movs	r2, #8
 8000ca0:	611a      	str	r2, [r3, #16]
	TxHeader.ExtId = 0;
 8000ca2:	4b3c      	ldr	r3, [pc, #240]	; (8000d94 <main+0x168>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	605a      	str	r2, [r3, #4]
	TxHeader.IDE = CAN_ID_STD; //specify standard CAN ID
 8000ca8:	4b3a      	ldr	r3, [pc, #232]	; (8000d94 <main+0x168>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA; //specifies we are sending a CAN frame
 8000cae:	4b39      	ldr	r3, [pc, #228]	; (8000d94 <main+0x168>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = 0x21;	//CAN ID of this device
 8000cb4:	4b37      	ldr	r3, [pc, #220]	; (8000d94 <main+0x168>)
 8000cb6:	2221      	movs	r2, #33	; 0x21
 8000cb8:	601a      	str	r2, [r3, #0]
	TxHeader.TransmitGlobalTime = DISABLE;
 8000cba:	4b36      	ldr	r3, [pc, #216]	; (8000d94 <main+0x168>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	751a      	strb	r2, [r3, #20]
	/* add semaphores, ... */
	/* USER CODE END RTOS_SEMAPHORES */

	/* Create the timer(s) */
	/* definition and creation of implausibility_Timer */
	osTimerDef(implausibility_Timer, OTCallback);
 8000cc0:	4b35      	ldr	r3, [pc, #212]	; (8000d98 <main+0x16c>)
 8000cc2:	673b      	str	r3, [r7, #112]	; 0x70
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	677b      	str	r3, [r7, #116]	; 0x74
	implausibility_TimerHandle = osTimerCreate(osTimer(implausibility_Timer),
 8000cc8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2100      	movs	r1, #0
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f00a fc67 	bl	800b5a4 <osTimerCreate>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	4a30      	ldr	r2, [pc, #192]	; (8000d9c <main+0x170>)
 8000cda:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of ledTask */
	osThreadDef(ledTask, startLEDTask, osPriorityNormal, 0, 128);
 8000cdc:	4b30      	ldr	r3, [pc, #192]	; (8000da0 <main+0x174>)
 8000cde:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000ce2:	461d      	mov	r5, r3
 8000ce4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ce6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ce8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	ledTaskHandle = osThreadCreate(osThread(ledTask), NULL);
 8000cf0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f00a fbf3 	bl	800b4e2 <osThreadCreate>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	4a29      	ldr	r2, [pc, #164]	; (8000da4 <main+0x178>)
 8000d00:	6013      	str	r3, [r2, #0]

	/* definition and creation of uartTask */
	osThreadDef(uartTask, startUART_Task, osPriorityNormal, 0, 256);
 8000d02:	4b29      	ldr	r3, [pc, #164]	; (8000da8 <main+0x17c>)
 8000d04:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000d08:	461d      	mov	r5, r3
 8000d0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d0e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d12:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	uartTaskHandle = osThreadCreate(osThread(uartTask), NULL);
 8000d16:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f00a fbe0 	bl	800b4e2 <osThreadCreate>
 8000d22:	4603      	mov	r3, r0
 8000d24:	4a21      	ldr	r2, [pc, #132]	; (8000dac <main+0x180>)
 8000d26:	6013      	str	r3, [r2, #0]

	/* definition and creation of Torque_Command */
	osThreadDef(Torque_Command, startTorqueCommand, osPriorityRealtime, 0, 256);
 8000d28:	4b21      	ldr	r3, [pc, #132]	; (8000db0 <main+0x184>)
 8000d2a:	f107 041c 	add.w	r4, r7, #28
 8000d2e:	461d      	mov	r5, r3
 8000d30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d34:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d38:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Torque_CommandHandle = osThreadCreate(osThread(Torque_Command), NULL);
 8000d3c:	f107 031c 	add.w	r3, r7, #28
 8000d40:	2100      	movs	r1, #0
 8000d42:	4618      	mov	r0, r3
 8000d44:	f00a fbcd 	bl	800b4e2 <osThreadCreate>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	4a1a      	ldr	r2, [pc, #104]	; (8000db4 <main+0x188>)
 8000d4c:	6013      	str	r3, [r2, #0]

	/* definition and creation of BPS_Limit_Check */
	osThreadDef(BPS_Limit_Check, startBPSCheck, osPriorityHigh, 0, 128);
 8000d4e:	4b1a      	ldr	r3, [pc, #104]	; (8000db8 <main+0x18c>)
 8000d50:	463c      	mov	r4, r7
 8000d52:	461d      	mov	r5, r3
 8000d54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d58:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d5c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	BPS_Limit_CheckHandle = osThreadCreate(osThread(BPS_Limit_Check), NULL);
 8000d60:	463b      	mov	r3, r7
 8000d62:	2100      	movs	r1, #0
 8000d64:	4618      	mov	r0, r3
 8000d66:	f00a fbbc 	bl	800b4e2 <osThreadCreate>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	4a13      	ldr	r2, [pc, #76]	; (8000dbc <main+0x190>)
 8000d6e:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000d70:	f00a fbb0 	bl	800b4d4 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000d74:	e7fe      	b.n	8000d74 <main+0x148>
 8000d76:	bf00      	nop
 8000d78:	20004a38 	.word	0x20004a38
 8000d7c:	200047cc 	.word	0x200047cc
 8000d80:	200048bc 	.word	0x200048bc
 8000d84:	20004814 	.word	0x20004814
 8000d88:	20004a3c 	.word	0x20004a3c
 8000d8c:	20004680 	.word	0x20004680
 8000d90:	200049dc 	.word	0x200049dc
 8000d94:	20004a04 	.word	0x20004a04
 8000d98:	08001865 	.word	0x08001865
 8000d9c:	200049d8 	.word	0x200049d8
 8000da0:	0800f2f0 	.word	0x0800f2f0
 8000da4:	20004764 	.word	0x20004764
 8000da8:	0800f30c 	.word	0x0800f30c
 8000dac:	200047c8 	.word	0x200047c8
 8000db0:	0800f328 	.word	0x0800f328
 8000db4:	2000467c 	.word	0x2000467c
 8000db8:	0800f344 	.word	0x0800f344
 8000dbc:	20004a88 	.word	0x20004a88

08000dc0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b094      	sub	sp, #80	; 0x50
 8000dc4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000dc6:	f107 0320 	add.w	r3, r7, #32
 8000dca:	2230      	movs	r2, #48	; 0x30
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f00d fdd8 	bl	800e984 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000dd4:	f107 030c 	add.w	r3, r7, #12
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000de4:	2300      	movs	r3, #0
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	4b28      	ldr	r3, [pc, #160]	; (8000e8c <SystemClock_Config+0xcc>)
 8000dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dec:	4a27      	ldr	r2, [pc, #156]	; (8000e8c <SystemClock_Config+0xcc>)
 8000dee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df2:	6413      	str	r3, [r2, #64]	; 0x40
 8000df4:	4b25      	ldr	r3, [pc, #148]	; (8000e8c <SystemClock_Config+0xcc>)
 8000df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dfc:	60bb      	str	r3, [r7, #8]
 8000dfe:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e00:	2300      	movs	r3, #0
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	4b22      	ldr	r3, [pc, #136]	; (8000e90 <SystemClock_Config+0xd0>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a21      	ldr	r2, [pc, #132]	; (8000e90 <SystemClock_Config+0xd0>)
 8000e0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e0e:	6013      	str	r3, [r2, #0]
 8000e10:	4b1f      	ldr	r3, [pc, #124]	; (8000e90 <SystemClock_Config+0xd0>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e18:	607b      	str	r3, [r7, #4]
 8000e1a:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e26:	2302      	movs	r3, #2
 8000e28:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000e30:	2308      	movs	r3, #8
 8000e32:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000e34:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000e38:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e3e:	2307      	movs	r3, #7
 8000e40:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000e42:	f107 0320 	add.w	r3, r7, #32
 8000e46:	4618      	mov	r0, r3
 8000e48:	f005 fd58 	bl	80068fc <HAL_RCC_OscConfig>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <SystemClock_Config+0x96>
		Error_Handler();
 8000e52:	f000 fd23 	bl	800189c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000e56:	230f      	movs	r3, #15
 8000e58:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e62:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e66:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e6c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000e6e:	f107 030c 	add.w	r3, r7, #12
 8000e72:	2105      	movs	r1, #5
 8000e74:	4618      	mov	r0, r3
 8000e76:	f005 ffb9 	bl	8006dec <HAL_RCC_ClockConfig>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <SystemClock_Config+0xc4>
		Error_Handler();
 8000e80:	f000 fd0c 	bl	800189c <Error_Handler>
	}
}
 8000e84:	bf00      	nop
 8000e86:	3750      	adds	r7, #80	; 0x50
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	40007000 	.word	0x40007000

08000e94 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000ea6:	4b21      	ldr	r3, [pc, #132]	; (8000f2c <MX_ADC1_Init+0x98>)
 8000ea8:	4a21      	ldr	r2, [pc, #132]	; (8000f30 <MX_ADC1_Init+0x9c>)
 8000eaa:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000eac:	4b1f      	ldr	r3, [pc, #124]	; (8000f2c <MX_ADC1_Init+0x98>)
 8000eae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000eb2:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000eb4:	4b1d      	ldr	r3, [pc, #116]	; (8000f2c <MX_ADC1_Init+0x98>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8000eba:	4b1c      	ldr	r3, [pc, #112]	; (8000f2c <MX_ADC1_Init+0x98>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000ec0:	4b1a      	ldr	r3, [pc, #104]	; (8000f2c <MX_ADC1_Init+0x98>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ec6:	4b19      	ldr	r3, [pc, #100]	; (8000f2c <MX_ADC1_Init+0x98>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ece:	4b17      	ldr	r3, [pc, #92]	; (8000f2c <MX_ADC1_Init+0x98>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ed4:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <MX_ADC1_Init+0x98>)
 8000ed6:	4a17      	ldr	r2, [pc, #92]	; (8000f34 <MX_ADC1_Init+0xa0>)
 8000ed8:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eda:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <MX_ADC1_Init+0x98>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8000ee0:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <MX_ADC1_Init+0x98>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ee6:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <MX_ADC1_Init+0x98>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eee:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <MX_ADC1_Init+0x98>)
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000ef4:	480d      	ldr	r0, [pc, #52]	; (8000f2c <MX_ADC1_Init+0x98>)
 8000ef6:	f001 f9d9 	bl	80022ac <HAL_ADC_Init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_ADC1_Init+0x70>
		Error_Handler();
 8000f00:	f000 fccc 	bl	800189c <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8000f04:	2301      	movs	r3, #1
 8000f06:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000f10:	463b      	mov	r3, r7
 8000f12:	4619      	mov	r1, r3
 8000f14:	4805      	ldr	r0, [pc, #20]	; (8000f2c <MX_ADC1_Init+0x98>)
 8000f16:	f001 fb3b 	bl	8002590 <HAL_ADC_ConfigChannel>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_ADC1_Init+0x90>
		Error_Handler();
 8000f20:	f000 fcbc 	bl	800189c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000f24:	bf00      	nop
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	200047cc 	.word	0x200047cc
 8000f30:	40012000 	.word	0x40012000
 8000f34:	0f000001 	.word	0x0f000001

08000f38 <MX_ADC2_Init>:
/**
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000f3e:	463b      	mov	r3, r7
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC2_Init 1 */

	/* USER CODE END ADC2_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc2.Instance = ADC2;
 8000f4a:	4b21      	ldr	r3, [pc, #132]	; (8000fd0 <MX_ADC2_Init+0x98>)
 8000f4c:	4a21      	ldr	r2, [pc, #132]	; (8000fd4 <MX_ADC2_Init+0x9c>)
 8000f4e:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f50:	4b1f      	ldr	r3, [pc, #124]	; (8000fd0 <MX_ADC2_Init+0x98>)
 8000f52:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f56:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000f58:	4b1d      	ldr	r3, [pc, #116]	; (8000fd0 <MX_ADC2_Init+0x98>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
	hadc2.Init.ScanConvMode = DISABLE;
 8000f5e:	4b1c      	ldr	r3, [pc, #112]	; (8000fd0 <MX_ADC2_Init+0x98>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]
	hadc2.Init.ContinuousConvMode = ENABLE;
 8000f64:	4b1a      	ldr	r3, [pc, #104]	; (8000fd0 <MX_ADC2_Init+0x98>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	761a      	strb	r2, [r3, #24]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000f6a:	4b19      	ldr	r3, [pc, #100]	; (8000fd0 <MX_ADC2_Init+0x98>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f72:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <MX_ADC2_Init+0x98>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f78:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <MX_ADC2_Init+0x98>)
 8000f7a:	4a17      	ldr	r2, [pc, #92]	; (8000fd8 <MX_ADC2_Init+0xa0>)
 8000f7c:	629a      	str	r2, [r3, #40]	; 0x28
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f7e:	4b14      	ldr	r3, [pc, #80]	; (8000fd0 <MX_ADC2_Init+0x98>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	60da      	str	r2, [r3, #12]
	hadc2.Init.NbrOfConversion = 1;
 8000f84:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <MX_ADC2_Init+0x98>)
 8000f86:	2201      	movs	r2, #1
 8000f88:	61da      	str	r2, [r3, #28]
	hadc2.Init.DMAContinuousRequests = ENABLE;
 8000f8a:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <MX_ADC2_Init+0x98>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f92:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <MX_ADC2_Init+0x98>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 8000f98:	480d      	ldr	r0, [pc, #52]	; (8000fd0 <MX_ADC2_Init+0x98>)
 8000f9a:	f001 f987 	bl	80022ac <HAL_ADC_Init>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_ADC2_Init+0x70>
		Error_Handler();
 8000fa4:	f000 fc7a 	bl	800189c <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000fac:	2301      	movs	r3, #1
 8000fae:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8000fb4:	463b      	mov	r3, r7
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4805      	ldr	r0, [pc, #20]	; (8000fd0 <MX_ADC2_Init+0x98>)
 8000fba:	f001 fae9 	bl	8002590 <HAL_ADC_ConfigChannel>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_ADC2_Init+0x90>
		Error_Handler();
 8000fc4:	f000 fc6a 	bl	800189c <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 8000fc8:	bf00      	nop
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20004680 	.word	0x20004680
 8000fd4:	40012100 	.word	0x40012100
 8000fd8:	0f000001 	.word	0x0f000001

08000fdc <MX_ADC3_Init>:
/**
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC3_Init 1 */

	/* USER CODE END ADC3_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc3.Instance = ADC3;
 8000fee:	4b21      	ldr	r3, [pc, #132]	; (8001074 <MX_ADC3_Init+0x98>)
 8000ff0:	4a21      	ldr	r2, [pc, #132]	; (8001078 <MX_ADC3_Init+0x9c>)
 8000ff2:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ff4:	4b1f      	ldr	r3, [pc, #124]	; (8001074 <MX_ADC3_Init+0x98>)
 8000ff6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ffa:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000ffc:	4b1d      	ldr	r3, [pc, #116]	; (8001074 <MX_ADC3_Init+0x98>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = DISABLE;
 8001002:	4b1c      	ldr	r3, [pc, #112]	; (8001074 <MX_ADC3_Init+0x98>)
 8001004:	2200      	movs	r2, #0
 8001006:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = ENABLE;
 8001008:	4b1a      	ldr	r3, [pc, #104]	; (8001074 <MX_ADC3_Init+0x98>)
 800100a:	2201      	movs	r2, #1
 800100c:	761a      	strb	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 800100e:	4b19      	ldr	r3, [pc, #100]	; (8001074 <MX_ADC3_Init+0x98>)
 8001010:	2200      	movs	r2, #0
 8001012:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001016:	4b17      	ldr	r3, [pc, #92]	; (8001074 <MX_ADC3_Init+0x98>)
 8001018:	2200      	movs	r2, #0
 800101a:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800101c:	4b15      	ldr	r3, [pc, #84]	; (8001074 <MX_ADC3_Init+0x98>)
 800101e:	4a17      	ldr	r2, [pc, #92]	; (800107c <MX_ADC3_Init+0xa0>)
 8001020:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001022:	4b14      	ldr	r3, [pc, #80]	; (8001074 <MX_ADC3_Init+0x98>)
 8001024:	2200      	movs	r2, #0
 8001026:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <MX_ADC3_Init+0x98>)
 800102a:	2201      	movs	r2, #1
 800102c:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = ENABLE;
 800102e:	4b11      	ldr	r3, [pc, #68]	; (8001074 <MX_ADC3_Init+0x98>)
 8001030:	2201      	movs	r2, #1
 8001032:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001036:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <MX_ADC3_Init+0x98>)
 8001038:	2201      	movs	r2, #1
 800103a:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 800103c:	480d      	ldr	r0, [pc, #52]	; (8001074 <MX_ADC3_Init+0x98>)
 800103e:	f001 f935 	bl	80022ac <HAL_ADC_Init>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_ADC3_Init+0x70>
		Error_Handler();
 8001048:	f000 fc28 	bl	800189c <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_12;
 800104c:	230c      	movs	r3, #12
 800104e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001050:	2301      	movs	r3, #1
 8001052:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001054:	2300      	movs	r3, #0
 8001056:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8001058:	463b      	mov	r3, r7
 800105a:	4619      	mov	r1, r3
 800105c:	4805      	ldr	r0, [pc, #20]	; (8001074 <MX_ADC3_Init+0x98>)
 800105e:	f001 fa97 	bl	8002590 <HAL_ADC_ConfigChannel>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_ADC3_Init+0x90>
		Error_Handler();
 8001068:	f000 fc18 	bl	800189c <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 800106c:	bf00      	nop
 800106e:	3710      	adds	r7, #16
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20004814 	.word	0x20004814
 8001078:	40012200 	.word	0x40012200
 800107c:	0f000001 	.word	0x0f000001

08001080 <MX_CAN1_Init>:
/**
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void) {
 8001080:	b580      	push	{r7, lr}
 8001082:	b08a      	sub	sp, #40	; 0x28
 8001084:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 8001086:	4b25      	ldr	r3, [pc, #148]	; (800111c <MX_CAN1_Init+0x9c>)
 8001088:	4a25      	ldr	r2, [pc, #148]	; (8001120 <MX_CAN1_Init+0xa0>)
 800108a:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 14;
 800108c:	4b23      	ldr	r3, [pc, #140]	; (800111c <MX_CAN1_Init+0x9c>)
 800108e:	220e      	movs	r2, #14
 8001090:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001092:	4b22      	ldr	r3, [pc, #136]	; (800111c <MX_CAN1_Init+0x9c>)
 8001094:	2200      	movs	r2, #0
 8001096:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001098:	4b20      	ldr	r3, [pc, #128]	; (800111c <MX_CAN1_Init+0x9c>)
 800109a:	2200      	movs	r2, #0
 800109c:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800109e:	4b1f      	ldr	r3, [pc, #124]	; (800111c <MX_CAN1_Init+0x9c>)
 80010a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010a4:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 80010a6:	4b1d      	ldr	r3, [pc, #116]	; (800111c <MX_CAN1_Init+0x9c>)
 80010a8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80010ac:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 80010ae:	4b1b      	ldr	r3, [pc, #108]	; (800111c <MX_CAN1_Init+0x9c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 80010b4:	4b19      	ldr	r3, [pc, #100]	; (800111c <MX_CAN1_Init+0x9c>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 80010ba:	4b18      	ldr	r3, [pc, #96]	; (800111c <MX_CAN1_Init+0x9c>)
 80010bc:	2200      	movs	r2, #0
 80010be:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 80010c0:	4b16      	ldr	r3, [pc, #88]	; (800111c <MX_CAN1_Init+0x9c>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 80010c6:	4b15      	ldr	r3, [pc, #84]	; (800111c <MX_CAN1_Init+0x9c>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 80010cc:	4b13      	ldr	r3, [pc, #76]	; (800111c <MX_CAN1_Init+0x9c>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 80010d2:	4812      	ldr	r0, [pc, #72]	; (800111c <MX_CAN1_Init+0x9c>)
 80010d4:	f001 fcfc 	bl	8002ad0 <HAL_CAN_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_CAN1_Init+0x62>
		Error_Handler();
 80010de:	f000 fbdd 	bl	800189c <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */
	CAN_FilterTypeDef canfilterconfig;
	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80010e2:	2301      	movs	r3, #1
 80010e4:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0x0000;
 80010f2:	2300      	movs	r3, #0
 80010f4:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80010fe:	2300      	movs	r3, #0
 8001100:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001102:	2301      	movs	r3, #1
 8001104:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 0; // how many filters to assign to the CAN1 (master can)
 8001106:	2300      	movs	r3, #0
 8001108:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 800110a:	463b      	mov	r3, r7
 800110c:	4619      	mov	r1, r3
 800110e:	4803      	ldr	r0, [pc, #12]	; (800111c <MX_CAN1_Init+0x9c>)
 8001110:	f001 fdda 	bl	8002cc8 <HAL_CAN_ConfigFilter>
	/* USER CODE END CAN1_Init 2 */

}
 8001114:	bf00      	nop
 8001116:	3728      	adds	r7, #40	; 0x28
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	200049dc 	.word	0x200049dc
 8001120:	40006400 	.word	0x40006400

08001124 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001128:	4b12      	ldr	r3, [pc, #72]	; (8001174 <MX_I2C1_Init+0x50>)
 800112a:	4a13      	ldr	r2, [pc, #76]	; (8001178 <MX_I2C1_Init+0x54>)
 800112c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800112e:	4b11      	ldr	r3, [pc, #68]	; (8001174 <MX_I2C1_Init+0x50>)
 8001130:	4a12      	ldr	r2, [pc, #72]	; (800117c <MX_I2C1_Init+0x58>)
 8001132:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001134:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <MX_I2C1_Init+0x50>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800113a:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <MX_I2C1_Init+0x50>)
 800113c:	2200      	movs	r2, #0
 800113e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001140:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <MX_I2C1_Init+0x50>)
 8001142:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001146:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001148:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <MX_I2C1_Init+0x50>)
 800114a:	2200      	movs	r2, #0
 800114c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800114e:	4b09      	ldr	r3, [pc, #36]	; (8001174 <MX_I2C1_Init+0x50>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001154:	4b07      	ldr	r3, [pc, #28]	; (8001174 <MX_I2C1_Init+0x50>)
 8001156:	2200      	movs	r2, #0
 8001158:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800115a:	4b06      	ldr	r3, [pc, #24]	; (8001174 <MX_I2C1_Init+0x50>)
 800115c:	2200      	movs	r2, #0
 800115e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001160:	4804      	ldr	r0, [pc, #16]	; (8001174 <MX_I2C1_Init+0x50>)
 8001162:	f004 fde7 	bl	8005d34 <HAL_I2C_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_I2C1_Init+0x4c>
		Error_Handler();
 800116c:	f000 fb96 	bl	800189c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}
 8001174:	200046c8 	.word	0x200046c8
 8001178:	40005400 	.word	0x40005400
 800117c:	000186a0 	.word	0x000186a0

08001180 <MX_I2S3_Init>:
/**
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S3_Init(void) {
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
	/* USER CODE END I2S3_Init 0 */

	/* USER CODE BEGIN I2S3_Init 1 */

	/* USER CODE END I2S3_Init 1 */
	hi2s3.Instance = SPI3;
 8001184:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <MX_I2S3_Init+0x54>)
 8001186:	4a14      	ldr	r2, [pc, #80]	; (80011d8 <MX_I2S3_Init+0x58>)
 8001188:	601a      	str	r2, [r3, #0]
	hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800118a:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <MX_I2S3_Init+0x54>)
 800118c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001190:	605a      	str	r2, [r3, #4]
	hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001192:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <MX_I2S3_Init+0x54>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
	hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001198:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <MX_I2S3_Init+0x54>)
 800119a:	2200      	movs	r2, #0
 800119c:	60da      	str	r2, [r3, #12]
	hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800119e:	4b0d      	ldr	r3, [pc, #52]	; (80011d4 <MX_I2S3_Init+0x54>)
 80011a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011a4:	611a      	str	r2, [r3, #16]
	hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80011a6:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <MX_I2S3_Init+0x54>)
 80011a8:	4a0c      	ldr	r2, [pc, #48]	; (80011dc <MX_I2S3_Init+0x5c>)
 80011aa:	615a      	str	r2, [r3, #20]
	hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80011ac:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <MX_I2S3_Init+0x54>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	619a      	str	r2, [r3, #24]
	hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80011b2:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <MX_I2S3_Init+0x54>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	61da      	str	r2, [r3, #28]
	hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80011b8:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <MX_I2S3_Init+0x54>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s3) != HAL_OK) {
 80011be:	4805      	ldr	r0, [pc, #20]	; (80011d4 <MX_I2S3_Init+0x54>)
 80011c0:	f004 fefc 	bl	8005fbc <HAL_I2S_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_I2S3_Init+0x4e>
		Error_Handler();
 80011ca:	f000 fb67 	bl	800189c <Error_Handler>
	}
	/* USER CODE BEGIN I2S3_Init 2 */

	/* USER CODE END I2S3_Init 2 */

}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20004a40 	.word	0x20004a40
 80011d8:	40003c00 	.word	0x40003c00
 80011dc:	00017700 	.word	0x00017700

080011e0 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80011e4:	4b17      	ldr	r3, [pc, #92]	; (8001244 <MX_SPI1_Init+0x64>)
 80011e6:	4a18      	ldr	r2, [pc, #96]	; (8001248 <MX_SPI1_Init+0x68>)
 80011e8:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80011ea:	4b16      	ldr	r3, [pc, #88]	; (8001244 <MX_SPI1_Init+0x64>)
 80011ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011f0:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011f2:	4b14      	ldr	r3, [pc, #80]	; (8001244 <MX_SPI1_Init+0x64>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011f8:	4b12      	ldr	r3, [pc, #72]	; (8001244 <MX_SPI1_Init+0x64>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011fe:	4b11      	ldr	r3, [pc, #68]	; (8001244 <MX_SPI1_Init+0x64>)
 8001200:	2200      	movs	r2, #0
 8001202:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001204:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <MX_SPI1_Init+0x64>)
 8001206:	2200      	movs	r2, #0
 8001208:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800120a:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <MX_SPI1_Init+0x64>)
 800120c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001210:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001212:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <MX_SPI1_Init+0x64>)
 8001214:	2200      	movs	r2, #0
 8001216:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001218:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <MX_SPI1_Init+0x64>)
 800121a:	2200      	movs	r2, #0
 800121c:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <MX_SPI1_Init+0x64>)
 8001220:	2200      	movs	r2, #0
 8001222:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001224:	4b07      	ldr	r3, [pc, #28]	; (8001244 <MX_SPI1_Init+0x64>)
 8001226:	2200      	movs	r2, #0
 8001228:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <MX_SPI1_Init+0x64>)
 800122c:	220a      	movs	r2, #10
 800122e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001230:	4804      	ldr	r0, [pc, #16]	; (8001244 <MX_SPI1_Init+0x64>)
 8001232:	f006 f949 	bl	80074c8 <HAL_SPI_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_SPI1_Init+0x60>
		Error_Handler();
 800123c:	f000 fb2e 	bl	800189c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}
 8001244:	200048d4 	.word	0x200048d4
 8001248:	40013000 	.word	0x40013000

0800124c <MX_TIM10_Init>:
/**
 * @brief TIM10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM10_Init(void) {
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
	/* USER CODE END TIM10_Init 0 */

	/* USER CODE BEGIN TIM10_Init 1 */

	/* USER CODE END TIM10_Init 1 */
	htim10.Instance = TIM10;
 8001250:	4b0e      	ldr	r3, [pc, #56]	; (800128c <MX_TIM10_Init+0x40>)
 8001252:	4a0f      	ldr	r2, [pc, #60]	; (8001290 <MX_TIM10_Init+0x44>)
 8001254:	601a      	str	r2, [r3, #0]
	htim10.Init.Prescaler = 1680 - 1;
 8001256:	4b0d      	ldr	r3, [pc, #52]	; (800128c <MX_TIM10_Init+0x40>)
 8001258:	f240 628f 	movw	r2, #1679	; 0x68f
 800125c:	605a      	str	r2, [r3, #4]
	htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800125e:	4b0b      	ldr	r3, [pc, #44]	; (800128c <MX_TIM10_Init+0x40>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
	htim10.Init.Period = 65536 - 1;
 8001264:	4b09      	ldr	r3, [pc, #36]	; (800128c <MX_TIM10_Init+0x40>)
 8001266:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800126a:	60da      	str	r2, [r3, #12]
	htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800126c:	4b07      	ldr	r3, [pc, #28]	; (800128c <MX_TIM10_Init+0x40>)
 800126e:	2200      	movs	r2, #0
 8001270:	611a      	str	r2, [r3, #16]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001272:	4b06      	ldr	r3, [pc, #24]	; (800128c <MX_TIM10_Init+0x40>)
 8001274:	2200      	movs	r2, #0
 8001276:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim10) != HAL_OK) {
 8001278:	4804      	ldr	r0, [pc, #16]	; (800128c <MX_TIM10_Init+0x40>)
 800127a:	f006 f9ae 	bl	80075da <HAL_TIM_Base_Init>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_TIM10_Init+0x3c>
		Error_Handler();
 8001284:	f000 fb0a 	bl	800189c <Error_Handler>
	}
	/* USER CODE BEGIN TIM10_Init 2 */

	/* USER CODE END TIM10_Init 2 */

}
 8001288:	bf00      	nop
 800128a:	bd80      	pop	{r7, pc}
 800128c:	2000471c 	.word	0x2000471c
 8001290:	40014400 	.word	0x40014400

08001294 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001298:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <MX_USART2_UART_Init+0x4c>)
 800129a:	4a12      	ldr	r2, [pc, #72]	; (80012e4 <MX_USART2_UART_Init+0x50>)
 800129c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 256000;
 800129e:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <MX_USART2_UART_Init+0x4c>)
 80012a0:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
 80012a4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012a6:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <MX_USART2_UART_Init+0x4c>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80012ac:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <MX_USART2_UART_Init+0x4c>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80012b2:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <MX_USART2_UART_Init+0x4c>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80012b8:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <MX_USART2_UART_Init+0x4c>)
 80012ba:	220c      	movs	r2, #12
 80012bc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012be:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <MX_USART2_UART_Init+0x4c>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <MX_USART2_UART_Init+0x4c>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80012ca:	4805      	ldr	r0, [pc, #20]	; (80012e0 <MX_USART2_UART_Init+0x4c>)
 80012cc:	f006 fcb8 	bl	8007c40 <HAL_UART_Init>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80012d6:	f000 fae1 	bl	800189c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20004934 	.word	0x20004934
 80012e4:	40004400 	.word	0x40004400

080012e8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	4b14      	ldr	r3, [pc, #80]	; (8001344 <MX_DMA_Init+0x5c>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a13      	ldr	r2, [pc, #76]	; (8001344 <MX_DMA_Init+0x5c>)
 80012f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b11      	ldr	r3, [pc, #68]	; (8001344 <MX_DMA_Init+0x5c>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800130a:	2200      	movs	r2, #0
 800130c:	2105      	movs	r1, #5
 800130e:	2038      	movs	r0, #56	; 0x38
 8001310:	f002 fa1e 	bl	8003750 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001314:	2038      	movs	r0, #56	; 0x38
 8001316:	f002 fa37 	bl	8003788 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800131a:	2200      	movs	r2, #0
 800131c:	2105      	movs	r1, #5
 800131e:	2039      	movs	r0, #57	; 0x39
 8001320:	f002 fa16 	bl	8003750 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001324:	2039      	movs	r0, #57	; 0x39
 8001326:	f002 fa2f 	bl	8003788 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800132a:	2200      	movs	r2, #0
 800132c:	2105      	movs	r1, #5
 800132e:	203a      	movs	r0, #58	; 0x3a
 8001330:	f002 fa0e 	bl	8003750 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001334:	203a      	movs	r0, #58	; 0x3a
 8001336:	f002 fa27 	bl	8003788 <HAL_NVIC_EnableIRQ>

}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40023800 	.word	0x40023800

08001348 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b08c      	sub	sp, #48	; 0x30
 800134c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800134e:	f107 031c 	add.w	r3, r7, #28
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]
 800135c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	61bb      	str	r3, [r7, #24]
 8001362:	4b81      	ldr	r3, [pc, #516]	; (8001568 <MX_GPIO_Init+0x220>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	4a80      	ldr	r2, [pc, #512]	; (8001568 <MX_GPIO_Init+0x220>)
 8001368:	f043 0310 	orr.w	r3, r3, #16
 800136c:	6313      	str	r3, [r2, #48]	; 0x30
 800136e:	4b7e      	ldr	r3, [pc, #504]	; (8001568 <MX_GPIO_Init+0x220>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	f003 0310 	and.w	r3, r3, #16
 8001376:	61bb      	str	r3, [r7, #24]
 8001378:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]
 800137e:	4b7a      	ldr	r3, [pc, #488]	; (8001568 <MX_GPIO_Init+0x220>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a79      	ldr	r2, [pc, #484]	; (8001568 <MX_GPIO_Init+0x220>)
 8001384:	f043 0304 	orr.w	r3, r3, #4
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b77      	ldr	r3, [pc, #476]	; (8001568 <MX_GPIO_Init+0x220>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f003 0304 	and.w	r3, r3, #4
 8001392:	617b      	str	r3, [r7, #20]
 8001394:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	613b      	str	r3, [r7, #16]
 800139a:	4b73      	ldr	r3, [pc, #460]	; (8001568 <MX_GPIO_Init+0x220>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	4a72      	ldr	r2, [pc, #456]	; (8001568 <MX_GPIO_Init+0x220>)
 80013a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013a4:	6313      	str	r3, [r2, #48]	; 0x30
 80013a6:	4b70      	ldr	r3, [pc, #448]	; (8001568 <MX_GPIO_Init+0x220>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ae:	613b      	str	r3, [r7, #16]
 80013b0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	4b6c      	ldr	r3, [pc, #432]	; (8001568 <MX_GPIO_Init+0x220>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4a6b      	ldr	r2, [pc, #428]	; (8001568 <MX_GPIO_Init+0x220>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
 80013c2:	4b69      	ldr	r3, [pc, #420]	; (8001568 <MX_GPIO_Init+0x220>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	4b65      	ldr	r3, [pc, #404]	; (8001568 <MX_GPIO_Init+0x220>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	4a64      	ldr	r2, [pc, #400]	; (8001568 <MX_GPIO_Init+0x220>)
 80013d8:	f043 0302 	orr.w	r3, r3, #2
 80013dc:	6313      	str	r3, [r2, #48]	; 0x30
 80013de:	4b62      	ldr	r3, [pc, #392]	; (8001568 <MX_GPIO_Init+0x220>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	60bb      	str	r3, [r7, #8]
 80013e8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	4b5e      	ldr	r3, [pc, #376]	; (8001568 <MX_GPIO_Init+0x220>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a5d      	ldr	r2, [pc, #372]	; (8001568 <MX_GPIO_Init+0x220>)
 80013f4:	f043 0308 	orr.w	r3, r3, #8
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4b5b      	ldr	r3, [pc, #364]	; (8001568 <MX_GPIO_Init+0x220>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f003 0308 	and.w	r3, r3, #8
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8001406:	2200      	movs	r2, #0
 8001408:	2108      	movs	r1, #8
 800140a:	4858      	ldr	r0, [pc, #352]	; (800156c <MX_GPIO_Init+0x224>)
 800140c:	f002 feee 	bl	80041ec <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 8001410:	2201      	movs	r2, #1
 8001412:	2101      	movs	r1, #1
 8001414:	4856      	ldr	r0, [pc, #344]	; (8001570 <MX_GPIO_Init+0x228>)
 8001416:	f002 fee9 	bl	80041ec <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Ready_to_Drive_Sound_GPIO_Port, Ready_to_Drive_Sound_Pin,
 800141a:	2200      	movs	r2, #0
 800141c:	2102      	movs	r1, #2
 800141e:	4855      	ldr	r0, [pc, #340]	; (8001574 <MX_GPIO_Init+0x22c>)
 8001420:	f002 fee4 	bl	80041ec <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8001424:	2200      	movs	r2, #0
 8001426:	f24f 0110 	movw	r1, #61456	; 0xf010
 800142a:	4853      	ldr	r0, [pc, #332]	; (8001578 <MX_GPIO_Init+0x230>)
 800142c:	f002 fede 	bl	80041ec <HAL_GPIO_WritePin>
			LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : PE3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001430:	2308      	movs	r3, #8
 8001432:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001434:	2301      	movs	r3, #1
 8001436:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143c:	2300      	movs	r3, #0
 800143e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001440:	f107 031c 	add.w	r3, r7, #28
 8001444:	4619      	mov	r1, r3
 8001446:	4849      	ldr	r0, [pc, #292]	; (800156c <MX_GPIO_Init+0x224>)
 8001448:	f002 fd1c 	bl	8003e84 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800144c:	2301      	movs	r3, #1
 800144e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001450:	2301      	movs	r3, #1
 8001452:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001458:	2300      	movs	r3, #0
 800145a:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800145c:	f107 031c 	add.w	r3, r7, #28
 8001460:	4619      	mov	r1, r3
 8001462:	4843      	ldr	r0, [pc, #268]	; (8001570 <MX_GPIO_Init+0x228>)
 8001464:	f002 fd0e 	bl	8003e84 <HAL_GPIO_Init>

	/*Configure GPIO pin : Start_Button_Pin */
	GPIO_InitStruct.Pin = Start_Button_Pin;
 8001468:	2302      	movs	r3, #2
 800146a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800146c:	2300      	movs	r3, #0
 800146e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001470:	2301      	movs	r3, #1
 8001472:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(Start_Button_GPIO_Port, &GPIO_InitStruct);
 8001474:	f107 031c 	add.w	r3, r7, #28
 8001478:	4619      	mov	r1, r3
 800147a:	483d      	ldr	r0, [pc, #244]	; (8001570 <MX_GPIO_Init+0x228>)
 800147c:	f002 fd02 	bl	8003e84 <HAL_GPIO_Init>

	/*Configure GPIO pin : PDM_OUT_Pin */
	GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001480:	2308      	movs	r3, #8
 8001482:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001484:	2302      	movs	r3, #2
 8001486:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148c:	2300      	movs	r3, #0
 800148e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001490:	2305      	movs	r3, #5
 8001492:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001494:	f107 031c 	add.w	r3, r7, #28
 8001498:	4619      	mov	r1, r3
 800149a:	4835      	ldr	r0, [pc, #212]	; (8001570 <MX_GPIO_Init+0x228>)
 800149c:	f002 fcf2 	bl	8003e84 <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80014a0:	2301      	movs	r3, #1
 80014a2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80014a4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80014a8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014ae:	f107 031c 	add.w	r3, r7, #28
 80014b2:	4619      	mov	r1, r3
 80014b4:	4831      	ldr	r0, [pc, #196]	; (800157c <MX_GPIO_Init+0x234>)
 80014b6:	f002 fce5 	bl	8003e84 <HAL_GPIO_Init>

	/*Configure GPIO pin : Ready_to_Drive_Sound_Pin */
	GPIO_InitStruct.Pin = Ready_to_Drive_Sound_Pin;
 80014ba:	2302      	movs	r3, #2
 80014bc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014be:	2301      	movs	r3, #1
 80014c0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c6:	2300      	movs	r3, #0
 80014c8:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(Ready_to_Drive_Sound_GPIO_Port, &GPIO_InitStruct);
 80014ca:	f107 031c 	add.w	r3, r7, #28
 80014ce:	4619      	mov	r1, r3
 80014d0:	4828      	ldr	r0, [pc, #160]	; (8001574 <MX_GPIO_Init+0x22c>)
 80014d2:	f002 fcd7 	bl	8003e84 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014d6:	2304      	movs	r3, #4
 80014d8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014da:	2300      	movs	r3, #0
 80014dc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e2:	f107 031c 	add.w	r3, r7, #28
 80014e6:	4619      	mov	r1, r3
 80014e8:	4822      	ldr	r0, [pc, #136]	; (8001574 <MX_GPIO_Init+0x22c>)
 80014ea:	f002 fccb 	bl	8003e84 <HAL_GPIO_Init>

	/*Configure GPIO pin : CLK_IN_Pin */
	GPIO_InitStruct.Pin = CLK_IN_Pin;
 80014ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014f2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f4:	2302      	movs	r3, #2
 80014f6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fc:	2300      	movs	r3, #0
 80014fe:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001500:	2305      	movs	r3, #5
 8001502:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001504:	f107 031c 	add.w	r3, r7, #28
 8001508:	4619      	mov	r1, r3
 800150a:	481a      	ldr	r0, [pc, #104]	; (8001574 <MX_GPIO_Init+0x22c>)
 800150c:	f002 fcba 	bl	8003e84 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
	 Audio_RST_Pin */
	GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 8001510:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001514:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001516:	2301      	movs	r3, #1
 8001518:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151e:	2300      	movs	r3, #0
 8001520:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001522:	f107 031c 	add.w	r3, r7, #28
 8001526:	4619      	mov	r1, r3
 8001528:	4813      	ldr	r0, [pc, #76]	; (8001578 <MX_GPIO_Init+0x230>)
 800152a:	f002 fcab 	bl	8003e84 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800152e:	2320      	movs	r3, #32
 8001530:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001532:	2300      	movs	r3, #0
 8001534:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800153a:	f107 031c 	add.w	r3, r7, #28
 800153e:	4619      	mov	r1, r3
 8001540:	480d      	ldr	r0, [pc, #52]	; (8001578 <MX_GPIO_Init+0x230>)
 8001542:	f002 fc9f 	bl	8003e84 <HAL_GPIO_Init>

	/*Configure GPIO pin : MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001546:	2302      	movs	r3, #2
 8001548:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800154a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800154e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001554:	f107 031c 	add.w	r3, r7, #28
 8001558:	4619      	mov	r1, r3
 800155a:	4804      	ldr	r0, [pc, #16]	; (800156c <MX_GPIO_Init+0x224>)
 800155c:	f002 fc92 	bl	8003e84 <HAL_GPIO_Init>

}
 8001560:	bf00      	nop
 8001562:	3730      	adds	r7, #48	; 0x30
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40023800 	.word	0x40023800
 800156c:	40021000 	.word	0x40021000
 8001570:	40020800 	.word	0x40020800
 8001574:	40020400 	.word	0x40020400
 8001578:	40020c00 	.word	0x40020c00
 800157c:	40020000 	.word	0x40020000

08001580 <APPS_Mapping>:
	return false; //shouldn't get to here

} //end Ready_to_Drive()

static void APPS_Mapping(uint32_t *appsVal_0, uint32_t *appsVal_1,
		uint32_t apps_PP[]) {
 8001580:	b590      	push	{r4, r7, lr}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]

	apps_PP[0] = 0.0518 * (*appsVal_0) - 29.53;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff f8e1 	bl	8000758 <__aeabi_ui2d>
 8001596:	a324      	add	r3, pc, #144	; (adr r3, 8001628 <APPS_Mapping+0xa8>)
 8001598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159c:	f7fe fe70 	bl	8000280 <__aeabi_dmul>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	4610      	mov	r0, r2
 80015a6:	4619      	mov	r1, r3
 80015a8:	a321      	add	r3, pc, #132	; (adr r3, 8001630 <APPS_Mapping+0xb0>)
 80015aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ae:	f7fe ff95 	bl	80004dc <__aeabi_dsub>
 80015b2:	4602      	mov	r2, r0
 80015b4:	460b      	mov	r3, r1
 80015b6:	4610      	mov	r0, r2
 80015b8:	4619      	mov	r1, r3
 80015ba:	f7ff f947 	bl	800084c <__aeabi_d2uiz>
 80015be:	4602      	mov	r2, r0
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	601a      	str	r2, [r3, #0]

	if (apps_PP[0] < 0) {
		apps_PP[0] = 0;
	}
	if (apps_PP[0] > 100) {
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2b64      	cmp	r3, #100	; 0x64
 80015ca:	d902      	bls.n	80015d2 <APPS_Mapping+0x52>
		apps_PP[0] = 100;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2264      	movs	r2, #100	; 0x64
 80015d0:	601a      	str	r2, [r3, #0]
	}

	apps_PP[1] = 0.038 * (*appsVal_1) - 35.25;
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff f8be 	bl	8000758 <__aeabi_ui2d>
 80015dc:	a316      	add	r3, pc, #88	; (adr r3, 8001638 <APPS_Mapping+0xb8>)
 80015de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e2:	f7fe fe4d 	bl	8000280 <__aeabi_dmul>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	4610      	mov	r0, r2
 80015ec:	4619      	mov	r1, r3
 80015ee:	a314      	add	r3, pc, #80	; (adr r3, 8001640 <APPS_Mapping+0xc0>)
 80015f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f4:	f7fe ff72 	bl	80004dc <__aeabi_dsub>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	4610      	mov	r0, r2
 80015fe:	4619      	mov	r1, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	1d1c      	adds	r4, r3, #4
 8001604:	f7ff f922 	bl	800084c <__aeabi_d2uiz>
 8001608:	4603      	mov	r3, r0
 800160a:	6023      	str	r3, [r4, #0]

	if (apps_PP[1] < 0) {
		apps_PP[1] = 0;
	}
	if (apps_PP[1] > 100) {
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3304      	adds	r3, #4
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2b64      	cmp	r3, #100	; 0x64
 8001614:	d903      	bls.n	800161e <APPS_Mapping+0x9e>
		apps_PP[1] = 100;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	3304      	adds	r3, #4
 800161a:	2264      	movs	r2, #100	; 0x64
 800161c:	601a      	str	r2, [r3, #0]
	}

} //end APPS_Mapping()
 800161e:	bf00      	nop
 8001620:	3714      	adds	r7, #20
 8001622:	46bd      	mov	sp, r7
 8001624:	bd90      	pop	{r4, r7, pc}
 8001626:	bf00      	nop
 8001628:	93dd97f6 	.word	0x93dd97f6
 800162c:	3faa8587 	.word	0x3faa8587
 8001630:	147ae148 	.word	0x147ae148
 8001634:	403d87ae 	.word	0x403d87ae
 8001638:	6a7ef9db 	.word	0x6a7ef9db
 800163c:	3fa374bc 	.word	0x3fa374bc
 8001640:	00000000 	.word	0x00000000
 8001644:	4041a000 	.word	0x4041a000

08001648 <startLEDTask>:
 * @brief  Function implementing the ledTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_startLEDTask */
void startLEDTask(void const *argument) {
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
	/* init code for USB_HOST */
	MX_USB_HOST_Init();
 8001650:	f00c fe4c 	bl	800e2ec <MX_USB_HOST_Init>
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 8001654:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001658:	4803      	ldr	r0, [pc, #12]	; (8001668 <startLEDTask+0x20>)
 800165a:	f002 fde0 	bl	800421e <HAL_GPIO_TogglePin>
		osDelay(1000);
 800165e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001662:	f009 ff8a 	bl	800b57a <osDelay>
		HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 8001666:	e7f5      	b.n	8001654 <startLEDTask+0xc>
 8001668:	40020c00 	.word	0x40020c00

0800166c <startUART_Task>:
 * @brief Function implementing the uartTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startUART_Task */
void startUART_Task(void const *argument) {
 800166c:	b590      	push	{r4, r7, lr}
 800166e:	b0cb      	sub	sp, #300	; 0x12c
 8001670:	af02      	add	r7, sp, #8
 8001672:	1d3b      	adds	r3, r7, #4
 8001674:	6018      	str	r0, [r3, #0]
	/* USER CODE BEGIN startUART_Task */
	char startBtn[16] = "";
 8001676:	2300      	movs	r3, #0
 8001678:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800167c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
	char msg[256];
	uint32_t apps_PP[2]; //to store APPS Pedal Position Values (in %)

	/* Infinite loop */
	for (;;) {
		if (!HAL_GPIO_ReadPin(GPIOC, Start_Button_Pin)) {
 8001688:	2102      	movs	r1, #2
 800168a:	4820      	ldr	r0, [pc, #128]	; (800170c <startUART_Task+0xa0>)
 800168c:	f002 fd96 	bl	80041bc <HAL_GPIO_ReadPin>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d107      	bne.n	80016a6 <startUART_Task+0x3a>
			strcpy(startBtn, "Pressed");
 8001696:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800169a:	4a1d      	ldr	r2, [pc, #116]	; (8001710 <startUART_Task+0xa4>)
 800169c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016a0:	e883 0003 	stmia.w	r3, {r0, r1}
 80016a4:	e005      	b.n	80016b2 <startUART_Task+0x46>
		} else {
			strcpy(startBtn, "Not Pressed");
 80016a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80016aa:	4a1a      	ldr	r2, [pc, #104]	; (8001714 <startUART_Task+0xa8>)
 80016ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80016ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}

		APPS_Mapping(&appsVal[0], &appsVal[1], apps_PP);
 80016b2:	f107 0308 	add.w	r3, r7, #8
 80016b6:	461a      	mov	r2, r3
 80016b8:	4917      	ldr	r1, [pc, #92]	; (8001718 <startUART_Task+0xac>)
 80016ba:	4818      	ldr	r0, [pc, #96]	; (800171c <startUART_Task+0xb0>)
 80016bc:	f7ff ff60 	bl	8001580 <APPS_Mapping>

		//send out APPS values + APPS Pedal Position over UART
		sprintf(msg,
 80016c0:	4b16      	ldr	r3, [pc, #88]	; (800171c <startUART_Task+0xb0>)
 80016c2:	6819      	ldr	r1, [r3, #0]
 80016c4:	4b15      	ldr	r3, [pc, #84]	; (800171c <startUART_Task+0xb0>)
 80016c6:	685c      	ldr	r4, [r3, #4]
 80016c8:	f107 0308 	add.w	r3, r7, #8
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f107 0208 	add.w	r2, r7, #8
 80016d2:	6852      	ldr	r2, [r2, #4]
 80016d4:	f107 0010 	add.w	r0, r7, #16
 80016d8:	9201      	str	r2, [sp, #4]
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	4623      	mov	r3, r4
 80016de:	460a      	mov	r2, r1
 80016e0:	490f      	ldr	r1, [pc, #60]	; (8001720 <startUART_Task+0xb4>)
 80016e2:	f00d fa7b 	bl	800ebdc <siprintf>
				"APPS_1 = %lu \t APPS_2 = %lu \t PP1 = %lu \t PP2 = %lu \r\n",
				appsVal[0], appsVal[1], apps_PP[0], apps_PP[1]);
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80016e6:	f107 0310 	add.w	r3, r7, #16
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7fe fd70 	bl	80001d0 <strlen>
 80016f0:	4603      	mov	r3, r0
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	f107 0110 	add.w	r1, r7, #16
 80016f8:	f04f 33ff 	mov.w	r3, #4294967295
 80016fc:	4809      	ldr	r0, [pc, #36]	; (8001724 <startUART_Task+0xb8>)
 80016fe:	f006 faec 	bl	8007cda <HAL_UART_Transmit>
		osDelay(100);
 8001702:	2064      	movs	r0, #100	; 0x64
 8001704:	f009 ff39 	bl	800b57a <osDelay>
		if (!HAL_GPIO_ReadPin(GPIOC, Start_Button_Pin)) {
 8001708:	e7be      	b.n	8001688 <startUART_Task+0x1c>
 800170a:	bf00      	nop
 800170c:	40020800 	.word	0x40020800
 8001710:	0800f360 	.word	0x0800f360
 8001714:	0800f368 	.word	0x0800f368
 8001718:	20004a3c 	.word	0x20004a3c
 800171c:	20004a38 	.word	0x20004a38
 8001720:	0800f374 	.word	0x0800f374
 8001724:	20004934 	.word	0x20004934

08001728 <startTorqueCommand>:
 * @brief Function implementing the Torque_Command thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startTorqueCommand */
void startTorqueCommand(void const *argument) {
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
	uint32_t apps_PP[2]; //to store APPS Pedal Position Values (in %)

	//First need to send Drive Enable command in order to gain control over the motor controller
	//Motor controller will timeout if it dosn't receive Drive Enable command or dosn't periodically receive Set Current command
	//We can send the Drive Enable command once and then periodically send Set Current command to prevent it from timing out.
	TxData[0] = 0x24; //Message ID for "Drive Enable" for motor controller
 8001730:	4b3c      	ldr	r3, [pc, #240]	; (8001824 <startTorqueCommand+0xfc>)
 8001732:	2224      	movs	r2, #36	; 0x24
 8001734:	701a      	strb	r2, [r3, #0]
	TxData[1] = 0x1F; //Node ID for Standard CAN message
 8001736:	4b3b      	ldr	r3, [pc, #236]	; (8001824 <startTorqueCommand+0xfc>)
 8001738:	221f      	movs	r2, #31
 800173a:	705a      	strb	r2, [r3, #1]
	TxData[2] = 1; // 1: TRUE enables drive, 0: FALSE disables drive
 800173c:	4b39      	ldr	r3, [pc, #228]	; (8001824 <startTorqueCommand+0xfc>)
 800173e:	2201      	movs	r2, #1
 8001740:	709a      	strb	r2, [r3, #2]
//		Error_Handler();
//	}

	/* Infinite loop */
	for (;;) {
		HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 8001742:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001746:	4838      	ldr	r0, [pc, #224]	; (8001828 <startTorqueCommand+0x100>)
 8001748:	f002 fd69 	bl	800421e <HAL_GPIO_TogglePin>

		if ((appsVal[0] < APPS_0_MIN) || (appsVal[0] > APPS_0_MAX)) {
 800174c:	4b37      	ldr	r3, [pc, #220]	; (800182c <startTorqueCommand+0x104>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	22c8      	movs	r2, #200	; 0xc8
 8001752:	4293      	cmp	r3, r2
 8001754:	d305      	bcc.n	8001762 <startTorqueCommand+0x3a>
 8001756:	4b35      	ldr	r3, [pc, #212]	; (800182c <startTorqueCommand+0x104>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 800175e:	4293      	cmp	r3, r2
 8001760:	d902      	bls.n	8001768 <startTorqueCommand+0x40>
			//shutdown power to motor
			APPS_Failure = true;
 8001762:	4b33      	ldr	r3, [pc, #204]	; (8001830 <startTorqueCommand+0x108>)
 8001764:	2201      	movs	r2, #1
 8001766:	701a      	strb	r2, [r3, #0]
			//need to send out CAN message to set motor torque to zero
		}

		if ((appsVal[1] < APPS_1_MIN) || (appsVal[1] > APPS_1_MAX)) {
 8001768:	4b30      	ldr	r3, [pc, #192]	; (800182c <startTorqueCommand+0x104>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001770:	4293      	cmp	r3, r2
 8001772:	d305      	bcc.n	8001780 <startTorqueCommand+0x58>
 8001774:	4b2d      	ldr	r3, [pc, #180]	; (800182c <startTorqueCommand+0x104>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f640 723c 	movw	r2, #3900	; 0xf3c
 800177c:	4293      	cmp	r3, r2
 800177e:	d903      	bls.n	8001788 <startTorqueCommand+0x60>
			//shutdown power to motor
			APPS_Failure = true;
 8001780:	4b2b      	ldr	r3, [pc, #172]	; (8001830 <startTorqueCommand+0x108>)
 8001782:	2201      	movs	r2, #1
 8001784:	701a      	strb	r2, [r3, #0]
 8001786:	e048      	b.n	800181a <startTorqueCommand+0xf2>
			//need to send out CAN message to set motor torque to zero
		}

		else {
			APPS_Failure = false;
 8001788:	4b29      	ldr	r3, [pc, #164]	; (8001830 <startTorqueCommand+0x108>)
 800178a:	2200      	movs	r2, #0
 800178c:	701a      	strb	r2, [r3, #0]

			APPS_Mapping(&appsVal[0], &appsVal[1], apps_PP);
 800178e:	f107 0308 	add.w	r3, r7, #8
 8001792:	461a      	mov	r2, r3
 8001794:	4927      	ldr	r1, [pc, #156]	; (8001834 <startTorqueCommand+0x10c>)
 8001796:	4825      	ldr	r0, [pc, #148]	; (800182c <startTorqueCommand+0x104>)
 8001798:	f7ff fef2 	bl	8001580 <APPS_Mapping>

			if (abs(apps_PP[0] - apps_PP[1]) <= 10) {
 800179c:	68ba      	ldr	r2, [r7, #8]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	f113 0f0a 	cmn.w	r3, #10
 80017a6:	db1d      	blt.n	80017e4 <startTorqueCommand+0xbc>
 80017a8:	68ba      	ldr	r2, [r7, #8]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b0a      	cmp	r3, #10
 80017b0:	dc18      	bgt.n	80017e4 <startTorqueCommand+0xbc>
				//reset the 100ms timer if started since there is no >10% implausibility
				HAL_TIM_Base_Stop(&htim10);
 80017b2:	4821      	ldr	r0, [pc, #132]	; (8001838 <startTorqueCommand+0x110>)
 80017b4:	f005 ffc8 	bl	8007748 <HAL_TIM_Base_Stop>
				timer_100ms = 0;
 80017b8:	4b20      	ldr	r3, [pc, #128]	; (800183c <startTorqueCommand+0x114>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	801a      	strh	r2, [r3, #0]
				implausibility = false;
 80017be:	4b20      	ldr	r3, [pc, #128]	; (8001840 <startTorqueCommand+0x118>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	701a      	strb	r2, [r3, #0]
				//osTimerStop(implausibility_TimerHandle);

				//Broadcast messages sent to motor controller to control motor torque
				TxData[0] = 0x1A; //Message ID for "Set AC Current" for motor controller
 80017c4:	4b17      	ldr	r3, [pc, #92]	; (8001824 <startTorqueCommand+0xfc>)
 80017c6:	221a      	movs	r2, #26
 80017c8:	701a      	strb	r2, [r3, #0]
				TxData[1] = 0x1F; //Node ID for Standard CAN message
 80017ca:	4b16      	ldr	r3, [pc, #88]	; (8001824 <startTorqueCommand+0xfc>)
 80017cc:	221f      	movs	r2, #31
 80017ce:	705a      	strb	r2, [r3, #1]
				TxData[2] = 10 * apps_PP[0]; //Will take the linear sensor as the primary sensor for sending signals to motor controller. (Needs to be scaled by 10 first)
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	461a      	mov	r2, r3
 80017d6:	0092      	lsls	r2, r2, #2
 80017d8:	4413      	add	r3, r2
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	b2da      	uxtb	r2, r3
 80017de:	4b11      	ldr	r3, [pc, #68]	; (8001824 <startTorqueCommand+0xfc>)
 80017e0:	709a      	strb	r2, [r3, #2]

				if (!APPS_Failure) {
 80017e2:	e01a      	b.n	800181a <startTorqueCommand+0xf2>
				//HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
				//osTimerStart(implausibility_TimerHandle, 100);
				//Should only get here if there is a >10% difference between APPS

				// check to see if timer has run for >100ms then send CAN message to set motor torque to zero
				if(implausibility) {
 80017e4:	4b16      	ldr	r3, [pc, #88]	; (8001840 <startTorqueCommand+0x118>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d00a      	beq.n	8001802 <startTorqueCommand+0xda>
					if (__HAL_TIM_GET_COUNTER(&htim10) - timer_100ms >= 10000) {
 80017ec:	4b12      	ldr	r3, [pc, #72]	; (8001838 <startTorqueCommand+0x110>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f2:	4a12      	ldr	r2, [pc, #72]	; (800183c <startTorqueCommand+0x114>)
 80017f4:	8812      	ldrh	r2, [r2, #0]
 80017f6:	1a9b      	subs	r3, r3, r2
 80017f8:	f242 720f 	movw	r2, #9999	; 0x270f
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d80c      	bhi.n	800181a <startTorqueCommand+0xf2>
						//shutdown power to motor
					}
					else {
						continue; //go back to beginning of loop (not sure if needed)
 8001800:	e00e      	b.n	8001820 <startTorqueCommand+0xf8>
					}
				}//end if
				else {
				//start 100ms timer if not started
				HAL_TIM_Base_Start(&htim10);
 8001802:	480d      	ldr	r0, [pc, #52]	; (8001838 <startTorqueCommand+0x110>)
 8001804:	f005 ff38 	bl	8007678 <HAL_TIM_Base_Start>
				timer_100ms = __HAL_TIM_GET_COUNTER(&htim10);
 8001808:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <startTorqueCommand+0x110>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180e:	b29a      	uxth	r2, r3
 8001810:	4b0a      	ldr	r3, [pc, #40]	; (800183c <startTorqueCommand+0x114>)
 8001812:	801a      	strh	r2, [r3, #0]
				implausibility = true;
 8001814:	4b0a      	ldr	r3, [pc, #40]	; (8001840 <startTorqueCommand+0x118>)
 8001816:	2201      	movs	r2, #1
 8001818:	701a      	strb	r2, [r3, #0]

			} //end else

		} //end else

		osDelay(50); //May need to reduce the delay between sending out CAN messages
 800181a:	2032      	movs	r0, #50	; 0x32
 800181c:	f009 fead 	bl	800b57a <osDelay>
		HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 8001820:	e78f      	b.n	8001742 <startTorqueCommand+0x1a>
 8001822:	bf00      	nop
 8001824:	200048c4 	.word	0x200048c4
 8001828:	40020c00 	.word	0x40020c00
 800182c:	20004a38 	.word	0x20004a38
 8001830:	20000818 	.word	0x20000818
 8001834:	20004a3c 	.word	0x20004a3c
 8001838:	2000471c 	.word	0x2000471c
 800183c:	200048cc 	.word	0x200048cc
 8001840:	20000819 	.word	0x20000819

08001844 <startBPSCheck>:
 * @brief Function implementing the BPS_Limit_Check thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startBPSCheck */
void startBPSCheck(void const *argument) {
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN startBPSCheck */
	/* Infinite loop */
	for (;;) {
		if ((bpsVal[0] < bps_MIN) || (bpsVal[0] > bps_MAX)) {
 800184c:	4b04      	ldr	r3, [pc, #16]	; (8001860 <startBPSCheck+0x1c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001854:	4293      	cmp	r3, r2
			//Shutdown power to motor
			//osThreadSuspend(Torque_CommandHandle);
		}

		osDelay(100);
 8001856:	2064      	movs	r0, #100	; 0x64
 8001858:	f009 fe8f 	bl	800b57a <osDelay>
		if ((bpsVal[0] < bps_MIN) || (bpsVal[0] > bps_MAX)) {
 800185c:	e7f6      	b.n	800184c <startBPSCheck+0x8>
 800185e:	bf00      	nop
 8001860:	200048bc 	.word	0x200048bc

08001864 <OTCallback>:
	}
	/* USER CODE END startBPSCheck */
}

/* OTCallback function */
void OTCallback(void const *argument) {
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
//	osDelay(25);
//	HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
//once 100ms timer expires, shutdown power to motor
	/* USER CODE END OTCallback */
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a04      	ldr	r2, [pc, #16]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d101      	bne.n	800188e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800188a:	f000 fccb 	bl	8002224 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40010000 	.word	0x40010000

0800189c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018a0:	b672      	cpsid	i
}
 80018a2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80018a4:	e7fe      	b.n	80018a4 <Error_Handler+0x8>
	...

080018a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	607b      	str	r3, [r7, #4]
 80018b2:	4b12      	ldr	r3, [pc, #72]	; (80018fc <HAL_MspInit+0x54>)
 80018b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b6:	4a11      	ldr	r2, [pc, #68]	; (80018fc <HAL_MspInit+0x54>)
 80018b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018bc:	6453      	str	r3, [r2, #68]	; 0x44
 80018be:	4b0f      	ldr	r3, [pc, #60]	; (80018fc <HAL_MspInit+0x54>)
 80018c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018c6:	607b      	str	r3, [r7, #4]
 80018c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	603b      	str	r3, [r7, #0]
 80018ce:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <HAL_MspInit+0x54>)
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	4a0a      	ldr	r2, [pc, #40]	; (80018fc <HAL_MspInit+0x54>)
 80018d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d8:	6413      	str	r3, [r2, #64]	; 0x40
 80018da:	4b08      	ldr	r3, [pc, #32]	; (80018fc <HAL_MspInit+0x54>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e2:	603b      	str	r3, [r7, #0]
 80018e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018e6:	2200      	movs	r2, #0
 80018e8:	210f      	movs	r1, #15
 80018ea:	f06f 0001 	mvn.w	r0, #1
 80018ee:	f001 ff2f 	bl	8003750 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40023800 	.word	0x40023800

08001900 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b08e      	sub	sp, #56	; 0x38
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001908:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	60da      	str	r2, [r3, #12]
 8001916:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a9b      	ldr	r2, [pc, #620]	; (8001b8c <HAL_ADC_MspInit+0x28c>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d161      	bne.n	80019e6 <HAL_ADC_MspInit+0xe6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	623b      	str	r3, [r7, #32]
 8001926:	4b9a      	ldr	r3, [pc, #616]	; (8001b90 <HAL_ADC_MspInit+0x290>)
 8001928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192a:	4a99      	ldr	r2, [pc, #612]	; (8001b90 <HAL_ADC_MspInit+0x290>)
 800192c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001930:	6453      	str	r3, [r2, #68]	; 0x44
 8001932:	4b97      	ldr	r3, [pc, #604]	; (8001b90 <HAL_ADC_MspInit+0x290>)
 8001934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800193a:	623b      	str	r3, [r7, #32]
 800193c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	61fb      	str	r3, [r7, #28]
 8001942:	4b93      	ldr	r3, [pc, #588]	; (8001b90 <HAL_ADC_MspInit+0x290>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	4a92      	ldr	r2, [pc, #584]	; (8001b90 <HAL_ADC_MspInit+0x290>)
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	6313      	str	r3, [r2, #48]	; 0x30
 800194e:	4b90      	ldr	r3, [pc, #576]	; (8001b90 <HAL_ADC_MspInit+0x290>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	61fb      	str	r3, [r7, #28]
 8001958:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800195a:	2302      	movs	r3, #2
 800195c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800195e:	2303      	movs	r3, #3
 8001960:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800196a:	4619      	mov	r1, r3
 800196c:	4889      	ldr	r0, [pc, #548]	; (8001b94 <HAL_ADC_MspInit+0x294>)
 800196e:	f002 fa89 	bl	8003e84 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001972:	4b89      	ldr	r3, [pc, #548]	; (8001b98 <HAL_ADC_MspInit+0x298>)
 8001974:	4a89      	ldr	r2, [pc, #548]	; (8001b9c <HAL_ADC_MspInit+0x29c>)
 8001976:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001978:	4b87      	ldr	r3, [pc, #540]	; (8001b98 <HAL_ADC_MspInit+0x298>)
 800197a:	2200      	movs	r2, #0
 800197c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800197e:	4b86      	ldr	r3, [pc, #536]	; (8001b98 <HAL_ADC_MspInit+0x298>)
 8001980:	2200      	movs	r2, #0
 8001982:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001984:	4b84      	ldr	r3, [pc, #528]	; (8001b98 <HAL_ADC_MspInit+0x298>)
 8001986:	2200      	movs	r2, #0
 8001988:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800198a:	4b83      	ldr	r3, [pc, #524]	; (8001b98 <HAL_ADC_MspInit+0x298>)
 800198c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001990:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001992:	4b81      	ldr	r3, [pc, #516]	; (8001b98 <HAL_ADC_MspInit+0x298>)
 8001994:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001998:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800199a:	4b7f      	ldr	r3, [pc, #508]	; (8001b98 <HAL_ADC_MspInit+0x298>)
 800199c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019a0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80019a2:	4b7d      	ldr	r3, [pc, #500]	; (8001b98 <HAL_ADC_MspInit+0x298>)
 80019a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019a8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80019aa:	4b7b      	ldr	r3, [pc, #492]	; (8001b98 <HAL_ADC_MspInit+0x298>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80019b0:	4b79      	ldr	r3, [pc, #484]	; (8001b98 <HAL_ADC_MspInit+0x298>)
 80019b2:	2204      	movs	r2, #4
 80019b4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80019b6:	4b78      	ldr	r3, [pc, #480]	; (8001b98 <HAL_ADC_MspInit+0x298>)
 80019b8:	2203      	movs	r2, #3
 80019ba:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 80019bc:	4b76      	ldr	r3, [pc, #472]	; (8001b98 <HAL_ADC_MspInit+0x298>)
 80019be:	2200      	movs	r2, #0
 80019c0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80019c2:	4b75      	ldr	r3, [pc, #468]	; (8001b98 <HAL_ADC_MspInit+0x298>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80019c8:	4873      	ldr	r0, [pc, #460]	; (8001b98 <HAL_ADC_MspInit+0x298>)
 80019ca:	f001 feeb 	bl	80037a4 <HAL_DMA_Init>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <HAL_ADC_MspInit+0xd8>
    {
      Error_Handler();
 80019d4:	f7ff ff62 	bl	800189c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4a6f      	ldr	r2, [pc, #444]	; (8001b98 <HAL_ADC_MspInit+0x298>)
 80019dc:	639a      	str	r2, [r3, #56]	; 0x38
 80019de:	4a6e      	ldr	r2, [pc, #440]	; (8001b98 <HAL_ADC_MspInit+0x298>)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80019e4:	e0ce      	b.n	8001b84 <HAL_ADC_MspInit+0x284>
  else if(hadc->Instance==ADC2)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a6d      	ldr	r2, [pc, #436]	; (8001ba0 <HAL_ADC_MspInit+0x2a0>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d162      	bne.n	8001ab6 <HAL_ADC_MspInit+0x1b6>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80019f0:	2300      	movs	r3, #0
 80019f2:	61bb      	str	r3, [r7, #24]
 80019f4:	4b66      	ldr	r3, [pc, #408]	; (8001b90 <HAL_ADC_MspInit+0x290>)
 80019f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f8:	4a65      	ldr	r2, [pc, #404]	; (8001b90 <HAL_ADC_MspInit+0x290>)
 80019fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019fe:	6453      	str	r3, [r2, #68]	; 0x44
 8001a00:	4b63      	ldr	r3, [pc, #396]	; (8001b90 <HAL_ADC_MspInit+0x290>)
 8001a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a08:	61bb      	str	r3, [r7, #24]
 8001a0a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	4b5f      	ldr	r3, [pc, #380]	; (8001b90 <HAL_ADC_MspInit+0x290>)
 8001a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a14:	4a5e      	ldr	r2, [pc, #376]	; (8001b90 <HAL_ADC_MspInit+0x290>)
 8001a16:	f043 0301 	orr.w	r3, r3, #1
 8001a1a:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1c:	4b5c      	ldr	r3, [pc, #368]	; (8001b90 <HAL_ADC_MspInit+0x290>)
 8001a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	617b      	str	r3, [r7, #20]
 8001a26:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a28:	2308      	movs	r3, #8
 8001a2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4856      	ldr	r0, [pc, #344]	; (8001b94 <HAL_ADC_MspInit+0x294>)
 8001a3c:	f002 fa22 	bl	8003e84 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8001a40:	4b58      	ldr	r3, [pc, #352]	; (8001ba4 <HAL_ADC_MspInit+0x2a4>)
 8001a42:	4a59      	ldr	r2, [pc, #356]	; (8001ba8 <HAL_ADC_MspInit+0x2a8>)
 8001a44:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8001a46:	4b57      	ldr	r3, [pc, #348]	; (8001ba4 <HAL_ADC_MspInit+0x2a4>)
 8001a48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a4c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a4e:	4b55      	ldr	r3, [pc, #340]	; (8001ba4 <HAL_ADC_MspInit+0x2a4>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a54:	4b53      	ldr	r3, [pc, #332]	; (8001ba4 <HAL_ADC_MspInit+0x2a4>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001a5a:	4b52      	ldr	r3, [pc, #328]	; (8001ba4 <HAL_ADC_MspInit+0x2a4>)
 8001a5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a60:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a62:	4b50      	ldr	r3, [pc, #320]	; (8001ba4 <HAL_ADC_MspInit+0x2a4>)
 8001a64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a68:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a6a:	4b4e      	ldr	r3, [pc, #312]	; (8001ba4 <HAL_ADC_MspInit+0x2a4>)
 8001a6c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a70:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001a72:	4b4c      	ldr	r3, [pc, #304]	; (8001ba4 <HAL_ADC_MspInit+0x2a4>)
 8001a74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a78:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001a7a:	4b4a      	ldr	r3, [pc, #296]	; (8001ba4 <HAL_ADC_MspInit+0x2a4>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001a80:	4b48      	ldr	r3, [pc, #288]	; (8001ba4 <HAL_ADC_MspInit+0x2a4>)
 8001a82:	2204      	movs	r2, #4
 8001a84:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001a86:	4b47      	ldr	r3, [pc, #284]	; (8001ba4 <HAL_ADC_MspInit+0x2a4>)
 8001a88:	2203      	movs	r2, #3
 8001a8a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc2.Init.MemBurst = DMA_MBURST_SINGLE;
 8001a8c:	4b45      	ldr	r3, [pc, #276]	; (8001ba4 <HAL_ADC_MspInit+0x2a4>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001a92:	4b44      	ldr	r3, [pc, #272]	; (8001ba4 <HAL_ADC_MspInit+0x2a4>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001a98:	4842      	ldr	r0, [pc, #264]	; (8001ba4 <HAL_ADC_MspInit+0x2a4>)
 8001a9a:	f001 fe83 	bl	80037a4 <HAL_DMA_Init>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <HAL_ADC_MspInit+0x1a8>
      Error_Handler();
 8001aa4:	f7ff fefa 	bl	800189c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4a3e      	ldr	r2, [pc, #248]	; (8001ba4 <HAL_ADC_MspInit+0x2a4>)
 8001aac:	639a      	str	r2, [r3, #56]	; 0x38
 8001aae:	4a3d      	ldr	r2, [pc, #244]	; (8001ba4 <HAL_ADC_MspInit+0x2a4>)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001ab4:	e066      	b.n	8001b84 <HAL_ADC_MspInit+0x284>
  else if(hadc->Instance==ADC3)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a3c      	ldr	r2, [pc, #240]	; (8001bac <HAL_ADC_MspInit+0x2ac>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d161      	bne.n	8001b84 <HAL_ADC_MspInit+0x284>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	613b      	str	r3, [r7, #16]
 8001ac4:	4b32      	ldr	r3, [pc, #200]	; (8001b90 <HAL_ADC_MspInit+0x290>)
 8001ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac8:	4a31      	ldr	r2, [pc, #196]	; (8001b90 <HAL_ADC_MspInit+0x290>)
 8001aca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ace:	6453      	str	r3, [r2, #68]	; 0x44
 8001ad0:	4b2f      	ldr	r3, [pc, #188]	; (8001b90 <HAL_ADC_MspInit+0x290>)
 8001ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ad8:	613b      	str	r3, [r7, #16]
 8001ada:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001adc:	2300      	movs	r3, #0
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	4b2b      	ldr	r3, [pc, #172]	; (8001b90 <HAL_ADC_MspInit+0x290>)
 8001ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae4:	4a2a      	ldr	r2, [pc, #168]	; (8001b90 <HAL_ADC_MspInit+0x290>)
 8001ae6:	f043 0304 	orr.w	r3, r3, #4
 8001aea:	6313      	str	r3, [r2, #48]	; 0x30
 8001aec:	4b28      	ldr	r3, [pc, #160]	; (8001b90 <HAL_ADC_MspInit+0x290>)
 8001aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001af8:	2304      	movs	r3, #4
 8001afa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001afc:	2303      	movs	r3, #3
 8001afe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b00:	2300      	movs	r3, #0
 8001b02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4829      	ldr	r0, [pc, #164]	; (8001bb0 <HAL_ADC_MspInit+0x2b0>)
 8001b0c:	f002 f9ba 	bl	8003e84 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8001b10:	4b28      	ldr	r3, [pc, #160]	; (8001bb4 <HAL_ADC_MspInit+0x2b4>)
 8001b12:	4a29      	ldr	r2, [pc, #164]	; (8001bb8 <HAL_ADC_MspInit+0x2b8>)
 8001b14:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8001b16:	4b27      	ldr	r3, [pc, #156]	; (8001bb4 <HAL_ADC_MspInit+0x2b4>)
 8001b18:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b1c:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b1e:	4b25      	ldr	r3, [pc, #148]	; (8001bb4 <HAL_ADC_MspInit+0x2b4>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b24:	4b23      	ldr	r3, [pc, #140]	; (8001bb4 <HAL_ADC_MspInit+0x2b4>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001b2a:	4b22      	ldr	r3, [pc, #136]	; (8001bb4 <HAL_ADC_MspInit+0x2b4>)
 8001b2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b30:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b32:	4b20      	ldr	r3, [pc, #128]	; (8001bb4 <HAL_ADC_MspInit+0x2b4>)
 8001b34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b38:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b3a:	4b1e      	ldr	r3, [pc, #120]	; (8001bb4 <HAL_ADC_MspInit+0x2b4>)
 8001b3c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b40:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001b42:	4b1c      	ldr	r3, [pc, #112]	; (8001bb4 <HAL_ADC_MspInit+0x2b4>)
 8001b44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b48:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001b4a:	4b1a      	ldr	r3, [pc, #104]	; (8001bb4 <HAL_ADC_MspInit+0x2b4>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001b50:	4b18      	ldr	r3, [pc, #96]	; (8001bb4 <HAL_ADC_MspInit+0x2b4>)
 8001b52:	2204      	movs	r2, #4
 8001b54:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001b56:	4b17      	ldr	r3, [pc, #92]	; (8001bb4 <HAL_ADC_MspInit+0x2b4>)
 8001b58:	2203      	movs	r2, #3
 8001b5a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc3.Init.MemBurst = DMA_MBURST_SINGLE;
 8001b5c:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <HAL_ADC_MspInit+0x2b4>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001b62:	4b14      	ldr	r3, [pc, #80]	; (8001bb4 <HAL_ADC_MspInit+0x2b4>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001b68:	4812      	ldr	r0, [pc, #72]	; (8001bb4 <HAL_ADC_MspInit+0x2b4>)
 8001b6a:	f001 fe1b 	bl	80037a4 <HAL_DMA_Init>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <HAL_ADC_MspInit+0x278>
      Error_Handler();
 8001b74:	f7ff fe92 	bl	800189c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4a0e      	ldr	r2, [pc, #56]	; (8001bb4 <HAL_ADC_MspInit+0x2b4>)
 8001b7c:	639a      	str	r2, [r3, #56]	; 0x38
 8001b7e:	4a0d      	ldr	r2, [pc, #52]	; (8001bb4 <HAL_ADC_MspInit+0x2b4>)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001b84:	bf00      	nop
 8001b86:	3738      	adds	r7, #56	; 0x38
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40012000 	.word	0x40012000
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40020000 	.word	0x40020000
 8001b98:	2000485c 	.word	0x2000485c
 8001b9c:	40026410 	.word	0x40026410
 8001ba0:	40012100 	.word	0x40012100
 8001ba4:	20004978 	.word	0x20004978
 8001ba8:	40026440 	.word	0x40026440
 8001bac:	40012200 	.word	0x40012200
 8001bb0:	40020800 	.word	0x40020800
 8001bb4:	20004768 	.word	0x20004768
 8001bb8:	40026428 	.word	0x40026428

08001bbc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08a      	sub	sp, #40	; 0x28
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc4:	f107 0314 	add.w	r3, r7, #20
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
 8001bd2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a1d      	ldr	r2, [pc, #116]	; (8001c50 <HAL_CAN_MspInit+0x94>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d133      	bne.n	8001c46 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	613b      	str	r3, [r7, #16]
 8001be2:	4b1c      	ldr	r3, [pc, #112]	; (8001c54 <HAL_CAN_MspInit+0x98>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	4a1b      	ldr	r2, [pc, #108]	; (8001c54 <HAL_CAN_MspInit+0x98>)
 8001be8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bec:	6413      	str	r3, [r2, #64]	; 0x40
 8001bee:	4b19      	ldr	r3, [pc, #100]	; (8001c54 <HAL_CAN_MspInit+0x98>)
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf6:	613b      	str	r3, [r7, #16]
 8001bf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	4b15      	ldr	r3, [pc, #84]	; (8001c54 <HAL_CAN_MspInit+0x98>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	4a14      	ldr	r2, [pc, #80]	; (8001c54 <HAL_CAN_MspInit+0x98>)
 8001c04:	f043 0308 	orr.w	r3, r3, #8
 8001c08:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0a:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <HAL_CAN_MspInit+0x98>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	f003 0308 	and.w	r3, r3, #8
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c16:	2303      	movs	r3, #3
 8001c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c22:	2303      	movs	r3, #3
 8001c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001c26:	2309      	movs	r3, #9
 8001c28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c2a:	f107 0314 	add.w	r3, r7, #20
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4809      	ldr	r0, [pc, #36]	; (8001c58 <HAL_CAN_MspInit+0x9c>)
 8001c32:	f002 f927 	bl	8003e84 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001c36:	2200      	movs	r2, #0
 8001c38:	2105      	movs	r1, #5
 8001c3a:	2014      	movs	r0, #20
 8001c3c:	f001 fd88 	bl	8003750 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001c40:	2014      	movs	r0, #20
 8001c42:	f001 fda1 	bl	8003788 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001c46:	bf00      	nop
 8001c48:	3728      	adds	r7, #40	; 0x28
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40006400 	.word	0x40006400
 8001c54:	40023800 	.word	0x40023800
 8001c58:	40020c00 	.word	0x40020c00

08001c5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08a      	sub	sp, #40	; 0x28
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c64:	f107 0314 	add.w	r3, r7, #20
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	60da      	str	r2, [r3, #12]
 8001c72:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a19      	ldr	r2, [pc, #100]	; (8001ce0 <HAL_I2C_MspInit+0x84>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d12c      	bne.n	8001cd8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	613b      	str	r3, [r7, #16]
 8001c82:	4b18      	ldr	r3, [pc, #96]	; (8001ce4 <HAL_I2C_MspInit+0x88>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	4a17      	ldr	r2, [pc, #92]	; (8001ce4 <HAL_I2C_MspInit+0x88>)
 8001c88:	f043 0302 	orr.w	r3, r3, #2
 8001c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8e:	4b15      	ldr	r3, [pc, #84]	; (8001ce4 <HAL_I2C_MspInit+0x88>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	613b      	str	r3, [r7, #16]
 8001c98:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001c9a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001c9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ca0:	2312      	movs	r3, #18
 8001ca2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cac:	2304      	movs	r3, #4
 8001cae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb0:	f107 0314 	add.w	r3, r7, #20
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	480c      	ldr	r0, [pc, #48]	; (8001ce8 <HAL_I2C_MspInit+0x8c>)
 8001cb8:	f002 f8e4 	bl	8003e84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <HAL_I2C_MspInit+0x88>)
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc4:	4a07      	ldr	r2, [pc, #28]	; (8001ce4 <HAL_I2C_MspInit+0x88>)
 8001cc6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cca:	6413      	str	r3, [r2, #64]	; 0x40
 8001ccc:	4b05      	ldr	r3, [pc, #20]	; (8001ce4 <HAL_I2C_MspInit+0x88>)
 8001cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001cd8:	bf00      	nop
 8001cda:	3728      	adds	r7, #40	; 0x28
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40005400 	.word	0x40005400
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	40020400 	.word	0x40020400

08001cec <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b08e      	sub	sp, #56	; 0x38
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
 8001d02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d04:	f107 0314 	add.w	r3, r7, #20
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a31      	ldr	r2, [pc, #196]	; (8001ddc <HAL_I2S_MspInit+0xf0>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d15a      	bne.n	8001dd2 <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001d20:	23c0      	movs	r3, #192	; 0xc0
 8001d22:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001d24:	2302      	movs	r3, #2
 8001d26:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d28:	f107 0314 	add.w	r3, r7, #20
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f005 fa8b 	bl	8007248 <HAL_RCCEx_PeriphCLKConfig>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001d38:	f7ff fdb0 	bl	800189c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	613b      	str	r3, [r7, #16]
 8001d40:	4b27      	ldr	r3, [pc, #156]	; (8001de0 <HAL_I2S_MspInit+0xf4>)
 8001d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d44:	4a26      	ldr	r2, [pc, #152]	; (8001de0 <HAL_I2S_MspInit+0xf4>)
 8001d46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d4a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d4c:	4b24      	ldr	r3, [pc, #144]	; (8001de0 <HAL_I2S_MspInit+0xf4>)
 8001d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d54:	613b      	str	r3, [r7, #16]
 8001d56:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d58:	2300      	movs	r3, #0
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	4b20      	ldr	r3, [pc, #128]	; (8001de0 <HAL_I2S_MspInit+0xf4>)
 8001d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d60:	4a1f      	ldr	r2, [pc, #124]	; (8001de0 <HAL_I2S_MspInit+0xf4>)
 8001d62:	f043 0301 	orr.w	r3, r3, #1
 8001d66:	6313      	str	r3, [r2, #48]	; 0x30
 8001d68:	4b1d      	ldr	r3, [pc, #116]	; (8001de0 <HAL_I2S_MspInit+0xf4>)
 8001d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d74:	2300      	movs	r3, #0
 8001d76:	60bb      	str	r3, [r7, #8]
 8001d78:	4b19      	ldr	r3, [pc, #100]	; (8001de0 <HAL_I2S_MspInit+0xf4>)
 8001d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7c:	4a18      	ldr	r2, [pc, #96]	; (8001de0 <HAL_I2S_MspInit+0xf4>)
 8001d7e:	f043 0304 	orr.w	r3, r3, #4
 8001d82:	6313      	str	r3, [r2, #48]	; 0x30
 8001d84:	4b16      	ldr	r3, [pc, #88]	; (8001de0 <HAL_I2S_MspInit+0xf4>)
 8001d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001d90:	2310      	movs	r3, #16
 8001d92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d94:	2302      	movs	r3, #2
 8001d96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001da0:	2306      	movs	r3, #6
 8001da2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001da4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001da8:	4619      	mov	r1, r3
 8001daa:	480e      	ldr	r0, [pc, #56]	; (8001de4 <HAL_I2S_MspInit+0xf8>)
 8001dac:	f002 f86a 	bl	8003e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001db0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db6:	2302      	movs	r3, #2
 8001db8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001dc2:	2306      	movs	r3, #6
 8001dc4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4806      	ldr	r0, [pc, #24]	; (8001de8 <HAL_I2S_MspInit+0xfc>)
 8001dce:	f002 f859 	bl	8003e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001dd2:	bf00      	nop
 8001dd4:	3738      	adds	r7, #56	; 0x38
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40003c00 	.word	0x40003c00
 8001de0:	40023800 	.word	0x40023800
 8001de4:	40020000 	.word	0x40020000
 8001de8:	40020800 	.word	0x40020800

08001dec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b08a      	sub	sp, #40	; 0x28
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df4:	f107 0314 	add.w	r3, r7, #20
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	605a      	str	r2, [r3, #4]
 8001dfe:	609a      	str	r2, [r3, #8]
 8001e00:	60da      	str	r2, [r3, #12]
 8001e02:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a19      	ldr	r2, [pc, #100]	; (8001e70 <HAL_SPI_MspInit+0x84>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d12b      	bne.n	8001e66 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	613b      	str	r3, [r7, #16]
 8001e12:	4b18      	ldr	r3, [pc, #96]	; (8001e74 <HAL_SPI_MspInit+0x88>)
 8001e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e16:	4a17      	ldr	r2, [pc, #92]	; (8001e74 <HAL_SPI_MspInit+0x88>)
 8001e18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e1e:	4b15      	ldr	r3, [pc, #84]	; (8001e74 <HAL_SPI_MspInit+0x88>)
 8001e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e26:	613b      	str	r3, [r7, #16]
 8001e28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60fb      	str	r3, [r7, #12]
 8001e2e:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <HAL_SPI_MspInit+0x88>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	4a10      	ldr	r2, [pc, #64]	; (8001e74 <HAL_SPI_MspInit+0x88>)
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3a:	4b0e      	ldr	r3, [pc, #56]	; (8001e74 <HAL_SPI_MspInit+0x88>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001e46:	23e0      	movs	r3, #224	; 0xe0
 8001e48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e52:	2300      	movs	r3, #0
 8001e54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e56:	2305      	movs	r3, #5
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e5a:	f107 0314 	add.w	r3, r7, #20
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4805      	ldr	r0, [pc, #20]	; (8001e78 <HAL_SPI_MspInit+0x8c>)
 8001e62:	f002 f80f 	bl	8003e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e66:	bf00      	nop
 8001e68:	3728      	adds	r7, #40	; 0x28
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40013000 	.word	0x40013000
 8001e74:	40023800 	.word	0x40023800
 8001e78:	40020000 	.word	0x40020000

08001e7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a0e      	ldr	r2, [pc, #56]	; (8001ec4 <HAL_TIM_Base_MspInit+0x48>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d115      	bne.n	8001eba <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	4b0d      	ldr	r3, [pc, #52]	; (8001ec8 <HAL_TIM_Base_MspInit+0x4c>)
 8001e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e96:	4a0c      	ldr	r2, [pc, #48]	; (8001ec8 <HAL_TIM_Base_MspInit+0x4c>)
 8001e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ec8 <HAL_TIM_Base_MspInit+0x4c>)
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8001eaa:	2200      	movs	r2, #0
 8001eac:	2105      	movs	r1, #5
 8001eae:	2019      	movs	r0, #25
 8001eb0:	f001 fc4e 	bl	8003750 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001eb4:	2019      	movs	r0, #25
 8001eb6:	f001 fc67 	bl	8003788 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001eba:	bf00      	nop
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40014400 	.word	0x40014400
 8001ec8:	40023800 	.word	0x40023800

08001ecc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b08a      	sub	sp, #40	; 0x28
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed4:	f107 0314 	add.w	r3, r7, #20
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	605a      	str	r2, [r3, #4]
 8001ede:	609a      	str	r2, [r3, #8]
 8001ee0:	60da      	str	r2, [r3, #12]
 8001ee2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a28      	ldr	r2, [pc, #160]	; (8001f8c <HAL_UART_MspInit+0xc0>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d149      	bne.n	8001f82 <HAL_UART_MspInit+0xb6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	613b      	str	r3, [r7, #16]
 8001ef2:	4b27      	ldr	r3, [pc, #156]	; (8001f90 <HAL_UART_MspInit+0xc4>)
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	4a26      	ldr	r2, [pc, #152]	; (8001f90 <HAL_UART_MspInit+0xc4>)
 8001ef8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001efc:	6413      	str	r3, [r2, #64]	; 0x40
 8001efe:	4b24      	ldr	r3, [pc, #144]	; (8001f90 <HAL_UART_MspInit+0xc4>)
 8001f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f06:	613b      	str	r3, [r7, #16]
 8001f08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	4b20      	ldr	r3, [pc, #128]	; (8001f90 <HAL_UART_MspInit+0xc4>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f12:	4a1f      	ldr	r2, [pc, #124]	; (8001f90 <HAL_UART_MspInit+0xc4>)
 8001f14:	f043 0301 	orr.w	r3, r3, #1
 8001f18:	6313      	str	r3, [r2, #48]	; 0x30
 8001f1a:	4b1d      	ldr	r3, [pc, #116]	; (8001f90 <HAL_UART_MspInit+0xc4>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	60bb      	str	r3, [r7, #8]
 8001f2a:	4b19      	ldr	r3, [pc, #100]	; (8001f90 <HAL_UART_MspInit+0xc4>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	4a18      	ldr	r2, [pc, #96]	; (8001f90 <HAL_UART_MspInit+0xc4>)
 8001f30:	f043 0308 	orr.w	r3, r3, #8
 8001f34:	6313      	str	r3, [r2, #48]	; 0x30
 8001f36:	4b16      	ldr	r3, [pc, #88]	; (8001f90 <HAL_UART_MspInit+0xc4>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	60bb      	str	r3, [r7, #8]
 8001f40:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f42:	2304      	movs	r3, #4
 8001f44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f46:	2302      	movs	r3, #2
 8001f48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f52:	2307      	movs	r3, #7
 8001f54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f56:	f107 0314 	add.w	r3, r7, #20
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	480d      	ldr	r0, [pc, #52]	; (8001f94 <HAL_UART_MspInit+0xc8>)
 8001f5e:	f001 ff91 	bl	8003e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f62:	2340      	movs	r3, #64	; 0x40
 8001f64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f66:	2302      	movs	r3, #2
 8001f68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f72:	2307      	movs	r3, #7
 8001f74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f76:	f107 0314 	add.w	r3, r7, #20
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4806      	ldr	r0, [pc, #24]	; (8001f98 <HAL_UART_MspInit+0xcc>)
 8001f7e:	f001 ff81 	bl	8003e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f82:	bf00      	nop
 8001f84:	3728      	adds	r7, #40	; 0x28
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40004400 	.word	0x40004400
 8001f90:	40023800 	.word	0x40023800
 8001f94:	40020000 	.word	0x40020000
 8001f98:	40020c00 	.word	0x40020c00

08001f9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b08c      	sub	sp, #48	; 0x30
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001fac:	2200      	movs	r2, #0
 8001fae:	6879      	ldr	r1, [r7, #4]
 8001fb0:	2019      	movs	r0, #25
 8001fb2:	f001 fbcd 	bl	8003750 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001fb6:	2019      	movs	r0, #25
 8001fb8:	f001 fbe6 	bl	8003788 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	4b1f      	ldr	r3, [pc, #124]	; (8002040 <HAL_InitTick+0xa4>)
 8001fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc4:	4a1e      	ldr	r2, [pc, #120]	; (8002040 <HAL_InitTick+0xa4>)
 8001fc6:	f043 0301 	orr.w	r3, r3, #1
 8001fca:	6453      	str	r3, [r2, #68]	; 0x44
 8001fcc:	4b1c      	ldr	r3, [pc, #112]	; (8002040 <HAL_InitTick+0xa4>)
 8001fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	60fb      	str	r3, [r7, #12]
 8001fd6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001fd8:	f107 0210 	add.w	r2, r7, #16
 8001fdc:	f107 0314 	add.w	r3, r7, #20
 8001fe0:	4611      	mov	r1, r2
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f005 f8fe 	bl	80071e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001fe8:	f005 f8e8 	bl	80071bc <HAL_RCC_GetPCLK2Freq>
 8001fec:	4603      	mov	r3, r0
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff4:	4a13      	ldr	r2, [pc, #76]	; (8002044 <HAL_InitTick+0xa8>)
 8001ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffa:	0c9b      	lsrs	r3, r3, #18
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002000:	4b11      	ldr	r3, [pc, #68]	; (8002048 <HAL_InitTick+0xac>)
 8002002:	4a12      	ldr	r2, [pc, #72]	; (800204c <HAL_InitTick+0xb0>)
 8002004:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002006:	4b10      	ldr	r3, [pc, #64]	; (8002048 <HAL_InitTick+0xac>)
 8002008:	f240 32e7 	movw	r2, #999	; 0x3e7
 800200c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800200e:	4a0e      	ldr	r2, [pc, #56]	; (8002048 <HAL_InitTick+0xac>)
 8002010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002012:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002014:	4b0c      	ldr	r3, [pc, #48]	; (8002048 <HAL_InitTick+0xac>)
 8002016:	2200      	movs	r2, #0
 8002018:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800201a:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <HAL_InitTick+0xac>)
 800201c:	2200      	movs	r2, #0
 800201e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002020:	4809      	ldr	r0, [pc, #36]	; (8002048 <HAL_InitTick+0xac>)
 8002022:	f005 fada 	bl	80075da <HAL_TIM_Base_Init>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d104      	bne.n	8002036 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800202c:	4806      	ldr	r0, [pc, #24]	; (8002048 <HAL_InitTick+0xac>)
 800202e:	f005 fbb3 	bl	8007798 <HAL_TIM_Base_Start_IT>
 8002032:	4603      	mov	r3, r0
 8002034:	e000      	b.n	8002038 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
}
 8002038:	4618      	mov	r0, r3
 800203a:	3730      	adds	r7, #48	; 0x30
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40023800 	.word	0x40023800
 8002044:	431bde83 	.word	0x431bde83
 8002048:	20004a8c 	.word	0x20004a8c
 800204c:	40010000 	.word	0x40010000

08002050 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002054:	e7fe      	b.n	8002054 <NMI_Handler+0x4>

08002056 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002056:	b480      	push	{r7}
 8002058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800205a:	e7fe      	b.n	800205a <HardFault_Handler+0x4>

0800205c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002060:	e7fe      	b.n	8002060 <MemManage_Handler+0x4>

08002062 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002062:	b480      	push	{r7}
 8002064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002066:	e7fe      	b.n	8002066 <BusFault_Handler+0x4>

08002068 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800206c:	e7fe      	b.n	800206c <UsageFault_Handler+0x4>

0800206e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800206e:	b480      	push	{r7}
 8002070:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002080:	4802      	ldr	r0, [pc, #8]	; (800208c <CAN1_RX0_IRQHandler+0x10>)
 8002082:	f001 f87d 	bl	8003180 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	200049dc 	.word	0x200049dc

08002090 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002094:	4803      	ldr	r0, [pc, #12]	; (80020a4 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8002096:	f005 fbef 	bl	8007878 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800209a:	4803      	ldr	r0, [pc, #12]	; (80020a8 <TIM1_UP_TIM10_IRQHandler+0x18>)
 800209c:	f005 fbec 	bl	8007878 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80020a0:	bf00      	nop
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	20004a8c 	.word	0x20004a8c
 80020a8:	2000471c 	.word	0x2000471c

080020ac <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80020b0:	4802      	ldr	r0, [pc, #8]	; (80020bc <DMA2_Stream0_IRQHandler+0x10>)
 80020b2:	f001 fc7d 	bl	80039b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	2000485c 	.word	0x2000485c

080020c0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80020c4:	4802      	ldr	r0, [pc, #8]	; (80020d0 <DMA2_Stream1_IRQHandler+0x10>)
 80020c6:	f001 fc73 	bl	80039b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	20004768 	.word	0x20004768

080020d4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80020d8:	4802      	ldr	r0, [pc, #8]	; (80020e4 <DMA2_Stream2_IRQHandler+0x10>)
 80020da:	f001 fc69 	bl	80039b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	20004978 	.word	0x20004978

080020e8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80020ec:	4802      	ldr	r0, [pc, #8]	; (80020f8 <OTG_FS_IRQHandler+0x10>)
 80020ee:	f002 fb1b 	bl	8004728 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	20004efc 	.word	0x20004efc

080020fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002104:	4a14      	ldr	r2, [pc, #80]	; (8002158 <_sbrk+0x5c>)
 8002106:	4b15      	ldr	r3, [pc, #84]	; (800215c <_sbrk+0x60>)
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002110:	4b13      	ldr	r3, [pc, #76]	; (8002160 <_sbrk+0x64>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d102      	bne.n	800211e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002118:	4b11      	ldr	r3, [pc, #68]	; (8002160 <_sbrk+0x64>)
 800211a:	4a12      	ldr	r2, [pc, #72]	; (8002164 <_sbrk+0x68>)
 800211c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800211e:	4b10      	ldr	r3, [pc, #64]	; (8002160 <_sbrk+0x64>)
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4413      	add	r3, r2
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	429a      	cmp	r2, r3
 800212a:	d207      	bcs.n	800213c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800212c:	f00c fbe0 	bl	800e8f0 <__errno>
 8002130:	4603      	mov	r3, r0
 8002132:	220c      	movs	r2, #12
 8002134:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002136:	f04f 33ff 	mov.w	r3, #4294967295
 800213a:	e009      	b.n	8002150 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800213c:	4b08      	ldr	r3, [pc, #32]	; (8002160 <_sbrk+0x64>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002142:	4b07      	ldr	r3, [pc, #28]	; (8002160 <_sbrk+0x64>)
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4413      	add	r3, r2
 800214a:	4a05      	ldr	r2, [pc, #20]	; (8002160 <_sbrk+0x64>)
 800214c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800214e:	68fb      	ldr	r3, [r7, #12]
}
 8002150:	4618      	mov	r0, r3
 8002152:	3718      	adds	r7, #24
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	20020000 	.word	0x20020000
 800215c:	00000400 	.word	0x00000400
 8002160:	2000081c 	.word	0x2000081c
 8002164:	20005210 	.word	0x20005210

08002168 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800216c:	4b06      	ldr	r3, [pc, #24]	; (8002188 <SystemInit+0x20>)
 800216e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002172:	4a05      	ldr	r2, [pc, #20]	; (8002188 <SystemInit+0x20>)
 8002174:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002178:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800217c:	bf00      	nop
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	e000ed00 	.word	0xe000ed00

0800218c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800218c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002190:	480d      	ldr	r0, [pc, #52]	; (80021c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002192:	490e      	ldr	r1, [pc, #56]	; (80021cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002194:	4a0e      	ldr	r2, [pc, #56]	; (80021d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002196:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002198:	e002      	b.n	80021a0 <LoopCopyDataInit>

0800219a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800219a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800219c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800219e:	3304      	adds	r3, #4

080021a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021a4:	d3f9      	bcc.n	800219a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021a6:	4a0b      	ldr	r2, [pc, #44]	; (80021d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021a8:	4c0b      	ldr	r4, [pc, #44]	; (80021d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80021aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021ac:	e001      	b.n	80021b2 <LoopFillZerobss>

080021ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021b0:	3204      	adds	r2, #4

080021b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021b4:	d3fb      	bcc.n	80021ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80021b6:	f7ff ffd7 	bl	8002168 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021ba:	f00c fb9f 	bl	800e8fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021be:	f7fe fd35 	bl	8000c2c <main>
  bx  lr    
 80021c2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80021c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021cc:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80021d0:	0800f4c8 	.word	0x0800f4c8
  ldr r2, =_sbss
 80021d4:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80021d8:	20005210 	.word	0x20005210

080021dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021dc:	e7fe      	b.n	80021dc <ADC_IRQHandler>
	...

080021e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021e4:	4b0e      	ldr	r3, [pc, #56]	; (8002220 <HAL_Init+0x40>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a0d      	ldr	r2, [pc, #52]	; (8002220 <HAL_Init+0x40>)
 80021ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021f0:	4b0b      	ldr	r3, [pc, #44]	; (8002220 <HAL_Init+0x40>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a0a      	ldr	r2, [pc, #40]	; (8002220 <HAL_Init+0x40>)
 80021f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021fc:	4b08      	ldr	r3, [pc, #32]	; (8002220 <HAL_Init+0x40>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a07      	ldr	r2, [pc, #28]	; (8002220 <HAL_Init+0x40>)
 8002202:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002206:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002208:	2003      	movs	r0, #3
 800220a:	f001 fa96 	bl	800373a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800220e:	2005      	movs	r0, #5
 8002210:	f7ff fec4 	bl	8001f9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002214:	f7ff fb48 	bl	80018a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40023c00 	.word	0x40023c00

08002224 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002228:	4b06      	ldr	r3, [pc, #24]	; (8002244 <HAL_IncTick+0x20>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	461a      	mov	r2, r3
 800222e:	4b06      	ldr	r3, [pc, #24]	; (8002248 <HAL_IncTick+0x24>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4413      	add	r3, r2
 8002234:	4a04      	ldr	r2, [pc, #16]	; (8002248 <HAL_IncTick+0x24>)
 8002236:	6013      	str	r3, [r2, #0]
}
 8002238:	bf00      	nop
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	20000008 	.word	0x20000008
 8002248:	20004ad4 	.word	0x20004ad4

0800224c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  return uwTick;
 8002250:	4b03      	ldr	r3, [pc, #12]	; (8002260 <HAL_GetTick+0x14>)
 8002252:	681b      	ldr	r3, [r3, #0]
}
 8002254:	4618      	mov	r0, r3
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	20004ad4 	.word	0x20004ad4

08002264 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800226c:	f7ff ffee 	bl	800224c <HAL_GetTick>
 8002270:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800227c:	d005      	beq.n	800228a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800227e:	4b0a      	ldr	r3, [pc, #40]	; (80022a8 <HAL_Delay+0x44>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	461a      	mov	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	4413      	add	r3, r2
 8002288:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800228a:	bf00      	nop
 800228c:	f7ff ffde 	bl	800224c <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	429a      	cmp	r2, r3
 800229a:	d8f7      	bhi.n	800228c <HAL_Delay+0x28>
  {
  }
}
 800229c:	bf00      	nop
 800229e:	bf00      	nop
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	20000008 	.word	0x20000008

080022ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022b4:	2300      	movs	r3, #0
 80022b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e033      	b.n	800232a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d109      	bne.n	80022de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f7ff fb18 	bl	8001900 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	f003 0310 	and.w	r3, r3, #16
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d118      	bne.n	800231c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022f2:	f023 0302 	bic.w	r3, r3, #2
 80022f6:	f043 0202 	orr.w	r2, r3, #2
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 fa68 	bl	80027d4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	f023 0303 	bic.w	r3, r3, #3
 8002312:	f043 0201 	orr.w	r2, r3, #1
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	641a      	str	r2, [r3, #64]	; 0x40
 800231a:	e001      	b.n	8002320 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002328:	7bfb      	ldrb	r3, [r7, #15]
}
 800232a:	4618      	mov	r0, r3
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
	...

08002334 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002340:	2300      	movs	r3, #0
 8002342:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800234a:	2b01      	cmp	r3, #1
 800234c:	d101      	bne.n	8002352 <HAL_ADC_Start_DMA+0x1e>
 800234e:	2302      	movs	r3, #2
 8002350:	e0e9      	b.n	8002526 <HAL_ADC_Start_DMA+0x1f2>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	2b01      	cmp	r3, #1
 8002366:	d018      	beq.n	800239a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	689a      	ldr	r2, [r3, #8]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f042 0201 	orr.w	r2, r2, #1
 8002376:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002378:	4b6d      	ldr	r3, [pc, #436]	; (8002530 <HAL_ADC_Start_DMA+0x1fc>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a6d      	ldr	r2, [pc, #436]	; (8002534 <HAL_ADC_Start_DMA+0x200>)
 800237e:	fba2 2303 	umull	r2, r3, r2, r3
 8002382:	0c9a      	lsrs	r2, r3, #18
 8002384:	4613      	mov	r3, r2
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	4413      	add	r3, r2
 800238a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800238c:	e002      	b.n	8002394 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	3b01      	subs	r3, #1
 8002392:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1f9      	bne.n	800238e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023a8:	d107      	bne.n	80023ba <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	f040 80a1 	bne.w	800250c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80023d2:	f023 0301 	bic.w	r3, r3, #1
 80023d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d007      	beq.n	80023fc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023f4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002400:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002404:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002408:	d106      	bne.n	8002418 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240e:	f023 0206 	bic.w	r2, r3, #6
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	645a      	str	r2, [r3, #68]	; 0x44
 8002416:	e002      	b.n	800241e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002426:	4b44      	ldr	r3, [pc, #272]	; (8002538 <HAL_ADC_Start_DMA+0x204>)
 8002428:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800242e:	4a43      	ldr	r2, [pc, #268]	; (800253c <HAL_ADC_Start_DMA+0x208>)
 8002430:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002436:	4a42      	ldr	r2, [pc, #264]	; (8002540 <HAL_ADC_Start_DMA+0x20c>)
 8002438:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243e:	4a41      	ldr	r2, [pc, #260]	; (8002544 <HAL_ADC_Start_DMA+0x210>)
 8002440:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800244a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	685a      	ldr	r2, [r3, #4]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800245a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689a      	ldr	r2, [r3, #8]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800246a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	334c      	adds	r3, #76	; 0x4c
 8002476:	4619      	mov	r1, r3
 8002478:	68ba      	ldr	r2, [r7, #8]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f001 fa40 	bl	8003900 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f003 031f 	and.w	r3, r3, #31
 8002488:	2b00      	cmp	r3, #0
 800248a:	d12a      	bne.n	80024e2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a2d      	ldr	r2, [pc, #180]	; (8002548 <HAL_ADC_Start_DMA+0x214>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d015      	beq.n	80024c2 <HAL_ADC_Start_DMA+0x18e>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a2c      	ldr	r2, [pc, #176]	; (800254c <HAL_ADC_Start_DMA+0x218>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d105      	bne.n	80024ac <HAL_ADC_Start_DMA+0x178>
 80024a0:	4b25      	ldr	r3, [pc, #148]	; (8002538 <HAL_ADC_Start_DMA+0x204>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f003 031f 	and.w	r3, r3, #31
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00a      	beq.n	80024c2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a27      	ldr	r2, [pc, #156]	; (8002550 <HAL_ADC_Start_DMA+0x21c>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d136      	bne.n	8002524 <HAL_ADC_Start_DMA+0x1f0>
 80024b6:	4b20      	ldr	r3, [pc, #128]	; (8002538 <HAL_ADC_Start_DMA+0x204>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f003 0310 	and.w	r3, r3, #16
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d130      	bne.n	8002524 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d129      	bne.n	8002524 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	689a      	ldr	r2, [r3, #8]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80024de:	609a      	str	r2, [r3, #8]
 80024e0:	e020      	b.n	8002524 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a18      	ldr	r2, [pc, #96]	; (8002548 <HAL_ADC_Start_DMA+0x214>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d11b      	bne.n	8002524 <HAL_ADC_Start_DMA+0x1f0>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d114      	bne.n	8002524 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002508:	609a      	str	r2, [r3, #8]
 800250a:	e00b      	b.n	8002524 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002510:	f043 0210 	orr.w	r2, r3, #16
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251c:	f043 0201 	orr.w	r2, r3, #1
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3718      	adds	r7, #24
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	20000000 	.word	0x20000000
 8002534:	431bde83 	.word	0x431bde83
 8002538:	40012300 	.word	0x40012300
 800253c:	080029cd 	.word	0x080029cd
 8002540:	08002a87 	.word	0x08002a87
 8002544:	08002aa3 	.word	0x08002aa3
 8002548:	40012000 	.word	0x40012000
 800254c:	40012100 	.word	0x40012100
 8002550:	40012200 	.word	0x40012200

08002554 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800259a:	2300      	movs	r3, #0
 800259c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d101      	bne.n	80025ac <HAL_ADC_ConfigChannel+0x1c>
 80025a8:	2302      	movs	r3, #2
 80025aa:	e105      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x228>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2b09      	cmp	r3, #9
 80025ba:	d925      	bls.n	8002608 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68d9      	ldr	r1, [r3, #12]
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	461a      	mov	r2, r3
 80025ca:	4613      	mov	r3, r2
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	4413      	add	r3, r2
 80025d0:	3b1e      	subs	r3, #30
 80025d2:	2207      	movs	r2, #7
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	43da      	mvns	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	400a      	ands	r2, r1
 80025e0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68d9      	ldr	r1, [r3, #12]
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	4618      	mov	r0, r3
 80025f4:	4603      	mov	r3, r0
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	4403      	add	r3, r0
 80025fa:	3b1e      	subs	r3, #30
 80025fc:	409a      	lsls	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	60da      	str	r2, [r3, #12]
 8002606:	e022      	b.n	800264e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6919      	ldr	r1, [r3, #16]
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	b29b      	uxth	r3, r3
 8002614:	461a      	mov	r2, r3
 8002616:	4613      	mov	r3, r2
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	4413      	add	r3, r2
 800261c:	2207      	movs	r2, #7
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	43da      	mvns	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	400a      	ands	r2, r1
 800262a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6919      	ldr	r1, [r3, #16]
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	689a      	ldr	r2, [r3, #8]
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	b29b      	uxth	r3, r3
 800263c:	4618      	mov	r0, r3
 800263e:	4603      	mov	r3, r0
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	4403      	add	r3, r0
 8002644:	409a      	lsls	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	430a      	orrs	r2, r1
 800264c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	2b06      	cmp	r3, #6
 8002654:	d824      	bhi.n	80026a0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	4613      	mov	r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4413      	add	r3, r2
 8002666:	3b05      	subs	r3, #5
 8002668:	221f      	movs	r2, #31
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	43da      	mvns	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	400a      	ands	r2, r1
 8002676:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	b29b      	uxth	r3, r3
 8002684:	4618      	mov	r0, r3
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685a      	ldr	r2, [r3, #4]
 800268a:	4613      	mov	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4413      	add	r3, r2
 8002690:	3b05      	subs	r3, #5
 8002692:	fa00 f203 	lsl.w	r2, r0, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	430a      	orrs	r2, r1
 800269c:	635a      	str	r2, [r3, #52]	; 0x34
 800269e:	e04c      	b.n	800273a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	2b0c      	cmp	r3, #12
 80026a6:	d824      	bhi.n	80026f2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685a      	ldr	r2, [r3, #4]
 80026b2:	4613      	mov	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	3b23      	subs	r3, #35	; 0x23
 80026ba:	221f      	movs	r2, #31
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	43da      	mvns	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	400a      	ands	r2, r1
 80026c8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	4618      	mov	r0, r3
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685a      	ldr	r2, [r3, #4]
 80026dc:	4613      	mov	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	4413      	add	r3, r2
 80026e2:	3b23      	subs	r3, #35	; 0x23
 80026e4:	fa00 f203 	lsl.w	r2, r0, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	430a      	orrs	r2, r1
 80026ee:	631a      	str	r2, [r3, #48]	; 0x30
 80026f0:	e023      	b.n	800273a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	4613      	mov	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4413      	add	r3, r2
 8002702:	3b41      	subs	r3, #65	; 0x41
 8002704:	221f      	movs	r2, #31
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	43da      	mvns	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	400a      	ands	r2, r1
 8002712:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	b29b      	uxth	r3, r3
 8002720:	4618      	mov	r0, r3
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685a      	ldr	r2, [r3, #4]
 8002726:	4613      	mov	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	4413      	add	r3, r2
 800272c:	3b41      	subs	r3, #65	; 0x41
 800272e:	fa00 f203 	lsl.w	r2, r0, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	430a      	orrs	r2, r1
 8002738:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800273a:	4b22      	ldr	r3, [pc, #136]	; (80027c4 <HAL_ADC_ConfigChannel+0x234>)
 800273c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a21      	ldr	r2, [pc, #132]	; (80027c8 <HAL_ADC_ConfigChannel+0x238>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d109      	bne.n	800275c <HAL_ADC_ConfigChannel+0x1cc>
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2b12      	cmp	r3, #18
 800274e:	d105      	bne.n	800275c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a19      	ldr	r2, [pc, #100]	; (80027c8 <HAL_ADC_ConfigChannel+0x238>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d123      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x21e>
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2b10      	cmp	r3, #16
 800276c:	d003      	beq.n	8002776 <HAL_ADC_ConfigChannel+0x1e6>
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2b11      	cmp	r3, #17
 8002774:	d11b      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2b10      	cmp	r3, #16
 8002788:	d111      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800278a:	4b10      	ldr	r3, [pc, #64]	; (80027cc <HAL_ADC_ConfigChannel+0x23c>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a10      	ldr	r2, [pc, #64]	; (80027d0 <HAL_ADC_ConfigChannel+0x240>)
 8002790:	fba2 2303 	umull	r2, r3, r2, r3
 8002794:	0c9a      	lsrs	r2, r3, #18
 8002796:	4613      	mov	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	4413      	add	r3, r2
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80027a0:	e002      	b.n	80027a8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	3b01      	subs	r3, #1
 80027a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1f9      	bne.n	80027a2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3714      	adds	r7, #20
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr
 80027c4:	40012300 	.word	0x40012300
 80027c8:	40012000 	.word	0x40012000
 80027cc:	20000000 	.word	0x20000000
 80027d0:	431bde83 	.word	0x431bde83

080027d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027dc:	4b79      	ldr	r3, [pc, #484]	; (80029c4 <ADC_Init+0x1f0>)
 80027de:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	685a      	ldr	r2, [r3, #4]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	431a      	orrs	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	685a      	ldr	r2, [r3, #4]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002808:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6859      	ldr	r1, [r3, #4]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	021a      	lsls	r2, r3, #8
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	430a      	orrs	r2, r1
 800281c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800282c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	6859      	ldr	r1, [r3, #4]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	430a      	orrs	r2, r1
 800283e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800284e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6899      	ldr	r1, [r3, #8]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	68da      	ldr	r2, [r3, #12]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	430a      	orrs	r2, r1
 8002860:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002866:	4a58      	ldr	r2, [pc, #352]	; (80029c8 <ADC_Init+0x1f4>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d022      	beq.n	80028b2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	689a      	ldr	r2, [r3, #8]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800287a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6899      	ldr	r1, [r3, #8]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	430a      	orrs	r2, r1
 800288c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800289c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	6899      	ldr	r1, [r3, #8]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	430a      	orrs	r2, r1
 80028ae:	609a      	str	r2, [r3, #8]
 80028b0:	e00f      	b.n	80028d2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 0202 	bic.w	r2, r2, #2
 80028e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6899      	ldr	r1, [r3, #8]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	7e1b      	ldrb	r3, [r3, #24]
 80028ec:	005a      	lsls	r2, r3, #1
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	430a      	orrs	r2, r1
 80028f4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d01b      	beq.n	8002938 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	685a      	ldr	r2, [r3, #4]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800290e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	685a      	ldr	r2, [r3, #4]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800291e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6859      	ldr	r1, [r3, #4]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292a:	3b01      	subs	r3, #1
 800292c:	035a      	lsls	r2, r3, #13
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	430a      	orrs	r2, r1
 8002934:	605a      	str	r2, [r3, #4]
 8002936:	e007      	b.n	8002948 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002946:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002956:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	69db      	ldr	r3, [r3, #28]
 8002962:	3b01      	subs	r3, #1
 8002964:	051a      	lsls	r2, r3, #20
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	430a      	orrs	r2, r1
 800296c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800297c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	6899      	ldr	r1, [r3, #8]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800298a:	025a      	lsls	r2, r3, #9
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	430a      	orrs	r2, r1
 8002992:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689a      	ldr	r2, [r3, #8]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6899      	ldr	r1, [r3, #8]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	029a      	lsls	r2, r3, #10
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	430a      	orrs	r2, r1
 80029b6:	609a      	str	r2, [r3, #8]
}
 80029b8:	bf00      	nop
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	40012300 	.word	0x40012300
 80029c8:	0f000001 	.word	0x0f000001

080029cc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d13c      	bne.n	8002a60 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d12b      	bne.n	8002a58 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d127      	bne.n	8002a58 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d006      	beq.n	8002a24 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d119      	bne.n	8002a58 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	685a      	ldr	r2, [r3, #4]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f022 0220 	bic.w	r2, r2, #32
 8002a32:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a38:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d105      	bne.n	8002a58 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a50:	f043 0201 	orr.w	r2, r3, #1
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f7ff fd7b 	bl	8002554 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002a5e:	e00e      	b.n	8002a7e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a64:	f003 0310 	and.w	r3, r3, #16
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d003      	beq.n	8002a74 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002a6c:	68f8      	ldr	r0, [r7, #12]
 8002a6e:	f7ff fd85 	bl	800257c <HAL_ADC_ErrorCallback>
}
 8002a72:	e004      	b.n	8002a7e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	4798      	blx	r3
}
 8002a7e:	bf00      	nop
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b084      	sub	sp, #16
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a92:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a94:	68f8      	ldr	r0, [r7, #12]
 8002a96:	f7ff fd67 	bl	8002568 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a9a:	bf00      	nop
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b084      	sub	sp, #16
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aae:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2240      	movs	r2, #64	; 0x40
 8002ab4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aba:	f043 0204 	orr.w	r2, r3, #4
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	f7ff fd5a 	bl	800257c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ac8:	bf00      	nop
 8002aca:	3710      	adds	r7, #16
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e0ed      	b.n	8002cbe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d102      	bne.n	8002af4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f7ff f864 	bl	8001bbc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f042 0201 	orr.w	r2, r2, #1
 8002b02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b04:	f7ff fba2 	bl	800224c <HAL_GetTick>
 8002b08:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b0a:	e012      	b.n	8002b32 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b0c:	f7ff fb9e 	bl	800224c <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b0a      	cmp	r3, #10
 8002b18:	d90b      	bls.n	8002b32 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2205      	movs	r2, #5
 8002b2a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e0c5      	b.n	8002cbe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f003 0301 	and.w	r3, r3, #1
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d0e5      	beq.n	8002b0c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f022 0202 	bic.w	r2, r2, #2
 8002b4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b50:	f7ff fb7c 	bl	800224c <HAL_GetTick>
 8002b54:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002b56:	e012      	b.n	8002b7e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b58:	f7ff fb78 	bl	800224c <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b0a      	cmp	r3, #10
 8002b64:	d90b      	bls.n	8002b7e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2205      	movs	r2, #5
 8002b76:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e09f      	b.n	8002cbe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d1e5      	bne.n	8002b58 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	7e1b      	ldrb	r3, [r3, #24]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d108      	bne.n	8002ba6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ba2:	601a      	str	r2, [r3, #0]
 8002ba4:	e007      	b.n	8002bb6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bb4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	7e5b      	ldrb	r3, [r3, #25]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d108      	bne.n	8002bd0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	e007      	b.n	8002be0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bde:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	7e9b      	ldrb	r3, [r3, #26]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d108      	bne.n	8002bfa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f042 0220 	orr.w	r2, r2, #32
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	e007      	b.n	8002c0a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 0220 	bic.w	r2, r2, #32
 8002c08:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	7edb      	ldrb	r3, [r3, #27]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d108      	bne.n	8002c24 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 0210 	bic.w	r2, r2, #16
 8002c20:	601a      	str	r2, [r3, #0]
 8002c22:	e007      	b.n	8002c34 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f042 0210 	orr.w	r2, r2, #16
 8002c32:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	7f1b      	ldrb	r3, [r3, #28]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d108      	bne.n	8002c4e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f042 0208 	orr.w	r2, r2, #8
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	e007      	b.n	8002c5e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 0208 	bic.w	r2, r2, #8
 8002c5c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	7f5b      	ldrb	r3, [r3, #29]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d108      	bne.n	8002c78 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f042 0204 	orr.w	r2, r2, #4
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	e007      	b.n	8002c88 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0204 	bic.w	r2, r2, #4
 8002c86:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	431a      	orrs	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	431a      	orrs	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	ea42 0103 	orr.w	r1, r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	1e5a      	subs	r2, r3, #1
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	430a      	orrs	r2, r1
 8002cac:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
	...

08002cc8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b087      	sub	sp, #28
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cde:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002ce0:	7cfb      	ldrb	r3, [r7, #19]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d003      	beq.n	8002cee <HAL_CAN_ConfigFilter+0x26>
 8002ce6:	7cfb      	ldrb	r3, [r7, #19]
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	f040 80be 	bne.w	8002e6a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002cee:	4b65      	ldr	r3, [pc, #404]	; (8002e84 <HAL_CAN_ConfigFilter+0x1bc>)
 8002cf0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002cf8:	f043 0201 	orr.w	r2, r3, #1
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002d08:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1c:	021b      	lsls	r3, r3, #8
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	f003 031f 	and.w	r3, r3, #31
 8002d2e:	2201      	movs	r2, #1
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	401a      	ands	r2, r3
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	69db      	ldr	r3, [r3, #28]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d123      	bne.n	8002d98 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	401a      	ands	r2, r3
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002d72:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	3248      	adds	r2, #72	; 0x48
 8002d78:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002d8c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002d8e:	6979      	ldr	r1, [r7, #20]
 8002d90:	3348      	adds	r3, #72	; 0x48
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	440b      	add	r3, r1
 8002d96:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	69db      	ldr	r3, [r3, #28]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d122      	bne.n	8002de6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	431a      	orrs	r2, r3
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002dc0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	3248      	adds	r2, #72	; 0x48
 8002dc6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002dda:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002ddc:	6979      	ldr	r1, [r7, #20]
 8002dde:	3348      	adds	r3, #72	; 0x48
 8002de0:	00db      	lsls	r3, r3, #3
 8002de2:	440b      	add	r3, r1
 8002de4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d109      	bne.n	8002e02 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	43db      	mvns	r3, r3
 8002df8:	401a      	ands	r2, r3
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002e00:	e007      	b.n	8002e12 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d109      	bne.n	8002e2e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	43db      	mvns	r3, r3
 8002e24:	401a      	ands	r2, r3
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002e2c:	e007      	b.n	8002e3e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	431a      	orrs	r2, r3
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d107      	bne.n	8002e56 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002e5c:	f023 0201 	bic.w	r2, r3, #1
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002e66:	2300      	movs	r3, #0
 8002e68:	e006      	b.n	8002e78 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
  }
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	371c      	adds	r7, #28
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr
 8002e84:	40006400 	.word	0x40006400

08002e88 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d12e      	bne.n	8002efa <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 0201 	bic.w	r2, r2, #1
 8002eb2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002eb4:	f7ff f9ca 	bl	800224c <HAL_GetTick>
 8002eb8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002eba:	e012      	b.n	8002ee2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ebc:	f7ff f9c6 	bl	800224c <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b0a      	cmp	r3, #10
 8002ec8:	d90b      	bls.n	8002ee2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ece:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2205      	movs	r2, #5
 8002eda:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e012      	b.n	8002f08 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1e5      	bne.n	8002ebc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	e006      	b.n	8002f08 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
  }
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3710      	adds	r7, #16
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002f10:	b480      	push	{r7}
 8002f12:	b087      	sub	sp, #28
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]
 8002f1c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f24:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002f26:	7dfb      	ldrb	r3, [r7, #23]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d003      	beq.n	8002f34 <HAL_CAN_GetRxMessage+0x24>
 8002f2c:	7dfb      	ldrb	r3, [r7, #23]
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	f040 80f3 	bne.w	800311a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d10e      	bne.n	8002f58 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	f003 0303 	and.w	r3, r3, #3
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d116      	bne.n	8002f76 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e0e7      	b.n	8003128 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	f003 0303 	and.w	r3, r3, #3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d107      	bne.n	8002f76 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e0d8      	b.n	8003128 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	331b      	adds	r3, #27
 8002f7e:	011b      	lsls	r3, r3, #4
 8002f80:	4413      	add	r3, r2
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0204 	and.w	r2, r3, #4
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d10c      	bne.n	8002fae <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	331b      	adds	r3, #27
 8002f9c:	011b      	lsls	r3, r3, #4
 8002f9e:	4413      	add	r3, r2
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	0d5b      	lsrs	r3, r3, #21
 8002fa4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	e00b      	b.n	8002fc6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	331b      	adds	r3, #27
 8002fb6:	011b      	lsls	r3, r3, #4
 8002fb8:	4413      	add	r3, r2
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	08db      	lsrs	r3, r3, #3
 8002fbe:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	331b      	adds	r3, #27
 8002fce:	011b      	lsls	r3, r3, #4
 8002fd0:	4413      	add	r3, r2
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0202 	and.w	r2, r3, #2
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	331b      	adds	r3, #27
 8002fe4:	011b      	lsls	r3, r3, #4
 8002fe6:	4413      	add	r3, r2
 8002fe8:	3304      	adds	r3, #4
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 020f 	and.w	r2, r3, #15
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	331b      	adds	r3, #27
 8002ffc:	011b      	lsls	r3, r3, #4
 8002ffe:	4413      	add	r3, r2
 8003000:	3304      	adds	r3, #4
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	0a1b      	lsrs	r3, r3, #8
 8003006:	b2da      	uxtb	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	331b      	adds	r3, #27
 8003014:	011b      	lsls	r3, r3, #4
 8003016:	4413      	add	r3, r2
 8003018:	3304      	adds	r3, #4
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	0c1b      	lsrs	r3, r3, #16
 800301e:	b29a      	uxth	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	011b      	lsls	r3, r3, #4
 800302c:	4413      	add	r3, r2
 800302e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	b2da      	uxtb	r2, r3
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	011b      	lsls	r3, r3, #4
 8003042:	4413      	add	r3, r2
 8003044:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	0a1a      	lsrs	r2, r3, #8
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	3301      	adds	r3, #1
 8003050:	b2d2      	uxtb	r2, r2
 8003052:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	011b      	lsls	r3, r3, #4
 800305c:	4413      	add	r3, r2
 800305e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	0c1a      	lsrs	r2, r3, #16
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	3302      	adds	r3, #2
 800306a:	b2d2      	uxtb	r2, r2
 800306c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	011b      	lsls	r3, r3, #4
 8003076:	4413      	add	r3, r2
 8003078:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	0e1a      	lsrs	r2, r3, #24
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	3303      	adds	r3, #3
 8003084:	b2d2      	uxtb	r2, r2
 8003086:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	011b      	lsls	r3, r3, #4
 8003090:	4413      	add	r3, r2
 8003092:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	3304      	adds	r3, #4
 800309c:	b2d2      	uxtb	r2, r2
 800309e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	011b      	lsls	r3, r3, #4
 80030a8:	4413      	add	r3, r2
 80030aa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	0a1a      	lsrs	r2, r3, #8
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	3305      	adds	r3, #5
 80030b6:	b2d2      	uxtb	r2, r2
 80030b8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	011b      	lsls	r3, r3, #4
 80030c2:	4413      	add	r3, r2
 80030c4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	0c1a      	lsrs	r2, r3, #16
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	3306      	adds	r3, #6
 80030d0:	b2d2      	uxtb	r2, r2
 80030d2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	011b      	lsls	r3, r3, #4
 80030dc:	4413      	add	r3, r2
 80030de:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	0e1a      	lsrs	r2, r3, #24
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	3307      	adds	r3, #7
 80030ea:	b2d2      	uxtb	r2, r2
 80030ec:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d108      	bne.n	8003106 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68da      	ldr	r2, [r3, #12]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f042 0220 	orr.w	r2, r2, #32
 8003102:	60da      	str	r2, [r3, #12]
 8003104:	e007      	b.n	8003116 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	691a      	ldr	r2, [r3, #16]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f042 0220 	orr.w	r2, r2, #32
 8003114:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003116:	2300      	movs	r3, #0
 8003118:	e006      	b.n	8003128 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
  }
}
 8003128:	4618      	mov	r0, r3
 800312a:	371c      	adds	r7, #28
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003144:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003146:	7bfb      	ldrb	r3, [r7, #15]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d002      	beq.n	8003152 <HAL_CAN_ActivateNotification+0x1e>
 800314c:	7bfb      	ldrb	r3, [r7, #15]
 800314e:	2b02      	cmp	r3, #2
 8003150:	d109      	bne.n	8003166 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	6959      	ldr	r1, [r3, #20]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	430a      	orrs	r2, r1
 8003160:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003162:	2300      	movs	r3, #0
 8003164:	e006      	b.n	8003174 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
  }
}
 8003174:	4618      	mov	r0, r3
 8003176:	3714      	adds	r7, #20
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b08a      	sub	sp, #40	; 0x28
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003188:	2300      	movs	r3, #0
 800318a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80031bc:	6a3b      	ldr	r3, [r7, #32]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d07c      	beq.n	80032c0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d023      	beq.n	8003218 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2201      	movs	r2, #1
 80031d6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 f983 	bl	80034ee <HAL_CAN_TxMailbox0CompleteCallback>
 80031e8:	e016      	b.n	8003218 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	f003 0304 	and.w	r3, r3, #4
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d004      	beq.n	80031fe <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80031f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80031fa:	627b      	str	r3, [r7, #36]	; 0x24
 80031fc:	e00c      	b.n	8003218 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	f003 0308 	and.w	r3, r3, #8
 8003204:	2b00      	cmp	r3, #0
 8003206:	d004      	beq.n	8003212 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800320e:	627b      	str	r3, [r7, #36]	; 0x24
 8003210:	e002      	b.n	8003218 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 f989 	bl	800352a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800321e:	2b00      	cmp	r3, #0
 8003220:	d024      	beq.n	800326c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f44f 7280 	mov.w	r2, #256	; 0x100
 800322a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003232:	2b00      	cmp	r3, #0
 8003234:	d003      	beq.n	800323e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f963 	bl	8003502 <HAL_CAN_TxMailbox1CompleteCallback>
 800323c:	e016      	b.n	800326c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003244:	2b00      	cmp	r3, #0
 8003246:	d004      	beq.n	8003252 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800324e:	627b      	str	r3, [r7, #36]	; 0x24
 8003250:	e00c      	b.n	800326c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003258:	2b00      	cmp	r3, #0
 800325a:	d004      	beq.n	8003266 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003262:	627b      	str	r3, [r7, #36]	; 0x24
 8003264:	e002      	b.n	800326c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 f969 	bl	800353e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d024      	beq.n	80032c0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800327e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d003      	beq.n	8003292 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f943 	bl	8003516 <HAL_CAN_TxMailbox2CompleteCallback>
 8003290:	e016      	b.n	80032c0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d004      	beq.n	80032a6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800329c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032a2:	627b      	str	r3, [r7, #36]	; 0x24
 80032a4:	e00c      	b.n	80032c0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d004      	beq.n	80032ba <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80032b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032b6:	627b      	str	r3, [r7, #36]	; 0x24
 80032b8:	e002      	b.n	80032c0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f949 	bl	8003552 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80032c0:	6a3b      	ldr	r3, [r7, #32]
 80032c2:	f003 0308 	and.w	r3, r3, #8
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00c      	beq.n	80032e4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	f003 0310 	and.w	r3, r3, #16
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d007      	beq.n	80032e4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80032d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032da:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2210      	movs	r2, #16
 80032e2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80032e4:	6a3b      	ldr	r3, [r7, #32]
 80032e6:	f003 0304 	and.w	r3, r3, #4
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00b      	beq.n	8003306 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	f003 0308 	and.w	r3, r3, #8
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d006      	beq.n	8003306 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2208      	movs	r2, #8
 80032fe:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 f930 	bl	8003566 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003306:	6a3b      	ldr	r3, [r7, #32]
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d009      	beq.n	8003324 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	f003 0303 	and.w	r3, r3, #3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d002      	beq.n	8003324 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f7fd fc64 	bl	8000bec <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003324:	6a3b      	ldr	r3, [r7, #32]
 8003326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00c      	beq.n	8003348 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	f003 0310 	and.w	r3, r3, #16
 8003334:	2b00      	cmp	r3, #0
 8003336:	d007      	beq.n	8003348 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800333e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2210      	movs	r2, #16
 8003346:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003348:	6a3b      	ldr	r3, [r7, #32]
 800334a:	f003 0320 	and.w	r3, r3, #32
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00b      	beq.n	800336a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	f003 0308 	and.w	r3, r3, #8
 8003358:	2b00      	cmp	r3, #0
 800335a:	d006      	beq.n	800336a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2208      	movs	r2, #8
 8003362:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f000 f912 	bl	800358e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800336a:	6a3b      	ldr	r3, [r7, #32]
 800336c:	f003 0310 	and.w	r3, r3, #16
 8003370:	2b00      	cmp	r3, #0
 8003372:	d009      	beq.n	8003388 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	f003 0303 	and.w	r3, r3, #3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d002      	beq.n	8003388 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 f8f9 	bl	800357a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003388:	6a3b      	ldr	r3, [r7, #32]
 800338a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00b      	beq.n	80033aa <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	f003 0310 	and.w	r3, r3, #16
 8003398:	2b00      	cmp	r3, #0
 800339a:	d006      	beq.n	80033aa <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2210      	movs	r2, #16
 80033a2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f000 f8fc 	bl	80035a2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80033aa:	6a3b      	ldr	r3, [r7, #32]
 80033ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00b      	beq.n	80033cc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	f003 0308 	and.w	r3, r3, #8
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d006      	beq.n	80033cc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2208      	movs	r2, #8
 80033c4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f8f5 	bl	80035b6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80033cc:	6a3b      	ldr	r3, [r7, #32]
 80033ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d07b      	beq.n	80034ce <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	f003 0304 	and.w	r3, r3, #4
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d072      	beq.n	80034c6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80033e0:	6a3b      	ldr	r3, [r7, #32]
 80033e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d008      	beq.n	80033fc <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d003      	beq.n	80033fc <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80033f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f6:	f043 0301 	orr.w	r3, r3, #1
 80033fa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80033fc:	6a3b      	ldr	r3, [r7, #32]
 80033fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003402:	2b00      	cmp	r3, #0
 8003404:	d008      	beq.n	8003418 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800340c:	2b00      	cmp	r3, #0
 800340e:	d003      	beq.n	8003418 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003412:	f043 0302 	orr.w	r3, r3, #2
 8003416:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003418:	6a3b      	ldr	r3, [r7, #32]
 800341a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800341e:	2b00      	cmp	r3, #0
 8003420:	d008      	beq.n	8003434 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003428:	2b00      	cmp	r3, #0
 800342a:	d003      	beq.n	8003434 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800342c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342e:	f043 0304 	orr.w	r3, r3, #4
 8003432:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003434:	6a3b      	ldr	r3, [r7, #32]
 8003436:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800343a:	2b00      	cmp	r3, #0
 800343c:	d043      	beq.n	80034c6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003444:	2b00      	cmp	r3, #0
 8003446:	d03e      	beq.n	80034c6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800344e:	2b60      	cmp	r3, #96	; 0x60
 8003450:	d02b      	beq.n	80034aa <HAL_CAN_IRQHandler+0x32a>
 8003452:	2b60      	cmp	r3, #96	; 0x60
 8003454:	d82e      	bhi.n	80034b4 <HAL_CAN_IRQHandler+0x334>
 8003456:	2b50      	cmp	r3, #80	; 0x50
 8003458:	d022      	beq.n	80034a0 <HAL_CAN_IRQHandler+0x320>
 800345a:	2b50      	cmp	r3, #80	; 0x50
 800345c:	d82a      	bhi.n	80034b4 <HAL_CAN_IRQHandler+0x334>
 800345e:	2b40      	cmp	r3, #64	; 0x40
 8003460:	d019      	beq.n	8003496 <HAL_CAN_IRQHandler+0x316>
 8003462:	2b40      	cmp	r3, #64	; 0x40
 8003464:	d826      	bhi.n	80034b4 <HAL_CAN_IRQHandler+0x334>
 8003466:	2b30      	cmp	r3, #48	; 0x30
 8003468:	d010      	beq.n	800348c <HAL_CAN_IRQHandler+0x30c>
 800346a:	2b30      	cmp	r3, #48	; 0x30
 800346c:	d822      	bhi.n	80034b4 <HAL_CAN_IRQHandler+0x334>
 800346e:	2b10      	cmp	r3, #16
 8003470:	d002      	beq.n	8003478 <HAL_CAN_IRQHandler+0x2f8>
 8003472:	2b20      	cmp	r3, #32
 8003474:	d005      	beq.n	8003482 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003476:	e01d      	b.n	80034b4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347a:	f043 0308 	orr.w	r3, r3, #8
 800347e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003480:	e019      	b.n	80034b6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003484:	f043 0310 	orr.w	r3, r3, #16
 8003488:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800348a:	e014      	b.n	80034b6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800348c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348e:	f043 0320 	orr.w	r3, r3, #32
 8003492:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003494:	e00f      	b.n	80034b6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003498:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800349c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800349e:	e00a      	b.n	80034b6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80034a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034a6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80034a8:	e005      	b.n	80034b6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80034aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80034b2:	e000      	b.n	80034b6 <HAL_CAN_IRQHandler+0x336>
            break;
 80034b4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	699a      	ldr	r2, [r3, #24]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80034c4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2204      	movs	r2, #4
 80034cc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d008      	beq.n	80034e6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034da:	431a      	orrs	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f000 f872 	bl	80035ca <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80034e6:	bf00      	nop
 80034e8:	3728      	adds	r7, #40	; 0x28
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80034ee:	b480      	push	{r7}
 80034f0:	b083      	sub	sp, #12
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80034f6:	bf00      	nop
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr

08003502 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003502:	b480      	push	{r7}
 8003504:	b083      	sub	sp, #12
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800350a:	bf00      	nop
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr

08003516 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003516:	b480      	push	{r7}
 8003518:	b083      	sub	sp, #12
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800351e:	bf00      	nop
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr

0800352a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800352a:	b480      	push	{r7}
 800352c:	b083      	sub	sp, #12
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003532:	bf00      	nop
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr

0800353e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800353e:	b480      	push	{r7}
 8003540:	b083      	sub	sp, #12
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003546:	bf00      	nop
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr

08003552 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003552:	b480      	push	{r7}
 8003554:	b083      	sub	sp, #12
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800355a:	bf00      	nop
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003566:	b480      	push	{r7}
 8003568:	b083      	sub	sp, #12
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800356e:	bf00      	nop
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr

0800357a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800357a:	b480      	push	{r7}
 800357c:	b083      	sub	sp, #12
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003582:	bf00      	nop
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr

0800358e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800358e:	b480      	push	{r7}
 8003590:	b083      	sub	sp, #12
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003596:	bf00      	nop
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr

080035a2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80035a2:	b480      	push	{r7}
 80035a4:	b083      	sub	sp, #12
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80035aa:	bf00      	nop
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr

080035b6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80035b6:	b480      	push	{r7}
 80035b8:	b083      	sub	sp, #12
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80035be:	bf00      	nop
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80035ca:	b480      	push	{r7}
 80035cc:	b083      	sub	sp, #12
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80035d2:	bf00      	nop
 80035d4:	370c      	adds	r7, #12
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
	...

080035e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f003 0307 	and.w	r3, r3, #7
 80035ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035f0:	4b0c      	ldr	r3, [pc, #48]	; (8003624 <__NVIC_SetPriorityGrouping+0x44>)
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035f6:	68ba      	ldr	r2, [r7, #8]
 80035f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035fc:	4013      	ands	r3, r2
 80035fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003608:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800360c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003612:	4a04      	ldr	r2, [pc, #16]	; (8003624 <__NVIC_SetPriorityGrouping+0x44>)
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	60d3      	str	r3, [r2, #12]
}
 8003618:	bf00      	nop
 800361a:	3714      	adds	r7, #20
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr
 8003624:	e000ed00 	.word	0xe000ed00

08003628 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800362c:	4b04      	ldr	r3, [pc, #16]	; (8003640 <__NVIC_GetPriorityGrouping+0x18>)
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	0a1b      	lsrs	r3, r3, #8
 8003632:	f003 0307 	and.w	r3, r3, #7
}
 8003636:	4618      	mov	r0, r3
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr
 8003640:	e000ed00 	.word	0xe000ed00

08003644 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	4603      	mov	r3, r0
 800364c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800364e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003652:	2b00      	cmp	r3, #0
 8003654:	db0b      	blt.n	800366e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003656:	79fb      	ldrb	r3, [r7, #7]
 8003658:	f003 021f 	and.w	r2, r3, #31
 800365c:	4907      	ldr	r1, [pc, #28]	; (800367c <__NVIC_EnableIRQ+0x38>)
 800365e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003662:	095b      	lsrs	r3, r3, #5
 8003664:	2001      	movs	r0, #1
 8003666:	fa00 f202 	lsl.w	r2, r0, r2
 800366a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800366e:	bf00      	nop
 8003670:	370c      	adds	r7, #12
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	e000e100 	.word	0xe000e100

08003680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	4603      	mov	r3, r0
 8003688:	6039      	str	r1, [r7, #0]
 800368a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800368c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003690:	2b00      	cmp	r3, #0
 8003692:	db0a      	blt.n	80036aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	b2da      	uxtb	r2, r3
 8003698:	490c      	ldr	r1, [pc, #48]	; (80036cc <__NVIC_SetPriority+0x4c>)
 800369a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800369e:	0112      	lsls	r2, r2, #4
 80036a0:	b2d2      	uxtb	r2, r2
 80036a2:	440b      	add	r3, r1
 80036a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036a8:	e00a      	b.n	80036c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	b2da      	uxtb	r2, r3
 80036ae:	4908      	ldr	r1, [pc, #32]	; (80036d0 <__NVIC_SetPriority+0x50>)
 80036b0:	79fb      	ldrb	r3, [r7, #7]
 80036b2:	f003 030f 	and.w	r3, r3, #15
 80036b6:	3b04      	subs	r3, #4
 80036b8:	0112      	lsls	r2, r2, #4
 80036ba:	b2d2      	uxtb	r2, r2
 80036bc:	440b      	add	r3, r1
 80036be:	761a      	strb	r2, [r3, #24]
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr
 80036cc:	e000e100 	.word	0xe000e100
 80036d0:	e000ed00 	.word	0xe000ed00

080036d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b089      	sub	sp, #36	; 0x24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f003 0307 	and.w	r3, r3, #7
 80036e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	f1c3 0307 	rsb	r3, r3, #7
 80036ee:	2b04      	cmp	r3, #4
 80036f0:	bf28      	it	cs
 80036f2:	2304      	movcs	r3, #4
 80036f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	3304      	adds	r3, #4
 80036fa:	2b06      	cmp	r3, #6
 80036fc:	d902      	bls.n	8003704 <NVIC_EncodePriority+0x30>
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	3b03      	subs	r3, #3
 8003702:	e000      	b.n	8003706 <NVIC_EncodePriority+0x32>
 8003704:	2300      	movs	r3, #0
 8003706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003708:	f04f 32ff 	mov.w	r2, #4294967295
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	fa02 f303 	lsl.w	r3, r2, r3
 8003712:	43da      	mvns	r2, r3
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	401a      	ands	r2, r3
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800371c:	f04f 31ff 	mov.w	r1, #4294967295
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	fa01 f303 	lsl.w	r3, r1, r3
 8003726:	43d9      	mvns	r1, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800372c:	4313      	orrs	r3, r2
         );
}
 800372e:	4618      	mov	r0, r3
 8003730:	3724      	adds	r7, #36	; 0x24
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr

0800373a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b082      	sub	sp, #8
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7ff ff4c 	bl	80035e0 <__NVIC_SetPriorityGrouping>
}
 8003748:	bf00      	nop
 800374a:	3708      	adds	r7, #8
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003750:	b580      	push	{r7, lr}
 8003752:	b086      	sub	sp, #24
 8003754:	af00      	add	r7, sp, #0
 8003756:	4603      	mov	r3, r0
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	607a      	str	r2, [r7, #4]
 800375c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800375e:	2300      	movs	r3, #0
 8003760:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003762:	f7ff ff61 	bl	8003628 <__NVIC_GetPriorityGrouping>
 8003766:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	68b9      	ldr	r1, [r7, #8]
 800376c:	6978      	ldr	r0, [r7, #20]
 800376e:	f7ff ffb1 	bl	80036d4 <NVIC_EncodePriority>
 8003772:	4602      	mov	r2, r0
 8003774:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003778:	4611      	mov	r1, r2
 800377a:	4618      	mov	r0, r3
 800377c:	f7ff ff80 	bl	8003680 <__NVIC_SetPriority>
}
 8003780:	bf00      	nop
 8003782:	3718      	adds	r7, #24
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	4603      	mov	r3, r0
 8003790:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003796:	4618      	mov	r0, r3
 8003798:	f7ff ff54 	bl	8003644 <__NVIC_EnableIRQ>
}
 800379c:	bf00      	nop
 800379e:	3708      	adds	r7, #8
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80037ac:	2300      	movs	r3, #0
 80037ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80037b0:	f7fe fd4c 	bl	800224c <HAL_GetTick>
 80037b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d101      	bne.n	80037c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e099      	b.n	80038f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2202      	movs	r2, #2
 80037c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 0201 	bic.w	r2, r2, #1
 80037de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037e0:	e00f      	b.n	8003802 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037e2:	f7fe fd33 	bl	800224c <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b05      	cmp	r3, #5
 80037ee:	d908      	bls.n	8003802 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2220      	movs	r2, #32
 80037f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2203      	movs	r2, #3
 80037fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e078      	b.n	80038f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1e8      	bne.n	80037e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	4b38      	ldr	r3, [pc, #224]	; (80038fc <HAL_DMA_Init+0x158>)
 800381c:	4013      	ands	r3, r2
 800381e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685a      	ldr	r2, [r3, #4]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800382e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800383a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003846:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800384e:	697a      	ldr	r2, [r7, #20]
 8003850:	4313      	orrs	r3, r2
 8003852:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003858:	2b04      	cmp	r3, #4
 800385a:	d107      	bne.n	800386c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003864:	4313      	orrs	r3, r2
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	4313      	orrs	r3, r2
 800386a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	f023 0307 	bic.w	r3, r3, #7
 8003882:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003888:	697a      	ldr	r2, [r7, #20]
 800388a:	4313      	orrs	r3, r2
 800388c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003892:	2b04      	cmp	r3, #4
 8003894:	d117      	bne.n	80038c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	4313      	orrs	r3, r2
 800389e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00e      	beq.n	80038c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 fa6f 	bl	8003d8c <DMA_CheckFifoParam>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d008      	beq.n	80038c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2240      	movs	r2, #64	; 0x40
 80038b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80038c2:	2301      	movs	r3, #1
 80038c4:	e016      	b.n	80038f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 fa26 	bl	8003d20 <DMA_CalcBaseAndBitshift>
 80038d4:	4603      	mov	r3, r0
 80038d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038dc:	223f      	movs	r2, #63	; 0x3f
 80038de:	409a      	lsls	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3718      	adds	r7, #24
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	f010803f 	.word	0xf010803f

08003900 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]
 800390c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800390e:	2300      	movs	r3, #0
 8003910:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003916:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800391e:	2b01      	cmp	r3, #1
 8003920:	d101      	bne.n	8003926 <HAL_DMA_Start_IT+0x26>
 8003922:	2302      	movs	r3, #2
 8003924:	e040      	b.n	80039a8 <HAL_DMA_Start_IT+0xa8>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b01      	cmp	r3, #1
 8003938:	d12f      	bne.n	800399a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2202      	movs	r2, #2
 800393e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	68b9      	ldr	r1, [r7, #8]
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f000 f9b8 	bl	8003cc4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003958:	223f      	movs	r2, #63	; 0x3f
 800395a:	409a      	lsls	r2, r3
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f042 0216 	orr.w	r2, r2, #22
 800396e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003974:	2b00      	cmp	r3, #0
 8003976:	d007      	beq.n	8003988 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f042 0208 	orr.w	r2, r2, #8
 8003986:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f042 0201 	orr.w	r2, r2, #1
 8003996:	601a      	str	r2, [r3, #0]
 8003998:	e005      	b.n	80039a6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80039a2:	2302      	movs	r3, #2
 80039a4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80039a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3718      	adds	r7, #24
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80039b8:	2300      	movs	r3, #0
 80039ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80039bc:	4b92      	ldr	r3, [pc, #584]	; (8003c08 <HAL_DMA_IRQHandler+0x258>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a92      	ldr	r2, [pc, #584]	; (8003c0c <HAL_DMA_IRQHandler+0x25c>)
 80039c2:	fba2 2303 	umull	r2, r3, r2, r3
 80039c6:	0a9b      	lsrs	r3, r3, #10
 80039c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039da:	2208      	movs	r2, #8
 80039dc:	409a      	lsls	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	4013      	ands	r3, r2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d01a      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0304 	and.w	r3, r3, #4
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d013      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 0204 	bic.w	r2, r2, #4
 8003a02:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a08:	2208      	movs	r2, #8
 8003a0a:	409a      	lsls	r2, r3
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a14:	f043 0201 	orr.w	r2, r3, #1
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a20:	2201      	movs	r2, #1
 8003a22:	409a      	lsls	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	4013      	ands	r3, r2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d012      	beq.n	8003a52 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00b      	beq.n	8003a52 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a3e:	2201      	movs	r2, #1
 8003a40:	409a      	lsls	r2, r3
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a4a:	f043 0202 	orr.w	r2, r3, #2
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a56:	2204      	movs	r2, #4
 8003a58:	409a      	lsls	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d012      	beq.n	8003a88 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0302 	and.w	r3, r3, #2
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d00b      	beq.n	8003a88 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a74:	2204      	movs	r2, #4
 8003a76:	409a      	lsls	r2, r3
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a80:	f043 0204 	orr.w	r2, r3, #4
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a8c:	2210      	movs	r2, #16
 8003a8e:	409a      	lsls	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	4013      	ands	r3, r2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d043      	beq.n	8003b20 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0308 	and.w	r3, r3, #8
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d03c      	beq.n	8003b20 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aaa:	2210      	movs	r2, #16
 8003aac:	409a      	lsls	r2, r3
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d018      	beq.n	8003af2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d108      	bne.n	8003ae0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d024      	beq.n	8003b20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	4798      	blx	r3
 8003ade:	e01f      	b.n	8003b20 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d01b      	beq.n	8003b20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	4798      	blx	r3
 8003af0:	e016      	b.n	8003b20 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d107      	bne.n	8003b10 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f022 0208 	bic.w	r2, r2, #8
 8003b0e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d003      	beq.n	8003b20 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b24:	2220      	movs	r2, #32
 8003b26:	409a      	lsls	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f000 808e 	beq.w	8003c4e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0310 	and.w	r3, r3, #16
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f000 8086 	beq.w	8003c4e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b46:	2220      	movs	r2, #32
 8003b48:	409a      	lsls	r2, r3
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2b05      	cmp	r3, #5
 8003b58:	d136      	bne.n	8003bc8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f022 0216 	bic.w	r2, r2, #22
 8003b68:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	695a      	ldr	r2, [r3, #20]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b78:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d103      	bne.n	8003b8a <HAL_DMA_IRQHandler+0x1da>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d007      	beq.n	8003b9a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 0208 	bic.w	r2, r2, #8
 8003b98:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b9e:	223f      	movs	r2, #63	; 0x3f
 8003ba0:	409a      	lsls	r2, r3
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d07d      	beq.n	8003cba <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	4798      	blx	r3
        }
        return;
 8003bc6:	e078      	b.n	8003cba <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d01c      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d108      	bne.n	8003bf6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d030      	beq.n	8003c4e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	4798      	blx	r3
 8003bf4:	e02b      	b.n	8003c4e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d027      	beq.n	8003c4e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	4798      	blx	r3
 8003c06:	e022      	b.n	8003c4e <HAL_DMA_IRQHandler+0x29e>
 8003c08:	20000000 	.word	0x20000000
 8003c0c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10f      	bne.n	8003c3e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 0210 	bic.w	r2, r2, #16
 8003c2c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d003      	beq.n	8003c4e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d032      	beq.n	8003cbc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d022      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2205      	movs	r2, #5
 8003c66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 0201 	bic.w	r2, r2, #1
 8003c78:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	60bb      	str	r3, [r7, #8]
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d307      	bcc.n	8003c96 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1f2      	bne.n	8003c7a <HAL_DMA_IRQHandler+0x2ca>
 8003c94:	e000      	b.n	8003c98 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003c96:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d005      	beq.n	8003cbc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	4798      	blx	r3
 8003cb8:	e000      	b.n	8003cbc <HAL_DMA_IRQHandler+0x30c>
        return;
 8003cba:	bf00      	nop
    }
  }
}
 8003cbc:	3718      	adds	r7, #24
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop

08003cc4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
 8003cd0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ce0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	2b40      	cmp	r3, #64	; 0x40
 8003cf0:	d108      	bne.n	8003d04 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68ba      	ldr	r2, [r7, #8]
 8003d00:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003d02:	e007      	b.n	8003d14 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68ba      	ldr	r2, [r7, #8]
 8003d0a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	60da      	str	r2, [r3, #12]
}
 8003d14:	bf00      	nop
 8003d16:	3714      	adds	r7, #20
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	3b10      	subs	r3, #16
 8003d30:	4a14      	ldr	r2, [pc, #80]	; (8003d84 <DMA_CalcBaseAndBitshift+0x64>)
 8003d32:	fba2 2303 	umull	r2, r3, r2, r3
 8003d36:	091b      	lsrs	r3, r3, #4
 8003d38:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d3a:	4a13      	ldr	r2, [pc, #76]	; (8003d88 <DMA_CalcBaseAndBitshift+0x68>)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	4413      	add	r3, r2
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	461a      	mov	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2b03      	cmp	r3, #3
 8003d4c:	d909      	bls.n	8003d62 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d56:	f023 0303 	bic.w	r3, r3, #3
 8003d5a:	1d1a      	adds	r2, r3, #4
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	659a      	str	r2, [r3, #88]	; 0x58
 8003d60:	e007      	b.n	8003d72 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d6a:	f023 0303 	bic.w	r3, r3, #3
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3714      	adds	r7, #20
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	aaaaaaab 	.word	0xaaaaaaab
 8003d88:	0800f41c 	.word	0x0800f41c

08003d8c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d94:	2300      	movs	r3, #0
 8003d96:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d11f      	bne.n	8003de6 <DMA_CheckFifoParam+0x5a>
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	2b03      	cmp	r3, #3
 8003daa:	d856      	bhi.n	8003e5a <DMA_CheckFifoParam+0xce>
 8003dac:	a201      	add	r2, pc, #4	; (adr r2, 8003db4 <DMA_CheckFifoParam+0x28>)
 8003dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db2:	bf00      	nop
 8003db4:	08003dc5 	.word	0x08003dc5
 8003db8:	08003dd7 	.word	0x08003dd7
 8003dbc:	08003dc5 	.word	0x08003dc5
 8003dc0:	08003e5b 	.word	0x08003e5b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d046      	beq.n	8003e5e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dd4:	e043      	b.n	8003e5e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dda:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003dde:	d140      	bne.n	8003e62 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003de4:	e03d      	b.n	8003e62 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dee:	d121      	bne.n	8003e34 <DMA_CheckFifoParam+0xa8>
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	2b03      	cmp	r3, #3
 8003df4:	d837      	bhi.n	8003e66 <DMA_CheckFifoParam+0xda>
 8003df6:	a201      	add	r2, pc, #4	; (adr r2, 8003dfc <DMA_CheckFifoParam+0x70>)
 8003df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dfc:	08003e0d 	.word	0x08003e0d
 8003e00:	08003e13 	.word	0x08003e13
 8003e04:	08003e0d 	.word	0x08003e0d
 8003e08:	08003e25 	.word	0x08003e25
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e10:	e030      	b.n	8003e74 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d025      	beq.n	8003e6a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e22:	e022      	b.n	8003e6a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e28:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e2c:	d11f      	bne.n	8003e6e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e32:	e01c      	b.n	8003e6e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d903      	bls.n	8003e42 <DMA_CheckFifoParam+0xb6>
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	2b03      	cmp	r3, #3
 8003e3e:	d003      	beq.n	8003e48 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e40:	e018      	b.n	8003e74 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	73fb      	strb	r3, [r7, #15]
      break;
 8003e46:	e015      	b.n	8003e74 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00e      	beq.n	8003e72 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	73fb      	strb	r3, [r7, #15]
      break;
 8003e58:	e00b      	b.n	8003e72 <DMA_CheckFifoParam+0xe6>
      break;
 8003e5a:	bf00      	nop
 8003e5c:	e00a      	b.n	8003e74 <DMA_CheckFifoParam+0xe8>
      break;
 8003e5e:	bf00      	nop
 8003e60:	e008      	b.n	8003e74 <DMA_CheckFifoParam+0xe8>
      break;
 8003e62:	bf00      	nop
 8003e64:	e006      	b.n	8003e74 <DMA_CheckFifoParam+0xe8>
      break;
 8003e66:	bf00      	nop
 8003e68:	e004      	b.n	8003e74 <DMA_CheckFifoParam+0xe8>
      break;
 8003e6a:	bf00      	nop
 8003e6c:	e002      	b.n	8003e74 <DMA_CheckFifoParam+0xe8>
      break;   
 8003e6e:	bf00      	nop
 8003e70:	e000      	b.n	8003e74 <DMA_CheckFifoParam+0xe8>
      break;
 8003e72:	bf00      	nop
    }
  } 
  
  return status; 
 8003e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3714      	adds	r7, #20
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop

08003e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b089      	sub	sp, #36	; 0x24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e92:	2300      	movs	r3, #0
 8003e94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e96:	2300      	movs	r3, #0
 8003e98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	61fb      	str	r3, [r7, #28]
 8003e9e:	e16b      	b.n	8004178 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	f040 815a 	bne.w	8004172 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f003 0303 	and.w	r3, r3, #3
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d005      	beq.n	8003ed6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d130      	bne.n	8003f38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	005b      	lsls	r3, r3, #1
 8003ee0:	2203      	movs	r2, #3
 8003ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee6:	43db      	mvns	r3, r3
 8003ee8:	69ba      	ldr	r2, [r7, #24]
 8003eea:	4013      	ands	r3, r2
 8003eec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	68da      	ldr	r2, [r3, #12]
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8003efa:	69ba      	ldr	r2, [r7, #24]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	69ba      	ldr	r2, [r7, #24]
 8003f04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	fa02 f303 	lsl.w	r3, r2, r3
 8003f14:	43db      	mvns	r3, r3
 8003f16:	69ba      	ldr	r2, [r7, #24]
 8003f18:	4013      	ands	r3, r2
 8003f1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	091b      	lsrs	r3, r3, #4
 8003f22:	f003 0201 	and.w	r2, r3, #1
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	69ba      	ldr	r2, [r7, #24]
 8003f36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f003 0303 	and.w	r3, r3, #3
 8003f40:	2b03      	cmp	r3, #3
 8003f42:	d017      	beq.n	8003f74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	2203      	movs	r2, #3
 8003f50:	fa02 f303 	lsl.w	r3, r2, r3
 8003f54:	43db      	mvns	r3, r3
 8003f56:	69ba      	ldr	r2, [r7, #24]
 8003f58:	4013      	ands	r3, r2
 8003f5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	689a      	ldr	r2, [r3, #8]
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	fa02 f303 	lsl.w	r3, r2, r3
 8003f68:	69ba      	ldr	r2, [r7, #24]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	69ba      	ldr	r2, [r7, #24]
 8003f72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f003 0303 	and.w	r3, r3, #3
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d123      	bne.n	8003fc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	08da      	lsrs	r2, r3, #3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	3208      	adds	r2, #8
 8003f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	f003 0307 	and.w	r3, r3, #7
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	220f      	movs	r2, #15
 8003f98:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9c:	43db      	mvns	r3, r3
 8003f9e:	69ba      	ldr	r2, [r7, #24]
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	691a      	ldr	r2, [r3, #16]
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	f003 0307 	and.w	r3, r3, #7
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb4:	69ba      	ldr	r2, [r7, #24]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	08da      	lsrs	r2, r3, #3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	3208      	adds	r2, #8
 8003fc2:	69b9      	ldr	r1, [r7, #24]
 8003fc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	005b      	lsls	r3, r3, #1
 8003fd2:	2203      	movs	r2, #3
 8003fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd8:	43db      	mvns	r3, r3
 8003fda:	69ba      	ldr	r2, [r7, #24]
 8003fdc:	4013      	ands	r3, r2
 8003fde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f003 0203 	and.w	r2, r3, #3
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	005b      	lsls	r3, r3, #1
 8003fec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff0:	69ba      	ldr	r2, [r7, #24]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004004:	2b00      	cmp	r3, #0
 8004006:	f000 80b4 	beq.w	8004172 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800400a:	2300      	movs	r3, #0
 800400c:	60fb      	str	r3, [r7, #12]
 800400e:	4b60      	ldr	r3, [pc, #384]	; (8004190 <HAL_GPIO_Init+0x30c>)
 8004010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004012:	4a5f      	ldr	r2, [pc, #380]	; (8004190 <HAL_GPIO_Init+0x30c>)
 8004014:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004018:	6453      	str	r3, [r2, #68]	; 0x44
 800401a:	4b5d      	ldr	r3, [pc, #372]	; (8004190 <HAL_GPIO_Init+0x30c>)
 800401c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004022:	60fb      	str	r3, [r7, #12]
 8004024:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004026:	4a5b      	ldr	r2, [pc, #364]	; (8004194 <HAL_GPIO_Init+0x310>)
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	089b      	lsrs	r3, r3, #2
 800402c:	3302      	adds	r3, #2
 800402e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004032:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	f003 0303 	and.w	r3, r3, #3
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	220f      	movs	r2, #15
 800403e:	fa02 f303 	lsl.w	r3, r2, r3
 8004042:	43db      	mvns	r3, r3
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	4013      	ands	r3, r2
 8004048:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a52      	ldr	r2, [pc, #328]	; (8004198 <HAL_GPIO_Init+0x314>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d02b      	beq.n	80040aa <HAL_GPIO_Init+0x226>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a51      	ldr	r2, [pc, #324]	; (800419c <HAL_GPIO_Init+0x318>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d025      	beq.n	80040a6 <HAL_GPIO_Init+0x222>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a50      	ldr	r2, [pc, #320]	; (80041a0 <HAL_GPIO_Init+0x31c>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d01f      	beq.n	80040a2 <HAL_GPIO_Init+0x21e>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a4f      	ldr	r2, [pc, #316]	; (80041a4 <HAL_GPIO_Init+0x320>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d019      	beq.n	800409e <HAL_GPIO_Init+0x21a>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a4e      	ldr	r2, [pc, #312]	; (80041a8 <HAL_GPIO_Init+0x324>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d013      	beq.n	800409a <HAL_GPIO_Init+0x216>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a4d      	ldr	r2, [pc, #308]	; (80041ac <HAL_GPIO_Init+0x328>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d00d      	beq.n	8004096 <HAL_GPIO_Init+0x212>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a4c      	ldr	r2, [pc, #304]	; (80041b0 <HAL_GPIO_Init+0x32c>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d007      	beq.n	8004092 <HAL_GPIO_Init+0x20e>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a4b      	ldr	r2, [pc, #300]	; (80041b4 <HAL_GPIO_Init+0x330>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d101      	bne.n	800408e <HAL_GPIO_Init+0x20a>
 800408a:	2307      	movs	r3, #7
 800408c:	e00e      	b.n	80040ac <HAL_GPIO_Init+0x228>
 800408e:	2308      	movs	r3, #8
 8004090:	e00c      	b.n	80040ac <HAL_GPIO_Init+0x228>
 8004092:	2306      	movs	r3, #6
 8004094:	e00a      	b.n	80040ac <HAL_GPIO_Init+0x228>
 8004096:	2305      	movs	r3, #5
 8004098:	e008      	b.n	80040ac <HAL_GPIO_Init+0x228>
 800409a:	2304      	movs	r3, #4
 800409c:	e006      	b.n	80040ac <HAL_GPIO_Init+0x228>
 800409e:	2303      	movs	r3, #3
 80040a0:	e004      	b.n	80040ac <HAL_GPIO_Init+0x228>
 80040a2:	2302      	movs	r3, #2
 80040a4:	e002      	b.n	80040ac <HAL_GPIO_Init+0x228>
 80040a6:	2301      	movs	r3, #1
 80040a8:	e000      	b.n	80040ac <HAL_GPIO_Init+0x228>
 80040aa:	2300      	movs	r3, #0
 80040ac:	69fa      	ldr	r2, [r7, #28]
 80040ae:	f002 0203 	and.w	r2, r2, #3
 80040b2:	0092      	lsls	r2, r2, #2
 80040b4:	4093      	lsls	r3, r2
 80040b6:	69ba      	ldr	r2, [r7, #24]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040bc:	4935      	ldr	r1, [pc, #212]	; (8004194 <HAL_GPIO_Init+0x310>)
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	089b      	lsrs	r3, r3, #2
 80040c2:	3302      	adds	r3, #2
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040ca:	4b3b      	ldr	r3, [pc, #236]	; (80041b8 <HAL_GPIO_Init+0x334>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	43db      	mvns	r3, r3
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	4013      	ands	r3, r2
 80040d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d003      	beq.n	80040ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80040e6:	69ba      	ldr	r2, [r7, #24]
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040ee:	4a32      	ldr	r2, [pc, #200]	; (80041b8 <HAL_GPIO_Init+0x334>)
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80040f4:	4b30      	ldr	r3, [pc, #192]	; (80041b8 <HAL_GPIO_Init+0x334>)
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	43db      	mvns	r3, r3
 80040fe:	69ba      	ldr	r2, [r7, #24]
 8004100:	4013      	ands	r3, r2
 8004102:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d003      	beq.n	8004118 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	4313      	orrs	r3, r2
 8004116:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004118:	4a27      	ldr	r2, [pc, #156]	; (80041b8 <HAL_GPIO_Init+0x334>)
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800411e:	4b26      	ldr	r3, [pc, #152]	; (80041b8 <HAL_GPIO_Init+0x334>)
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	43db      	mvns	r3, r3
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	4013      	ands	r3, r2
 800412c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d003      	beq.n	8004142 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800413a:	69ba      	ldr	r2, [r7, #24]
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	4313      	orrs	r3, r2
 8004140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004142:	4a1d      	ldr	r2, [pc, #116]	; (80041b8 <HAL_GPIO_Init+0x334>)
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004148:	4b1b      	ldr	r3, [pc, #108]	; (80041b8 <HAL_GPIO_Init+0x334>)
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	43db      	mvns	r3, r3
 8004152:	69ba      	ldr	r2, [r7, #24]
 8004154:	4013      	ands	r3, r2
 8004156:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d003      	beq.n	800416c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004164:	69ba      	ldr	r2, [r7, #24]
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	4313      	orrs	r3, r2
 800416a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800416c:	4a12      	ldr	r2, [pc, #72]	; (80041b8 <HAL_GPIO_Init+0x334>)
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	3301      	adds	r3, #1
 8004176:	61fb      	str	r3, [r7, #28]
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	2b0f      	cmp	r3, #15
 800417c:	f67f ae90 	bls.w	8003ea0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004180:	bf00      	nop
 8004182:	bf00      	nop
 8004184:	3724      	adds	r7, #36	; 0x24
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	40023800 	.word	0x40023800
 8004194:	40013800 	.word	0x40013800
 8004198:	40020000 	.word	0x40020000
 800419c:	40020400 	.word	0x40020400
 80041a0:	40020800 	.word	0x40020800
 80041a4:	40020c00 	.word	0x40020c00
 80041a8:	40021000 	.word	0x40021000
 80041ac:	40021400 	.word	0x40021400
 80041b0:	40021800 	.word	0x40021800
 80041b4:	40021c00 	.word	0x40021c00
 80041b8:	40013c00 	.word	0x40013c00

080041bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	460b      	mov	r3, r1
 80041c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	691a      	ldr	r2, [r3, #16]
 80041cc:	887b      	ldrh	r3, [r7, #2]
 80041ce:	4013      	ands	r3, r2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d002      	beq.n	80041da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80041d4:	2301      	movs	r3, #1
 80041d6:	73fb      	strb	r3, [r7, #15]
 80041d8:	e001      	b.n	80041de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041da:	2300      	movs	r3, #0
 80041dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80041de:	7bfb      	ldrb	r3, [r7, #15]
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3714      	adds	r7, #20
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	460b      	mov	r3, r1
 80041f6:	807b      	strh	r3, [r7, #2]
 80041f8:	4613      	mov	r3, r2
 80041fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041fc:	787b      	ldrb	r3, [r7, #1]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d003      	beq.n	800420a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004202:	887a      	ldrh	r2, [r7, #2]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004208:	e003      	b.n	8004212 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800420a:	887b      	ldrh	r3, [r7, #2]
 800420c:	041a      	lsls	r2, r3, #16
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	619a      	str	r2, [r3, #24]
}
 8004212:	bf00      	nop
 8004214:	370c      	adds	r7, #12
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr

0800421e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800421e:	b480      	push	{r7}
 8004220:	b085      	sub	sp, #20
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
 8004226:	460b      	mov	r3, r1
 8004228:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004230:	887a      	ldrh	r2, [r7, #2]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	4013      	ands	r3, r2
 8004236:	041a      	lsls	r2, r3, #16
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	43d9      	mvns	r1, r3
 800423c:	887b      	ldrh	r3, [r7, #2]
 800423e:	400b      	ands	r3, r1
 8004240:	431a      	orrs	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	619a      	str	r2, [r3, #24]
}
 8004246:	bf00      	nop
 8004248:	3714      	adds	r7, #20
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004252:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004254:	b08f      	sub	sp, #60	; 0x3c
 8004256:	af0a      	add	r7, sp, #40	; 0x28
 8004258:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d101      	bne.n	8004264 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e054      	b.n	800430e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d106      	bne.n	8004284 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f00a f888 	bl	800e394 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2203      	movs	r2, #3
 8004288:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004294:	2b00      	cmp	r3, #0
 8004296:	d102      	bne.n	800429e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f004 f854 	bl	8008350 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	603b      	str	r3, [r7, #0]
 80042ae:	687e      	ldr	r6, [r7, #4]
 80042b0:	466d      	mov	r5, sp
 80042b2:	f106 0410 	add.w	r4, r6, #16
 80042b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80042c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80042c6:	1d33      	adds	r3, r6, #4
 80042c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042ca:	6838      	ldr	r0, [r7, #0]
 80042cc:	f003 ffce 	bl	800826c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2101      	movs	r1, #1
 80042d6:	4618      	mov	r0, r3
 80042d8:	f004 f84b 	bl	8008372 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	603b      	str	r3, [r7, #0]
 80042e2:	687e      	ldr	r6, [r7, #4]
 80042e4:	466d      	mov	r5, sp
 80042e6:	f106 0410 	add.w	r4, r6, #16
 80042ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80042f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80042fa:	1d33      	adds	r3, r6, #4
 80042fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042fe:	6838      	ldr	r0, [r7, #0]
 8004300:	f004 f9b2 	bl	8008668 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3714      	adds	r7, #20
 8004312:	46bd      	mov	sp, r7
 8004314:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004316 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8004316:	b590      	push	{r4, r7, lr}
 8004318:	b089      	sub	sp, #36	; 0x24
 800431a:	af04      	add	r7, sp, #16
 800431c:	6078      	str	r0, [r7, #4]
 800431e:	4608      	mov	r0, r1
 8004320:	4611      	mov	r1, r2
 8004322:	461a      	mov	r2, r3
 8004324:	4603      	mov	r3, r0
 8004326:	70fb      	strb	r3, [r7, #3]
 8004328:	460b      	mov	r3, r1
 800432a:	70bb      	strb	r3, [r7, #2]
 800432c:	4613      	mov	r3, r2
 800432e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004336:	2b01      	cmp	r3, #1
 8004338:	d101      	bne.n	800433e <HAL_HCD_HC_Init+0x28>
 800433a:	2302      	movs	r3, #2
 800433c:	e076      	b.n	800442c <HAL_HCD_HC_Init+0x116>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2201      	movs	r2, #1
 8004342:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8004346:	78fb      	ldrb	r3, [r7, #3]
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	212c      	movs	r1, #44	; 0x2c
 800434c:	fb01 f303 	mul.w	r3, r1, r3
 8004350:	4413      	add	r3, r2
 8004352:	333d      	adds	r3, #61	; 0x3d
 8004354:	2200      	movs	r2, #0
 8004356:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004358:	78fb      	ldrb	r3, [r7, #3]
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	212c      	movs	r1, #44	; 0x2c
 800435e:	fb01 f303 	mul.w	r3, r1, r3
 8004362:	4413      	add	r3, r2
 8004364:	3338      	adds	r3, #56	; 0x38
 8004366:	787a      	ldrb	r2, [r7, #1]
 8004368:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800436a:	78fb      	ldrb	r3, [r7, #3]
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	212c      	movs	r1, #44	; 0x2c
 8004370:	fb01 f303 	mul.w	r3, r1, r3
 8004374:	4413      	add	r3, r2
 8004376:	3340      	adds	r3, #64	; 0x40
 8004378:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800437a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800437c:	78fb      	ldrb	r3, [r7, #3]
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	212c      	movs	r1, #44	; 0x2c
 8004382:	fb01 f303 	mul.w	r3, r1, r3
 8004386:	4413      	add	r3, r2
 8004388:	3339      	adds	r3, #57	; 0x39
 800438a:	78fa      	ldrb	r2, [r7, #3]
 800438c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800438e:	78fb      	ldrb	r3, [r7, #3]
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	212c      	movs	r1, #44	; 0x2c
 8004394:	fb01 f303 	mul.w	r3, r1, r3
 8004398:	4413      	add	r3, r2
 800439a:	333f      	adds	r3, #63	; 0x3f
 800439c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80043a0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80043a2:	78fb      	ldrb	r3, [r7, #3]
 80043a4:	78ba      	ldrb	r2, [r7, #2]
 80043a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80043aa:	b2d0      	uxtb	r0, r2
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	212c      	movs	r1, #44	; 0x2c
 80043b0:	fb01 f303 	mul.w	r3, r1, r3
 80043b4:	4413      	add	r3, r2
 80043b6:	333a      	adds	r3, #58	; 0x3a
 80043b8:	4602      	mov	r2, r0
 80043ba:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80043bc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	da09      	bge.n	80043d8 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80043c4:	78fb      	ldrb	r3, [r7, #3]
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	212c      	movs	r1, #44	; 0x2c
 80043ca:	fb01 f303 	mul.w	r3, r1, r3
 80043ce:	4413      	add	r3, r2
 80043d0:	333b      	adds	r3, #59	; 0x3b
 80043d2:	2201      	movs	r2, #1
 80043d4:	701a      	strb	r2, [r3, #0]
 80043d6:	e008      	b.n	80043ea <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80043d8:	78fb      	ldrb	r3, [r7, #3]
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	212c      	movs	r1, #44	; 0x2c
 80043de:	fb01 f303 	mul.w	r3, r1, r3
 80043e2:	4413      	add	r3, r2
 80043e4:	333b      	adds	r3, #59	; 0x3b
 80043e6:	2200      	movs	r2, #0
 80043e8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80043ea:	78fb      	ldrb	r3, [r7, #3]
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	212c      	movs	r1, #44	; 0x2c
 80043f0:	fb01 f303 	mul.w	r3, r1, r3
 80043f4:	4413      	add	r3, r2
 80043f6:	333c      	adds	r3, #60	; 0x3c
 80043f8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80043fc:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6818      	ldr	r0, [r3, #0]
 8004402:	787c      	ldrb	r4, [r7, #1]
 8004404:	78ba      	ldrb	r2, [r7, #2]
 8004406:	78f9      	ldrb	r1, [r7, #3]
 8004408:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800440a:	9302      	str	r3, [sp, #8]
 800440c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004410:	9301      	str	r3, [sp, #4]
 8004412:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004416:	9300      	str	r3, [sp, #0]
 8004418:	4623      	mov	r3, r4
 800441a:	f004 fa9f 	bl	800895c <USB_HC_Init>
 800441e:	4603      	mov	r3, r0
 8004420:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800442a:	7bfb      	ldrb	r3, [r7, #15]
}
 800442c:	4618      	mov	r0, r3
 800442e:	3714      	adds	r7, #20
 8004430:	46bd      	mov	sp, r7
 8004432:	bd90      	pop	{r4, r7, pc}

08004434 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	460b      	mov	r3, r1
 800443e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004440:	2300      	movs	r3, #0
 8004442:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800444a:	2b01      	cmp	r3, #1
 800444c:	d101      	bne.n	8004452 <HAL_HCD_HC_Halt+0x1e>
 800444e:	2302      	movs	r3, #2
 8004450:	e00f      	b.n	8004472 <HAL_HCD_HC_Halt+0x3e>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	78fa      	ldrb	r2, [r7, #3]
 8004460:	4611      	mov	r1, r2
 8004462:	4618      	mov	r0, r3
 8004464:	f004 fcdb 	bl	8008e1e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004470:	7bfb      	ldrb	r3, [r7, #15]
}
 8004472:	4618      	mov	r0, r3
 8004474:	3710      	adds	r7, #16
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
	...

0800447c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	4608      	mov	r0, r1
 8004486:	4611      	mov	r1, r2
 8004488:	461a      	mov	r2, r3
 800448a:	4603      	mov	r3, r0
 800448c:	70fb      	strb	r3, [r7, #3]
 800448e:	460b      	mov	r3, r1
 8004490:	70bb      	strb	r3, [r7, #2]
 8004492:	4613      	mov	r3, r2
 8004494:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004496:	78fb      	ldrb	r3, [r7, #3]
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	212c      	movs	r1, #44	; 0x2c
 800449c:	fb01 f303 	mul.w	r3, r1, r3
 80044a0:	4413      	add	r3, r2
 80044a2:	333b      	adds	r3, #59	; 0x3b
 80044a4:	78ba      	ldrb	r2, [r7, #2]
 80044a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80044a8:	78fb      	ldrb	r3, [r7, #3]
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	212c      	movs	r1, #44	; 0x2c
 80044ae:	fb01 f303 	mul.w	r3, r1, r3
 80044b2:	4413      	add	r3, r2
 80044b4:	333f      	adds	r3, #63	; 0x3f
 80044b6:	787a      	ldrb	r2, [r7, #1]
 80044b8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80044ba:	7c3b      	ldrb	r3, [r7, #16]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d112      	bne.n	80044e6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80044c0:	78fb      	ldrb	r3, [r7, #3]
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	212c      	movs	r1, #44	; 0x2c
 80044c6:	fb01 f303 	mul.w	r3, r1, r3
 80044ca:	4413      	add	r3, r2
 80044cc:	3342      	adds	r3, #66	; 0x42
 80044ce:	2203      	movs	r2, #3
 80044d0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80044d2:	78fb      	ldrb	r3, [r7, #3]
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	212c      	movs	r1, #44	; 0x2c
 80044d8:	fb01 f303 	mul.w	r3, r1, r3
 80044dc:	4413      	add	r3, r2
 80044de:	333d      	adds	r3, #61	; 0x3d
 80044e0:	7f3a      	ldrb	r2, [r7, #28]
 80044e2:	701a      	strb	r2, [r3, #0]
 80044e4:	e008      	b.n	80044f8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80044e6:	78fb      	ldrb	r3, [r7, #3]
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	212c      	movs	r1, #44	; 0x2c
 80044ec:	fb01 f303 	mul.w	r3, r1, r3
 80044f0:	4413      	add	r3, r2
 80044f2:	3342      	adds	r3, #66	; 0x42
 80044f4:	2202      	movs	r2, #2
 80044f6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80044f8:	787b      	ldrb	r3, [r7, #1]
 80044fa:	2b03      	cmp	r3, #3
 80044fc:	f200 80c6 	bhi.w	800468c <HAL_HCD_HC_SubmitRequest+0x210>
 8004500:	a201      	add	r2, pc, #4	; (adr r2, 8004508 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8004502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004506:	bf00      	nop
 8004508:	08004519 	.word	0x08004519
 800450c:	08004679 	.word	0x08004679
 8004510:	0800457d 	.word	0x0800457d
 8004514:	080045fb 	.word	0x080045fb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004518:	7c3b      	ldrb	r3, [r7, #16]
 800451a:	2b01      	cmp	r3, #1
 800451c:	f040 80b8 	bne.w	8004690 <HAL_HCD_HC_SubmitRequest+0x214>
 8004520:	78bb      	ldrb	r3, [r7, #2]
 8004522:	2b00      	cmp	r3, #0
 8004524:	f040 80b4 	bne.w	8004690 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8004528:	8b3b      	ldrh	r3, [r7, #24]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d108      	bne.n	8004540 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800452e:	78fb      	ldrb	r3, [r7, #3]
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	212c      	movs	r1, #44	; 0x2c
 8004534:	fb01 f303 	mul.w	r3, r1, r3
 8004538:	4413      	add	r3, r2
 800453a:	3355      	adds	r3, #85	; 0x55
 800453c:	2201      	movs	r2, #1
 800453e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004540:	78fb      	ldrb	r3, [r7, #3]
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	212c      	movs	r1, #44	; 0x2c
 8004546:	fb01 f303 	mul.w	r3, r1, r3
 800454a:	4413      	add	r3, r2
 800454c:	3355      	adds	r3, #85	; 0x55
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d109      	bne.n	8004568 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004554:	78fb      	ldrb	r3, [r7, #3]
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	212c      	movs	r1, #44	; 0x2c
 800455a:	fb01 f303 	mul.w	r3, r1, r3
 800455e:	4413      	add	r3, r2
 8004560:	3342      	adds	r3, #66	; 0x42
 8004562:	2200      	movs	r2, #0
 8004564:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004566:	e093      	b.n	8004690 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004568:	78fb      	ldrb	r3, [r7, #3]
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	212c      	movs	r1, #44	; 0x2c
 800456e:	fb01 f303 	mul.w	r3, r1, r3
 8004572:	4413      	add	r3, r2
 8004574:	3342      	adds	r3, #66	; 0x42
 8004576:	2202      	movs	r2, #2
 8004578:	701a      	strb	r2, [r3, #0]
      break;
 800457a:	e089      	b.n	8004690 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800457c:	78bb      	ldrb	r3, [r7, #2]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d11d      	bne.n	80045be <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004582:	78fb      	ldrb	r3, [r7, #3]
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	212c      	movs	r1, #44	; 0x2c
 8004588:	fb01 f303 	mul.w	r3, r1, r3
 800458c:	4413      	add	r3, r2
 800458e:	3355      	adds	r3, #85	; 0x55
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d109      	bne.n	80045aa <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004596:	78fb      	ldrb	r3, [r7, #3]
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	212c      	movs	r1, #44	; 0x2c
 800459c:	fb01 f303 	mul.w	r3, r1, r3
 80045a0:	4413      	add	r3, r2
 80045a2:	3342      	adds	r3, #66	; 0x42
 80045a4:	2200      	movs	r2, #0
 80045a6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80045a8:	e073      	b.n	8004692 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80045aa:	78fb      	ldrb	r3, [r7, #3]
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	212c      	movs	r1, #44	; 0x2c
 80045b0:	fb01 f303 	mul.w	r3, r1, r3
 80045b4:	4413      	add	r3, r2
 80045b6:	3342      	adds	r3, #66	; 0x42
 80045b8:	2202      	movs	r2, #2
 80045ba:	701a      	strb	r2, [r3, #0]
      break;
 80045bc:	e069      	b.n	8004692 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80045be:	78fb      	ldrb	r3, [r7, #3]
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	212c      	movs	r1, #44	; 0x2c
 80045c4:	fb01 f303 	mul.w	r3, r1, r3
 80045c8:	4413      	add	r3, r2
 80045ca:	3354      	adds	r3, #84	; 0x54
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d109      	bne.n	80045e6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80045d2:	78fb      	ldrb	r3, [r7, #3]
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	212c      	movs	r1, #44	; 0x2c
 80045d8:	fb01 f303 	mul.w	r3, r1, r3
 80045dc:	4413      	add	r3, r2
 80045de:	3342      	adds	r3, #66	; 0x42
 80045e0:	2200      	movs	r2, #0
 80045e2:	701a      	strb	r2, [r3, #0]
      break;
 80045e4:	e055      	b.n	8004692 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80045e6:	78fb      	ldrb	r3, [r7, #3]
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	212c      	movs	r1, #44	; 0x2c
 80045ec:	fb01 f303 	mul.w	r3, r1, r3
 80045f0:	4413      	add	r3, r2
 80045f2:	3342      	adds	r3, #66	; 0x42
 80045f4:	2202      	movs	r2, #2
 80045f6:	701a      	strb	r2, [r3, #0]
      break;
 80045f8:	e04b      	b.n	8004692 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80045fa:	78bb      	ldrb	r3, [r7, #2]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d11d      	bne.n	800463c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004600:	78fb      	ldrb	r3, [r7, #3]
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	212c      	movs	r1, #44	; 0x2c
 8004606:	fb01 f303 	mul.w	r3, r1, r3
 800460a:	4413      	add	r3, r2
 800460c:	3355      	adds	r3, #85	; 0x55
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d109      	bne.n	8004628 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004614:	78fb      	ldrb	r3, [r7, #3]
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	212c      	movs	r1, #44	; 0x2c
 800461a:	fb01 f303 	mul.w	r3, r1, r3
 800461e:	4413      	add	r3, r2
 8004620:	3342      	adds	r3, #66	; 0x42
 8004622:	2200      	movs	r2, #0
 8004624:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004626:	e034      	b.n	8004692 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004628:	78fb      	ldrb	r3, [r7, #3]
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	212c      	movs	r1, #44	; 0x2c
 800462e:	fb01 f303 	mul.w	r3, r1, r3
 8004632:	4413      	add	r3, r2
 8004634:	3342      	adds	r3, #66	; 0x42
 8004636:	2202      	movs	r2, #2
 8004638:	701a      	strb	r2, [r3, #0]
      break;
 800463a:	e02a      	b.n	8004692 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800463c:	78fb      	ldrb	r3, [r7, #3]
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	212c      	movs	r1, #44	; 0x2c
 8004642:	fb01 f303 	mul.w	r3, r1, r3
 8004646:	4413      	add	r3, r2
 8004648:	3354      	adds	r3, #84	; 0x54
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d109      	bne.n	8004664 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004650:	78fb      	ldrb	r3, [r7, #3]
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	212c      	movs	r1, #44	; 0x2c
 8004656:	fb01 f303 	mul.w	r3, r1, r3
 800465a:	4413      	add	r3, r2
 800465c:	3342      	adds	r3, #66	; 0x42
 800465e:	2200      	movs	r2, #0
 8004660:	701a      	strb	r2, [r3, #0]
      break;
 8004662:	e016      	b.n	8004692 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004664:	78fb      	ldrb	r3, [r7, #3]
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	212c      	movs	r1, #44	; 0x2c
 800466a:	fb01 f303 	mul.w	r3, r1, r3
 800466e:	4413      	add	r3, r2
 8004670:	3342      	adds	r3, #66	; 0x42
 8004672:	2202      	movs	r2, #2
 8004674:	701a      	strb	r2, [r3, #0]
      break;
 8004676:	e00c      	b.n	8004692 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004678:	78fb      	ldrb	r3, [r7, #3]
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	212c      	movs	r1, #44	; 0x2c
 800467e:	fb01 f303 	mul.w	r3, r1, r3
 8004682:	4413      	add	r3, r2
 8004684:	3342      	adds	r3, #66	; 0x42
 8004686:	2200      	movs	r2, #0
 8004688:	701a      	strb	r2, [r3, #0]
      break;
 800468a:	e002      	b.n	8004692 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800468c:	bf00      	nop
 800468e:	e000      	b.n	8004692 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8004690:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004692:	78fb      	ldrb	r3, [r7, #3]
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	212c      	movs	r1, #44	; 0x2c
 8004698:	fb01 f303 	mul.w	r3, r1, r3
 800469c:	4413      	add	r3, r2
 800469e:	3344      	adds	r3, #68	; 0x44
 80046a0:	697a      	ldr	r2, [r7, #20]
 80046a2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80046a4:	78fb      	ldrb	r3, [r7, #3]
 80046a6:	8b3a      	ldrh	r2, [r7, #24]
 80046a8:	6879      	ldr	r1, [r7, #4]
 80046aa:	202c      	movs	r0, #44	; 0x2c
 80046ac:	fb00 f303 	mul.w	r3, r0, r3
 80046b0:	440b      	add	r3, r1
 80046b2:	334c      	adds	r3, #76	; 0x4c
 80046b4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80046b6:	78fb      	ldrb	r3, [r7, #3]
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	212c      	movs	r1, #44	; 0x2c
 80046bc:	fb01 f303 	mul.w	r3, r1, r3
 80046c0:	4413      	add	r3, r2
 80046c2:	3360      	adds	r3, #96	; 0x60
 80046c4:	2200      	movs	r2, #0
 80046c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80046c8:	78fb      	ldrb	r3, [r7, #3]
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	212c      	movs	r1, #44	; 0x2c
 80046ce:	fb01 f303 	mul.w	r3, r1, r3
 80046d2:	4413      	add	r3, r2
 80046d4:	3350      	adds	r3, #80	; 0x50
 80046d6:	2200      	movs	r2, #0
 80046d8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80046da:	78fb      	ldrb	r3, [r7, #3]
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	212c      	movs	r1, #44	; 0x2c
 80046e0:	fb01 f303 	mul.w	r3, r1, r3
 80046e4:	4413      	add	r3, r2
 80046e6:	3339      	adds	r3, #57	; 0x39
 80046e8:	78fa      	ldrb	r2, [r7, #3]
 80046ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80046ec:	78fb      	ldrb	r3, [r7, #3]
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	212c      	movs	r1, #44	; 0x2c
 80046f2:	fb01 f303 	mul.w	r3, r1, r3
 80046f6:	4413      	add	r3, r2
 80046f8:	3361      	adds	r3, #97	; 0x61
 80046fa:	2200      	movs	r2, #0
 80046fc:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6818      	ldr	r0, [r3, #0]
 8004702:	78fb      	ldrb	r3, [r7, #3]
 8004704:	222c      	movs	r2, #44	; 0x2c
 8004706:	fb02 f303 	mul.w	r3, r2, r3
 800470a:	3338      	adds	r3, #56	; 0x38
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	18d1      	adds	r1, r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	b2db      	uxtb	r3, r3
 8004716:	461a      	mov	r2, r3
 8004718:	f004 fa2e 	bl	8008b78 <USB_HC_StartXfer>
 800471c:	4603      	mov	r3, r0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3708      	adds	r7, #8
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop

08004728 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b086      	sub	sp, #24
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4618      	mov	r0, r3
 8004740:	f003 ff51 	bl	80085e6 <USB_GetMode>
 8004744:	4603      	mov	r3, r0
 8004746:	2b01      	cmp	r3, #1
 8004748:	f040 80f6 	bne.w	8004938 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4618      	mov	r0, r3
 8004752:	f003 ff35 	bl	80085c0 <USB_ReadInterrupts>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	f000 80ec 	beq.w	8004936 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4618      	mov	r0, r3
 8004764:	f003 ff2c 	bl	80085c0 <USB_ReadInterrupts>
 8004768:	4603      	mov	r3, r0
 800476a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800476e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004772:	d104      	bne.n	800477e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800477c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4618      	mov	r0, r3
 8004784:	f003 ff1c 	bl	80085c0 <USB_ReadInterrupts>
 8004788:	4603      	mov	r3, r0
 800478a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800478e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004792:	d104      	bne.n	800479e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800479c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f003 ff0c 	bl	80085c0 <USB_ReadInterrupts>
 80047a8:	4603      	mov	r3, r0
 80047aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047b2:	d104      	bne.n	80047be <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80047bc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4618      	mov	r0, r3
 80047c4:	f003 fefc 	bl	80085c0 <USB_ReadInterrupts>
 80047c8:	4603      	mov	r3, r0
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d103      	bne.n	80047da <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2202      	movs	r2, #2
 80047d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4618      	mov	r0, r3
 80047e0:	f003 feee 	bl	80085c0 <USB_ReadInterrupts>
 80047e4:	4603      	mov	r3, r0
 80047e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047ee:	d11c      	bne.n	800482a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80047f8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b00      	cmp	r3, #0
 8004808:	d10f      	bne.n	800482a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800480a:	2110      	movs	r1, #16
 800480c:	6938      	ldr	r0, [r7, #16]
 800480e:	f003 fdfd 	bl	800840c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004812:	6938      	ldr	r0, [r7, #16]
 8004814:	f003 fe1e 	bl	8008454 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2101      	movs	r1, #1
 800481e:	4618      	mov	r0, r3
 8004820:	f003 ffd6 	bl	80087d0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f009 fe33 	bl	800e490 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4618      	mov	r0, r3
 8004830:	f003 fec6 	bl	80085c0 <USB_ReadInterrupts>
 8004834:	4603      	mov	r3, r0
 8004836:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800483a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800483e:	d102      	bne.n	8004846 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f001 fa03 	bl	8005c4c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4618      	mov	r0, r3
 800484c:	f003 feb8 	bl	80085c0 <USB_ReadInterrupts>
 8004850:	4603      	mov	r3, r0
 8004852:	f003 0308 	and.w	r3, r3, #8
 8004856:	2b08      	cmp	r3, #8
 8004858:	d106      	bne.n	8004868 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f009 fdfc 	bl	800e458 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2208      	movs	r2, #8
 8004866:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4618      	mov	r0, r3
 800486e:	f003 fea7 	bl	80085c0 <USB_ReadInterrupts>
 8004872:	4603      	mov	r3, r0
 8004874:	f003 0310 	and.w	r3, r3, #16
 8004878:	2b10      	cmp	r3, #16
 800487a:	d101      	bne.n	8004880 <HAL_HCD_IRQHandler+0x158>
 800487c:	2301      	movs	r3, #1
 800487e:	e000      	b.n	8004882 <HAL_HCD_IRQHandler+0x15a>
 8004880:	2300      	movs	r3, #0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d012      	beq.n	80048ac <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	699a      	ldr	r2, [r3, #24]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f022 0210 	bic.w	r2, r2, #16
 8004894:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f001 f906 	bl	8005aa8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	699a      	ldr	r2, [r3, #24]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f042 0210 	orr.w	r2, r2, #16
 80048aa:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4618      	mov	r0, r3
 80048b2:	f003 fe85 	bl	80085c0 <USB_ReadInterrupts>
 80048b6:	4603      	mov	r3, r0
 80048b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048c0:	d13a      	bne.n	8004938 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f004 fa98 	bl	8008dfc <USB_HC_ReadInterrupt>
 80048cc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80048ce:	2300      	movs	r3, #0
 80048d0:	617b      	str	r3, [r7, #20]
 80048d2:	e025      	b.n	8004920 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	f003 030f 	and.w	r3, r3, #15
 80048da:	68ba      	ldr	r2, [r7, #8]
 80048dc:	fa22 f303 	lsr.w	r3, r2, r3
 80048e0:	f003 0301 	and.w	r3, r3, #1
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d018      	beq.n	800491a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	015a      	lsls	r2, r3, #5
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	4413      	add	r3, r2
 80048f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048fe:	d106      	bne.n	800490e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	b2db      	uxtb	r3, r3
 8004904:	4619      	mov	r1, r3
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 f8ab 	bl	8004a62 <HCD_HC_IN_IRQHandler>
 800490c:	e005      	b.n	800491a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	b2db      	uxtb	r3, r3
 8004912:	4619      	mov	r1, r3
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f000 fcc6 	bl	80052a6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	3301      	adds	r3, #1
 800491e:	617b      	str	r3, [r7, #20]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	697a      	ldr	r2, [r7, #20]
 8004926:	429a      	cmp	r2, r3
 8004928:	d3d4      	bcc.n	80048d4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004932:	615a      	str	r2, [r3, #20]
 8004934:	e000      	b.n	8004938 <HAL_HCD_IRQHandler+0x210>
      return;
 8004936:	bf00      	nop
    }
  }
}
 8004938:	3718      	adds	r7, #24
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800493e:	b580      	push	{r7, lr}
 8004940:	b082      	sub	sp, #8
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800494c:	2b01      	cmp	r3, #1
 800494e:	d101      	bne.n	8004954 <HAL_HCD_Start+0x16>
 8004950:	2302      	movs	r3, #2
 8004952:	e013      	b.n	800497c <HAL_HCD_Start+0x3e>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2101      	movs	r1, #1
 8004962:	4618      	mov	r0, r3
 8004964:	f003 ff98 	bl	8008898 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4618      	mov	r0, r3
 800496e:	f003 fcde 	bl	800832e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3708      	adds	r7, #8
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004992:	2b01      	cmp	r3, #1
 8004994:	d101      	bne.n	800499a <HAL_HCD_Stop+0x16>
 8004996:	2302      	movs	r3, #2
 8004998:	e00d      	b.n	80049b6 <HAL_HCD_Stop+0x32>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2201      	movs	r2, #1
 800499e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4618      	mov	r0, r3
 80049a8:	f004 fb92 	bl	80090d0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3708      	adds	r7, #8
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}

080049be <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80049be:	b580      	push	{r7, lr}
 80049c0:	b082      	sub	sp, #8
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4618      	mov	r0, r3
 80049cc:	f003 ff3a 	bl	8008844 <USB_ResetPort>
 80049d0:	4603      	mov	r3, r0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3708      	adds	r7, #8
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}

080049da <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80049da:	b480      	push	{r7}
 80049dc:	b083      	sub	sp, #12
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
 80049e2:	460b      	mov	r3, r1
 80049e4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80049e6:	78fb      	ldrb	r3, [r7, #3]
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	212c      	movs	r1, #44	; 0x2c
 80049ec:	fb01 f303 	mul.w	r3, r1, r3
 80049f0:	4413      	add	r3, r2
 80049f2:	3360      	adds	r3, #96	; 0x60
 80049f4:	781b      	ldrb	r3, [r3, #0]
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	370c      	adds	r7, #12
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr

08004a02 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b083      	sub	sp, #12
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004a0e:	78fb      	ldrb	r3, [r7, #3]
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	212c      	movs	r1, #44	; 0x2c
 8004a14:	fb01 f303 	mul.w	r3, r1, r3
 8004a18:	4413      	add	r3, r2
 8004a1a:	3350      	adds	r3, #80	; 0x50
 8004a1c:	681b      	ldr	r3, [r3, #0]
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr

08004a2a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004a2a:	b580      	push	{r7, lr}
 8004a2c:	b082      	sub	sp, #8
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4618      	mov	r0, r3
 8004a38:	f003 ff7e 	bl	8008938 <USB_GetCurrentFrame>
 8004a3c:	4603      	mov	r3, r0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3708      	adds	r7, #8
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}

08004a46 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004a46:	b580      	push	{r7, lr}
 8004a48:	b082      	sub	sp, #8
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4618      	mov	r0, r3
 8004a54:	f003 ff59 	bl	800890a <USB_GetHostSpeed>
 8004a58:	4603      	mov	r3, r0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3708      	adds	r7, #8
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b086      	sub	sp, #24
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
 8004a6a:	460b      	mov	r3, r1
 8004a6c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004a78:	78fb      	ldrb	r3, [r7, #3]
 8004a7a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	015a      	lsls	r2, r3, #5
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	4413      	add	r3, r2
 8004a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f003 0304 	and.w	r3, r3, #4
 8004a8e:	2b04      	cmp	r3, #4
 8004a90:	d119      	bne.n	8004ac6 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	015a      	lsls	r2, r3, #5
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	4413      	add	r3, r2
 8004a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	2304      	movs	r3, #4
 8004aa2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	015a      	lsls	r2, r3, #5
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	4413      	add	r3, r2
 8004aac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	0151      	lsls	r1, r2, #5
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	440a      	add	r2, r1
 8004aba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004abe:	f043 0302 	orr.w	r3, r3, #2
 8004ac2:	60d3      	str	r3, [r2, #12]
 8004ac4:	e101      	b.n	8004cca <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	015a      	lsls	r2, r3, #5
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	4413      	add	r3, r2
 8004ace:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004adc:	d12b      	bne.n	8004b36 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	015a      	lsls	r2, r3, #5
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aea:	461a      	mov	r2, r3
 8004aec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004af0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	212c      	movs	r1, #44	; 0x2c
 8004af8:	fb01 f303 	mul.w	r3, r1, r3
 8004afc:	4413      	add	r3, r2
 8004afe:	3361      	adds	r3, #97	; 0x61
 8004b00:	2207      	movs	r2, #7
 8004b02:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	015a      	lsls	r2, r3, #5
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	0151      	lsls	r1, r2, #5
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	440a      	add	r2, r1
 8004b1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b1e:	f043 0302 	orr.w	r3, r3, #2
 8004b22:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	b2d2      	uxtb	r2, r2
 8004b2c:	4611      	mov	r1, r2
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f004 f975 	bl	8008e1e <USB_HC_Halt>
 8004b34:	e0c9      	b.n	8004cca <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	015a      	lsls	r2, r3, #5
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	f003 0320 	and.w	r3, r3, #32
 8004b48:	2b20      	cmp	r3, #32
 8004b4a:	d109      	bne.n	8004b60 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	015a      	lsls	r2, r3, #5
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	4413      	add	r3, r2
 8004b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b58:	461a      	mov	r2, r3
 8004b5a:	2320      	movs	r3, #32
 8004b5c:	6093      	str	r3, [r2, #8]
 8004b5e:	e0b4      	b.n	8004cca <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	015a      	lsls	r2, r3, #5
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	4413      	add	r3, r2
 8004b68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	f003 0308 	and.w	r3, r3, #8
 8004b72:	2b08      	cmp	r3, #8
 8004b74:	d133      	bne.n	8004bde <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	015a      	lsls	r2, r3, #5
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	0151      	lsls	r1, r2, #5
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	440a      	add	r2, r1
 8004b8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b90:	f043 0302 	orr.w	r3, r3, #2
 8004b94:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	212c      	movs	r1, #44	; 0x2c
 8004b9c:	fb01 f303 	mul.w	r3, r1, r3
 8004ba0:	4413      	add	r3, r2
 8004ba2:	3361      	adds	r3, #97	; 0x61
 8004ba4:	2205      	movs	r2, #5
 8004ba6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	015a      	lsls	r2, r3, #5
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	4413      	add	r3, r2
 8004bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	2310      	movs	r3, #16
 8004bb8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	015a      	lsls	r2, r3, #5
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	2308      	movs	r3, #8
 8004bca:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	b2d2      	uxtb	r2, r2
 8004bd4:	4611      	mov	r1, r2
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f004 f921 	bl	8008e1e <USB_HC_Halt>
 8004bdc:	e075      	b.n	8004cca <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	015a      	lsls	r2, r3, #5
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	4413      	add	r3, r2
 8004be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bf4:	d134      	bne.n	8004c60 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	015a      	lsls	r2, r3, #5
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	0151      	lsls	r1, r2, #5
 8004c08:	693a      	ldr	r2, [r7, #16]
 8004c0a:	440a      	add	r2, r1
 8004c0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c10:	f043 0302 	orr.w	r3, r3, #2
 8004c14:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	212c      	movs	r1, #44	; 0x2c
 8004c1c:	fb01 f303 	mul.w	r3, r1, r3
 8004c20:	4413      	add	r3, r2
 8004c22:	3361      	adds	r3, #97	; 0x61
 8004c24:	2208      	movs	r2, #8
 8004c26:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	015a      	lsls	r2, r3, #5
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	4413      	add	r3, r2
 8004c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c34:	461a      	mov	r2, r3
 8004c36:	2310      	movs	r3, #16
 8004c38:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	015a      	lsls	r2, r3, #5
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	4413      	add	r3, r2
 8004c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c46:	461a      	mov	r2, r3
 8004c48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c4c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	b2d2      	uxtb	r2, r2
 8004c56:	4611      	mov	r1, r2
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f004 f8e0 	bl	8008e1e <USB_HC_Halt>
 8004c5e:	e034      	b.n	8004cca <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	015a      	lsls	r2, r3, #5
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	4413      	add	r3, r2
 8004c68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c72:	2b80      	cmp	r3, #128	; 0x80
 8004c74:	d129      	bne.n	8004cca <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	015a      	lsls	r2, r3, #5
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	0151      	lsls	r1, r2, #5
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	440a      	add	r2, r1
 8004c8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c90:	f043 0302 	orr.w	r3, r3, #2
 8004c94:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	212c      	movs	r1, #44	; 0x2c
 8004c9c:	fb01 f303 	mul.w	r3, r1, r3
 8004ca0:	4413      	add	r3, r2
 8004ca2:	3361      	adds	r3, #97	; 0x61
 8004ca4:	2206      	movs	r2, #6
 8004ca6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	b2d2      	uxtb	r2, r2
 8004cb0:	4611      	mov	r1, r2
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f004 f8b3 	bl	8008e1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	015a      	lsls	r2, r3, #5
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	2380      	movs	r3, #128	; 0x80
 8004cc8:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	015a      	lsls	r2, r3, #5
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ce0:	d122      	bne.n	8004d28 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	015a      	lsls	r2, r3, #5
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	4413      	add	r3, r2
 8004cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	0151      	lsls	r1, r2, #5
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	440a      	add	r2, r1
 8004cf8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cfc:	f043 0302 	orr.w	r3, r3, #2
 8004d00:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	b2d2      	uxtb	r2, r2
 8004d0a:	4611      	mov	r1, r2
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f004 f886 	bl	8008e1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	015a      	lsls	r2, r3, #5
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	4413      	add	r3, r2
 8004d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d1e:	461a      	mov	r2, r3
 8004d20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d24:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004d26:	e2ba      	b.n	800529e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	015a      	lsls	r2, r3, #5
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	4413      	add	r3, r2
 8004d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f003 0301 	and.w	r3, r3, #1
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	f040 811b 	bne.w	8004f76 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d019      	beq.n	8004d7c <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	212c      	movs	r1, #44	; 0x2c
 8004d4e:	fb01 f303 	mul.w	r3, r1, r3
 8004d52:	4413      	add	r3, r2
 8004d54:	3348      	adds	r3, #72	; 0x48
 8004d56:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	0159      	lsls	r1, r3, #5
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	440b      	add	r3, r1
 8004d60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004d6a:	1ad2      	subs	r2, r2, r3
 8004d6c:	6879      	ldr	r1, [r7, #4]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	202c      	movs	r0, #44	; 0x2c
 8004d72:	fb00 f303 	mul.w	r3, r0, r3
 8004d76:	440b      	add	r3, r1
 8004d78:	3350      	adds	r3, #80	; 0x50
 8004d7a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	212c      	movs	r1, #44	; 0x2c
 8004d82:	fb01 f303 	mul.w	r3, r1, r3
 8004d86:	4413      	add	r3, r2
 8004d88:	3361      	adds	r3, #97	; 0x61
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	212c      	movs	r1, #44	; 0x2c
 8004d94:	fb01 f303 	mul.w	r3, r1, r3
 8004d98:	4413      	add	r3, r2
 8004d9a:	335c      	adds	r3, #92	; 0x5c
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	015a      	lsls	r2, r3, #5
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	4413      	add	r3, r2
 8004da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dac:	461a      	mov	r2, r3
 8004dae:	2301      	movs	r3, #1
 8004db0:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	212c      	movs	r1, #44	; 0x2c
 8004db8:	fb01 f303 	mul.w	r3, r1, r3
 8004dbc:	4413      	add	r3, r2
 8004dbe:	333f      	adds	r3, #63	; 0x3f
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d009      	beq.n	8004dda <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	212c      	movs	r1, #44	; 0x2c
 8004dcc:	fb01 f303 	mul.w	r3, r1, r3
 8004dd0:	4413      	add	r3, r2
 8004dd2:	333f      	adds	r3, #63	; 0x3f
 8004dd4:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d121      	bne.n	8004e1e <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	015a      	lsls	r2, r3, #5
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	4413      	add	r3, r2
 8004de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	0151      	lsls	r1, r2, #5
 8004dec:	693a      	ldr	r2, [r7, #16]
 8004dee:	440a      	add	r2, r1
 8004df0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004df4:	f043 0302 	orr.w	r3, r3, #2
 8004df8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	b2d2      	uxtb	r2, r2
 8004e02:	4611      	mov	r1, r2
 8004e04:	4618      	mov	r0, r3
 8004e06:	f004 f80a 	bl	8008e1e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	015a      	lsls	r2, r3, #5
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	4413      	add	r3, r2
 8004e12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e16:	461a      	mov	r2, r3
 8004e18:	2310      	movs	r3, #16
 8004e1a:	6093      	str	r3, [r2, #8]
 8004e1c:	e066      	b.n	8004eec <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	212c      	movs	r1, #44	; 0x2c
 8004e24:	fb01 f303 	mul.w	r3, r1, r3
 8004e28:	4413      	add	r3, r2
 8004e2a:	333f      	adds	r3, #63	; 0x3f
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	2b03      	cmp	r3, #3
 8004e30:	d127      	bne.n	8004e82 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	015a      	lsls	r2, r3, #5
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	4413      	add	r3, r2
 8004e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	0151      	lsls	r1, r2, #5
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	440a      	add	r2, r1
 8004e48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e50:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	212c      	movs	r1, #44	; 0x2c
 8004e58:	fb01 f303 	mul.w	r3, r1, r3
 8004e5c:	4413      	add	r3, r2
 8004e5e:	3360      	adds	r3, #96	; 0x60
 8004e60:	2201      	movs	r2, #1
 8004e62:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	b2d9      	uxtb	r1, r3
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	202c      	movs	r0, #44	; 0x2c
 8004e6e:	fb00 f303 	mul.w	r3, r0, r3
 8004e72:	4413      	add	r3, r2
 8004e74:	3360      	adds	r3, #96	; 0x60
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	461a      	mov	r2, r3
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f009 fb16 	bl	800e4ac <HAL_HCD_HC_NotifyURBChange_Callback>
 8004e80:	e034      	b.n	8004eec <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	212c      	movs	r1, #44	; 0x2c
 8004e88:	fb01 f303 	mul.w	r3, r1, r3
 8004e8c:	4413      	add	r3, r2
 8004e8e:	333f      	adds	r3, #63	; 0x3f
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d12a      	bne.n	8004eec <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	212c      	movs	r1, #44	; 0x2c
 8004e9c:	fb01 f303 	mul.w	r3, r1, r3
 8004ea0:	4413      	add	r3, r2
 8004ea2:	3360      	adds	r3, #96	; 0x60
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	212c      	movs	r1, #44	; 0x2c
 8004eae:	fb01 f303 	mul.w	r3, r1, r3
 8004eb2:	4413      	add	r3, r2
 8004eb4:	3354      	adds	r3, #84	; 0x54
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	f083 0301 	eor.w	r3, r3, #1
 8004ebc:	b2d8      	uxtb	r0, r3
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	212c      	movs	r1, #44	; 0x2c
 8004ec4:	fb01 f303 	mul.w	r3, r1, r3
 8004ec8:	4413      	add	r3, r2
 8004eca:	3354      	adds	r3, #84	; 0x54
 8004ecc:	4602      	mov	r2, r0
 8004ece:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	b2d9      	uxtb	r1, r3
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	202c      	movs	r0, #44	; 0x2c
 8004eda:	fb00 f303 	mul.w	r3, r0, r3
 8004ede:	4413      	add	r3, r2
 8004ee0:	3360      	adds	r3, #96	; 0x60
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f009 fae0 	bl	800e4ac <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d12b      	bne.n	8004f4c <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	212c      	movs	r1, #44	; 0x2c
 8004efa:	fb01 f303 	mul.w	r3, r1, r3
 8004efe:	4413      	add	r3, r2
 8004f00:	3348      	adds	r3, #72	; 0x48
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	6879      	ldr	r1, [r7, #4]
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	202c      	movs	r0, #44	; 0x2c
 8004f0a:	fb00 f202 	mul.w	r2, r0, r2
 8004f0e:	440a      	add	r2, r1
 8004f10:	3240      	adds	r2, #64	; 0x40
 8004f12:	8812      	ldrh	r2, [r2, #0]
 8004f14:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f18:	f003 0301 	and.w	r3, r3, #1
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f000 81be 	beq.w	800529e <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	212c      	movs	r1, #44	; 0x2c
 8004f28:	fb01 f303 	mul.w	r3, r1, r3
 8004f2c:	4413      	add	r3, r2
 8004f2e:	3354      	adds	r3, #84	; 0x54
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	f083 0301 	eor.w	r3, r3, #1
 8004f36:	b2d8      	uxtb	r0, r3
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	212c      	movs	r1, #44	; 0x2c
 8004f3e:	fb01 f303 	mul.w	r3, r1, r3
 8004f42:	4413      	add	r3, r2
 8004f44:	3354      	adds	r3, #84	; 0x54
 8004f46:	4602      	mov	r2, r0
 8004f48:	701a      	strb	r2, [r3, #0]
}
 8004f4a:	e1a8      	b.n	800529e <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	212c      	movs	r1, #44	; 0x2c
 8004f52:	fb01 f303 	mul.w	r3, r1, r3
 8004f56:	4413      	add	r3, r2
 8004f58:	3354      	adds	r3, #84	; 0x54
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	f083 0301 	eor.w	r3, r3, #1
 8004f60:	b2d8      	uxtb	r0, r3
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	212c      	movs	r1, #44	; 0x2c
 8004f68:	fb01 f303 	mul.w	r3, r1, r3
 8004f6c:	4413      	add	r3, r2
 8004f6e:	3354      	adds	r3, #84	; 0x54
 8004f70:	4602      	mov	r2, r0
 8004f72:	701a      	strb	r2, [r3, #0]
}
 8004f74:	e193      	b.n	800529e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	015a      	lsls	r2, r3, #5
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f003 0302 	and.w	r3, r3, #2
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	f040 8106 	bne.w	800519a <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	015a      	lsls	r2, r3, #5
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	4413      	add	r3, r2
 8004f96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	0151      	lsls	r1, r2, #5
 8004fa0:	693a      	ldr	r2, [r7, #16]
 8004fa2:	440a      	add	r2, r1
 8004fa4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fa8:	f023 0302 	bic.w	r3, r3, #2
 8004fac:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	212c      	movs	r1, #44	; 0x2c
 8004fb4:	fb01 f303 	mul.w	r3, r1, r3
 8004fb8:	4413      	add	r3, r2
 8004fba:	3361      	adds	r3, #97	; 0x61
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d109      	bne.n	8004fd6 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	212c      	movs	r1, #44	; 0x2c
 8004fc8:	fb01 f303 	mul.w	r3, r1, r3
 8004fcc:	4413      	add	r3, r2
 8004fce:	3360      	adds	r3, #96	; 0x60
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	701a      	strb	r2, [r3, #0]
 8004fd4:	e0c9      	b.n	800516a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	212c      	movs	r1, #44	; 0x2c
 8004fdc:	fb01 f303 	mul.w	r3, r1, r3
 8004fe0:	4413      	add	r3, r2
 8004fe2:	3361      	adds	r3, #97	; 0x61
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	2b05      	cmp	r3, #5
 8004fe8:	d109      	bne.n	8004ffe <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	212c      	movs	r1, #44	; 0x2c
 8004ff0:	fb01 f303 	mul.w	r3, r1, r3
 8004ff4:	4413      	add	r3, r2
 8004ff6:	3360      	adds	r3, #96	; 0x60
 8004ff8:	2205      	movs	r2, #5
 8004ffa:	701a      	strb	r2, [r3, #0]
 8004ffc:	e0b5      	b.n	800516a <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	212c      	movs	r1, #44	; 0x2c
 8005004:	fb01 f303 	mul.w	r3, r1, r3
 8005008:	4413      	add	r3, r2
 800500a:	3361      	adds	r3, #97	; 0x61
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	2b06      	cmp	r3, #6
 8005010:	d009      	beq.n	8005026 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	212c      	movs	r1, #44	; 0x2c
 8005018:	fb01 f303 	mul.w	r3, r1, r3
 800501c:	4413      	add	r3, r2
 800501e:	3361      	adds	r3, #97	; 0x61
 8005020:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005022:	2b08      	cmp	r3, #8
 8005024:	d150      	bne.n	80050c8 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	212c      	movs	r1, #44	; 0x2c
 800502c:	fb01 f303 	mul.w	r3, r1, r3
 8005030:	4413      	add	r3, r2
 8005032:	335c      	adds	r3, #92	; 0x5c
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	1c5a      	adds	r2, r3, #1
 8005038:	6879      	ldr	r1, [r7, #4]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	202c      	movs	r0, #44	; 0x2c
 800503e:	fb00 f303 	mul.w	r3, r0, r3
 8005042:	440b      	add	r3, r1
 8005044:	335c      	adds	r3, #92	; 0x5c
 8005046:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	212c      	movs	r1, #44	; 0x2c
 800504e:	fb01 f303 	mul.w	r3, r1, r3
 8005052:	4413      	add	r3, r2
 8005054:	335c      	adds	r3, #92	; 0x5c
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2b02      	cmp	r3, #2
 800505a:	d912      	bls.n	8005082 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	212c      	movs	r1, #44	; 0x2c
 8005062:	fb01 f303 	mul.w	r3, r1, r3
 8005066:	4413      	add	r3, r2
 8005068:	335c      	adds	r3, #92	; 0x5c
 800506a:	2200      	movs	r2, #0
 800506c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	212c      	movs	r1, #44	; 0x2c
 8005074:	fb01 f303 	mul.w	r3, r1, r3
 8005078:	4413      	add	r3, r2
 800507a:	3360      	adds	r3, #96	; 0x60
 800507c:	2204      	movs	r2, #4
 800507e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005080:	e073      	b.n	800516a <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	212c      	movs	r1, #44	; 0x2c
 8005088:	fb01 f303 	mul.w	r3, r1, r3
 800508c:	4413      	add	r3, r2
 800508e:	3360      	adds	r3, #96	; 0x60
 8005090:	2202      	movs	r2, #2
 8005092:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	015a      	lsls	r2, r3, #5
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	4413      	add	r3, r2
 800509c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80050aa:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050b2:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	015a      	lsls	r2, r3, #5
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	4413      	add	r3, r2
 80050bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050c0:	461a      	mov	r2, r3
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80050c6:	e050      	b.n	800516a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	212c      	movs	r1, #44	; 0x2c
 80050ce:	fb01 f303 	mul.w	r3, r1, r3
 80050d2:	4413      	add	r3, r2
 80050d4:	3361      	adds	r3, #97	; 0x61
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	2b03      	cmp	r3, #3
 80050da:	d122      	bne.n	8005122 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	212c      	movs	r1, #44	; 0x2c
 80050e2:	fb01 f303 	mul.w	r3, r1, r3
 80050e6:	4413      	add	r3, r2
 80050e8:	3360      	adds	r3, #96	; 0x60
 80050ea:	2202      	movs	r2, #2
 80050ec:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	015a      	lsls	r2, r3, #5
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	4413      	add	r3, r2
 80050f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005104:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800510c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	015a      	lsls	r2, r3, #5
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	4413      	add	r3, r2
 8005116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800511a:	461a      	mov	r2, r3
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	6013      	str	r3, [r2, #0]
 8005120:	e023      	b.n	800516a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	212c      	movs	r1, #44	; 0x2c
 8005128:	fb01 f303 	mul.w	r3, r1, r3
 800512c:	4413      	add	r3, r2
 800512e:	3361      	adds	r3, #97	; 0x61
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	2b07      	cmp	r3, #7
 8005134:	d119      	bne.n	800516a <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	212c      	movs	r1, #44	; 0x2c
 800513c:	fb01 f303 	mul.w	r3, r1, r3
 8005140:	4413      	add	r3, r2
 8005142:	335c      	adds	r3, #92	; 0x5c
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	1c5a      	adds	r2, r3, #1
 8005148:	6879      	ldr	r1, [r7, #4]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	202c      	movs	r0, #44	; 0x2c
 800514e:	fb00 f303 	mul.w	r3, r0, r3
 8005152:	440b      	add	r3, r1
 8005154:	335c      	adds	r3, #92	; 0x5c
 8005156:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	212c      	movs	r1, #44	; 0x2c
 800515e:	fb01 f303 	mul.w	r3, r1, r3
 8005162:	4413      	add	r3, r2
 8005164:	3360      	adds	r3, #96	; 0x60
 8005166:	2204      	movs	r2, #4
 8005168:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	015a      	lsls	r2, r3, #5
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	4413      	add	r3, r2
 8005172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005176:	461a      	mov	r2, r3
 8005178:	2302      	movs	r3, #2
 800517a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	b2d9      	uxtb	r1, r3
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	202c      	movs	r0, #44	; 0x2c
 8005186:	fb00 f303 	mul.w	r3, r0, r3
 800518a:	4413      	add	r3, r2
 800518c:	3360      	adds	r3, #96	; 0x60
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	461a      	mov	r2, r3
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f009 f98a 	bl	800e4ac <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005198:	e081      	b.n	800529e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	015a      	lsls	r2, r3, #5
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	4413      	add	r3, r2
 80051a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f003 0310 	and.w	r3, r3, #16
 80051ac:	2b10      	cmp	r3, #16
 80051ae:	d176      	bne.n	800529e <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	212c      	movs	r1, #44	; 0x2c
 80051b6:	fb01 f303 	mul.w	r3, r1, r3
 80051ba:	4413      	add	r3, r2
 80051bc:	333f      	adds	r3, #63	; 0x3f
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	2b03      	cmp	r3, #3
 80051c2:	d121      	bne.n	8005208 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	212c      	movs	r1, #44	; 0x2c
 80051ca:	fb01 f303 	mul.w	r3, r1, r3
 80051ce:	4413      	add	r3, r2
 80051d0:	335c      	adds	r3, #92	; 0x5c
 80051d2:	2200      	movs	r2, #0
 80051d4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	015a      	lsls	r2, r3, #5
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	4413      	add	r3, r2
 80051de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	0151      	lsls	r1, r2, #5
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	440a      	add	r2, r1
 80051ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051f0:	f043 0302 	orr.w	r3, r3, #2
 80051f4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	b2d2      	uxtb	r2, r2
 80051fe:	4611      	mov	r1, r2
 8005200:	4618      	mov	r0, r3
 8005202:	f003 fe0c 	bl	8008e1e <USB_HC_Halt>
 8005206:	e041      	b.n	800528c <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	212c      	movs	r1, #44	; 0x2c
 800520e:	fb01 f303 	mul.w	r3, r1, r3
 8005212:	4413      	add	r3, r2
 8005214:	333f      	adds	r3, #63	; 0x3f
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d009      	beq.n	8005230 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	212c      	movs	r1, #44	; 0x2c
 8005222:	fb01 f303 	mul.w	r3, r1, r3
 8005226:	4413      	add	r3, r2
 8005228:	333f      	adds	r3, #63	; 0x3f
 800522a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800522c:	2b02      	cmp	r3, #2
 800522e:	d12d      	bne.n	800528c <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	212c      	movs	r1, #44	; 0x2c
 8005236:	fb01 f303 	mul.w	r3, r1, r3
 800523a:	4413      	add	r3, r2
 800523c:	335c      	adds	r3, #92	; 0x5c
 800523e:	2200      	movs	r2, #0
 8005240:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d120      	bne.n	800528c <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	212c      	movs	r1, #44	; 0x2c
 8005250:	fb01 f303 	mul.w	r3, r1, r3
 8005254:	4413      	add	r3, r2
 8005256:	3361      	adds	r3, #97	; 0x61
 8005258:	2203      	movs	r2, #3
 800525a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	015a      	lsls	r2, r3, #5
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	4413      	add	r3, r2
 8005264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	68fa      	ldr	r2, [r7, #12]
 800526c:	0151      	lsls	r1, r2, #5
 800526e:	693a      	ldr	r2, [r7, #16]
 8005270:	440a      	add	r2, r1
 8005272:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005276:	f043 0302 	orr.w	r3, r3, #2
 800527a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	b2d2      	uxtb	r2, r2
 8005284:	4611      	mov	r1, r2
 8005286:	4618      	mov	r0, r3
 8005288:	f003 fdc9 	bl	8008e1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	015a      	lsls	r2, r3, #5
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	4413      	add	r3, r2
 8005294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005298:	461a      	mov	r2, r3
 800529a:	2310      	movs	r3, #16
 800529c:	6093      	str	r3, [r2, #8]
}
 800529e:	bf00      	nop
 80052a0:	3718      	adds	r7, #24
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}

080052a6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b088      	sub	sp, #32
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
 80052ae:	460b      	mov	r3, r1
 80052b0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80052bc:	78fb      	ldrb	r3, [r7, #3]
 80052be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	015a      	lsls	r2, r3, #5
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	4413      	add	r3, r2
 80052c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	f003 0304 	and.w	r3, r3, #4
 80052d2:	2b04      	cmp	r3, #4
 80052d4:	d119      	bne.n	800530a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	015a      	lsls	r2, r3, #5
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	4413      	add	r3, r2
 80052de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052e2:	461a      	mov	r2, r3
 80052e4:	2304      	movs	r3, #4
 80052e6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	015a      	lsls	r2, r3, #5
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	4413      	add	r3, r2
 80052f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	0151      	lsls	r1, r2, #5
 80052fa:	69ba      	ldr	r2, [r7, #24]
 80052fc:	440a      	add	r2, r1
 80052fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005302:	f043 0302 	orr.w	r3, r3, #2
 8005306:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8005308:	e3ca      	b.n	8005aa0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	015a      	lsls	r2, r3, #5
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	4413      	add	r3, r2
 8005312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	f003 0320 	and.w	r3, r3, #32
 800531c:	2b20      	cmp	r3, #32
 800531e:	d13e      	bne.n	800539e <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	015a      	lsls	r2, r3, #5
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	4413      	add	r3, r2
 8005328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800532c:	461a      	mov	r2, r3
 800532e:	2320      	movs	r3, #32
 8005330:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	212c      	movs	r1, #44	; 0x2c
 8005338:	fb01 f303 	mul.w	r3, r1, r3
 800533c:	4413      	add	r3, r2
 800533e:	333d      	adds	r3, #61	; 0x3d
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	2b01      	cmp	r3, #1
 8005344:	f040 83ac 	bne.w	8005aa0 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	212c      	movs	r1, #44	; 0x2c
 800534e:	fb01 f303 	mul.w	r3, r1, r3
 8005352:	4413      	add	r3, r2
 8005354:	333d      	adds	r3, #61	; 0x3d
 8005356:	2200      	movs	r2, #0
 8005358:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	212c      	movs	r1, #44	; 0x2c
 8005360:	fb01 f303 	mul.w	r3, r1, r3
 8005364:	4413      	add	r3, r2
 8005366:	3360      	adds	r3, #96	; 0x60
 8005368:	2202      	movs	r2, #2
 800536a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	015a      	lsls	r2, r3, #5
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	4413      	add	r3, r2
 8005374:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	697a      	ldr	r2, [r7, #20]
 800537c:	0151      	lsls	r1, r2, #5
 800537e:	69ba      	ldr	r2, [r7, #24]
 8005380:	440a      	add	r2, r1
 8005382:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005386:	f043 0302 	orr.w	r3, r3, #2
 800538a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	697a      	ldr	r2, [r7, #20]
 8005392:	b2d2      	uxtb	r2, r2
 8005394:	4611      	mov	r1, r2
 8005396:	4618      	mov	r0, r3
 8005398:	f003 fd41 	bl	8008e1e <USB_HC_Halt>
}
 800539c:	e380      	b.n	8005aa0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	015a      	lsls	r2, r3, #5
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	4413      	add	r3, r2
 80053a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053b4:	d122      	bne.n	80053fc <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	015a      	lsls	r2, r3, #5
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	4413      	add	r3, r2
 80053be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	697a      	ldr	r2, [r7, #20]
 80053c6:	0151      	lsls	r1, r2, #5
 80053c8:	69ba      	ldr	r2, [r7, #24]
 80053ca:	440a      	add	r2, r1
 80053cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053d0:	f043 0302 	orr.w	r3, r3, #2
 80053d4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	b2d2      	uxtb	r2, r2
 80053de:	4611      	mov	r1, r2
 80053e0:	4618      	mov	r0, r3
 80053e2:	f003 fd1c 	bl	8008e1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	015a      	lsls	r2, r3, #5
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	4413      	add	r3, r2
 80053ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053f2:	461a      	mov	r2, r3
 80053f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053f8:	6093      	str	r3, [r2, #8]
}
 80053fa:	e351      	b.n	8005aa0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	015a      	lsls	r2, r3, #5
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	4413      	add	r3, r2
 8005404:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f003 0301 	and.w	r3, r3, #1
 800540e:	2b01      	cmp	r3, #1
 8005410:	d150      	bne.n	80054b4 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	212c      	movs	r1, #44	; 0x2c
 8005418:	fb01 f303 	mul.w	r3, r1, r3
 800541c:	4413      	add	r3, r2
 800541e:	335c      	adds	r3, #92	; 0x5c
 8005420:	2200      	movs	r2, #0
 8005422:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	015a      	lsls	r2, r3, #5
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	4413      	add	r3, r2
 800542c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005436:	2b40      	cmp	r3, #64	; 0x40
 8005438:	d111      	bne.n	800545e <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	212c      	movs	r1, #44	; 0x2c
 8005440:	fb01 f303 	mul.w	r3, r1, r3
 8005444:	4413      	add	r3, r2
 8005446:	333d      	adds	r3, #61	; 0x3d
 8005448:	2201      	movs	r2, #1
 800544a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	015a      	lsls	r2, r3, #5
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	4413      	add	r3, r2
 8005454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005458:	461a      	mov	r2, r3
 800545a:	2340      	movs	r3, #64	; 0x40
 800545c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	015a      	lsls	r2, r3, #5
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	4413      	add	r3, r2
 8005466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	697a      	ldr	r2, [r7, #20]
 800546e:	0151      	lsls	r1, r2, #5
 8005470:	69ba      	ldr	r2, [r7, #24]
 8005472:	440a      	add	r2, r1
 8005474:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005478:	f043 0302 	orr.w	r3, r3, #2
 800547c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	697a      	ldr	r2, [r7, #20]
 8005484:	b2d2      	uxtb	r2, r2
 8005486:	4611      	mov	r1, r2
 8005488:	4618      	mov	r0, r3
 800548a:	f003 fcc8 	bl	8008e1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	015a      	lsls	r2, r3, #5
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	4413      	add	r3, r2
 8005496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800549a:	461a      	mov	r2, r3
 800549c:	2301      	movs	r3, #1
 800549e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	212c      	movs	r1, #44	; 0x2c
 80054a6:	fb01 f303 	mul.w	r3, r1, r3
 80054aa:	4413      	add	r3, r2
 80054ac:	3361      	adds	r3, #97	; 0x61
 80054ae:	2201      	movs	r2, #1
 80054b0:	701a      	strb	r2, [r3, #0]
}
 80054b2:	e2f5      	b.n	8005aa0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	015a      	lsls	r2, r3, #5
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	4413      	add	r3, r2
 80054bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c6:	2b40      	cmp	r3, #64	; 0x40
 80054c8:	d13c      	bne.n	8005544 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	212c      	movs	r1, #44	; 0x2c
 80054d0:	fb01 f303 	mul.w	r3, r1, r3
 80054d4:	4413      	add	r3, r2
 80054d6:	3361      	adds	r3, #97	; 0x61
 80054d8:	2204      	movs	r2, #4
 80054da:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	212c      	movs	r1, #44	; 0x2c
 80054e2:	fb01 f303 	mul.w	r3, r1, r3
 80054e6:	4413      	add	r3, r2
 80054e8:	333d      	adds	r3, #61	; 0x3d
 80054ea:	2201      	movs	r2, #1
 80054ec:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	212c      	movs	r1, #44	; 0x2c
 80054f4:	fb01 f303 	mul.w	r3, r1, r3
 80054f8:	4413      	add	r3, r2
 80054fa:	335c      	adds	r3, #92	; 0x5c
 80054fc:	2200      	movs	r2, #0
 80054fe:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	015a      	lsls	r2, r3, #5
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	4413      	add	r3, r2
 8005508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	697a      	ldr	r2, [r7, #20]
 8005510:	0151      	lsls	r1, r2, #5
 8005512:	69ba      	ldr	r2, [r7, #24]
 8005514:	440a      	add	r2, r1
 8005516:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800551a:	f043 0302 	orr.w	r3, r3, #2
 800551e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	697a      	ldr	r2, [r7, #20]
 8005526:	b2d2      	uxtb	r2, r2
 8005528:	4611      	mov	r1, r2
 800552a:	4618      	mov	r0, r3
 800552c:	f003 fc77 	bl	8008e1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	015a      	lsls	r2, r3, #5
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	4413      	add	r3, r2
 8005538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800553c:	461a      	mov	r2, r3
 800553e:	2340      	movs	r3, #64	; 0x40
 8005540:	6093      	str	r3, [r2, #8]
}
 8005542:	e2ad      	b.n	8005aa0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	015a      	lsls	r2, r3, #5
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	4413      	add	r3, r2
 800554c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f003 0308 	and.w	r3, r3, #8
 8005556:	2b08      	cmp	r3, #8
 8005558:	d12a      	bne.n	80055b0 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	015a      	lsls	r2, r3, #5
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	4413      	add	r3, r2
 8005562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005566:	461a      	mov	r2, r3
 8005568:	2308      	movs	r3, #8
 800556a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	015a      	lsls	r2, r3, #5
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	4413      	add	r3, r2
 8005574:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	697a      	ldr	r2, [r7, #20]
 800557c:	0151      	lsls	r1, r2, #5
 800557e:	69ba      	ldr	r2, [r7, #24]
 8005580:	440a      	add	r2, r1
 8005582:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005586:	f043 0302 	orr.w	r3, r3, #2
 800558a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	697a      	ldr	r2, [r7, #20]
 8005592:	b2d2      	uxtb	r2, r2
 8005594:	4611      	mov	r1, r2
 8005596:	4618      	mov	r0, r3
 8005598:	f003 fc41 	bl	8008e1e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	212c      	movs	r1, #44	; 0x2c
 80055a2:	fb01 f303 	mul.w	r3, r1, r3
 80055a6:	4413      	add	r3, r2
 80055a8:	3361      	adds	r3, #97	; 0x61
 80055aa:	2205      	movs	r2, #5
 80055ac:	701a      	strb	r2, [r3, #0]
}
 80055ae:	e277      	b.n	8005aa0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	015a      	lsls	r2, r3, #5
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	4413      	add	r3, r2
 80055b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	f003 0310 	and.w	r3, r3, #16
 80055c2:	2b10      	cmp	r3, #16
 80055c4:	d150      	bne.n	8005668 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	212c      	movs	r1, #44	; 0x2c
 80055cc:	fb01 f303 	mul.w	r3, r1, r3
 80055d0:	4413      	add	r3, r2
 80055d2:	335c      	adds	r3, #92	; 0x5c
 80055d4:	2200      	movs	r2, #0
 80055d6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	212c      	movs	r1, #44	; 0x2c
 80055de:	fb01 f303 	mul.w	r3, r1, r3
 80055e2:	4413      	add	r3, r2
 80055e4:	3361      	adds	r3, #97	; 0x61
 80055e6:	2203      	movs	r2, #3
 80055e8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	212c      	movs	r1, #44	; 0x2c
 80055f0:	fb01 f303 	mul.w	r3, r1, r3
 80055f4:	4413      	add	r3, r2
 80055f6:	333d      	adds	r3, #61	; 0x3d
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d112      	bne.n	8005624 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	212c      	movs	r1, #44	; 0x2c
 8005604:	fb01 f303 	mul.w	r3, r1, r3
 8005608:	4413      	add	r3, r2
 800560a:	333c      	adds	r3, #60	; 0x3c
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d108      	bne.n	8005624 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	212c      	movs	r1, #44	; 0x2c
 8005618:	fb01 f303 	mul.w	r3, r1, r3
 800561c:	4413      	add	r3, r2
 800561e:	333d      	adds	r3, #61	; 0x3d
 8005620:	2201      	movs	r2, #1
 8005622:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	015a      	lsls	r2, r3, #5
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	4413      	add	r3, r2
 800562c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	697a      	ldr	r2, [r7, #20]
 8005634:	0151      	lsls	r1, r2, #5
 8005636:	69ba      	ldr	r2, [r7, #24]
 8005638:	440a      	add	r2, r1
 800563a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800563e:	f043 0302 	orr.w	r3, r3, #2
 8005642:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	697a      	ldr	r2, [r7, #20]
 800564a:	b2d2      	uxtb	r2, r2
 800564c:	4611      	mov	r1, r2
 800564e:	4618      	mov	r0, r3
 8005650:	f003 fbe5 	bl	8008e1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	015a      	lsls	r2, r3, #5
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	4413      	add	r3, r2
 800565c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005660:	461a      	mov	r2, r3
 8005662:	2310      	movs	r3, #16
 8005664:	6093      	str	r3, [r2, #8]
}
 8005666:	e21b      	b.n	8005aa0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	015a      	lsls	r2, r3, #5
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	4413      	add	r3, r2
 8005670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800567a:	2b80      	cmp	r3, #128	; 0x80
 800567c:	d174      	bne.n	8005768 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d121      	bne.n	80056ca <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	212c      	movs	r1, #44	; 0x2c
 800568c:	fb01 f303 	mul.w	r3, r1, r3
 8005690:	4413      	add	r3, r2
 8005692:	3361      	adds	r3, #97	; 0x61
 8005694:	2206      	movs	r2, #6
 8005696:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	015a      	lsls	r2, r3, #5
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	4413      	add	r3, r2
 80056a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	0151      	lsls	r1, r2, #5
 80056aa:	69ba      	ldr	r2, [r7, #24]
 80056ac:	440a      	add	r2, r1
 80056ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056b2:	f043 0302 	orr.w	r3, r3, #2
 80056b6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	697a      	ldr	r2, [r7, #20]
 80056be:	b2d2      	uxtb	r2, r2
 80056c0:	4611      	mov	r1, r2
 80056c2:	4618      	mov	r0, r3
 80056c4:	f003 fbab 	bl	8008e1e <USB_HC_Halt>
 80056c8:	e044      	b.n	8005754 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	212c      	movs	r1, #44	; 0x2c
 80056d0:	fb01 f303 	mul.w	r3, r1, r3
 80056d4:	4413      	add	r3, r2
 80056d6:	335c      	adds	r3, #92	; 0x5c
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	1c5a      	adds	r2, r3, #1
 80056dc:	6879      	ldr	r1, [r7, #4]
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	202c      	movs	r0, #44	; 0x2c
 80056e2:	fb00 f303 	mul.w	r3, r0, r3
 80056e6:	440b      	add	r3, r1
 80056e8:	335c      	adds	r3, #92	; 0x5c
 80056ea:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	212c      	movs	r1, #44	; 0x2c
 80056f2:	fb01 f303 	mul.w	r3, r1, r3
 80056f6:	4413      	add	r3, r2
 80056f8:	335c      	adds	r3, #92	; 0x5c
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d920      	bls.n	8005742 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	212c      	movs	r1, #44	; 0x2c
 8005706:	fb01 f303 	mul.w	r3, r1, r3
 800570a:	4413      	add	r3, r2
 800570c:	335c      	adds	r3, #92	; 0x5c
 800570e:	2200      	movs	r2, #0
 8005710:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	212c      	movs	r1, #44	; 0x2c
 8005718:	fb01 f303 	mul.w	r3, r1, r3
 800571c:	4413      	add	r3, r2
 800571e:	3360      	adds	r3, #96	; 0x60
 8005720:	2204      	movs	r2, #4
 8005722:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	b2d9      	uxtb	r1, r3
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	202c      	movs	r0, #44	; 0x2c
 800572e:	fb00 f303 	mul.w	r3, r0, r3
 8005732:	4413      	add	r3, r2
 8005734:	3360      	adds	r3, #96	; 0x60
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	461a      	mov	r2, r3
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f008 feb6 	bl	800e4ac <HAL_HCD_HC_NotifyURBChange_Callback>
 8005740:	e008      	b.n	8005754 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	212c      	movs	r1, #44	; 0x2c
 8005748:	fb01 f303 	mul.w	r3, r1, r3
 800574c:	4413      	add	r3, r2
 800574e:	3360      	adds	r3, #96	; 0x60
 8005750:	2202      	movs	r2, #2
 8005752:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	015a      	lsls	r2, r3, #5
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	4413      	add	r3, r2
 800575c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005760:	461a      	mov	r2, r3
 8005762:	2380      	movs	r3, #128	; 0x80
 8005764:	6093      	str	r3, [r2, #8]
}
 8005766:	e19b      	b.n	8005aa0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	015a      	lsls	r2, r3, #5
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	4413      	add	r3, r2
 8005770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800577a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800577e:	d134      	bne.n	80057ea <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	015a      	lsls	r2, r3, #5
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	4413      	add	r3, r2
 8005788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	697a      	ldr	r2, [r7, #20]
 8005790:	0151      	lsls	r1, r2, #5
 8005792:	69ba      	ldr	r2, [r7, #24]
 8005794:	440a      	add	r2, r1
 8005796:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800579a:	f043 0302 	orr.w	r3, r3, #2
 800579e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	b2d2      	uxtb	r2, r2
 80057a8:	4611      	mov	r1, r2
 80057aa:	4618      	mov	r0, r3
 80057ac:	f003 fb37 	bl	8008e1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	015a      	lsls	r2, r3, #5
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	4413      	add	r3, r2
 80057b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057bc:	461a      	mov	r2, r3
 80057be:	2310      	movs	r3, #16
 80057c0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	015a      	lsls	r2, r3, #5
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	4413      	add	r3, r2
 80057ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ce:	461a      	mov	r2, r3
 80057d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057d4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	212c      	movs	r1, #44	; 0x2c
 80057dc:	fb01 f303 	mul.w	r3, r1, r3
 80057e0:	4413      	add	r3, r2
 80057e2:	3361      	adds	r3, #97	; 0x61
 80057e4:	2208      	movs	r2, #8
 80057e6:	701a      	strb	r2, [r3, #0]
}
 80057e8:	e15a      	b.n	8005aa0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	015a      	lsls	r2, r3, #5
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	4413      	add	r3, r2
 80057f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	f003 0302 	and.w	r3, r3, #2
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	f040 814f 	bne.w	8005aa0 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	015a      	lsls	r2, r3, #5
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	4413      	add	r3, r2
 800580a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	0151      	lsls	r1, r2, #5
 8005814:	69ba      	ldr	r2, [r7, #24]
 8005816:	440a      	add	r2, r1
 8005818:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800581c:	f023 0302 	bic.w	r3, r3, #2
 8005820:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	212c      	movs	r1, #44	; 0x2c
 8005828:	fb01 f303 	mul.w	r3, r1, r3
 800582c:	4413      	add	r3, r2
 800582e:	3361      	adds	r3, #97	; 0x61
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	2b01      	cmp	r3, #1
 8005834:	d17d      	bne.n	8005932 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	212c      	movs	r1, #44	; 0x2c
 800583c:	fb01 f303 	mul.w	r3, r1, r3
 8005840:	4413      	add	r3, r2
 8005842:	3360      	adds	r3, #96	; 0x60
 8005844:	2201      	movs	r2, #1
 8005846:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	212c      	movs	r1, #44	; 0x2c
 800584e:	fb01 f303 	mul.w	r3, r1, r3
 8005852:	4413      	add	r3, r2
 8005854:	333f      	adds	r3, #63	; 0x3f
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	2b02      	cmp	r3, #2
 800585a:	d00a      	beq.n	8005872 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	212c      	movs	r1, #44	; 0x2c
 8005862:	fb01 f303 	mul.w	r3, r1, r3
 8005866:	4413      	add	r3, r2
 8005868:	333f      	adds	r3, #63	; 0x3f
 800586a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800586c:	2b03      	cmp	r3, #3
 800586e:	f040 8100 	bne.w	8005a72 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d113      	bne.n	80058a2 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	212c      	movs	r1, #44	; 0x2c
 8005880:	fb01 f303 	mul.w	r3, r1, r3
 8005884:	4413      	add	r3, r2
 8005886:	3355      	adds	r3, #85	; 0x55
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	f083 0301 	eor.w	r3, r3, #1
 800588e:	b2d8      	uxtb	r0, r3
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	212c      	movs	r1, #44	; 0x2c
 8005896:	fb01 f303 	mul.w	r3, r1, r3
 800589a:	4413      	add	r3, r2
 800589c:	3355      	adds	r3, #85	; 0x55
 800589e:	4602      	mov	r2, r0
 80058a0:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	f040 80e3 	bne.w	8005a72 <HCD_HC_OUT_IRQHandler+0x7cc>
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	212c      	movs	r1, #44	; 0x2c
 80058b2:	fb01 f303 	mul.w	r3, r1, r3
 80058b6:	4413      	add	r3, r2
 80058b8:	334c      	adds	r3, #76	; 0x4c
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f000 80d8 	beq.w	8005a72 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	212c      	movs	r1, #44	; 0x2c
 80058c8:	fb01 f303 	mul.w	r3, r1, r3
 80058cc:	4413      	add	r3, r2
 80058ce:	334c      	adds	r3, #76	; 0x4c
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	6879      	ldr	r1, [r7, #4]
 80058d4:	697a      	ldr	r2, [r7, #20]
 80058d6:	202c      	movs	r0, #44	; 0x2c
 80058d8:	fb00 f202 	mul.w	r2, r0, r2
 80058dc:	440a      	add	r2, r1
 80058de:	3240      	adds	r2, #64	; 0x40
 80058e0:	8812      	ldrh	r2, [r2, #0]
 80058e2:	4413      	add	r3, r2
 80058e4:	3b01      	subs	r3, #1
 80058e6:	6879      	ldr	r1, [r7, #4]
 80058e8:	697a      	ldr	r2, [r7, #20]
 80058ea:	202c      	movs	r0, #44	; 0x2c
 80058ec:	fb00 f202 	mul.w	r2, r0, r2
 80058f0:	440a      	add	r2, r1
 80058f2:	3240      	adds	r2, #64	; 0x40
 80058f4:	8812      	ldrh	r2, [r2, #0]
 80058f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80058fa:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	2b00      	cmp	r3, #0
 8005904:	f000 80b5 	beq.w	8005a72 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	212c      	movs	r1, #44	; 0x2c
 800590e:	fb01 f303 	mul.w	r3, r1, r3
 8005912:	4413      	add	r3, r2
 8005914:	3355      	adds	r3, #85	; 0x55
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	f083 0301 	eor.w	r3, r3, #1
 800591c:	b2d8      	uxtb	r0, r3
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	212c      	movs	r1, #44	; 0x2c
 8005924:	fb01 f303 	mul.w	r3, r1, r3
 8005928:	4413      	add	r3, r2
 800592a:	3355      	adds	r3, #85	; 0x55
 800592c:	4602      	mov	r2, r0
 800592e:	701a      	strb	r2, [r3, #0]
 8005930:	e09f      	b.n	8005a72 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	212c      	movs	r1, #44	; 0x2c
 8005938:	fb01 f303 	mul.w	r3, r1, r3
 800593c:	4413      	add	r3, r2
 800593e:	3361      	adds	r3, #97	; 0x61
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	2b03      	cmp	r3, #3
 8005944:	d109      	bne.n	800595a <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	212c      	movs	r1, #44	; 0x2c
 800594c:	fb01 f303 	mul.w	r3, r1, r3
 8005950:	4413      	add	r3, r2
 8005952:	3360      	adds	r3, #96	; 0x60
 8005954:	2202      	movs	r2, #2
 8005956:	701a      	strb	r2, [r3, #0]
 8005958:	e08b      	b.n	8005a72 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	212c      	movs	r1, #44	; 0x2c
 8005960:	fb01 f303 	mul.w	r3, r1, r3
 8005964:	4413      	add	r3, r2
 8005966:	3361      	adds	r3, #97	; 0x61
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	2b04      	cmp	r3, #4
 800596c:	d109      	bne.n	8005982 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	212c      	movs	r1, #44	; 0x2c
 8005974:	fb01 f303 	mul.w	r3, r1, r3
 8005978:	4413      	add	r3, r2
 800597a:	3360      	adds	r3, #96	; 0x60
 800597c:	2202      	movs	r2, #2
 800597e:	701a      	strb	r2, [r3, #0]
 8005980:	e077      	b.n	8005a72 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	212c      	movs	r1, #44	; 0x2c
 8005988:	fb01 f303 	mul.w	r3, r1, r3
 800598c:	4413      	add	r3, r2
 800598e:	3361      	adds	r3, #97	; 0x61
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	2b05      	cmp	r3, #5
 8005994:	d109      	bne.n	80059aa <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	212c      	movs	r1, #44	; 0x2c
 800599c:	fb01 f303 	mul.w	r3, r1, r3
 80059a0:	4413      	add	r3, r2
 80059a2:	3360      	adds	r3, #96	; 0x60
 80059a4:	2205      	movs	r2, #5
 80059a6:	701a      	strb	r2, [r3, #0]
 80059a8:	e063      	b.n	8005a72 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	212c      	movs	r1, #44	; 0x2c
 80059b0:	fb01 f303 	mul.w	r3, r1, r3
 80059b4:	4413      	add	r3, r2
 80059b6:	3361      	adds	r3, #97	; 0x61
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	2b06      	cmp	r3, #6
 80059bc:	d009      	beq.n	80059d2 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	212c      	movs	r1, #44	; 0x2c
 80059c4:	fb01 f303 	mul.w	r3, r1, r3
 80059c8:	4413      	add	r3, r2
 80059ca:	3361      	adds	r3, #97	; 0x61
 80059cc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80059ce:	2b08      	cmp	r3, #8
 80059d0:	d14f      	bne.n	8005a72 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	212c      	movs	r1, #44	; 0x2c
 80059d8:	fb01 f303 	mul.w	r3, r1, r3
 80059dc:	4413      	add	r3, r2
 80059de:	335c      	adds	r3, #92	; 0x5c
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	1c5a      	adds	r2, r3, #1
 80059e4:	6879      	ldr	r1, [r7, #4]
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	202c      	movs	r0, #44	; 0x2c
 80059ea:	fb00 f303 	mul.w	r3, r0, r3
 80059ee:	440b      	add	r3, r1
 80059f0:	335c      	adds	r3, #92	; 0x5c
 80059f2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	212c      	movs	r1, #44	; 0x2c
 80059fa:	fb01 f303 	mul.w	r3, r1, r3
 80059fe:	4413      	add	r3, r2
 8005a00:	335c      	adds	r3, #92	; 0x5c
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d912      	bls.n	8005a2e <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	212c      	movs	r1, #44	; 0x2c
 8005a0e:	fb01 f303 	mul.w	r3, r1, r3
 8005a12:	4413      	add	r3, r2
 8005a14:	335c      	adds	r3, #92	; 0x5c
 8005a16:	2200      	movs	r2, #0
 8005a18:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	212c      	movs	r1, #44	; 0x2c
 8005a20:	fb01 f303 	mul.w	r3, r1, r3
 8005a24:	4413      	add	r3, r2
 8005a26:	3360      	adds	r3, #96	; 0x60
 8005a28:	2204      	movs	r2, #4
 8005a2a:	701a      	strb	r2, [r3, #0]
 8005a2c:	e021      	b.n	8005a72 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	212c      	movs	r1, #44	; 0x2c
 8005a34:	fb01 f303 	mul.w	r3, r1, r3
 8005a38:	4413      	add	r3, r2
 8005a3a:	3360      	adds	r3, #96	; 0x60
 8005a3c:	2202      	movs	r2, #2
 8005a3e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	015a      	lsls	r2, r3, #5
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	4413      	add	r3, r2
 8005a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005a56:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a5e:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	015a      	lsls	r2, r3, #5
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	4413      	add	r3, r2
 8005a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	015a      	lsls	r2, r3, #5
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	4413      	add	r3, r2
 8005a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a7e:	461a      	mov	r2, r3
 8005a80:	2302      	movs	r3, #2
 8005a82:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	b2d9      	uxtb	r1, r3
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	202c      	movs	r0, #44	; 0x2c
 8005a8e:	fb00 f303 	mul.w	r3, r0, r3
 8005a92:	4413      	add	r3, r2
 8005a94:	3360      	adds	r3, #96	; 0x60
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	461a      	mov	r2, r3
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f008 fd06 	bl	800e4ac <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005aa0:	bf00      	nop
 8005aa2:	3720      	adds	r7, #32
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b08a      	sub	sp, #40	; 0x28
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab8:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	6a1b      	ldr	r3, [r3, #32]
 8005ac0:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	f003 030f 	and.w	r3, r3, #15
 8005ac8:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	0c5b      	lsrs	r3, r3, #17
 8005ace:	f003 030f 	and.w	r3, r3, #15
 8005ad2:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	091b      	lsrs	r3, r3, #4
 8005ad8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005adc:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	d004      	beq.n	8005aee <HCD_RXQLVL_IRQHandler+0x46>
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	2b05      	cmp	r3, #5
 8005ae8:	f000 80a9 	beq.w	8005c3e <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005aec:	e0aa      	b.n	8005c44 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f000 80a6 	beq.w	8005c42 <HCD_RXQLVL_IRQHandler+0x19a>
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	212c      	movs	r1, #44	; 0x2c
 8005afc:	fb01 f303 	mul.w	r3, r1, r3
 8005b00:	4413      	add	r3, r2
 8005b02:	3344      	adds	r3, #68	; 0x44
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f000 809b 	beq.w	8005c42 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	212c      	movs	r1, #44	; 0x2c
 8005b12:	fb01 f303 	mul.w	r3, r1, r3
 8005b16:	4413      	add	r3, r2
 8005b18:	3350      	adds	r3, #80	; 0x50
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	441a      	add	r2, r3
 8005b20:	6879      	ldr	r1, [r7, #4]
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	202c      	movs	r0, #44	; 0x2c
 8005b26:	fb00 f303 	mul.w	r3, r0, r3
 8005b2a:	440b      	add	r3, r1
 8005b2c:	334c      	adds	r3, #76	; 0x4c
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d87a      	bhi.n	8005c2a <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6818      	ldr	r0, [r3, #0]
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	212c      	movs	r1, #44	; 0x2c
 8005b3e:	fb01 f303 	mul.w	r3, r1, r3
 8005b42:	4413      	add	r3, r2
 8005b44:	3344      	adds	r3, #68	; 0x44
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	693a      	ldr	r2, [r7, #16]
 8005b4a:	b292      	uxth	r2, r2
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	f002 fcdf 	bl	8008510 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	212c      	movs	r1, #44	; 0x2c
 8005b58:	fb01 f303 	mul.w	r3, r1, r3
 8005b5c:	4413      	add	r3, r2
 8005b5e:	3344      	adds	r3, #68	; 0x44
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	441a      	add	r2, r3
 8005b66:	6879      	ldr	r1, [r7, #4]
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	202c      	movs	r0, #44	; 0x2c
 8005b6c:	fb00 f303 	mul.w	r3, r0, r3
 8005b70:	440b      	add	r3, r1
 8005b72:	3344      	adds	r3, #68	; 0x44
 8005b74:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	212c      	movs	r1, #44	; 0x2c
 8005b7c:	fb01 f303 	mul.w	r3, r1, r3
 8005b80:	4413      	add	r3, r2
 8005b82:	3350      	adds	r3, #80	; 0x50
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	441a      	add	r2, r3
 8005b8a:	6879      	ldr	r1, [r7, #4]
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	202c      	movs	r0, #44	; 0x2c
 8005b90:	fb00 f303 	mul.w	r3, r0, r3
 8005b94:	440b      	add	r3, r1
 8005b96:	3350      	adds	r3, #80	; 0x50
 8005b98:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	015a      	lsls	r2, r3, #5
 8005b9e:	6a3b      	ldr	r3, [r7, #32]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	0cdb      	lsrs	r3, r3, #19
 8005baa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bae:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	212c      	movs	r1, #44	; 0x2c
 8005bb6:	fb01 f303 	mul.w	r3, r1, r3
 8005bba:	4413      	add	r3, r2
 8005bbc:	3340      	adds	r3, #64	; 0x40
 8005bbe:	881b      	ldrh	r3, [r3, #0]
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d13c      	bne.n	8005c42 <HCD_RXQLVL_IRQHandler+0x19a>
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d039      	beq.n	8005c42 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	015a      	lsls	r2, r3, #5
 8005bd2:	6a3b      	ldr	r3, [r7, #32]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005be4:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005bec:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	015a      	lsls	r2, r3, #5
 8005bf2:	6a3b      	ldr	r3, [r7, #32]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	212c      	movs	r1, #44	; 0x2c
 8005c06:	fb01 f303 	mul.w	r3, r1, r3
 8005c0a:	4413      	add	r3, r2
 8005c0c:	3354      	adds	r3, #84	; 0x54
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	f083 0301 	eor.w	r3, r3, #1
 8005c14:	b2d8      	uxtb	r0, r3
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	212c      	movs	r1, #44	; 0x2c
 8005c1c:	fb01 f303 	mul.w	r3, r1, r3
 8005c20:	4413      	add	r3, r2
 8005c22:	3354      	adds	r3, #84	; 0x54
 8005c24:	4602      	mov	r2, r0
 8005c26:	701a      	strb	r2, [r3, #0]
      break;
 8005c28:	e00b      	b.n	8005c42 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	212c      	movs	r1, #44	; 0x2c
 8005c30:	fb01 f303 	mul.w	r3, r1, r3
 8005c34:	4413      	add	r3, r2
 8005c36:	3360      	adds	r3, #96	; 0x60
 8005c38:	2204      	movs	r2, #4
 8005c3a:	701a      	strb	r2, [r3, #0]
      break;
 8005c3c:	e001      	b.n	8005c42 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8005c3e:	bf00      	nop
 8005c40:	e000      	b.n	8005c44 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8005c42:	bf00      	nop
  }
}
 8005c44:	bf00      	nop
 8005c46:	3728      	adds	r7, #40	; 0x28
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b086      	sub	sp, #24
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005c78:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f003 0302 	and.w	r3, r3, #2
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d10b      	bne.n	8005c9c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f003 0301 	and.w	r3, r3, #1
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d102      	bne.n	8005c94 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f008 fbf0 	bl	800e474 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	f043 0302 	orr.w	r3, r3, #2
 8005c9a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f003 0308 	and.w	r3, r3, #8
 8005ca2:	2b08      	cmp	r3, #8
 8005ca4:	d132      	bne.n	8005d0c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	f043 0308 	orr.w	r3, r3, #8
 8005cac:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f003 0304 	and.w	r3, r3, #4
 8005cb4:	2b04      	cmp	r3, #4
 8005cb6:	d126      	bne.n	8005d06 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	699b      	ldr	r3, [r3, #24]
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d113      	bne.n	8005ce8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005cc6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005cca:	d106      	bne.n	8005cda <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2102      	movs	r1, #2
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f002 fd7c 	bl	80087d0 <USB_InitFSLSPClkSel>
 8005cd8:	e011      	b.n	8005cfe <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2101      	movs	r1, #1
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f002 fd75 	bl	80087d0 <USB_InitFSLSPClkSel>
 8005ce6:	e00a      	b.n	8005cfe <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d106      	bne.n	8005cfe <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005cfc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f008 fbe6 	bl	800e4d0 <HAL_HCD_PortEnabled_Callback>
 8005d04:	e002      	b.n	8005d0c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f008 fbf0 	bl	800e4ec <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f003 0320 	and.w	r3, r3, #32
 8005d12:	2b20      	cmp	r3, #32
 8005d14:	d103      	bne.n	8005d1e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	f043 0320 	orr.w	r3, r3, #32
 8005d1c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005d24:	461a      	mov	r2, r3
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	6013      	str	r3, [r2, #0]
}
 8005d2a:	bf00      	nop
 8005d2c:	3718      	adds	r7, #24
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
	...

08005d34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d101      	bne.n	8005d46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e12b      	b.n	8005f9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d106      	bne.n	8005d60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f7fb ff7e 	bl	8001c5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2224      	movs	r2, #36	; 0x24
 8005d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f022 0201 	bic.w	r2, r2, #1
 8005d76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005d98:	f001 f9fc 	bl	8007194 <HAL_RCC_GetPCLK1Freq>
 8005d9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	4a81      	ldr	r2, [pc, #516]	; (8005fa8 <HAL_I2C_Init+0x274>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d807      	bhi.n	8005db8 <HAL_I2C_Init+0x84>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	4a80      	ldr	r2, [pc, #512]	; (8005fac <HAL_I2C_Init+0x278>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	bf94      	ite	ls
 8005db0:	2301      	movls	r3, #1
 8005db2:	2300      	movhi	r3, #0
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	e006      	b.n	8005dc6 <HAL_I2C_Init+0x92>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	4a7d      	ldr	r2, [pc, #500]	; (8005fb0 <HAL_I2C_Init+0x27c>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	bf94      	ite	ls
 8005dc0:	2301      	movls	r3, #1
 8005dc2:	2300      	movhi	r3, #0
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d001      	beq.n	8005dce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e0e7      	b.n	8005f9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	4a78      	ldr	r2, [pc, #480]	; (8005fb4 <HAL_I2C_Init+0x280>)
 8005dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005dd6:	0c9b      	lsrs	r3, r3, #18
 8005dd8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68ba      	ldr	r2, [r7, #8]
 8005dea:	430a      	orrs	r2, r1
 8005dec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	6a1b      	ldr	r3, [r3, #32]
 8005df4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	4a6a      	ldr	r2, [pc, #424]	; (8005fa8 <HAL_I2C_Init+0x274>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d802      	bhi.n	8005e08 <HAL_I2C_Init+0xd4>
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	3301      	adds	r3, #1
 8005e06:	e009      	b.n	8005e1c <HAL_I2C_Init+0xe8>
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005e0e:	fb02 f303 	mul.w	r3, r2, r3
 8005e12:	4a69      	ldr	r2, [pc, #420]	; (8005fb8 <HAL_I2C_Init+0x284>)
 8005e14:	fba2 2303 	umull	r2, r3, r2, r3
 8005e18:	099b      	lsrs	r3, r3, #6
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	6812      	ldr	r2, [r2, #0]
 8005e20:	430b      	orrs	r3, r1
 8005e22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	69db      	ldr	r3, [r3, #28]
 8005e2a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005e2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	495c      	ldr	r1, [pc, #368]	; (8005fa8 <HAL_I2C_Init+0x274>)
 8005e38:	428b      	cmp	r3, r1
 8005e3a:	d819      	bhi.n	8005e70 <HAL_I2C_Init+0x13c>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	1e59      	subs	r1, r3, #1
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	005b      	lsls	r3, r3, #1
 8005e46:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e4a:	1c59      	adds	r1, r3, #1
 8005e4c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005e50:	400b      	ands	r3, r1
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00a      	beq.n	8005e6c <HAL_I2C_Init+0x138>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	1e59      	subs	r1, r3, #1
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	005b      	lsls	r3, r3, #1
 8005e60:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e64:	3301      	adds	r3, #1
 8005e66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e6a:	e051      	b.n	8005f10 <HAL_I2C_Init+0x1dc>
 8005e6c:	2304      	movs	r3, #4
 8005e6e:	e04f      	b.n	8005f10 <HAL_I2C_Init+0x1dc>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d111      	bne.n	8005e9c <HAL_I2C_Init+0x168>
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	1e58      	subs	r0, r3, #1
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6859      	ldr	r1, [r3, #4]
 8005e80:	460b      	mov	r3, r1
 8005e82:	005b      	lsls	r3, r3, #1
 8005e84:	440b      	add	r3, r1
 8005e86:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	bf0c      	ite	eq
 8005e94:	2301      	moveq	r3, #1
 8005e96:	2300      	movne	r3, #0
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	e012      	b.n	8005ec2 <HAL_I2C_Init+0x18e>
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	1e58      	subs	r0, r3, #1
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6859      	ldr	r1, [r3, #4]
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	440b      	add	r3, r1
 8005eaa:	0099      	lsls	r1, r3, #2
 8005eac:	440b      	add	r3, r1
 8005eae:	fbb0 f3f3 	udiv	r3, r0, r3
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	bf0c      	ite	eq
 8005ebc:	2301      	moveq	r3, #1
 8005ebe:	2300      	movne	r3, #0
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d001      	beq.n	8005eca <HAL_I2C_Init+0x196>
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e022      	b.n	8005f10 <HAL_I2C_Init+0x1dc>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d10e      	bne.n	8005ef0 <HAL_I2C_Init+0x1bc>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	1e58      	subs	r0, r3, #1
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6859      	ldr	r1, [r3, #4]
 8005eda:	460b      	mov	r3, r1
 8005edc:	005b      	lsls	r3, r3, #1
 8005ede:	440b      	add	r3, r1
 8005ee0:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005eea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eee:	e00f      	b.n	8005f10 <HAL_I2C_Init+0x1dc>
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	1e58      	subs	r0, r3, #1
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6859      	ldr	r1, [r3, #4]
 8005ef8:	460b      	mov	r3, r1
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	440b      	add	r3, r1
 8005efe:	0099      	lsls	r1, r3, #2
 8005f00:	440b      	add	r3, r1
 8005f02:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f06:	3301      	adds	r3, #1
 8005f08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f10:	6879      	ldr	r1, [r7, #4]
 8005f12:	6809      	ldr	r1, [r1, #0]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	69da      	ldr	r2, [r3, #28]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a1b      	ldr	r3, [r3, #32]
 8005f2a:	431a      	orrs	r2, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	430a      	orrs	r2, r1
 8005f32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005f3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	6911      	ldr	r1, [r2, #16]
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	68d2      	ldr	r2, [r2, #12]
 8005f4a:	4311      	orrs	r1, r2
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	6812      	ldr	r2, [r2, #0]
 8005f50:	430b      	orrs	r3, r1
 8005f52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	695a      	ldr	r2, [r3, #20]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	699b      	ldr	r3, [r3, #24]
 8005f66:	431a      	orrs	r2, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	430a      	orrs	r2, r1
 8005f6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f042 0201 	orr.w	r2, r2, #1
 8005f7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2220      	movs	r2, #32
 8005f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3710      	adds	r7, #16
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	000186a0 	.word	0x000186a0
 8005fac:	001e847f 	.word	0x001e847f
 8005fb0:	003d08ff 	.word	0x003d08ff
 8005fb4:	431bde83 	.word	0x431bde83
 8005fb8:	10624dd3 	.word	0x10624dd3

08005fbc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b088      	sub	sp, #32
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d101      	bne.n	8005fce <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e128      	b.n	8006220 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d109      	bne.n	8005fee <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a90      	ldr	r2, [pc, #576]	; (8006228 <HAL_I2S_Init+0x26c>)
 8005fe6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f7fb fe7f 	bl	8001cec <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2202      	movs	r2, #2
 8005ff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	69db      	ldr	r3, [r3, #28]
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	6812      	ldr	r2, [r2, #0]
 8006000:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006004:	f023 030f 	bic.w	r3, r3, #15
 8006008:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2202      	movs	r2, #2
 8006010:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	695b      	ldr	r3, [r3, #20]
 8006016:	2b02      	cmp	r3, #2
 8006018:	d060      	beq.n	80060dc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d102      	bne.n	8006028 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8006022:	2310      	movs	r3, #16
 8006024:	617b      	str	r3, [r7, #20]
 8006026:	e001      	b.n	800602c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006028:	2320      	movs	r3, #32
 800602a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	2b20      	cmp	r3, #32
 8006032:	d802      	bhi.n	800603a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	005b      	lsls	r3, r3, #1
 8006038:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800603a:	2001      	movs	r0, #1
 800603c:	f001 f9e6 	bl	800740c <HAL_RCCEx_GetPeriphCLKFreq>
 8006040:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800604a:	d125      	bne.n	8006098 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d010      	beq.n	8006076 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	fbb2 f2f3 	udiv	r2, r2, r3
 800605e:	4613      	mov	r3, r2
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	4413      	add	r3, r2
 8006064:	005b      	lsls	r3, r3, #1
 8006066:	461a      	mov	r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	695b      	ldr	r3, [r3, #20]
 800606c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006070:	3305      	adds	r3, #5
 8006072:	613b      	str	r3, [r7, #16]
 8006074:	e01f      	b.n	80060b6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	00db      	lsls	r3, r3, #3
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006080:	4613      	mov	r3, r2
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	4413      	add	r3, r2
 8006086:	005b      	lsls	r3, r3, #1
 8006088:	461a      	mov	r2, r3
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	695b      	ldr	r3, [r3, #20]
 800608e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006092:	3305      	adds	r3, #5
 8006094:	613b      	str	r3, [r7, #16]
 8006096:	e00e      	b.n	80060b6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	fbb2 f2f3 	udiv	r2, r2, r3
 80060a0:	4613      	mov	r3, r2
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	4413      	add	r3, r2
 80060a6:	005b      	lsls	r3, r3, #1
 80060a8:	461a      	mov	r2, r3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	695b      	ldr	r3, [r3, #20]
 80060ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80060b2:	3305      	adds	r3, #5
 80060b4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	4a5c      	ldr	r2, [pc, #368]	; (800622c <HAL_I2S_Init+0x270>)
 80060ba:	fba2 2303 	umull	r2, r3, r2, r3
 80060be:	08db      	lsrs	r3, r3, #3
 80060c0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	f003 0301 	and.w	r3, r3, #1
 80060c8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80060ca:	693a      	ldr	r2, [r7, #16]
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	1ad3      	subs	r3, r2, r3
 80060d0:	085b      	lsrs	r3, r3, #1
 80060d2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	021b      	lsls	r3, r3, #8
 80060d8:	61bb      	str	r3, [r7, #24]
 80060da:	e003      	b.n	80060e4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80060dc:	2302      	movs	r3, #2
 80060de:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80060e0:	2300      	movs	r3, #0
 80060e2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d902      	bls.n	80060f0 <HAL_I2S_Init+0x134>
 80060ea:	69fb      	ldr	r3, [r7, #28]
 80060ec:	2bff      	cmp	r3, #255	; 0xff
 80060ee:	d907      	bls.n	8006100 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060f4:	f043 0210 	orr.w	r2, r3, #16
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	e08f      	b.n	8006220 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	691a      	ldr	r2, [r3, #16]
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	ea42 0103 	orr.w	r1, r2, r3
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	69fa      	ldr	r2, [r7, #28]
 8006110:	430a      	orrs	r2, r1
 8006112:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	69db      	ldr	r3, [r3, #28]
 800611a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800611e:	f023 030f 	bic.w	r3, r3, #15
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	6851      	ldr	r1, [r2, #4]
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	6892      	ldr	r2, [r2, #8]
 800612a:	4311      	orrs	r1, r2
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	68d2      	ldr	r2, [r2, #12]
 8006130:	4311      	orrs	r1, r2
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	6992      	ldr	r2, [r2, #24]
 8006136:	430a      	orrs	r2, r1
 8006138:	431a      	orrs	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006142:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6a1b      	ldr	r3, [r3, #32]
 8006148:	2b01      	cmp	r3, #1
 800614a:	d161      	bne.n	8006210 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a38      	ldr	r2, [pc, #224]	; (8006230 <HAL_I2S_Init+0x274>)
 8006150:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a37      	ldr	r2, [pc, #220]	; (8006234 <HAL_I2S_Init+0x278>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d101      	bne.n	8006160 <HAL_I2S_Init+0x1a4>
 800615c:	4b36      	ldr	r3, [pc, #216]	; (8006238 <HAL_I2S_Init+0x27c>)
 800615e:	e001      	b.n	8006164 <HAL_I2S_Init+0x1a8>
 8006160:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006164:	69db      	ldr	r3, [r3, #28]
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	6812      	ldr	r2, [r2, #0]
 800616a:	4932      	ldr	r1, [pc, #200]	; (8006234 <HAL_I2S_Init+0x278>)
 800616c:	428a      	cmp	r2, r1
 800616e:	d101      	bne.n	8006174 <HAL_I2S_Init+0x1b8>
 8006170:	4a31      	ldr	r2, [pc, #196]	; (8006238 <HAL_I2S_Init+0x27c>)
 8006172:	e001      	b.n	8006178 <HAL_I2S_Init+0x1bc>
 8006174:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8006178:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800617c:	f023 030f 	bic.w	r3, r3, #15
 8006180:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a2b      	ldr	r2, [pc, #172]	; (8006234 <HAL_I2S_Init+0x278>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d101      	bne.n	8006190 <HAL_I2S_Init+0x1d4>
 800618c:	4b2a      	ldr	r3, [pc, #168]	; (8006238 <HAL_I2S_Init+0x27c>)
 800618e:	e001      	b.n	8006194 <HAL_I2S_Init+0x1d8>
 8006190:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006194:	2202      	movs	r2, #2
 8006196:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a25      	ldr	r2, [pc, #148]	; (8006234 <HAL_I2S_Init+0x278>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d101      	bne.n	80061a6 <HAL_I2S_Init+0x1ea>
 80061a2:	4b25      	ldr	r3, [pc, #148]	; (8006238 <HAL_I2S_Init+0x27c>)
 80061a4:	e001      	b.n	80061aa <HAL_I2S_Init+0x1ee>
 80061a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80061aa:	69db      	ldr	r3, [r3, #28]
 80061ac:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061b6:	d003      	beq.n	80061c0 <HAL_I2S_Init+0x204>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d103      	bne.n	80061c8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80061c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80061c4:	613b      	str	r3, [r7, #16]
 80061c6:	e001      	b.n	80061cc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80061c8:	2300      	movs	r3, #0
 80061ca:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80061d6:	4313      	orrs	r3, r2
 80061d8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80061e0:	4313      	orrs	r3, r2
 80061e2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	699b      	ldr	r3, [r3, #24]
 80061e8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80061ea:	4313      	orrs	r3, r2
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	897b      	ldrh	r3, [r7, #10]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80061f8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a0d      	ldr	r2, [pc, #52]	; (8006234 <HAL_I2S_Init+0x278>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d101      	bne.n	8006208 <HAL_I2S_Init+0x24c>
 8006204:	4b0c      	ldr	r3, [pc, #48]	; (8006238 <HAL_I2S_Init+0x27c>)
 8006206:	e001      	b.n	800620c <HAL_I2S_Init+0x250>
 8006208:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800620c:	897a      	ldrh	r2, [r7, #10]
 800620e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2201      	movs	r2, #1
 800621a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800621e:	2300      	movs	r3, #0
}
 8006220:	4618      	mov	r0, r3
 8006222:	3720      	adds	r7, #32
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}
 8006228:	08006333 	.word	0x08006333
 800622c:	cccccccd 	.word	0xcccccccd
 8006230:	08006449 	.word	0x08006449
 8006234:	40003800 	.word	0x40003800
 8006238:	40003400 	.word	0x40003400

0800623c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8006244:	bf00      	nop
 8006246:	370c      	adds	r7, #12
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8006258:	bf00      	nop
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr

08006264 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800626c:	bf00      	nop
 800626e:	370c      	adds	r7, #12
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006284:	881a      	ldrh	r2, [r3, #0]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006290:	1c9a      	adds	r2, r3, #2
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800629a:	b29b      	uxth	r3, r3
 800629c:	3b01      	subs	r3, #1
 800629e:	b29a      	uxth	r2, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d10e      	bne.n	80062cc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	685a      	ldr	r2, [r3, #4]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80062bc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2201      	movs	r2, #1
 80062c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f7ff ffb8 	bl	800623c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80062cc:	bf00      	nop
 80062ce:	3708      	adds	r7, #8
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b082      	sub	sp, #8
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68da      	ldr	r2, [r3, #12]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e6:	b292      	uxth	r2, r2
 80062e8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ee:	1c9a      	adds	r2, r3, #2
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	3b01      	subs	r3, #1
 80062fc:	b29a      	uxth	r2, r3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006306:	b29b      	uxth	r3, r3
 8006308:	2b00      	cmp	r3, #0
 800630a:	d10e      	bne.n	800632a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	685a      	ldr	r2, [r3, #4]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800631a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f7ff ff93 	bl	8006250 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800632a:	bf00      	nop
 800632c:	3708      	adds	r7, #8
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}

08006332 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006332:	b580      	push	{r7, lr}
 8006334:	b086      	sub	sp, #24
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006348:	b2db      	uxtb	r3, r3
 800634a:	2b04      	cmp	r3, #4
 800634c:	d13a      	bne.n	80063c4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	f003 0301 	and.w	r3, r3, #1
 8006354:	2b01      	cmp	r3, #1
 8006356:	d109      	bne.n	800636c <I2S_IRQHandler+0x3a>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006362:	2b40      	cmp	r3, #64	; 0x40
 8006364:	d102      	bne.n	800636c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f7ff ffb4 	bl	80062d4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006372:	2b40      	cmp	r3, #64	; 0x40
 8006374:	d126      	bne.n	80063c4 <I2S_IRQHandler+0x92>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	f003 0320 	and.w	r3, r3, #32
 8006380:	2b20      	cmp	r3, #32
 8006382:	d11f      	bne.n	80063c4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	685a      	ldr	r2, [r3, #4]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006392:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006394:	2300      	movs	r3, #0
 8006396:	613b      	str	r3, [r7, #16]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	613b      	str	r3, [r7, #16]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	613b      	str	r3, [r7, #16]
 80063a8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b6:	f043 0202 	orr.w	r2, r3, #2
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f7ff ff50 	bl	8006264 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	2b03      	cmp	r3, #3
 80063ce:	d136      	bne.n	800643e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	f003 0302 	and.w	r3, r3, #2
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	d109      	bne.n	80063ee <I2S_IRQHandler+0xbc>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063e4:	2b80      	cmp	r3, #128	; 0x80
 80063e6:	d102      	bne.n	80063ee <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f7ff ff45 	bl	8006278 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	f003 0308 	and.w	r3, r3, #8
 80063f4:	2b08      	cmp	r3, #8
 80063f6:	d122      	bne.n	800643e <I2S_IRQHandler+0x10c>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	f003 0320 	and.w	r3, r3, #32
 8006402:	2b20      	cmp	r3, #32
 8006404:	d11b      	bne.n	800643e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	685a      	ldr	r2, [r3, #4]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006414:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006416:	2300      	movs	r3, #0
 8006418:	60fb      	str	r3, [r7, #12]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	60fb      	str	r3, [r7, #12]
 8006422:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006430:	f043 0204 	orr.w	r2, r3, #4
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f7ff ff13 	bl	8006264 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800643e:	bf00      	nop
 8006440:	3718      	adds	r7, #24
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
	...

08006448 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b088      	sub	sp, #32
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4aa2      	ldr	r2, [pc, #648]	; (80066e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d101      	bne.n	8006466 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006462:	4ba2      	ldr	r3, [pc, #648]	; (80066ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006464:	e001      	b.n	800646a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006466:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a9b      	ldr	r2, [pc, #620]	; (80066e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d101      	bne.n	8006484 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006480:	4b9a      	ldr	r3, [pc, #616]	; (80066ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006482:	e001      	b.n	8006488 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006484:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006494:	d004      	beq.n	80064a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	2b00      	cmp	r3, #0
 800649c:	f040 8099 	bne.w	80065d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	f003 0302 	and.w	r3, r3, #2
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	d107      	bne.n	80064ba <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d002      	beq.n	80064ba <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 f925 	bl	8006704 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	f003 0301 	and.w	r3, r3, #1
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d107      	bne.n	80064d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d002      	beq.n	80064d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 f9c8 	bl	8006864 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064da:	2b40      	cmp	r3, #64	; 0x40
 80064dc:	d13a      	bne.n	8006554 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	f003 0320 	and.w	r3, r3, #32
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d035      	beq.n	8006554 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a7e      	ldr	r2, [pc, #504]	; (80066e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d101      	bne.n	80064f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80064f2:	4b7e      	ldr	r3, [pc, #504]	; (80066ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80064f4:	e001      	b.n	80064fa <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80064f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064fa:	685a      	ldr	r2, [r3, #4]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4979      	ldr	r1, [pc, #484]	; (80066e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006502:	428b      	cmp	r3, r1
 8006504:	d101      	bne.n	800650a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006506:	4b79      	ldr	r3, [pc, #484]	; (80066ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006508:	e001      	b.n	800650e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800650a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800650e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006512:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	685a      	ldr	r2, [r3, #4]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006522:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006524:	2300      	movs	r3, #0
 8006526:	60fb      	str	r3, [r7, #12]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	60fb      	str	r3, [r7, #12]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	60fb      	str	r3, [r7, #12]
 8006538:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2201      	movs	r2, #1
 800653e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006546:	f043 0202 	orr.w	r2, r3, #2
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f7ff fe88 	bl	8006264 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	f003 0308 	and.w	r3, r3, #8
 800655a:	2b08      	cmp	r3, #8
 800655c:	f040 80be 	bne.w	80066dc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	f003 0320 	and.w	r3, r3, #32
 8006566:	2b00      	cmp	r3, #0
 8006568:	f000 80b8 	beq.w	80066dc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	685a      	ldr	r2, [r3, #4]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800657a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a59      	ldr	r2, [pc, #356]	; (80066e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d101      	bne.n	800658a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006586:	4b59      	ldr	r3, [pc, #356]	; (80066ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006588:	e001      	b.n	800658e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800658a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800658e:	685a      	ldr	r2, [r3, #4]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4954      	ldr	r1, [pc, #336]	; (80066e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006596:	428b      	cmp	r3, r1
 8006598:	d101      	bne.n	800659e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800659a:	4b54      	ldr	r3, [pc, #336]	; (80066ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800659c:	e001      	b.n	80065a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800659e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80065a6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80065a8:	2300      	movs	r3, #0
 80065aa:	60bb      	str	r3, [r7, #8]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	60bb      	str	r3, [r7, #8]
 80065b4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2201      	movs	r2, #1
 80065ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065c2:	f043 0204 	orr.w	r2, r3, #4
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f7ff fe4a 	bl	8006264 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80065d0:	e084      	b.n	80066dc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	f003 0302 	and.w	r3, r3, #2
 80065d8:	2b02      	cmp	r3, #2
 80065da:	d107      	bne.n	80065ec <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d002      	beq.n	80065ec <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 f8be 	bl	8006768 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	f003 0301 	and.w	r3, r3, #1
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d107      	bne.n	8006606 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d002      	beq.n	8006606 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f000 f8fd 	bl	8006800 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800660c:	2b40      	cmp	r3, #64	; 0x40
 800660e:	d12f      	bne.n	8006670 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	f003 0320 	and.w	r3, r3, #32
 8006616:	2b00      	cmp	r3, #0
 8006618:	d02a      	beq.n	8006670 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	685a      	ldr	r2, [r3, #4]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006628:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a2e      	ldr	r2, [pc, #184]	; (80066e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d101      	bne.n	8006638 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006634:	4b2d      	ldr	r3, [pc, #180]	; (80066ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006636:	e001      	b.n	800663c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006638:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800663c:	685a      	ldr	r2, [r3, #4]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4929      	ldr	r1, [pc, #164]	; (80066e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006644:	428b      	cmp	r3, r1
 8006646:	d101      	bne.n	800664c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006648:	4b28      	ldr	r3, [pc, #160]	; (80066ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800664a:	e001      	b.n	8006650 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800664c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006650:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006654:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2201      	movs	r2, #1
 800665a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006662:	f043 0202 	orr.w	r2, r3, #2
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f7ff fdfa 	bl	8006264 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	f003 0308 	and.w	r3, r3, #8
 8006676:	2b08      	cmp	r3, #8
 8006678:	d131      	bne.n	80066de <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	f003 0320 	and.w	r3, r3, #32
 8006680:	2b00      	cmp	r3, #0
 8006682:	d02c      	beq.n	80066de <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a17      	ldr	r2, [pc, #92]	; (80066e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d101      	bne.n	8006692 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800668e:	4b17      	ldr	r3, [pc, #92]	; (80066ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006690:	e001      	b.n	8006696 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006692:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006696:	685a      	ldr	r2, [r3, #4]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4912      	ldr	r1, [pc, #72]	; (80066e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800669e:	428b      	cmp	r3, r1
 80066a0:	d101      	bne.n	80066a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80066a2:	4b12      	ldr	r3, [pc, #72]	; (80066ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80066a4:	e001      	b.n	80066aa <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80066a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066aa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80066ae:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	685a      	ldr	r2, [r3, #4]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80066be:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066cc:	f043 0204 	orr.w	r2, r3, #4
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f7ff fdc5 	bl	8006264 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80066da:	e000      	b.n	80066de <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80066dc:	bf00      	nop
}
 80066de:	bf00      	nop
 80066e0:	3720      	adds	r7, #32
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	40003800 	.word	0x40003800
 80066ec:	40003400 	.word	0x40003400

080066f0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80066f8:	bf00      	nop
 80066fa:	370c      	adds	r7, #12
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr

08006704 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006710:	1c99      	adds	r1, r3, #2
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	6251      	str	r1, [r2, #36]	; 0x24
 8006716:	881a      	ldrh	r2, [r3, #0]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006722:	b29b      	uxth	r3, r3
 8006724:	3b01      	subs	r3, #1
 8006726:	b29a      	uxth	r2, r3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006730:	b29b      	uxth	r3, r3
 8006732:	2b00      	cmp	r3, #0
 8006734:	d113      	bne.n	800675e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	685a      	ldr	r2, [r3, #4]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006744:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800674a:	b29b      	uxth	r3, r3
 800674c:	2b00      	cmp	r3, #0
 800674e:	d106      	bne.n	800675e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f7ff ffc9 	bl	80066f0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800675e:	bf00      	nop
 8006760:	3708      	adds	r7, #8
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
	...

08006768 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b082      	sub	sp, #8
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006774:	1c99      	adds	r1, r3, #2
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	6251      	str	r1, [r2, #36]	; 0x24
 800677a:	8819      	ldrh	r1, [r3, #0]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a1d      	ldr	r2, [pc, #116]	; (80067f8 <I2SEx_TxISR_I2SExt+0x90>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d101      	bne.n	800678a <I2SEx_TxISR_I2SExt+0x22>
 8006786:	4b1d      	ldr	r3, [pc, #116]	; (80067fc <I2SEx_TxISR_I2SExt+0x94>)
 8006788:	e001      	b.n	800678e <I2SEx_TxISR_I2SExt+0x26>
 800678a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800678e:	460a      	mov	r2, r1
 8006790:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006796:	b29b      	uxth	r3, r3
 8006798:	3b01      	subs	r3, #1
 800679a:	b29a      	uxth	r2, r3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d121      	bne.n	80067ee <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a12      	ldr	r2, [pc, #72]	; (80067f8 <I2SEx_TxISR_I2SExt+0x90>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d101      	bne.n	80067b8 <I2SEx_TxISR_I2SExt+0x50>
 80067b4:	4b11      	ldr	r3, [pc, #68]	; (80067fc <I2SEx_TxISR_I2SExt+0x94>)
 80067b6:	e001      	b.n	80067bc <I2SEx_TxISR_I2SExt+0x54>
 80067b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067bc:	685a      	ldr	r2, [r3, #4]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	490d      	ldr	r1, [pc, #52]	; (80067f8 <I2SEx_TxISR_I2SExt+0x90>)
 80067c4:	428b      	cmp	r3, r1
 80067c6:	d101      	bne.n	80067cc <I2SEx_TxISR_I2SExt+0x64>
 80067c8:	4b0c      	ldr	r3, [pc, #48]	; (80067fc <I2SEx_TxISR_I2SExt+0x94>)
 80067ca:	e001      	b.n	80067d0 <I2SEx_TxISR_I2SExt+0x68>
 80067cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067d0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80067d4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80067da:	b29b      	uxth	r3, r3
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d106      	bne.n	80067ee <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f7ff ff81 	bl	80066f0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80067ee:	bf00      	nop
 80067f0:	3708      	adds	r7, #8
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	40003800 	.word	0x40003800
 80067fc:	40003400 	.word	0x40003400

08006800 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b082      	sub	sp, #8
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	68d8      	ldr	r0, [r3, #12]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006812:	1c99      	adds	r1, r3, #2
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006818:	b282      	uxth	r2, r0
 800681a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006820:	b29b      	uxth	r3, r3
 8006822:	3b01      	subs	r3, #1
 8006824:	b29a      	uxth	r2, r3
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800682e:	b29b      	uxth	r3, r3
 8006830:	2b00      	cmp	r3, #0
 8006832:	d113      	bne.n	800685c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	685a      	ldr	r2, [r3, #4]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006842:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006848:	b29b      	uxth	r3, r3
 800684a:	2b00      	cmp	r3, #0
 800684c:	d106      	bne.n	800685c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2201      	movs	r2, #1
 8006852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f7ff ff4a 	bl	80066f0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800685c:	bf00      	nop
 800685e:	3708      	adds	r7, #8
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a20      	ldr	r2, [pc, #128]	; (80068f4 <I2SEx_RxISR_I2SExt+0x90>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d101      	bne.n	800687a <I2SEx_RxISR_I2SExt+0x16>
 8006876:	4b20      	ldr	r3, [pc, #128]	; (80068f8 <I2SEx_RxISR_I2SExt+0x94>)
 8006878:	e001      	b.n	800687e <I2SEx_RxISR_I2SExt+0x1a>
 800687a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800687e:	68d8      	ldr	r0, [r3, #12]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006884:	1c99      	adds	r1, r3, #2
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	62d1      	str	r1, [r2, #44]	; 0x2c
 800688a:	b282      	uxth	r2, r0
 800688c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006892:	b29b      	uxth	r3, r3
 8006894:	3b01      	subs	r3, #1
 8006896:	b29a      	uxth	r2, r3
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d121      	bne.n	80068ea <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a12      	ldr	r2, [pc, #72]	; (80068f4 <I2SEx_RxISR_I2SExt+0x90>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d101      	bne.n	80068b4 <I2SEx_RxISR_I2SExt+0x50>
 80068b0:	4b11      	ldr	r3, [pc, #68]	; (80068f8 <I2SEx_RxISR_I2SExt+0x94>)
 80068b2:	e001      	b.n	80068b8 <I2SEx_RxISR_I2SExt+0x54>
 80068b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80068b8:	685a      	ldr	r2, [r3, #4]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	490d      	ldr	r1, [pc, #52]	; (80068f4 <I2SEx_RxISR_I2SExt+0x90>)
 80068c0:	428b      	cmp	r3, r1
 80068c2:	d101      	bne.n	80068c8 <I2SEx_RxISR_I2SExt+0x64>
 80068c4:	4b0c      	ldr	r3, [pc, #48]	; (80068f8 <I2SEx_RxISR_I2SExt+0x94>)
 80068c6:	e001      	b.n	80068cc <I2SEx_RxISR_I2SExt+0x68>
 80068c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80068cc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80068d0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d106      	bne.n	80068ea <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f7ff ff03 	bl	80066f0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80068ea:	bf00      	nop
 80068ec:	3708      	adds	r7, #8
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	bf00      	nop
 80068f4:	40003800 	.word	0x40003800
 80068f8:	40003400 	.word	0x40003400

080068fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b086      	sub	sp, #24
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d101      	bne.n	800690e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e264      	b.n	8006dd8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 0301 	and.w	r3, r3, #1
 8006916:	2b00      	cmp	r3, #0
 8006918:	d075      	beq.n	8006a06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800691a:	4ba3      	ldr	r3, [pc, #652]	; (8006ba8 <HAL_RCC_OscConfig+0x2ac>)
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	f003 030c 	and.w	r3, r3, #12
 8006922:	2b04      	cmp	r3, #4
 8006924:	d00c      	beq.n	8006940 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006926:	4ba0      	ldr	r3, [pc, #640]	; (8006ba8 <HAL_RCC_OscConfig+0x2ac>)
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800692e:	2b08      	cmp	r3, #8
 8006930:	d112      	bne.n	8006958 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006932:	4b9d      	ldr	r3, [pc, #628]	; (8006ba8 <HAL_RCC_OscConfig+0x2ac>)
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800693a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800693e:	d10b      	bne.n	8006958 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006940:	4b99      	ldr	r3, [pc, #612]	; (8006ba8 <HAL_RCC_OscConfig+0x2ac>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006948:	2b00      	cmp	r3, #0
 800694a:	d05b      	beq.n	8006a04 <HAL_RCC_OscConfig+0x108>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d157      	bne.n	8006a04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	e23f      	b.n	8006dd8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006960:	d106      	bne.n	8006970 <HAL_RCC_OscConfig+0x74>
 8006962:	4b91      	ldr	r3, [pc, #580]	; (8006ba8 <HAL_RCC_OscConfig+0x2ac>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a90      	ldr	r2, [pc, #576]	; (8006ba8 <HAL_RCC_OscConfig+0x2ac>)
 8006968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800696c:	6013      	str	r3, [r2, #0]
 800696e:	e01d      	b.n	80069ac <HAL_RCC_OscConfig+0xb0>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006978:	d10c      	bne.n	8006994 <HAL_RCC_OscConfig+0x98>
 800697a:	4b8b      	ldr	r3, [pc, #556]	; (8006ba8 <HAL_RCC_OscConfig+0x2ac>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a8a      	ldr	r2, [pc, #552]	; (8006ba8 <HAL_RCC_OscConfig+0x2ac>)
 8006980:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006984:	6013      	str	r3, [r2, #0]
 8006986:	4b88      	ldr	r3, [pc, #544]	; (8006ba8 <HAL_RCC_OscConfig+0x2ac>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a87      	ldr	r2, [pc, #540]	; (8006ba8 <HAL_RCC_OscConfig+0x2ac>)
 800698c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006990:	6013      	str	r3, [r2, #0]
 8006992:	e00b      	b.n	80069ac <HAL_RCC_OscConfig+0xb0>
 8006994:	4b84      	ldr	r3, [pc, #528]	; (8006ba8 <HAL_RCC_OscConfig+0x2ac>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a83      	ldr	r2, [pc, #524]	; (8006ba8 <HAL_RCC_OscConfig+0x2ac>)
 800699a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800699e:	6013      	str	r3, [r2, #0]
 80069a0:	4b81      	ldr	r3, [pc, #516]	; (8006ba8 <HAL_RCC_OscConfig+0x2ac>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a80      	ldr	r2, [pc, #512]	; (8006ba8 <HAL_RCC_OscConfig+0x2ac>)
 80069a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d013      	beq.n	80069dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069b4:	f7fb fc4a 	bl	800224c <HAL_GetTick>
 80069b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069ba:	e008      	b.n	80069ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069bc:	f7fb fc46 	bl	800224c <HAL_GetTick>
 80069c0:	4602      	mov	r2, r0
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	2b64      	cmp	r3, #100	; 0x64
 80069c8:	d901      	bls.n	80069ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80069ca:	2303      	movs	r3, #3
 80069cc:	e204      	b.n	8006dd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069ce:	4b76      	ldr	r3, [pc, #472]	; (8006ba8 <HAL_RCC_OscConfig+0x2ac>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d0f0      	beq.n	80069bc <HAL_RCC_OscConfig+0xc0>
 80069da:	e014      	b.n	8006a06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069dc:	f7fb fc36 	bl	800224c <HAL_GetTick>
 80069e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069e2:	e008      	b.n	80069f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069e4:	f7fb fc32 	bl	800224c <HAL_GetTick>
 80069e8:	4602      	mov	r2, r0
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	2b64      	cmp	r3, #100	; 0x64
 80069f0:	d901      	bls.n	80069f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	e1f0      	b.n	8006dd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069f6:	4b6c      	ldr	r3, [pc, #432]	; (8006ba8 <HAL_RCC_OscConfig+0x2ac>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1f0      	bne.n	80069e4 <HAL_RCC_OscConfig+0xe8>
 8006a02:	e000      	b.n	8006a06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 0302 	and.w	r3, r3, #2
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d063      	beq.n	8006ada <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006a12:	4b65      	ldr	r3, [pc, #404]	; (8006ba8 <HAL_RCC_OscConfig+0x2ac>)
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	f003 030c 	and.w	r3, r3, #12
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d00b      	beq.n	8006a36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a1e:	4b62      	ldr	r3, [pc, #392]	; (8006ba8 <HAL_RCC_OscConfig+0x2ac>)
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006a26:	2b08      	cmp	r3, #8
 8006a28:	d11c      	bne.n	8006a64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a2a:	4b5f      	ldr	r3, [pc, #380]	; (8006ba8 <HAL_RCC_OscConfig+0x2ac>)
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d116      	bne.n	8006a64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a36:	4b5c      	ldr	r3, [pc, #368]	; (8006ba8 <HAL_RCC_OscConfig+0x2ac>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 0302 	and.w	r3, r3, #2
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d005      	beq.n	8006a4e <HAL_RCC_OscConfig+0x152>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d001      	beq.n	8006a4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e1c4      	b.n	8006dd8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a4e:	4b56      	ldr	r3, [pc, #344]	; (8006ba8 <HAL_RCC_OscConfig+0x2ac>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	00db      	lsls	r3, r3, #3
 8006a5c:	4952      	ldr	r1, [pc, #328]	; (8006ba8 <HAL_RCC_OscConfig+0x2ac>)
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a62:	e03a      	b.n	8006ada <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d020      	beq.n	8006aae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a6c:	4b4f      	ldr	r3, [pc, #316]	; (8006bac <HAL_RCC_OscConfig+0x2b0>)
 8006a6e:	2201      	movs	r2, #1
 8006a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a72:	f7fb fbeb 	bl	800224c <HAL_GetTick>
 8006a76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a78:	e008      	b.n	8006a8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a7a:	f7fb fbe7 	bl	800224c <HAL_GetTick>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	1ad3      	subs	r3, r2, r3
 8006a84:	2b02      	cmp	r3, #2
 8006a86:	d901      	bls.n	8006a8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006a88:	2303      	movs	r3, #3
 8006a8a:	e1a5      	b.n	8006dd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a8c:	4b46      	ldr	r3, [pc, #280]	; (8006ba8 <HAL_RCC_OscConfig+0x2ac>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f003 0302 	and.w	r3, r3, #2
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d0f0      	beq.n	8006a7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a98:	4b43      	ldr	r3, [pc, #268]	; (8006ba8 <HAL_RCC_OscConfig+0x2ac>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	691b      	ldr	r3, [r3, #16]
 8006aa4:	00db      	lsls	r3, r3, #3
 8006aa6:	4940      	ldr	r1, [pc, #256]	; (8006ba8 <HAL_RCC_OscConfig+0x2ac>)
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	600b      	str	r3, [r1, #0]
 8006aac:	e015      	b.n	8006ada <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006aae:	4b3f      	ldr	r3, [pc, #252]	; (8006bac <HAL_RCC_OscConfig+0x2b0>)
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ab4:	f7fb fbca 	bl	800224c <HAL_GetTick>
 8006ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006aba:	e008      	b.n	8006ace <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006abc:	f7fb fbc6 	bl	800224c <HAL_GetTick>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	1ad3      	subs	r3, r2, r3
 8006ac6:	2b02      	cmp	r3, #2
 8006ac8:	d901      	bls.n	8006ace <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006aca:	2303      	movs	r3, #3
 8006acc:	e184      	b.n	8006dd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ace:	4b36      	ldr	r3, [pc, #216]	; (8006ba8 <HAL_RCC_OscConfig+0x2ac>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 0302 	and.w	r3, r3, #2
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d1f0      	bne.n	8006abc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f003 0308 	and.w	r3, r3, #8
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d030      	beq.n	8006b48 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	695b      	ldr	r3, [r3, #20]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d016      	beq.n	8006b1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006aee:	4b30      	ldr	r3, [pc, #192]	; (8006bb0 <HAL_RCC_OscConfig+0x2b4>)
 8006af0:	2201      	movs	r2, #1
 8006af2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006af4:	f7fb fbaa 	bl	800224c <HAL_GetTick>
 8006af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006afa:	e008      	b.n	8006b0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006afc:	f7fb fba6 	bl	800224c <HAL_GetTick>
 8006b00:	4602      	mov	r2, r0
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	1ad3      	subs	r3, r2, r3
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	d901      	bls.n	8006b0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	e164      	b.n	8006dd8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b0e:	4b26      	ldr	r3, [pc, #152]	; (8006ba8 <HAL_RCC_OscConfig+0x2ac>)
 8006b10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b12:	f003 0302 	and.w	r3, r3, #2
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d0f0      	beq.n	8006afc <HAL_RCC_OscConfig+0x200>
 8006b1a:	e015      	b.n	8006b48 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b1c:	4b24      	ldr	r3, [pc, #144]	; (8006bb0 <HAL_RCC_OscConfig+0x2b4>)
 8006b1e:	2200      	movs	r2, #0
 8006b20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b22:	f7fb fb93 	bl	800224c <HAL_GetTick>
 8006b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b28:	e008      	b.n	8006b3c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b2a:	f7fb fb8f 	bl	800224c <HAL_GetTick>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	1ad3      	subs	r3, r2, r3
 8006b34:	2b02      	cmp	r3, #2
 8006b36:	d901      	bls.n	8006b3c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006b38:	2303      	movs	r3, #3
 8006b3a:	e14d      	b.n	8006dd8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b3c:	4b1a      	ldr	r3, [pc, #104]	; (8006ba8 <HAL_RCC_OscConfig+0x2ac>)
 8006b3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b40:	f003 0302 	and.w	r3, r3, #2
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d1f0      	bne.n	8006b2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f003 0304 	and.w	r3, r3, #4
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	f000 80a0 	beq.w	8006c96 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b56:	2300      	movs	r3, #0
 8006b58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b5a:	4b13      	ldr	r3, [pc, #76]	; (8006ba8 <HAL_RCC_OscConfig+0x2ac>)
 8006b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d10f      	bne.n	8006b86 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b66:	2300      	movs	r3, #0
 8006b68:	60bb      	str	r3, [r7, #8]
 8006b6a:	4b0f      	ldr	r3, [pc, #60]	; (8006ba8 <HAL_RCC_OscConfig+0x2ac>)
 8006b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6e:	4a0e      	ldr	r2, [pc, #56]	; (8006ba8 <HAL_RCC_OscConfig+0x2ac>)
 8006b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b74:	6413      	str	r3, [r2, #64]	; 0x40
 8006b76:	4b0c      	ldr	r3, [pc, #48]	; (8006ba8 <HAL_RCC_OscConfig+0x2ac>)
 8006b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b7e:	60bb      	str	r3, [r7, #8]
 8006b80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b82:	2301      	movs	r3, #1
 8006b84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b86:	4b0b      	ldr	r3, [pc, #44]	; (8006bb4 <HAL_RCC_OscConfig+0x2b8>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d121      	bne.n	8006bd6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b92:	4b08      	ldr	r3, [pc, #32]	; (8006bb4 <HAL_RCC_OscConfig+0x2b8>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a07      	ldr	r2, [pc, #28]	; (8006bb4 <HAL_RCC_OscConfig+0x2b8>)
 8006b98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b9e:	f7fb fb55 	bl	800224c <HAL_GetTick>
 8006ba2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ba4:	e011      	b.n	8006bca <HAL_RCC_OscConfig+0x2ce>
 8006ba6:	bf00      	nop
 8006ba8:	40023800 	.word	0x40023800
 8006bac:	42470000 	.word	0x42470000
 8006bb0:	42470e80 	.word	0x42470e80
 8006bb4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bb8:	f7fb fb48 	bl	800224c <HAL_GetTick>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	d901      	bls.n	8006bca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	e106      	b.n	8006dd8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bca:	4b85      	ldr	r3, [pc, #532]	; (8006de0 <HAL_RCC_OscConfig+0x4e4>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d0f0      	beq.n	8006bb8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d106      	bne.n	8006bec <HAL_RCC_OscConfig+0x2f0>
 8006bde:	4b81      	ldr	r3, [pc, #516]	; (8006de4 <HAL_RCC_OscConfig+0x4e8>)
 8006be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006be2:	4a80      	ldr	r2, [pc, #512]	; (8006de4 <HAL_RCC_OscConfig+0x4e8>)
 8006be4:	f043 0301 	orr.w	r3, r3, #1
 8006be8:	6713      	str	r3, [r2, #112]	; 0x70
 8006bea:	e01c      	b.n	8006c26 <HAL_RCC_OscConfig+0x32a>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	2b05      	cmp	r3, #5
 8006bf2:	d10c      	bne.n	8006c0e <HAL_RCC_OscConfig+0x312>
 8006bf4:	4b7b      	ldr	r3, [pc, #492]	; (8006de4 <HAL_RCC_OscConfig+0x4e8>)
 8006bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bf8:	4a7a      	ldr	r2, [pc, #488]	; (8006de4 <HAL_RCC_OscConfig+0x4e8>)
 8006bfa:	f043 0304 	orr.w	r3, r3, #4
 8006bfe:	6713      	str	r3, [r2, #112]	; 0x70
 8006c00:	4b78      	ldr	r3, [pc, #480]	; (8006de4 <HAL_RCC_OscConfig+0x4e8>)
 8006c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c04:	4a77      	ldr	r2, [pc, #476]	; (8006de4 <HAL_RCC_OscConfig+0x4e8>)
 8006c06:	f043 0301 	orr.w	r3, r3, #1
 8006c0a:	6713      	str	r3, [r2, #112]	; 0x70
 8006c0c:	e00b      	b.n	8006c26 <HAL_RCC_OscConfig+0x32a>
 8006c0e:	4b75      	ldr	r3, [pc, #468]	; (8006de4 <HAL_RCC_OscConfig+0x4e8>)
 8006c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c12:	4a74      	ldr	r2, [pc, #464]	; (8006de4 <HAL_RCC_OscConfig+0x4e8>)
 8006c14:	f023 0301 	bic.w	r3, r3, #1
 8006c18:	6713      	str	r3, [r2, #112]	; 0x70
 8006c1a:	4b72      	ldr	r3, [pc, #456]	; (8006de4 <HAL_RCC_OscConfig+0x4e8>)
 8006c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c1e:	4a71      	ldr	r2, [pc, #452]	; (8006de4 <HAL_RCC_OscConfig+0x4e8>)
 8006c20:	f023 0304 	bic.w	r3, r3, #4
 8006c24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d015      	beq.n	8006c5a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c2e:	f7fb fb0d 	bl	800224c <HAL_GetTick>
 8006c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c34:	e00a      	b.n	8006c4c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c36:	f7fb fb09 	bl	800224c <HAL_GetTick>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d901      	bls.n	8006c4c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	e0c5      	b.n	8006dd8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c4c:	4b65      	ldr	r3, [pc, #404]	; (8006de4 <HAL_RCC_OscConfig+0x4e8>)
 8006c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c50:	f003 0302 	and.w	r3, r3, #2
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d0ee      	beq.n	8006c36 <HAL_RCC_OscConfig+0x33a>
 8006c58:	e014      	b.n	8006c84 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c5a:	f7fb faf7 	bl	800224c <HAL_GetTick>
 8006c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c60:	e00a      	b.n	8006c78 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c62:	f7fb faf3 	bl	800224c <HAL_GetTick>
 8006c66:	4602      	mov	r2, r0
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	1ad3      	subs	r3, r2, r3
 8006c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d901      	bls.n	8006c78 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006c74:	2303      	movs	r3, #3
 8006c76:	e0af      	b.n	8006dd8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c78:	4b5a      	ldr	r3, [pc, #360]	; (8006de4 <HAL_RCC_OscConfig+0x4e8>)
 8006c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c7c:	f003 0302 	and.w	r3, r3, #2
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d1ee      	bne.n	8006c62 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c84:	7dfb      	ldrb	r3, [r7, #23]
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d105      	bne.n	8006c96 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c8a:	4b56      	ldr	r3, [pc, #344]	; (8006de4 <HAL_RCC_OscConfig+0x4e8>)
 8006c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8e:	4a55      	ldr	r2, [pc, #340]	; (8006de4 <HAL_RCC_OscConfig+0x4e8>)
 8006c90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c94:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	699b      	ldr	r3, [r3, #24]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	f000 809b 	beq.w	8006dd6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006ca0:	4b50      	ldr	r3, [pc, #320]	; (8006de4 <HAL_RCC_OscConfig+0x4e8>)
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	f003 030c 	and.w	r3, r3, #12
 8006ca8:	2b08      	cmp	r3, #8
 8006caa:	d05c      	beq.n	8006d66 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	699b      	ldr	r3, [r3, #24]
 8006cb0:	2b02      	cmp	r3, #2
 8006cb2:	d141      	bne.n	8006d38 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cb4:	4b4c      	ldr	r3, [pc, #304]	; (8006de8 <HAL_RCC_OscConfig+0x4ec>)
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cba:	f7fb fac7 	bl	800224c <HAL_GetTick>
 8006cbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cc0:	e008      	b.n	8006cd4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cc2:	f7fb fac3 	bl	800224c <HAL_GetTick>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	1ad3      	subs	r3, r2, r3
 8006ccc:	2b02      	cmp	r3, #2
 8006cce:	d901      	bls.n	8006cd4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006cd0:	2303      	movs	r3, #3
 8006cd2:	e081      	b.n	8006dd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cd4:	4b43      	ldr	r3, [pc, #268]	; (8006de4 <HAL_RCC_OscConfig+0x4e8>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d1f0      	bne.n	8006cc2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	69da      	ldr	r2, [r3, #28]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6a1b      	ldr	r3, [r3, #32]
 8006ce8:	431a      	orrs	r2, r3
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cee:	019b      	lsls	r3, r3, #6
 8006cf0:	431a      	orrs	r2, r3
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf6:	085b      	lsrs	r3, r3, #1
 8006cf8:	3b01      	subs	r3, #1
 8006cfa:	041b      	lsls	r3, r3, #16
 8006cfc:	431a      	orrs	r2, r3
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d02:	061b      	lsls	r3, r3, #24
 8006d04:	4937      	ldr	r1, [pc, #220]	; (8006de4 <HAL_RCC_OscConfig+0x4e8>)
 8006d06:	4313      	orrs	r3, r2
 8006d08:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d0a:	4b37      	ldr	r3, [pc, #220]	; (8006de8 <HAL_RCC_OscConfig+0x4ec>)
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d10:	f7fb fa9c 	bl	800224c <HAL_GetTick>
 8006d14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d16:	e008      	b.n	8006d2a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d18:	f7fb fa98 	bl	800224c <HAL_GetTick>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	1ad3      	subs	r3, r2, r3
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	d901      	bls.n	8006d2a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006d26:	2303      	movs	r3, #3
 8006d28:	e056      	b.n	8006dd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d2a:	4b2e      	ldr	r3, [pc, #184]	; (8006de4 <HAL_RCC_OscConfig+0x4e8>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d0f0      	beq.n	8006d18 <HAL_RCC_OscConfig+0x41c>
 8006d36:	e04e      	b.n	8006dd6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d38:	4b2b      	ldr	r3, [pc, #172]	; (8006de8 <HAL_RCC_OscConfig+0x4ec>)
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d3e:	f7fb fa85 	bl	800224c <HAL_GetTick>
 8006d42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d44:	e008      	b.n	8006d58 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d46:	f7fb fa81 	bl	800224c <HAL_GetTick>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	1ad3      	subs	r3, r2, r3
 8006d50:	2b02      	cmp	r3, #2
 8006d52:	d901      	bls.n	8006d58 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006d54:	2303      	movs	r3, #3
 8006d56:	e03f      	b.n	8006dd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d58:	4b22      	ldr	r3, [pc, #136]	; (8006de4 <HAL_RCC_OscConfig+0x4e8>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d1f0      	bne.n	8006d46 <HAL_RCC_OscConfig+0x44a>
 8006d64:	e037      	b.n	8006dd6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	699b      	ldr	r3, [r3, #24]
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d101      	bne.n	8006d72 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e032      	b.n	8006dd8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006d72:	4b1c      	ldr	r3, [pc, #112]	; (8006de4 <HAL_RCC_OscConfig+0x4e8>)
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	699b      	ldr	r3, [r3, #24]
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d028      	beq.n	8006dd2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d121      	bne.n	8006dd2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d11a      	bne.n	8006dd2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d9c:	68fa      	ldr	r2, [r7, #12]
 8006d9e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006da2:	4013      	ands	r3, r2
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006da8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d111      	bne.n	8006dd2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db8:	085b      	lsrs	r3, r3, #1
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d107      	bne.n	8006dd2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dcc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d001      	beq.n	8006dd6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e000      	b.n	8006dd8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006dd6:	2300      	movs	r3, #0
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3718      	adds	r7, #24
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}
 8006de0:	40007000 	.word	0x40007000
 8006de4:	40023800 	.word	0x40023800
 8006de8:	42470060 	.word	0x42470060

08006dec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d101      	bne.n	8006e00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e0cc      	b.n	8006f9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006e00:	4b68      	ldr	r3, [pc, #416]	; (8006fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 0307 	and.w	r3, r3, #7
 8006e08:	683a      	ldr	r2, [r7, #0]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d90c      	bls.n	8006e28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e0e:	4b65      	ldr	r3, [pc, #404]	; (8006fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8006e10:	683a      	ldr	r2, [r7, #0]
 8006e12:	b2d2      	uxtb	r2, r2
 8006e14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e16:	4b63      	ldr	r3, [pc, #396]	; (8006fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f003 0307 	and.w	r3, r3, #7
 8006e1e:	683a      	ldr	r2, [r7, #0]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d001      	beq.n	8006e28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	e0b8      	b.n	8006f9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f003 0302 	and.w	r3, r3, #2
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d020      	beq.n	8006e76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 0304 	and.w	r3, r3, #4
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d005      	beq.n	8006e4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e40:	4b59      	ldr	r3, [pc, #356]	; (8006fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	4a58      	ldr	r2, [pc, #352]	; (8006fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8006e46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006e4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f003 0308 	and.w	r3, r3, #8
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d005      	beq.n	8006e64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006e58:	4b53      	ldr	r3, [pc, #332]	; (8006fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	4a52      	ldr	r2, [pc, #328]	; (8006fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8006e5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006e62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e64:	4b50      	ldr	r3, [pc, #320]	; (8006fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	494d      	ldr	r1, [pc, #308]	; (8006fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8006e72:	4313      	orrs	r3, r2
 8006e74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f003 0301 	and.w	r3, r3, #1
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d044      	beq.n	8006f0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d107      	bne.n	8006e9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e8a:	4b47      	ldr	r3, [pc, #284]	; (8006fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d119      	bne.n	8006eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	e07f      	b.n	8006f9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	2b02      	cmp	r3, #2
 8006ea0:	d003      	beq.n	8006eaa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ea6:	2b03      	cmp	r3, #3
 8006ea8:	d107      	bne.n	8006eba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006eaa:	4b3f      	ldr	r3, [pc, #252]	; (8006fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d109      	bne.n	8006eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e06f      	b.n	8006f9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006eba:	4b3b      	ldr	r3, [pc, #236]	; (8006fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f003 0302 	and.w	r3, r3, #2
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d101      	bne.n	8006eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e067      	b.n	8006f9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006eca:	4b37      	ldr	r3, [pc, #220]	; (8006fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	f023 0203 	bic.w	r2, r3, #3
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	4934      	ldr	r1, [pc, #208]	; (8006fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006edc:	f7fb f9b6 	bl	800224c <HAL_GetTick>
 8006ee0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ee2:	e00a      	b.n	8006efa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ee4:	f7fb f9b2 	bl	800224c <HAL_GetTick>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	1ad3      	subs	r3, r2, r3
 8006eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d901      	bls.n	8006efa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006ef6:	2303      	movs	r3, #3
 8006ef8:	e04f      	b.n	8006f9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006efa:	4b2b      	ldr	r3, [pc, #172]	; (8006fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	f003 020c 	and.w	r2, r3, #12
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d1eb      	bne.n	8006ee4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f0c:	4b25      	ldr	r3, [pc, #148]	; (8006fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f003 0307 	and.w	r3, r3, #7
 8006f14:	683a      	ldr	r2, [r7, #0]
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d20c      	bcs.n	8006f34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f1a:	4b22      	ldr	r3, [pc, #136]	; (8006fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8006f1c:	683a      	ldr	r2, [r7, #0]
 8006f1e:	b2d2      	uxtb	r2, r2
 8006f20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f22:	4b20      	ldr	r3, [pc, #128]	; (8006fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f003 0307 	and.w	r3, r3, #7
 8006f2a:	683a      	ldr	r2, [r7, #0]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d001      	beq.n	8006f34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006f30:	2301      	movs	r3, #1
 8006f32:	e032      	b.n	8006f9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 0304 	and.w	r3, r3, #4
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d008      	beq.n	8006f52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f40:	4b19      	ldr	r3, [pc, #100]	; (8006fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	4916      	ldr	r1, [pc, #88]	; (8006fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f003 0308 	and.w	r3, r3, #8
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d009      	beq.n	8006f72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f5e:	4b12      	ldr	r3, [pc, #72]	; (8006fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	00db      	lsls	r3, r3, #3
 8006f6c:	490e      	ldr	r1, [pc, #56]	; (8006fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006f72:	f000 f821 	bl	8006fb8 <HAL_RCC_GetSysClockFreq>
 8006f76:	4602      	mov	r2, r0
 8006f78:	4b0b      	ldr	r3, [pc, #44]	; (8006fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	091b      	lsrs	r3, r3, #4
 8006f7e:	f003 030f 	and.w	r3, r3, #15
 8006f82:	490a      	ldr	r1, [pc, #40]	; (8006fac <HAL_RCC_ClockConfig+0x1c0>)
 8006f84:	5ccb      	ldrb	r3, [r1, r3]
 8006f86:	fa22 f303 	lsr.w	r3, r2, r3
 8006f8a:	4a09      	ldr	r2, [pc, #36]	; (8006fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006f8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006f8e:	4b09      	ldr	r3, [pc, #36]	; (8006fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4618      	mov	r0, r3
 8006f94:	f7fb f802 	bl	8001f9c <HAL_InitTick>

  return HAL_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3710      	adds	r7, #16
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	bf00      	nop
 8006fa4:	40023c00 	.word	0x40023c00
 8006fa8:	40023800 	.word	0x40023800
 8006fac:	0800f404 	.word	0x0800f404
 8006fb0:	20000000 	.word	0x20000000
 8006fb4:	20000004 	.word	0x20000004

08006fb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006fb8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006fbc:	b084      	sub	sp, #16
 8006fbe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	607b      	str	r3, [r7, #4]
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	60fb      	str	r3, [r7, #12]
 8006fc8:	2300      	movs	r3, #0
 8006fca:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006fd0:	4b67      	ldr	r3, [pc, #412]	; (8007170 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	f003 030c 	and.w	r3, r3, #12
 8006fd8:	2b08      	cmp	r3, #8
 8006fda:	d00d      	beq.n	8006ff8 <HAL_RCC_GetSysClockFreq+0x40>
 8006fdc:	2b08      	cmp	r3, #8
 8006fde:	f200 80bd 	bhi.w	800715c <HAL_RCC_GetSysClockFreq+0x1a4>
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d002      	beq.n	8006fec <HAL_RCC_GetSysClockFreq+0x34>
 8006fe6:	2b04      	cmp	r3, #4
 8006fe8:	d003      	beq.n	8006ff2 <HAL_RCC_GetSysClockFreq+0x3a>
 8006fea:	e0b7      	b.n	800715c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006fec:	4b61      	ldr	r3, [pc, #388]	; (8007174 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006fee:	60bb      	str	r3, [r7, #8]
       break;
 8006ff0:	e0b7      	b.n	8007162 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006ff2:	4b61      	ldr	r3, [pc, #388]	; (8007178 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006ff4:	60bb      	str	r3, [r7, #8]
      break;
 8006ff6:	e0b4      	b.n	8007162 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ff8:	4b5d      	ldr	r3, [pc, #372]	; (8007170 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007000:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007002:	4b5b      	ldr	r3, [pc, #364]	; (8007170 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800700a:	2b00      	cmp	r3, #0
 800700c:	d04d      	beq.n	80070aa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800700e:	4b58      	ldr	r3, [pc, #352]	; (8007170 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	099b      	lsrs	r3, r3, #6
 8007014:	461a      	mov	r2, r3
 8007016:	f04f 0300 	mov.w	r3, #0
 800701a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800701e:	f04f 0100 	mov.w	r1, #0
 8007022:	ea02 0800 	and.w	r8, r2, r0
 8007026:	ea03 0901 	and.w	r9, r3, r1
 800702a:	4640      	mov	r0, r8
 800702c:	4649      	mov	r1, r9
 800702e:	f04f 0200 	mov.w	r2, #0
 8007032:	f04f 0300 	mov.w	r3, #0
 8007036:	014b      	lsls	r3, r1, #5
 8007038:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800703c:	0142      	lsls	r2, r0, #5
 800703e:	4610      	mov	r0, r2
 8007040:	4619      	mov	r1, r3
 8007042:	ebb0 0008 	subs.w	r0, r0, r8
 8007046:	eb61 0109 	sbc.w	r1, r1, r9
 800704a:	f04f 0200 	mov.w	r2, #0
 800704e:	f04f 0300 	mov.w	r3, #0
 8007052:	018b      	lsls	r3, r1, #6
 8007054:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007058:	0182      	lsls	r2, r0, #6
 800705a:	1a12      	subs	r2, r2, r0
 800705c:	eb63 0301 	sbc.w	r3, r3, r1
 8007060:	f04f 0000 	mov.w	r0, #0
 8007064:	f04f 0100 	mov.w	r1, #0
 8007068:	00d9      	lsls	r1, r3, #3
 800706a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800706e:	00d0      	lsls	r0, r2, #3
 8007070:	4602      	mov	r2, r0
 8007072:	460b      	mov	r3, r1
 8007074:	eb12 0208 	adds.w	r2, r2, r8
 8007078:	eb43 0309 	adc.w	r3, r3, r9
 800707c:	f04f 0000 	mov.w	r0, #0
 8007080:	f04f 0100 	mov.w	r1, #0
 8007084:	0259      	lsls	r1, r3, #9
 8007086:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800708a:	0250      	lsls	r0, r2, #9
 800708c:	4602      	mov	r2, r0
 800708e:	460b      	mov	r3, r1
 8007090:	4610      	mov	r0, r2
 8007092:	4619      	mov	r1, r3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	461a      	mov	r2, r3
 8007098:	f04f 0300 	mov.w	r3, #0
 800709c:	f7f9 fbf6 	bl	800088c <__aeabi_uldivmod>
 80070a0:	4602      	mov	r2, r0
 80070a2:	460b      	mov	r3, r1
 80070a4:	4613      	mov	r3, r2
 80070a6:	60fb      	str	r3, [r7, #12]
 80070a8:	e04a      	b.n	8007140 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070aa:	4b31      	ldr	r3, [pc, #196]	; (8007170 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	099b      	lsrs	r3, r3, #6
 80070b0:	461a      	mov	r2, r3
 80070b2:	f04f 0300 	mov.w	r3, #0
 80070b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80070ba:	f04f 0100 	mov.w	r1, #0
 80070be:	ea02 0400 	and.w	r4, r2, r0
 80070c2:	ea03 0501 	and.w	r5, r3, r1
 80070c6:	4620      	mov	r0, r4
 80070c8:	4629      	mov	r1, r5
 80070ca:	f04f 0200 	mov.w	r2, #0
 80070ce:	f04f 0300 	mov.w	r3, #0
 80070d2:	014b      	lsls	r3, r1, #5
 80070d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80070d8:	0142      	lsls	r2, r0, #5
 80070da:	4610      	mov	r0, r2
 80070dc:	4619      	mov	r1, r3
 80070de:	1b00      	subs	r0, r0, r4
 80070e0:	eb61 0105 	sbc.w	r1, r1, r5
 80070e4:	f04f 0200 	mov.w	r2, #0
 80070e8:	f04f 0300 	mov.w	r3, #0
 80070ec:	018b      	lsls	r3, r1, #6
 80070ee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80070f2:	0182      	lsls	r2, r0, #6
 80070f4:	1a12      	subs	r2, r2, r0
 80070f6:	eb63 0301 	sbc.w	r3, r3, r1
 80070fa:	f04f 0000 	mov.w	r0, #0
 80070fe:	f04f 0100 	mov.w	r1, #0
 8007102:	00d9      	lsls	r1, r3, #3
 8007104:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007108:	00d0      	lsls	r0, r2, #3
 800710a:	4602      	mov	r2, r0
 800710c:	460b      	mov	r3, r1
 800710e:	1912      	adds	r2, r2, r4
 8007110:	eb45 0303 	adc.w	r3, r5, r3
 8007114:	f04f 0000 	mov.w	r0, #0
 8007118:	f04f 0100 	mov.w	r1, #0
 800711c:	0299      	lsls	r1, r3, #10
 800711e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007122:	0290      	lsls	r0, r2, #10
 8007124:	4602      	mov	r2, r0
 8007126:	460b      	mov	r3, r1
 8007128:	4610      	mov	r0, r2
 800712a:	4619      	mov	r1, r3
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	461a      	mov	r2, r3
 8007130:	f04f 0300 	mov.w	r3, #0
 8007134:	f7f9 fbaa 	bl	800088c <__aeabi_uldivmod>
 8007138:	4602      	mov	r2, r0
 800713a:	460b      	mov	r3, r1
 800713c:	4613      	mov	r3, r2
 800713e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007140:	4b0b      	ldr	r3, [pc, #44]	; (8007170 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	0c1b      	lsrs	r3, r3, #16
 8007146:	f003 0303 	and.w	r3, r3, #3
 800714a:	3301      	adds	r3, #1
 800714c:	005b      	lsls	r3, r3, #1
 800714e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007150:	68fa      	ldr	r2, [r7, #12]
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	fbb2 f3f3 	udiv	r3, r2, r3
 8007158:	60bb      	str	r3, [r7, #8]
      break;
 800715a:	e002      	b.n	8007162 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800715c:	4b05      	ldr	r3, [pc, #20]	; (8007174 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800715e:	60bb      	str	r3, [r7, #8]
      break;
 8007160:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007162:	68bb      	ldr	r3, [r7, #8]
}
 8007164:	4618      	mov	r0, r3
 8007166:	3710      	adds	r7, #16
 8007168:	46bd      	mov	sp, r7
 800716a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800716e:	bf00      	nop
 8007170:	40023800 	.word	0x40023800
 8007174:	00f42400 	.word	0x00f42400
 8007178:	007a1200 	.word	0x007a1200

0800717c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800717c:	b480      	push	{r7}
 800717e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007180:	4b03      	ldr	r3, [pc, #12]	; (8007190 <HAL_RCC_GetHCLKFreq+0x14>)
 8007182:	681b      	ldr	r3, [r3, #0]
}
 8007184:	4618      	mov	r0, r3
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr
 800718e:	bf00      	nop
 8007190:	20000000 	.word	0x20000000

08007194 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007198:	f7ff fff0 	bl	800717c <HAL_RCC_GetHCLKFreq>
 800719c:	4602      	mov	r2, r0
 800719e:	4b05      	ldr	r3, [pc, #20]	; (80071b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	0a9b      	lsrs	r3, r3, #10
 80071a4:	f003 0307 	and.w	r3, r3, #7
 80071a8:	4903      	ldr	r1, [pc, #12]	; (80071b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80071aa:	5ccb      	ldrb	r3, [r1, r3]
 80071ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	40023800 	.word	0x40023800
 80071b8:	0800f414 	.word	0x0800f414

080071bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80071c0:	f7ff ffdc 	bl	800717c <HAL_RCC_GetHCLKFreq>
 80071c4:	4602      	mov	r2, r0
 80071c6:	4b05      	ldr	r3, [pc, #20]	; (80071dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	0b5b      	lsrs	r3, r3, #13
 80071cc:	f003 0307 	and.w	r3, r3, #7
 80071d0:	4903      	ldr	r1, [pc, #12]	; (80071e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80071d2:	5ccb      	ldrb	r3, [r1, r3]
 80071d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071d8:	4618      	mov	r0, r3
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	40023800 	.word	0x40023800
 80071e0:	0800f414 	.word	0x0800f414

080071e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	220f      	movs	r2, #15
 80071f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80071f4:	4b12      	ldr	r3, [pc, #72]	; (8007240 <HAL_RCC_GetClockConfig+0x5c>)
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	f003 0203 	and.w	r2, r3, #3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007200:	4b0f      	ldr	r3, [pc, #60]	; (8007240 <HAL_RCC_GetClockConfig+0x5c>)
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800720c:	4b0c      	ldr	r3, [pc, #48]	; (8007240 <HAL_RCC_GetClockConfig+0x5c>)
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007218:	4b09      	ldr	r3, [pc, #36]	; (8007240 <HAL_RCC_GetClockConfig+0x5c>)
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	08db      	lsrs	r3, r3, #3
 800721e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007226:	4b07      	ldr	r3, [pc, #28]	; (8007244 <HAL_RCC_GetClockConfig+0x60>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f003 0207 	and.w	r2, r3, #7
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	601a      	str	r2, [r3, #0]
}
 8007232:	bf00      	nop
 8007234:	370c      	adds	r7, #12
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop
 8007240:	40023800 	.word	0x40023800
 8007244:	40023c00 	.word	0x40023c00

08007248 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b086      	sub	sp, #24
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007250:	2300      	movs	r3, #0
 8007252:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007254:	2300      	movs	r3, #0
 8007256:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 0301 	and.w	r3, r3, #1
 8007260:	2b00      	cmp	r3, #0
 8007262:	d105      	bne.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800726c:	2b00      	cmp	r3, #0
 800726e:	d035      	beq.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007270:	4b62      	ldr	r3, [pc, #392]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007272:	2200      	movs	r2, #0
 8007274:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007276:	f7fa ffe9 	bl	800224c <HAL_GetTick>
 800727a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800727c:	e008      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800727e:	f7fa ffe5 	bl	800224c <HAL_GetTick>
 8007282:	4602      	mov	r2, r0
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	1ad3      	subs	r3, r2, r3
 8007288:	2b02      	cmp	r3, #2
 800728a:	d901      	bls.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800728c:	2303      	movs	r3, #3
 800728e:	e0b0      	b.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007290:	4b5b      	ldr	r3, [pc, #364]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007298:	2b00      	cmp	r3, #0
 800729a:	d1f0      	bne.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	019a      	lsls	r2, r3, #6
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	071b      	lsls	r3, r3, #28
 80072a8:	4955      	ldr	r1, [pc, #340]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072aa:	4313      	orrs	r3, r2
 80072ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80072b0:	4b52      	ldr	r3, [pc, #328]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80072b2:	2201      	movs	r2, #1
 80072b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80072b6:	f7fa ffc9 	bl	800224c <HAL_GetTick>
 80072ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80072bc:	e008      	b.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80072be:	f7fa ffc5 	bl	800224c <HAL_GetTick>
 80072c2:	4602      	mov	r2, r0
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	1ad3      	subs	r3, r2, r3
 80072c8:	2b02      	cmp	r3, #2
 80072ca:	d901      	bls.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80072cc:	2303      	movs	r3, #3
 80072ce:	e090      	b.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80072d0:	4b4b      	ldr	r3, [pc, #300]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d0f0      	beq.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f003 0302 	and.w	r3, r3, #2
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	f000 8083 	beq.w	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80072ea:	2300      	movs	r3, #0
 80072ec:	60fb      	str	r3, [r7, #12]
 80072ee:	4b44      	ldr	r3, [pc, #272]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f2:	4a43      	ldr	r2, [pc, #268]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072f8:	6413      	str	r3, [r2, #64]	; 0x40
 80072fa:	4b41      	ldr	r3, [pc, #260]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007302:	60fb      	str	r3, [r7, #12]
 8007304:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007306:	4b3f      	ldr	r3, [pc, #252]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a3e      	ldr	r2, [pc, #248]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800730c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007310:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007312:	f7fa ff9b 	bl	800224c <HAL_GetTick>
 8007316:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007318:	e008      	b.n	800732c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800731a:	f7fa ff97 	bl	800224c <HAL_GetTick>
 800731e:	4602      	mov	r2, r0
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	1ad3      	subs	r3, r2, r3
 8007324:	2b02      	cmp	r3, #2
 8007326:	d901      	bls.n	800732c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007328:	2303      	movs	r3, #3
 800732a:	e062      	b.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800732c:	4b35      	ldr	r3, [pc, #212]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007334:	2b00      	cmp	r3, #0
 8007336:	d0f0      	beq.n	800731a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007338:	4b31      	ldr	r3, [pc, #196]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800733a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800733c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007340:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d02f      	beq.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007350:	693a      	ldr	r2, [r7, #16]
 8007352:	429a      	cmp	r2, r3
 8007354:	d028      	beq.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007356:	4b2a      	ldr	r3, [pc, #168]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800735a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800735e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007360:	4b29      	ldr	r3, [pc, #164]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007362:	2201      	movs	r2, #1
 8007364:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007366:	4b28      	ldr	r3, [pc, #160]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007368:	2200      	movs	r2, #0
 800736a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800736c:	4a24      	ldr	r2, [pc, #144]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007372:	4b23      	ldr	r3, [pc, #140]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007376:	f003 0301 	and.w	r3, r3, #1
 800737a:	2b01      	cmp	r3, #1
 800737c:	d114      	bne.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800737e:	f7fa ff65 	bl	800224c <HAL_GetTick>
 8007382:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007384:	e00a      	b.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007386:	f7fa ff61 	bl	800224c <HAL_GetTick>
 800738a:	4602      	mov	r2, r0
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	1ad3      	subs	r3, r2, r3
 8007390:	f241 3288 	movw	r2, #5000	; 0x1388
 8007394:	4293      	cmp	r3, r2
 8007396:	d901      	bls.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007398:	2303      	movs	r3, #3
 800739a:	e02a      	b.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800739c:	4b18      	ldr	r3, [pc, #96]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800739e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073a0:	f003 0302 	and.w	r3, r3, #2
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d0ee      	beq.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	68db      	ldr	r3, [r3, #12]
 80073ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073b4:	d10d      	bne.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80073b6:	4b12      	ldr	r3, [pc, #72]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80073c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073ca:	490d      	ldr	r1, [pc, #52]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073cc:	4313      	orrs	r3, r2
 80073ce:	608b      	str	r3, [r1, #8]
 80073d0:	e005      	b.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x196>
 80073d2:	4b0b      	ldr	r3, [pc, #44]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	4a0a      	ldr	r2, [pc, #40]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073d8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80073dc:	6093      	str	r3, [r2, #8]
 80073de:	4b08      	ldr	r3, [pc, #32]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073ea:	4905      	ldr	r1, [pc, #20]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073ec:	4313      	orrs	r3, r2
 80073ee:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3718      	adds	r7, #24
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
 80073fa:	bf00      	nop
 80073fc:	42470068 	.word	0x42470068
 8007400:	40023800 	.word	0x40023800
 8007404:	40007000 	.word	0x40007000
 8007408:	42470e40 	.word	0x42470e40

0800740c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800740c:	b480      	push	{r7}
 800740e:	b087      	sub	sp, #28
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007414:	2300      	movs	r3, #0
 8007416:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007418:	2300      	movs	r3, #0
 800741a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800741c:	2300      	movs	r3, #0
 800741e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007420:	2300      	movs	r3, #0
 8007422:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2b01      	cmp	r3, #1
 8007428:	d13e      	bne.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800742a:	4b23      	ldr	r3, [pc, #140]	; (80074b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007432:	60fb      	str	r3, [r7, #12]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d005      	beq.n	8007446 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2b01      	cmp	r3, #1
 800743e:	d12f      	bne.n	80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007440:	4b1e      	ldr	r3, [pc, #120]	; (80074bc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007442:	617b      	str	r3, [r7, #20]
          break;
 8007444:	e02f      	b.n	80074a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007446:	4b1c      	ldr	r3, [pc, #112]	; (80074b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800744e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007452:	d108      	bne.n	8007466 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007454:	4b18      	ldr	r3, [pc, #96]	; (80074b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800745c:	4a18      	ldr	r2, [pc, #96]	; (80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800745e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007462:	613b      	str	r3, [r7, #16]
 8007464:	e007      	b.n	8007476 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007466:	4b14      	ldr	r3, [pc, #80]	; (80074b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800746e:	4a15      	ldr	r2, [pc, #84]	; (80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007470:	fbb2 f3f3 	udiv	r3, r2, r3
 8007474:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007476:	4b10      	ldr	r3, [pc, #64]	; (80074b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007478:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800747c:	099b      	lsrs	r3, r3, #6
 800747e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	fb02 f303 	mul.w	r3, r2, r3
 8007488:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800748a:	4b0b      	ldr	r3, [pc, #44]	; (80074b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800748c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007490:	0f1b      	lsrs	r3, r3, #28
 8007492:	f003 0307 	and.w	r3, r3, #7
 8007496:	68ba      	ldr	r2, [r7, #8]
 8007498:	fbb2 f3f3 	udiv	r3, r2, r3
 800749c:	617b      	str	r3, [r7, #20]
          break;
 800749e:	e002      	b.n	80074a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80074a0:	2300      	movs	r3, #0
 80074a2:	617b      	str	r3, [r7, #20]
          break;
 80074a4:	bf00      	nop
        }
      }
      break;
 80074a6:	bf00      	nop
    }
  }
  return frequency;
 80074a8:	697b      	ldr	r3, [r7, #20]
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	371c      	adds	r7, #28
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr
 80074b6:	bf00      	nop
 80074b8:	40023800 	.word	0x40023800
 80074bc:	00bb8000 	.word	0x00bb8000
 80074c0:	007a1200 	.word	0x007a1200
 80074c4:	00f42400 	.word	0x00f42400

080074c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d101      	bne.n	80074da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	e07b      	b.n	80075d2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d108      	bne.n	80074f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074ea:	d009      	beq.n	8007500 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	61da      	str	r2, [r3, #28]
 80074f2:	e005      	b.n	8007500 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800750c:	b2db      	uxtb	r3, r3
 800750e:	2b00      	cmp	r3, #0
 8007510:	d106      	bne.n	8007520 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f7fa fc66 	bl	8001dec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2202      	movs	r2, #2
 8007524:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007536:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007548:	431a      	orrs	r2, r3
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007552:	431a      	orrs	r2, r3
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	691b      	ldr	r3, [r3, #16]
 8007558:	f003 0302 	and.w	r3, r3, #2
 800755c:	431a      	orrs	r2, r3
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	695b      	ldr	r3, [r3, #20]
 8007562:	f003 0301 	and.w	r3, r3, #1
 8007566:	431a      	orrs	r2, r3
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	699b      	ldr	r3, [r3, #24]
 800756c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007570:	431a      	orrs	r2, r3
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	69db      	ldr	r3, [r3, #28]
 8007576:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800757a:	431a      	orrs	r2, r3
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6a1b      	ldr	r3, [r3, #32]
 8007580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007584:	ea42 0103 	orr.w	r1, r2, r3
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800758c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	430a      	orrs	r2, r1
 8007596:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	699b      	ldr	r3, [r3, #24]
 800759c:	0c1b      	lsrs	r3, r3, #16
 800759e:	f003 0104 	and.w	r1, r3, #4
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a6:	f003 0210 	and.w	r2, r3, #16
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	430a      	orrs	r2, r1
 80075b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	69da      	ldr	r2, [r3, #28]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80075c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2201      	movs	r2, #1
 80075cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80075d0:	2300      	movs	r3, #0
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3708      	adds	r7, #8
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b082      	sub	sp, #8
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d101      	bne.n	80075ec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80075e8:	2301      	movs	r3, #1
 80075ea:	e041      	b.n	8007670 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d106      	bne.n	8007606 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f7fa fc3b 	bl	8001e7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2202      	movs	r2, #2
 800760a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681a      	ldr	r2, [r3, #0]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	3304      	adds	r3, #4
 8007616:	4619      	mov	r1, r3
 8007618:	4610      	mov	r0, r2
 800761a:	f000 fa5d 	bl	8007ad8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2201      	movs	r2, #1
 8007622:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2201      	movs	r2, #1
 800762a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2201      	movs	r2, #1
 8007632:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2201      	movs	r2, #1
 800763a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2201      	movs	r2, #1
 8007642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2201      	movs	r2, #1
 800764a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2201      	movs	r2, #1
 8007652:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2201      	movs	r2, #1
 800765a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2201      	movs	r2, #1
 8007662:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2201      	movs	r2, #1
 800766a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800766e:	2300      	movs	r3, #0
}
 8007670:	4618      	mov	r0, r3
 8007672:	3708      	adds	r7, #8
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007678:	b480      	push	{r7}
 800767a:	b085      	sub	sp, #20
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007686:	b2db      	uxtb	r3, r3
 8007688:	2b01      	cmp	r3, #1
 800768a:	d001      	beq.n	8007690 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	e046      	b.n	800771e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2202      	movs	r2, #2
 8007694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a23      	ldr	r2, [pc, #140]	; (800772c <HAL_TIM_Base_Start+0xb4>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d022      	beq.n	80076e8 <HAL_TIM_Base_Start+0x70>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076aa:	d01d      	beq.n	80076e8 <HAL_TIM_Base_Start+0x70>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a1f      	ldr	r2, [pc, #124]	; (8007730 <HAL_TIM_Base_Start+0xb8>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d018      	beq.n	80076e8 <HAL_TIM_Base_Start+0x70>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a1e      	ldr	r2, [pc, #120]	; (8007734 <HAL_TIM_Base_Start+0xbc>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d013      	beq.n	80076e8 <HAL_TIM_Base_Start+0x70>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a1c      	ldr	r2, [pc, #112]	; (8007738 <HAL_TIM_Base_Start+0xc0>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d00e      	beq.n	80076e8 <HAL_TIM_Base_Start+0x70>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a1b      	ldr	r2, [pc, #108]	; (800773c <HAL_TIM_Base_Start+0xc4>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d009      	beq.n	80076e8 <HAL_TIM_Base_Start+0x70>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a19      	ldr	r2, [pc, #100]	; (8007740 <HAL_TIM_Base_Start+0xc8>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d004      	beq.n	80076e8 <HAL_TIM_Base_Start+0x70>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a18      	ldr	r2, [pc, #96]	; (8007744 <HAL_TIM_Base_Start+0xcc>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d111      	bne.n	800770c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	f003 0307 	and.w	r3, r3, #7
 80076f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2b06      	cmp	r3, #6
 80076f8:	d010      	beq.n	800771c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f042 0201 	orr.w	r2, r2, #1
 8007708:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800770a:	e007      	b.n	800771c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f042 0201 	orr.w	r2, r2, #1
 800771a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800771c:	2300      	movs	r3, #0
}
 800771e:	4618      	mov	r0, r3
 8007720:	3714      	adds	r7, #20
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	40010000 	.word	0x40010000
 8007730:	40000400 	.word	0x40000400
 8007734:	40000800 	.word	0x40000800
 8007738:	40000c00 	.word	0x40000c00
 800773c:	40010400 	.word	0x40010400
 8007740:	40014000 	.word	0x40014000
 8007744:	40001800 	.word	0x40001800

08007748 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	6a1a      	ldr	r2, [r3, #32]
 8007756:	f241 1311 	movw	r3, #4369	; 0x1111
 800775a:	4013      	ands	r3, r2
 800775c:	2b00      	cmp	r3, #0
 800775e:	d10f      	bne.n	8007780 <HAL_TIM_Base_Stop+0x38>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	6a1a      	ldr	r2, [r3, #32]
 8007766:	f240 4344 	movw	r3, #1092	; 0x444
 800776a:	4013      	ands	r3, r2
 800776c:	2b00      	cmp	r3, #0
 800776e:	d107      	bne.n	8007780 <HAL_TIM_Base_Stop+0x38>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f022 0201 	bic.w	r2, r2, #1
 800777e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007788:	2300      	movs	r3, #0
}
 800778a:	4618      	mov	r0, r3
 800778c:	370c      	adds	r7, #12
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr
	...

08007798 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007798:	b480      	push	{r7}
 800779a:	b085      	sub	sp, #20
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d001      	beq.n	80077b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	e04e      	b.n	800784e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2202      	movs	r2, #2
 80077b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	68da      	ldr	r2, [r3, #12]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f042 0201 	orr.w	r2, r2, #1
 80077c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a23      	ldr	r2, [pc, #140]	; (800785c <HAL_TIM_Base_Start_IT+0xc4>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d022      	beq.n	8007818 <HAL_TIM_Base_Start_IT+0x80>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077da:	d01d      	beq.n	8007818 <HAL_TIM_Base_Start_IT+0x80>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a1f      	ldr	r2, [pc, #124]	; (8007860 <HAL_TIM_Base_Start_IT+0xc8>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d018      	beq.n	8007818 <HAL_TIM_Base_Start_IT+0x80>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a1e      	ldr	r2, [pc, #120]	; (8007864 <HAL_TIM_Base_Start_IT+0xcc>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d013      	beq.n	8007818 <HAL_TIM_Base_Start_IT+0x80>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a1c      	ldr	r2, [pc, #112]	; (8007868 <HAL_TIM_Base_Start_IT+0xd0>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d00e      	beq.n	8007818 <HAL_TIM_Base_Start_IT+0x80>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a1b      	ldr	r2, [pc, #108]	; (800786c <HAL_TIM_Base_Start_IT+0xd4>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d009      	beq.n	8007818 <HAL_TIM_Base_Start_IT+0x80>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a19      	ldr	r2, [pc, #100]	; (8007870 <HAL_TIM_Base_Start_IT+0xd8>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d004      	beq.n	8007818 <HAL_TIM_Base_Start_IT+0x80>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a18      	ldr	r2, [pc, #96]	; (8007874 <HAL_TIM_Base_Start_IT+0xdc>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d111      	bne.n	800783c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	f003 0307 	and.w	r3, r3, #7
 8007822:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2b06      	cmp	r3, #6
 8007828:	d010      	beq.n	800784c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f042 0201 	orr.w	r2, r2, #1
 8007838:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800783a:	e007      	b.n	800784c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f042 0201 	orr.w	r2, r2, #1
 800784a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	3714      	adds	r7, #20
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr
 800785a:	bf00      	nop
 800785c:	40010000 	.word	0x40010000
 8007860:	40000400 	.word	0x40000400
 8007864:	40000800 	.word	0x40000800
 8007868:	40000c00 	.word	0x40000c00
 800786c:	40010400 	.word	0x40010400
 8007870:	40014000 	.word	0x40014000
 8007874:	40001800 	.word	0x40001800

08007878 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b082      	sub	sp, #8
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	691b      	ldr	r3, [r3, #16]
 8007886:	f003 0302 	and.w	r3, r3, #2
 800788a:	2b02      	cmp	r3, #2
 800788c:	d122      	bne.n	80078d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	68db      	ldr	r3, [r3, #12]
 8007894:	f003 0302 	and.w	r3, r3, #2
 8007898:	2b02      	cmp	r3, #2
 800789a:	d11b      	bne.n	80078d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f06f 0202 	mvn.w	r2, #2
 80078a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2201      	movs	r2, #1
 80078aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	699b      	ldr	r3, [r3, #24]
 80078b2:	f003 0303 	and.w	r3, r3, #3
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d003      	beq.n	80078c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 f8ee 	bl	8007a9c <HAL_TIM_IC_CaptureCallback>
 80078c0:	e005      	b.n	80078ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 f8e0 	bl	8007a88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 f8f1 	bl	8007ab0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2200      	movs	r2, #0
 80078d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	691b      	ldr	r3, [r3, #16]
 80078da:	f003 0304 	and.w	r3, r3, #4
 80078de:	2b04      	cmp	r3, #4
 80078e0:	d122      	bne.n	8007928 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	f003 0304 	and.w	r3, r3, #4
 80078ec:	2b04      	cmp	r3, #4
 80078ee:	d11b      	bne.n	8007928 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f06f 0204 	mvn.w	r2, #4
 80078f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2202      	movs	r2, #2
 80078fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	699b      	ldr	r3, [r3, #24]
 8007906:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800790a:	2b00      	cmp	r3, #0
 800790c:	d003      	beq.n	8007916 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 f8c4 	bl	8007a9c <HAL_TIM_IC_CaptureCallback>
 8007914:	e005      	b.n	8007922 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 f8b6 	bl	8007a88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 f8c7 	bl	8007ab0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2200      	movs	r2, #0
 8007926:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	691b      	ldr	r3, [r3, #16]
 800792e:	f003 0308 	and.w	r3, r3, #8
 8007932:	2b08      	cmp	r3, #8
 8007934:	d122      	bne.n	800797c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	f003 0308 	and.w	r3, r3, #8
 8007940:	2b08      	cmp	r3, #8
 8007942:	d11b      	bne.n	800797c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f06f 0208 	mvn.w	r2, #8
 800794c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2204      	movs	r2, #4
 8007952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	69db      	ldr	r3, [r3, #28]
 800795a:	f003 0303 	and.w	r3, r3, #3
 800795e:	2b00      	cmp	r3, #0
 8007960:	d003      	beq.n	800796a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 f89a 	bl	8007a9c <HAL_TIM_IC_CaptureCallback>
 8007968:	e005      	b.n	8007976 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 f88c 	bl	8007a88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 f89d 	bl	8007ab0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	691b      	ldr	r3, [r3, #16]
 8007982:	f003 0310 	and.w	r3, r3, #16
 8007986:	2b10      	cmp	r3, #16
 8007988:	d122      	bne.n	80079d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	f003 0310 	and.w	r3, r3, #16
 8007994:	2b10      	cmp	r3, #16
 8007996:	d11b      	bne.n	80079d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f06f 0210 	mvn.w	r2, #16
 80079a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2208      	movs	r2, #8
 80079a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	69db      	ldr	r3, [r3, #28]
 80079ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d003      	beq.n	80079be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f000 f870 	bl	8007a9c <HAL_TIM_IC_CaptureCallback>
 80079bc:	e005      	b.n	80079ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 f862 	bl	8007a88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 f873 	bl	8007ab0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2200      	movs	r2, #0
 80079ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	691b      	ldr	r3, [r3, #16]
 80079d6:	f003 0301 	and.w	r3, r3, #1
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d10e      	bne.n	80079fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	68db      	ldr	r3, [r3, #12]
 80079e4:	f003 0301 	and.w	r3, r3, #1
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d107      	bne.n	80079fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f06f 0201 	mvn.w	r2, #1
 80079f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f7f9 ff3e 	bl	8001878 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	691b      	ldr	r3, [r3, #16]
 8007a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a06:	2b80      	cmp	r3, #128	; 0x80
 8007a08:	d10e      	bne.n	8007a28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	68db      	ldr	r3, [r3, #12]
 8007a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a14:	2b80      	cmp	r3, #128	; 0x80
 8007a16:	d107      	bne.n	8007a28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007a20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 f902 	bl	8007c2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	691b      	ldr	r3, [r3, #16]
 8007a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a32:	2b40      	cmp	r3, #64	; 0x40
 8007a34:	d10e      	bne.n	8007a54 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	68db      	ldr	r3, [r3, #12]
 8007a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a40:	2b40      	cmp	r3, #64	; 0x40
 8007a42:	d107      	bne.n	8007a54 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007a4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 f838 	bl	8007ac4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	691b      	ldr	r3, [r3, #16]
 8007a5a:	f003 0320 	and.w	r3, r3, #32
 8007a5e:	2b20      	cmp	r3, #32
 8007a60:	d10e      	bne.n	8007a80 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	68db      	ldr	r3, [r3, #12]
 8007a68:	f003 0320 	and.w	r3, r3, #32
 8007a6c:	2b20      	cmp	r3, #32
 8007a6e:	d107      	bne.n	8007a80 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f06f 0220 	mvn.w	r2, #32
 8007a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 f8cc 	bl	8007c18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a80:	bf00      	nop
 8007a82:	3708      	adds	r7, #8
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a90:	bf00      	nop
 8007a92:	370c      	adds	r7, #12
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b083      	sub	sp, #12
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007aa4:	bf00      	nop
 8007aa6:	370c      	adds	r7, #12
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ab8:	bf00      	nop
 8007aba:	370c      	adds	r7, #12
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b083      	sub	sp, #12
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007acc:	bf00      	nop
 8007ace:	370c      	adds	r7, #12
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr

08007ad8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b085      	sub	sp, #20
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	4a40      	ldr	r2, [pc, #256]	; (8007bec <TIM_Base_SetConfig+0x114>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d013      	beq.n	8007b18 <TIM_Base_SetConfig+0x40>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007af6:	d00f      	beq.n	8007b18 <TIM_Base_SetConfig+0x40>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	4a3d      	ldr	r2, [pc, #244]	; (8007bf0 <TIM_Base_SetConfig+0x118>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d00b      	beq.n	8007b18 <TIM_Base_SetConfig+0x40>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	4a3c      	ldr	r2, [pc, #240]	; (8007bf4 <TIM_Base_SetConfig+0x11c>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d007      	beq.n	8007b18 <TIM_Base_SetConfig+0x40>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	4a3b      	ldr	r2, [pc, #236]	; (8007bf8 <TIM_Base_SetConfig+0x120>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d003      	beq.n	8007b18 <TIM_Base_SetConfig+0x40>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	4a3a      	ldr	r2, [pc, #232]	; (8007bfc <TIM_Base_SetConfig+0x124>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d108      	bne.n	8007b2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	68fa      	ldr	r2, [r7, #12]
 8007b26:	4313      	orrs	r3, r2
 8007b28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	4a2f      	ldr	r2, [pc, #188]	; (8007bec <TIM_Base_SetConfig+0x114>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d02b      	beq.n	8007b8a <TIM_Base_SetConfig+0xb2>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b38:	d027      	beq.n	8007b8a <TIM_Base_SetConfig+0xb2>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4a2c      	ldr	r2, [pc, #176]	; (8007bf0 <TIM_Base_SetConfig+0x118>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d023      	beq.n	8007b8a <TIM_Base_SetConfig+0xb2>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	4a2b      	ldr	r2, [pc, #172]	; (8007bf4 <TIM_Base_SetConfig+0x11c>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d01f      	beq.n	8007b8a <TIM_Base_SetConfig+0xb2>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	4a2a      	ldr	r2, [pc, #168]	; (8007bf8 <TIM_Base_SetConfig+0x120>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d01b      	beq.n	8007b8a <TIM_Base_SetConfig+0xb2>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	4a29      	ldr	r2, [pc, #164]	; (8007bfc <TIM_Base_SetConfig+0x124>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d017      	beq.n	8007b8a <TIM_Base_SetConfig+0xb2>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	4a28      	ldr	r2, [pc, #160]	; (8007c00 <TIM_Base_SetConfig+0x128>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d013      	beq.n	8007b8a <TIM_Base_SetConfig+0xb2>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	4a27      	ldr	r2, [pc, #156]	; (8007c04 <TIM_Base_SetConfig+0x12c>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d00f      	beq.n	8007b8a <TIM_Base_SetConfig+0xb2>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4a26      	ldr	r2, [pc, #152]	; (8007c08 <TIM_Base_SetConfig+0x130>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d00b      	beq.n	8007b8a <TIM_Base_SetConfig+0xb2>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	4a25      	ldr	r2, [pc, #148]	; (8007c0c <TIM_Base_SetConfig+0x134>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d007      	beq.n	8007b8a <TIM_Base_SetConfig+0xb2>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	4a24      	ldr	r2, [pc, #144]	; (8007c10 <TIM_Base_SetConfig+0x138>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d003      	beq.n	8007b8a <TIM_Base_SetConfig+0xb2>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	4a23      	ldr	r2, [pc, #140]	; (8007c14 <TIM_Base_SetConfig+0x13c>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d108      	bne.n	8007b9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	68fa      	ldr	r2, [r7, #12]
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	695b      	ldr	r3, [r3, #20]
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	68fa      	ldr	r2, [r7, #12]
 8007bae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	689a      	ldr	r2, [r3, #8]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	4a0a      	ldr	r2, [pc, #40]	; (8007bec <TIM_Base_SetConfig+0x114>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d003      	beq.n	8007bd0 <TIM_Base_SetConfig+0xf8>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	4a0c      	ldr	r2, [pc, #48]	; (8007bfc <TIM_Base_SetConfig+0x124>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d103      	bne.n	8007bd8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	691a      	ldr	r2, [r3, #16]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	615a      	str	r2, [r3, #20]
}
 8007bde:	bf00      	nop
 8007be0:	3714      	adds	r7, #20
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr
 8007bea:	bf00      	nop
 8007bec:	40010000 	.word	0x40010000
 8007bf0:	40000400 	.word	0x40000400
 8007bf4:	40000800 	.word	0x40000800
 8007bf8:	40000c00 	.word	0x40000c00
 8007bfc:	40010400 	.word	0x40010400
 8007c00:	40014000 	.word	0x40014000
 8007c04:	40014400 	.word	0x40014400
 8007c08:	40014800 	.word	0x40014800
 8007c0c:	40001800 	.word	0x40001800
 8007c10:	40001c00 	.word	0x40001c00
 8007c14:	40002000 	.word	0x40002000

08007c18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c20:	bf00      	nop
 8007c22:	370c      	adds	r7, #12
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr

08007c2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b083      	sub	sp, #12
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c34:	bf00      	nop
 8007c36:	370c      	adds	r7, #12
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr

08007c40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d101      	bne.n	8007c52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e03f      	b.n	8007cd2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d106      	bne.n	8007c6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f7fa f930 	bl	8001ecc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2224      	movs	r2, #36	; 0x24
 8007c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	68da      	ldr	r2, [r3, #12]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 f929 	bl	8007edc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	691a      	ldr	r2, [r3, #16]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007c98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	695a      	ldr	r2, [r3, #20]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ca8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	68da      	ldr	r2, [r3, #12]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007cb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2220      	movs	r2, #32
 8007cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2220      	movs	r2, #32
 8007ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007cd0:	2300      	movs	r3, #0
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3708      	adds	r7, #8
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}

08007cda <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007cda:	b580      	push	{r7, lr}
 8007cdc:	b08a      	sub	sp, #40	; 0x28
 8007cde:	af02      	add	r7, sp, #8
 8007ce0:	60f8      	str	r0, [r7, #12]
 8007ce2:	60b9      	str	r1, [r7, #8]
 8007ce4:	603b      	str	r3, [r7, #0]
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007cea:	2300      	movs	r3, #0
 8007cec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	2b20      	cmp	r3, #32
 8007cf8:	d17c      	bne.n	8007df4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d002      	beq.n	8007d06 <HAL_UART_Transmit+0x2c>
 8007d00:	88fb      	ldrh	r3, [r7, #6]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d101      	bne.n	8007d0a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	e075      	b.n	8007df6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d101      	bne.n	8007d18 <HAL_UART_Transmit+0x3e>
 8007d14:	2302      	movs	r3, #2
 8007d16:	e06e      	b.n	8007df6 <HAL_UART_Transmit+0x11c>
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2200      	movs	r2, #0
 8007d24:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2221      	movs	r2, #33	; 0x21
 8007d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007d2e:	f7fa fa8d 	bl	800224c <HAL_GetTick>
 8007d32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	88fa      	ldrh	r2, [r7, #6]
 8007d38:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	88fa      	ldrh	r2, [r7, #6]
 8007d3e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d48:	d108      	bne.n	8007d5c <HAL_UART_Transmit+0x82>
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	691b      	ldr	r3, [r3, #16]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d104      	bne.n	8007d5c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007d52:	2300      	movs	r3, #0
 8007d54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	61bb      	str	r3, [r7, #24]
 8007d5a:	e003      	b.n	8007d64 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007d60:	2300      	movs	r3, #0
 8007d62:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2200      	movs	r2, #0
 8007d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007d6c:	e02a      	b.n	8007dc4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	9300      	str	r3, [sp, #0]
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	2200      	movs	r2, #0
 8007d76:	2180      	movs	r1, #128	; 0x80
 8007d78:	68f8      	ldr	r0, [r7, #12]
 8007d7a:	f000 f840 	bl	8007dfe <UART_WaitOnFlagUntilTimeout>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d001      	beq.n	8007d88 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007d84:	2303      	movs	r3, #3
 8007d86:	e036      	b.n	8007df6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007d88:	69fb      	ldr	r3, [r7, #28]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d10b      	bne.n	8007da6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	881b      	ldrh	r3, [r3, #0]
 8007d92:	461a      	mov	r2, r3
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007d9e:	69bb      	ldr	r3, [r7, #24]
 8007da0:	3302      	adds	r3, #2
 8007da2:	61bb      	str	r3, [r7, #24]
 8007da4:	e007      	b.n	8007db6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007da6:	69fb      	ldr	r3, [r7, #28]
 8007da8:	781a      	ldrb	r2, [r3, #0]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007db0:	69fb      	ldr	r3, [r7, #28]
 8007db2:	3301      	adds	r3, #1
 8007db4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	3b01      	subs	r3, #1
 8007dbe:	b29a      	uxth	r2, r3
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d1cf      	bne.n	8007d6e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	9300      	str	r3, [sp, #0]
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	2140      	movs	r1, #64	; 0x40
 8007dd8:	68f8      	ldr	r0, [r7, #12]
 8007dda:	f000 f810 	bl	8007dfe <UART_WaitOnFlagUntilTimeout>
 8007dde:	4603      	mov	r3, r0
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d001      	beq.n	8007de8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007de4:	2303      	movs	r3, #3
 8007de6:	e006      	b.n	8007df6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2220      	movs	r2, #32
 8007dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007df0:	2300      	movs	r3, #0
 8007df2:	e000      	b.n	8007df6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007df4:	2302      	movs	r3, #2
  }
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3720      	adds	r7, #32
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}

08007dfe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007dfe:	b580      	push	{r7, lr}
 8007e00:	b090      	sub	sp, #64	; 0x40
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	60f8      	str	r0, [r7, #12]
 8007e06:	60b9      	str	r1, [r7, #8]
 8007e08:	603b      	str	r3, [r7, #0]
 8007e0a:	4613      	mov	r3, r2
 8007e0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e0e:	e050      	b.n	8007eb2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e16:	d04c      	beq.n	8007eb2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007e18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d007      	beq.n	8007e2e <UART_WaitOnFlagUntilTimeout+0x30>
 8007e1e:	f7fa fa15 	bl	800224c <HAL_GetTick>
 8007e22:	4602      	mov	r2, r0
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	1ad3      	subs	r3, r2, r3
 8007e28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d241      	bcs.n	8007eb2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	330c      	adds	r3, #12
 8007e34:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e38:	e853 3f00 	ldrex	r3, [r3]
 8007e3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007e44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	330c      	adds	r3, #12
 8007e4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007e4e:	637a      	str	r2, [r7, #52]	; 0x34
 8007e50:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007e54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e56:	e841 2300 	strex	r3, r2, [r1]
 8007e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d1e5      	bne.n	8007e2e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	3314      	adds	r3, #20
 8007e68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	e853 3f00 	ldrex	r3, [r3]
 8007e70:	613b      	str	r3, [r7, #16]
   return(result);
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	f023 0301 	bic.w	r3, r3, #1
 8007e78:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	3314      	adds	r3, #20
 8007e80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e82:	623a      	str	r2, [r7, #32]
 8007e84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e86:	69f9      	ldr	r1, [r7, #28]
 8007e88:	6a3a      	ldr	r2, [r7, #32]
 8007e8a:	e841 2300 	strex	r3, r2, [r1]
 8007e8e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e90:	69bb      	ldr	r3, [r7, #24]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d1e5      	bne.n	8007e62 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2220      	movs	r2, #32
 8007e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2220      	movs	r2, #32
 8007ea2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007eae:	2303      	movs	r3, #3
 8007eb0:	e00f      	b.n	8007ed2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	4013      	ands	r3, r2
 8007ebc:	68ba      	ldr	r2, [r7, #8]
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	bf0c      	ite	eq
 8007ec2:	2301      	moveq	r3, #1
 8007ec4:	2300      	movne	r3, #0
 8007ec6:	b2db      	uxtb	r3, r3
 8007ec8:	461a      	mov	r2, r3
 8007eca:	79fb      	ldrb	r3, [r7, #7]
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d09f      	beq.n	8007e10 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007ed0:	2300      	movs	r3, #0
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3740      	adds	r7, #64	; 0x40
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
	...

08007edc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ee0:	b09f      	sub	sp, #124	; 0x7c
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ee6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	691b      	ldr	r3, [r3, #16]
 8007eec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007ef0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ef2:	68d9      	ldr	r1, [r3, #12]
 8007ef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	ea40 0301 	orr.w	r3, r0, r1
 8007efc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007efe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f00:	689a      	ldr	r2, [r3, #8]
 8007f02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f04:	691b      	ldr	r3, [r3, #16]
 8007f06:	431a      	orrs	r2, r3
 8007f08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f0a:	695b      	ldr	r3, [r3, #20]
 8007f0c:	431a      	orrs	r2, r3
 8007f0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f10:	69db      	ldr	r3, [r3, #28]
 8007f12:	4313      	orrs	r3, r2
 8007f14:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007f16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007f20:	f021 010c 	bic.w	r1, r1, #12
 8007f24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f26:	681a      	ldr	r2, [r3, #0]
 8007f28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f2a:	430b      	orrs	r3, r1
 8007f2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007f2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	695b      	ldr	r3, [r3, #20]
 8007f34:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007f38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f3a:	6999      	ldr	r1, [r3, #24]
 8007f3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	ea40 0301 	orr.w	r3, r0, r1
 8007f44:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007f46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f48:	681a      	ldr	r2, [r3, #0]
 8007f4a:	4bc5      	ldr	r3, [pc, #788]	; (8008260 <UART_SetConfig+0x384>)
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d004      	beq.n	8007f5a <UART_SetConfig+0x7e>
 8007f50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	4bc3      	ldr	r3, [pc, #780]	; (8008264 <UART_SetConfig+0x388>)
 8007f56:	429a      	cmp	r2, r3
 8007f58:	d103      	bne.n	8007f62 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007f5a:	f7ff f92f 	bl	80071bc <HAL_RCC_GetPCLK2Freq>
 8007f5e:	6778      	str	r0, [r7, #116]	; 0x74
 8007f60:	e002      	b.n	8007f68 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007f62:	f7ff f917 	bl	8007194 <HAL_RCC_GetPCLK1Freq>
 8007f66:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f6a:	69db      	ldr	r3, [r3, #28]
 8007f6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f70:	f040 80b6 	bne.w	80080e0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007f74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f76:	461c      	mov	r4, r3
 8007f78:	f04f 0500 	mov.w	r5, #0
 8007f7c:	4622      	mov	r2, r4
 8007f7e:	462b      	mov	r3, r5
 8007f80:	1891      	adds	r1, r2, r2
 8007f82:	6439      	str	r1, [r7, #64]	; 0x40
 8007f84:	415b      	adcs	r3, r3
 8007f86:	647b      	str	r3, [r7, #68]	; 0x44
 8007f88:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007f8c:	1912      	adds	r2, r2, r4
 8007f8e:	eb45 0303 	adc.w	r3, r5, r3
 8007f92:	f04f 0000 	mov.w	r0, #0
 8007f96:	f04f 0100 	mov.w	r1, #0
 8007f9a:	00d9      	lsls	r1, r3, #3
 8007f9c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007fa0:	00d0      	lsls	r0, r2, #3
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	1911      	adds	r1, r2, r4
 8007fa8:	6639      	str	r1, [r7, #96]	; 0x60
 8007faa:	416b      	adcs	r3, r5
 8007fac:	667b      	str	r3, [r7, #100]	; 0x64
 8007fae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	f04f 0300 	mov.w	r3, #0
 8007fb8:	1891      	adds	r1, r2, r2
 8007fba:	63b9      	str	r1, [r7, #56]	; 0x38
 8007fbc:	415b      	adcs	r3, r3
 8007fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fc0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007fc4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007fc8:	f7f8 fc60 	bl	800088c <__aeabi_uldivmod>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	460b      	mov	r3, r1
 8007fd0:	4ba5      	ldr	r3, [pc, #660]	; (8008268 <UART_SetConfig+0x38c>)
 8007fd2:	fba3 2302 	umull	r2, r3, r3, r2
 8007fd6:	095b      	lsrs	r3, r3, #5
 8007fd8:	011e      	lsls	r6, r3, #4
 8007fda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fdc:	461c      	mov	r4, r3
 8007fde:	f04f 0500 	mov.w	r5, #0
 8007fe2:	4622      	mov	r2, r4
 8007fe4:	462b      	mov	r3, r5
 8007fe6:	1891      	adds	r1, r2, r2
 8007fe8:	6339      	str	r1, [r7, #48]	; 0x30
 8007fea:	415b      	adcs	r3, r3
 8007fec:	637b      	str	r3, [r7, #52]	; 0x34
 8007fee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007ff2:	1912      	adds	r2, r2, r4
 8007ff4:	eb45 0303 	adc.w	r3, r5, r3
 8007ff8:	f04f 0000 	mov.w	r0, #0
 8007ffc:	f04f 0100 	mov.w	r1, #0
 8008000:	00d9      	lsls	r1, r3, #3
 8008002:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008006:	00d0      	lsls	r0, r2, #3
 8008008:	4602      	mov	r2, r0
 800800a:	460b      	mov	r3, r1
 800800c:	1911      	adds	r1, r2, r4
 800800e:	65b9      	str	r1, [r7, #88]	; 0x58
 8008010:	416b      	adcs	r3, r5
 8008012:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008014:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	461a      	mov	r2, r3
 800801a:	f04f 0300 	mov.w	r3, #0
 800801e:	1891      	adds	r1, r2, r2
 8008020:	62b9      	str	r1, [r7, #40]	; 0x28
 8008022:	415b      	adcs	r3, r3
 8008024:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008026:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800802a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800802e:	f7f8 fc2d 	bl	800088c <__aeabi_uldivmod>
 8008032:	4602      	mov	r2, r0
 8008034:	460b      	mov	r3, r1
 8008036:	4b8c      	ldr	r3, [pc, #560]	; (8008268 <UART_SetConfig+0x38c>)
 8008038:	fba3 1302 	umull	r1, r3, r3, r2
 800803c:	095b      	lsrs	r3, r3, #5
 800803e:	2164      	movs	r1, #100	; 0x64
 8008040:	fb01 f303 	mul.w	r3, r1, r3
 8008044:	1ad3      	subs	r3, r2, r3
 8008046:	00db      	lsls	r3, r3, #3
 8008048:	3332      	adds	r3, #50	; 0x32
 800804a:	4a87      	ldr	r2, [pc, #540]	; (8008268 <UART_SetConfig+0x38c>)
 800804c:	fba2 2303 	umull	r2, r3, r2, r3
 8008050:	095b      	lsrs	r3, r3, #5
 8008052:	005b      	lsls	r3, r3, #1
 8008054:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008058:	441e      	add	r6, r3
 800805a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800805c:	4618      	mov	r0, r3
 800805e:	f04f 0100 	mov.w	r1, #0
 8008062:	4602      	mov	r2, r0
 8008064:	460b      	mov	r3, r1
 8008066:	1894      	adds	r4, r2, r2
 8008068:	623c      	str	r4, [r7, #32]
 800806a:	415b      	adcs	r3, r3
 800806c:	627b      	str	r3, [r7, #36]	; 0x24
 800806e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008072:	1812      	adds	r2, r2, r0
 8008074:	eb41 0303 	adc.w	r3, r1, r3
 8008078:	f04f 0400 	mov.w	r4, #0
 800807c:	f04f 0500 	mov.w	r5, #0
 8008080:	00dd      	lsls	r5, r3, #3
 8008082:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008086:	00d4      	lsls	r4, r2, #3
 8008088:	4622      	mov	r2, r4
 800808a:	462b      	mov	r3, r5
 800808c:	1814      	adds	r4, r2, r0
 800808e:	653c      	str	r4, [r7, #80]	; 0x50
 8008090:	414b      	adcs	r3, r1
 8008092:	657b      	str	r3, [r7, #84]	; 0x54
 8008094:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	461a      	mov	r2, r3
 800809a:	f04f 0300 	mov.w	r3, #0
 800809e:	1891      	adds	r1, r2, r2
 80080a0:	61b9      	str	r1, [r7, #24]
 80080a2:	415b      	adcs	r3, r3
 80080a4:	61fb      	str	r3, [r7, #28]
 80080a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80080aa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80080ae:	f7f8 fbed 	bl	800088c <__aeabi_uldivmod>
 80080b2:	4602      	mov	r2, r0
 80080b4:	460b      	mov	r3, r1
 80080b6:	4b6c      	ldr	r3, [pc, #432]	; (8008268 <UART_SetConfig+0x38c>)
 80080b8:	fba3 1302 	umull	r1, r3, r3, r2
 80080bc:	095b      	lsrs	r3, r3, #5
 80080be:	2164      	movs	r1, #100	; 0x64
 80080c0:	fb01 f303 	mul.w	r3, r1, r3
 80080c4:	1ad3      	subs	r3, r2, r3
 80080c6:	00db      	lsls	r3, r3, #3
 80080c8:	3332      	adds	r3, #50	; 0x32
 80080ca:	4a67      	ldr	r2, [pc, #412]	; (8008268 <UART_SetConfig+0x38c>)
 80080cc:	fba2 2303 	umull	r2, r3, r2, r3
 80080d0:	095b      	lsrs	r3, r3, #5
 80080d2:	f003 0207 	and.w	r2, r3, #7
 80080d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4432      	add	r2, r6
 80080dc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80080de:	e0b9      	b.n	8008254 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80080e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080e2:	461c      	mov	r4, r3
 80080e4:	f04f 0500 	mov.w	r5, #0
 80080e8:	4622      	mov	r2, r4
 80080ea:	462b      	mov	r3, r5
 80080ec:	1891      	adds	r1, r2, r2
 80080ee:	6139      	str	r1, [r7, #16]
 80080f0:	415b      	adcs	r3, r3
 80080f2:	617b      	str	r3, [r7, #20]
 80080f4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80080f8:	1912      	adds	r2, r2, r4
 80080fa:	eb45 0303 	adc.w	r3, r5, r3
 80080fe:	f04f 0000 	mov.w	r0, #0
 8008102:	f04f 0100 	mov.w	r1, #0
 8008106:	00d9      	lsls	r1, r3, #3
 8008108:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800810c:	00d0      	lsls	r0, r2, #3
 800810e:	4602      	mov	r2, r0
 8008110:	460b      	mov	r3, r1
 8008112:	eb12 0804 	adds.w	r8, r2, r4
 8008116:	eb43 0905 	adc.w	r9, r3, r5
 800811a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	4618      	mov	r0, r3
 8008120:	f04f 0100 	mov.w	r1, #0
 8008124:	f04f 0200 	mov.w	r2, #0
 8008128:	f04f 0300 	mov.w	r3, #0
 800812c:	008b      	lsls	r3, r1, #2
 800812e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008132:	0082      	lsls	r2, r0, #2
 8008134:	4640      	mov	r0, r8
 8008136:	4649      	mov	r1, r9
 8008138:	f7f8 fba8 	bl	800088c <__aeabi_uldivmod>
 800813c:	4602      	mov	r2, r0
 800813e:	460b      	mov	r3, r1
 8008140:	4b49      	ldr	r3, [pc, #292]	; (8008268 <UART_SetConfig+0x38c>)
 8008142:	fba3 2302 	umull	r2, r3, r3, r2
 8008146:	095b      	lsrs	r3, r3, #5
 8008148:	011e      	lsls	r6, r3, #4
 800814a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800814c:	4618      	mov	r0, r3
 800814e:	f04f 0100 	mov.w	r1, #0
 8008152:	4602      	mov	r2, r0
 8008154:	460b      	mov	r3, r1
 8008156:	1894      	adds	r4, r2, r2
 8008158:	60bc      	str	r4, [r7, #8]
 800815a:	415b      	adcs	r3, r3
 800815c:	60fb      	str	r3, [r7, #12]
 800815e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008162:	1812      	adds	r2, r2, r0
 8008164:	eb41 0303 	adc.w	r3, r1, r3
 8008168:	f04f 0400 	mov.w	r4, #0
 800816c:	f04f 0500 	mov.w	r5, #0
 8008170:	00dd      	lsls	r5, r3, #3
 8008172:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008176:	00d4      	lsls	r4, r2, #3
 8008178:	4622      	mov	r2, r4
 800817a:	462b      	mov	r3, r5
 800817c:	1814      	adds	r4, r2, r0
 800817e:	64bc      	str	r4, [r7, #72]	; 0x48
 8008180:	414b      	adcs	r3, r1
 8008182:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008184:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008186:	685b      	ldr	r3, [r3, #4]
 8008188:	4618      	mov	r0, r3
 800818a:	f04f 0100 	mov.w	r1, #0
 800818e:	f04f 0200 	mov.w	r2, #0
 8008192:	f04f 0300 	mov.w	r3, #0
 8008196:	008b      	lsls	r3, r1, #2
 8008198:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800819c:	0082      	lsls	r2, r0, #2
 800819e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80081a2:	f7f8 fb73 	bl	800088c <__aeabi_uldivmod>
 80081a6:	4602      	mov	r2, r0
 80081a8:	460b      	mov	r3, r1
 80081aa:	4b2f      	ldr	r3, [pc, #188]	; (8008268 <UART_SetConfig+0x38c>)
 80081ac:	fba3 1302 	umull	r1, r3, r3, r2
 80081b0:	095b      	lsrs	r3, r3, #5
 80081b2:	2164      	movs	r1, #100	; 0x64
 80081b4:	fb01 f303 	mul.w	r3, r1, r3
 80081b8:	1ad3      	subs	r3, r2, r3
 80081ba:	011b      	lsls	r3, r3, #4
 80081bc:	3332      	adds	r3, #50	; 0x32
 80081be:	4a2a      	ldr	r2, [pc, #168]	; (8008268 <UART_SetConfig+0x38c>)
 80081c0:	fba2 2303 	umull	r2, r3, r2, r3
 80081c4:	095b      	lsrs	r3, r3, #5
 80081c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80081ca:	441e      	add	r6, r3
 80081cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081ce:	4618      	mov	r0, r3
 80081d0:	f04f 0100 	mov.w	r1, #0
 80081d4:	4602      	mov	r2, r0
 80081d6:	460b      	mov	r3, r1
 80081d8:	1894      	adds	r4, r2, r2
 80081da:	603c      	str	r4, [r7, #0]
 80081dc:	415b      	adcs	r3, r3
 80081de:	607b      	str	r3, [r7, #4]
 80081e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081e4:	1812      	adds	r2, r2, r0
 80081e6:	eb41 0303 	adc.w	r3, r1, r3
 80081ea:	f04f 0400 	mov.w	r4, #0
 80081ee:	f04f 0500 	mov.w	r5, #0
 80081f2:	00dd      	lsls	r5, r3, #3
 80081f4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80081f8:	00d4      	lsls	r4, r2, #3
 80081fa:	4622      	mov	r2, r4
 80081fc:	462b      	mov	r3, r5
 80081fe:	eb12 0a00 	adds.w	sl, r2, r0
 8008202:	eb43 0b01 	adc.w	fp, r3, r1
 8008206:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	4618      	mov	r0, r3
 800820c:	f04f 0100 	mov.w	r1, #0
 8008210:	f04f 0200 	mov.w	r2, #0
 8008214:	f04f 0300 	mov.w	r3, #0
 8008218:	008b      	lsls	r3, r1, #2
 800821a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800821e:	0082      	lsls	r2, r0, #2
 8008220:	4650      	mov	r0, sl
 8008222:	4659      	mov	r1, fp
 8008224:	f7f8 fb32 	bl	800088c <__aeabi_uldivmod>
 8008228:	4602      	mov	r2, r0
 800822a:	460b      	mov	r3, r1
 800822c:	4b0e      	ldr	r3, [pc, #56]	; (8008268 <UART_SetConfig+0x38c>)
 800822e:	fba3 1302 	umull	r1, r3, r3, r2
 8008232:	095b      	lsrs	r3, r3, #5
 8008234:	2164      	movs	r1, #100	; 0x64
 8008236:	fb01 f303 	mul.w	r3, r1, r3
 800823a:	1ad3      	subs	r3, r2, r3
 800823c:	011b      	lsls	r3, r3, #4
 800823e:	3332      	adds	r3, #50	; 0x32
 8008240:	4a09      	ldr	r2, [pc, #36]	; (8008268 <UART_SetConfig+0x38c>)
 8008242:	fba2 2303 	umull	r2, r3, r2, r3
 8008246:	095b      	lsrs	r3, r3, #5
 8008248:	f003 020f 	and.w	r2, r3, #15
 800824c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4432      	add	r2, r6
 8008252:	609a      	str	r2, [r3, #8]
}
 8008254:	bf00      	nop
 8008256:	377c      	adds	r7, #124	; 0x7c
 8008258:	46bd      	mov	sp, r7
 800825a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800825e:	bf00      	nop
 8008260:	40011000 	.word	0x40011000
 8008264:	40011400 	.word	0x40011400
 8008268:	51eb851f 	.word	0x51eb851f

0800826c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800826c:	b084      	sub	sp, #16
 800826e:	b580      	push	{r7, lr}
 8008270:	b084      	sub	sp, #16
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
 8008276:	f107 001c 	add.w	r0, r7, #28
 800827a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800827e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008280:	2b01      	cmp	r3, #1
 8008282:	d122      	bne.n	80082ca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008288:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	68db      	ldr	r3, [r3, #12]
 8008294:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008298:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	68db      	ldr	r3, [r3, #12]
 80082a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80082ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	d105      	bne.n	80082be <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	68db      	ldr	r3, [r3, #12]
 80082b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 f9a0 	bl	8008604 <USB_CoreReset>
 80082c4:	4603      	mov	r3, r0
 80082c6:	73fb      	strb	r3, [r7, #15]
 80082c8:	e01a      	b.n	8008300 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	68db      	ldr	r3, [r3, #12]
 80082ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 f994 	bl	8008604 <USB_CoreReset>
 80082dc:	4603      	mov	r3, r0
 80082de:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80082e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d106      	bne.n	80082f4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	639a      	str	r2, [r3, #56]	; 0x38
 80082f2:	e005      	b.n	8008300 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008302:	2b01      	cmp	r3, #1
 8008304:	d10b      	bne.n	800831e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	f043 0206 	orr.w	r2, r3, #6
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	f043 0220 	orr.w	r2, r3, #32
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800831e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008320:	4618      	mov	r0, r3
 8008322:	3710      	adds	r7, #16
 8008324:	46bd      	mov	sp, r7
 8008326:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800832a:	b004      	add	sp, #16
 800832c:	4770      	bx	lr

0800832e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800832e:	b480      	push	{r7}
 8008330:	b083      	sub	sp, #12
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	f043 0201 	orr.w	r2, r3, #1
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008342:	2300      	movs	r3, #0
}
 8008344:	4618      	mov	r0, r3
 8008346:	370c      	adds	r7, #12
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008350:	b480      	push	{r7}
 8008352:	b083      	sub	sp, #12
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	689b      	ldr	r3, [r3, #8]
 800835c:	f023 0201 	bic.w	r2, r3, #1
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008364:	2300      	movs	r3, #0
}
 8008366:	4618      	mov	r0, r3
 8008368:	370c      	adds	r7, #12
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr

08008372 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008372:	b580      	push	{r7, lr}
 8008374:	b084      	sub	sp, #16
 8008376:	af00      	add	r7, sp, #0
 8008378:	6078      	str	r0, [r7, #4]
 800837a:	460b      	mov	r3, r1
 800837c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800837e:	2300      	movs	r3, #0
 8008380:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	68db      	ldr	r3, [r3, #12]
 8008386:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800838e:	78fb      	ldrb	r3, [r7, #3]
 8008390:	2b01      	cmp	r3, #1
 8008392:	d115      	bne.n	80083c0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	68db      	ldr	r3, [r3, #12]
 8008398:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80083a0:	2001      	movs	r0, #1
 80083a2:	f7f9 ff5f 	bl	8002264 <HAL_Delay>
      ms++;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	3301      	adds	r3, #1
 80083aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 f91a 	bl	80085e6 <USB_GetMode>
 80083b2:	4603      	mov	r3, r0
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d01e      	beq.n	80083f6 <USB_SetCurrentMode+0x84>
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2b31      	cmp	r3, #49	; 0x31
 80083bc:	d9f0      	bls.n	80083a0 <USB_SetCurrentMode+0x2e>
 80083be:	e01a      	b.n	80083f6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80083c0:	78fb      	ldrb	r3, [r7, #3]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d115      	bne.n	80083f2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	68db      	ldr	r3, [r3, #12]
 80083ca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80083d2:	2001      	movs	r0, #1
 80083d4:	f7f9 ff46 	bl	8002264 <HAL_Delay>
      ms++;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	3301      	adds	r3, #1
 80083dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 f901 	bl	80085e6 <USB_GetMode>
 80083e4:	4603      	mov	r3, r0
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d005      	beq.n	80083f6 <USB_SetCurrentMode+0x84>
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2b31      	cmp	r3, #49	; 0x31
 80083ee:	d9f0      	bls.n	80083d2 <USB_SetCurrentMode+0x60>
 80083f0:	e001      	b.n	80083f6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80083f2:	2301      	movs	r3, #1
 80083f4:	e005      	b.n	8008402 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2b32      	cmp	r3, #50	; 0x32
 80083fa:	d101      	bne.n	8008400 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80083fc:	2301      	movs	r3, #1
 80083fe:	e000      	b.n	8008402 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008400:	2300      	movs	r3, #0
}
 8008402:	4618      	mov	r0, r3
 8008404:	3710      	adds	r7, #16
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
	...

0800840c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800840c:	b480      	push	{r7}
 800840e:	b085      	sub	sp, #20
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008416:	2300      	movs	r3, #0
 8008418:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	019b      	lsls	r3, r3, #6
 800841e:	f043 0220 	orr.w	r2, r3, #32
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	3301      	adds	r3, #1
 800842a:	60fb      	str	r3, [r7, #12]
 800842c:	4a08      	ldr	r2, [pc, #32]	; (8008450 <USB_FlushTxFifo+0x44>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d901      	bls.n	8008436 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8008432:	2303      	movs	r3, #3
 8008434:	e006      	b.n	8008444 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	691b      	ldr	r3, [r3, #16]
 800843a:	f003 0320 	and.w	r3, r3, #32
 800843e:	2b20      	cmp	r3, #32
 8008440:	d0f1      	beq.n	8008426 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008442:	2300      	movs	r3, #0
}
 8008444:	4618      	mov	r0, r3
 8008446:	3714      	adds	r7, #20
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr
 8008450:	00030d40 	.word	0x00030d40

08008454 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008454:	b480      	push	{r7}
 8008456:	b085      	sub	sp, #20
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800845c:	2300      	movs	r3, #0
 800845e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2210      	movs	r2, #16
 8008464:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	3301      	adds	r3, #1
 800846a:	60fb      	str	r3, [r7, #12]
 800846c:	4a08      	ldr	r2, [pc, #32]	; (8008490 <USB_FlushRxFifo+0x3c>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d901      	bls.n	8008476 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8008472:	2303      	movs	r3, #3
 8008474:	e006      	b.n	8008484 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	691b      	ldr	r3, [r3, #16]
 800847a:	f003 0310 	and.w	r3, r3, #16
 800847e:	2b10      	cmp	r3, #16
 8008480:	d0f1      	beq.n	8008466 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008482:	2300      	movs	r3, #0
}
 8008484:	4618      	mov	r0, r3
 8008486:	3714      	adds	r7, #20
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr
 8008490:	00030d40 	.word	0x00030d40

08008494 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008494:	b480      	push	{r7}
 8008496:	b089      	sub	sp, #36	; 0x24
 8008498:	af00      	add	r7, sp, #0
 800849a:	60f8      	str	r0, [r7, #12]
 800849c:	60b9      	str	r1, [r7, #8]
 800849e:	4611      	mov	r1, r2
 80084a0:	461a      	mov	r2, r3
 80084a2:	460b      	mov	r3, r1
 80084a4:	71fb      	strb	r3, [r7, #7]
 80084a6:	4613      	mov	r3, r2
 80084a8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80084b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d123      	bne.n	8008502 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80084ba:	88bb      	ldrh	r3, [r7, #4]
 80084bc:	3303      	adds	r3, #3
 80084be:	089b      	lsrs	r3, r3, #2
 80084c0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80084c2:	2300      	movs	r3, #0
 80084c4:	61bb      	str	r3, [r7, #24]
 80084c6:	e018      	b.n	80084fa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80084c8:	79fb      	ldrb	r3, [r7, #7]
 80084ca:	031a      	lsls	r2, r3, #12
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	4413      	add	r3, r2
 80084d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084d4:	461a      	mov	r2, r3
 80084d6:	69fb      	ldr	r3, [r7, #28]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	6013      	str	r3, [r2, #0]
      pSrc++;
 80084dc:	69fb      	ldr	r3, [r7, #28]
 80084de:	3301      	adds	r3, #1
 80084e0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80084e2:	69fb      	ldr	r3, [r7, #28]
 80084e4:	3301      	adds	r3, #1
 80084e6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80084e8:	69fb      	ldr	r3, [r7, #28]
 80084ea:	3301      	adds	r3, #1
 80084ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80084ee:	69fb      	ldr	r3, [r7, #28]
 80084f0:	3301      	adds	r3, #1
 80084f2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80084f4:	69bb      	ldr	r3, [r7, #24]
 80084f6:	3301      	adds	r3, #1
 80084f8:	61bb      	str	r3, [r7, #24]
 80084fa:	69ba      	ldr	r2, [r7, #24]
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	429a      	cmp	r2, r3
 8008500:	d3e2      	bcc.n	80084c8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008502:	2300      	movs	r3, #0
}
 8008504:	4618      	mov	r0, r3
 8008506:	3724      	adds	r7, #36	; 0x24
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr

08008510 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008510:	b480      	push	{r7}
 8008512:	b08b      	sub	sp, #44	; 0x2c
 8008514:	af00      	add	r7, sp, #0
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	4613      	mov	r3, r2
 800851c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008526:	88fb      	ldrh	r3, [r7, #6]
 8008528:	089b      	lsrs	r3, r3, #2
 800852a:	b29b      	uxth	r3, r3
 800852c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800852e:	88fb      	ldrh	r3, [r7, #6]
 8008530:	f003 0303 	and.w	r3, r3, #3
 8008534:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008536:	2300      	movs	r3, #0
 8008538:	623b      	str	r3, [r7, #32]
 800853a:	e014      	b.n	8008566 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800853c:	69bb      	ldr	r3, [r7, #24]
 800853e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008546:	601a      	str	r2, [r3, #0]
    pDest++;
 8008548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854a:	3301      	adds	r3, #1
 800854c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800854e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008550:	3301      	adds	r3, #1
 8008552:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008556:	3301      	adds	r3, #1
 8008558:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800855a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855c:	3301      	adds	r3, #1
 800855e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008560:	6a3b      	ldr	r3, [r7, #32]
 8008562:	3301      	adds	r3, #1
 8008564:	623b      	str	r3, [r7, #32]
 8008566:	6a3a      	ldr	r2, [r7, #32]
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	429a      	cmp	r2, r3
 800856c:	d3e6      	bcc.n	800853c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800856e:	8bfb      	ldrh	r3, [r7, #30]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d01e      	beq.n	80085b2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008574:	2300      	movs	r3, #0
 8008576:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008578:	69bb      	ldr	r3, [r7, #24]
 800857a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800857e:	461a      	mov	r2, r3
 8008580:	f107 0310 	add.w	r3, r7, #16
 8008584:	6812      	ldr	r2, [r2, #0]
 8008586:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008588:	693a      	ldr	r2, [r7, #16]
 800858a:	6a3b      	ldr	r3, [r7, #32]
 800858c:	b2db      	uxtb	r3, r3
 800858e:	00db      	lsls	r3, r3, #3
 8008590:	fa22 f303 	lsr.w	r3, r2, r3
 8008594:	b2da      	uxtb	r2, r3
 8008596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008598:	701a      	strb	r2, [r3, #0]
      i++;
 800859a:	6a3b      	ldr	r3, [r7, #32]
 800859c:	3301      	adds	r3, #1
 800859e:	623b      	str	r3, [r7, #32]
      pDest++;
 80085a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a2:	3301      	adds	r3, #1
 80085a4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80085a6:	8bfb      	ldrh	r3, [r7, #30]
 80085a8:	3b01      	subs	r3, #1
 80085aa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80085ac:	8bfb      	ldrh	r3, [r7, #30]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d1ea      	bne.n	8008588 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80085b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	372c      	adds	r7, #44	; 0x2c
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr

080085c0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b085      	sub	sp, #20
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	695b      	ldr	r3, [r3, #20]
 80085cc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	699b      	ldr	r3, [r3, #24]
 80085d2:	68fa      	ldr	r2, [r7, #12]
 80085d4:	4013      	ands	r3, r2
 80085d6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80085d8:	68fb      	ldr	r3, [r7, #12]
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3714      	adds	r7, #20
 80085de:	46bd      	mov	sp, r7
 80085e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e4:	4770      	bx	lr

080085e6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80085e6:	b480      	push	{r7}
 80085e8:	b083      	sub	sp, #12
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	695b      	ldr	r3, [r3, #20]
 80085f2:	f003 0301 	and.w	r3, r3, #1
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	370c      	adds	r7, #12
 80085fa:	46bd      	mov	sp, r7
 80085fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008600:	4770      	bx	lr
	...

08008604 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008604:	b480      	push	{r7}
 8008606:	b085      	sub	sp, #20
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800860c:	2300      	movs	r3, #0
 800860e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	3301      	adds	r3, #1
 8008614:	60fb      	str	r3, [r7, #12]
 8008616:	4a13      	ldr	r2, [pc, #76]	; (8008664 <USB_CoreReset+0x60>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d901      	bls.n	8008620 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800861c:	2303      	movs	r3, #3
 800861e:	e01a      	b.n	8008656 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	691b      	ldr	r3, [r3, #16]
 8008624:	2b00      	cmp	r3, #0
 8008626:	daf3      	bge.n	8008610 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008628:	2300      	movs	r3, #0
 800862a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	691b      	ldr	r3, [r3, #16]
 8008630:	f043 0201 	orr.w	r2, r3, #1
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	3301      	adds	r3, #1
 800863c:	60fb      	str	r3, [r7, #12]
 800863e:	4a09      	ldr	r2, [pc, #36]	; (8008664 <USB_CoreReset+0x60>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d901      	bls.n	8008648 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8008644:	2303      	movs	r3, #3
 8008646:	e006      	b.n	8008656 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	691b      	ldr	r3, [r3, #16]
 800864c:	f003 0301 	and.w	r3, r3, #1
 8008650:	2b01      	cmp	r3, #1
 8008652:	d0f1      	beq.n	8008638 <USB_CoreReset+0x34>

  return HAL_OK;
 8008654:	2300      	movs	r3, #0
}
 8008656:	4618      	mov	r0, r3
 8008658:	3714      	adds	r7, #20
 800865a:	46bd      	mov	sp, r7
 800865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008660:	4770      	bx	lr
 8008662:	bf00      	nop
 8008664:	00030d40 	.word	0x00030d40

08008668 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008668:	b084      	sub	sp, #16
 800866a:	b580      	push	{r7, lr}
 800866c:	b084      	sub	sp, #16
 800866e:	af00      	add	r7, sp, #0
 8008670:	6078      	str	r0, [r7, #4]
 8008672:	f107 001c 	add.w	r0, r7, #28
 8008676:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008684:	461a      	mov	r2, r3
 8008686:	2300      	movs	r3, #0
 8008688:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800868e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800869a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086a6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d018      	beq.n	80086ec <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80086ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086bc:	2b01      	cmp	r3, #1
 80086be:	d10a      	bne.n	80086d6 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	68ba      	ldr	r2, [r7, #8]
 80086ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80086ce:	f043 0304 	orr.w	r3, r3, #4
 80086d2:	6013      	str	r3, [r2, #0]
 80086d4:	e014      	b.n	8008700 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	68ba      	ldr	r2, [r7, #8]
 80086e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80086e4:	f023 0304 	bic.w	r3, r3, #4
 80086e8:	6013      	str	r3, [r2, #0]
 80086ea:	e009      	b.n	8008700 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	68ba      	ldr	r2, [r7, #8]
 80086f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80086fa:	f023 0304 	bic.w	r3, r3, #4
 80086fe:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8008700:	2110      	movs	r1, #16
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f7ff fe82 	bl	800840c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f7ff fea3 	bl	8008454 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800870e:	2300      	movs	r3, #0
 8008710:	60fb      	str	r3, [r7, #12]
 8008712:	e015      	b.n	8008740 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	015a      	lsls	r2, r3, #5
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	4413      	add	r3, r2
 800871c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008720:	461a      	mov	r2, r3
 8008722:	f04f 33ff 	mov.w	r3, #4294967295
 8008726:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	015a      	lsls	r2, r3, #5
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	4413      	add	r3, r2
 8008730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008734:	461a      	mov	r2, r3
 8008736:	2300      	movs	r3, #0
 8008738:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	3301      	adds	r3, #1
 800873e:	60fb      	str	r3, [r7, #12]
 8008740:	6a3b      	ldr	r3, [r7, #32]
 8008742:	68fa      	ldr	r2, [r7, #12]
 8008744:	429a      	cmp	r2, r3
 8008746:	d3e5      	bcc.n	8008714 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2200      	movs	r2, #0
 800874c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f04f 32ff 	mov.w	r2, #4294967295
 8008754:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800875a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800875e:	2b00      	cmp	r3, #0
 8008760:	d00b      	beq.n	800877a <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008768:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	4a13      	ldr	r2, [pc, #76]	; (80087bc <USB_HostInit+0x154>)
 800876e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	4a13      	ldr	r2, [pc, #76]	; (80087c0 <USB_HostInit+0x158>)
 8008774:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008778:	e009      	b.n	800878e <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2280      	movs	r2, #128	; 0x80
 800877e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	4a10      	ldr	r2, [pc, #64]	; (80087c4 <USB_HostInit+0x15c>)
 8008784:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	4a0f      	ldr	r2, [pc, #60]	; (80087c8 <USB_HostInit+0x160>)
 800878a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800878e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008790:	2b00      	cmp	r3, #0
 8008792:	d105      	bne.n	80087a0 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	699b      	ldr	r3, [r3, #24]
 8008798:	f043 0210 	orr.w	r2, r3, #16
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	699a      	ldr	r2, [r3, #24]
 80087a4:	4b09      	ldr	r3, [pc, #36]	; (80087cc <USB_HostInit+0x164>)
 80087a6:	4313      	orrs	r3, r2
 80087a8:	687a      	ldr	r2, [r7, #4]
 80087aa:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80087ac:	2300      	movs	r3, #0
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3710      	adds	r7, #16
 80087b2:	46bd      	mov	sp, r7
 80087b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80087b8:	b004      	add	sp, #16
 80087ba:	4770      	bx	lr
 80087bc:	01000200 	.word	0x01000200
 80087c0:	00e00300 	.word	0x00e00300
 80087c4:	00600080 	.word	0x00600080
 80087c8:	004000e0 	.word	0x004000e0
 80087cc:	a3200008 	.word	0xa3200008

080087d0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b085      	sub	sp, #20
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	460b      	mov	r3, r1
 80087da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	68fa      	ldr	r2, [r7, #12]
 80087ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80087ee:	f023 0303 	bic.w	r3, r3, #3
 80087f2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80087fa:	681a      	ldr	r2, [r3, #0]
 80087fc:	78fb      	ldrb	r3, [r7, #3]
 80087fe:	f003 0303 	and.w	r3, r3, #3
 8008802:	68f9      	ldr	r1, [r7, #12]
 8008804:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008808:	4313      	orrs	r3, r2
 800880a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800880c:	78fb      	ldrb	r3, [r7, #3]
 800880e:	2b01      	cmp	r3, #1
 8008810:	d107      	bne.n	8008822 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008818:	461a      	mov	r2, r3
 800881a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800881e:	6053      	str	r3, [r2, #4]
 8008820:	e009      	b.n	8008836 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008822:	78fb      	ldrb	r3, [r7, #3]
 8008824:	2b02      	cmp	r3, #2
 8008826:	d106      	bne.n	8008836 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800882e:	461a      	mov	r2, r3
 8008830:	f241 7370 	movw	r3, #6000	; 0x1770
 8008834:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008836:	2300      	movs	r3, #0
}
 8008838:	4618      	mov	r0, r3
 800883a:	3714      	adds	r7, #20
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr

08008844 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b084      	sub	sp, #16
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008850:	2300      	movs	r3, #0
 8008852:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008864:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	68fa      	ldr	r2, [r7, #12]
 800886a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800886e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008872:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008874:	2064      	movs	r0, #100	; 0x64
 8008876:	f7f9 fcf5 	bl	8002264 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	68fa      	ldr	r2, [r7, #12]
 800887e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008882:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008886:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008888:	200a      	movs	r0, #10
 800888a:	f7f9 fceb 	bl	8002264 <HAL_Delay>

  return HAL_OK;
 800888e:	2300      	movs	r3, #0
}
 8008890:	4618      	mov	r0, r3
 8008892:	3710      	adds	r7, #16
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}

08008898 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008898:	b480      	push	{r7}
 800889a:	b085      	sub	sp, #20
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	460b      	mov	r3, r1
 80088a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80088a8:	2300      	movs	r3, #0
 80088aa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80088bc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d109      	bne.n	80088dc <USB_DriveVbus+0x44>
 80088c8:	78fb      	ldrb	r3, [r7, #3]
 80088ca:	2b01      	cmp	r3, #1
 80088cc:	d106      	bne.n	80088dc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	68fa      	ldr	r2, [r7, #12]
 80088d2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80088d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80088da:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80088e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088e6:	d109      	bne.n	80088fc <USB_DriveVbus+0x64>
 80088e8:	78fb      	ldrb	r3, [r7, #3]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d106      	bne.n	80088fc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	68fa      	ldr	r2, [r7, #12]
 80088f2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80088f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088fa:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80088fc:	2300      	movs	r3, #0
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3714      	adds	r7, #20
 8008902:	46bd      	mov	sp, r7
 8008904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008908:	4770      	bx	lr

0800890a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800890a:	b480      	push	{r7}
 800890c:	b085      	sub	sp, #20
 800890e:	af00      	add	r7, sp, #0
 8008910:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008916:	2300      	movs	r3, #0
 8008918:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	0c5b      	lsrs	r3, r3, #17
 8008928:	f003 0303 	and.w	r3, r3, #3
}
 800892c:	4618      	mov	r0, r3
 800892e:	3714      	adds	r7, #20
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr

08008938 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008938:	b480      	push	{r7}
 800893a:	b085      	sub	sp, #20
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	b29b      	uxth	r3, r3
}
 800894e:	4618      	mov	r0, r3
 8008950:	3714      	adds	r7, #20
 8008952:	46bd      	mov	sp, r7
 8008954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008958:	4770      	bx	lr
	...

0800895c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b088      	sub	sp, #32
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	4608      	mov	r0, r1
 8008966:	4611      	mov	r1, r2
 8008968:	461a      	mov	r2, r3
 800896a:	4603      	mov	r3, r0
 800896c:	70fb      	strb	r3, [r7, #3]
 800896e:	460b      	mov	r3, r1
 8008970:	70bb      	strb	r3, [r7, #2]
 8008972:	4613      	mov	r3, r2
 8008974:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008976:	2300      	movs	r3, #0
 8008978:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800897e:	78fb      	ldrb	r3, [r7, #3]
 8008980:	015a      	lsls	r2, r3, #5
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	4413      	add	r3, r2
 8008986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800898a:	461a      	mov	r2, r3
 800898c:	f04f 33ff 	mov.w	r3, #4294967295
 8008990:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008992:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008996:	2b03      	cmp	r3, #3
 8008998:	d87e      	bhi.n	8008a98 <USB_HC_Init+0x13c>
 800899a:	a201      	add	r2, pc, #4	; (adr r2, 80089a0 <USB_HC_Init+0x44>)
 800899c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089a0:	080089b1 	.word	0x080089b1
 80089a4:	08008a5b 	.word	0x08008a5b
 80089a8:	080089b1 	.word	0x080089b1
 80089ac:	08008a1d 	.word	0x08008a1d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80089b0:	78fb      	ldrb	r3, [r7, #3]
 80089b2:	015a      	lsls	r2, r3, #5
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	4413      	add	r3, r2
 80089b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089bc:	461a      	mov	r2, r3
 80089be:	f240 439d 	movw	r3, #1181	; 0x49d
 80089c2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80089c4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	da10      	bge.n	80089ee <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80089cc:	78fb      	ldrb	r3, [r7, #3]
 80089ce:	015a      	lsls	r2, r3, #5
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	4413      	add	r3, r2
 80089d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089d8:	68db      	ldr	r3, [r3, #12]
 80089da:	78fa      	ldrb	r2, [r7, #3]
 80089dc:	0151      	lsls	r1, r2, #5
 80089de:	693a      	ldr	r2, [r7, #16]
 80089e0:	440a      	add	r2, r1
 80089e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80089e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089ea:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80089ec:	e057      	b.n	8008a9e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d051      	beq.n	8008a9e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80089fa:	78fb      	ldrb	r3, [r7, #3]
 80089fc:	015a      	lsls	r2, r3, #5
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	4413      	add	r3, r2
 8008a02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a06:	68db      	ldr	r3, [r3, #12]
 8008a08:	78fa      	ldrb	r2, [r7, #3]
 8008a0a:	0151      	lsls	r1, r2, #5
 8008a0c:	693a      	ldr	r2, [r7, #16]
 8008a0e:	440a      	add	r2, r1
 8008a10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a14:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008a18:	60d3      	str	r3, [r2, #12]
      break;
 8008a1a:	e040      	b.n	8008a9e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008a1c:	78fb      	ldrb	r3, [r7, #3]
 8008a1e:	015a      	lsls	r2, r3, #5
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	4413      	add	r3, r2
 8008a24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a28:	461a      	mov	r2, r3
 8008a2a:	f240 639d 	movw	r3, #1693	; 0x69d
 8008a2e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008a30:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	da34      	bge.n	8008aa2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008a38:	78fb      	ldrb	r3, [r7, #3]
 8008a3a:	015a      	lsls	r2, r3, #5
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	4413      	add	r3, r2
 8008a40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a44:	68db      	ldr	r3, [r3, #12]
 8008a46:	78fa      	ldrb	r2, [r7, #3]
 8008a48:	0151      	lsls	r1, r2, #5
 8008a4a:	693a      	ldr	r2, [r7, #16]
 8008a4c:	440a      	add	r2, r1
 8008a4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a56:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008a58:	e023      	b.n	8008aa2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008a5a:	78fb      	ldrb	r3, [r7, #3]
 8008a5c:	015a      	lsls	r2, r3, #5
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	4413      	add	r3, r2
 8008a62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a66:	461a      	mov	r2, r3
 8008a68:	f240 2325 	movw	r3, #549	; 0x225
 8008a6c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008a6e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	da17      	bge.n	8008aa6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008a76:	78fb      	ldrb	r3, [r7, #3]
 8008a78:	015a      	lsls	r2, r3, #5
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	4413      	add	r3, r2
 8008a7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a82:	68db      	ldr	r3, [r3, #12]
 8008a84:	78fa      	ldrb	r2, [r7, #3]
 8008a86:	0151      	lsls	r1, r2, #5
 8008a88:	693a      	ldr	r2, [r7, #16]
 8008a8a:	440a      	add	r2, r1
 8008a8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a90:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008a94:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008a96:	e006      	b.n	8008aa6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	77fb      	strb	r3, [r7, #31]
      break;
 8008a9c:	e004      	b.n	8008aa8 <USB_HC_Init+0x14c>
      break;
 8008a9e:	bf00      	nop
 8008aa0:	e002      	b.n	8008aa8 <USB_HC_Init+0x14c>
      break;
 8008aa2:	bf00      	nop
 8008aa4:	e000      	b.n	8008aa8 <USB_HC_Init+0x14c>
      break;
 8008aa6:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008aae:	699a      	ldr	r2, [r3, #24]
 8008ab0:	78fb      	ldrb	r3, [r7, #3]
 8008ab2:	f003 030f 	and.w	r3, r3, #15
 8008ab6:	2101      	movs	r1, #1
 8008ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8008abc:	6939      	ldr	r1, [r7, #16]
 8008abe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	699b      	ldr	r3, [r3, #24]
 8008aca:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008ad2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	da03      	bge.n	8008ae2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008ada:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ade:	61bb      	str	r3, [r7, #24]
 8008ae0:	e001      	b.n	8008ae6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f7ff ff0f 	bl	800890a <USB_GetHostSpeed>
 8008aec:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008aee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008af2:	2b02      	cmp	r3, #2
 8008af4:	d106      	bne.n	8008b04 <USB_HC_Init+0x1a8>
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2b02      	cmp	r3, #2
 8008afa:	d003      	beq.n	8008b04 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008afc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008b00:	617b      	str	r3, [r7, #20]
 8008b02:	e001      	b.n	8008b08 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008b04:	2300      	movs	r3, #0
 8008b06:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008b08:	787b      	ldrb	r3, [r7, #1]
 8008b0a:	059b      	lsls	r3, r3, #22
 8008b0c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008b10:	78bb      	ldrb	r3, [r7, #2]
 8008b12:	02db      	lsls	r3, r3, #11
 8008b14:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008b18:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008b1a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008b1e:	049b      	lsls	r3, r3, #18
 8008b20:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008b24:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008b26:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008b28:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008b2c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008b2e:	69bb      	ldr	r3, [r7, #24]
 8008b30:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008b32:	78fb      	ldrb	r3, [r7, #3]
 8008b34:	0159      	lsls	r1, r3, #5
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	440b      	add	r3, r1
 8008b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b3e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008b44:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8008b46:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008b4a:	2b03      	cmp	r3, #3
 8008b4c:	d10f      	bne.n	8008b6e <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8008b4e:	78fb      	ldrb	r3, [r7, #3]
 8008b50:	015a      	lsls	r2, r3, #5
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	4413      	add	r3, r2
 8008b56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	78fa      	ldrb	r2, [r7, #3]
 8008b5e:	0151      	lsls	r1, r2, #5
 8008b60:	693a      	ldr	r2, [r7, #16]
 8008b62:	440a      	add	r2, r1
 8008b64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b68:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008b6c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008b6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3720      	adds	r7, #32
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b08c      	sub	sp, #48	; 0x30
 8008b7c:	af02      	add	r7, sp, #8
 8008b7e:	60f8      	str	r0, [r7, #12]
 8008b80:	60b9      	str	r1, [r7, #8]
 8008b82:	4613      	mov	r3, r2
 8008b84:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	785b      	ldrb	r3, [r3, #1]
 8008b8e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008b90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b94:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d02d      	beq.n	8008bfe <USB_HC_StartXfer+0x86>
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	791b      	ldrb	r3, [r3, #4]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d129      	bne.n	8008bfe <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8008baa:	79fb      	ldrb	r3, [r7, #7]
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d117      	bne.n	8008be0 <USB_HC_StartXfer+0x68>
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	79db      	ldrb	r3, [r3, #7]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d003      	beq.n	8008bc0 <USB_HC_StartXfer+0x48>
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	79db      	ldrb	r3, [r3, #7]
 8008bbc:	2b02      	cmp	r3, #2
 8008bbe:	d10f      	bne.n	8008be0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008bc0:	69fb      	ldr	r3, [r7, #28]
 8008bc2:	015a      	lsls	r2, r3, #5
 8008bc4:	6a3b      	ldr	r3, [r7, #32]
 8008bc6:	4413      	add	r3, r2
 8008bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bcc:	68db      	ldr	r3, [r3, #12]
 8008bce:	69fa      	ldr	r2, [r7, #28]
 8008bd0:	0151      	lsls	r1, r2, #5
 8008bd2:	6a3a      	ldr	r2, [r7, #32]
 8008bd4:	440a      	add	r2, r1
 8008bd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bde:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8008be0:	79fb      	ldrb	r3, [r7, #7]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d10b      	bne.n	8008bfe <USB_HC_StartXfer+0x86>
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	795b      	ldrb	r3, [r3, #5]
 8008bea:	2b01      	cmp	r3, #1
 8008bec:	d107      	bne.n	8008bfe <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	785b      	ldrb	r3, [r3, #1]
 8008bf2:	4619      	mov	r1, r3
 8008bf4:	68f8      	ldr	r0, [r7, #12]
 8008bf6:	f000 fa2f 	bl	8009058 <USB_DoPing>
      return HAL_OK;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	e0f8      	b.n	8008df0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	695b      	ldr	r3, [r3, #20]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d018      	beq.n	8008c38 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	695b      	ldr	r3, [r3, #20]
 8008c0a:	68ba      	ldr	r2, [r7, #8]
 8008c0c:	8912      	ldrh	r2, [r2, #8]
 8008c0e:	4413      	add	r3, r2
 8008c10:	3b01      	subs	r3, #1
 8008c12:	68ba      	ldr	r2, [r7, #8]
 8008c14:	8912      	ldrh	r2, [r2, #8]
 8008c16:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c1a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8008c1c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008c1e:	8b7b      	ldrh	r3, [r7, #26]
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d90b      	bls.n	8008c3c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8008c24:	8b7b      	ldrh	r3, [r7, #26]
 8008c26:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008c28:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008c2a:	68ba      	ldr	r2, [r7, #8]
 8008c2c:	8912      	ldrh	r2, [r2, #8]
 8008c2e:	fb02 f203 	mul.w	r2, r2, r3
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	611a      	str	r2, [r3, #16]
 8008c36:	e001      	b.n	8008c3c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	78db      	ldrb	r3, [r3, #3]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d007      	beq.n	8008c54 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008c44:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008c46:	68ba      	ldr	r2, [r7, #8]
 8008c48:	8912      	ldrh	r2, [r2, #8]
 8008c4a:	fb02 f203 	mul.w	r2, r2, r3
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	611a      	str	r2, [r3, #16]
 8008c52:	e003      	b.n	8008c5c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	695a      	ldr	r2, [r3, #20]
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	691b      	ldr	r3, [r3, #16]
 8008c60:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008c64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008c66:	04d9      	lsls	r1, r3, #19
 8008c68:	4b63      	ldr	r3, [pc, #396]	; (8008df8 <USB_HC_StartXfer+0x280>)
 8008c6a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008c6c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	7a9b      	ldrb	r3, [r3, #10]
 8008c72:	075b      	lsls	r3, r3, #29
 8008c74:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008c78:	69f9      	ldr	r1, [r7, #28]
 8008c7a:	0148      	lsls	r0, r1, #5
 8008c7c:	6a39      	ldr	r1, [r7, #32]
 8008c7e:	4401      	add	r1, r0
 8008c80:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008c84:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008c86:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008c88:	79fb      	ldrb	r3, [r7, #7]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d009      	beq.n	8008ca2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	68d9      	ldr	r1, [r3, #12]
 8008c92:	69fb      	ldr	r3, [r7, #28]
 8008c94:	015a      	lsls	r2, r3, #5
 8008c96:	6a3b      	ldr	r3, [r7, #32]
 8008c98:	4413      	add	r3, r2
 8008c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c9e:	460a      	mov	r2, r1
 8008ca0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008ca2:	6a3b      	ldr	r3, [r7, #32]
 8008ca4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	f003 0301 	and.w	r3, r3, #1
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	bf0c      	ite	eq
 8008cb2:	2301      	moveq	r3, #1
 8008cb4:	2300      	movne	r3, #0
 8008cb6:	b2db      	uxtb	r3, r3
 8008cb8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008cba:	69fb      	ldr	r3, [r7, #28]
 8008cbc:	015a      	lsls	r2, r3, #5
 8008cbe:	6a3b      	ldr	r3, [r7, #32]
 8008cc0:	4413      	add	r3, r2
 8008cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	69fa      	ldr	r2, [r7, #28]
 8008cca:	0151      	lsls	r1, r2, #5
 8008ccc:	6a3a      	ldr	r2, [r7, #32]
 8008cce:	440a      	add	r2, r1
 8008cd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008cd4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008cd8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008cda:	69fb      	ldr	r3, [r7, #28]
 8008cdc:	015a      	lsls	r2, r3, #5
 8008cde:	6a3b      	ldr	r3, [r7, #32]
 8008ce0:	4413      	add	r3, r2
 8008ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ce6:	681a      	ldr	r2, [r3, #0]
 8008ce8:	7e7b      	ldrb	r3, [r7, #25]
 8008cea:	075b      	lsls	r3, r3, #29
 8008cec:	69f9      	ldr	r1, [r7, #28]
 8008cee:	0148      	lsls	r0, r1, #5
 8008cf0:	6a39      	ldr	r1, [r7, #32]
 8008cf2:	4401      	add	r1, r0
 8008cf4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008cfc:	69fb      	ldr	r3, [r7, #28]
 8008cfe:	015a      	lsls	r2, r3, #5
 8008d00:	6a3b      	ldr	r3, [r7, #32]
 8008d02:	4413      	add	r3, r2
 8008d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008d12:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	78db      	ldrb	r3, [r3, #3]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d004      	beq.n	8008d26 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d22:	613b      	str	r3, [r7, #16]
 8008d24:	e003      	b.n	8008d2e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008d2c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008d34:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008d36:	69fb      	ldr	r3, [r7, #28]
 8008d38:	015a      	lsls	r2, r3, #5
 8008d3a:	6a3b      	ldr	r3, [r7, #32]
 8008d3c:	4413      	add	r3, r2
 8008d3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d42:	461a      	mov	r2, r3
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008d48:	79fb      	ldrb	r3, [r7, #7]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d001      	beq.n	8008d52 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	e04e      	b.n	8008df0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	78db      	ldrb	r3, [r3, #3]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d149      	bne.n	8008dee <USB_HC_StartXfer+0x276>
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	695b      	ldr	r3, [r3, #20]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d045      	beq.n	8008dee <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	79db      	ldrb	r3, [r3, #7]
 8008d66:	2b03      	cmp	r3, #3
 8008d68:	d830      	bhi.n	8008dcc <USB_HC_StartXfer+0x254>
 8008d6a:	a201      	add	r2, pc, #4	; (adr r2, 8008d70 <USB_HC_StartXfer+0x1f8>)
 8008d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d70:	08008d81 	.word	0x08008d81
 8008d74:	08008da5 	.word	0x08008da5
 8008d78:	08008d81 	.word	0x08008d81
 8008d7c:	08008da5 	.word	0x08008da5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	695b      	ldr	r3, [r3, #20]
 8008d84:	3303      	adds	r3, #3
 8008d86:	089b      	lsrs	r3, r3, #2
 8008d88:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008d8a:	8afa      	ldrh	r2, [r7, #22]
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d90:	b29b      	uxth	r3, r3
 8008d92:	429a      	cmp	r2, r3
 8008d94:	d91c      	bls.n	8008dd0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	699b      	ldr	r3, [r3, #24]
 8008d9a:	f043 0220 	orr.w	r2, r3, #32
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	619a      	str	r2, [r3, #24]
        }
        break;
 8008da2:	e015      	b.n	8008dd0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	695b      	ldr	r3, [r3, #20]
 8008da8:	3303      	adds	r3, #3
 8008daa:	089b      	lsrs	r3, r3, #2
 8008dac:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008dae:	8afa      	ldrh	r2, [r7, #22]
 8008db0:	6a3b      	ldr	r3, [r7, #32]
 8008db2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008db6:	691b      	ldr	r3, [r3, #16]
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	d90a      	bls.n	8008dd4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	699b      	ldr	r3, [r3, #24]
 8008dc2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	619a      	str	r2, [r3, #24]
        }
        break;
 8008dca:	e003      	b.n	8008dd4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008dcc:	bf00      	nop
 8008dce:	e002      	b.n	8008dd6 <USB_HC_StartXfer+0x25e>
        break;
 8008dd0:	bf00      	nop
 8008dd2:	e000      	b.n	8008dd6 <USB_HC_StartXfer+0x25e>
        break;
 8008dd4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	68d9      	ldr	r1, [r3, #12]
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	785a      	ldrb	r2, [r3, #1]
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	695b      	ldr	r3, [r3, #20]
 8008de2:	b29b      	uxth	r3, r3
 8008de4:	2000      	movs	r0, #0
 8008de6:	9000      	str	r0, [sp, #0]
 8008de8:	68f8      	ldr	r0, [r7, #12]
 8008dea:	f7ff fb53 	bl	8008494 <USB_WritePacket>
  }

  return HAL_OK;
 8008dee:	2300      	movs	r3, #0
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3728      	adds	r7, #40	; 0x28
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}
 8008df8:	1ff80000 	.word	0x1ff80000

08008dfc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b085      	sub	sp, #20
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e0e:	695b      	ldr	r3, [r3, #20]
 8008e10:	b29b      	uxth	r3, r3
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3714      	adds	r7, #20
 8008e16:	46bd      	mov	sp, r7
 8008e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1c:	4770      	bx	lr

08008e1e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008e1e:	b480      	push	{r7}
 8008e20:	b089      	sub	sp, #36	; 0x24
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
 8008e26:	460b      	mov	r3, r1
 8008e28:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8008e2e:	78fb      	ldrb	r3, [r7, #3]
 8008e30:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8008e32:	2300      	movs	r3, #0
 8008e34:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	015a      	lsls	r2, r3, #5
 8008e3a:	69bb      	ldr	r3, [r7, #24]
 8008e3c:	4413      	add	r3, r2
 8008e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	0c9b      	lsrs	r3, r3, #18
 8008e46:	f003 0303 	and.w	r3, r3, #3
 8008e4a:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	015a      	lsls	r2, r3, #5
 8008e50:	69bb      	ldr	r3, [r7, #24]
 8008e52:	4413      	add	r3, r2
 8008e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	0fdb      	lsrs	r3, r3, #31
 8008e5c:	f003 0301 	and.w	r3, r3, #1
 8008e60:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	689b      	ldr	r3, [r3, #8]
 8008e66:	f003 0320 	and.w	r3, r3, #32
 8008e6a:	2b20      	cmp	r3, #32
 8008e6c:	d104      	bne.n	8008e78 <USB_HC_Halt+0x5a>
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d101      	bne.n	8008e78 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008e74:	2300      	movs	r3, #0
 8008e76:	e0e8      	b.n	800904a <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d002      	beq.n	8008e84 <USB_HC_Halt+0x66>
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	2b02      	cmp	r3, #2
 8008e82:	d173      	bne.n	8008f6c <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	015a      	lsls	r2, r3, #5
 8008e88:	69bb      	ldr	r3, [r7, #24]
 8008e8a:	4413      	add	r3, r2
 8008e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	697a      	ldr	r2, [r7, #20]
 8008e94:	0151      	lsls	r1, r2, #5
 8008e96:	69ba      	ldr	r2, [r7, #24]
 8008e98:	440a      	add	r2, r1
 8008e9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ea2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	689b      	ldr	r3, [r3, #8]
 8008ea8:	f003 0320 	and.w	r3, r3, #32
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	f040 80cb 	bne.w	8009048 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eb6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d143      	bne.n	8008f46 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	015a      	lsls	r2, r3, #5
 8008ec2:	69bb      	ldr	r3, [r7, #24]
 8008ec4:	4413      	add	r3, r2
 8008ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	697a      	ldr	r2, [r7, #20]
 8008ece:	0151      	lsls	r1, r2, #5
 8008ed0:	69ba      	ldr	r2, [r7, #24]
 8008ed2:	440a      	add	r2, r1
 8008ed4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ed8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008edc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	015a      	lsls	r2, r3, #5
 8008ee2:	69bb      	ldr	r3, [r7, #24]
 8008ee4:	4413      	add	r3, r2
 8008ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	697a      	ldr	r2, [r7, #20]
 8008eee:	0151      	lsls	r1, r2, #5
 8008ef0:	69ba      	ldr	r2, [r7, #24]
 8008ef2:	440a      	add	r2, r1
 8008ef4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ef8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008efc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	015a      	lsls	r2, r3, #5
 8008f02:	69bb      	ldr	r3, [r7, #24]
 8008f04:	4413      	add	r3, r2
 8008f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	697a      	ldr	r2, [r7, #20]
 8008f0e:	0151      	lsls	r1, r2, #5
 8008f10:	69ba      	ldr	r2, [r7, #24]
 8008f12:	440a      	add	r2, r1
 8008f14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f18:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008f1c:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8008f1e:	69fb      	ldr	r3, [r7, #28]
 8008f20:	3301      	adds	r3, #1
 8008f22:	61fb      	str	r3, [r7, #28]
 8008f24:	69fb      	ldr	r3, [r7, #28]
 8008f26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008f2a:	d81d      	bhi.n	8008f68 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	015a      	lsls	r2, r3, #5
 8008f30:	69bb      	ldr	r3, [r7, #24]
 8008f32:	4413      	add	r3, r2
 8008f34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f42:	d0ec      	beq.n	8008f1e <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008f44:	e080      	b.n	8009048 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	015a      	lsls	r2, r3, #5
 8008f4a:	69bb      	ldr	r3, [r7, #24]
 8008f4c:	4413      	add	r3, r2
 8008f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	697a      	ldr	r2, [r7, #20]
 8008f56:	0151      	lsls	r1, r2, #5
 8008f58:	69ba      	ldr	r2, [r7, #24]
 8008f5a:	440a      	add	r2, r1
 8008f5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008f64:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008f66:	e06f      	b.n	8009048 <USB_HC_Halt+0x22a>
            break;
 8008f68:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008f6a:	e06d      	b.n	8009048 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	015a      	lsls	r2, r3, #5
 8008f70:	69bb      	ldr	r3, [r7, #24]
 8008f72:	4413      	add	r3, r2
 8008f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	697a      	ldr	r2, [r7, #20]
 8008f7c:	0151      	lsls	r1, r2, #5
 8008f7e:	69ba      	ldr	r2, [r7, #24]
 8008f80:	440a      	add	r2, r1
 8008f82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f8a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008f8c:	69bb      	ldr	r3, [r7, #24]
 8008f8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f92:	691b      	ldr	r3, [r3, #16]
 8008f94:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d143      	bne.n	8009024 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	015a      	lsls	r2, r3, #5
 8008fa0:	69bb      	ldr	r3, [r7, #24]
 8008fa2:	4413      	add	r3, r2
 8008fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	697a      	ldr	r2, [r7, #20]
 8008fac:	0151      	lsls	r1, r2, #5
 8008fae:	69ba      	ldr	r2, [r7, #24]
 8008fb0:	440a      	add	r2, r1
 8008fb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008fb6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008fba:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	015a      	lsls	r2, r3, #5
 8008fc0:	69bb      	ldr	r3, [r7, #24]
 8008fc2:	4413      	add	r3, r2
 8008fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	697a      	ldr	r2, [r7, #20]
 8008fcc:	0151      	lsls	r1, r2, #5
 8008fce:	69ba      	ldr	r2, [r7, #24]
 8008fd0:	440a      	add	r2, r1
 8008fd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008fd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008fda:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	015a      	lsls	r2, r3, #5
 8008fe0:	69bb      	ldr	r3, [r7, #24]
 8008fe2:	4413      	add	r3, r2
 8008fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	697a      	ldr	r2, [r7, #20]
 8008fec:	0151      	lsls	r1, r2, #5
 8008fee:	69ba      	ldr	r2, [r7, #24]
 8008ff0:	440a      	add	r2, r1
 8008ff2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ff6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008ffa:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008ffc:	69fb      	ldr	r3, [r7, #28]
 8008ffe:	3301      	adds	r3, #1
 8009000:	61fb      	str	r3, [r7, #28]
 8009002:	69fb      	ldr	r3, [r7, #28]
 8009004:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009008:	d81d      	bhi.n	8009046 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	015a      	lsls	r2, r3, #5
 800900e:	69bb      	ldr	r3, [r7, #24]
 8009010:	4413      	add	r3, r2
 8009012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800901c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009020:	d0ec      	beq.n	8008ffc <USB_HC_Halt+0x1de>
 8009022:	e011      	b.n	8009048 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	015a      	lsls	r2, r3, #5
 8009028:	69bb      	ldr	r3, [r7, #24]
 800902a:	4413      	add	r3, r2
 800902c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	697a      	ldr	r2, [r7, #20]
 8009034:	0151      	lsls	r1, r2, #5
 8009036:	69ba      	ldr	r2, [r7, #24]
 8009038:	440a      	add	r2, r1
 800903a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800903e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009042:	6013      	str	r3, [r2, #0]
 8009044:	e000      	b.n	8009048 <USB_HC_Halt+0x22a>
          break;
 8009046:	bf00      	nop
    }
  }

  return HAL_OK;
 8009048:	2300      	movs	r3, #0
}
 800904a:	4618      	mov	r0, r3
 800904c:	3724      	adds	r7, #36	; 0x24
 800904e:	46bd      	mov	sp, r7
 8009050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009054:	4770      	bx	lr
	...

08009058 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009058:	b480      	push	{r7}
 800905a:	b087      	sub	sp, #28
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
 8009060:	460b      	mov	r3, r1
 8009062:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009068:	78fb      	ldrb	r3, [r7, #3]
 800906a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800906c:	2301      	movs	r3, #1
 800906e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	04da      	lsls	r2, r3, #19
 8009074:	4b15      	ldr	r3, [pc, #84]	; (80090cc <USB_DoPing+0x74>)
 8009076:	4013      	ands	r3, r2
 8009078:	693a      	ldr	r2, [r7, #16]
 800907a:	0151      	lsls	r1, r2, #5
 800907c:	697a      	ldr	r2, [r7, #20]
 800907e:	440a      	add	r2, r1
 8009080:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009084:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009088:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	015a      	lsls	r2, r3, #5
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	4413      	add	r3, r2
 8009092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80090a0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80090a8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	015a      	lsls	r2, r3, #5
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	4413      	add	r3, r2
 80090b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090b6:	461a      	mov	r2, r3
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80090bc:	2300      	movs	r3, #0
}
 80090be:	4618      	mov	r0, r3
 80090c0:	371c      	adds	r7, #28
 80090c2:	46bd      	mov	sp, r7
 80090c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c8:	4770      	bx	lr
 80090ca:	bf00      	nop
 80090cc:	1ff80000 	.word	0x1ff80000

080090d0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b086      	sub	sp, #24
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80090dc:	2300      	movs	r3, #0
 80090de:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f7ff f935 	bl	8008350 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80090e6:	2110      	movs	r1, #16
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f7ff f98f 	bl	800840c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f7ff f9b0 	bl	8008454 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80090f4:	2300      	movs	r3, #0
 80090f6:	613b      	str	r3, [r7, #16]
 80090f8:	e01f      	b.n	800913a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	015a      	lsls	r2, r3, #5
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	4413      	add	r3, r2
 8009102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009110:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009118:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009120:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	015a      	lsls	r2, r3, #5
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	4413      	add	r3, r2
 800912a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800912e:	461a      	mov	r2, r3
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	3301      	adds	r3, #1
 8009138:	613b      	str	r3, [r7, #16]
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	2b0f      	cmp	r3, #15
 800913e:	d9dc      	bls.n	80090fa <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009140:	2300      	movs	r3, #0
 8009142:	613b      	str	r3, [r7, #16]
 8009144:	e034      	b.n	80091b0 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	015a      	lsls	r2, r3, #5
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	4413      	add	r3, r2
 800914e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800915c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009164:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800916c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	015a      	lsls	r2, r3, #5
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	4413      	add	r3, r2
 8009176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800917a:	461a      	mov	r2, r3
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	3301      	adds	r3, #1
 8009184:	617b      	str	r3, [r7, #20]
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800918c:	d80c      	bhi.n	80091a8 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	015a      	lsls	r2, r3, #5
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	4413      	add	r3, r2
 8009196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091a4:	d0ec      	beq.n	8009180 <USB_StopHost+0xb0>
 80091a6:	e000      	b.n	80091aa <USB_StopHost+0xda>
        break;
 80091a8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	3301      	adds	r3, #1
 80091ae:	613b      	str	r3, [r7, #16]
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	2b0f      	cmp	r3, #15
 80091b4:	d9c7      	bls.n	8009146 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091bc:	461a      	mov	r2, r3
 80091be:	f04f 33ff 	mov.w	r3, #4294967295
 80091c2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f04f 32ff 	mov.w	r2, #4294967295
 80091ca:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f7ff f8ae 	bl	800832e <USB_EnableGlobalInt>

  return HAL_OK;
 80091d2:	2300      	movs	r3, #0
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3718      	adds	r7, #24
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80091dc:	b590      	push	{r4, r7, lr}
 80091de:	b089      	sub	sp, #36	; 0x24
 80091e0:	af04      	add	r7, sp, #16
 80091e2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80091e4:	2301      	movs	r3, #1
 80091e6:	2202      	movs	r2, #2
 80091e8:	2102      	movs	r1, #2
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 fcb8 	bl	8009b60 <USBH_FindInterface>
 80091f0:	4603      	mov	r3, r0
 80091f2:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80091f4:	7bfb      	ldrb	r3, [r7, #15]
 80091f6:	2bff      	cmp	r3, #255	; 0xff
 80091f8:	d002      	beq.n	8009200 <USBH_CDC_InterfaceInit+0x24>
 80091fa:	7bfb      	ldrb	r3, [r7, #15]
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	d901      	bls.n	8009204 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009200:	2302      	movs	r3, #2
 8009202:	e13d      	b.n	8009480 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8009204:	7bfb      	ldrb	r3, [r7, #15]
 8009206:	4619      	mov	r1, r3
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f000 fc8d 	bl	8009b28 <USBH_SelectInterface>
 800920e:	4603      	mov	r3, r0
 8009210:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009212:	7bbb      	ldrb	r3, [r7, #14]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d001      	beq.n	800921c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009218:	2302      	movs	r3, #2
 800921a:	e131      	b.n	8009480 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8009222:	2050      	movs	r0, #80	; 0x50
 8009224:	f005 fb90 	bl	800e948 <malloc>
 8009228:	4603      	mov	r3, r0
 800922a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009232:	69db      	ldr	r3, [r3, #28]
 8009234:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d101      	bne.n	8009240 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800923c:	2302      	movs	r3, #2
 800923e:	e11f      	b.n	8009480 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009240:	2250      	movs	r2, #80	; 0x50
 8009242:	2100      	movs	r1, #0
 8009244:	68b8      	ldr	r0, [r7, #8]
 8009246:	f005 fb9d 	bl	800e984 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800924a:	7bfb      	ldrb	r3, [r7, #15]
 800924c:	687a      	ldr	r2, [r7, #4]
 800924e:	211a      	movs	r1, #26
 8009250:	fb01 f303 	mul.w	r3, r1, r3
 8009254:	4413      	add	r3, r2
 8009256:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	b25b      	sxtb	r3, r3
 800925e:	2b00      	cmp	r3, #0
 8009260:	da15      	bge.n	800928e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009262:	7bfb      	ldrb	r3, [r7, #15]
 8009264:	687a      	ldr	r2, [r7, #4]
 8009266:	211a      	movs	r1, #26
 8009268:	fb01 f303 	mul.w	r3, r1, r3
 800926c:	4413      	add	r3, r2
 800926e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009272:	781a      	ldrb	r2, [r3, #0]
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009278:	7bfb      	ldrb	r3, [r7, #15]
 800927a:	687a      	ldr	r2, [r7, #4]
 800927c:	211a      	movs	r1, #26
 800927e:	fb01 f303 	mul.w	r3, r1, r3
 8009282:	4413      	add	r3, r2
 8009284:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009288:	881a      	ldrh	r2, [r3, #0]
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	785b      	ldrb	r3, [r3, #1]
 8009292:	4619      	mov	r1, r3
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f002 f890 	bl	800b3ba <USBH_AllocPipe>
 800929a:	4603      	mov	r3, r0
 800929c:	461a      	mov	r2, r3
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	7819      	ldrb	r1, [r3, #0]
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	7858      	ldrb	r0, [r3, #1]
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80092b6:	68ba      	ldr	r2, [r7, #8]
 80092b8:	8952      	ldrh	r2, [r2, #10]
 80092ba:	9202      	str	r2, [sp, #8]
 80092bc:	2203      	movs	r2, #3
 80092be:	9201      	str	r2, [sp, #4]
 80092c0:	9300      	str	r3, [sp, #0]
 80092c2:	4623      	mov	r3, r4
 80092c4:	4602      	mov	r2, r0
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f002 f848 	bl	800b35c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	781b      	ldrb	r3, [r3, #0]
 80092d0:	2200      	movs	r2, #0
 80092d2:	4619      	mov	r1, r3
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f005 fa87 	bl	800e7e8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80092da:	2300      	movs	r3, #0
 80092dc:	2200      	movs	r2, #0
 80092de:	210a      	movs	r1, #10
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f000 fc3d 	bl	8009b60 <USBH_FindInterface>
 80092e6:	4603      	mov	r3, r0
 80092e8:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80092ea:	7bfb      	ldrb	r3, [r7, #15]
 80092ec:	2bff      	cmp	r3, #255	; 0xff
 80092ee:	d002      	beq.n	80092f6 <USBH_CDC_InterfaceInit+0x11a>
 80092f0:	7bfb      	ldrb	r3, [r7, #15]
 80092f2:	2b01      	cmp	r3, #1
 80092f4:	d901      	bls.n	80092fa <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80092f6:	2302      	movs	r3, #2
 80092f8:	e0c2      	b.n	8009480 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80092fa:	7bfb      	ldrb	r3, [r7, #15]
 80092fc:	687a      	ldr	r2, [r7, #4]
 80092fe:	211a      	movs	r1, #26
 8009300:	fb01 f303 	mul.w	r3, r1, r3
 8009304:	4413      	add	r3, r2
 8009306:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800930a:	781b      	ldrb	r3, [r3, #0]
 800930c:	b25b      	sxtb	r3, r3
 800930e:	2b00      	cmp	r3, #0
 8009310:	da16      	bge.n	8009340 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009312:	7bfb      	ldrb	r3, [r7, #15]
 8009314:	687a      	ldr	r2, [r7, #4]
 8009316:	211a      	movs	r1, #26
 8009318:	fb01 f303 	mul.w	r3, r1, r3
 800931c:	4413      	add	r3, r2
 800931e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009322:	781a      	ldrb	r2, [r3, #0]
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009328:	7bfb      	ldrb	r3, [r7, #15]
 800932a:	687a      	ldr	r2, [r7, #4]
 800932c:	211a      	movs	r1, #26
 800932e:	fb01 f303 	mul.w	r3, r1, r3
 8009332:	4413      	add	r3, r2
 8009334:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009338:	881a      	ldrh	r2, [r3, #0]
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	835a      	strh	r2, [r3, #26]
 800933e:	e015      	b.n	800936c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009340:	7bfb      	ldrb	r3, [r7, #15]
 8009342:	687a      	ldr	r2, [r7, #4]
 8009344:	211a      	movs	r1, #26
 8009346:	fb01 f303 	mul.w	r3, r1, r3
 800934a:	4413      	add	r3, r2
 800934c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009350:	781a      	ldrb	r2, [r3, #0]
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009356:	7bfb      	ldrb	r3, [r7, #15]
 8009358:	687a      	ldr	r2, [r7, #4]
 800935a:	211a      	movs	r1, #26
 800935c:	fb01 f303 	mul.w	r3, r1, r3
 8009360:	4413      	add	r3, r2
 8009362:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009366:	881a      	ldrh	r2, [r3, #0]
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800936c:	7bfb      	ldrb	r3, [r7, #15]
 800936e:	687a      	ldr	r2, [r7, #4]
 8009370:	211a      	movs	r1, #26
 8009372:	fb01 f303 	mul.w	r3, r1, r3
 8009376:	4413      	add	r3, r2
 8009378:	f203 3356 	addw	r3, r3, #854	; 0x356
 800937c:	781b      	ldrb	r3, [r3, #0]
 800937e:	b25b      	sxtb	r3, r3
 8009380:	2b00      	cmp	r3, #0
 8009382:	da16      	bge.n	80093b2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009384:	7bfb      	ldrb	r3, [r7, #15]
 8009386:	687a      	ldr	r2, [r7, #4]
 8009388:	211a      	movs	r1, #26
 800938a:	fb01 f303 	mul.w	r3, r1, r3
 800938e:	4413      	add	r3, r2
 8009390:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009394:	781a      	ldrb	r2, [r3, #0]
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800939a:	7bfb      	ldrb	r3, [r7, #15]
 800939c:	687a      	ldr	r2, [r7, #4]
 800939e:	211a      	movs	r1, #26
 80093a0:	fb01 f303 	mul.w	r3, r1, r3
 80093a4:	4413      	add	r3, r2
 80093a6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80093aa:	881a      	ldrh	r2, [r3, #0]
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	835a      	strh	r2, [r3, #26]
 80093b0:	e015      	b.n	80093de <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80093b2:	7bfb      	ldrb	r3, [r7, #15]
 80093b4:	687a      	ldr	r2, [r7, #4]
 80093b6:	211a      	movs	r1, #26
 80093b8:	fb01 f303 	mul.w	r3, r1, r3
 80093bc:	4413      	add	r3, r2
 80093be:	f203 3356 	addw	r3, r3, #854	; 0x356
 80093c2:	781a      	ldrb	r2, [r3, #0]
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80093c8:	7bfb      	ldrb	r3, [r7, #15]
 80093ca:	687a      	ldr	r2, [r7, #4]
 80093cc:	211a      	movs	r1, #26
 80093ce:	fb01 f303 	mul.w	r3, r1, r3
 80093d2:	4413      	add	r3, r2
 80093d4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80093d8:	881a      	ldrh	r2, [r3, #0]
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	7b9b      	ldrb	r3, [r3, #14]
 80093e2:	4619      	mov	r1, r3
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f001 ffe8 	bl	800b3ba <USBH_AllocPipe>
 80093ea:	4603      	mov	r3, r0
 80093ec:	461a      	mov	r2, r3
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	7bdb      	ldrb	r3, [r3, #15]
 80093f6:	4619      	mov	r1, r3
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f001 ffde 	bl	800b3ba <USBH_AllocPipe>
 80093fe:	4603      	mov	r3, r0
 8009400:	461a      	mov	r2, r3
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	7b59      	ldrb	r1, [r3, #13]
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	7b98      	ldrb	r0, [r3, #14]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800941a:	68ba      	ldr	r2, [r7, #8]
 800941c:	8b12      	ldrh	r2, [r2, #24]
 800941e:	9202      	str	r2, [sp, #8]
 8009420:	2202      	movs	r2, #2
 8009422:	9201      	str	r2, [sp, #4]
 8009424:	9300      	str	r3, [sp, #0]
 8009426:	4623      	mov	r3, r4
 8009428:	4602      	mov	r2, r0
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f001 ff96 	bl	800b35c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	7b19      	ldrb	r1, [r3, #12]
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	7bd8      	ldrb	r0, [r3, #15]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009444:	68ba      	ldr	r2, [r7, #8]
 8009446:	8b52      	ldrh	r2, [r2, #26]
 8009448:	9202      	str	r2, [sp, #8]
 800944a:	2202      	movs	r2, #2
 800944c:	9201      	str	r2, [sp, #4]
 800944e:	9300      	str	r3, [sp, #0]
 8009450:	4623      	mov	r3, r4
 8009452:	4602      	mov	r2, r0
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f001 ff81 	bl	800b35c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	2200      	movs	r2, #0
 800945e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	7b5b      	ldrb	r3, [r3, #13]
 8009466:	2200      	movs	r2, #0
 8009468:	4619      	mov	r1, r3
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f005 f9bc 	bl	800e7e8 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	7b1b      	ldrb	r3, [r3, #12]
 8009474:	2200      	movs	r2, #0
 8009476:	4619      	mov	r1, r3
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f005 f9b5 	bl	800e7e8 <USBH_LL_SetToggle>

  return USBH_OK;
 800947e:	2300      	movs	r3, #0
}
 8009480:	4618      	mov	r0, r3
 8009482:	3714      	adds	r7, #20
 8009484:	46bd      	mov	sp, r7
 8009486:	bd90      	pop	{r4, r7, pc}

08009488 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b084      	sub	sp, #16
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009496:	69db      	ldr	r3, [r3, #28]
 8009498:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	781b      	ldrb	r3, [r3, #0]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d00e      	beq.n	80094c0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	781b      	ldrb	r3, [r3, #0]
 80094a6:	4619      	mov	r1, r3
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f001 ff76 	bl	800b39a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	781b      	ldrb	r3, [r3, #0]
 80094b2:	4619      	mov	r1, r3
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f001 ffa1 	bl	800b3fc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2200      	movs	r2, #0
 80094be:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	7b1b      	ldrb	r3, [r3, #12]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d00e      	beq.n	80094e6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	7b1b      	ldrb	r3, [r3, #12]
 80094cc:	4619      	mov	r1, r3
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f001 ff63 	bl	800b39a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	7b1b      	ldrb	r3, [r3, #12]
 80094d8:	4619      	mov	r1, r3
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f001 ff8e 	bl	800b3fc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2200      	movs	r2, #0
 80094e4:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	7b5b      	ldrb	r3, [r3, #13]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d00e      	beq.n	800950c <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	7b5b      	ldrb	r3, [r3, #13]
 80094f2:	4619      	mov	r1, r3
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f001 ff50 	bl	800b39a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	7b5b      	ldrb	r3, [r3, #13]
 80094fe:	4619      	mov	r1, r3
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f001 ff7b 	bl	800b3fc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2200      	movs	r2, #0
 800950a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009512:	69db      	ldr	r3, [r3, #28]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d00b      	beq.n	8009530 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800951e:	69db      	ldr	r3, [r3, #28]
 8009520:	4618      	mov	r0, r3
 8009522:	f005 fa19 	bl	800e958 <free>
    phost->pActiveClass->pData = 0U;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800952c:	2200      	movs	r2, #0
 800952e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009530:	2300      	movs	r3, #0
}
 8009532:	4618      	mov	r0, r3
 8009534:	3710      	adds	r7, #16
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}

0800953a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800953a:	b580      	push	{r7, lr}
 800953c:	b084      	sub	sp, #16
 800953e:	af00      	add	r7, sp, #0
 8009540:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009548:	69db      	ldr	r3, [r3, #28]
 800954a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	3340      	adds	r3, #64	; 0x40
 8009550:	4619      	mov	r1, r3
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f000 f8b1 	bl	80096ba <GetLineCoding>
 8009558:	4603      	mov	r3, r0
 800955a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800955c:	7afb      	ldrb	r3, [r7, #11]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d105      	bne.n	800956e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009568:	2102      	movs	r1, #2
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800956e:	7afb      	ldrb	r3, [r7, #11]
}
 8009570:	4618      	mov	r0, r3
 8009572:	3710      	adds	r7, #16
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}

08009578 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b084      	sub	sp, #16
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009580:	2301      	movs	r3, #1
 8009582:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009584:	2300      	movs	r3, #0
 8009586:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800958e:	69db      	ldr	r3, [r3, #28]
 8009590:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009598:	2b04      	cmp	r3, #4
 800959a:	d877      	bhi.n	800968c <USBH_CDC_Process+0x114>
 800959c:	a201      	add	r2, pc, #4	; (adr r2, 80095a4 <USBH_CDC_Process+0x2c>)
 800959e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095a2:	bf00      	nop
 80095a4:	080095b9 	.word	0x080095b9
 80095a8:	080095bf 	.word	0x080095bf
 80095ac:	080095ef 	.word	0x080095ef
 80095b0:	08009663 	.word	0x08009663
 80095b4:	08009671 	.word	0x08009671
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80095b8:	2300      	movs	r3, #0
 80095ba:	73fb      	strb	r3, [r7, #15]
      break;
 80095bc:	e06d      	b.n	800969a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095c2:	4619      	mov	r1, r3
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f000 f897 	bl	80096f8 <SetLineCoding>
 80095ca:	4603      	mov	r3, r0
 80095cc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80095ce:	7bbb      	ldrb	r3, [r7, #14]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d104      	bne.n	80095de <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	2202      	movs	r2, #2
 80095d8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80095dc:	e058      	b.n	8009690 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80095de:	7bbb      	ldrb	r3, [r7, #14]
 80095e0:	2b01      	cmp	r3, #1
 80095e2:	d055      	beq.n	8009690 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	2204      	movs	r2, #4
 80095e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80095ec:	e050      	b.n	8009690 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	3340      	adds	r3, #64	; 0x40
 80095f2:	4619      	mov	r1, r3
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f000 f860 	bl	80096ba <GetLineCoding>
 80095fa:	4603      	mov	r3, r0
 80095fc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80095fe:	7bbb      	ldrb	r3, [r7, #14]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d126      	bne.n	8009652 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	2200      	movs	r2, #0
 8009608:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009616:	791b      	ldrb	r3, [r3, #4]
 8009618:	429a      	cmp	r2, r3
 800961a:	d13b      	bne.n	8009694 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009626:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009628:	429a      	cmp	r2, r3
 800962a:	d133      	bne.n	8009694 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009636:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009638:	429a      	cmp	r2, r3
 800963a:	d12b      	bne.n	8009694 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009644:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009646:	429a      	cmp	r2, r3
 8009648:	d124      	bne.n	8009694 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f000 f982 	bl	8009954 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009650:	e020      	b.n	8009694 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009652:	7bbb      	ldrb	r3, [r7, #14]
 8009654:	2b01      	cmp	r3, #1
 8009656:	d01d      	beq.n	8009694 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	2204      	movs	r2, #4
 800965c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009660:	e018      	b.n	8009694 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f000 f867 	bl	8009736 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f000 f8f6 	bl	800985a <CDC_ProcessReception>
      break;
 800966e:	e014      	b.n	800969a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009670:	2100      	movs	r1, #0
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f001 f951 	bl	800a91a <USBH_ClrFeature>
 8009678:	4603      	mov	r3, r0
 800967a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800967c:	7bbb      	ldrb	r3, [r7, #14]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d10a      	bne.n	8009698 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	2200      	movs	r2, #0
 8009686:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800968a:	e005      	b.n	8009698 <USBH_CDC_Process+0x120>

    default:
      break;
 800968c:	bf00      	nop
 800968e:	e004      	b.n	800969a <USBH_CDC_Process+0x122>
      break;
 8009690:	bf00      	nop
 8009692:	e002      	b.n	800969a <USBH_CDC_Process+0x122>
      break;
 8009694:	bf00      	nop
 8009696:	e000      	b.n	800969a <USBH_CDC_Process+0x122>
      break;
 8009698:	bf00      	nop

  }

  return status;
 800969a:	7bfb      	ldrb	r3, [r7, #15]
}
 800969c:	4618      	mov	r0, r3
 800969e:	3710      	adds	r7, #16
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b083      	sub	sp, #12
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80096ac:	2300      	movs	r3, #0
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	370c      	adds	r7, #12
 80096b2:	46bd      	mov	sp, r7
 80096b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b8:	4770      	bx	lr

080096ba <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80096ba:	b580      	push	{r7, lr}
 80096bc:	b082      	sub	sp, #8
 80096be:	af00      	add	r7, sp, #0
 80096c0:	6078      	str	r0, [r7, #4]
 80096c2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	22a1      	movs	r2, #161	; 0xa1
 80096c8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2221      	movs	r2, #33	; 0x21
 80096ce:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2200      	movs	r2, #0
 80096d4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2200      	movs	r2, #0
 80096da:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2207      	movs	r2, #7
 80096e0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	2207      	movs	r2, #7
 80096e6:	4619      	mov	r1, r3
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f001 faf6 	bl	800acda <USBH_CtlReq>
 80096ee:	4603      	mov	r3, r0
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3708      	adds	r7, #8
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b082      	sub	sp, #8
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2221      	movs	r2, #33	; 0x21
 8009706:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2220      	movs	r2, #32
 800970c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2200      	movs	r2, #0
 8009712:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2200      	movs	r2, #0
 8009718:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2207      	movs	r2, #7
 800971e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	2207      	movs	r2, #7
 8009724:	4619      	mov	r1, r3
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f001 fad7 	bl	800acda <USBH_CtlReq>
 800972c:	4603      	mov	r3, r0
}
 800972e:	4618      	mov	r0, r3
 8009730:	3708      	adds	r7, #8
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}

08009736 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8009736:	b580      	push	{r7, lr}
 8009738:	b086      	sub	sp, #24
 800973a:	af02      	add	r7, sp, #8
 800973c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009744:	69db      	ldr	r3, [r3, #28]
 8009746:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009748:	2300      	movs	r3, #0
 800974a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8009752:	2b01      	cmp	r3, #1
 8009754:	d002      	beq.n	800975c <CDC_ProcessTransmission+0x26>
 8009756:	2b02      	cmp	r3, #2
 8009758:	d023      	beq.n	80097a2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800975a:	e07a      	b.n	8009852 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009760:	68fa      	ldr	r2, [r7, #12]
 8009762:	8b12      	ldrh	r2, [r2, #24]
 8009764:	4293      	cmp	r3, r2
 8009766:	d90b      	bls.n	8009780 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	69d9      	ldr	r1, [r3, #28]
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	8b1a      	ldrh	r2, [r3, #24]
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	7b5b      	ldrb	r3, [r3, #13]
 8009774:	2001      	movs	r0, #1
 8009776:	9000      	str	r0, [sp, #0]
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f001 fdac 	bl	800b2d6 <USBH_BulkSendData>
 800977e:	e00b      	b.n	8009798 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8009788:	b29a      	uxth	r2, r3
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	7b5b      	ldrb	r3, [r3, #13]
 800978e:	2001      	movs	r0, #1
 8009790:	9000      	str	r0, [sp, #0]
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f001 fd9f 	bl	800b2d6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	2202      	movs	r2, #2
 800979c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80097a0:	e057      	b.n	8009852 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	7b5b      	ldrb	r3, [r3, #13]
 80097a6:	4619      	mov	r1, r3
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f004 fff3 	bl	800e794 <USBH_LL_GetURBState>
 80097ae:	4603      	mov	r3, r0
 80097b0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80097b2:	7afb      	ldrb	r3, [r7, #11]
 80097b4:	2b01      	cmp	r3, #1
 80097b6:	d136      	bne.n	8009826 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097bc:	68fa      	ldr	r2, [r7, #12]
 80097be:	8b12      	ldrh	r2, [r2, #24]
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d90e      	bls.n	80097e2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c8:	68fa      	ldr	r2, [r7, #12]
 80097ca:	8b12      	ldrh	r2, [r2, #24]
 80097cc:	1a9a      	subs	r2, r3, r2
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	69db      	ldr	r3, [r3, #28]
 80097d6:	68fa      	ldr	r2, [r7, #12]
 80097d8:	8b12      	ldrh	r2, [r2, #24]
 80097da:	441a      	add	r2, r3
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	61da      	str	r2, [r3, #28]
 80097e0:	e002      	b.n	80097e8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	2200      	movs	r2, #0
 80097e6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d004      	beq.n	80097fa <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	2201      	movs	r2, #1
 80097f4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 80097f8:	e006      	b.n	8009808 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	2200      	movs	r2, #0
 80097fe:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f000 f892 	bl	800992c <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2204      	movs	r2, #4
 800980c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800981c:	2200      	movs	r2, #0
 800981e:	4619      	mov	r1, r3
 8009820:	f001 ff1c 	bl	800b65c <osMessagePut>
      break;
 8009824:	e014      	b.n	8009850 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8009826:	7afb      	ldrb	r3, [r7, #11]
 8009828:	2b02      	cmp	r3, #2
 800982a:	d111      	bne.n	8009850 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	2201      	movs	r2, #1
 8009830:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2204      	movs	r2, #4
 8009838:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009848:	2200      	movs	r2, #0
 800984a:	4619      	mov	r1, r3
 800984c:	f001 ff06 	bl	800b65c <osMessagePut>
      break;
 8009850:	bf00      	nop
  }
}
 8009852:	bf00      	nop
 8009854:	3710      	adds	r7, #16
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}

0800985a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800985a:	b580      	push	{r7, lr}
 800985c:	b086      	sub	sp, #24
 800985e:	af00      	add	r7, sp, #0
 8009860:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009868:	69db      	ldr	r3, [r3, #28]
 800986a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800986c:	2300      	movs	r3, #0
 800986e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8009876:	2b03      	cmp	r3, #3
 8009878:	d002      	beq.n	8009880 <CDC_ProcessReception+0x26>
 800987a:	2b04      	cmp	r3, #4
 800987c:	d00e      	beq.n	800989c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800987e:	e051      	b.n	8009924 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	6a19      	ldr	r1, [r3, #32]
 8009884:	697b      	ldr	r3, [r7, #20]
 8009886:	8b5a      	ldrh	r2, [r3, #26]
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	7b1b      	ldrb	r3, [r3, #12]
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f001 fd47 	bl	800b320 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	2204      	movs	r2, #4
 8009896:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800989a:	e043      	b.n	8009924 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	7b1b      	ldrb	r3, [r3, #12]
 80098a0:	4619      	mov	r1, r3
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f004 ff76 	bl	800e794 <USBH_LL_GetURBState>
 80098a8:	4603      	mov	r3, r0
 80098aa:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80098ac:	7cfb      	ldrb	r3, [r7, #19]
 80098ae:	2b01      	cmp	r3, #1
 80098b0:	d137      	bne.n	8009922 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	7b1b      	ldrb	r3, [r3, #12]
 80098b6:	4619      	mov	r1, r3
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f004 fed9 	bl	800e670 <USBH_LL_GetLastXferSize>
 80098be:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098c4:	68fa      	ldr	r2, [r7, #12]
 80098c6:	429a      	cmp	r2, r3
 80098c8:	d016      	beq.n	80098f8 <CDC_ProcessReception+0x9e>
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	8b5b      	ldrh	r3, [r3, #26]
 80098ce:	461a      	mov	r2, r3
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d910      	bls.n	80098f8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	1ad2      	subs	r2, r2, r3
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	6a1a      	ldr	r2, [r3, #32]
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	441a      	add	r2, r3
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	2203      	movs	r2, #3
 80098f2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 80098f6:	e006      	b.n	8009906 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	2200      	movs	r2, #0
 80098fc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f000 f81d 	bl	8009940 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2204      	movs	r2, #4
 800990a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800991a:	2200      	movs	r2, #0
 800991c:	4619      	mov	r1, r3
 800991e:	f001 fe9d 	bl	800b65c <osMessagePut>
      break;
 8009922:	bf00      	nop
  }
}
 8009924:	bf00      	nop
 8009926:	3718      	adds	r7, #24
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}

0800992c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800992c:	b480      	push	{r7}
 800992e:	b083      	sub	sp, #12
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009934:	bf00      	nop
 8009936:	370c      	adds	r7, #12
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr

08009940 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009940:	b480      	push	{r7}
 8009942:	b083      	sub	sp, #12
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009948:	bf00      	nop
 800994a:	370c      	adds	r7, #12
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr

08009954 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009954:	b480      	push	{r7}
 8009956:	b083      	sub	sp, #12
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800995c:	bf00      	nop
 800995e:	370c      	adds	r7, #12
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr

08009968 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8009968:	b5b0      	push	{r4, r5, r7, lr}
 800996a:	b090      	sub	sp, #64	; 0x40
 800996c:	af00      	add	r7, sp, #0
 800996e:	60f8      	str	r0, [r7, #12]
 8009970:	60b9      	str	r1, [r7, #8]
 8009972:	4613      	mov	r3, r2
 8009974:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d101      	bne.n	8009980 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800997c:	2302      	movs	r3, #2
 800997e:	e04d      	b.n	8009a1c <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	79fa      	ldrb	r2, [r7, #7]
 8009984:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	2200      	movs	r2, #0
 800998c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	2200      	movs	r2, #0
 8009994:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8009998:	68f8      	ldr	r0, [r7, #12]
 800999a:	f000 f847 	bl	8009a2c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	2200      	movs	r2, #0
 80099a2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	2200      	movs	r2, #0
 80099aa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	2200      	movs	r2, #0
 80099b2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	2200      	movs	r2, #0
 80099ba:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d003      	beq.n	80099cc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	68ba      	ldr	r2, [r7, #8]
 80099c8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 80099cc:	4b15      	ldr	r3, [pc, #84]	; (8009a24 <USBH_Init+0xbc>)
 80099ce:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80099d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80099d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 80099d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80099dc:	2100      	movs	r1, #0
 80099de:	4618      	mov	r0, r3
 80099e0:	f001 fe14 	bl	800b60c <osMessageCreate>
 80099e4:	4602      	mov	r2, r0
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 80099ec:	4b0e      	ldr	r3, [pc, #56]	; (8009a28 <USBH_Init+0xc0>)
 80099ee:	f107 0414 	add.w	r4, r7, #20
 80099f2:	461d      	mov	r5, r3
 80099f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80099f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80099f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80099fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8009a00:	f107 0314 	add.w	r3, r7, #20
 8009a04:	68f9      	ldr	r1, [r7, #12]
 8009a06:	4618      	mov	r0, r3
 8009a08:	f001 fd6b 	bl	800b4e2 <osThreadCreate>
 8009a0c:	4602      	mov	r2, r0
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8009a14:	68f8      	ldr	r0, [r7, #12]
 8009a16:	f004 fd77 	bl	800e508 <USBH_LL_Init>

  return USBH_OK;
 8009a1a:	2300      	movs	r3, #0
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3740      	adds	r7, #64	; 0x40
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bdb0      	pop	{r4, r5, r7, pc}
 8009a24:	0800f3bc 	.word	0x0800f3bc
 8009a28:	0800f3cc 	.word	0x0800f3cc

08009a2c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b085      	sub	sp, #20
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009a34:	2300      	movs	r3, #0
 8009a36:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009a38:	2300      	movs	r3, #0
 8009a3a:	60fb      	str	r3, [r7, #12]
 8009a3c:	e009      	b.n	8009a52 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009a3e:	687a      	ldr	r2, [r7, #4]
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	33e0      	adds	r3, #224	; 0xe0
 8009a44:	009b      	lsls	r3, r3, #2
 8009a46:	4413      	add	r3, r2
 8009a48:	2200      	movs	r2, #0
 8009a4a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	3301      	adds	r3, #1
 8009a50:	60fb      	str	r3, [r7, #12]
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	2b0e      	cmp	r3, #14
 8009a56:	d9f2      	bls.n	8009a3e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009a58:	2300      	movs	r3, #0
 8009a5a:	60fb      	str	r3, [r7, #12]
 8009a5c:	e009      	b.n	8009a72 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009a5e:	687a      	ldr	r2, [r7, #4]
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	4413      	add	r3, r2
 8009a64:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009a68:	2200      	movs	r2, #0
 8009a6a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	3301      	adds	r3, #1
 8009a70:	60fb      	str	r3, [r7, #12]
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a78:	d3f1      	bcc.n	8009a5e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2200      	movs	r2, #0
 8009a84:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2201      	movs	r2, #1
 8009a8a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2201      	movs	r2, #1
 8009a98:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2240      	movs	r2, #64	; 0x40
 8009a9e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2201      	movs	r2, #1
 8009ab2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8009ac6:	2300      	movs	r3, #0
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3714      	adds	r7, #20
 8009acc:	46bd      	mov	sp, r7
 8009ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad2:	4770      	bx	lr

08009ad4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b085      	sub	sp, #20
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d016      	beq.n	8009b16 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d10e      	bne.n	8009b10 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009af8:	1c59      	adds	r1, r3, #1
 8009afa:	687a      	ldr	r2, [r7, #4]
 8009afc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8009b00:	687a      	ldr	r2, [r7, #4]
 8009b02:	33de      	adds	r3, #222	; 0xde
 8009b04:	6839      	ldr	r1, [r7, #0]
 8009b06:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	73fb      	strb	r3, [r7, #15]
 8009b0e:	e004      	b.n	8009b1a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009b10:	2302      	movs	r3, #2
 8009b12:	73fb      	strb	r3, [r7, #15]
 8009b14:	e001      	b.n	8009b1a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009b16:	2302      	movs	r3, #2
 8009b18:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3714      	adds	r7, #20
 8009b20:	46bd      	mov	sp, r7
 8009b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b26:	4770      	bx	lr

08009b28 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b085      	sub	sp, #20
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
 8009b30:	460b      	mov	r3, r1
 8009b32:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009b34:	2300      	movs	r3, #0
 8009b36:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8009b3e:	78fa      	ldrb	r2, [r7, #3]
 8009b40:	429a      	cmp	r2, r3
 8009b42:	d204      	bcs.n	8009b4e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	78fa      	ldrb	r2, [r7, #3]
 8009b48:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009b4c:	e001      	b.n	8009b52 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009b4e:	2302      	movs	r3, #2
 8009b50:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3714      	adds	r7, #20
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr

08009b60 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b087      	sub	sp, #28
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	4608      	mov	r0, r1
 8009b6a:	4611      	mov	r1, r2
 8009b6c:	461a      	mov	r2, r3
 8009b6e:	4603      	mov	r3, r0
 8009b70:	70fb      	strb	r3, [r7, #3]
 8009b72:	460b      	mov	r3, r1
 8009b74:	70bb      	strb	r3, [r7, #2]
 8009b76:	4613      	mov	r3, r2
 8009b78:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009b88:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009b8a:	e025      	b.n	8009bd8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009b8c:	7dfb      	ldrb	r3, [r7, #23]
 8009b8e:	221a      	movs	r2, #26
 8009b90:	fb02 f303 	mul.w	r3, r2, r3
 8009b94:	3308      	adds	r3, #8
 8009b96:	68fa      	ldr	r2, [r7, #12]
 8009b98:	4413      	add	r3, r2
 8009b9a:	3302      	adds	r3, #2
 8009b9c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	795b      	ldrb	r3, [r3, #5]
 8009ba2:	78fa      	ldrb	r2, [r7, #3]
 8009ba4:	429a      	cmp	r2, r3
 8009ba6:	d002      	beq.n	8009bae <USBH_FindInterface+0x4e>
 8009ba8:	78fb      	ldrb	r3, [r7, #3]
 8009baa:	2bff      	cmp	r3, #255	; 0xff
 8009bac:	d111      	bne.n	8009bd2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009bb2:	78ba      	ldrb	r2, [r7, #2]
 8009bb4:	429a      	cmp	r2, r3
 8009bb6:	d002      	beq.n	8009bbe <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009bb8:	78bb      	ldrb	r3, [r7, #2]
 8009bba:	2bff      	cmp	r3, #255	; 0xff
 8009bbc:	d109      	bne.n	8009bd2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009bc2:	787a      	ldrb	r2, [r7, #1]
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d002      	beq.n	8009bce <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009bc8:	787b      	ldrb	r3, [r7, #1]
 8009bca:	2bff      	cmp	r3, #255	; 0xff
 8009bcc:	d101      	bne.n	8009bd2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009bce:	7dfb      	ldrb	r3, [r7, #23]
 8009bd0:	e006      	b.n	8009be0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009bd2:	7dfb      	ldrb	r3, [r7, #23]
 8009bd4:	3301      	adds	r3, #1
 8009bd6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009bd8:	7dfb      	ldrb	r3, [r7, #23]
 8009bda:	2b01      	cmp	r3, #1
 8009bdc:	d9d6      	bls.n	8009b8c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009bde:	23ff      	movs	r3, #255	; 0xff
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	371c      	adds	r7, #28
 8009be4:	46bd      	mov	sp, r7
 8009be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bea:	4770      	bx	lr

08009bec <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b082      	sub	sp, #8
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f004 fcc3 	bl	800e580 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8009bfa:	2101      	movs	r1, #1
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f004 fddc 	bl	800e7ba <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009c02:	2300      	movs	r3, #0
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	3708      	adds	r7, #8
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}

08009c0c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b088      	sub	sp, #32
 8009c10:	af04      	add	r7, sp, #16
 8009c12:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009c14:	2302      	movs	r3, #2
 8009c16:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8009c22:	b2db      	uxtb	r3, r3
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	d102      	bne.n	8009c2e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2203      	movs	r2, #3
 8009c2c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	781b      	ldrb	r3, [r3, #0]
 8009c32:	b2db      	uxtb	r3, r3
 8009c34:	2b0b      	cmp	r3, #11
 8009c36:	f200 823c 	bhi.w	800a0b2 <USBH_Process+0x4a6>
 8009c3a:	a201      	add	r2, pc, #4	; (adr r2, 8009c40 <USBH_Process+0x34>)
 8009c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c40:	08009c71 	.word	0x08009c71
 8009c44:	08009cbf 	.word	0x08009cbf
 8009c48:	08009d43 	.word	0x08009d43
 8009c4c:	0800a031 	.word	0x0800a031
 8009c50:	0800a0b3 	.word	0x0800a0b3
 8009c54:	08009e03 	.word	0x08009e03
 8009c58:	08009fbb 	.word	0x08009fbb
 8009c5c:	08009e55 	.word	0x08009e55
 8009c60:	08009e91 	.word	0x08009e91
 8009c64:	08009ecb 	.word	0x08009ecb
 8009c68:	08009f13 	.word	0x08009f13
 8009c6c:	0800a019 	.word	0x0800a019
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009c76:	b2db      	uxtb	r3, r3
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	f000 821c 	beq.w	800a0b6 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2201      	movs	r2, #1
 8009c82:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009c84:	20c8      	movs	r0, #200	; 0xc8
 8009c86:	f004 fddf 	bl	800e848 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f004 fcd5 	bl	800e63a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2200      	movs	r2, #0
 8009c94:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	4619      	mov	r1, r3
 8009cb8:	f001 fcd0 	bl	800b65c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009cbc:	e1fb      	b.n	800a0b6 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009cc4:	2b01      	cmp	r3, #1
 8009cc6:	d107      	bne.n	8009cd8 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2202      	movs	r2, #2
 8009cd4:	701a      	strb	r2, [r3, #0]
 8009cd6:	e025      	b.n	8009d24 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009cde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ce2:	d914      	bls.n	8009d0e <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009cea:	3301      	adds	r3, #1
 8009cec:	b2da      	uxtb	r2, r3
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009cfa:	2b03      	cmp	r3, #3
 8009cfc:	d903      	bls.n	8009d06 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	220d      	movs	r2, #13
 8009d02:	701a      	strb	r2, [r3, #0]
 8009d04:	e00e      	b.n	8009d24 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	701a      	strb	r2, [r3, #0]
 8009d0c:	e00a      	b.n	8009d24 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009d14:	f103 020a 	add.w	r2, r3, #10
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8009d1e:	200a      	movs	r0, #10
 8009d20:	f004 fd92 	bl	800e848 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2201      	movs	r2, #1
 8009d28:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009d38:	2200      	movs	r2, #0
 8009d3a:	4619      	mov	r1, r3
 8009d3c:	f001 fc8e 	bl	800b65c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009d40:	e1c0      	b.n	800a0c4 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d005      	beq.n	8009d58 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009d52:	2104      	movs	r1, #4
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009d58:	2064      	movs	r0, #100	; 0x64
 8009d5a:	f004 fd75 	bl	800e848 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f004 fc44 	bl	800e5ec <USBH_LL_GetSpeed>
 8009d64:	4603      	mov	r3, r0
 8009d66:	461a      	mov	r2, r3
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2205      	movs	r2, #5
 8009d72:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009d74:	2100      	movs	r1, #0
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f001 fb1f 	bl	800b3ba <USBH_AllocPipe>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	461a      	mov	r2, r3
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009d84:	2180      	movs	r1, #128	; 0x80
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f001 fb17 	bl	800b3ba <USBH_AllocPipe>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	461a      	mov	r2, r3
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	7919      	ldrb	r1, [r3, #4]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009da4:	687a      	ldr	r2, [r7, #4]
 8009da6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009da8:	b292      	uxth	r2, r2
 8009daa:	9202      	str	r2, [sp, #8]
 8009dac:	2200      	movs	r2, #0
 8009dae:	9201      	str	r2, [sp, #4]
 8009db0:	9300      	str	r3, [sp, #0]
 8009db2:	4603      	mov	r3, r0
 8009db4:	2280      	movs	r2, #128	; 0x80
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f001 fad0 	bl	800b35c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	7959      	ldrb	r1, [r3, #5]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009dcc:	687a      	ldr	r2, [r7, #4]
 8009dce:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009dd0:	b292      	uxth	r2, r2
 8009dd2:	9202      	str	r2, [sp, #8]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	9201      	str	r2, [sp, #4]
 8009dd8:	9300      	str	r3, [sp, #0]
 8009dda:	4603      	mov	r3, r0
 8009ddc:	2200      	movs	r2, #0
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f001 fabc 	bl	800b35c <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2201      	movs	r2, #1
 8009de8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009df8:	2200      	movs	r2, #0
 8009dfa:	4619      	mov	r1, r3
 8009dfc:	f001 fc2e 	bl	800b65c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009e00:	e160      	b.n	800a0c4 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f000 f964 	bl	800a0d0 <USBH_HandleEnum>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009e0c:	7bbb      	ldrb	r3, [r7, #14]
 8009e0e:	b2db      	uxtb	r3, r3
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	f040 8152 	bne.w	800a0ba <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8009e24:	2b01      	cmp	r3, #1
 8009e26:	d103      	bne.n	8009e30 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2208      	movs	r2, #8
 8009e2c:	701a      	strb	r2, [r3, #0]
 8009e2e:	e002      	b.n	8009e36 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2207      	movs	r2, #7
 8009e34:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2205      	movs	r2, #5
 8009e3a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	f001 fc05 	bl	800b65c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009e52:	e132      	b.n	800a0ba <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	f000 812f 	beq.w	800a0be <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009e66:	2101      	movs	r1, #1
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2208      	movs	r2, #8
 8009e70:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2205      	movs	r2, #5
 8009e76:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009e86:	2200      	movs	r2, #0
 8009e88:	4619      	mov	r1, r3
 8009e8a:	f001 fbe7 	bl	800b65c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8009e8e:	e116      	b.n	800a0be <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8009e96:	b29b      	uxth	r3, r3
 8009e98:	4619      	mov	r1, r3
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f000 fcf6 	bl	800a88c <USBH_SetCfg>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d102      	bne.n	8009eac <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2209      	movs	r2, #9
 8009eaa:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2201      	movs	r2, #1
 8009eb0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	f001 fbca 	bl	800b65c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009ec8:	e0fc      	b.n	800a0c4 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8009ed0:	f003 0320 	and.w	r3, r3, #32
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d00a      	beq.n	8009eee <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8009ed8:	2101      	movs	r1, #1
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f000 fcf9 	bl	800a8d2 <USBH_SetFeature>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d106      	bne.n	8009ef4 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	220a      	movs	r2, #10
 8009eea:	701a      	strb	r2, [r3, #0]
 8009eec:	e002      	b.n	8009ef4 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	220a      	movs	r2, #10
 8009ef2:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009f08:	2200      	movs	r2, #0
 8009f0a:	4619      	mov	r1, r3
 8009f0c:	f001 fba6 	bl	800b65c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009f10:	e0d8      	b.n	800a0c4 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d03f      	beq.n	8009f9c <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009f24:	2300      	movs	r3, #0
 8009f26:	73fb      	strb	r3, [r7, #15]
 8009f28:	e016      	b.n	8009f58 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009f2a:	7bfa      	ldrb	r2, [r7, #15]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	32de      	adds	r2, #222	; 0xde
 8009f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f34:	791a      	ldrb	r2, [r3, #4]
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8009f3c:	429a      	cmp	r2, r3
 8009f3e:	d108      	bne.n	8009f52 <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009f40:	7bfa      	ldrb	r2, [r7, #15]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	32de      	adds	r2, #222	; 0xde
 8009f46:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8009f50:	e005      	b.n	8009f5e <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009f52:	7bfb      	ldrb	r3, [r7, #15]
 8009f54:	3301      	adds	r3, #1
 8009f56:	73fb      	strb	r3, [r7, #15]
 8009f58:	7bfb      	ldrb	r3, [r7, #15]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d0e5      	beq.n	8009f2a <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d016      	beq.n	8009f96 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f6e:	689b      	ldr	r3, [r3, #8]
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	4798      	blx	r3
 8009f74:	4603      	mov	r3, r0
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d109      	bne.n	8009f8e <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2206      	movs	r2, #6
 8009f7e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009f86:	2103      	movs	r1, #3
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	4798      	blx	r3
 8009f8c:	e006      	b.n	8009f9c <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	220d      	movs	r2, #13
 8009f92:	701a      	strb	r2, [r3, #0]
 8009f94:	e002      	b.n	8009f9c <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	220d      	movs	r2, #13
 8009f9a:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2205      	movs	r2, #5
 8009fa0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	4619      	mov	r1, r3
 8009fb4:	f001 fb52 	bl	800b65c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009fb8:	e084      	b.n	800a0c4 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d017      	beq.n	8009ff4 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009fca:	691b      	ldr	r3, [r3, #16]
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	4798      	blx	r3
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009fd4:	7bbb      	ldrb	r3, [r7, #14]
 8009fd6:	b2db      	uxtb	r3, r3
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d103      	bne.n	8009fe4 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	220b      	movs	r2, #11
 8009fe0:	701a      	strb	r2, [r3, #0]
 8009fe2:	e00a      	b.n	8009ffa <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 8009fe4:	7bbb      	ldrb	r3, [r7, #14]
 8009fe6:	b2db      	uxtb	r3, r3
 8009fe8:	2b02      	cmp	r3, #2
 8009fea:	d106      	bne.n	8009ffa <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	220d      	movs	r2, #13
 8009ff0:	701a      	strb	r2, [r3, #0]
 8009ff2:	e002      	b.n	8009ffa <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	220d      	movs	r2, #13
 8009ff8:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2205      	movs	r2, #5
 8009ffe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a00e:	2200      	movs	r2, #0
 800a010:	4619      	mov	r1, r3
 800a012:	f001 fb23 	bl	800b65c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a016:	e055      	b.n	800a0c4 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d04f      	beq.n	800a0c2 <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a028:	695b      	ldr	r3, [r3, #20]
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	4798      	blx	r3
      }
      break;
 800a02e:	e048      	b.n	800a0c2 <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2200      	movs	r2, #0
 800a034:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f7ff fcf7 	bl	8009a2c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a044:	2b00      	cmp	r3, #0
 800a046:	d009      	beq.n	800a05c <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a04e:	68db      	ldr	r3, [r3, #12]
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2200      	movs	r2, #0
 800a058:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a062:	2b00      	cmp	r3, #0
 800a064:	d005      	beq.n	800a072 <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a06c:	2105      	movs	r1, #5
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800a078:	b2db      	uxtb	r3, r3
 800a07a:	2b01      	cmp	r3, #1
 800a07c:	d107      	bne.n	800a08e <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2200      	movs	r2, #0
 800a082:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f7ff fdb0 	bl	8009bec <USBH_Start>
 800a08c:	e002      	b.n	800a094 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f004 fa76 	bl	800e580 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2201      	movs	r2, #1
 800a098:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	4619      	mov	r1, r3
 800a0ac:	f001 fad6 	bl	800b65c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a0b0:	e008      	b.n	800a0c4 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800a0b2:	bf00      	nop
 800a0b4:	e006      	b.n	800a0c4 <USBH_Process+0x4b8>
      break;
 800a0b6:	bf00      	nop
 800a0b8:	e004      	b.n	800a0c4 <USBH_Process+0x4b8>
      break;
 800a0ba:	bf00      	nop
 800a0bc:	e002      	b.n	800a0c4 <USBH_Process+0x4b8>
    break;
 800a0be:	bf00      	nop
 800a0c0:	e000      	b.n	800a0c4 <USBH_Process+0x4b8>
      break;
 800a0c2:	bf00      	nop
  }
  return USBH_OK;
 800a0c4:	2300      	movs	r3, #0
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3710      	adds	r7, #16
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}
 800a0ce:	bf00      	nop

0800a0d0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b088      	sub	sp, #32
 800a0d4:	af04      	add	r7, sp, #16
 800a0d6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a0d8:	2301      	movs	r3, #1
 800a0da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a0dc:	2301      	movs	r3, #1
 800a0de:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	785b      	ldrb	r3, [r3, #1]
 800a0e4:	2b07      	cmp	r3, #7
 800a0e6:	f200 8208 	bhi.w	800a4fa <USBH_HandleEnum+0x42a>
 800a0ea:	a201      	add	r2, pc, #4	; (adr r2, 800a0f0 <USBH_HandleEnum+0x20>)
 800a0ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0f0:	0800a111 	.word	0x0800a111
 800a0f4:	0800a1cf 	.word	0x0800a1cf
 800a0f8:	0800a239 	.word	0x0800a239
 800a0fc:	0800a2c7 	.word	0x0800a2c7
 800a100:	0800a331 	.word	0x0800a331
 800a104:	0800a3a1 	.word	0x0800a3a1
 800a108:	0800a43d 	.word	0x0800a43d
 800a10c:	0800a4bb 	.word	0x0800a4bb
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a110:	2108      	movs	r1, #8
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f000 faea 	bl	800a6ec <USBH_Get_DevDesc>
 800a118:	4603      	mov	r3, r0
 800a11a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a11c:	7bbb      	ldrb	r3, [r7, #14]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d130      	bne.n	800a184 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2201      	movs	r2, #1
 800a130:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	7919      	ldrb	r1, [r3, #4]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a142:	687a      	ldr	r2, [r7, #4]
 800a144:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a146:	b292      	uxth	r2, r2
 800a148:	9202      	str	r2, [sp, #8]
 800a14a:	2200      	movs	r2, #0
 800a14c:	9201      	str	r2, [sp, #4]
 800a14e:	9300      	str	r3, [sp, #0]
 800a150:	4603      	mov	r3, r0
 800a152:	2280      	movs	r2, #128	; 0x80
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f001 f901 	bl	800b35c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	7959      	ldrb	r1, [r3, #5]
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a16a:	687a      	ldr	r2, [r7, #4]
 800a16c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a16e:	b292      	uxth	r2, r2
 800a170:	9202      	str	r2, [sp, #8]
 800a172:	2200      	movs	r2, #0
 800a174:	9201      	str	r2, [sp, #4]
 800a176:	9300      	str	r3, [sp, #0]
 800a178:	4603      	mov	r3, r0
 800a17a:	2200      	movs	r2, #0
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f001 f8ed 	bl	800b35c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a182:	e1bc      	b.n	800a4fe <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a184:	7bbb      	ldrb	r3, [r7, #14]
 800a186:	2b03      	cmp	r3, #3
 800a188:	f040 81b9 	bne.w	800a4fe <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a192:	3301      	adds	r3, #1
 800a194:	b2da      	uxtb	r2, r3
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a1a2:	2b03      	cmp	r3, #3
 800a1a4:	d903      	bls.n	800a1ae <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	220d      	movs	r2, #13
 800a1aa:	701a      	strb	r2, [r3, #0]
      break;
 800a1ac:	e1a7      	b.n	800a4fe <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	795b      	ldrb	r3, [r3, #5]
 800a1b2:	4619      	mov	r1, r3
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f001 f921 	bl	800b3fc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	791b      	ldrb	r3, [r3, #4]
 800a1be:	4619      	mov	r1, r3
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f001 f91b 	bl	800b3fc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	701a      	strb	r2, [r3, #0]
      break;
 800a1cc:	e197      	b.n	800a4fe <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a1ce:	2112      	movs	r1, #18
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f000 fa8b 	bl	800a6ec <USBH_Get_DevDesc>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a1da:	7bbb      	ldrb	r3, [r7, #14]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d103      	bne.n	800a1e8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2202      	movs	r2, #2
 800a1e4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a1e6:	e18c      	b.n	800a502 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a1e8:	7bbb      	ldrb	r3, [r7, #14]
 800a1ea:	2b03      	cmp	r3, #3
 800a1ec:	f040 8189 	bne.w	800a502 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a1f6:	3301      	adds	r3, #1
 800a1f8:	b2da      	uxtb	r2, r3
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a206:	2b03      	cmp	r3, #3
 800a208:	d903      	bls.n	800a212 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	220d      	movs	r2, #13
 800a20e:	701a      	strb	r2, [r3, #0]
      break;
 800a210:	e177      	b.n	800a502 <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	795b      	ldrb	r3, [r3, #5]
 800a216:	4619      	mov	r1, r3
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f001 f8ef 	bl	800b3fc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	791b      	ldrb	r3, [r3, #4]
 800a222:	4619      	mov	r1, r3
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f001 f8e9 	bl	800b3fc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2200      	movs	r2, #0
 800a22e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2200      	movs	r2, #0
 800a234:	701a      	strb	r2, [r3, #0]
      break;
 800a236:	e164      	b.n	800a502 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a238:	2101      	movs	r1, #1
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f000 fb02 	bl	800a844 <USBH_SetAddress>
 800a240:	4603      	mov	r3, r0
 800a242:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a244:	7bbb      	ldrb	r3, [r7, #14]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d132      	bne.n	800a2b0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800a24a:	2002      	movs	r0, #2
 800a24c:	f004 fafc 	bl	800e848 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2201      	movs	r2, #1
 800a254:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2203      	movs	r2, #3
 800a25c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	7919      	ldrb	r1, [r3, #4]
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a26e:	687a      	ldr	r2, [r7, #4]
 800a270:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a272:	b292      	uxth	r2, r2
 800a274:	9202      	str	r2, [sp, #8]
 800a276:	2200      	movs	r2, #0
 800a278:	9201      	str	r2, [sp, #4]
 800a27a:	9300      	str	r3, [sp, #0]
 800a27c:	4603      	mov	r3, r0
 800a27e:	2280      	movs	r2, #128	; 0x80
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f001 f86b 	bl	800b35c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	7959      	ldrb	r1, [r3, #5]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a296:	687a      	ldr	r2, [r7, #4]
 800a298:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a29a:	b292      	uxth	r2, r2
 800a29c:	9202      	str	r2, [sp, #8]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	9201      	str	r2, [sp, #4]
 800a2a2:	9300      	str	r3, [sp, #0]
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f001 f857 	bl	800b35c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a2ae:	e12a      	b.n	800a506 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a2b0:	7bbb      	ldrb	r3, [r7, #14]
 800a2b2:	2b03      	cmp	r3, #3
 800a2b4:	f040 8127 	bne.w	800a506 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	220d      	movs	r2, #13
 800a2bc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	705a      	strb	r2, [r3, #1]
      break;
 800a2c4:	e11f      	b.n	800a506 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a2c6:	2109      	movs	r1, #9
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f000 fa37 	bl	800a73c <USBH_Get_CfgDesc>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a2d2:	7bbb      	ldrb	r3, [r7, #14]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d103      	bne.n	800a2e0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2204      	movs	r2, #4
 800a2dc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a2de:	e114      	b.n	800a50a <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a2e0:	7bbb      	ldrb	r3, [r7, #14]
 800a2e2:	2b03      	cmp	r3, #3
 800a2e4:	f040 8111 	bne.w	800a50a <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a2ee:	3301      	adds	r3, #1
 800a2f0:	b2da      	uxtb	r2, r3
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a2fe:	2b03      	cmp	r3, #3
 800a300:	d903      	bls.n	800a30a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	220d      	movs	r2, #13
 800a306:	701a      	strb	r2, [r3, #0]
      break;
 800a308:	e0ff      	b.n	800a50a <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	795b      	ldrb	r3, [r3, #5]
 800a30e:	4619      	mov	r1, r3
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f001 f873 	bl	800b3fc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	791b      	ldrb	r3, [r3, #4]
 800a31a:	4619      	mov	r1, r3
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f001 f86d 	bl	800b3fc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2200      	movs	r2, #0
 800a326:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2200      	movs	r2, #0
 800a32c:	701a      	strb	r2, [r3, #0]
      break;
 800a32e:	e0ec      	b.n	800a50a <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800a336:	4619      	mov	r1, r3
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f000 f9ff 	bl	800a73c <USBH_Get_CfgDesc>
 800a33e:	4603      	mov	r3, r0
 800a340:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a342:	7bbb      	ldrb	r3, [r7, #14]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d103      	bne.n	800a350 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2205      	movs	r2, #5
 800a34c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a34e:	e0de      	b.n	800a50e <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a350:	7bbb      	ldrb	r3, [r7, #14]
 800a352:	2b03      	cmp	r3, #3
 800a354:	f040 80db 	bne.w	800a50e <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a35e:	3301      	adds	r3, #1
 800a360:	b2da      	uxtb	r2, r3
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a36e:	2b03      	cmp	r3, #3
 800a370:	d903      	bls.n	800a37a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	220d      	movs	r2, #13
 800a376:	701a      	strb	r2, [r3, #0]
      break;
 800a378:	e0c9      	b.n	800a50e <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	795b      	ldrb	r3, [r3, #5]
 800a37e:	4619      	mov	r1, r3
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f001 f83b 	bl	800b3fc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	791b      	ldrb	r3, [r3, #4]
 800a38a:	4619      	mov	r1, r3
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f001 f835 	bl	800b3fc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2200      	movs	r2, #0
 800a396:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2200      	movs	r2, #0
 800a39c:	701a      	strb	r2, [r3, #0]
      break;
 800a39e:	e0b6      	b.n	800a50e <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d036      	beq.n	800a418 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a3b6:	23ff      	movs	r3, #255	; 0xff
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f000 f9e3 	bl	800a784 <USBH_Get_StringDesc>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a3c2:	7bbb      	ldrb	r3, [r7, #14]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d111      	bne.n	800a3ec <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2206      	movs	r2, #6
 800a3cc:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2205      	movs	r2, #5
 800a3d2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	4619      	mov	r1, r3
 800a3e6:	f001 f939 	bl	800b65c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a3ea:	e092      	b.n	800a512 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a3ec:	7bbb      	ldrb	r3, [r7, #14]
 800a3ee:	2b03      	cmp	r3, #3
 800a3f0:	f040 808f 	bne.w	800a512 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2206      	movs	r2, #6
 800a3f8:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2205      	movs	r2, #5
 800a3fe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a40e:	2200      	movs	r2, #0
 800a410:	4619      	mov	r1, r3
 800a412:	f001 f923 	bl	800b65c <osMessagePut>
      break;
 800a416:	e07c      	b.n	800a512 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2206      	movs	r2, #6
 800a41c:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2205      	movs	r2, #5
 800a422:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a432:	2200      	movs	r2, #0
 800a434:	4619      	mov	r1, r3
 800a436:	f001 f911 	bl	800b65c <osMessagePut>
      break;
 800a43a:	e06a      	b.n	800a512 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800a442:	2b00      	cmp	r3, #0
 800a444:	d027      	beq.n	800a496 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a452:	23ff      	movs	r3, #255	; 0xff
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f000 f995 	bl	800a784 <USBH_Get_StringDesc>
 800a45a:	4603      	mov	r3, r0
 800a45c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a45e:	7bbb      	ldrb	r3, [r7, #14]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d103      	bne.n	800a46c <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2207      	movs	r2, #7
 800a468:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a46a:	e054      	b.n	800a516 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a46c:	7bbb      	ldrb	r3, [r7, #14]
 800a46e:	2b03      	cmp	r3, #3
 800a470:	d151      	bne.n	800a516 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2207      	movs	r2, #7
 800a476:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2205      	movs	r2, #5
 800a47c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a48c:	2200      	movs	r2, #0
 800a48e:	4619      	mov	r1, r3
 800a490:	f001 f8e4 	bl	800b65c <osMessagePut>
      break;
 800a494:	e03f      	b.n	800a516 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2207      	movs	r2, #7
 800a49a:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2205      	movs	r2, #5
 800a4a0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	4619      	mov	r1, r3
 800a4b4:	f001 f8d2 	bl	800b65c <osMessagePut>
      break;
 800a4b8:	e02d      	b.n	800a516 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d017      	beq.n	800a4f4 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a4d0:	23ff      	movs	r3, #255	; 0xff
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f000 f956 	bl	800a784 <USBH_Get_StringDesc>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a4dc:	7bbb      	ldrb	r3, [r7, #14]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d102      	bne.n	800a4e8 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a4e6:	e018      	b.n	800a51a <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a4e8:	7bbb      	ldrb	r3, [r7, #14]
 800a4ea:	2b03      	cmp	r3, #3
 800a4ec:	d115      	bne.n	800a51a <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	73fb      	strb	r3, [r7, #15]
      break;
 800a4f2:	e012      	b.n	800a51a <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	73fb      	strb	r3, [r7, #15]
      break;
 800a4f8:	e00f      	b.n	800a51a <USBH_HandleEnum+0x44a>

    default:
      break;
 800a4fa:	bf00      	nop
 800a4fc:	e00e      	b.n	800a51c <USBH_HandleEnum+0x44c>
      break;
 800a4fe:	bf00      	nop
 800a500:	e00c      	b.n	800a51c <USBH_HandleEnum+0x44c>
      break;
 800a502:	bf00      	nop
 800a504:	e00a      	b.n	800a51c <USBH_HandleEnum+0x44c>
      break;
 800a506:	bf00      	nop
 800a508:	e008      	b.n	800a51c <USBH_HandleEnum+0x44c>
      break;
 800a50a:	bf00      	nop
 800a50c:	e006      	b.n	800a51c <USBH_HandleEnum+0x44c>
      break;
 800a50e:	bf00      	nop
 800a510:	e004      	b.n	800a51c <USBH_HandleEnum+0x44c>
      break;
 800a512:	bf00      	nop
 800a514:	e002      	b.n	800a51c <USBH_HandleEnum+0x44c>
      break;
 800a516:	bf00      	nop
 800a518:	e000      	b.n	800a51c <USBH_HandleEnum+0x44c>
      break;
 800a51a:	bf00      	nop
  }
  return Status;
 800a51c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a51e:	4618      	mov	r0, r3
 800a520:	3710      	adds	r7, #16
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}
 800a526:	bf00      	nop

0800a528 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a528:	b480      	push	{r7}
 800a52a:	b083      	sub	sp, #12
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
 800a530:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	683a      	ldr	r2, [r7, #0]
 800a536:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800a53a:	bf00      	nop
 800a53c:	370c      	adds	r7, #12
 800a53e:	46bd      	mov	sp, r7
 800a540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a544:	4770      	bx	lr

0800a546 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a546:	b580      	push	{r7, lr}
 800a548:	b082      	sub	sp, #8
 800a54a:	af00      	add	r7, sp, #0
 800a54c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a554:	1c5a      	adds	r2, r3, #1
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f000 f804 	bl	800a56a <USBH_HandleSof>
}
 800a562:	bf00      	nop
 800a564:	3708      	adds	r7, #8
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}

0800a56a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a56a:	b580      	push	{r7, lr}
 800a56c:	b082      	sub	sp, #8
 800a56e:	af00      	add	r7, sp, #0
 800a570:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	781b      	ldrb	r3, [r3, #0]
 800a576:	b2db      	uxtb	r3, r3
 800a578:	2b0b      	cmp	r3, #11
 800a57a:	d10a      	bne.n	800a592 <USBH_HandleSof+0x28>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a582:	2b00      	cmp	r3, #0
 800a584:	d005      	beq.n	800a592 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a58c:	699b      	ldr	r3, [r3, #24]
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	4798      	blx	r3
  }
}
 800a592:	bf00      	nop
 800a594:	3708      	adds	r7, #8
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}

0800a59a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a59a:	b580      	push	{r7, lr}
 800a59c:	b082      	sub	sp, #8
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2201      	movs	r2, #1
 800a5a6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2201      	movs	r2, #1
 800a5ae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a5be:	2200      	movs	r2, #0
 800a5c0:	4619      	mov	r1, r3
 800a5c2:	f001 f84b 	bl	800b65c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800a5c6:	bf00      	nop
}
 800a5c8:	3708      	adds	r7, #8
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}

0800a5ce <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a5ce:	b480      	push	{r7}
 800a5d0:	b083      	sub	sp, #12
 800a5d2:	af00      	add	r7, sp, #0
 800a5d4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2200      	movs	r2, #0
 800a5da:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800a5de:	bf00      	nop
}
 800a5e0:	370c      	adds	r7, #12
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e8:	4770      	bx	lr

0800a5ea <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a5ea:	b580      	push	{r7, lr}
 800a5ec:	b082      	sub	sp, #8
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2201      	movs	r2, #1
 800a5f6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2200      	movs	r2, #0
 800a606:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2201      	movs	r2, #1
 800a60e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a61e:	2200      	movs	r2, #0
 800a620:	4619      	mov	r1, r3
 800a622:	f001 f81b 	bl	800b65c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800a626:	2300      	movs	r3, #0
}
 800a628:	4618      	mov	r0, r3
 800a62a:	3708      	adds	r7, #8
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b082      	sub	sp, #8
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2201      	movs	r2, #1
 800a63c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2200      	movs	r2, #0
 800a644:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2200      	movs	r2, #0
 800a64c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f003 ffb0 	bl	800e5b6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	791b      	ldrb	r3, [r3, #4]
 800a65a:	4619      	mov	r1, r3
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f000 fecd 	bl	800b3fc <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	795b      	ldrb	r3, [r3, #5]
 800a666:	4619      	mov	r1, r3
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f000 fec7 	bl	800b3fc <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2201      	movs	r2, #1
 800a672:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a682:	2200      	movs	r2, #0
 800a684:	4619      	mov	r1, r3
 800a686:	f000 ffe9 	bl	800b65c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800a68a:	2300      	movs	r3, #0
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3708      	adds	r7, #8
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}

0800a694 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b086      	sub	sp, #24
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 800a6a2:	f107 030c 	add.w	r3, r7, #12
 800a6a6:	f04f 32ff 	mov.w	r2, #4294967295
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f001 f816 	bl	800b6dc <osMessageGet>
    if (event.status == osEventMessage)
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	2b10      	cmp	r3, #16
 800a6b4:	d1f2      	bne.n	800a69c <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f7ff faa8 	bl	8009c0c <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800a6bc:	e7ee      	b.n	800a69c <USBH_Process_OS+0x8>

0800a6be <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800a6be:	b580      	push	{r7, lr}
 800a6c0:	b082      	sub	sp, #8
 800a6c2:	af00      	add	r7, sp, #0
 800a6c4:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2201      	movs	r2, #1
 800a6ca:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a6da:	2200      	movs	r2, #0
 800a6dc:	4619      	mov	r1, r3
 800a6de:	f000 ffbd 	bl	800b65c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800a6e2:	2300      	movs	r3, #0
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3708      	adds	r7, #8
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}

0800a6ec <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b086      	sub	sp, #24
 800a6f0:	af02      	add	r7, sp, #8
 800a6f2:	6078      	str	r0, [r7, #4]
 800a6f4:	460b      	mov	r3, r1
 800a6f6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800a6fe:	78fb      	ldrb	r3, [r7, #3]
 800a700:	b29b      	uxth	r3, r3
 800a702:	9300      	str	r3, [sp, #0]
 800a704:	4613      	mov	r3, r2
 800a706:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a70a:	2100      	movs	r1, #0
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f000 f864 	bl	800a7da <USBH_GetDescriptor>
 800a712:	4603      	mov	r3, r0
 800a714:	73fb      	strb	r3, [r7, #15]
 800a716:	7bfb      	ldrb	r3, [r7, #15]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d10a      	bne.n	800a732 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f203 3026 	addw	r0, r3, #806	; 0x326
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a728:	78fa      	ldrb	r2, [r7, #3]
 800a72a:	b292      	uxth	r2, r2
 800a72c:	4619      	mov	r1, r3
 800a72e:	f000 f918 	bl	800a962 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800a732:	7bfb      	ldrb	r3, [r7, #15]
}
 800a734:	4618      	mov	r0, r3
 800a736:	3710      	adds	r7, #16
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}

0800a73c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b086      	sub	sp, #24
 800a740:	af02      	add	r7, sp, #8
 800a742:	6078      	str	r0, [r7, #4]
 800a744:	460b      	mov	r3, r1
 800a746:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	331c      	adds	r3, #28
 800a74c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a74e:	887b      	ldrh	r3, [r7, #2]
 800a750:	9300      	str	r3, [sp, #0]
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a758:	2100      	movs	r1, #0
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f000 f83d 	bl	800a7da <USBH_GetDescriptor>
 800a760:	4603      	mov	r3, r0
 800a762:	72fb      	strb	r3, [r7, #11]
 800a764:	7afb      	ldrb	r3, [r7, #11]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d107      	bne.n	800a77a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a770:	887a      	ldrh	r2, [r7, #2]
 800a772:	68f9      	ldr	r1, [r7, #12]
 800a774:	4618      	mov	r0, r3
 800a776:	f000 f964 	bl	800aa42 <USBH_ParseCfgDesc>
  }

  return status;
 800a77a:	7afb      	ldrb	r3, [r7, #11]
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	3710      	adds	r7, #16
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}

0800a784 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b088      	sub	sp, #32
 800a788:	af02      	add	r7, sp, #8
 800a78a:	60f8      	str	r0, [r7, #12]
 800a78c:	607a      	str	r2, [r7, #4]
 800a78e:	461a      	mov	r2, r3
 800a790:	460b      	mov	r3, r1
 800a792:	72fb      	strb	r3, [r7, #11]
 800a794:	4613      	mov	r3, r2
 800a796:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800a798:	7afb      	ldrb	r3, [r7, #11]
 800a79a:	b29b      	uxth	r3, r3
 800a79c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a7a0:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800a7a8:	893b      	ldrh	r3, [r7, #8]
 800a7aa:	9300      	str	r3, [sp, #0]
 800a7ac:	460b      	mov	r3, r1
 800a7ae:	2100      	movs	r1, #0
 800a7b0:	68f8      	ldr	r0, [r7, #12]
 800a7b2:	f000 f812 	bl	800a7da <USBH_GetDescriptor>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	75fb      	strb	r3, [r7, #23]
 800a7ba:	7dfb      	ldrb	r3, [r7, #23]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d107      	bne.n	800a7d0 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a7c6:	893a      	ldrh	r2, [r7, #8]
 800a7c8:	6879      	ldr	r1, [r7, #4]
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f000 fa37 	bl	800ac3e <USBH_ParseStringDesc>
  }

  return status;
 800a7d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3718      	adds	r7, #24
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}

0800a7da <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800a7da:	b580      	push	{r7, lr}
 800a7dc:	b084      	sub	sp, #16
 800a7de:	af00      	add	r7, sp, #0
 800a7e0:	60f8      	str	r0, [r7, #12]
 800a7e2:	607b      	str	r3, [r7, #4]
 800a7e4:	460b      	mov	r3, r1
 800a7e6:	72fb      	strb	r3, [r7, #11]
 800a7e8:	4613      	mov	r3, r2
 800a7ea:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	789b      	ldrb	r3, [r3, #2]
 800a7f0:	2b01      	cmp	r3, #1
 800a7f2:	d11c      	bne.n	800a82e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a7f4:	7afb      	ldrb	r3, [r7, #11]
 800a7f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a7fa:	b2da      	uxtb	r2, r3
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	2206      	movs	r2, #6
 800a804:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	893a      	ldrh	r2, [r7, #8]
 800a80a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a80c:	893b      	ldrh	r3, [r7, #8]
 800a80e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a812:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a816:	d104      	bne.n	800a822 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	f240 4209 	movw	r2, #1033	; 0x409
 800a81e:	829a      	strh	r2, [r3, #20]
 800a820:	e002      	b.n	800a828 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	2200      	movs	r2, #0
 800a826:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	8b3a      	ldrh	r2, [r7, #24]
 800a82c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a82e:	8b3b      	ldrh	r3, [r7, #24]
 800a830:	461a      	mov	r2, r3
 800a832:	6879      	ldr	r1, [r7, #4]
 800a834:	68f8      	ldr	r0, [r7, #12]
 800a836:	f000 fa50 	bl	800acda <USBH_CtlReq>
 800a83a:	4603      	mov	r3, r0
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3710      	adds	r7, #16
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}

0800a844 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b082      	sub	sp, #8
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
 800a84c:	460b      	mov	r3, r1
 800a84e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	789b      	ldrb	r3, [r3, #2]
 800a854:	2b01      	cmp	r3, #1
 800a856:	d10f      	bne.n	800a878 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2200      	movs	r2, #0
 800a85c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2205      	movs	r2, #5
 800a862:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a864:	78fb      	ldrb	r3, [r7, #3]
 800a866:	b29a      	uxth	r2, r3
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2200      	movs	r2, #0
 800a870:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2200      	movs	r2, #0
 800a876:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a878:	2200      	movs	r2, #0
 800a87a:	2100      	movs	r1, #0
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	f000 fa2c 	bl	800acda <USBH_CtlReq>
 800a882:	4603      	mov	r3, r0
}
 800a884:	4618      	mov	r0, r3
 800a886:	3708      	adds	r7, #8
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}

0800a88c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b082      	sub	sp, #8
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
 800a894:	460b      	mov	r3, r1
 800a896:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	789b      	ldrb	r3, [r3, #2]
 800a89c:	2b01      	cmp	r3, #1
 800a89e:	d10e      	bne.n	800a8be <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2209      	movs	r2, #9
 800a8aa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	887a      	ldrh	r2, [r7, #2]
 800a8b0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a8be:	2200      	movs	r2, #0
 800a8c0:	2100      	movs	r1, #0
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f000 fa09 	bl	800acda <USBH_CtlReq>
 800a8c8:	4603      	mov	r3, r0
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3708      	adds	r7, #8
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}

0800a8d2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a8d2:	b580      	push	{r7, lr}
 800a8d4:	b082      	sub	sp, #8
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	6078      	str	r0, [r7, #4]
 800a8da:	460b      	mov	r3, r1
 800a8dc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	789b      	ldrb	r3, [r3, #2]
 800a8e2:	2b01      	cmp	r3, #1
 800a8e4:	d10f      	bne.n	800a906 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2203      	movs	r2, #3
 800a8f0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a8f2:	78fb      	ldrb	r3, [r7, #3]
 800a8f4:	b29a      	uxth	r2, r3
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2200      	movs	r2, #0
 800a904:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a906:	2200      	movs	r2, #0
 800a908:	2100      	movs	r1, #0
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f000 f9e5 	bl	800acda <USBH_CtlReq>
 800a910:	4603      	mov	r3, r0
}
 800a912:	4618      	mov	r0, r3
 800a914:	3708      	adds	r7, #8
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}

0800a91a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a91a:	b580      	push	{r7, lr}
 800a91c:	b082      	sub	sp, #8
 800a91e:	af00      	add	r7, sp, #0
 800a920:	6078      	str	r0, [r7, #4]
 800a922:	460b      	mov	r3, r1
 800a924:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	789b      	ldrb	r3, [r3, #2]
 800a92a:	2b01      	cmp	r3, #1
 800a92c:	d10f      	bne.n	800a94e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2202      	movs	r2, #2
 800a932:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2201      	movs	r2, #1
 800a938:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2200      	movs	r2, #0
 800a93e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a940:	78fb      	ldrb	r3, [r7, #3]
 800a942:	b29a      	uxth	r2, r3
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2200      	movs	r2, #0
 800a94c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800a94e:	2200      	movs	r2, #0
 800a950:	2100      	movs	r1, #0
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f000 f9c1 	bl	800acda <USBH_CtlReq>
 800a958:	4603      	mov	r3, r0
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3708      	adds	r7, #8
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}

0800a962 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800a962:	b480      	push	{r7}
 800a964:	b085      	sub	sp, #20
 800a966:	af00      	add	r7, sp, #0
 800a968:	60f8      	str	r0, [r7, #12]
 800a96a:	60b9      	str	r1, [r7, #8]
 800a96c:	4613      	mov	r3, r2
 800a96e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	781a      	ldrb	r2, [r3, #0]
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	785a      	ldrb	r2, [r3, #1]
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	3302      	adds	r3, #2
 800a984:	781b      	ldrb	r3, [r3, #0]
 800a986:	b29a      	uxth	r2, r3
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	3303      	adds	r3, #3
 800a98c:	781b      	ldrb	r3, [r3, #0]
 800a98e:	b29b      	uxth	r3, r3
 800a990:	021b      	lsls	r3, r3, #8
 800a992:	b29b      	uxth	r3, r3
 800a994:	4313      	orrs	r3, r2
 800a996:	b29a      	uxth	r2, r3
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	791a      	ldrb	r2, [r3, #4]
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	795a      	ldrb	r2, [r3, #5]
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	799a      	ldrb	r2, [r3, #6]
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	79da      	ldrb	r2, [r3, #7]
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800a9bc:	88fb      	ldrh	r3, [r7, #6]
 800a9be:	2b08      	cmp	r3, #8
 800a9c0:	d939      	bls.n	800aa36 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	3308      	adds	r3, #8
 800a9c6:	781b      	ldrb	r3, [r3, #0]
 800a9c8:	b29a      	uxth	r2, r3
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	3309      	adds	r3, #9
 800a9ce:	781b      	ldrb	r3, [r3, #0]
 800a9d0:	b29b      	uxth	r3, r3
 800a9d2:	021b      	lsls	r3, r3, #8
 800a9d4:	b29b      	uxth	r3, r3
 800a9d6:	4313      	orrs	r3, r2
 800a9d8:	b29a      	uxth	r2, r3
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	330a      	adds	r3, #10
 800a9e2:	781b      	ldrb	r3, [r3, #0]
 800a9e4:	b29a      	uxth	r2, r3
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	330b      	adds	r3, #11
 800a9ea:	781b      	ldrb	r3, [r3, #0]
 800a9ec:	b29b      	uxth	r3, r3
 800a9ee:	021b      	lsls	r3, r3, #8
 800a9f0:	b29b      	uxth	r3, r3
 800a9f2:	4313      	orrs	r3, r2
 800a9f4:	b29a      	uxth	r2, r3
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	330c      	adds	r3, #12
 800a9fe:	781b      	ldrb	r3, [r3, #0]
 800aa00:	b29a      	uxth	r2, r3
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	330d      	adds	r3, #13
 800aa06:	781b      	ldrb	r3, [r3, #0]
 800aa08:	b29b      	uxth	r3, r3
 800aa0a:	021b      	lsls	r3, r3, #8
 800aa0c:	b29b      	uxth	r3, r3
 800aa0e:	4313      	orrs	r3, r2
 800aa10:	b29a      	uxth	r2, r3
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	7b9a      	ldrb	r2, [r3, #14]
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	7bda      	ldrb	r2, [r3, #15]
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	7c1a      	ldrb	r2, [r3, #16]
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	7c5a      	ldrb	r2, [r3, #17]
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	745a      	strb	r2, [r3, #17]
  }
}
 800aa36:	bf00      	nop
 800aa38:	3714      	adds	r7, #20
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa40:	4770      	bx	lr

0800aa42 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800aa42:	b580      	push	{r7, lr}
 800aa44:	b08a      	sub	sp, #40	; 0x28
 800aa46:	af00      	add	r7, sp, #0
 800aa48:	60f8      	str	r0, [r7, #12]
 800aa4a:	60b9      	str	r1, [r7, #8]
 800aa4c:	4613      	mov	r3, r2
 800aa4e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800aa54:	2300      	movs	r3, #0
 800aa56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	781a      	ldrb	r2, [r3, #0]
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	785a      	ldrb	r2, [r3, #1]
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	3302      	adds	r3, #2
 800aa78:	781b      	ldrb	r3, [r3, #0]
 800aa7a:	b29a      	uxth	r2, r3
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	3303      	adds	r3, #3
 800aa80:	781b      	ldrb	r3, [r3, #0]
 800aa82:	b29b      	uxth	r3, r3
 800aa84:	021b      	lsls	r3, r3, #8
 800aa86:	b29b      	uxth	r3, r3
 800aa88:	4313      	orrs	r3, r2
 800aa8a:	b29a      	uxth	r2, r3
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	791a      	ldrb	r2, [r3, #4]
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	795a      	ldrb	r2, [r3, #5]
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	799a      	ldrb	r2, [r3, #6]
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	79da      	ldrb	r2, [r3, #7]
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	7a1a      	ldrb	r2, [r3, #8]
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800aab8:	88fb      	ldrh	r3, [r7, #6]
 800aaba:	2b09      	cmp	r3, #9
 800aabc:	d95f      	bls.n	800ab7e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800aabe:	2309      	movs	r3, #9
 800aac0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800aac2:	2300      	movs	r3, #0
 800aac4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800aac6:	e051      	b.n	800ab6c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800aac8:	f107 0316 	add.w	r3, r7, #22
 800aacc:	4619      	mov	r1, r3
 800aace:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aad0:	f000 f8e8 	bl	800aca4 <USBH_GetNextDesc>
 800aad4:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800aad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aad8:	785b      	ldrb	r3, [r3, #1]
 800aada:	2b04      	cmp	r3, #4
 800aadc:	d146      	bne.n	800ab6c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800aade:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aae2:	221a      	movs	r2, #26
 800aae4:	fb02 f303 	mul.w	r3, r2, r3
 800aae8:	3308      	adds	r3, #8
 800aaea:	68fa      	ldr	r2, [r7, #12]
 800aaec:	4413      	add	r3, r2
 800aaee:	3302      	adds	r3, #2
 800aaf0:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800aaf2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aaf4:	69f8      	ldr	r0, [r7, #28]
 800aaf6:	f000 f846 	bl	800ab86 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800aafa:	2300      	movs	r3, #0
 800aafc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800ab00:	2300      	movs	r3, #0
 800ab02:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ab04:	e022      	b.n	800ab4c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ab06:	f107 0316 	add.w	r3, r7, #22
 800ab0a:	4619      	mov	r1, r3
 800ab0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ab0e:	f000 f8c9 	bl	800aca4 <USBH_GetNextDesc>
 800ab12:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800ab14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab16:	785b      	ldrb	r3, [r3, #1]
 800ab18:	2b05      	cmp	r3, #5
 800ab1a:	d117      	bne.n	800ab4c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800ab1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ab20:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ab24:	3201      	adds	r2, #1
 800ab26:	00d2      	lsls	r2, r2, #3
 800ab28:	211a      	movs	r1, #26
 800ab2a:	fb01 f303 	mul.w	r3, r1, r3
 800ab2e:	4413      	add	r3, r2
 800ab30:	3308      	adds	r3, #8
 800ab32:	68fa      	ldr	r2, [r7, #12]
 800ab34:	4413      	add	r3, r2
 800ab36:	3304      	adds	r3, #4
 800ab38:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800ab3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ab3c:	69b8      	ldr	r0, [r7, #24]
 800ab3e:	f000 f851 	bl	800abe4 <USBH_ParseEPDesc>
            ep_ix++;
 800ab42:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ab46:	3301      	adds	r3, #1
 800ab48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ab4c:	69fb      	ldr	r3, [r7, #28]
 800ab4e:	791b      	ldrb	r3, [r3, #4]
 800ab50:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ab54:	429a      	cmp	r2, r3
 800ab56:	d204      	bcs.n	800ab62 <USBH_ParseCfgDesc+0x120>
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	885a      	ldrh	r2, [r3, #2]
 800ab5c:	8afb      	ldrh	r3, [r7, #22]
 800ab5e:	429a      	cmp	r2, r3
 800ab60:	d8d1      	bhi.n	800ab06 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800ab62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ab66:	3301      	adds	r3, #1
 800ab68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ab6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ab70:	2b01      	cmp	r3, #1
 800ab72:	d804      	bhi.n	800ab7e <USBH_ParseCfgDesc+0x13c>
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	885a      	ldrh	r2, [r3, #2]
 800ab78:	8afb      	ldrh	r3, [r7, #22]
 800ab7a:	429a      	cmp	r2, r3
 800ab7c:	d8a4      	bhi.n	800aac8 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800ab7e:	bf00      	nop
 800ab80:	3728      	adds	r7, #40	; 0x28
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}

0800ab86 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800ab86:	b480      	push	{r7}
 800ab88:	b083      	sub	sp, #12
 800ab8a:	af00      	add	r7, sp, #0
 800ab8c:	6078      	str	r0, [r7, #4]
 800ab8e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	781a      	ldrb	r2, [r3, #0]
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	785a      	ldrb	r2, [r3, #1]
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	789a      	ldrb	r2, [r3, #2]
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	78da      	ldrb	r2, [r3, #3]
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	791a      	ldrb	r2, [r3, #4]
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	795a      	ldrb	r2, [r3, #5]
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	799a      	ldrb	r2, [r3, #6]
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	79da      	ldrb	r2, [r3, #7]
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	7a1a      	ldrb	r2, [r3, #8]
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	721a      	strb	r2, [r3, #8]
}
 800abd8:	bf00      	nop
 800abda:	370c      	adds	r7, #12
 800abdc:	46bd      	mov	sp, r7
 800abde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe2:	4770      	bx	lr

0800abe4 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800abe4:	b480      	push	{r7}
 800abe6:	b083      	sub	sp, #12
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
 800abec:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	781a      	ldrb	r2, [r3, #0]
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	785a      	ldrb	r2, [r3, #1]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	789a      	ldrb	r2, [r3, #2]
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	78da      	ldrb	r2, [r3, #3]
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	3304      	adds	r3, #4
 800ac12:	781b      	ldrb	r3, [r3, #0]
 800ac14:	b29a      	uxth	r2, r3
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	3305      	adds	r3, #5
 800ac1a:	781b      	ldrb	r3, [r3, #0]
 800ac1c:	b29b      	uxth	r3, r3
 800ac1e:	021b      	lsls	r3, r3, #8
 800ac20:	b29b      	uxth	r3, r3
 800ac22:	4313      	orrs	r3, r2
 800ac24:	b29a      	uxth	r2, r3
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	799a      	ldrb	r2, [r3, #6]
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	719a      	strb	r2, [r3, #6]
}
 800ac32:	bf00      	nop
 800ac34:	370c      	adds	r7, #12
 800ac36:	46bd      	mov	sp, r7
 800ac38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3c:	4770      	bx	lr

0800ac3e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800ac3e:	b480      	push	{r7}
 800ac40:	b087      	sub	sp, #28
 800ac42:	af00      	add	r7, sp, #0
 800ac44:	60f8      	str	r0, [r7, #12]
 800ac46:	60b9      	str	r1, [r7, #8]
 800ac48:	4613      	mov	r3, r2
 800ac4a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	3301      	adds	r3, #1
 800ac50:	781b      	ldrb	r3, [r3, #0]
 800ac52:	2b03      	cmp	r3, #3
 800ac54:	d120      	bne.n	800ac98 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	781b      	ldrb	r3, [r3, #0]
 800ac5a:	1e9a      	subs	r2, r3, #2
 800ac5c:	88fb      	ldrh	r3, [r7, #6]
 800ac5e:	4293      	cmp	r3, r2
 800ac60:	bf28      	it	cs
 800ac62:	4613      	movcs	r3, r2
 800ac64:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	3302      	adds	r3, #2
 800ac6a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	82fb      	strh	r3, [r7, #22]
 800ac70:	e00b      	b.n	800ac8a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800ac72:	8afb      	ldrh	r3, [r7, #22]
 800ac74:	68fa      	ldr	r2, [r7, #12]
 800ac76:	4413      	add	r3, r2
 800ac78:	781a      	ldrb	r2, [r3, #0]
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	701a      	strb	r2, [r3, #0]
      pdest++;
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	3301      	adds	r3, #1
 800ac82:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800ac84:	8afb      	ldrh	r3, [r7, #22]
 800ac86:	3302      	adds	r3, #2
 800ac88:	82fb      	strh	r3, [r7, #22]
 800ac8a:	8afa      	ldrh	r2, [r7, #22]
 800ac8c:	8abb      	ldrh	r3, [r7, #20]
 800ac8e:	429a      	cmp	r2, r3
 800ac90:	d3ef      	bcc.n	800ac72 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	2200      	movs	r2, #0
 800ac96:	701a      	strb	r2, [r3, #0]
  }
}
 800ac98:	bf00      	nop
 800ac9a:	371c      	adds	r7, #28
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca2:	4770      	bx	lr

0800aca4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800aca4:	b480      	push	{r7}
 800aca6:	b085      	sub	sp, #20
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
 800acac:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	881a      	ldrh	r2, [r3, #0]
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	781b      	ldrb	r3, [r3, #0]
 800acb6:	b29b      	uxth	r3, r3
 800acb8:	4413      	add	r3, r2
 800acba:	b29a      	uxth	r2, r3
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	781b      	ldrb	r3, [r3, #0]
 800acc4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	4413      	add	r3, r2
 800acca:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800accc:	68fb      	ldr	r3, [r7, #12]
}
 800acce:	4618      	mov	r0, r3
 800acd0:	3714      	adds	r7, #20
 800acd2:	46bd      	mov	sp, r7
 800acd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd8:	4770      	bx	lr

0800acda <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800acda:	b580      	push	{r7, lr}
 800acdc:	b086      	sub	sp, #24
 800acde:	af00      	add	r7, sp, #0
 800ace0:	60f8      	str	r0, [r7, #12]
 800ace2:	60b9      	str	r1, [r7, #8]
 800ace4:	4613      	mov	r3, r2
 800ace6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800ace8:	2301      	movs	r3, #1
 800acea:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	789b      	ldrb	r3, [r3, #2]
 800acf0:	2b01      	cmp	r3, #1
 800acf2:	d002      	beq.n	800acfa <USBH_CtlReq+0x20>
 800acf4:	2b02      	cmp	r3, #2
 800acf6:	d01d      	beq.n	800ad34 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800acf8:	e043      	b.n	800ad82 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	68ba      	ldr	r2, [r7, #8]
 800acfe:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	88fa      	ldrh	r2, [r7, #6]
 800ad04:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	2201      	movs	r2, #1
 800ad0a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	2202      	movs	r2, #2
 800ad10:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800ad12:	2301      	movs	r3, #1
 800ad14:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	2203      	movs	r2, #3
 800ad1a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	4619      	mov	r1, r3
 800ad2e:	f000 fc95 	bl	800b65c <osMessagePut>
      break;
 800ad32:	e026      	b.n	800ad82 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800ad34:	68f8      	ldr	r0, [r7, #12]
 800ad36:	f000 f829 	bl	800ad8c <USBH_HandleControl>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800ad3e:	7dfb      	ldrb	r3, [r7, #23]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d002      	beq.n	800ad4a <USBH_CtlReq+0x70>
 800ad44:	7dfb      	ldrb	r3, [r7, #23]
 800ad46:	2b03      	cmp	r3, #3
 800ad48:	d106      	bne.n	800ad58 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	2201      	movs	r2, #1
 800ad4e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	2200      	movs	r2, #0
 800ad54:	761a      	strb	r2, [r3, #24]
 800ad56:	e005      	b.n	800ad64 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800ad58:	7dfb      	ldrb	r3, [r7, #23]
 800ad5a:	2b02      	cmp	r3, #2
 800ad5c:	d102      	bne.n	800ad64 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	2201      	movs	r2, #1
 800ad62:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	2203      	movs	r2, #3
 800ad68:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ad78:	2200      	movs	r2, #0
 800ad7a:	4619      	mov	r1, r3
 800ad7c:	f000 fc6e 	bl	800b65c <osMessagePut>
      break;
 800ad80:	bf00      	nop
  }
  return status;
 800ad82:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad84:	4618      	mov	r0, r3
 800ad86:	3718      	adds	r7, #24
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}

0800ad8c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b086      	sub	sp, #24
 800ad90:	af02      	add	r7, sp, #8
 800ad92:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800ad94:	2301      	movs	r3, #1
 800ad96:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	7e1b      	ldrb	r3, [r3, #24]
 800ada0:	3b01      	subs	r3, #1
 800ada2:	2b0a      	cmp	r3, #10
 800ada4:	f200 8229 	bhi.w	800b1fa <USBH_HandleControl+0x46e>
 800ada8:	a201      	add	r2, pc, #4	; (adr r2, 800adb0 <USBH_HandleControl+0x24>)
 800adaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adae:	bf00      	nop
 800adb0:	0800addd 	.word	0x0800addd
 800adb4:	0800adf7 	.word	0x0800adf7
 800adb8:	0800ae99 	.word	0x0800ae99
 800adbc:	0800aebf 	.word	0x0800aebf
 800adc0:	0800af4b 	.word	0x0800af4b
 800adc4:	0800af75 	.word	0x0800af75
 800adc8:	0800b037 	.word	0x0800b037
 800adcc:	0800b059 	.word	0x0800b059
 800add0:	0800b0eb 	.word	0x0800b0eb
 800add4:	0800b111 	.word	0x0800b111
 800add8:	0800b1a3 	.word	0x0800b1a3
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f103 0110 	add.w	r1, r3, #16
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	795b      	ldrb	r3, [r3, #5]
 800ade6:	461a      	mov	r2, r3
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f000 fa17 	bl	800b21c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2202      	movs	r2, #2
 800adf2:	761a      	strb	r2, [r3, #24]
      break;
 800adf4:	e20c      	b.n	800b210 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	795b      	ldrb	r3, [r3, #5]
 800adfa:	4619      	mov	r1, r3
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f003 fcc9 	bl	800e794 <USBH_LL_GetURBState>
 800ae02:	4603      	mov	r3, r0
 800ae04:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800ae06:	7bbb      	ldrb	r3, [r7, #14]
 800ae08:	2b01      	cmp	r3, #1
 800ae0a:	d12c      	bne.n	800ae66 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	7c1b      	ldrb	r3, [r3, #16]
 800ae10:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ae14:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	8adb      	ldrh	r3, [r3, #22]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d00a      	beq.n	800ae34 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800ae1e:	7b7b      	ldrb	r3, [r7, #13]
 800ae20:	2b80      	cmp	r3, #128	; 0x80
 800ae22:	d103      	bne.n	800ae2c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2203      	movs	r2, #3
 800ae28:	761a      	strb	r2, [r3, #24]
 800ae2a:	e00d      	b.n	800ae48 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2205      	movs	r2, #5
 800ae30:	761a      	strb	r2, [r3, #24]
 800ae32:	e009      	b.n	800ae48 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800ae34:	7b7b      	ldrb	r3, [r7, #13]
 800ae36:	2b80      	cmp	r3, #128	; 0x80
 800ae38:	d103      	bne.n	800ae42 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2209      	movs	r2, #9
 800ae3e:	761a      	strb	r2, [r3, #24]
 800ae40:	e002      	b.n	800ae48 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2207      	movs	r2, #7
 800ae46:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2203      	movs	r2, #3
 800ae4c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	4619      	mov	r1, r3
 800ae60:	f000 fbfc 	bl	800b65c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ae64:	e1cb      	b.n	800b1fe <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800ae66:	7bbb      	ldrb	r3, [r7, #14]
 800ae68:	2b04      	cmp	r3, #4
 800ae6a:	d003      	beq.n	800ae74 <USBH_HandleControl+0xe8>
 800ae6c:	7bbb      	ldrb	r3, [r7, #14]
 800ae6e:	2b02      	cmp	r3, #2
 800ae70:	f040 81c5 	bne.w	800b1fe <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	220b      	movs	r2, #11
 800ae78:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2203      	movs	r2, #3
 800ae7e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ae8e:	2200      	movs	r2, #0
 800ae90:	4619      	mov	r1, r3
 800ae92:	f000 fbe3 	bl	800b65c <osMessagePut>
      break;
 800ae96:	e1b2      	b.n	800b1fe <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ae9e:	b29a      	uxth	r2, r3
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6899      	ldr	r1, [r3, #8]
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	899a      	ldrh	r2, [r3, #12]
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	791b      	ldrb	r3, [r3, #4]
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	f000 f9f2 	bl	800b29a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2204      	movs	r2, #4
 800aeba:	761a      	strb	r2, [r3, #24]
      break;
 800aebc:	e1a8      	b.n	800b210 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	791b      	ldrb	r3, [r3, #4]
 800aec2:	4619      	mov	r1, r3
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f003 fc65 	bl	800e794 <USBH_LL_GetURBState>
 800aeca:	4603      	mov	r3, r0
 800aecc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800aece:	7bbb      	ldrb	r3, [r7, #14]
 800aed0:	2b01      	cmp	r3, #1
 800aed2:	d110      	bne.n	800aef6 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2209      	movs	r2, #9
 800aed8:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2203      	movs	r2, #3
 800aede:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800aeee:	2200      	movs	r2, #0
 800aef0:	4619      	mov	r1, r3
 800aef2:	f000 fbb3 	bl	800b65c <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800aef6:	7bbb      	ldrb	r3, [r7, #14]
 800aef8:	2b05      	cmp	r3, #5
 800aefa:	d110      	bne.n	800af1e <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800aefc:	2303      	movs	r3, #3
 800aefe:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2203      	movs	r2, #3
 800af04:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800af14:	2200      	movs	r2, #0
 800af16:	4619      	mov	r1, r3
 800af18:	f000 fba0 	bl	800b65c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800af1c:	e171      	b.n	800b202 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800af1e:	7bbb      	ldrb	r3, [r7, #14]
 800af20:	2b04      	cmp	r3, #4
 800af22:	f040 816e 	bne.w	800b202 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	220b      	movs	r2, #11
 800af2a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2203      	movs	r2, #3
 800af30:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800af40:	2200      	movs	r2, #0
 800af42:	4619      	mov	r1, r3
 800af44:	f000 fb8a 	bl	800b65c <osMessagePut>
      break;
 800af48:	e15b      	b.n	800b202 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6899      	ldr	r1, [r3, #8]
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	899a      	ldrh	r2, [r3, #12]
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	795b      	ldrb	r3, [r3, #5]
 800af56:	2001      	movs	r0, #1
 800af58:	9000      	str	r0, [sp, #0]
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f000 f978 	bl	800b250 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800af66:	b29a      	uxth	r2, r3
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2206      	movs	r2, #6
 800af70:	761a      	strb	r2, [r3, #24]
      break;
 800af72:	e14d      	b.n	800b210 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	795b      	ldrb	r3, [r3, #5]
 800af78:	4619      	mov	r1, r3
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	f003 fc0a 	bl	800e794 <USBH_LL_GetURBState>
 800af80:	4603      	mov	r3, r0
 800af82:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800af84:	7bbb      	ldrb	r3, [r7, #14]
 800af86:	2b01      	cmp	r3, #1
 800af88:	d111      	bne.n	800afae <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	2207      	movs	r2, #7
 800af8e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2203      	movs	r2, #3
 800af94:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800afa4:	2200      	movs	r2, #0
 800afa6:	4619      	mov	r1, r3
 800afa8:	f000 fb58 	bl	800b65c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800afac:	e12b      	b.n	800b206 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800afae:	7bbb      	ldrb	r3, [r7, #14]
 800afb0:	2b05      	cmp	r3, #5
 800afb2:	d113      	bne.n	800afdc <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	220c      	movs	r2, #12
 800afb8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800afba:	2303      	movs	r3, #3
 800afbc:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2203      	movs	r2, #3
 800afc2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800afd2:	2200      	movs	r2, #0
 800afd4:	4619      	mov	r1, r3
 800afd6:	f000 fb41 	bl	800b65c <osMessagePut>
      break;
 800afda:	e114      	b.n	800b206 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800afdc:	7bbb      	ldrb	r3, [r7, #14]
 800afde:	2b02      	cmp	r3, #2
 800afe0:	d111      	bne.n	800b006 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2205      	movs	r2, #5
 800afe6:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2203      	movs	r2, #3
 800afec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800affc:	2200      	movs	r2, #0
 800affe:	4619      	mov	r1, r3
 800b000:	f000 fb2c 	bl	800b65c <osMessagePut>
      break;
 800b004:	e0ff      	b.n	800b206 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800b006:	7bbb      	ldrb	r3, [r7, #14]
 800b008:	2b04      	cmp	r3, #4
 800b00a:	f040 80fc 	bne.w	800b206 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	220b      	movs	r2, #11
 800b012:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b014:	2302      	movs	r3, #2
 800b016:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2203      	movs	r2, #3
 800b01c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b02c:	2200      	movs	r2, #0
 800b02e:	4619      	mov	r1, r3
 800b030:	f000 fb14 	bl	800b65c <osMessagePut>
      break;
 800b034:	e0e7      	b.n	800b206 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	791b      	ldrb	r3, [r3, #4]
 800b03a:	2200      	movs	r2, #0
 800b03c:	2100      	movs	r1, #0
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f000 f92b 	bl	800b29a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b04a:	b29a      	uxth	r2, r3
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2208      	movs	r2, #8
 800b054:	761a      	strb	r2, [r3, #24]

      break;
 800b056:	e0db      	b.n	800b210 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	791b      	ldrb	r3, [r3, #4]
 800b05c:	4619      	mov	r1, r3
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f003 fb98 	bl	800e794 <USBH_LL_GetURBState>
 800b064:	4603      	mov	r3, r0
 800b066:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b068:	7bbb      	ldrb	r3, [r7, #14]
 800b06a:	2b01      	cmp	r3, #1
 800b06c:	d113      	bne.n	800b096 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	220d      	movs	r2, #13
 800b072:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b074:	2300      	movs	r3, #0
 800b076:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2203      	movs	r2, #3
 800b07c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b08c:	2200      	movs	r2, #0
 800b08e:	4619      	mov	r1, r3
 800b090:	f000 fae4 	bl	800b65c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b094:	e0b9      	b.n	800b20a <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800b096:	7bbb      	ldrb	r3, [r7, #14]
 800b098:	2b04      	cmp	r3, #4
 800b09a:	d111      	bne.n	800b0c0 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	220b      	movs	r2, #11
 800b0a0:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2203      	movs	r2, #3
 800b0a6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	4619      	mov	r1, r3
 800b0ba:	f000 facf 	bl	800b65c <osMessagePut>
      break;
 800b0be:	e0a4      	b.n	800b20a <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800b0c0:	7bbb      	ldrb	r3, [r7, #14]
 800b0c2:	2b05      	cmp	r3, #5
 800b0c4:	f040 80a1 	bne.w	800b20a <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800b0c8:	2303      	movs	r3, #3
 800b0ca:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2203      	movs	r2, #3
 800b0d0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	4619      	mov	r1, r3
 800b0e4:	f000 faba 	bl	800b65c <osMessagePut>
      break;
 800b0e8:	e08f      	b.n	800b20a <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	795b      	ldrb	r3, [r3, #5]
 800b0ee:	2201      	movs	r2, #1
 800b0f0:	9200      	str	r2, [sp, #0]
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	2100      	movs	r1, #0
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f000 f8aa 	bl	800b250 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b102:	b29a      	uxth	r2, r3
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	220a      	movs	r2, #10
 800b10c:	761a      	strb	r2, [r3, #24]
      break;
 800b10e:	e07f      	b.n	800b210 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	795b      	ldrb	r3, [r3, #5]
 800b114:	4619      	mov	r1, r3
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f003 fb3c 	bl	800e794 <USBH_LL_GetURBState>
 800b11c:	4603      	mov	r3, r0
 800b11e:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b120:	7bbb      	ldrb	r3, [r7, #14]
 800b122:	2b01      	cmp	r3, #1
 800b124:	d113      	bne.n	800b14e <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800b126:	2300      	movs	r3, #0
 800b128:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	220d      	movs	r2, #13
 800b12e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2203      	movs	r2, #3
 800b134:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b144:	2200      	movs	r2, #0
 800b146:	4619      	mov	r1, r3
 800b148:	f000 fa88 	bl	800b65c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b14c:	e05f      	b.n	800b20e <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b14e:	7bbb      	ldrb	r3, [r7, #14]
 800b150:	2b02      	cmp	r3, #2
 800b152:	d111      	bne.n	800b178 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2209      	movs	r2, #9
 800b158:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2203      	movs	r2, #3
 800b15e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b16e:	2200      	movs	r2, #0
 800b170:	4619      	mov	r1, r3
 800b172:	f000 fa73 	bl	800b65c <osMessagePut>
      break;
 800b176:	e04a      	b.n	800b20e <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800b178:	7bbb      	ldrb	r3, [r7, #14]
 800b17a:	2b04      	cmp	r3, #4
 800b17c:	d147      	bne.n	800b20e <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	220b      	movs	r2, #11
 800b182:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2203      	movs	r2, #3
 800b188:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b198:	2200      	movs	r2, #0
 800b19a:	4619      	mov	r1, r3
 800b19c:	f000 fa5e 	bl	800b65c <osMessagePut>
      break;
 800b1a0:	e035      	b.n	800b20e <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	7e5b      	ldrb	r3, [r3, #25]
 800b1a6:	3301      	adds	r3, #1
 800b1a8:	b2da      	uxtb	r2, r3
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	765a      	strb	r2, [r3, #25]
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	7e5b      	ldrb	r3, [r3, #25]
 800b1b2:	2b02      	cmp	r3, #2
 800b1b4:	d806      	bhi.n	800b1c4 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2201      	movs	r2, #1
 800b1ba:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2201      	movs	r2, #1
 800b1c0:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b1c2:	e025      	b.n	800b210 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b1ca:	2106      	movs	r1, #6
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	795b      	ldrb	r3, [r3, #5]
 800b1da:	4619      	mov	r1, r3
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f000 f90d 	bl	800b3fc <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	791b      	ldrb	r3, [r3, #4]
 800b1e6:	4619      	mov	r1, r3
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f000 f907 	bl	800b3fc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b1f4:	2302      	movs	r3, #2
 800b1f6:	73fb      	strb	r3, [r7, #15]
      break;
 800b1f8:	e00a      	b.n	800b210 <USBH_HandleControl+0x484>

    default:
      break;
 800b1fa:	bf00      	nop
 800b1fc:	e008      	b.n	800b210 <USBH_HandleControl+0x484>
      break;
 800b1fe:	bf00      	nop
 800b200:	e006      	b.n	800b210 <USBH_HandleControl+0x484>
      break;
 800b202:	bf00      	nop
 800b204:	e004      	b.n	800b210 <USBH_HandleControl+0x484>
      break;
 800b206:	bf00      	nop
 800b208:	e002      	b.n	800b210 <USBH_HandleControl+0x484>
      break;
 800b20a:	bf00      	nop
 800b20c:	e000      	b.n	800b210 <USBH_HandleControl+0x484>
      break;
 800b20e:	bf00      	nop
  }

  return status;
 800b210:	7bfb      	ldrb	r3, [r7, #15]
}
 800b212:	4618      	mov	r0, r3
 800b214:	3710      	adds	r7, #16
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}
 800b21a:	bf00      	nop

0800b21c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b088      	sub	sp, #32
 800b220:	af04      	add	r7, sp, #16
 800b222:	60f8      	str	r0, [r7, #12]
 800b224:	60b9      	str	r1, [r7, #8]
 800b226:	4613      	mov	r3, r2
 800b228:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b22a:	79f9      	ldrb	r1, [r7, #7]
 800b22c:	2300      	movs	r3, #0
 800b22e:	9303      	str	r3, [sp, #12]
 800b230:	2308      	movs	r3, #8
 800b232:	9302      	str	r3, [sp, #8]
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	9301      	str	r3, [sp, #4]
 800b238:	2300      	movs	r3, #0
 800b23a:	9300      	str	r3, [sp, #0]
 800b23c:	2300      	movs	r3, #0
 800b23e:	2200      	movs	r2, #0
 800b240:	68f8      	ldr	r0, [r7, #12]
 800b242:	f003 fa76 	bl	800e732 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800b246:	2300      	movs	r3, #0
}
 800b248:	4618      	mov	r0, r3
 800b24a:	3710      	adds	r7, #16
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}

0800b250 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b088      	sub	sp, #32
 800b254:	af04      	add	r7, sp, #16
 800b256:	60f8      	str	r0, [r7, #12]
 800b258:	60b9      	str	r1, [r7, #8]
 800b25a:	4611      	mov	r1, r2
 800b25c:	461a      	mov	r2, r3
 800b25e:	460b      	mov	r3, r1
 800b260:	80fb      	strh	r3, [r7, #6]
 800b262:	4613      	mov	r3, r2
 800b264:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d001      	beq.n	800b274 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b270:	2300      	movs	r3, #0
 800b272:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b274:	7979      	ldrb	r1, [r7, #5]
 800b276:	7e3b      	ldrb	r3, [r7, #24]
 800b278:	9303      	str	r3, [sp, #12]
 800b27a:	88fb      	ldrh	r3, [r7, #6]
 800b27c:	9302      	str	r3, [sp, #8]
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	9301      	str	r3, [sp, #4]
 800b282:	2301      	movs	r3, #1
 800b284:	9300      	str	r3, [sp, #0]
 800b286:	2300      	movs	r3, #0
 800b288:	2200      	movs	r2, #0
 800b28a:	68f8      	ldr	r0, [r7, #12]
 800b28c:	f003 fa51 	bl	800e732 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b290:	2300      	movs	r3, #0
}
 800b292:	4618      	mov	r0, r3
 800b294:	3710      	adds	r7, #16
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}

0800b29a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b29a:	b580      	push	{r7, lr}
 800b29c:	b088      	sub	sp, #32
 800b29e:	af04      	add	r7, sp, #16
 800b2a0:	60f8      	str	r0, [r7, #12]
 800b2a2:	60b9      	str	r1, [r7, #8]
 800b2a4:	4611      	mov	r1, r2
 800b2a6:	461a      	mov	r2, r3
 800b2a8:	460b      	mov	r3, r1
 800b2aa:	80fb      	strh	r3, [r7, #6]
 800b2ac:	4613      	mov	r3, r2
 800b2ae:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b2b0:	7979      	ldrb	r1, [r7, #5]
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	9303      	str	r3, [sp, #12]
 800b2b6:	88fb      	ldrh	r3, [r7, #6]
 800b2b8:	9302      	str	r3, [sp, #8]
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	9301      	str	r3, [sp, #4]
 800b2be:	2301      	movs	r3, #1
 800b2c0:	9300      	str	r3, [sp, #0]
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	2201      	movs	r2, #1
 800b2c6:	68f8      	ldr	r0, [r7, #12]
 800b2c8:	f003 fa33 	bl	800e732 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b2cc:	2300      	movs	r3, #0

}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3710      	adds	r7, #16
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}

0800b2d6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b2d6:	b580      	push	{r7, lr}
 800b2d8:	b088      	sub	sp, #32
 800b2da:	af04      	add	r7, sp, #16
 800b2dc:	60f8      	str	r0, [r7, #12]
 800b2de:	60b9      	str	r1, [r7, #8]
 800b2e0:	4611      	mov	r1, r2
 800b2e2:	461a      	mov	r2, r3
 800b2e4:	460b      	mov	r3, r1
 800b2e6:	80fb      	strh	r3, [r7, #6]
 800b2e8:	4613      	mov	r3, r2
 800b2ea:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d001      	beq.n	800b2fa <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b2fa:	7979      	ldrb	r1, [r7, #5]
 800b2fc:	7e3b      	ldrb	r3, [r7, #24]
 800b2fe:	9303      	str	r3, [sp, #12]
 800b300:	88fb      	ldrh	r3, [r7, #6]
 800b302:	9302      	str	r3, [sp, #8]
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	9301      	str	r3, [sp, #4]
 800b308:	2301      	movs	r3, #1
 800b30a:	9300      	str	r3, [sp, #0]
 800b30c:	2302      	movs	r3, #2
 800b30e:	2200      	movs	r2, #0
 800b310:	68f8      	ldr	r0, [r7, #12]
 800b312:	f003 fa0e 	bl	800e732 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b316:	2300      	movs	r3, #0
}
 800b318:	4618      	mov	r0, r3
 800b31a:	3710      	adds	r7, #16
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}

0800b320 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b088      	sub	sp, #32
 800b324:	af04      	add	r7, sp, #16
 800b326:	60f8      	str	r0, [r7, #12]
 800b328:	60b9      	str	r1, [r7, #8]
 800b32a:	4611      	mov	r1, r2
 800b32c:	461a      	mov	r2, r3
 800b32e:	460b      	mov	r3, r1
 800b330:	80fb      	strh	r3, [r7, #6]
 800b332:	4613      	mov	r3, r2
 800b334:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b336:	7979      	ldrb	r1, [r7, #5]
 800b338:	2300      	movs	r3, #0
 800b33a:	9303      	str	r3, [sp, #12]
 800b33c:	88fb      	ldrh	r3, [r7, #6]
 800b33e:	9302      	str	r3, [sp, #8]
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	9301      	str	r3, [sp, #4]
 800b344:	2301      	movs	r3, #1
 800b346:	9300      	str	r3, [sp, #0]
 800b348:	2302      	movs	r3, #2
 800b34a:	2201      	movs	r2, #1
 800b34c:	68f8      	ldr	r0, [r7, #12]
 800b34e:	f003 f9f0 	bl	800e732 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b352:	2300      	movs	r3, #0
}
 800b354:	4618      	mov	r0, r3
 800b356:	3710      	adds	r7, #16
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}

0800b35c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b086      	sub	sp, #24
 800b360:	af04      	add	r7, sp, #16
 800b362:	6078      	str	r0, [r7, #4]
 800b364:	4608      	mov	r0, r1
 800b366:	4611      	mov	r1, r2
 800b368:	461a      	mov	r2, r3
 800b36a:	4603      	mov	r3, r0
 800b36c:	70fb      	strb	r3, [r7, #3]
 800b36e:	460b      	mov	r3, r1
 800b370:	70bb      	strb	r3, [r7, #2]
 800b372:	4613      	mov	r3, r2
 800b374:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b376:	7878      	ldrb	r0, [r7, #1]
 800b378:	78ba      	ldrb	r2, [r7, #2]
 800b37a:	78f9      	ldrb	r1, [r7, #3]
 800b37c:	8b3b      	ldrh	r3, [r7, #24]
 800b37e:	9302      	str	r3, [sp, #8]
 800b380:	7d3b      	ldrb	r3, [r7, #20]
 800b382:	9301      	str	r3, [sp, #4]
 800b384:	7c3b      	ldrb	r3, [r7, #16]
 800b386:	9300      	str	r3, [sp, #0]
 800b388:	4603      	mov	r3, r0
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f003 f983 	bl	800e696 <USBH_LL_OpenPipe>

  return USBH_OK;
 800b390:	2300      	movs	r3, #0
}
 800b392:	4618      	mov	r0, r3
 800b394:	3708      	adds	r7, #8
 800b396:	46bd      	mov	sp, r7
 800b398:	bd80      	pop	{r7, pc}

0800b39a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b39a:	b580      	push	{r7, lr}
 800b39c:	b082      	sub	sp, #8
 800b39e:	af00      	add	r7, sp, #0
 800b3a0:	6078      	str	r0, [r7, #4]
 800b3a2:	460b      	mov	r3, r1
 800b3a4:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800b3a6:	78fb      	ldrb	r3, [r7, #3]
 800b3a8:	4619      	mov	r1, r3
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f003 f9a2 	bl	800e6f4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b3b0:	2300      	movs	r3, #0
}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	3708      	adds	r7, #8
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd80      	pop	{r7, pc}

0800b3ba <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b3ba:	b580      	push	{r7, lr}
 800b3bc:	b084      	sub	sp, #16
 800b3be:	af00      	add	r7, sp, #0
 800b3c0:	6078      	str	r0, [r7, #4]
 800b3c2:	460b      	mov	r3, r1
 800b3c4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f000 f836 	bl	800b438 <USBH_GetFreePipe>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b3d0:	89fb      	ldrh	r3, [r7, #14]
 800b3d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	d00a      	beq.n	800b3f0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800b3da:	78fa      	ldrb	r2, [r7, #3]
 800b3dc:	89fb      	ldrh	r3, [r7, #14]
 800b3de:	f003 030f 	and.w	r3, r3, #15
 800b3e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b3e6:	6879      	ldr	r1, [r7, #4]
 800b3e8:	33e0      	adds	r3, #224	; 0xe0
 800b3ea:	009b      	lsls	r3, r3, #2
 800b3ec:	440b      	add	r3, r1
 800b3ee:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b3f0:	89fb      	ldrh	r3, [r7, #14]
 800b3f2:	b2db      	uxtb	r3, r3
}
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	3710      	adds	r7, #16
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}

0800b3fc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	b083      	sub	sp, #12
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
 800b404:	460b      	mov	r3, r1
 800b406:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800b408:	78fb      	ldrb	r3, [r7, #3]
 800b40a:	2b0a      	cmp	r3, #10
 800b40c:	d80d      	bhi.n	800b42a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b40e:	78fb      	ldrb	r3, [r7, #3]
 800b410:	687a      	ldr	r2, [r7, #4]
 800b412:	33e0      	adds	r3, #224	; 0xe0
 800b414:	009b      	lsls	r3, r3, #2
 800b416:	4413      	add	r3, r2
 800b418:	685a      	ldr	r2, [r3, #4]
 800b41a:	78fb      	ldrb	r3, [r7, #3]
 800b41c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b420:	6879      	ldr	r1, [r7, #4]
 800b422:	33e0      	adds	r3, #224	; 0xe0
 800b424:	009b      	lsls	r3, r3, #2
 800b426:	440b      	add	r3, r1
 800b428:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b42a:	2300      	movs	r3, #0
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	370c      	adds	r7, #12
 800b430:	46bd      	mov	sp, r7
 800b432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b436:	4770      	bx	lr

0800b438 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b438:	b480      	push	{r7}
 800b43a:	b085      	sub	sp, #20
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b440:	2300      	movs	r3, #0
 800b442:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800b444:	2300      	movs	r3, #0
 800b446:	73fb      	strb	r3, [r7, #15]
 800b448:	e00f      	b.n	800b46a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b44a:	7bfb      	ldrb	r3, [r7, #15]
 800b44c:	687a      	ldr	r2, [r7, #4]
 800b44e:	33e0      	adds	r3, #224	; 0xe0
 800b450:	009b      	lsls	r3, r3, #2
 800b452:	4413      	add	r3, r2
 800b454:	685b      	ldr	r3, [r3, #4]
 800b456:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d102      	bne.n	800b464 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b45e:	7bfb      	ldrb	r3, [r7, #15]
 800b460:	b29b      	uxth	r3, r3
 800b462:	e007      	b.n	800b474 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800b464:	7bfb      	ldrb	r3, [r7, #15]
 800b466:	3301      	adds	r3, #1
 800b468:	73fb      	strb	r3, [r7, #15]
 800b46a:	7bfb      	ldrb	r3, [r7, #15]
 800b46c:	2b0a      	cmp	r3, #10
 800b46e:	d9ec      	bls.n	800b44a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b470:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800b474:	4618      	mov	r0, r3
 800b476:	3714      	adds	r7, #20
 800b478:	46bd      	mov	sp, r7
 800b47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47e:	4770      	bx	lr

0800b480 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b480:	b480      	push	{r7}
 800b482:	b085      	sub	sp, #20
 800b484:	af00      	add	r7, sp, #0
 800b486:	4603      	mov	r3, r0
 800b488:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b48a:	2300      	movs	r3, #0
 800b48c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b48e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b492:	2b84      	cmp	r3, #132	; 0x84
 800b494:	d005      	beq.n	800b4a2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b496:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	4413      	add	r3, r2
 800b49e:	3303      	adds	r3, #3
 800b4a0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	3714      	adds	r7, #20
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ae:	4770      	bx	lr

0800b4b0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800b4b0:	b480      	push	{r7}
 800b4b2:	b083      	sub	sp, #12
 800b4b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b4b6:	f3ef 8305 	mrs	r3, IPSR
 800b4ba:	607b      	str	r3, [r7, #4]
  return(result);
 800b4bc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	bf14      	ite	ne
 800b4c2:	2301      	movne	r3, #1
 800b4c4:	2300      	moveq	r3, #0
 800b4c6:	b2db      	uxtb	r3, r3
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	370c      	adds	r7, #12
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d2:	4770      	bx	lr

0800b4d4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b4d8:	f001 f9a8 	bl	800c82c <vTaskStartScheduler>
  
  return osOK;
 800b4dc:	2300      	movs	r3, #0
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	bd80      	pop	{r7, pc}

0800b4e2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b4e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4e4:	b089      	sub	sp, #36	; 0x24
 800b4e6:	af04      	add	r7, sp, #16
 800b4e8:	6078      	str	r0, [r7, #4]
 800b4ea:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	695b      	ldr	r3, [r3, #20]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d020      	beq.n	800b536 <osThreadCreate+0x54>
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	699b      	ldr	r3, [r3, #24]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d01c      	beq.n	800b536 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	685c      	ldr	r4, [r3, #4]
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681d      	ldr	r5, [r3, #0]
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	691e      	ldr	r6, [r3, #16]
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b50e:	4618      	mov	r0, r3
 800b510:	f7ff ffb6 	bl	800b480 <makeFreeRtosPriority>
 800b514:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	695b      	ldr	r3, [r3, #20]
 800b51a:	687a      	ldr	r2, [r7, #4]
 800b51c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b51e:	9202      	str	r2, [sp, #8]
 800b520:	9301      	str	r3, [sp, #4]
 800b522:	9100      	str	r1, [sp, #0]
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	4632      	mov	r2, r6
 800b528:	4629      	mov	r1, r5
 800b52a:	4620      	mov	r0, r4
 800b52c:	f000 ffa0 	bl	800c470 <xTaskCreateStatic>
 800b530:	4603      	mov	r3, r0
 800b532:	60fb      	str	r3, [r7, #12]
 800b534:	e01c      	b.n	800b570 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	685c      	ldr	r4, [r3, #4]
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b542:	b29e      	uxth	r6, r3
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b54a:	4618      	mov	r0, r3
 800b54c:	f7ff ff98 	bl	800b480 <makeFreeRtosPriority>
 800b550:	4602      	mov	r2, r0
 800b552:	f107 030c 	add.w	r3, r7, #12
 800b556:	9301      	str	r3, [sp, #4]
 800b558:	9200      	str	r2, [sp, #0]
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	4632      	mov	r2, r6
 800b55e:	4629      	mov	r1, r5
 800b560:	4620      	mov	r0, r4
 800b562:	f000 ffe2 	bl	800c52a <xTaskCreate>
 800b566:	4603      	mov	r3, r0
 800b568:	2b01      	cmp	r3, #1
 800b56a:	d001      	beq.n	800b570 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b56c:	2300      	movs	r3, #0
 800b56e:	e000      	b.n	800b572 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b570:	68fb      	ldr	r3, [r7, #12]
}
 800b572:	4618      	mov	r0, r3
 800b574:	3714      	adds	r7, #20
 800b576:	46bd      	mov	sp, r7
 800b578:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b57a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b57a:	b580      	push	{r7, lr}
 800b57c:	b084      	sub	sp, #16
 800b57e:	af00      	add	r7, sp, #0
 800b580:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d001      	beq.n	800b590 <osDelay+0x16>
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	e000      	b.n	800b592 <osDelay+0x18>
 800b590:	2301      	movs	r3, #1
 800b592:	4618      	mov	r0, r3
 800b594:	f001 f916 	bl	800c7c4 <vTaskDelay>
  
  return osOK;
 800b598:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3710      	adds	r7, #16
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}
	...

0800b5a4 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b086      	sub	sp, #24
 800b5a8:	af02      	add	r7, sp, #8
 800b5aa:	60f8      	str	r0, [r7, #12]
 800b5ac:	460b      	mov	r3, r1
 800b5ae:	607a      	str	r2, [r7, #4]
 800b5b0:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	685b      	ldr	r3, [r3, #4]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d013      	beq.n	800b5e2 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 800b5ba:	7afb      	ldrb	r3, [r7, #11]
 800b5bc:	2b01      	cmp	r3, #1
 800b5be:	d101      	bne.n	800b5c4 <osTimerCreate+0x20>
 800b5c0:	2101      	movs	r1, #1
 800b5c2:	e000      	b.n	800b5c6 <osTimerCreate+0x22>
 800b5c4:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 800b5ca:	68fa      	ldr	r2, [r7, #12]
 800b5cc:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 800b5ce:	9201      	str	r2, [sp, #4]
 800b5d0:	9300      	str	r3, [sp, #0]
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	460a      	mov	r2, r1
 800b5d6:	2101      	movs	r1, #1
 800b5d8:	480b      	ldr	r0, [pc, #44]	; (800b608 <osTimerCreate+0x64>)
 800b5da:	f001 feee 	bl	800d3ba <xTimerCreateStatic>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	e00e      	b.n	800b600 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 800b5e2:	7afb      	ldrb	r3, [r7, #11]
 800b5e4:	2b01      	cmp	r3, #1
 800b5e6:	d101      	bne.n	800b5ec <osTimerCreate+0x48>
 800b5e8:	2201      	movs	r2, #1
 800b5ea:	e000      	b.n	800b5ee <osTimerCreate+0x4a>
 800b5ec:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 800b5f2:	9300      	str	r3, [sp, #0]
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2101      	movs	r1, #1
 800b5f8:	4803      	ldr	r0, [pc, #12]	; (800b608 <osTimerCreate+0x64>)
 800b5fa:	f001 febd 	bl	800d378 <xTimerCreate>
 800b5fe:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 800b600:	4618      	mov	r0, r3
 800b602:	3710      	adds	r7, #16
 800b604:	46bd      	mov	sp, r7
 800b606:	bd80      	pop	{r7, pc}
 800b608:	0800f3e8 	.word	0x0800f3e8

0800b60c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800b60c:	b590      	push	{r4, r7, lr}
 800b60e:	b085      	sub	sp, #20
 800b610:	af02      	add	r7, sp, #8
 800b612:	6078      	str	r0, [r7, #4]
 800b614:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	689b      	ldr	r3, [r3, #8]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d011      	beq.n	800b642 <osMessageCreate+0x36>
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	68db      	ldr	r3, [r3, #12]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d00d      	beq.n	800b642 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6818      	ldr	r0, [r3, #0]
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	6859      	ldr	r1, [r3, #4]
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	689a      	ldr	r2, [r3, #8]
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	68db      	ldr	r3, [r3, #12]
 800b636:	2400      	movs	r4, #0
 800b638:	9400      	str	r4, [sp, #0]
 800b63a:	f000 f9df 	bl	800b9fc <xQueueGenericCreateStatic>
 800b63e:	4603      	mov	r3, r0
 800b640:	e008      	b.n	800b654 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6818      	ldr	r0, [r3, #0]
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	685b      	ldr	r3, [r3, #4]
 800b64a:	2200      	movs	r2, #0
 800b64c:	4619      	mov	r1, r3
 800b64e:	f000 fa4d 	bl	800baec <xQueueGenericCreate>
 800b652:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800b654:	4618      	mov	r0, r3
 800b656:	370c      	adds	r7, #12
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd90      	pop	{r4, r7, pc}

0800b65c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b086      	sub	sp, #24
 800b660:	af00      	add	r7, sp, #0
 800b662:	60f8      	str	r0, [r7, #12]
 800b664:	60b9      	str	r1, [r7, #8]
 800b666:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800b668:	2300      	movs	r3, #0
 800b66a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800b670:	697b      	ldr	r3, [r7, #20]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d101      	bne.n	800b67a <osMessagePut+0x1e>
    ticks = 1;
 800b676:	2301      	movs	r3, #1
 800b678:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800b67a:	f7ff ff19 	bl	800b4b0 <inHandlerMode>
 800b67e:	4603      	mov	r3, r0
 800b680:	2b00      	cmp	r3, #0
 800b682:	d018      	beq.n	800b6b6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800b684:	f107 0210 	add.w	r2, r7, #16
 800b688:	f107 0108 	add.w	r1, r7, #8
 800b68c:	2300      	movs	r3, #0
 800b68e:	68f8      	ldr	r0, [r7, #12]
 800b690:	f000 fb84 	bl	800bd9c <xQueueGenericSendFromISR>
 800b694:	4603      	mov	r3, r0
 800b696:	2b01      	cmp	r3, #1
 800b698:	d001      	beq.n	800b69e <osMessagePut+0x42>
      return osErrorOS;
 800b69a:	23ff      	movs	r3, #255	; 0xff
 800b69c:	e018      	b.n	800b6d0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b69e:	693b      	ldr	r3, [r7, #16]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d014      	beq.n	800b6ce <osMessagePut+0x72>
 800b6a4:	4b0c      	ldr	r3, [pc, #48]	; (800b6d8 <osMessagePut+0x7c>)
 800b6a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6aa:	601a      	str	r2, [r3, #0]
 800b6ac:	f3bf 8f4f 	dsb	sy
 800b6b0:	f3bf 8f6f 	isb	sy
 800b6b4:	e00b      	b.n	800b6ce <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800b6b6:	f107 0108 	add.w	r1, r7, #8
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	697a      	ldr	r2, [r7, #20]
 800b6be:	68f8      	ldr	r0, [r7, #12]
 800b6c0:	f000 fa6e 	bl	800bba0 <xQueueGenericSend>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	2b01      	cmp	r3, #1
 800b6c8:	d001      	beq.n	800b6ce <osMessagePut+0x72>
      return osErrorOS;
 800b6ca:	23ff      	movs	r3, #255	; 0xff
 800b6cc:	e000      	b.n	800b6d0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800b6ce:	2300      	movs	r3, #0
}
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	3718      	adds	r7, #24
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	bd80      	pop	{r7, pc}
 800b6d8:	e000ed04 	.word	0xe000ed04

0800b6dc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800b6dc:	b590      	push	{r4, r7, lr}
 800b6de:	b08b      	sub	sp, #44	; 0x2c
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	60f8      	str	r0, [r7, #12]
 800b6e4:	60b9      	str	r1, [r7, #8]
 800b6e6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800b6f0:	68bb      	ldr	r3, [r7, #8]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d10a      	bne.n	800b70c <osMessageGet+0x30>
    event.status = osErrorParameter;
 800b6f6:	2380      	movs	r3, #128	; 0x80
 800b6f8:	617b      	str	r3, [r7, #20]
    return event;
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	461c      	mov	r4, r3
 800b6fe:	f107 0314 	add.w	r3, r7, #20
 800b702:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b706:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b70a:	e054      	b.n	800b7b6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800b70c:	2300      	movs	r3, #0
 800b70e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800b710:	2300      	movs	r3, #0
 800b712:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b71a:	d103      	bne.n	800b724 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800b71c:	f04f 33ff 	mov.w	r3, #4294967295
 800b720:	627b      	str	r3, [r7, #36]	; 0x24
 800b722:	e009      	b.n	800b738 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d006      	beq.n	800b738 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800b72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b730:	2b00      	cmp	r3, #0
 800b732:	d101      	bne.n	800b738 <osMessageGet+0x5c>
      ticks = 1;
 800b734:	2301      	movs	r3, #1
 800b736:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800b738:	f7ff feba 	bl	800b4b0 <inHandlerMode>
 800b73c:	4603      	mov	r3, r0
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d01c      	beq.n	800b77c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800b742:	f107 0220 	add.w	r2, r7, #32
 800b746:	f107 0314 	add.w	r3, r7, #20
 800b74a:	3304      	adds	r3, #4
 800b74c:	4619      	mov	r1, r3
 800b74e:	68b8      	ldr	r0, [r7, #8]
 800b750:	f000 fca0 	bl	800c094 <xQueueReceiveFromISR>
 800b754:	4603      	mov	r3, r0
 800b756:	2b01      	cmp	r3, #1
 800b758:	d102      	bne.n	800b760 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800b75a:	2310      	movs	r3, #16
 800b75c:	617b      	str	r3, [r7, #20]
 800b75e:	e001      	b.n	800b764 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800b760:	2300      	movs	r3, #0
 800b762:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b764:	6a3b      	ldr	r3, [r7, #32]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d01d      	beq.n	800b7a6 <osMessageGet+0xca>
 800b76a:	4b15      	ldr	r3, [pc, #84]	; (800b7c0 <osMessageGet+0xe4>)
 800b76c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b770:	601a      	str	r2, [r3, #0]
 800b772:	f3bf 8f4f 	dsb	sy
 800b776:	f3bf 8f6f 	isb	sy
 800b77a:	e014      	b.n	800b7a6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800b77c:	f107 0314 	add.w	r3, r7, #20
 800b780:	3304      	adds	r3, #4
 800b782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b784:	4619      	mov	r1, r3
 800b786:	68b8      	ldr	r0, [r7, #8]
 800b788:	f000 fba4 	bl	800bed4 <xQueueReceive>
 800b78c:	4603      	mov	r3, r0
 800b78e:	2b01      	cmp	r3, #1
 800b790:	d102      	bne.n	800b798 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800b792:	2310      	movs	r3, #16
 800b794:	617b      	str	r3, [r7, #20]
 800b796:	e006      	b.n	800b7a6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800b798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d101      	bne.n	800b7a2 <osMessageGet+0xc6>
 800b79e:	2300      	movs	r3, #0
 800b7a0:	e000      	b.n	800b7a4 <osMessageGet+0xc8>
 800b7a2:	2340      	movs	r3, #64	; 0x40
 800b7a4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	461c      	mov	r4, r3
 800b7aa:	f107 0314 	add.w	r3, r7, #20
 800b7ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b7b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800b7b6:	68f8      	ldr	r0, [r7, #12]
 800b7b8:	372c      	adds	r7, #44	; 0x2c
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd90      	pop	{r4, r7, pc}
 800b7be:	bf00      	nop
 800b7c0:	e000ed04 	.word	0xe000ed04

0800b7c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b7c4:	b480      	push	{r7}
 800b7c6:	b083      	sub	sp, #12
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	f103 0208 	add.w	r2, r3, #8
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	f04f 32ff 	mov.w	r2, #4294967295
 800b7dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	f103 0208 	add.w	r2, r3, #8
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f103 0208 	add.w	r2, r3, #8
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b7f8:	bf00      	nop
 800b7fa:	370c      	adds	r7, #12
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b802:	4770      	bx	lr

0800b804 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b804:	b480      	push	{r7}
 800b806:	b083      	sub	sp, #12
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2200      	movs	r2, #0
 800b810:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b812:	bf00      	nop
 800b814:	370c      	adds	r7, #12
 800b816:	46bd      	mov	sp, r7
 800b818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81c:	4770      	bx	lr

0800b81e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b81e:	b480      	push	{r7}
 800b820:	b085      	sub	sp, #20
 800b822:	af00      	add	r7, sp, #0
 800b824:	6078      	str	r0, [r7, #4]
 800b826:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	685b      	ldr	r3, [r3, #4]
 800b82c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	68fa      	ldr	r2, [r7, #12]
 800b832:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	689a      	ldr	r2, [r3, #8]
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	689b      	ldr	r3, [r3, #8]
 800b840:	683a      	ldr	r2, [r7, #0]
 800b842:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	683a      	ldr	r2, [r7, #0]
 800b848:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	687a      	ldr	r2, [r7, #4]
 800b84e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	1c5a      	adds	r2, r3, #1
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	601a      	str	r2, [r3, #0]
}
 800b85a:	bf00      	nop
 800b85c:	3714      	adds	r7, #20
 800b85e:	46bd      	mov	sp, r7
 800b860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b864:	4770      	bx	lr

0800b866 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b866:	b480      	push	{r7}
 800b868:	b085      	sub	sp, #20
 800b86a:	af00      	add	r7, sp, #0
 800b86c:	6078      	str	r0, [r7, #4]
 800b86e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b876:	68bb      	ldr	r3, [r7, #8]
 800b878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b87c:	d103      	bne.n	800b886 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	691b      	ldr	r3, [r3, #16]
 800b882:	60fb      	str	r3, [r7, #12]
 800b884:	e00c      	b.n	800b8a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	3308      	adds	r3, #8
 800b88a:	60fb      	str	r3, [r7, #12]
 800b88c:	e002      	b.n	800b894 <vListInsert+0x2e>
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	685b      	ldr	r3, [r3, #4]
 800b892:	60fb      	str	r3, [r7, #12]
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	685b      	ldr	r3, [r3, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	68ba      	ldr	r2, [r7, #8]
 800b89c:	429a      	cmp	r2, r3
 800b89e:	d2f6      	bcs.n	800b88e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	685a      	ldr	r2, [r3, #4]
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	685b      	ldr	r3, [r3, #4]
 800b8ac:	683a      	ldr	r2, [r7, #0]
 800b8ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	68fa      	ldr	r2, [r7, #12]
 800b8b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	683a      	ldr	r2, [r7, #0]
 800b8ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	687a      	ldr	r2, [r7, #4]
 800b8c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	1c5a      	adds	r2, r3, #1
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	601a      	str	r2, [r3, #0]
}
 800b8cc:	bf00      	nop
 800b8ce:	3714      	adds	r7, #20
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d6:	4770      	bx	lr

0800b8d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b8d8:	b480      	push	{r7}
 800b8da:	b085      	sub	sp, #20
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	691b      	ldr	r3, [r3, #16]
 800b8e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	685b      	ldr	r3, [r3, #4]
 800b8ea:	687a      	ldr	r2, [r7, #4]
 800b8ec:	6892      	ldr	r2, [r2, #8]
 800b8ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	689b      	ldr	r3, [r3, #8]
 800b8f4:	687a      	ldr	r2, [r7, #4]
 800b8f6:	6852      	ldr	r2, [r2, #4]
 800b8f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	685b      	ldr	r3, [r3, #4]
 800b8fe:	687a      	ldr	r2, [r7, #4]
 800b900:	429a      	cmp	r2, r3
 800b902:	d103      	bne.n	800b90c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	689a      	ldr	r2, [r3, #8]
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2200      	movs	r2, #0
 800b910:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	1e5a      	subs	r2, r3, #1
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	681b      	ldr	r3, [r3, #0]
}
 800b920:	4618      	mov	r0, r3
 800b922:	3714      	adds	r7, #20
 800b924:	46bd      	mov	sp, r7
 800b926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92a:	4770      	bx	lr

0800b92c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b084      	sub	sp, #16
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
 800b934:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d10a      	bne.n	800b956 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b940:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b944:	f383 8811 	msr	BASEPRI, r3
 800b948:	f3bf 8f6f 	isb	sy
 800b94c:	f3bf 8f4f 	dsb	sy
 800b950:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b952:	bf00      	nop
 800b954:	e7fe      	b.n	800b954 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b956:	f002 f9bd 	bl	800dcd4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	681a      	ldr	r2, [r3, #0]
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b962:	68f9      	ldr	r1, [r7, #12]
 800b964:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b966:	fb01 f303 	mul.w	r3, r1, r3
 800b96a:	441a      	add	r2, r3
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	2200      	movs	r2, #0
 800b974:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	681a      	ldr	r2, [r3, #0]
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	681a      	ldr	r2, [r3, #0]
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b986:	3b01      	subs	r3, #1
 800b988:	68f9      	ldr	r1, [r7, #12]
 800b98a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b98c:	fb01 f303 	mul.w	r3, r1, r3
 800b990:	441a      	add	r2, r3
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	22ff      	movs	r2, #255	; 0xff
 800b99a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	22ff      	movs	r2, #255	; 0xff
 800b9a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d114      	bne.n	800b9d6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	691b      	ldr	r3, [r3, #16]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d01a      	beq.n	800b9ea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	3310      	adds	r3, #16
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	f001 f9cb 	bl	800cd54 <xTaskRemoveFromEventList>
 800b9be:	4603      	mov	r3, r0
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d012      	beq.n	800b9ea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b9c4:	4b0c      	ldr	r3, [pc, #48]	; (800b9f8 <xQueueGenericReset+0xcc>)
 800b9c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9ca:	601a      	str	r2, [r3, #0]
 800b9cc:	f3bf 8f4f 	dsb	sy
 800b9d0:	f3bf 8f6f 	isb	sy
 800b9d4:	e009      	b.n	800b9ea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	3310      	adds	r3, #16
 800b9da:	4618      	mov	r0, r3
 800b9dc:	f7ff fef2 	bl	800b7c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	3324      	adds	r3, #36	; 0x24
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f7ff feed 	bl	800b7c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b9ea:	f002 f9a3 	bl	800dd34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b9ee:	2301      	movs	r3, #1
}
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	3710      	adds	r7, #16
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bd80      	pop	{r7, pc}
 800b9f8:	e000ed04 	.word	0xe000ed04

0800b9fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b08e      	sub	sp, #56	; 0x38
 800ba00:	af02      	add	r7, sp, #8
 800ba02:	60f8      	str	r0, [r7, #12]
 800ba04:	60b9      	str	r1, [r7, #8]
 800ba06:	607a      	str	r2, [r7, #4]
 800ba08:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d10a      	bne.n	800ba26 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ba10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba14:	f383 8811 	msr	BASEPRI, r3
 800ba18:	f3bf 8f6f 	isb	sy
 800ba1c:	f3bf 8f4f 	dsb	sy
 800ba20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ba22:	bf00      	nop
 800ba24:	e7fe      	b.n	800ba24 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d10a      	bne.n	800ba42 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ba2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba30:	f383 8811 	msr	BASEPRI, r3
 800ba34:	f3bf 8f6f 	isb	sy
 800ba38:	f3bf 8f4f 	dsb	sy
 800ba3c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ba3e:	bf00      	nop
 800ba40:	e7fe      	b.n	800ba40 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d002      	beq.n	800ba4e <xQueueGenericCreateStatic+0x52>
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d001      	beq.n	800ba52 <xQueueGenericCreateStatic+0x56>
 800ba4e:	2301      	movs	r3, #1
 800ba50:	e000      	b.n	800ba54 <xQueueGenericCreateStatic+0x58>
 800ba52:	2300      	movs	r3, #0
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d10a      	bne.n	800ba6e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ba58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba5c:	f383 8811 	msr	BASEPRI, r3
 800ba60:	f3bf 8f6f 	isb	sy
 800ba64:	f3bf 8f4f 	dsb	sy
 800ba68:	623b      	str	r3, [r7, #32]
}
 800ba6a:	bf00      	nop
 800ba6c:	e7fe      	b.n	800ba6c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d102      	bne.n	800ba7a <xQueueGenericCreateStatic+0x7e>
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d101      	bne.n	800ba7e <xQueueGenericCreateStatic+0x82>
 800ba7a:	2301      	movs	r3, #1
 800ba7c:	e000      	b.n	800ba80 <xQueueGenericCreateStatic+0x84>
 800ba7e:	2300      	movs	r3, #0
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d10a      	bne.n	800ba9a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ba84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba88:	f383 8811 	msr	BASEPRI, r3
 800ba8c:	f3bf 8f6f 	isb	sy
 800ba90:	f3bf 8f4f 	dsb	sy
 800ba94:	61fb      	str	r3, [r7, #28]
}
 800ba96:	bf00      	nop
 800ba98:	e7fe      	b.n	800ba98 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ba9a:	2348      	movs	r3, #72	; 0x48
 800ba9c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ba9e:	697b      	ldr	r3, [r7, #20]
 800baa0:	2b48      	cmp	r3, #72	; 0x48
 800baa2:	d00a      	beq.n	800baba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800baa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baa8:	f383 8811 	msr	BASEPRI, r3
 800baac:	f3bf 8f6f 	isb	sy
 800bab0:	f3bf 8f4f 	dsb	sy
 800bab4:	61bb      	str	r3, [r7, #24]
}
 800bab6:	bf00      	nop
 800bab8:	e7fe      	b.n	800bab8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800baba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d00d      	beq.n	800bae2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bac8:	2201      	movs	r2, #1
 800baca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bace:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bad4:	9300      	str	r3, [sp, #0]
 800bad6:	4613      	mov	r3, r2
 800bad8:	687a      	ldr	r2, [r7, #4]
 800bada:	68b9      	ldr	r1, [r7, #8]
 800badc:	68f8      	ldr	r0, [r7, #12]
 800bade:	f000 f83f 	bl	800bb60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bae4:	4618      	mov	r0, r3
 800bae6:	3730      	adds	r7, #48	; 0x30
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}

0800baec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800baec:	b580      	push	{r7, lr}
 800baee:	b08a      	sub	sp, #40	; 0x28
 800baf0:	af02      	add	r7, sp, #8
 800baf2:	60f8      	str	r0, [r7, #12]
 800baf4:	60b9      	str	r1, [r7, #8]
 800baf6:	4613      	mov	r3, r2
 800baf8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d10a      	bne.n	800bb16 <xQueueGenericCreate+0x2a>
	__asm volatile
 800bb00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb04:	f383 8811 	msr	BASEPRI, r3
 800bb08:	f3bf 8f6f 	isb	sy
 800bb0c:	f3bf 8f4f 	dsb	sy
 800bb10:	613b      	str	r3, [r7, #16]
}
 800bb12:	bf00      	nop
 800bb14:	e7fe      	b.n	800bb14 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	68ba      	ldr	r2, [r7, #8]
 800bb1a:	fb02 f303 	mul.w	r3, r2, r3
 800bb1e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bb20:	69fb      	ldr	r3, [r7, #28]
 800bb22:	3348      	adds	r3, #72	; 0x48
 800bb24:	4618      	mov	r0, r3
 800bb26:	f002 f9f7 	bl	800df18 <pvPortMalloc>
 800bb2a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bb2c:	69bb      	ldr	r3, [r7, #24]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d011      	beq.n	800bb56 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bb32:	69bb      	ldr	r3, [r7, #24]
 800bb34:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bb36:	697b      	ldr	r3, [r7, #20]
 800bb38:	3348      	adds	r3, #72	; 0x48
 800bb3a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bb3c:	69bb      	ldr	r3, [r7, #24]
 800bb3e:	2200      	movs	r2, #0
 800bb40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bb44:	79fa      	ldrb	r2, [r7, #7]
 800bb46:	69bb      	ldr	r3, [r7, #24]
 800bb48:	9300      	str	r3, [sp, #0]
 800bb4a:	4613      	mov	r3, r2
 800bb4c:	697a      	ldr	r2, [r7, #20]
 800bb4e:	68b9      	ldr	r1, [r7, #8]
 800bb50:	68f8      	ldr	r0, [r7, #12]
 800bb52:	f000 f805 	bl	800bb60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bb56:	69bb      	ldr	r3, [r7, #24]
	}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	3720      	adds	r7, #32
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}

0800bb60 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b084      	sub	sp, #16
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	60f8      	str	r0, [r7, #12]
 800bb68:	60b9      	str	r1, [r7, #8]
 800bb6a:	607a      	str	r2, [r7, #4]
 800bb6c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bb6e:	68bb      	ldr	r3, [r7, #8]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d103      	bne.n	800bb7c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bb74:	69bb      	ldr	r3, [r7, #24]
 800bb76:	69ba      	ldr	r2, [r7, #24]
 800bb78:	601a      	str	r2, [r3, #0]
 800bb7a:	e002      	b.n	800bb82 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bb7c:	69bb      	ldr	r3, [r7, #24]
 800bb7e:	687a      	ldr	r2, [r7, #4]
 800bb80:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bb82:	69bb      	ldr	r3, [r7, #24]
 800bb84:	68fa      	ldr	r2, [r7, #12]
 800bb86:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bb88:	69bb      	ldr	r3, [r7, #24]
 800bb8a:	68ba      	ldr	r2, [r7, #8]
 800bb8c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bb8e:	2101      	movs	r1, #1
 800bb90:	69b8      	ldr	r0, [r7, #24]
 800bb92:	f7ff fecb 	bl	800b92c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bb96:	bf00      	nop
 800bb98:	3710      	adds	r7, #16
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	bd80      	pop	{r7, pc}
	...

0800bba0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b08e      	sub	sp, #56	; 0x38
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	60f8      	str	r0, [r7, #12]
 800bba8:	60b9      	str	r1, [r7, #8]
 800bbaa:	607a      	str	r2, [r7, #4]
 800bbac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bbae:	2300      	movs	r3, #0
 800bbb0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bbb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d10a      	bne.n	800bbd2 <xQueueGenericSend+0x32>
	__asm volatile
 800bbbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbc0:	f383 8811 	msr	BASEPRI, r3
 800bbc4:	f3bf 8f6f 	isb	sy
 800bbc8:	f3bf 8f4f 	dsb	sy
 800bbcc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bbce:	bf00      	nop
 800bbd0:	e7fe      	b.n	800bbd0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bbd2:	68bb      	ldr	r3, [r7, #8]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d103      	bne.n	800bbe0 <xQueueGenericSend+0x40>
 800bbd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d101      	bne.n	800bbe4 <xQueueGenericSend+0x44>
 800bbe0:	2301      	movs	r3, #1
 800bbe2:	e000      	b.n	800bbe6 <xQueueGenericSend+0x46>
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d10a      	bne.n	800bc00 <xQueueGenericSend+0x60>
	__asm volatile
 800bbea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbee:	f383 8811 	msr	BASEPRI, r3
 800bbf2:	f3bf 8f6f 	isb	sy
 800bbf6:	f3bf 8f4f 	dsb	sy
 800bbfa:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bbfc:	bf00      	nop
 800bbfe:	e7fe      	b.n	800bbfe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	2b02      	cmp	r3, #2
 800bc04:	d103      	bne.n	800bc0e <xQueueGenericSend+0x6e>
 800bc06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc0a:	2b01      	cmp	r3, #1
 800bc0c:	d101      	bne.n	800bc12 <xQueueGenericSend+0x72>
 800bc0e:	2301      	movs	r3, #1
 800bc10:	e000      	b.n	800bc14 <xQueueGenericSend+0x74>
 800bc12:	2300      	movs	r3, #0
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d10a      	bne.n	800bc2e <xQueueGenericSend+0x8e>
	__asm volatile
 800bc18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc1c:	f383 8811 	msr	BASEPRI, r3
 800bc20:	f3bf 8f6f 	isb	sy
 800bc24:	f3bf 8f4f 	dsb	sy
 800bc28:	623b      	str	r3, [r7, #32]
}
 800bc2a:	bf00      	nop
 800bc2c:	e7fe      	b.n	800bc2c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bc2e:	f001 fa51 	bl	800d0d4 <xTaskGetSchedulerState>
 800bc32:	4603      	mov	r3, r0
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d102      	bne.n	800bc3e <xQueueGenericSend+0x9e>
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d101      	bne.n	800bc42 <xQueueGenericSend+0xa2>
 800bc3e:	2301      	movs	r3, #1
 800bc40:	e000      	b.n	800bc44 <xQueueGenericSend+0xa4>
 800bc42:	2300      	movs	r3, #0
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d10a      	bne.n	800bc5e <xQueueGenericSend+0xbe>
	__asm volatile
 800bc48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc4c:	f383 8811 	msr	BASEPRI, r3
 800bc50:	f3bf 8f6f 	isb	sy
 800bc54:	f3bf 8f4f 	dsb	sy
 800bc58:	61fb      	str	r3, [r7, #28]
}
 800bc5a:	bf00      	nop
 800bc5c:	e7fe      	b.n	800bc5c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bc5e:	f002 f839 	bl	800dcd4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bc62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc6a:	429a      	cmp	r2, r3
 800bc6c:	d302      	bcc.n	800bc74 <xQueueGenericSend+0xd4>
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	2b02      	cmp	r3, #2
 800bc72:	d129      	bne.n	800bcc8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bc74:	683a      	ldr	r2, [r7, #0]
 800bc76:	68b9      	ldr	r1, [r7, #8]
 800bc78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc7a:	f000 fa8b 	bl	800c194 <prvCopyDataToQueue>
 800bc7e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bc80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d010      	beq.n	800bcaa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bc88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc8a:	3324      	adds	r3, #36	; 0x24
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	f001 f861 	bl	800cd54 <xTaskRemoveFromEventList>
 800bc92:	4603      	mov	r3, r0
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d013      	beq.n	800bcc0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bc98:	4b3f      	ldr	r3, [pc, #252]	; (800bd98 <xQueueGenericSend+0x1f8>)
 800bc9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc9e:	601a      	str	r2, [r3, #0]
 800bca0:	f3bf 8f4f 	dsb	sy
 800bca4:	f3bf 8f6f 	isb	sy
 800bca8:	e00a      	b.n	800bcc0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bcaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d007      	beq.n	800bcc0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bcb0:	4b39      	ldr	r3, [pc, #228]	; (800bd98 <xQueueGenericSend+0x1f8>)
 800bcb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcb6:	601a      	str	r2, [r3, #0]
 800bcb8:	f3bf 8f4f 	dsb	sy
 800bcbc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bcc0:	f002 f838 	bl	800dd34 <vPortExitCritical>
				return pdPASS;
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	e063      	b.n	800bd90 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d103      	bne.n	800bcd6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bcce:	f002 f831 	bl	800dd34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	e05c      	b.n	800bd90 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bcd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d106      	bne.n	800bcea <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bcdc:	f107 0314 	add.w	r3, r7, #20
 800bce0:	4618      	mov	r0, r3
 800bce2:	f001 f899 	bl	800ce18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bce6:	2301      	movs	r3, #1
 800bce8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bcea:	f002 f823 	bl	800dd34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bcee:	f000 fe0d 	bl	800c90c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bcf2:	f001 ffef 	bl	800dcd4 <vPortEnterCritical>
 800bcf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcf8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bcfc:	b25b      	sxtb	r3, r3
 800bcfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd02:	d103      	bne.n	800bd0c <xQueueGenericSend+0x16c>
 800bd04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd06:	2200      	movs	r2, #0
 800bd08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bd0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd12:	b25b      	sxtb	r3, r3
 800bd14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd18:	d103      	bne.n	800bd22 <xQueueGenericSend+0x182>
 800bd1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bd22:	f002 f807 	bl	800dd34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bd26:	1d3a      	adds	r2, r7, #4
 800bd28:	f107 0314 	add.w	r3, r7, #20
 800bd2c:	4611      	mov	r1, r2
 800bd2e:	4618      	mov	r0, r3
 800bd30:	f001 f888 	bl	800ce44 <xTaskCheckForTimeOut>
 800bd34:	4603      	mov	r3, r0
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d124      	bne.n	800bd84 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bd3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd3c:	f000 fb22 	bl	800c384 <prvIsQueueFull>
 800bd40:	4603      	mov	r3, r0
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d018      	beq.n	800bd78 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bd46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd48:	3310      	adds	r3, #16
 800bd4a:	687a      	ldr	r2, [r7, #4]
 800bd4c:	4611      	mov	r1, r2
 800bd4e:	4618      	mov	r0, r3
 800bd50:	f000 ffb0 	bl	800ccb4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bd54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd56:	f000 faad 	bl	800c2b4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bd5a:	f000 fde5 	bl	800c928 <xTaskResumeAll>
 800bd5e:	4603      	mov	r3, r0
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	f47f af7c 	bne.w	800bc5e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800bd66:	4b0c      	ldr	r3, [pc, #48]	; (800bd98 <xQueueGenericSend+0x1f8>)
 800bd68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd6c:	601a      	str	r2, [r3, #0]
 800bd6e:	f3bf 8f4f 	dsb	sy
 800bd72:	f3bf 8f6f 	isb	sy
 800bd76:	e772      	b.n	800bc5e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bd78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd7a:	f000 fa9b 	bl	800c2b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bd7e:	f000 fdd3 	bl	800c928 <xTaskResumeAll>
 800bd82:	e76c      	b.n	800bc5e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bd84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd86:	f000 fa95 	bl	800c2b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bd8a:	f000 fdcd 	bl	800c928 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bd8e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bd90:	4618      	mov	r0, r3
 800bd92:	3738      	adds	r7, #56	; 0x38
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}
 800bd98:	e000ed04 	.word	0xe000ed04

0800bd9c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b090      	sub	sp, #64	; 0x40
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	60f8      	str	r0, [r7, #12]
 800bda4:	60b9      	str	r1, [r7, #8]
 800bda6:	607a      	str	r2, [r7, #4]
 800bda8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800bdae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d10a      	bne.n	800bdca <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800bdb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdb8:	f383 8811 	msr	BASEPRI, r3
 800bdbc:	f3bf 8f6f 	isb	sy
 800bdc0:	f3bf 8f4f 	dsb	sy
 800bdc4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bdc6:	bf00      	nop
 800bdc8:	e7fe      	b.n	800bdc8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d103      	bne.n	800bdd8 <xQueueGenericSendFromISR+0x3c>
 800bdd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d101      	bne.n	800bddc <xQueueGenericSendFromISR+0x40>
 800bdd8:	2301      	movs	r3, #1
 800bdda:	e000      	b.n	800bdde <xQueueGenericSendFromISR+0x42>
 800bddc:	2300      	movs	r3, #0
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d10a      	bne.n	800bdf8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800bde2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bde6:	f383 8811 	msr	BASEPRI, r3
 800bdea:	f3bf 8f6f 	isb	sy
 800bdee:	f3bf 8f4f 	dsb	sy
 800bdf2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bdf4:	bf00      	nop
 800bdf6:	e7fe      	b.n	800bdf6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	2b02      	cmp	r3, #2
 800bdfc:	d103      	bne.n	800be06 <xQueueGenericSendFromISR+0x6a>
 800bdfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be02:	2b01      	cmp	r3, #1
 800be04:	d101      	bne.n	800be0a <xQueueGenericSendFromISR+0x6e>
 800be06:	2301      	movs	r3, #1
 800be08:	e000      	b.n	800be0c <xQueueGenericSendFromISR+0x70>
 800be0a:	2300      	movs	r3, #0
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d10a      	bne.n	800be26 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800be10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be14:	f383 8811 	msr	BASEPRI, r3
 800be18:	f3bf 8f6f 	isb	sy
 800be1c:	f3bf 8f4f 	dsb	sy
 800be20:	623b      	str	r3, [r7, #32]
}
 800be22:	bf00      	nop
 800be24:	e7fe      	b.n	800be24 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800be26:	f002 f837 	bl	800de98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800be2a:	f3ef 8211 	mrs	r2, BASEPRI
 800be2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be32:	f383 8811 	msr	BASEPRI, r3
 800be36:	f3bf 8f6f 	isb	sy
 800be3a:	f3bf 8f4f 	dsb	sy
 800be3e:	61fa      	str	r2, [r7, #28]
 800be40:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800be42:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800be44:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800be46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be4e:	429a      	cmp	r2, r3
 800be50:	d302      	bcc.n	800be58 <xQueueGenericSendFromISR+0xbc>
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	2b02      	cmp	r3, #2
 800be56:	d12f      	bne.n	800beb8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800be58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800be62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be66:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800be68:	683a      	ldr	r2, [r7, #0]
 800be6a:	68b9      	ldr	r1, [r7, #8]
 800be6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800be6e:	f000 f991 	bl	800c194 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800be72:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800be76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be7a:	d112      	bne.n	800bea2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800be7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be80:	2b00      	cmp	r3, #0
 800be82:	d016      	beq.n	800beb2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800be84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be86:	3324      	adds	r3, #36	; 0x24
 800be88:	4618      	mov	r0, r3
 800be8a:	f000 ff63 	bl	800cd54 <xTaskRemoveFromEventList>
 800be8e:	4603      	mov	r3, r0
 800be90:	2b00      	cmp	r3, #0
 800be92:	d00e      	beq.n	800beb2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d00b      	beq.n	800beb2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2201      	movs	r2, #1
 800be9e:	601a      	str	r2, [r3, #0]
 800bea0:	e007      	b.n	800beb2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bea2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bea6:	3301      	adds	r3, #1
 800bea8:	b2db      	uxtb	r3, r3
 800beaa:	b25a      	sxtb	r2, r3
 800beac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800beb2:	2301      	movs	r3, #1
 800beb4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800beb6:	e001      	b.n	800bebc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800beb8:	2300      	movs	r3, #0
 800beba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bebe:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bec0:	697b      	ldr	r3, [r7, #20]
 800bec2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bec6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800beca:	4618      	mov	r0, r3
 800becc:	3740      	adds	r7, #64	; 0x40
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}
	...

0800bed4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b08c      	sub	sp, #48	; 0x30
 800bed8:	af00      	add	r7, sp, #0
 800beda:	60f8      	str	r0, [r7, #12]
 800bedc:	60b9      	str	r1, [r7, #8]
 800bede:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bee0:	2300      	movs	r3, #0
 800bee2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beea:	2b00      	cmp	r3, #0
 800beec:	d10a      	bne.n	800bf04 <xQueueReceive+0x30>
	__asm volatile
 800beee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef2:	f383 8811 	msr	BASEPRI, r3
 800bef6:	f3bf 8f6f 	isb	sy
 800befa:	f3bf 8f4f 	dsb	sy
 800befe:	623b      	str	r3, [r7, #32]
}
 800bf00:	bf00      	nop
 800bf02:	e7fe      	b.n	800bf02 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d103      	bne.n	800bf12 <xQueueReceive+0x3e>
 800bf0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d101      	bne.n	800bf16 <xQueueReceive+0x42>
 800bf12:	2301      	movs	r3, #1
 800bf14:	e000      	b.n	800bf18 <xQueueReceive+0x44>
 800bf16:	2300      	movs	r3, #0
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d10a      	bne.n	800bf32 <xQueueReceive+0x5e>
	__asm volatile
 800bf1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf20:	f383 8811 	msr	BASEPRI, r3
 800bf24:	f3bf 8f6f 	isb	sy
 800bf28:	f3bf 8f4f 	dsb	sy
 800bf2c:	61fb      	str	r3, [r7, #28]
}
 800bf2e:	bf00      	nop
 800bf30:	e7fe      	b.n	800bf30 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bf32:	f001 f8cf 	bl	800d0d4 <xTaskGetSchedulerState>
 800bf36:	4603      	mov	r3, r0
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d102      	bne.n	800bf42 <xQueueReceive+0x6e>
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d101      	bne.n	800bf46 <xQueueReceive+0x72>
 800bf42:	2301      	movs	r3, #1
 800bf44:	e000      	b.n	800bf48 <xQueueReceive+0x74>
 800bf46:	2300      	movs	r3, #0
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d10a      	bne.n	800bf62 <xQueueReceive+0x8e>
	__asm volatile
 800bf4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf50:	f383 8811 	msr	BASEPRI, r3
 800bf54:	f3bf 8f6f 	isb	sy
 800bf58:	f3bf 8f4f 	dsb	sy
 800bf5c:	61bb      	str	r3, [r7, #24]
}
 800bf5e:	bf00      	nop
 800bf60:	e7fe      	b.n	800bf60 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bf62:	f001 feb7 	bl	800dcd4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bf66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf6a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bf6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d01f      	beq.n	800bfb2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bf72:	68b9      	ldr	r1, [r7, #8]
 800bf74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf76:	f000 f977 	bl	800c268 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bf7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf7c:	1e5a      	subs	r2, r3, #1
 800bf7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf80:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bf82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf84:	691b      	ldr	r3, [r3, #16]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d00f      	beq.n	800bfaa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf8c:	3310      	adds	r3, #16
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f000 fee0 	bl	800cd54 <xTaskRemoveFromEventList>
 800bf94:	4603      	mov	r3, r0
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d007      	beq.n	800bfaa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bf9a:	4b3d      	ldr	r3, [pc, #244]	; (800c090 <xQueueReceive+0x1bc>)
 800bf9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfa0:	601a      	str	r2, [r3, #0]
 800bfa2:	f3bf 8f4f 	dsb	sy
 800bfa6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bfaa:	f001 fec3 	bl	800dd34 <vPortExitCritical>
				return pdPASS;
 800bfae:	2301      	movs	r3, #1
 800bfb0:	e069      	b.n	800c086 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d103      	bne.n	800bfc0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bfb8:	f001 febc 	bl	800dd34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	e062      	b.n	800c086 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bfc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d106      	bne.n	800bfd4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bfc6:	f107 0310 	add.w	r3, r7, #16
 800bfca:	4618      	mov	r0, r3
 800bfcc:	f000 ff24 	bl	800ce18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bfd0:	2301      	movs	r3, #1
 800bfd2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bfd4:	f001 feae 	bl	800dd34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bfd8:	f000 fc98 	bl	800c90c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bfdc:	f001 fe7a 	bl	800dcd4 <vPortEnterCritical>
 800bfe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfe2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bfe6:	b25b      	sxtb	r3, r3
 800bfe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfec:	d103      	bne.n	800bff6 <xQueueReceive+0x122>
 800bfee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bff0:	2200      	movs	r2, #0
 800bff2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bff8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bffc:	b25b      	sxtb	r3, r3
 800bffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c002:	d103      	bne.n	800c00c <xQueueReceive+0x138>
 800c004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c006:	2200      	movs	r2, #0
 800c008:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c00c:	f001 fe92 	bl	800dd34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c010:	1d3a      	adds	r2, r7, #4
 800c012:	f107 0310 	add.w	r3, r7, #16
 800c016:	4611      	mov	r1, r2
 800c018:	4618      	mov	r0, r3
 800c01a:	f000 ff13 	bl	800ce44 <xTaskCheckForTimeOut>
 800c01e:	4603      	mov	r3, r0
 800c020:	2b00      	cmp	r3, #0
 800c022:	d123      	bne.n	800c06c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c024:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c026:	f000 f997 	bl	800c358 <prvIsQueueEmpty>
 800c02a:	4603      	mov	r3, r0
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d017      	beq.n	800c060 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c032:	3324      	adds	r3, #36	; 0x24
 800c034:	687a      	ldr	r2, [r7, #4]
 800c036:	4611      	mov	r1, r2
 800c038:	4618      	mov	r0, r3
 800c03a:	f000 fe3b 	bl	800ccb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c03e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c040:	f000 f938 	bl	800c2b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c044:	f000 fc70 	bl	800c928 <xTaskResumeAll>
 800c048:	4603      	mov	r3, r0
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d189      	bne.n	800bf62 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c04e:	4b10      	ldr	r3, [pc, #64]	; (800c090 <xQueueReceive+0x1bc>)
 800c050:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c054:	601a      	str	r2, [r3, #0]
 800c056:	f3bf 8f4f 	dsb	sy
 800c05a:	f3bf 8f6f 	isb	sy
 800c05e:	e780      	b.n	800bf62 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c060:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c062:	f000 f927 	bl	800c2b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c066:	f000 fc5f 	bl	800c928 <xTaskResumeAll>
 800c06a:	e77a      	b.n	800bf62 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c06c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c06e:	f000 f921 	bl	800c2b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c072:	f000 fc59 	bl	800c928 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c076:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c078:	f000 f96e 	bl	800c358 <prvIsQueueEmpty>
 800c07c:	4603      	mov	r3, r0
 800c07e:	2b00      	cmp	r3, #0
 800c080:	f43f af6f 	beq.w	800bf62 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c084:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c086:	4618      	mov	r0, r3
 800c088:	3730      	adds	r7, #48	; 0x30
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd80      	pop	{r7, pc}
 800c08e:	bf00      	nop
 800c090:	e000ed04 	.word	0xe000ed04

0800c094 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b08e      	sub	sp, #56	; 0x38
 800c098:	af00      	add	r7, sp, #0
 800c09a:	60f8      	str	r0, [r7, #12]
 800c09c:	60b9      	str	r1, [r7, #8]
 800c09e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d10a      	bne.n	800c0c0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ae:	f383 8811 	msr	BASEPRI, r3
 800c0b2:	f3bf 8f6f 	isb	sy
 800c0b6:	f3bf 8f4f 	dsb	sy
 800c0ba:	623b      	str	r3, [r7, #32]
}
 800c0bc:	bf00      	nop
 800c0be:	e7fe      	b.n	800c0be <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c0c0:	68bb      	ldr	r3, [r7, #8]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d103      	bne.n	800c0ce <xQueueReceiveFromISR+0x3a>
 800c0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d101      	bne.n	800c0d2 <xQueueReceiveFromISR+0x3e>
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	e000      	b.n	800c0d4 <xQueueReceiveFromISR+0x40>
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d10a      	bne.n	800c0ee <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c0d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0dc:	f383 8811 	msr	BASEPRI, r3
 800c0e0:	f3bf 8f6f 	isb	sy
 800c0e4:	f3bf 8f4f 	dsb	sy
 800c0e8:	61fb      	str	r3, [r7, #28]
}
 800c0ea:	bf00      	nop
 800c0ec:	e7fe      	b.n	800c0ec <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c0ee:	f001 fed3 	bl	800de98 <vPortValidateInterruptPriority>
	__asm volatile
 800c0f2:	f3ef 8211 	mrs	r2, BASEPRI
 800c0f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0fa:	f383 8811 	msr	BASEPRI, r3
 800c0fe:	f3bf 8f6f 	isb	sy
 800c102:	f3bf 8f4f 	dsb	sy
 800c106:	61ba      	str	r2, [r7, #24]
 800c108:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c10a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c10c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c112:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c116:	2b00      	cmp	r3, #0
 800c118:	d02f      	beq.n	800c17a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c11c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c120:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c124:	68b9      	ldr	r1, [r7, #8]
 800c126:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c128:	f000 f89e 	bl	800c268 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c12e:	1e5a      	subs	r2, r3, #1
 800c130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c132:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c134:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c13c:	d112      	bne.n	800c164 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c140:	691b      	ldr	r3, [r3, #16]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d016      	beq.n	800c174 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c148:	3310      	adds	r3, #16
 800c14a:	4618      	mov	r0, r3
 800c14c:	f000 fe02 	bl	800cd54 <xTaskRemoveFromEventList>
 800c150:	4603      	mov	r3, r0
 800c152:	2b00      	cmp	r3, #0
 800c154:	d00e      	beq.n	800c174 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d00b      	beq.n	800c174 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2201      	movs	r2, #1
 800c160:	601a      	str	r2, [r3, #0]
 800c162:	e007      	b.n	800c174 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c164:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c168:	3301      	adds	r3, #1
 800c16a:	b2db      	uxtb	r3, r3
 800c16c:	b25a      	sxtb	r2, r3
 800c16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c170:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c174:	2301      	movs	r3, #1
 800c176:	637b      	str	r3, [r7, #52]	; 0x34
 800c178:	e001      	b.n	800c17e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c17a:	2300      	movs	r3, #0
 800c17c:	637b      	str	r3, [r7, #52]	; 0x34
 800c17e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c180:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c182:	693b      	ldr	r3, [r7, #16]
 800c184:	f383 8811 	msr	BASEPRI, r3
}
 800c188:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c18a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c18c:	4618      	mov	r0, r3
 800c18e:	3738      	adds	r7, #56	; 0x38
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}

0800c194 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b086      	sub	sp, #24
 800c198:	af00      	add	r7, sp, #0
 800c19a:	60f8      	str	r0, [r7, #12]
 800c19c:	60b9      	str	r1, [r7, #8]
 800c19e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1a8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d10d      	bne.n	800c1ce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d14d      	bne.n	800c256 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	689b      	ldr	r3, [r3, #8]
 800c1be:	4618      	mov	r0, r3
 800c1c0:	f000 ffa6 	bl	800d110 <xTaskPriorityDisinherit>
 800c1c4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	609a      	str	r2, [r3, #8]
 800c1cc:	e043      	b.n	800c256 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d119      	bne.n	800c208 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	6858      	ldr	r0, [r3, #4]
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1dc:	461a      	mov	r2, r3
 800c1de:	68b9      	ldr	r1, [r7, #8]
 800c1e0:	f002 fbc2 	bl	800e968 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	685a      	ldr	r2, [r3, #4]
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1ec:	441a      	add	r2, r3
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	685a      	ldr	r2, [r3, #4]
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	689b      	ldr	r3, [r3, #8]
 800c1fa:	429a      	cmp	r2, r3
 800c1fc:	d32b      	bcc.n	800c256 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	681a      	ldr	r2, [r3, #0]
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	605a      	str	r2, [r3, #4]
 800c206:	e026      	b.n	800c256 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	68d8      	ldr	r0, [r3, #12]
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c210:	461a      	mov	r2, r3
 800c212:	68b9      	ldr	r1, [r7, #8]
 800c214:	f002 fba8 	bl	800e968 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	68da      	ldr	r2, [r3, #12]
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c220:	425b      	negs	r3, r3
 800c222:	441a      	add	r2, r3
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	68da      	ldr	r2, [r3, #12]
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	429a      	cmp	r2, r3
 800c232:	d207      	bcs.n	800c244 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	689a      	ldr	r2, [r3, #8]
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c23c:	425b      	negs	r3, r3
 800c23e:	441a      	add	r2, r3
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2b02      	cmp	r3, #2
 800c248:	d105      	bne.n	800c256 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c24a:	693b      	ldr	r3, [r7, #16]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d002      	beq.n	800c256 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c250:	693b      	ldr	r3, [r7, #16]
 800c252:	3b01      	subs	r3, #1
 800c254:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c256:	693b      	ldr	r3, [r7, #16]
 800c258:	1c5a      	adds	r2, r3, #1
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c25e:	697b      	ldr	r3, [r7, #20]
}
 800c260:	4618      	mov	r0, r3
 800c262:	3718      	adds	r7, #24
 800c264:	46bd      	mov	sp, r7
 800c266:	bd80      	pop	{r7, pc}

0800c268 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b082      	sub	sp, #8
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
 800c270:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c276:	2b00      	cmp	r3, #0
 800c278:	d018      	beq.n	800c2ac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	68da      	ldr	r2, [r3, #12]
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c282:	441a      	add	r2, r3
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	68da      	ldr	r2, [r3, #12]
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	689b      	ldr	r3, [r3, #8]
 800c290:	429a      	cmp	r2, r3
 800c292:	d303      	bcc.n	800c29c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681a      	ldr	r2, [r3, #0]
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	68d9      	ldr	r1, [r3, #12]
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2a4:	461a      	mov	r2, r3
 800c2a6:	6838      	ldr	r0, [r7, #0]
 800c2a8:	f002 fb5e 	bl	800e968 <memcpy>
	}
}
 800c2ac:	bf00      	nop
 800c2ae:	3708      	adds	r7, #8
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}

0800c2b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b084      	sub	sp, #16
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c2bc:	f001 fd0a 	bl	800dcd4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c2c6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c2c8:	e011      	b.n	800c2ee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d012      	beq.n	800c2f8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	3324      	adds	r3, #36	; 0x24
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f000 fd3c 	bl	800cd54 <xTaskRemoveFromEventList>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d001      	beq.n	800c2e6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c2e2:	f000 fe11 	bl	800cf08 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c2e6:	7bfb      	ldrb	r3, [r7, #15]
 800c2e8:	3b01      	subs	r3, #1
 800c2ea:	b2db      	uxtb	r3, r3
 800c2ec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c2ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	dce9      	bgt.n	800c2ca <prvUnlockQueue+0x16>
 800c2f6:	e000      	b.n	800c2fa <prvUnlockQueue+0x46>
					break;
 800c2f8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	22ff      	movs	r2, #255	; 0xff
 800c2fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c302:	f001 fd17 	bl	800dd34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c306:	f001 fce5 	bl	800dcd4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c310:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c312:	e011      	b.n	800c338 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	691b      	ldr	r3, [r3, #16]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d012      	beq.n	800c342 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	3310      	adds	r3, #16
 800c320:	4618      	mov	r0, r3
 800c322:	f000 fd17 	bl	800cd54 <xTaskRemoveFromEventList>
 800c326:	4603      	mov	r3, r0
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d001      	beq.n	800c330 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c32c:	f000 fdec 	bl	800cf08 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c330:	7bbb      	ldrb	r3, [r7, #14]
 800c332:	3b01      	subs	r3, #1
 800c334:	b2db      	uxtb	r3, r3
 800c336:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c338:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	dce9      	bgt.n	800c314 <prvUnlockQueue+0x60>
 800c340:	e000      	b.n	800c344 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c342:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	22ff      	movs	r2, #255	; 0xff
 800c348:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c34c:	f001 fcf2 	bl	800dd34 <vPortExitCritical>
}
 800c350:	bf00      	nop
 800c352:	3710      	adds	r7, #16
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}

0800c358 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b084      	sub	sp, #16
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c360:	f001 fcb8 	bl	800dcd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d102      	bne.n	800c372 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c36c:	2301      	movs	r3, #1
 800c36e:	60fb      	str	r3, [r7, #12]
 800c370:	e001      	b.n	800c376 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c372:	2300      	movs	r3, #0
 800c374:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c376:	f001 fcdd 	bl	800dd34 <vPortExitCritical>

	return xReturn;
 800c37a:	68fb      	ldr	r3, [r7, #12]
}
 800c37c:	4618      	mov	r0, r3
 800c37e:	3710      	adds	r7, #16
 800c380:	46bd      	mov	sp, r7
 800c382:	bd80      	pop	{r7, pc}

0800c384 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b084      	sub	sp, #16
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c38c:	f001 fca2 	bl	800dcd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c398:	429a      	cmp	r2, r3
 800c39a:	d102      	bne.n	800c3a2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c39c:	2301      	movs	r3, #1
 800c39e:	60fb      	str	r3, [r7, #12]
 800c3a0:	e001      	b.n	800c3a6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c3a6:	f001 fcc5 	bl	800dd34 <vPortExitCritical>

	return xReturn;
 800c3aa:	68fb      	ldr	r3, [r7, #12]
}
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	3710      	adds	r7, #16
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	bd80      	pop	{r7, pc}

0800c3b4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c3b4:	b480      	push	{r7}
 800c3b6:	b085      	sub	sp, #20
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
 800c3bc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c3be:	2300      	movs	r3, #0
 800c3c0:	60fb      	str	r3, [r7, #12]
 800c3c2:	e014      	b.n	800c3ee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c3c4:	4a0f      	ldr	r2, [pc, #60]	; (800c404 <vQueueAddToRegistry+0x50>)
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d10b      	bne.n	800c3e8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c3d0:	490c      	ldr	r1, [pc, #48]	; (800c404 <vQueueAddToRegistry+0x50>)
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	683a      	ldr	r2, [r7, #0]
 800c3d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c3da:	4a0a      	ldr	r2, [pc, #40]	; (800c404 <vQueueAddToRegistry+0x50>)
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	00db      	lsls	r3, r3, #3
 800c3e0:	4413      	add	r3, r2
 800c3e2:	687a      	ldr	r2, [r7, #4]
 800c3e4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c3e6:	e006      	b.n	800c3f6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	3301      	adds	r3, #1
 800c3ec:	60fb      	str	r3, [r7, #12]
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	2b07      	cmp	r3, #7
 800c3f2:	d9e7      	bls.n	800c3c4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c3f4:	bf00      	nop
 800c3f6:	bf00      	nop
 800c3f8:	3714      	adds	r7, #20
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c400:	4770      	bx	lr
 800c402:	bf00      	nop
 800c404:	20004ad8 	.word	0x20004ad8

0800c408 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b086      	sub	sp, #24
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	60f8      	str	r0, [r7, #12]
 800c410:	60b9      	str	r1, [r7, #8]
 800c412:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c418:	f001 fc5c 	bl	800dcd4 <vPortEnterCritical>
 800c41c:	697b      	ldr	r3, [r7, #20]
 800c41e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c422:	b25b      	sxtb	r3, r3
 800c424:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c428:	d103      	bne.n	800c432 <vQueueWaitForMessageRestricted+0x2a>
 800c42a:	697b      	ldr	r3, [r7, #20]
 800c42c:	2200      	movs	r2, #0
 800c42e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c432:	697b      	ldr	r3, [r7, #20]
 800c434:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c438:	b25b      	sxtb	r3, r3
 800c43a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c43e:	d103      	bne.n	800c448 <vQueueWaitForMessageRestricted+0x40>
 800c440:	697b      	ldr	r3, [r7, #20]
 800c442:	2200      	movs	r2, #0
 800c444:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c448:	f001 fc74 	bl	800dd34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c44c:	697b      	ldr	r3, [r7, #20]
 800c44e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c450:	2b00      	cmp	r3, #0
 800c452:	d106      	bne.n	800c462 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c454:	697b      	ldr	r3, [r7, #20]
 800c456:	3324      	adds	r3, #36	; 0x24
 800c458:	687a      	ldr	r2, [r7, #4]
 800c45a:	68b9      	ldr	r1, [r7, #8]
 800c45c:	4618      	mov	r0, r3
 800c45e:	f000 fc4d 	bl	800ccfc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c462:	6978      	ldr	r0, [r7, #20]
 800c464:	f7ff ff26 	bl	800c2b4 <prvUnlockQueue>
	}
 800c468:	bf00      	nop
 800c46a:	3718      	adds	r7, #24
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bd80      	pop	{r7, pc}

0800c470 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c470:	b580      	push	{r7, lr}
 800c472:	b08e      	sub	sp, #56	; 0x38
 800c474:	af04      	add	r7, sp, #16
 800c476:	60f8      	str	r0, [r7, #12]
 800c478:	60b9      	str	r1, [r7, #8]
 800c47a:	607a      	str	r2, [r7, #4]
 800c47c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c47e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c480:	2b00      	cmp	r3, #0
 800c482:	d10a      	bne.n	800c49a <xTaskCreateStatic+0x2a>
	__asm volatile
 800c484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c488:	f383 8811 	msr	BASEPRI, r3
 800c48c:	f3bf 8f6f 	isb	sy
 800c490:	f3bf 8f4f 	dsb	sy
 800c494:	623b      	str	r3, [r7, #32]
}
 800c496:	bf00      	nop
 800c498:	e7fe      	b.n	800c498 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c49a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d10a      	bne.n	800c4b6 <xTaskCreateStatic+0x46>
	__asm volatile
 800c4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4a4:	f383 8811 	msr	BASEPRI, r3
 800c4a8:	f3bf 8f6f 	isb	sy
 800c4ac:	f3bf 8f4f 	dsb	sy
 800c4b0:	61fb      	str	r3, [r7, #28]
}
 800c4b2:	bf00      	nop
 800c4b4:	e7fe      	b.n	800c4b4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c4b6:	23b4      	movs	r3, #180	; 0xb4
 800c4b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c4ba:	693b      	ldr	r3, [r7, #16]
 800c4bc:	2bb4      	cmp	r3, #180	; 0xb4
 800c4be:	d00a      	beq.n	800c4d6 <xTaskCreateStatic+0x66>
	__asm volatile
 800c4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4c4:	f383 8811 	msr	BASEPRI, r3
 800c4c8:	f3bf 8f6f 	isb	sy
 800c4cc:	f3bf 8f4f 	dsb	sy
 800c4d0:	61bb      	str	r3, [r7, #24]
}
 800c4d2:	bf00      	nop
 800c4d4:	e7fe      	b.n	800c4d4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c4d6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c4d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d01e      	beq.n	800c51c <xTaskCreateStatic+0xac>
 800c4de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d01b      	beq.n	800c51c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c4e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4e6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c4ec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4f0:	2202      	movs	r2, #2
 800c4f2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	9303      	str	r3, [sp, #12]
 800c4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4fc:	9302      	str	r3, [sp, #8]
 800c4fe:	f107 0314 	add.w	r3, r7, #20
 800c502:	9301      	str	r3, [sp, #4]
 800c504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c506:	9300      	str	r3, [sp, #0]
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	687a      	ldr	r2, [r7, #4]
 800c50c:	68b9      	ldr	r1, [r7, #8]
 800c50e:	68f8      	ldr	r0, [r7, #12]
 800c510:	f000 f850 	bl	800c5b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c514:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c516:	f000 f8eb 	bl	800c6f0 <prvAddNewTaskToReadyList>
 800c51a:	e001      	b.n	800c520 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c51c:	2300      	movs	r3, #0
 800c51e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c520:	697b      	ldr	r3, [r7, #20]
	}
 800c522:	4618      	mov	r0, r3
 800c524:	3728      	adds	r7, #40	; 0x28
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}

0800c52a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c52a:	b580      	push	{r7, lr}
 800c52c:	b08c      	sub	sp, #48	; 0x30
 800c52e:	af04      	add	r7, sp, #16
 800c530:	60f8      	str	r0, [r7, #12]
 800c532:	60b9      	str	r1, [r7, #8]
 800c534:	603b      	str	r3, [r7, #0]
 800c536:	4613      	mov	r3, r2
 800c538:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c53a:	88fb      	ldrh	r3, [r7, #6]
 800c53c:	009b      	lsls	r3, r3, #2
 800c53e:	4618      	mov	r0, r3
 800c540:	f001 fcea 	bl	800df18 <pvPortMalloc>
 800c544:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c546:	697b      	ldr	r3, [r7, #20]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d00e      	beq.n	800c56a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c54c:	20b4      	movs	r0, #180	; 0xb4
 800c54e:	f001 fce3 	bl	800df18 <pvPortMalloc>
 800c552:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c554:	69fb      	ldr	r3, [r7, #28]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d003      	beq.n	800c562 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c55a:	69fb      	ldr	r3, [r7, #28]
 800c55c:	697a      	ldr	r2, [r7, #20]
 800c55e:	631a      	str	r2, [r3, #48]	; 0x30
 800c560:	e005      	b.n	800c56e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c562:	6978      	ldr	r0, [r7, #20]
 800c564:	f001 fda4 	bl	800e0b0 <vPortFree>
 800c568:	e001      	b.n	800c56e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c56a:	2300      	movs	r3, #0
 800c56c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c56e:	69fb      	ldr	r3, [r7, #28]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d017      	beq.n	800c5a4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c574:	69fb      	ldr	r3, [r7, #28]
 800c576:	2200      	movs	r2, #0
 800c578:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c57c:	88fa      	ldrh	r2, [r7, #6]
 800c57e:	2300      	movs	r3, #0
 800c580:	9303      	str	r3, [sp, #12]
 800c582:	69fb      	ldr	r3, [r7, #28]
 800c584:	9302      	str	r3, [sp, #8]
 800c586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c588:	9301      	str	r3, [sp, #4]
 800c58a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c58c:	9300      	str	r3, [sp, #0]
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	68b9      	ldr	r1, [r7, #8]
 800c592:	68f8      	ldr	r0, [r7, #12]
 800c594:	f000 f80e 	bl	800c5b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c598:	69f8      	ldr	r0, [r7, #28]
 800c59a:	f000 f8a9 	bl	800c6f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c59e:	2301      	movs	r3, #1
 800c5a0:	61bb      	str	r3, [r7, #24]
 800c5a2:	e002      	b.n	800c5aa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c5a4:	f04f 33ff 	mov.w	r3, #4294967295
 800c5a8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c5aa:	69bb      	ldr	r3, [r7, #24]
	}
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	3720      	adds	r7, #32
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bd80      	pop	{r7, pc}

0800c5b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b088      	sub	sp, #32
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	60f8      	str	r0, [r7, #12]
 800c5bc:	60b9      	str	r1, [r7, #8]
 800c5be:	607a      	str	r2, [r7, #4]
 800c5c0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c5cc:	3b01      	subs	r3, #1
 800c5ce:	009b      	lsls	r3, r3, #2
 800c5d0:	4413      	add	r3, r2
 800c5d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c5d4:	69bb      	ldr	r3, [r7, #24]
 800c5d6:	f023 0307 	bic.w	r3, r3, #7
 800c5da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c5dc:	69bb      	ldr	r3, [r7, #24]
 800c5de:	f003 0307 	and.w	r3, r3, #7
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d00a      	beq.n	800c5fc <prvInitialiseNewTask+0x48>
	__asm volatile
 800c5e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ea:	f383 8811 	msr	BASEPRI, r3
 800c5ee:	f3bf 8f6f 	isb	sy
 800c5f2:	f3bf 8f4f 	dsb	sy
 800c5f6:	617b      	str	r3, [r7, #20]
}
 800c5f8:	bf00      	nop
 800c5fa:	e7fe      	b.n	800c5fa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c5fc:	68bb      	ldr	r3, [r7, #8]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d01f      	beq.n	800c642 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c602:	2300      	movs	r3, #0
 800c604:	61fb      	str	r3, [r7, #28]
 800c606:	e012      	b.n	800c62e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c608:	68ba      	ldr	r2, [r7, #8]
 800c60a:	69fb      	ldr	r3, [r7, #28]
 800c60c:	4413      	add	r3, r2
 800c60e:	7819      	ldrb	r1, [r3, #0]
 800c610:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c612:	69fb      	ldr	r3, [r7, #28]
 800c614:	4413      	add	r3, r2
 800c616:	3334      	adds	r3, #52	; 0x34
 800c618:	460a      	mov	r2, r1
 800c61a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c61c:	68ba      	ldr	r2, [r7, #8]
 800c61e:	69fb      	ldr	r3, [r7, #28]
 800c620:	4413      	add	r3, r2
 800c622:	781b      	ldrb	r3, [r3, #0]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d006      	beq.n	800c636 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c628:	69fb      	ldr	r3, [r7, #28]
 800c62a:	3301      	adds	r3, #1
 800c62c:	61fb      	str	r3, [r7, #28]
 800c62e:	69fb      	ldr	r3, [r7, #28]
 800c630:	2b0f      	cmp	r3, #15
 800c632:	d9e9      	bls.n	800c608 <prvInitialiseNewTask+0x54>
 800c634:	e000      	b.n	800c638 <prvInitialiseNewTask+0x84>
			{
				break;
 800c636:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c63a:	2200      	movs	r2, #0
 800c63c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c640:	e003      	b.n	800c64a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c644:	2200      	movs	r2, #0
 800c646:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c64a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c64c:	2b06      	cmp	r3, #6
 800c64e:	d901      	bls.n	800c654 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c650:	2306      	movs	r3, #6
 800c652:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c656:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c658:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c65c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c65e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c662:	2200      	movs	r2, #0
 800c664:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c668:	3304      	adds	r3, #4
 800c66a:	4618      	mov	r0, r3
 800c66c:	f7ff f8ca 	bl	800b804 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c672:	3318      	adds	r3, #24
 800c674:	4618      	mov	r0, r3
 800c676:	f7ff f8c5 	bl	800b804 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c67c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c67e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c682:	f1c3 0207 	rsb	r2, r3, #7
 800c686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c688:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c68c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c68e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c692:	2200      	movs	r2, #0
 800c694:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c69a:	2200      	movs	r2, #0
 800c69c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c6a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6a2:	334c      	adds	r3, #76	; 0x4c
 800c6a4:	2260      	movs	r2, #96	; 0x60
 800c6a6:	2100      	movs	r1, #0
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	f002 f96b 	bl	800e984 <memset>
 800c6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6b0:	4a0c      	ldr	r2, [pc, #48]	; (800c6e4 <prvInitialiseNewTask+0x130>)
 800c6b2:	651a      	str	r2, [r3, #80]	; 0x50
 800c6b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6b6:	4a0c      	ldr	r2, [pc, #48]	; (800c6e8 <prvInitialiseNewTask+0x134>)
 800c6b8:	655a      	str	r2, [r3, #84]	; 0x54
 800c6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6bc:	4a0b      	ldr	r2, [pc, #44]	; (800c6ec <prvInitialiseNewTask+0x138>)
 800c6be:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c6c0:	683a      	ldr	r2, [r7, #0]
 800c6c2:	68f9      	ldr	r1, [r7, #12]
 800c6c4:	69b8      	ldr	r0, [r7, #24]
 800c6c6:	f001 f9db 	bl	800da80 <pxPortInitialiseStack>
 800c6ca:	4602      	mov	r2, r0
 800c6cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ce:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c6d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d002      	beq.n	800c6dc <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c6d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6da:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c6dc:	bf00      	nop
 800c6de:	3720      	adds	r7, #32
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	bd80      	pop	{r7, pc}
 800c6e4:	0800f444 	.word	0x0800f444
 800c6e8:	0800f464 	.word	0x0800f464
 800c6ec:	0800f424 	.word	0x0800f424

0800c6f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b082      	sub	sp, #8
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c6f8:	f001 faec 	bl	800dcd4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c6fc:	4b2a      	ldr	r3, [pc, #168]	; (800c7a8 <prvAddNewTaskToReadyList+0xb8>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	3301      	adds	r3, #1
 800c702:	4a29      	ldr	r2, [pc, #164]	; (800c7a8 <prvAddNewTaskToReadyList+0xb8>)
 800c704:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c706:	4b29      	ldr	r3, [pc, #164]	; (800c7ac <prvAddNewTaskToReadyList+0xbc>)
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d109      	bne.n	800c722 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c70e:	4a27      	ldr	r2, [pc, #156]	; (800c7ac <prvAddNewTaskToReadyList+0xbc>)
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c714:	4b24      	ldr	r3, [pc, #144]	; (800c7a8 <prvAddNewTaskToReadyList+0xb8>)
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	2b01      	cmp	r3, #1
 800c71a:	d110      	bne.n	800c73e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c71c:	f000 fc18 	bl	800cf50 <prvInitialiseTaskLists>
 800c720:	e00d      	b.n	800c73e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c722:	4b23      	ldr	r3, [pc, #140]	; (800c7b0 <prvAddNewTaskToReadyList+0xc0>)
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d109      	bne.n	800c73e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c72a:	4b20      	ldr	r3, [pc, #128]	; (800c7ac <prvAddNewTaskToReadyList+0xbc>)
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c734:	429a      	cmp	r2, r3
 800c736:	d802      	bhi.n	800c73e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c738:	4a1c      	ldr	r2, [pc, #112]	; (800c7ac <prvAddNewTaskToReadyList+0xbc>)
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c73e:	4b1d      	ldr	r3, [pc, #116]	; (800c7b4 <prvAddNewTaskToReadyList+0xc4>)
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	3301      	adds	r3, #1
 800c744:	4a1b      	ldr	r2, [pc, #108]	; (800c7b4 <prvAddNewTaskToReadyList+0xc4>)
 800c746:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c74c:	2201      	movs	r2, #1
 800c74e:	409a      	lsls	r2, r3
 800c750:	4b19      	ldr	r3, [pc, #100]	; (800c7b8 <prvAddNewTaskToReadyList+0xc8>)
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	4313      	orrs	r3, r2
 800c756:	4a18      	ldr	r2, [pc, #96]	; (800c7b8 <prvAddNewTaskToReadyList+0xc8>)
 800c758:	6013      	str	r3, [r2, #0]
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c75e:	4613      	mov	r3, r2
 800c760:	009b      	lsls	r3, r3, #2
 800c762:	4413      	add	r3, r2
 800c764:	009b      	lsls	r3, r3, #2
 800c766:	4a15      	ldr	r2, [pc, #84]	; (800c7bc <prvAddNewTaskToReadyList+0xcc>)
 800c768:	441a      	add	r2, r3
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	3304      	adds	r3, #4
 800c76e:	4619      	mov	r1, r3
 800c770:	4610      	mov	r0, r2
 800c772:	f7ff f854 	bl	800b81e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c776:	f001 fadd 	bl	800dd34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c77a:	4b0d      	ldr	r3, [pc, #52]	; (800c7b0 <prvAddNewTaskToReadyList+0xc0>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d00e      	beq.n	800c7a0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c782:	4b0a      	ldr	r3, [pc, #40]	; (800c7ac <prvAddNewTaskToReadyList+0xbc>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c78c:	429a      	cmp	r2, r3
 800c78e:	d207      	bcs.n	800c7a0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c790:	4b0b      	ldr	r3, [pc, #44]	; (800c7c0 <prvAddNewTaskToReadyList+0xd0>)
 800c792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c796:	601a      	str	r2, [r3, #0]
 800c798:	f3bf 8f4f 	dsb	sy
 800c79c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c7a0:	bf00      	nop
 800c7a2:	3708      	adds	r7, #8
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	bd80      	pop	{r7, pc}
 800c7a8:	20000920 	.word	0x20000920
 800c7ac:	20000820 	.word	0x20000820
 800c7b0:	2000092c 	.word	0x2000092c
 800c7b4:	2000093c 	.word	0x2000093c
 800c7b8:	20000928 	.word	0x20000928
 800c7bc:	20000824 	.word	0x20000824
 800c7c0:	e000ed04 	.word	0xe000ed04

0800c7c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b084      	sub	sp, #16
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d017      	beq.n	800c806 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c7d6:	4b13      	ldr	r3, [pc, #76]	; (800c824 <vTaskDelay+0x60>)
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d00a      	beq.n	800c7f4 <vTaskDelay+0x30>
	__asm volatile
 800c7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7e2:	f383 8811 	msr	BASEPRI, r3
 800c7e6:	f3bf 8f6f 	isb	sy
 800c7ea:	f3bf 8f4f 	dsb	sy
 800c7ee:	60bb      	str	r3, [r7, #8]
}
 800c7f0:	bf00      	nop
 800c7f2:	e7fe      	b.n	800c7f2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c7f4:	f000 f88a 	bl	800c90c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c7f8:	2100      	movs	r1, #0
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	f000 fd0e 	bl	800d21c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c800:	f000 f892 	bl	800c928 <xTaskResumeAll>
 800c804:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d107      	bne.n	800c81c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c80c:	4b06      	ldr	r3, [pc, #24]	; (800c828 <vTaskDelay+0x64>)
 800c80e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c812:	601a      	str	r2, [r3, #0]
 800c814:	f3bf 8f4f 	dsb	sy
 800c818:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c81c:	bf00      	nop
 800c81e:	3710      	adds	r7, #16
 800c820:	46bd      	mov	sp, r7
 800c822:	bd80      	pop	{r7, pc}
 800c824:	20000948 	.word	0x20000948
 800c828:	e000ed04 	.word	0xe000ed04

0800c82c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b08a      	sub	sp, #40	; 0x28
 800c830:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c832:	2300      	movs	r3, #0
 800c834:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c836:	2300      	movs	r3, #0
 800c838:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c83a:	463a      	mov	r2, r7
 800c83c:	1d39      	adds	r1, r7, #4
 800c83e:	f107 0308 	add.w	r3, r7, #8
 800c842:	4618      	mov	r0, r3
 800c844:	f7f4 f99e 	bl	8000b84 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c848:	6839      	ldr	r1, [r7, #0]
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	68ba      	ldr	r2, [r7, #8]
 800c84e:	9202      	str	r2, [sp, #8]
 800c850:	9301      	str	r3, [sp, #4]
 800c852:	2300      	movs	r3, #0
 800c854:	9300      	str	r3, [sp, #0]
 800c856:	2300      	movs	r3, #0
 800c858:	460a      	mov	r2, r1
 800c85a:	4924      	ldr	r1, [pc, #144]	; (800c8ec <vTaskStartScheduler+0xc0>)
 800c85c:	4824      	ldr	r0, [pc, #144]	; (800c8f0 <vTaskStartScheduler+0xc4>)
 800c85e:	f7ff fe07 	bl	800c470 <xTaskCreateStatic>
 800c862:	4603      	mov	r3, r0
 800c864:	4a23      	ldr	r2, [pc, #140]	; (800c8f4 <vTaskStartScheduler+0xc8>)
 800c866:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c868:	4b22      	ldr	r3, [pc, #136]	; (800c8f4 <vTaskStartScheduler+0xc8>)
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d002      	beq.n	800c876 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c870:	2301      	movs	r3, #1
 800c872:	617b      	str	r3, [r7, #20]
 800c874:	e001      	b.n	800c87a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c876:	2300      	movs	r3, #0
 800c878:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c87a:	697b      	ldr	r3, [r7, #20]
 800c87c:	2b01      	cmp	r3, #1
 800c87e:	d102      	bne.n	800c886 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c880:	f000 fd32 	bl	800d2e8 <xTimerCreateTimerTask>
 800c884:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c886:	697b      	ldr	r3, [r7, #20]
 800c888:	2b01      	cmp	r3, #1
 800c88a:	d11b      	bne.n	800c8c4 <vTaskStartScheduler+0x98>
	__asm volatile
 800c88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c890:	f383 8811 	msr	BASEPRI, r3
 800c894:	f3bf 8f6f 	isb	sy
 800c898:	f3bf 8f4f 	dsb	sy
 800c89c:	613b      	str	r3, [r7, #16]
}
 800c89e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c8a0:	4b15      	ldr	r3, [pc, #84]	; (800c8f8 <vTaskStartScheduler+0xcc>)
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	334c      	adds	r3, #76	; 0x4c
 800c8a6:	4a15      	ldr	r2, [pc, #84]	; (800c8fc <vTaskStartScheduler+0xd0>)
 800c8a8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c8aa:	4b15      	ldr	r3, [pc, #84]	; (800c900 <vTaskStartScheduler+0xd4>)
 800c8ac:	f04f 32ff 	mov.w	r2, #4294967295
 800c8b0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c8b2:	4b14      	ldr	r3, [pc, #80]	; (800c904 <vTaskStartScheduler+0xd8>)
 800c8b4:	2201      	movs	r2, #1
 800c8b6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c8b8:	4b13      	ldr	r3, [pc, #76]	; (800c908 <vTaskStartScheduler+0xdc>)
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c8be:	f001 f967 	bl	800db90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c8c2:	e00e      	b.n	800c8e2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c8c4:	697b      	ldr	r3, [r7, #20]
 800c8c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8ca:	d10a      	bne.n	800c8e2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800c8cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8d0:	f383 8811 	msr	BASEPRI, r3
 800c8d4:	f3bf 8f6f 	isb	sy
 800c8d8:	f3bf 8f4f 	dsb	sy
 800c8dc:	60fb      	str	r3, [r7, #12]
}
 800c8de:	bf00      	nop
 800c8e0:	e7fe      	b.n	800c8e0 <vTaskStartScheduler+0xb4>
}
 800c8e2:	bf00      	nop
 800c8e4:	3718      	adds	r7, #24
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	bd80      	pop	{r7, pc}
 800c8ea:	bf00      	nop
 800c8ec:	0800f3ec 	.word	0x0800f3ec
 800c8f0:	0800cf21 	.word	0x0800cf21
 800c8f4:	20000944 	.word	0x20000944
 800c8f8:	20000820 	.word	0x20000820
 800c8fc:	20000030 	.word	0x20000030
 800c900:	20000940 	.word	0x20000940
 800c904:	2000092c 	.word	0x2000092c
 800c908:	20000924 	.word	0x20000924

0800c90c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c90c:	b480      	push	{r7}
 800c90e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c910:	4b04      	ldr	r3, [pc, #16]	; (800c924 <vTaskSuspendAll+0x18>)
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	3301      	adds	r3, #1
 800c916:	4a03      	ldr	r2, [pc, #12]	; (800c924 <vTaskSuspendAll+0x18>)
 800c918:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c91a:	bf00      	nop
 800c91c:	46bd      	mov	sp, r7
 800c91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c922:	4770      	bx	lr
 800c924:	20000948 	.word	0x20000948

0800c928 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b084      	sub	sp, #16
 800c92c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c92e:	2300      	movs	r3, #0
 800c930:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c932:	2300      	movs	r3, #0
 800c934:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c936:	4b41      	ldr	r3, [pc, #260]	; (800ca3c <xTaskResumeAll+0x114>)
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d10a      	bne.n	800c954 <xTaskResumeAll+0x2c>
	__asm volatile
 800c93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c942:	f383 8811 	msr	BASEPRI, r3
 800c946:	f3bf 8f6f 	isb	sy
 800c94a:	f3bf 8f4f 	dsb	sy
 800c94e:	603b      	str	r3, [r7, #0]
}
 800c950:	bf00      	nop
 800c952:	e7fe      	b.n	800c952 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c954:	f001 f9be 	bl	800dcd4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c958:	4b38      	ldr	r3, [pc, #224]	; (800ca3c <xTaskResumeAll+0x114>)
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	3b01      	subs	r3, #1
 800c95e:	4a37      	ldr	r2, [pc, #220]	; (800ca3c <xTaskResumeAll+0x114>)
 800c960:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c962:	4b36      	ldr	r3, [pc, #216]	; (800ca3c <xTaskResumeAll+0x114>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d161      	bne.n	800ca2e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c96a:	4b35      	ldr	r3, [pc, #212]	; (800ca40 <xTaskResumeAll+0x118>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d05d      	beq.n	800ca2e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c972:	e02e      	b.n	800c9d2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c974:	4b33      	ldr	r3, [pc, #204]	; (800ca44 <xTaskResumeAll+0x11c>)
 800c976:	68db      	ldr	r3, [r3, #12]
 800c978:	68db      	ldr	r3, [r3, #12]
 800c97a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	3318      	adds	r3, #24
 800c980:	4618      	mov	r0, r3
 800c982:	f7fe ffa9 	bl	800b8d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	3304      	adds	r3, #4
 800c98a:	4618      	mov	r0, r3
 800c98c:	f7fe ffa4 	bl	800b8d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c994:	2201      	movs	r2, #1
 800c996:	409a      	lsls	r2, r3
 800c998:	4b2b      	ldr	r3, [pc, #172]	; (800ca48 <xTaskResumeAll+0x120>)
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	4313      	orrs	r3, r2
 800c99e:	4a2a      	ldr	r2, [pc, #168]	; (800ca48 <xTaskResumeAll+0x120>)
 800c9a0:	6013      	str	r3, [r2, #0]
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9a6:	4613      	mov	r3, r2
 800c9a8:	009b      	lsls	r3, r3, #2
 800c9aa:	4413      	add	r3, r2
 800c9ac:	009b      	lsls	r3, r3, #2
 800c9ae:	4a27      	ldr	r2, [pc, #156]	; (800ca4c <xTaskResumeAll+0x124>)
 800c9b0:	441a      	add	r2, r3
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	3304      	adds	r3, #4
 800c9b6:	4619      	mov	r1, r3
 800c9b8:	4610      	mov	r0, r2
 800c9ba:	f7fe ff30 	bl	800b81e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9c2:	4b23      	ldr	r3, [pc, #140]	; (800ca50 <xTaskResumeAll+0x128>)
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9c8:	429a      	cmp	r2, r3
 800c9ca:	d302      	bcc.n	800c9d2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800c9cc:	4b21      	ldr	r3, [pc, #132]	; (800ca54 <xTaskResumeAll+0x12c>)
 800c9ce:	2201      	movs	r2, #1
 800c9d0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c9d2:	4b1c      	ldr	r3, [pc, #112]	; (800ca44 <xTaskResumeAll+0x11c>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d1cc      	bne.n	800c974 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d001      	beq.n	800c9e4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c9e0:	f000 fb58 	bl	800d094 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c9e4:	4b1c      	ldr	r3, [pc, #112]	; (800ca58 <xTaskResumeAll+0x130>)
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d010      	beq.n	800ca12 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c9f0:	f000 f846 	bl	800ca80 <xTaskIncrementTick>
 800c9f4:	4603      	mov	r3, r0
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d002      	beq.n	800ca00 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800c9fa:	4b16      	ldr	r3, [pc, #88]	; (800ca54 <xTaskResumeAll+0x12c>)
 800c9fc:	2201      	movs	r2, #1
 800c9fe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	3b01      	subs	r3, #1
 800ca04:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d1f1      	bne.n	800c9f0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800ca0c:	4b12      	ldr	r3, [pc, #72]	; (800ca58 <xTaskResumeAll+0x130>)
 800ca0e:	2200      	movs	r2, #0
 800ca10:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ca12:	4b10      	ldr	r3, [pc, #64]	; (800ca54 <xTaskResumeAll+0x12c>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d009      	beq.n	800ca2e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ca1a:	2301      	movs	r3, #1
 800ca1c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ca1e:	4b0f      	ldr	r3, [pc, #60]	; (800ca5c <xTaskResumeAll+0x134>)
 800ca20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca24:	601a      	str	r2, [r3, #0]
 800ca26:	f3bf 8f4f 	dsb	sy
 800ca2a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ca2e:	f001 f981 	bl	800dd34 <vPortExitCritical>

	return xAlreadyYielded;
 800ca32:	68bb      	ldr	r3, [r7, #8]
}
 800ca34:	4618      	mov	r0, r3
 800ca36:	3710      	adds	r7, #16
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	bd80      	pop	{r7, pc}
 800ca3c:	20000948 	.word	0x20000948
 800ca40:	20000920 	.word	0x20000920
 800ca44:	200008e0 	.word	0x200008e0
 800ca48:	20000928 	.word	0x20000928
 800ca4c:	20000824 	.word	0x20000824
 800ca50:	20000820 	.word	0x20000820
 800ca54:	20000934 	.word	0x20000934
 800ca58:	20000930 	.word	0x20000930
 800ca5c:	e000ed04 	.word	0xe000ed04

0800ca60 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ca60:	b480      	push	{r7}
 800ca62:	b083      	sub	sp, #12
 800ca64:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ca66:	4b05      	ldr	r3, [pc, #20]	; (800ca7c <xTaskGetTickCount+0x1c>)
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ca6c:	687b      	ldr	r3, [r7, #4]
}
 800ca6e:	4618      	mov	r0, r3
 800ca70:	370c      	adds	r7, #12
 800ca72:	46bd      	mov	sp, r7
 800ca74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca78:	4770      	bx	lr
 800ca7a:	bf00      	nop
 800ca7c:	20000924 	.word	0x20000924

0800ca80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b086      	sub	sp, #24
 800ca84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ca86:	2300      	movs	r3, #0
 800ca88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca8a:	4b4e      	ldr	r3, [pc, #312]	; (800cbc4 <xTaskIncrementTick+0x144>)
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	f040 808e 	bne.w	800cbb0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ca94:	4b4c      	ldr	r3, [pc, #304]	; (800cbc8 <xTaskIncrementTick+0x148>)
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	3301      	adds	r3, #1
 800ca9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ca9c:	4a4a      	ldr	r2, [pc, #296]	; (800cbc8 <xTaskIncrementTick+0x148>)
 800ca9e:	693b      	ldr	r3, [r7, #16]
 800caa0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800caa2:	693b      	ldr	r3, [r7, #16]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d120      	bne.n	800caea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800caa8:	4b48      	ldr	r3, [pc, #288]	; (800cbcc <xTaskIncrementTick+0x14c>)
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d00a      	beq.n	800cac8 <xTaskIncrementTick+0x48>
	__asm volatile
 800cab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cab6:	f383 8811 	msr	BASEPRI, r3
 800caba:	f3bf 8f6f 	isb	sy
 800cabe:	f3bf 8f4f 	dsb	sy
 800cac2:	603b      	str	r3, [r7, #0]
}
 800cac4:	bf00      	nop
 800cac6:	e7fe      	b.n	800cac6 <xTaskIncrementTick+0x46>
 800cac8:	4b40      	ldr	r3, [pc, #256]	; (800cbcc <xTaskIncrementTick+0x14c>)
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	60fb      	str	r3, [r7, #12]
 800cace:	4b40      	ldr	r3, [pc, #256]	; (800cbd0 <xTaskIncrementTick+0x150>)
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	4a3e      	ldr	r2, [pc, #248]	; (800cbcc <xTaskIncrementTick+0x14c>)
 800cad4:	6013      	str	r3, [r2, #0]
 800cad6:	4a3e      	ldr	r2, [pc, #248]	; (800cbd0 <xTaskIncrementTick+0x150>)
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	6013      	str	r3, [r2, #0]
 800cadc:	4b3d      	ldr	r3, [pc, #244]	; (800cbd4 <xTaskIncrementTick+0x154>)
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	3301      	adds	r3, #1
 800cae2:	4a3c      	ldr	r2, [pc, #240]	; (800cbd4 <xTaskIncrementTick+0x154>)
 800cae4:	6013      	str	r3, [r2, #0]
 800cae6:	f000 fad5 	bl	800d094 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800caea:	4b3b      	ldr	r3, [pc, #236]	; (800cbd8 <xTaskIncrementTick+0x158>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	693a      	ldr	r2, [r7, #16]
 800caf0:	429a      	cmp	r2, r3
 800caf2:	d348      	bcc.n	800cb86 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800caf4:	4b35      	ldr	r3, [pc, #212]	; (800cbcc <xTaskIncrementTick+0x14c>)
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d104      	bne.n	800cb08 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cafe:	4b36      	ldr	r3, [pc, #216]	; (800cbd8 <xTaskIncrementTick+0x158>)
 800cb00:	f04f 32ff 	mov.w	r2, #4294967295
 800cb04:	601a      	str	r2, [r3, #0]
					break;
 800cb06:	e03e      	b.n	800cb86 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb08:	4b30      	ldr	r3, [pc, #192]	; (800cbcc <xTaskIncrementTick+0x14c>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	68db      	ldr	r3, [r3, #12]
 800cb0e:	68db      	ldr	r3, [r3, #12]
 800cb10:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cb12:	68bb      	ldr	r3, [r7, #8]
 800cb14:	685b      	ldr	r3, [r3, #4]
 800cb16:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cb18:	693a      	ldr	r2, [r7, #16]
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	429a      	cmp	r2, r3
 800cb1e:	d203      	bcs.n	800cb28 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cb20:	4a2d      	ldr	r2, [pc, #180]	; (800cbd8 <xTaskIncrementTick+0x158>)
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cb26:	e02e      	b.n	800cb86 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cb28:	68bb      	ldr	r3, [r7, #8]
 800cb2a:	3304      	adds	r3, #4
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	f7fe fed3 	bl	800b8d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cb32:	68bb      	ldr	r3, [r7, #8]
 800cb34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d004      	beq.n	800cb44 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cb3a:	68bb      	ldr	r3, [r7, #8]
 800cb3c:	3318      	adds	r3, #24
 800cb3e:	4618      	mov	r0, r3
 800cb40:	f7fe feca 	bl	800b8d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cb44:	68bb      	ldr	r3, [r7, #8]
 800cb46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb48:	2201      	movs	r2, #1
 800cb4a:	409a      	lsls	r2, r3
 800cb4c:	4b23      	ldr	r3, [pc, #140]	; (800cbdc <xTaskIncrementTick+0x15c>)
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	4313      	orrs	r3, r2
 800cb52:	4a22      	ldr	r2, [pc, #136]	; (800cbdc <xTaskIncrementTick+0x15c>)
 800cb54:	6013      	str	r3, [r2, #0]
 800cb56:	68bb      	ldr	r3, [r7, #8]
 800cb58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb5a:	4613      	mov	r3, r2
 800cb5c:	009b      	lsls	r3, r3, #2
 800cb5e:	4413      	add	r3, r2
 800cb60:	009b      	lsls	r3, r3, #2
 800cb62:	4a1f      	ldr	r2, [pc, #124]	; (800cbe0 <xTaskIncrementTick+0x160>)
 800cb64:	441a      	add	r2, r3
 800cb66:	68bb      	ldr	r3, [r7, #8]
 800cb68:	3304      	adds	r3, #4
 800cb6a:	4619      	mov	r1, r3
 800cb6c:	4610      	mov	r0, r2
 800cb6e:	f7fe fe56 	bl	800b81e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cb72:	68bb      	ldr	r3, [r7, #8]
 800cb74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb76:	4b1b      	ldr	r3, [pc, #108]	; (800cbe4 <xTaskIncrementTick+0x164>)
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb7c:	429a      	cmp	r2, r3
 800cb7e:	d3b9      	bcc.n	800caf4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cb80:	2301      	movs	r3, #1
 800cb82:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cb84:	e7b6      	b.n	800caf4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cb86:	4b17      	ldr	r3, [pc, #92]	; (800cbe4 <xTaskIncrementTick+0x164>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb8c:	4914      	ldr	r1, [pc, #80]	; (800cbe0 <xTaskIncrementTick+0x160>)
 800cb8e:	4613      	mov	r3, r2
 800cb90:	009b      	lsls	r3, r3, #2
 800cb92:	4413      	add	r3, r2
 800cb94:	009b      	lsls	r3, r3, #2
 800cb96:	440b      	add	r3, r1
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	2b01      	cmp	r3, #1
 800cb9c:	d901      	bls.n	800cba2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800cb9e:	2301      	movs	r3, #1
 800cba0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cba2:	4b11      	ldr	r3, [pc, #68]	; (800cbe8 <xTaskIncrementTick+0x168>)
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d007      	beq.n	800cbba <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800cbaa:	2301      	movs	r3, #1
 800cbac:	617b      	str	r3, [r7, #20]
 800cbae:	e004      	b.n	800cbba <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cbb0:	4b0e      	ldr	r3, [pc, #56]	; (800cbec <xTaskIncrementTick+0x16c>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	3301      	adds	r3, #1
 800cbb6:	4a0d      	ldr	r2, [pc, #52]	; (800cbec <xTaskIncrementTick+0x16c>)
 800cbb8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cbba:	697b      	ldr	r3, [r7, #20]
}
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	3718      	adds	r7, #24
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}
 800cbc4:	20000948 	.word	0x20000948
 800cbc8:	20000924 	.word	0x20000924
 800cbcc:	200008d8 	.word	0x200008d8
 800cbd0:	200008dc 	.word	0x200008dc
 800cbd4:	20000938 	.word	0x20000938
 800cbd8:	20000940 	.word	0x20000940
 800cbdc:	20000928 	.word	0x20000928
 800cbe0:	20000824 	.word	0x20000824
 800cbe4:	20000820 	.word	0x20000820
 800cbe8:	20000934 	.word	0x20000934
 800cbec:	20000930 	.word	0x20000930

0800cbf0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cbf0:	b480      	push	{r7}
 800cbf2:	b087      	sub	sp, #28
 800cbf4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cbf6:	4b29      	ldr	r3, [pc, #164]	; (800cc9c <vTaskSwitchContext+0xac>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d003      	beq.n	800cc06 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cbfe:	4b28      	ldr	r3, [pc, #160]	; (800cca0 <vTaskSwitchContext+0xb0>)
 800cc00:	2201      	movs	r2, #1
 800cc02:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cc04:	e044      	b.n	800cc90 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800cc06:	4b26      	ldr	r3, [pc, #152]	; (800cca0 <vTaskSwitchContext+0xb0>)
 800cc08:	2200      	movs	r2, #0
 800cc0a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc0c:	4b25      	ldr	r3, [pc, #148]	; (800cca4 <vTaskSwitchContext+0xb4>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	fab3 f383 	clz	r3, r3
 800cc18:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800cc1a:	7afb      	ldrb	r3, [r7, #11]
 800cc1c:	f1c3 031f 	rsb	r3, r3, #31
 800cc20:	617b      	str	r3, [r7, #20]
 800cc22:	4921      	ldr	r1, [pc, #132]	; (800cca8 <vTaskSwitchContext+0xb8>)
 800cc24:	697a      	ldr	r2, [r7, #20]
 800cc26:	4613      	mov	r3, r2
 800cc28:	009b      	lsls	r3, r3, #2
 800cc2a:	4413      	add	r3, r2
 800cc2c:	009b      	lsls	r3, r3, #2
 800cc2e:	440b      	add	r3, r1
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d10a      	bne.n	800cc4c <vTaskSwitchContext+0x5c>
	__asm volatile
 800cc36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc3a:	f383 8811 	msr	BASEPRI, r3
 800cc3e:	f3bf 8f6f 	isb	sy
 800cc42:	f3bf 8f4f 	dsb	sy
 800cc46:	607b      	str	r3, [r7, #4]
}
 800cc48:	bf00      	nop
 800cc4a:	e7fe      	b.n	800cc4a <vTaskSwitchContext+0x5a>
 800cc4c:	697a      	ldr	r2, [r7, #20]
 800cc4e:	4613      	mov	r3, r2
 800cc50:	009b      	lsls	r3, r3, #2
 800cc52:	4413      	add	r3, r2
 800cc54:	009b      	lsls	r3, r3, #2
 800cc56:	4a14      	ldr	r2, [pc, #80]	; (800cca8 <vTaskSwitchContext+0xb8>)
 800cc58:	4413      	add	r3, r2
 800cc5a:	613b      	str	r3, [r7, #16]
 800cc5c:	693b      	ldr	r3, [r7, #16]
 800cc5e:	685b      	ldr	r3, [r3, #4]
 800cc60:	685a      	ldr	r2, [r3, #4]
 800cc62:	693b      	ldr	r3, [r7, #16]
 800cc64:	605a      	str	r2, [r3, #4]
 800cc66:	693b      	ldr	r3, [r7, #16]
 800cc68:	685a      	ldr	r2, [r3, #4]
 800cc6a:	693b      	ldr	r3, [r7, #16]
 800cc6c:	3308      	adds	r3, #8
 800cc6e:	429a      	cmp	r2, r3
 800cc70:	d104      	bne.n	800cc7c <vTaskSwitchContext+0x8c>
 800cc72:	693b      	ldr	r3, [r7, #16]
 800cc74:	685b      	ldr	r3, [r3, #4]
 800cc76:	685a      	ldr	r2, [r3, #4]
 800cc78:	693b      	ldr	r3, [r7, #16]
 800cc7a:	605a      	str	r2, [r3, #4]
 800cc7c:	693b      	ldr	r3, [r7, #16]
 800cc7e:	685b      	ldr	r3, [r3, #4]
 800cc80:	68db      	ldr	r3, [r3, #12]
 800cc82:	4a0a      	ldr	r2, [pc, #40]	; (800ccac <vTaskSwitchContext+0xbc>)
 800cc84:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cc86:	4b09      	ldr	r3, [pc, #36]	; (800ccac <vTaskSwitchContext+0xbc>)
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	334c      	adds	r3, #76	; 0x4c
 800cc8c:	4a08      	ldr	r2, [pc, #32]	; (800ccb0 <vTaskSwitchContext+0xc0>)
 800cc8e:	6013      	str	r3, [r2, #0]
}
 800cc90:	bf00      	nop
 800cc92:	371c      	adds	r7, #28
 800cc94:	46bd      	mov	sp, r7
 800cc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9a:	4770      	bx	lr
 800cc9c:	20000948 	.word	0x20000948
 800cca0:	20000934 	.word	0x20000934
 800cca4:	20000928 	.word	0x20000928
 800cca8:	20000824 	.word	0x20000824
 800ccac:	20000820 	.word	0x20000820
 800ccb0:	20000030 	.word	0x20000030

0800ccb4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b084      	sub	sp, #16
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
 800ccbc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d10a      	bne.n	800ccda <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ccc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccc8:	f383 8811 	msr	BASEPRI, r3
 800cccc:	f3bf 8f6f 	isb	sy
 800ccd0:	f3bf 8f4f 	dsb	sy
 800ccd4:	60fb      	str	r3, [r7, #12]
}
 800ccd6:	bf00      	nop
 800ccd8:	e7fe      	b.n	800ccd8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ccda:	4b07      	ldr	r3, [pc, #28]	; (800ccf8 <vTaskPlaceOnEventList+0x44>)
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	3318      	adds	r3, #24
 800cce0:	4619      	mov	r1, r3
 800cce2:	6878      	ldr	r0, [r7, #4]
 800cce4:	f7fe fdbf 	bl	800b866 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cce8:	2101      	movs	r1, #1
 800ccea:	6838      	ldr	r0, [r7, #0]
 800ccec:	f000 fa96 	bl	800d21c <prvAddCurrentTaskToDelayedList>
}
 800ccf0:	bf00      	nop
 800ccf2:	3710      	adds	r7, #16
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}
 800ccf8:	20000820 	.word	0x20000820

0800ccfc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b086      	sub	sp, #24
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	60f8      	str	r0, [r7, #12]
 800cd04:	60b9      	str	r1, [r7, #8]
 800cd06:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d10a      	bne.n	800cd24 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800cd0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd12:	f383 8811 	msr	BASEPRI, r3
 800cd16:	f3bf 8f6f 	isb	sy
 800cd1a:	f3bf 8f4f 	dsb	sy
 800cd1e:	617b      	str	r3, [r7, #20]
}
 800cd20:	bf00      	nop
 800cd22:	e7fe      	b.n	800cd22 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cd24:	4b0a      	ldr	r3, [pc, #40]	; (800cd50 <vTaskPlaceOnEventListRestricted+0x54>)
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	3318      	adds	r3, #24
 800cd2a:	4619      	mov	r1, r3
 800cd2c:	68f8      	ldr	r0, [r7, #12]
 800cd2e:	f7fe fd76 	bl	800b81e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d002      	beq.n	800cd3e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800cd38:	f04f 33ff 	mov.w	r3, #4294967295
 800cd3c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cd3e:	6879      	ldr	r1, [r7, #4]
 800cd40:	68b8      	ldr	r0, [r7, #8]
 800cd42:	f000 fa6b 	bl	800d21c <prvAddCurrentTaskToDelayedList>
	}
 800cd46:	bf00      	nop
 800cd48:	3718      	adds	r7, #24
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	bd80      	pop	{r7, pc}
 800cd4e:	bf00      	nop
 800cd50:	20000820 	.word	0x20000820

0800cd54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b086      	sub	sp, #24
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	68db      	ldr	r3, [r3, #12]
 800cd60:	68db      	ldr	r3, [r3, #12]
 800cd62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cd64:	693b      	ldr	r3, [r7, #16]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d10a      	bne.n	800cd80 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800cd6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd6e:	f383 8811 	msr	BASEPRI, r3
 800cd72:	f3bf 8f6f 	isb	sy
 800cd76:	f3bf 8f4f 	dsb	sy
 800cd7a:	60fb      	str	r3, [r7, #12]
}
 800cd7c:	bf00      	nop
 800cd7e:	e7fe      	b.n	800cd7e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cd80:	693b      	ldr	r3, [r7, #16]
 800cd82:	3318      	adds	r3, #24
 800cd84:	4618      	mov	r0, r3
 800cd86:	f7fe fda7 	bl	800b8d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cd8a:	4b1d      	ldr	r3, [pc, #116]	; (800ce00 <xTaskRemoveFromEventList+0xac>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d11c      	bne.n	800cdcc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cd92:	693b      	ldr	r3, [r7, #16]
 800cd94:	3304      	adds	r3, #4
 800cd96:	4618      	mov	r0, r3
 800cd98:	f7fe fd9e 	bl	800b8d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cd9c:	693b      	ldr	r3, [r7, #16]
 800cd9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cda0:	2201      	movs	r2, #1
 800cda2:	409a      	lsls	r2, r3
 800cda4:	4b17      	ldr	r3, [pc, #92]	; (800ce04 <xTaskRemoveFromEventList+0xb0>)
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	4313      	orrs	r3, r2
 800cdaa:	4a16      	ldr	r2, [pc, #88]	; (800ce04 <xTaskRemoveFromEventList+0xb0>)
 800cdac:	6013      	str	r3, [r2, #0]
 800cdae:	693b      	ldr	r3, [r7, #16]
 800cdb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdb2:	4613      	mov	r3, r2
 800cdb4:	009b      	lsls	r3, r3, #2
 800cdb6:	4413      	add	r3, r2
 800cdb8:	009b      	lsls	r3, r3, #2
 800cdba:	4a13      	ldr	r2, [pc, #76]	; (800ce08 <xTaskRemoveFromEventList+0xb4>)
 800cdbc:	441a      	add	r2, r3
 800cdbe:	693b      	ldr	r3, [r7, #16]
 800cdc0:	3304      	adds	r3, #4
 800cdc2:	4619      	mov	r1, r3
 800cdc4:	4610      	mov	r0, r2
 800cdc6:	f7fe fd2a 	bl	800b81e <vListInsertEnd>
 800cdca:	e005      	b.n	800cdd8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cdcc:	693b      	ldr	r3, [r7, #16]
 800cdce:	3318      	adds	r3, #24
 800cdd0:	4619      	mov	r1, r3
 800cdd2:	480e      	ldr	r0, [pc, #56]	; (800ce0c <xTaskRemoveFromEventList+0xb8>)
 800cdd4:	f7fe fd23 	bl	800b81e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cdd8:	693b      	ldr	r3, [r7, #16]
 800cdda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cddc:	4b0c      	ldr	r3, [pc, #48]	; (800ce10 <xTaskRemoveFromEventList+0xbc>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cde2:	429a      	cmp	r2, r3
 800cde4:	d905      	bls.n	800cdf2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cde6:	2301      	movs	r3, #1
 800cde8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cdea:	4b0a      	ldr	r3, [pc, #40]	; (800ce14 <xTaskRemoveFromEventList+0xc0>)
 800cdec:	2201      	movs	r2, #1
 800cdee:	601a      	str	r2, [r3, #0]
 800cdf0:	e001      	b.n	800cdf6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cdf6:	697b      	ldr	r3, [r7, #20]
}
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	3718      	adds	r7, #24
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	bd80      	pop	{r7, pc}
 800ce00:	20000948 	.word	0x20000948
 800ce04:	20000928 	.word	0x20000928
 800ce08:	20000824 	.word	0x20000824
 800ce0c:	200008e0 	.word	0x200008e0
 800ce10:	20000820 	.word	0x20000820
 800ce14:	20000934 	.word	0x20000934

0800ce18 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ce18:	b480      	push	{r7}
 800ce1a:	b083      	sub	sp, #12
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ce20:	4b06      	ldr	r3, [pc, #24]	; (800ce3c <vTaskInternalSetTimeOutState+0x24>)
 800ce22:	681a      	ldr	r2, [r3, #0]
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ce28:	4b05      	ldr	r3, [pc, #20]	; (800ce40 <vTaskInternalSetTimeOutState+0x28>)
 800ce2a:	681a      	ldr	r2, [r3, #0]
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	605a      	str	r2, [r3, #4]
}
 800ce30:	bf00      	nop
 800ce32:	370c      	adds	r7, #12
 800ce34:	46bd      	mov	sp, r7
 800ce36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3a:	4770      	bx	lr
 800ce3c:	20000938 	.word	0x20000938
 800ce40:	20000924 	.word	0x20000924

0800ce44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b088      	sub	sp, #32
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
 800ce4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d10a      	bne.n	800ce6a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ce54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce58:	f383 8811 	msr	BASEPRI, r3
 800ce5c:	f3bf 8f6f 	isb	sy
 800ce60:	f3bf 8f4f 	dsb	sy
 800ce64:	613b      	str	r3, [r7, #16]
}
 800ce66:	bf00      	nop
 800ce68:	e7fe      	b.n	800ce68 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ce6a:	683b      	ldr	r3, [r7, #0]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d10a      	bne.n	800ce86 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ce70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce74:	f383 8811 	msr	BASEPRI, r3
 800ce78:	f3bf 8f6f 	isb	sy
 800ce7c:	f3bf 8f4f 	dsb	sy
 800ce80:	60fb      	str	r3, [r7, #12]
}
 800ce82:	bf00      	nop
 800ce84:	e7fe      	b.n	800ce84 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ce86:	f000 ff25 	bl	800dcd4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ce8a:	4b1d      	ldr	r3, [pc, #116]	; (800cf00 <xTaskCheckForTimeOut+0xbc>)
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	685b      	ldr	r3, [r3, #4]
 800ce94:	69ba      	ldr	r2, [r7, #24]
 800ce96:	1ad3      	subs	r3, r2, r3
 800ce98:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cea2:	d102      	bne.n	800ceaa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cea4:	2300      	movs	r3, #0
 800cea6:	61fb      	str	r3, [r7, #28]
 800cea8:	e023      	b.n	800cef2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681a      	ldr	r2, [r3, #0]
 800ceae:	4b15      	ldr	r3, [pc, #84]	; (800cf04 <xTaskCheckForTimeOut+0xc0>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	429a      	cmp	r2, r3
 800ceb4:	d007      	beq.n	800cec6 <xTaskCheckForTimeOut+0x82>
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	685b      	ldr	r3, [r3, #4]
 800ceba:	69ba      	ldr	r2, [r7, #24]
 800cebc:	429a      	cmp	r2, r3
 800cebe:	d302      	bcc.n	800cec6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cec0:	2301      	movs	r3, #1
 800cec2:	61fb      	str	r3, [r7, #28]
 800cec4:	e015      	b.n	800cef2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	697a      	ldr	r2, [r7, #20]
 800cecc:	429a      	cmp	r2, r3
 800cece:	d20b      	bcs.n	800cee8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ced0:	683b      	ldr	r3, [r7, #0]
 800ced2:	681a      	ldr	r2, [r3, #0]
 800ced4:	697b      	ldr	r3, [r7, #20]
 800ced6:	1ad2      	subs	r2, r2, r3
 800ced8:	683b      	ldr	r3, [r7, #0]
 800ceda:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cedc:	6878      	ldr	r0, [r7, #4]
 800cede:	f7ff ff9b 	bl	800ce18 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cee2:	2300      	movs	r3, #0
 800cee4:	61fb      	str	r3, [r7, #28]
 800cee6:	e004      	b.n	800cef2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800cee8:	683b      	ldr	r3, [r7, #0]
 800ceea:	2200      	movs	r2, #0
 800ceec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ceee:	2301      	movs	r3, #1
 800cef0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cef2:	f000 ff1f 	bl	800dd34 <vPortExitCritical>

	return xReturn;
 800cef6:	69fb      	ldr	r3, [r7, #28]
}
 800cef8:	4618      	mov	r0, r3
 800cefa:	3720      	adds	r7, #32
 800cefc:	46bd      	mov	sp, r7
 800cefe:	bd80      	pop	{r7, pc}
 800cf00:	20000924 	.word	0x20000924
 800cf04:	20000938 	.word	0x20000938

0800cf08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cf08:	b480      	push	{r7}
 800cf0a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cf0c:	4b03      	ldr	r3, [pc, #12]	; (800cf1c <vTaskMissedYield+0x14>)
 800cf0e:	2201      	movs	r2, #1
 800cf10:	601a      	str	r2, [r3, #0]
}
 800cf12:	bf00      	nop
 800cf14:	46bd      	mov	sp, r7
 800cf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1a:	4770      	bx	lr
 800cf1c:	20000934 	.word	0x20000934

0800cf20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b082      	sub	sp, #8
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cf28:	f000 f852 	bl	800cfd0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cf2c:	4b06      	ldr	r3, [pc, #24]	; (800cf48 <prvIdleTask+0x28>)
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	2b01      	cmp	r3, #1
 800cf32:	d9f9      	bls.n	800cf28 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cf34:	4b05      	ldr	r3, [pc, #20]	; (800cf4c <prvIdleTask+0x2c>)
 800cf36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf3a:	601a      	str	r2, [r3, #0]
 800cf3c:	f3bf 8f4f 	dsb	sy
 800cf40:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cf44:	e7f0      	b.n	800cf28 <prvIdleTask+0x8>
 800cf46:	bf00      	nop
 800cf48:	20000824 	.word	0x20000824
 800cf4c:	e000ed04 	.word	0xe000ed04

0800cf50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b082      	sub	sp, #8
 800cf54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cf56:	2300      	movs	r3, #0
 800cf58:	607b      	str	r3, [r7, #4]
 800cf5a:	e00c      	b.n	800cf76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cf5c:	687a      	ldr	r2, [r7, #4]
 800cf5e:	4613      	mov	r3, r2
 800cf60:	009b      	lsls	r3, r3, #2
 800cf62:	4413      	add	r3, r2
 800cf64:	009b      	lsls	r3, r3, #2
 800cf66:	4a12      	ldr	r2, [pc, #72]	; (800cfb0 <prvInitialiseTaskLists+0x60>)
 800cf68:	4413      	add	r3, r2
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	f7fe fc2a 	bl	800b7c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	3301      	adds	r3, #1
 800cf74:	607b      	str	r3, [r7, #4]
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	2b06      	cmp	r3, #6
 800cf7a:	d9ef      	bls.n	800cf5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cf7c:	480d      	ldr	r0, [pc, #52]	; (800cfb4 <prvInitialiseTaskLists+0x64>)
 800cf7e:	f7fe fc21 	bl	800b7c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cf82:	480d      	ldr	r0, [pc, #52]	; (800cfb8 <prvInitialiseTaskLists+0x68>)
 800cf84:	f7fe fc1e 	bl	800b7c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cf88:	480c      	ldr	r0, [pc, #48]	; (800cfbc <prvInitialiseTaskLists+0x6c>)
 800cf8a:	f7fe fc1b 	bl	800b7c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cf8e:	480c      	ldr	r0, [pc, #48]	; (800cfc0 <prvInitialiseTaskLists+0x70>)
 800cf90:	f7fe fc18 	bl	800b7c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cf94:	480b      	ldr	r0, [pc, #44]	; (800cfc4 <prvInitialiseTaskLists+0x74>)
 800cf96:	f7fe fc15 	bl	800b7c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cf9a:	4b0b      	ldr	r3, [pc, #44]	; (800cfc8 <prvInitialiseTaskLists+0x78>)
 800cf9c:	4a05      	ldr	r2, [pc, #20]	; (800cfb4 <prvInitialiseTaskLists+0x64>)
 800cf9e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cfa0:	4b0a      	ldr	r3, [pc, #40]	; (800cfcc <prvInitialiseTaskLists+0x7c>)
 800cfa2:	4a05      	ldr	r2, [pc, #20]	; (800cfb8 <prvInitialiseTaskLists+0x68>)
 800cfa4:	601a      	str	r2, [r3, #0]
}
 800cfa6:	bf00      	nop
 800cfa8:	3708      	adds	r7, #8
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	bd80      	pop	{r7, pc}
 800cfae:	bf00      	nop
 800cfb0:	20000824 	.word	0x20000824
 800cfb4:	200008b0 	.word	0x200008b0
 800cfb8:	200008c4 	.word	0x200008c4
 800cfbc:	200008e0 	.word	0x200008e0
 800cfc0:	200008f4 	.word	0x200008f4
 800cfc4:	2000090c 	.word	0x2000090c
 800cfc8:	200008d8 	.word	0x200008d8
 800cfcc:	200008dc 	.word	0x200008dc

0800cfd0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b082      	sub	sp, #8
 800cfd4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cfd6:	e019      	b.n	800d00c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cfd8:	f000 fe7c 	bl	800dcd4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cfdc:	4b10      	ldr	r3, [pc, #64]	; (800d020 <prvCheckTasksWaitingTermination+0x50>)
 800cfde:	68db      	ldr	r3, [r3, #12]
 800cfe0:	68db      	ldr	r3, [r3, #12]
 800cfe2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	3304      	adds	r3, #4
 800cfe8:	4618      	mov	r0, r3
 800cfea:	f7fe fc75 	bl	800b8d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cfee:	4b0d      	ldr	r3, [pc, #52]	; (800d024 <prvCheckTasksWaitingTermination+0x54>)
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	3b01      	subs	r3, #1
 800cff4:	4a0b      	ldr	r2, [pc, #44]	; (800d024 <prvCheckTasksWaitingTermination+0x54>)
 800cff6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cff8:	4b0b      	ldr	r3, [pc, #44]	; (800d028 <prvCheckTasksWaitingTermination+0x58>)
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	3b01      	subs	r3, #1
 800cffe:	4a0a      	ldr	r2, [pc, #40]	; (800d028 <prvCheckTasksWaitingTermination+0x58>)
 800d000:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d002:	f000 fe97 	bl	800dd34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d006:	6878      	ldr	r0, [r7, #4]
 800d008:	f000 f810 	bl	800d02c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d00c:	4b06      	ldr	r3, [pc, #24]	; (800d028 <prvCheckTasksWaitingTermination+0x58>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d1e1      	bne.n	800cfd8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d014:	bf00      	nop
 800d016:	bf00      	nop
 800d018:	3708      	adds	r7, #8
 800d01a:	46bd      	mov	sp, r7
 800d01c:	bd80      	pop	{r7, pc}
 800d01e:	bf00      	nop
 800d020:	200008f4 	.word	0x200008f4
 800d024:	20000920 	.word	0x20000920
 800d028:	20000908 	.word	0x20000908

0800d02c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b084      	sub	sp, #16
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	334c      	adds	r3, #76	; 0x4c
 800d038:	4618      	mov	r0, r3
 800d03a:	f001 fd63 	bl	800eb04 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800d044:	2b00      	cmp	r3, #0
 800d046:	d108      	bne.n	800d05a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d04c:	4618      	mov	r0, r3
 800d04e:	f001 f82f 	bl	800e0b0 <vPortFree>
				vPortFree( pxTCB );
 800d052:	6878      	ldr	r0, [r7, #4]
 800d054:	f001 f82c 	bl	800e0b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d058:	e018      	b.n	800d08c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800d060:	2b01      	cmp	r3, #1
 800d062:	d103      	bne.n	800d06c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d064:	6878      	ldr	r0, [r7, #4]
 800d066:	f001 f823 	bl	800e0b0 <vPortFree>
	}
 800d06a:	e00f      	b.n	800d08c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800d072:	2b02      	cmp	r3, #2
 800d074:	d00a      	beq.n	800d08c <prvDeleteTCB+0x60>
	__asm volatile
 800d076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d07a:	f383 8811 	msr	BASEPRI, r3
 800d07e:	f3bf 8f6f 	isb	sy
 800d082:	f3bf 8f4f 	dsb	sy
 800d086:	60fb      	str	r3, [r7, #12]
}
 800d088:	bf00      	nop
 800d08a:	e7fe      	b.n	800d08a <prvDeleteTCB+0x5e>
	}
 800d08c:	bf00      	nop
 800d08e:	3710      	adds	r7, #16
 800d090:	46bd      	mov	sp, r7
 800d092:	bd80      	pop	{r7, pc}

0800d094 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d094:	b480      	push	{r7}
 800d096:	b083      	sub	sp, #12
 800d098:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d09a:	4b0c      	ldr	r3, [pc, #48]	; (800d0cc <prvResetNextTaskUnblockTime+0x38>)
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d104      	bne.n	800d0ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d0a4:	4b0a      	ldr	r3, [pc, #40]	; (800d0d0 <prvResetNextTaskUnblockTime+0x3c>)
 800d0a6:	f04f 32ff 	mov.w	r2, #4294967295
 800d0aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d0ac:	e008      	b.n	800d0c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0ae:	4b07      	ldr	r3, [pc, #28]	; (800d0cc <prvResetNextTaskUnblockTime+0x38>)
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	68db      	ldr	r3, [r3, #12]
 800d0b4:	68db      	ldr	r3, [r3, #12]
 800d0b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	685b      	ldr	r3, [r3, #4]
 800d0bc:	4a04      	ldr	r2, [pc, #16]	; (800d0d0 <prvResetNextTaskUnblockTime+0x3c>)
 800d0be:	6013      	str	r3, [r2, #0]
}
 800d0c0:	bf00      	nop
 800d0c2:	370c      	adds	r7, #12
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ca:	4770      	bx	lr
 800d0cc:	200008d8 	.word	0x200008d8
 800d0d0:	20000940 	.word	0x20000940

0800d0d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d0d4:	b480      	push	{r7}
 800d0d6:	b083      	sub	sp, #12
 800d0d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d0da:	4b0b      	ldr	r3, [pc, #44]	; (800d108 <xTaskGetSchedulerState+0x34>)
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d102      	bne.n	800d0e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d0e2:	2301      	movs	r3, #1
 800d0e4:	607b      	str	r3, [r7, #4]
 800d0e6:	e008      	b.n	800d0fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d0e8:	4b08      	ldr	r3, [pc, #32]	; (800d10c <xTaskGetSchedulerState+0x38>)
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d102      	bne.n	800d0f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d0f0:	2302      	movs	r3, #2
 800d0f2:	607b      	str	r3, [r7, #4]
 800d0f4:	e001      	b.n	800d0fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d0fa:	687b      	ldr	r3, [r7, #4]
	}
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	370c      	adds	r7, #12
 800d100:	46bd      	mov	sp, r7
 800d102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d106:	4770      	bx	lr
 800d108:	2000092c 	.word	0x2000092c
 800d10c:	20000948 	.word	0x20000948

0800d110 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d110:	b580      	push	{r7, lr}
 800d112:	b086      	sub	sp, #24
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d11c:	2300      	movs	r3, #0
 800d11e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d06e      	beq.n	800d204 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d126:	4b3a      	ldr	r3, [pc, #232]	; (800d210 <xTaskPriorityDisinherit+0x100>)
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	693a      	ldr	r2, [r7, #16]
 800d12c:	429a      	cmp	r2, r3
 800d12e:	d00a      	beq.n	800d146 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d134:	f383 8811 	msr	BASEPRI, r3
 800d138:	f3bf 8f6f 	isb	sy
 800d13c:	f3bf 8f4f 	dsb	sy
 800d140:	60fb      	str	r3, [r7, #12]
}
 800d142:	bf00      	nop
 800d144:	e7fe      	b.n	800d144 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d146:	693b      	ldr	r3, [r7, #16]
 800d148:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d10a      	bne.n	800d164 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d152:	f383 8811 	msr	BASEPRI, r3
 800d156:	f3bf 8f6f 	isb	sy
 800d15a:	f3bf 8f4f 	dsb	sy
 800d15e:	60bb      	str	r3, [r7, #8]
}
 800d160:	bf00      	nop
 800d162:	e7fe      	b.n	800d162 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d164:	693b      	ldr	r3, [r7, #16]
 800d166:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d168:	1e5a      	subs	r2, r3, #1
 800d16a:	693b      	ldr	r3, [r7, #16]
 800d16c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d16e:	693b      	ldr	r3, [r7, #16]
 800d170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d172:	693b      	ldr	r3, [r7, #16]
 800d174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d176:	429a      	cmp	r2, r3
 800d178:	d044      	beq.n	800d204 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d17a:	693b      	ldr	r3, [r7, #16]
 800d17c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d140      	bne.n	800d204 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d182:	693b      	ldr	r3, [r7, #16]
 800d184:	3304      	adds	r3, #4
 800d186:	4618      	mov	r0, r3
 800d188:	f7fe fba6 	bl	800b8d8 <uxListRemove>
 800d18c:	4603      	mov	r3, r0
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d115      	bne.n	800d1be <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d192:	693b      	ldr	r3, [r7, #16]
 800d194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d196:	491f      	ldr	r1, [pc, #124]	; (800d214 <xTaskPriorityDisinherit+0x104>)
 800d198:	4613      	mov	r3, r2
 800d19a:	009b      	lsls	r3, r3, #2
 800d19c:	4413      	add	r3, r2
 800d19e:	009b      	lsls	r3, r3, #2
 800d1a0:	440b      	add	r3, r1
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d10a      	bne.n	800d1be <xTaskPriorityDisinherit+0xae>
 800d1a8:	693b      	ldr	r3, [r7, #16]
 800d1aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1ac:	2201      	movs	r2, #1
 800d1ae:	fa02 f303 	lsl.w	r3, r2, r3
 800d1b2:	43da      	mvns	r2, r3
 800d1b4:	4b18      	ldr	r3, [pc, #96]	; (800d218 <xTaskPriorityDisinherit+0x108>)
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	4013      	ands	r3, r2
 800d1ba:	4a17      	ldr	r2, [pc, #92]	; (800d218 <xTaskPriorityDisinherit+0x108>)
 800d1bc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d1be:	693b      	ldr	r3, [r7, #16]
 800d1c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d1c2:	693b      	ldr	r3, [r7, #16]
 800d1c4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d1c6:	693b      	ldr	r3, [r7, #16]
 800d1c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1ca:	f1c3 0207 	rsb	r2, r3, #7
 800d1ce:	693b      	ldr	r3, [r7, #16]
 800d1d0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d1d2:	693b      	ldr	r3, [r7, #16]
 800d1d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1d6:	2201      	movs	r2, #1
 800d1d8:	409a      	lsls	r2, r3
 800d1da:	4b0f      	ldr	r3, [pc, #60]	; (800d218 <xTaskPriorityDisinherit+0x108>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	4313      	orrs	r3, r2
 800d1e0:	4a0d      	ldr	r2, [pc, #52]	; (800d218 <xTaskPriorityDisinherit+0x108>)
 800d1e2:	6013      	str	r3, [r2, #0]
 800d1e4:	693b      	ldr	r3, [r7, #16]
 800d1e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1e8:	4613      	mov	r3, r2
 800d1ea:	009b      	lsls	r3, r3, #2
 800d1ec:	4413      	add	r3, r2
 800d1ee:	009b      	lsls	r3, r3, #2
 800d1f0:	4a08      	ldr	r2, [pc, #32]	; (800d214 <xTaskPriorityDisinherit+0x104>)
 800d1f2:	441a      	add	r2, r3
 800d1f4:	693b      	ldr	r3, [r7, #16]
 800d1f6:	3304      	adds	r3, #4
 800d1f8:	4619      	mov	r1, r3
 800d1fa:	4610      	mov	r0, r2
 800d1fc:	f7fe fb0f 	bl	800b81e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d200:	2301      	movs	r3, #1
 800d202:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d204:	697b      	ldr	r3, [r7, #20]
	}
 800d206:	4618      	mov	r0, r3
 800d208:	3718      	adds	r7, #24
 800d20a:	46bd      	mov	sp, r7
 800d20c:	bd80      	pop	{r7, pc}
 800d20e:	bf00      	nop
 800d210:	20000820 	.word	0x20000820
 800d214:	20000824 	.word	0x20000824
 800d218:	20000928 	.word	0x20000928

0800d21c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b084      	sub	sp, #16
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
 800d224:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d226:	4b29      	ldr	r3, [pc, #164]	; (800d2cc <prvAddCurrentTaskToDelayedList+0xb0>)
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d22c:	4b28      	ldr	r3, [pc, #160]	; (800d2d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	3304      	adds	r3, #4
 800d232:	4618      	mov	r0, r3
 800d234:	f7fe fb50 	bl	800b8d8 <uxListRemove>
 800d238:	4603      	mov	r3, r0
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d10b      	bne.n	800d256 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d23e:	4b24      	ldr	r3, [pc, #144]	; (800d2d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d244:	2201      	movs	r2, #1
 800d246:	fa02 f303 	lsl.w	r3, r2, r3
 800d24a:	43da      	mvns	r2, r3
 800d24c:	4b21      	ldr	r3, [pc, #132]	; (800d2d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	4013      	ands	r3, r2
 800d252:	4a20      	ldr	r2, [pc, #128]	; (800d2d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d254:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d25c:	d10a      	bne.n	800d274 <prvAddCurrentTaskToDelayedList+0x58>
 800d25e:	683b      	ldr	r3, [r7, #0]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d007      	beq.n	800d274 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d264:	4b1a      	ldr	r3, [pc, #104]	; (800d2d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	3304      	adds	r3, #4
 800d26a:	4619      	mov	r1, r3
 800d26c:	481a      	ldr	r0, [pc, #104]	; (800d2d8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d26e:	f7fe fad6 	bl	800b81e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d272:	e026      	b.n	800d2c2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d274:	68fa      	ldr	r2, [r7, #12]
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	4413      	add	r3, r2
 800d27a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d27c:	4b14      	ldr	r3, [pc, #80]	; (800d2d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	68ba      	ldr	r2, [r7, #8]
 800d282:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d284:	68ba      	ldr	r2, [r7, #8]
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	429a      	cmp	r2, r3
 800d28a:	d209      	bcs.n	800d2a0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d28c:	4b13      	ldr	r3, [pc, #76]	; (800d2dc <prvAddCurrentTaskToDelayedList+0xc0>)
 800d28e:	681a      	ldr	r2, [r3, #0]
 800d290:	4b0f      	ldr	r3, [pc, #60]	; (800d2d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	3304      	adds	r3, #4
 800d296:	4619      	mov	r1, r3
 800d298:	4610      	mov	r0, r2
 800d29a:	f7fe fae4 	bl	800b866 <vListInsert>
}
 800d29e:	e010      	b.n	800d2c2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d2a0:	4b0f      	ldr	r3, [pc, #60]	; (800d2e0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d2a2:	681a      	ldr	r2, [r3, #0]
 800d2a4:	4b0a      	ldr	r3, [pc, #40]	; (800d2d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	3304      	adds	r3, #4
 800d2aa:	4619      	mov	r1, r3
 800d2ac:	4610      	mov	r0, r2
 800d2ae:	f7fe fada 	bl	800b866 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d2b2:	4b0c      	ldr	r3, [pc, #48]	; (800d2e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	68ba      	ldr	r2, [r7, #8]
 800d2b8:	429a      	cmp	r2, r3
 800d2ba:	d202      	bcs.n	800d2c2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d2bc:	4a09      	ldr	r2, [pc, #36]	; (800d2e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d2be:	68bb      	ldr	r3, [r7, #8]
 800d2c0:	6013      	str	r3, [r2, #0]
}
 800d2c2:	bf00      	nop
 800d2c4:	3710      	adds	r7, #16
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	bd80      	pop	{r7, pc}
 800d2ca:	bf00      	nop
 800d2cc:	20000924 	.word	0x20000924
 800d2d0:	20000820 	.word	0x20000820
 800d2d4:	20000928 	.word	0x20000928
 800d2d8:	2000090c 	.word	0x2000090c
 800d2dc:	200008dc 	.word	0x200008dc
 800d2e0:	200008d8 	.word	0x200008d8
 800d2e4:	20000940 	.word	0x20000940

0800d2e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b08a      	sub	sp, #40	; 0x28
 800d2ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d2f2:	f000 fb85 	bl	800da00 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d2f6:	4b1c      	ldr	r3, [pc, #112]	; (800d368 <xTimerCreateTimerTask+0x80>)
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d021      	beq.n	800d342 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d2fe:	2300      	movs	r3, #0
 800d300:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d302:	2300      	movs	r3, #0
 800d304:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d306:	1d3a      	adds	r2, r7, #4
 800d308:	f107 0108 	add.w	r1, r7, #8
 800d30c:	f107 030c 	add.w	r3, r7, #12
 800d310:	4618      	mov	r0, r3
 800d312:	f7f3 fc51 	bl	8000bb8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d316:	6879      	ldr	r1, [r7, #4]
 800d318:	68bb      	ldr	r3, [r7, #8]
 800d31a:	68fa      	ldr	r2, [r7, #12]
 800d31c:	9202      	str	r2, [sp, #8]
 800d31e:	9301      	str	r3, [sp, #4]
 800d320:	2302      	movs	r3, #2
 800d322:	9300      	str	r3, [sp, #0]
 800d324:	2300      	movs	r3, #0
 800d326:	460a      	mov	r2, r1
 800d328:	4910      	ldr	r1, [pc, #64]	; (800d36c <xTimerCreateTimerTask+0x84>)
 800d32a:	4811      	ldr	r0, [pc, #68]	; (800d370 <xTimerCreateTimerTask+0x88>)
 800d32c:	f7ff f8a0 	bl	800c470 <xTaskCreateStatic>
 800d330:	4603      	mov	r3, r0
 800d332:	4a10      	ldr	r2, [pc, #64]	; (800d374 <xTimerCreateTimerTask+0x8c>)
 800d334:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d336:	4b0f      	ldr	r3, [pc, #60]	; (800d374 <xTimerCreateTimerTask+0x8c>)
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d001      	beq.n	800d342 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d33e:	2301      	movs	r3, #1
 800d340:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d342:	697b      	ldr	r3, [r7, #20]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d10a      	bne.n	800d35e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d34c:	f383 8811 	msr	BASEPRI, r3
 800d350:	f3bf 8f6f 	isb	sy
 800d354:	f3bf 8f4f 	dsb	sy
 800d358:	613b      	str	r3, [r7, #16]
}
 800d35a:	bf00      	nop
 800d35c:	e7fe      	b.n	800d35c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d35e:	697b      	ldr	r3, [r7, #20]
}
 800d360:	4618      	mov	r0, r3
 800d362:	3718      	adds	r7, #24
 800d364:	46bd      	mov	sp, r7
 800d366:	bd80      	pop	{r7, pc}
 800d368:	2000097c 	.word	0x2000097c
 800d36c:	0800f3f4 	.word	0x0800f3f4
 800d370:	0800d5e1 	.word	0x0800d5e1
 800d374:	20000980 	.word	0x20000980

0800d378 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b088      	sub	sp, #32
 800d37c:	af02      	add	r7, sp, #8
 800d37e:	60f8      	str	r0, [r7, #12]
 800d380:	60b9      	str	r1, [r7, #8]
 800d382:	607a      	str	r2, [r7, #4]
 800d384:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800d386:	2028      	movs	r0, #40	; 0x28
 800d388:	f000 fdc6 	bl	800df18 <pvPortMalloc>
 800d38c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800d38e:	697b      	ldr	r3, [r7, #20]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d00d      	beq.n	800d3b0 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800d394:	697b      	ldr	r3, [r7, #20]
 800d396:	2200      	movs	r2, #0
 800d398:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800d39c:	697b      	ldr	r3, [r7, #20]
 800d39e:	9301      	str	r3, [sp, #4]
 800d3a0:	6a3b      	ldr	r3, [r7, #32]
 800d3a2:	9300      	str	r3, [sp, #0]
 800d3a4:	683b      	ldr	r3, [r7, #0]
 800d3a6:	687a      	ldr	r2, [r7, #4]
 800d3a8:	68b9      	ldr	r1, [r7, #8]
 800d3aa:	68f8      	ldr	r0, [r7, #12]
 800d3ac:	f000 f843 	bl	800d436 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800d3b0:	697b      	ldr	r3, [r7, #20]
	}
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	3718      	adds	r7, #24
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd80      	pop	{r7, pc}

0800d3ba <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800d3ba:	b580      	push	{r7, lr}
 800d3bc:	b08a      	sub	sp, #40	; 0x28
 800d3be:	af02      	add	r7, sp, #8
 800d3c0:	60f8      	str	r0, [r7, #12]
 800d3c2:	60b9      	str	r1, [r7, #8]
 800d3c4:	607a      	str	r2, [r7, #4]
 800d3c6:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800d3c8:	2328      	movs	r3, #40	; 0x28
 800d3ca:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800d3cc:	693b      	ldr	r3, [r7, #16]
 800d3ce:	2b28      	cmp	r3, #40	; 0x28
 800d3d0:	d00a      	beq.n	800d3e8 <xTimerCreateStatic+0x2e>
	__asm volatile
 800d3d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3d6:	f383 8811 	msr	BASEPRI, r3
 800d3da:	f3bf 8f6f 	isb	sy
 800d3de:	f3bf 8f4f 	dsb	sy
 800d3e2:	61bb      	str	r3, [r7, #24]
}
 800d3e4:	bf00      	nop
 800d3e6:	e7fe      	b.n	800d3e6 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d3e8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800d3ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d10a      	bne.n	800d406 <xTimerCreateStatic+0x4c>
	__asm volatile
 800d3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3f4:	f383 8811 	msr	BASEPRI, r3
 800d3f8:	f3bf 8f6f 	isb	sy
 800d3fc:	f3bf 8f4f 	dsb	sy
 800d400:	617b      	str	r3, [r7, #20]
}
 800d402:	bf00      	nop
 800d404:	e7fe      	b.n	800d404 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800d406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d408:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800d40a:	69fb      	ldr	r3, [r7, #28]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d00d      	beq.n	800d42c <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800d410:	69fb      	ldr	r3, [r7, #28]
 800d412:	2202      	movs	r2, #2
 800d414:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800d418:	69fb      	ldr	r3, [r7, #28]
 800d41a:	9301      	str	r3, [sp, #4]
 800d41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d41e:	9300      	str	r3, [sp, #0]
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	687a      	ldr	r2, [r7, #4]
 800d424:	68b9      	ldr	r1, [r7, #8]
 800d426:	68f8      	ldr	r0, [r7, #12]
 800d428:	f000 f805 	bl	800d436 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800d42c:	69fb      	ldr	r3, [r7, #28]
	}
 800d42e:	4618      	mov	r0, r3
 800d430:	3720      	adds	r7, #32
 800d432:	46bd      	mov	sp, r7
 800d434:	bd80      	pop	{r7, pc}

0800d436 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800d436:	b580      	push	{r7, lr}
 800d438:	b086      	sub	sp, #24
 800d43a:	af00      	add	r7, sp, #0
 800d43c:	60f8      	str	r0, [r7, #12]
 800d43e:	60b9      	str	r1, [r7, #8]
 800d440:	607a      	str	r2, [r7, #4]
 800d442:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800d444:	68bb      	ldr	r3, [r7, #8]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d10a      	bne.n	800d460 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800d44a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d44e:	f383 8811 	msr	BASEPRI, r3
 800d452:	f3bf 8f6f 	isb	sy
 800d456:	f3bf 8f4f 	dsb	sy
 800d45a:	617b      	str	r3, [r7, #20]
}
 800d45c:	bf00      	nop
 800d45e:	e7fe      	b.n	800d45e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800d460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d462:	2b00      	cmp	r3, #0
 800d464:	d01e      	beq.n	800d4a4 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800d466:	f000 facb 	bl	800da00 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800d46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d46c:	68fa      	ldr	r2, [r7, #12]
 800d46e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800d470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d472:	68ba      	ldr	r2, [r7, #8]
 800d474:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800d476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d478:	683a      	ldr	r2, [r7, #0]
 800d47a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800d47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d47e:	6a3a      	ldr	r2, [r7, #32]
 800d480:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800d482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d484:	3304      	adds	r3, #4
 800d486:	4618      	mov	r0, r3
 800d488:	f7fe f9bc 	bl	800b804 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d008      	beq.n	800d4a4 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800d492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d494:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d498:	f043 0304 	orr.w	r3, r3, #4
 800d49c:	b2da      	uxtb	r2, r3
 800d49e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800d4a4:	bf00      	nop
 800d4a6:	3718      	adds	r7, #24
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	bd80      	pop	{r7, pc}

0800d4ac <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b08a      	sub	sp, #40	; 0x28
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	60f8      	str	r0, [r7, #12]
 800d4b4:	60b9      	str	r1, [r7, #8]
 800d4b6:	607a      	str	r2, [r7, #4]
 800d4b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d10a      	bne.n	800d4da <xTimerGenericCommand+0x2e>
	__asm volatile
 800d4c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4c8:	f383 8811 	msr	BASEPRI, r3
 800d4cc:	f3bf 8f6f 	isb	sy
 800d4d0:	f3bf 8f4f 	dsb	sy
 800d4d4:	623b      	str	r3, [r7, #32]
}
 800d4d6:	bf00      	nop
 800d4d8:	e7fe      	b.n	800d4d8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d4da:	4b1a      	ldr	r3, [pc, #104]	; (800d544 <xTimerGenericCommand+0x98>)
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d02a      	beq.n	800d538 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d4e2:	68bb      	ldr	r3, [r7, #8]
 800d4e4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d4ee:	68bb      	ldr	r3, [r7, #8]
 800d4f0:	2b05      	cmp	r3, #5
 800d4f2:	dc18      	bgt.n	800d526 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d4f4:	f7ff fdee 	bl	800d0d4 <xTaskGetSchedulerState>
 800d4f8:	4603      	mov	r3, r0
 800d4fa:	2b02      	cmp	r3, #2
 800d4fc:	d109      	bne.n	800d512 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d4fe:	4b11      	ldr	r3, [pc, #68]	; (800d544 <xTimerGenericCommand+0x98>)
 800d500:	6818      	ldr	r0, [r3, #0]
 800d502:	f107 0114 	add.w	r1, r7, #20
 800d506:	2300      	movs	r3, #0
 800d508:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d50a:	f7fe fb49 	bl	800bba0 <xQueueGenericSend>
 800d50e:	6278      	str	r0, [r7, #36]	; 0x24
 800d510:	e012      	b.n	800d538 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d512:	4b0c      	ldr	r3, [pc, #48]	; (800d544 <xTimerGenericCommand+0x98>)
 800d514:	6818      	ldr	r0, [r3, #0]
 800d516:	f107 0114 	add.w	r1, r7, #20
 800d51a:	2300      	movs	r3, #0
 800d51c:	2200      	movs	r2, #0
 800d51e:	f7fe fb3f 	bl	800bba0 <xQueueGenericSend>
 800d522:	6278      	str	r0, [r7, #36]	; 0x24
 800d524:	e008      	b.n	800d538 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d526:	4b07      	ldr	r3, [pc, #28]	; (800d544 <xTimerGenericCommand+0x98>)
 800d528:	6818      	ldr	r0, [r3, #0]
 800d52a:	f107 0114 	add.w	r1, r7, #20
 800d52e:	2300      	movs	r3, #0
 800d530:	683a      	ldr	r2, [r7, #0]
 800d532:	f7fe fc33 	bl	800bd9c <xQueueGenericSendFromISR>
 800d536:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d53a:	4618      	mov	r0, r3
 800d53c:	3728      	adds	r7, #40	; 0x28
 800d53e:	46bd      	mov	sp, r7
 800d540:	bd80      	pop	{r7, pc}
 800d542:	bf00      	nop
 800d544:	2000097c 	.word	0x2000097c

0800d548 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b088      	sub	sp, #32
 800d54c:	af02      	add	r7, sp, #8
 800d54e:	6078      	str	r0, [r7, #4]
 800d550:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d552:	4b22      	ldr	r3, [pc, #136]	; (800d5dc <prvProcessExpiredTimer+0x94>)
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	68db      	ldr	r3, [r3, #12]
 800d558:	68db      	ldr	r3, [r3, #12]
 800d55a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d55c:	697b      	ldr	r3, [r7, #20]
 800d55e:	3304      	adds	r3, #4
 800d560:	4618      	mov	r0, r3
 800d562:	f7fe f9b9 	bl	800b8d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d566:	697b      	ldr	r3, [r7, #20]
 800d568:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d56c:	f003 0304 	and.w	r3, r3, #4
 800d570:	2b00      	cmp	r3, #0
 800d572:	d022      	beq.n	800d5ba <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d574:	697b      	ldr	r3, [r7, #20]
 800d576:	699a      	ldr	r2, [r3, #24]
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	18d1      	adds	r1, r2, r3
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	683a      	ldr	r2, [r7, #0]
 800d580:	6978      	ldr	r0, [r7, #20]
 800d582:	f000 f8d1 	bl	800d728 <prvInsertTimerInActiveList>
 800d586:	4603      	mov	r3, r0
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d01f      	beq.n	800d5cc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d58c:	2300      	movs	r3, #0
 800d58e:	9300      	str	r3, [sp, #0]
 800d590:	2300      	movs	r3, #0
 800d592:	687a      	ldr	r2, [r7, #4]
 800d594:	2100      	movs	r1, #0
 800d596:	6978      	ldr	r0, [r7, #20]
 800d598:	f7ff ff88 	bl	800d4ac <xTimerGenericCommand>
 800d59c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d59e:	693b      	ldr	r3, [r7, #16]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d113      	bne.n	800d5cc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d5a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5a8:	f383 8811 	msr	BASEPRI, r3
 800d5ac:	f3bf 8f6f 	isb	sy
 800d5b0:	f3bf 8f4f 	dsb	sy
 800d5b4:	60fb      	str	r3, [r7, #12]
}
 800d5b6:	bf00      	nop
 800d5b8:	e7fe      	b.n	800d5b8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d5ba:	697b      	ldr	r3, [r7, #20]
 800d5bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d5c0:	f023 0301 	bic.w	r3, r3, #1
 800d5c4:	b2da      	uxtb	r2, r3
 800d5c6:	697b      	ldr	r3, [r7, #20]
 800d5c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d5cc:	697b      	ldr	r3, [r7, #20]
 800d5ce:	6a1b      	ldr	r3, [r3, #32]
 800d5d0:	6978      	ldr	r0, [r7, #20]
 800d5d2:	4798      	blx	r3
}
 800d5d4:	bf00      	nop
 800d5d6:	3718      	adds	r7, #24
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	bd80      	pop	{r7, pc}
 800d5dc:	20000974 	.word	0x20000974

0800d5e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b084      	sub	sp, #16
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d5e8:	f107 0308 	add.w	r3, r7, #8
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	f000 f857 	bl	800d6a0 <prvGetNextExpireTime>
 800d5f2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d5f4:	68bb      	ldr	r3, [r7, #8]
 800d5f6:	4619      	mov	r1, r3
 800d5f8:	68f8      	ldr	r0, [r7, #12]
 800d5fa:	f000 f803 	bl	800d604 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d5fe:	f000 f8d5 	bl	800d7ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d602:	e7f1      	b.n	800d5e8 <prvTimerTask+0x8>

0800d604 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b084      	sub	sp, #16
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
 800d60c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d60e:	f7ff f97d 	bl	800c90c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d612:	f107 0308 	add.w	r3, r7, #8
 800d616:	4618      	mov	r0, r3
 800d618:	f000 f866 	bl	800d6e8 <prvSampleTimeNow>
 800d61c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d61e:	68bb      	ldr	r3, [r7, #8]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d130      	bne.n	800d686 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d10a      	bne.n	800d640 <prvProcessTimerOrBlockTask+0x3c>
 800d62a:	687a      	ldr	r2, [r7, #4]
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	429a      	cmp	r2, r3
 800d630:	d806      	bhi.n	800d640 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d632:	f7ff f979 	bl	800c928 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d636:	68f9      	ldr	r1, [r7, #12]
 800d638:	6878      	ldr	r0, [r7, #4]
 800d63a:	f7ff ff85 	bl	800d548 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d63e:	e024      	b.n	800d68a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d640:	683b      	ldr	r3, [r7, #0]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d008      	beq.n	800d658 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d646:	4b13      	ldr	r3, [pc, #76]	; (800d694 <prvProcessTimerOrBlockTask+0x90>)
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d101      	bne.n	800d654 <prvProcessTimerOrBlockTask+0x50>
 800d650:	2301      	movs	r3, #1
 800d652:	e000      	b.n	800d656 <prvProcessTimerOrBlockTask+0x52>
 800d654:	2300      	movs	r3, #0
 800d656:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d658:	4b0f      	ldr	r3, [pc, #60]	; (800d698 <prvProcessTimerOrBlockTask+0x94>)
 800d65a:	6818      	ldr	r0, [r3, #0]
 800d65c:	687a      	ldr	r2, [r7, #4]
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	1ad3      	subs	r3, r2, r3
 800d662:	683a      	ldr	r2, [r7, #0]
 800d664:	4619      	mov	r1, r3
 800d666:	f7fe fecf 	bl	800c408 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d66a:	f7ff f95d 	bl	800c928 <xTaskResumeAll>
 800d66e:	4603      	mov	r3, r0
 800d670:	2b00      	cmp	r3, #0
 800d672:	d10a      	bne.n	800d68a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d674:	4b09      	ldr	r3, [pc, #36]	; (800d69c <prvProcessTimerOrBlockTask+0x98>)
 800d676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d67a:	601a      	str	r2, [r3, #0]
 800d67c:	f3bf 8f4f 	dsb	sy
 800d680:	f3bf 8f6f 	isb	sy
}
 800d684:	e001      	b.n	800d68a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d686:	f7ff f94f 	bl	800c928 <xTaskResumeAll>
}
 800d68a:	bf00      	nop
 800d68c:	3710      	adds	r7, #16
 800d68e:	46bd      	mov	sp, r7
 800d690:	bd80      	pop	{r7, pc}
 800d692:	bf00      	nop
 800d694:	20000978 	.word	0x20000978
 800d698:	2000097c 	.word	0x2000097c
 800d69c:	e000ed04 	.word	0xe000ed04

0800d6a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d6a0:	b480      	push	{r7}
 800d6a2:	b085      	sub	sp, #20
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d6a8:	4b0e      	ldr	r3, [pc, #56]	; (800d6e4 <prvGetNextExpireTime+0x44>)
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d101      	bne.n	800d6b6 <prvGetNextExpireTime+0x16>
 800d6b2:	2201      	movs	r2, #1
 800d6b4:	e000      	b.n	800d6b8 <prvGetNextExpireTime+0x18>
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d105      	bne.n	800d6d0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d6c4:	4b07      	ldr	r3, [pc, #28]	; (800d6e4 <prvGetNextExpireTime+0x44>)
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	68db      	ldr	r3, [r3, #12]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	60fb      	str	r3, [r7, #12]
 800d6ce:	e001      	b.n	800d6d4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d6d4:	68fb      	ldr	r3, [r7, #12]
}
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	3714      	adds	r7, #20
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e0:	4770      	bx	lr
 800d6e2:	bf00      	nop
 800d6e4:	20000974 	.word	0x20000974

0800d6e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b084      	sub	sp, #16
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d6f0:	f7ff f9b6 	bl	800ca60 <xTaskGetTickCount>
 800d6f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d6f6:	4b0b      	ldr	r3, [pc, #44]	; (800d724 <prvSampleTimeNow+0x3c>)
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	68fa      	ldr	r2, [r7, #12]
 800d6fc:	429a      	cmp	r2, r3
 800d6fe:	d205      	bcs.n	800d70c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d700:	f000 f91a 	bl	800d938 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2201      	movs	r2, #1
 800d708:	601a      	str	r2, [r3, #0]
 800d70a:	e002      	b.n	800d712 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	2200      	movs	r2, #0
 800d710:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d712:	4a04      	ldr	r2, [pc, #16]	; (800d724 <prvSampleTimeNow+0x3c>)
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d718:	68fb      	ldr	r3, [r7, #12]
}
 800d71a:	4618      	mov	r0, r3
 800d71c:	3710      	adds	r7, #16
 800d71e:	46bd      	mov	sp, r7
 800d720:	bd80      	pop	{r7, pc}
 800d722:	bf00      	nop
 800d724:	20000984 	.word	0x20000984

0800d728 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b086      	sub	sp, #24
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	60f8      	str	r0, [r7, #12]
 800d730:	60b9      	str	r1, [r7, #8]
 800d732:	607a      	str	r2, [r7, #4]
 800d734:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d736:	2300      	movs	r3, #0
 800d738:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	68ba      	ldr	r2, [r7, #8]
 800d73e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	68fa      	ldr	r2, [r7, #12]
 800d744:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d746:	68ba      	ldr	r2, [r7, #8]
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	429a      	cmp	r2, r3
 800d74c:	d812      	bhi.n	800d774 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d74e:	687a      	ldr	r2, [r7, #4]
 800d750:	683b      	ldr	r3, [r7, #0]
 800d752:	1ad2      	subs	r2, r2, r3
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	699b      	ldr	r3, [r3, #24]
 800d758:	429a      	cmp	r2, r3
 800d75a:	d302      	bcc.n	800d762 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d75c:	2301      	movs	r3, #1
 800d75e:	617b      	str	r3, [r7, #20]
 800d760:	e01b      	b.n	800d79a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d762:	4b10      	ldr	r3, [pc, #64]	; (800d7a4 <prvInsertTimerInActiveList+0x7c>)
 800d764:	681a      	ldr	r2, [r3, #0]
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	3304      	adds	r3, #4
 800d76a:	4619      	mov	r1, r3
 800d76c:	4610      	mov	r0, r2
 800d76e:	f7fe f87a 	bl	800b866 <vListInsert>
 800d772:	e012      	b.n	800d79a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d774:	687a      	ldr	r2, [r7, #4]
 800d776:	683b      	ldr	r3, [r7, #0]
 800d778:	429a      	cmp	r2, r3
 800d77a:	d206      	bcs.n	800d78a <prvInsertTimerInActiveList+0x62>
 800d77c:	68ba      	ldr	r2, [r7, #8]
 800d77e:	683b      	ldr	r3, [r7, #0]
 800d780:	429a      	cmp	r2, r3
 800d782:	d302      	bcc.n	800d78a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d784:	2301      	movs	r3, #1
 800d786:	617b      	str	r3, [r7, #20]
 800d788:	e007      	b.n	800d79a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d78a:	4b07      	ldr	r3, [pc, #28]	; (800d7a8 <prvInsertTimerInActiveList+0x80>)
 800d78c:	681a      	ldr	r2, [r3, #0]
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	3304      	adds	r3, #4
 800d792:	4619      	mov	r1, r3
 800d794:	4610      	mov	r0, r2
 800d796:	f7fe f866 	bl	800b866 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d79a:	697b      	ldr	r3, [r7, #20]
}
 800d79c:	4618      	mov	r0, r3
 800d79e:	3718      	adds	r7, #24
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	bd80      	pop	{r7, pc}
 800d7a4:	20000978 	.word	0x20000978
 800d7a8:	20000974 	.word	0x20000974

0800d7ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b08c      	sub	sp, #48	; 0x30
 800d7b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d7b2:	e0ae      	b.n	800d912 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d7b4:	68bb      	ldr	r3, [r7, #8]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	f2c0 80aa 	blt.w	800d910 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d7bc:	693b      	ldr	r3, [r7, #16]
 800d7be:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7c2:	695b      	ldr	r3, [r3, #20]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d004      	beq.n	800d7d2 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ca:	3304      	adds	r3, #4
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	f7fe f883 	bl	800b8d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d7d2:	1d3b      	adds	r3, r7, #4
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	f7ff ff87 	bl	800d6e8 <prvSampleTimeNow>
 800d7da:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800d7dc:	68bb      	ldr	r3, [r7, #8]
 800d7de:	2b09      	cmp	r3, #9
 800d7e0:	f200 8097 	bhi.w	800d912 <prvProcessReceivedCommands+0x166>
 800d7e4:	a201      	add	r2, pc, #4	; (adr r2, 800d7ec <prvProcessReceivedCommands+0x40>)
 800d7e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7ea:	bf00      	nop
 800d7ec:	0800d815 	.word	0x0800d815
 800d7f0:	0800d815 	.word	0x0800d815
 800d7f4:	0800d815 	.word	0x0800d815
 800d7f8:	0800d889 	.word	0x0800d889
 800d7fc:	0800d89d 	.word	0x0800d89d
 800d800:	0800d8e7 	.word	0x0800d8e7
 800d804:	0800d815 	.word	0x0800d815
 800d808:	0800d815 	.word	0x0800d815
 800d80c:	0800d889 	.word	0x0800d889
 800d810:	0800d89d 	.word	0x0800d89d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d816:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d81a:	f043 0301 	orr.w	r3, r3, #1
 800d81e:	b2da      	uxtb	r2, r3
 800d820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d822:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d826:	68fa      	ldr	r2, [r7, #12]
 800d828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d82a:	699b      	ldr	r3, [r3, #24]
 800d82c:	18d1      	adds	r1, r2, r3
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	6a3a      	ldr	r2, [r7, #32]
 800d832:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d834:	f7ff ff78 	bl	800d728 <prvInsertTimerInActiveList>
 800d838:	4603      	mov	r3, r0
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d069      	beq.n	800d912 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d840:	6a1b      	ldr	r3, [r3, #32]
 800d842:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d844:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d848:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d84c:	f003 0304 	and.w	r3, r3, #4
 800d850:	2b00      	cmp	r3, #0
 800d852:	d05e      	beq.n	800d912 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d854:	68fa      	ldr	r2, [r7, #12]
 800d856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d858:	699b      	ldr	r3, [r3, #24]
 800d85a:	441a      	add	r2, r3
 800d85c:	2300      	movs	r3, #0
 800d85e:	9300      	str	r3, [sp, #0]
 800d860:	2300      	movs	r3, #0
 800d862:	2100      	movs	r1, #0
 800d864:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d866:	f7ff fe21 	bl	800d4ac <xTimerGenericCommand>
 800d86a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800d86c:	69fb      	ldr	r3, [r7, #28]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d14f      	bne.n	800d912 <prvProcessReceivedCommands+0x166>
	__asm volatile
 800d872:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d876:	f383 8811 	msr	BASEPRI, r3
 800d87a:	f3bf 8f6f 	isb	sy
 800d87e:	f3bf 8f4f 	dsb	sy
 800d882:	61bb      	str	r3, [r7, #24]
}
 800d884:	bf00      	nop
 800d886:	e7fe      	b.n	800d886 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d88a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d88e:	f023 0301 	bic.w	r3, r3, #1
 800d892:	b2da      	uxtb	r2, r3
 800d894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d896:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800d89a:	e03a      	b.n	800d912 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d89e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d8a2:	f043 0301 	orr.w	r3, r3, #1
 800d8a6:	b2da      	uxtb	r2, r3
 800d8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d8ae:	68fa      	ldr	r2, [r7, #12]
 800d8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8b2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8b6:	699b      	ldr	r3, [r3, #24]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d10a      	bne.n	800d8d2 <prvProcessReceivedCommands+0x126>
	__asm volatile
 800d8bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8c0:	f383 8811 	msr	BASEPRI, r3
 800d8c4:	f3bf 8f6f 	isb	sy
 800d8c8:	f3bf 8f4f 	dsb	sy
 800d8cc:	617b      	str	r3, [r7, #20]
}
 800d8ce:	bf00      	nop
 800d8d0:	e7fe      	b.n	800d8d0 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8d4:	699a      	ldr	r2, [r3, #24]
 800d8d6:	6a3b      	ldr	r3, [r7, #32]
 800d8d8:	18d1      	adds	r1, r2, r3
 800d8da:	6a3b      	ldr	r3, [r7, #32]
 800d8dc:	6a3a      	ldr	r2, [r7, #32]
 800d8de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d8e0:	f7ff ff22 	bl	800d728 <prvInsertTimerInActiveList>
					break;
 800d8e4:	e015      	b.n	800d912 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d8ec:	f003 0302 	and.w	r3, r3, #2
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d103      	bne.n	800d8fc <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 800d8f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d8f6:	f000 fbdb 	bl	800e0b0 <vPortFree>
 800d8fa:	e00a      	b.n	800d912 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d902:	f023 0301 	bic.w	r3, r3, #1
 800d906:	b2da      	uxtb	r2, r3
 800d908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d90a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d90e:	e000      	b.n	800d912 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d910:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d912:	4b08      	ldr	r3, [pc, #32]	; (800d934 <prvProcessReceivedCommands+0x188>)
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	f107 0108 	add.w	r1, r7, #8
 800d91a:	2200      	movs	r2, #0
 800d91c:	4618      	mov	r0, r3
 800d91e:	f7fe fad9 	bl	800bed4 <xQueueReceive>
 800d922:	4603      	mov	r3, r0
 800d924:	2b00      	cmp	r3, #0
 800d926:	f47f af45 	bne.w	800d7b4 <prvProcessReceivedCommands+0x8>
	}
}
 800d92a:	bf00      	nop
 800d92c:	bf00      	nop
 800d92e:	3728      	adds	r7, #40	; 0x28
 800d930:	46bd      	mov	sp, r7
 800d932:	bd80      	pop	{r7, pc}
 800d934:	2000097c 	.word	0x2000097c

0800d938 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b088      	sub	sp, #32
 800d93c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d93e:	e048      	b.n	800d9d2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d940:	4b2d      	ldr	r3, [pc, #180]	; (800d9f8 <prvSwitchTimerLists+0xc0>)
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	68db      	ldr	r3, [r3, #12]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d94a:	4b2b      	ldr	r3, [pc, #172]	; (800d9f8 <prvSwitchTimerLists+0xc0>)
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	68db      	ldr	r3, [r3, #12]
 800d950:	68db      	ldr	r3, [r3, #12]
 800d952:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	3304      	adds	r3, #4
 800d958:	4618      	mov	r0, r3
 800d95a:	f7fd ffbd 	bl	800b8d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	6a1b      	ldr	r3, [r3, #32]
 800d962:	68f8      	ldr	r0, [r7, #12]
 800d964:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d96c:	f003 0304 	and.w	r3, r3, #4
 800d970:	2b00      	cmp	r3, #0
 800d972:	d02e      	beq.n	800d9d2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	699b      	ldr	r3, [r3, #24]
 800d978:	693a      	ldr	r2, [r7, #16]
 800d97a:	4413      	add	r3, r2
 800d97c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d97e:	68ba      	ldr	r2, [r7, #8]
 800d980:	693b      	ldr	r3, [r7, #16]
 800d982:	429a      	cmp	r2, r3
 800d984:	d90e      	bls.n	800d9a4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	68ba      	ldr	r2, [r7, #8]
 800d98a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	68fa      	ldr	r2, [r7, #12]
 800d990:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d992:	4b19      	ldr	r3, [pc, #100]	; (800d9f8 <prvSwitchTimerLists+0xc0>)
 800d994:	681a      	ldr	r2, [r3, #0]
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	3304      	adds	r3, #4
 800d99a:	4619      	mov	r1, r3
 800d99c:	4610      	mov	r0, r2
 800d99e:	f7fd ff62 	bl	800b866 <vListInsert>
 800d9a2:	e016      	b.n	800d9d2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	9300      	str	r3, [sp, #0]
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	693a      	ldr	r2, [r7, #16]
 800d9ac:	2100      	movs	r1, #0
 800d9ae:	68f8      	ldr	r0, [r7, #12]
 800d9b0:	f7ff fd7c 	bl	800d4ac <xTimerGenericCommand>
 800d9b4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d10a      	bne.n	800d9d2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9c0:	f383 8811 	msr	BASEPRI, r3
 800d9c4:	f3bf 8f6f 	isb	sy
 800d9c8:	f3bf 8f4f 	dsb	sy
 800d9cc:	603b      	str	r3, [r7, #0]
}
 800d9ce:	bf00      	nop
 800d9d0:	e7fe      	b.n	800d9d0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d9d2:	4b09      	ldr	r3, [pc, #36]	; (800d9f8 <prvSwitchTimerLists+0xc0>)
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d1b1      	bne.n	800d940 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d9dc:	4b06      	ldr	r3, [pc, #24]	; (800d9f8 <prvSwitchTimerLists+0xc0>)
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d9e2:	4b06      	ldr	r3, [pc, #24]	; (800d9fc <prvSwitchTimerLists+0xc4>)
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	4a04      	ldr	r2, [pc, #16]	; (800d9f8 <prvSwitchTimerLists+0xc0>)
 800d9e8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d9ea:	4a04      	ldr	r2, [pc, #16]	; (800d9fc <prvSwitchTimerLists+0xc4>)
 800d9ec:	697b      	ldr	r3, [r7, #20]
 800d9ee:	6013      	str	r3, [r2, #0]
}
 800d9f0:	bf00      	nop
 800d9f2:	3718      	adds	r7, #24
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	bd80      	pop	{r7, pc}
 800d9f8:	20000974 	.word	0x20000974
 800d9fc:	20000978 	.word	0x20000978

0800da00 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b082      	sub	sp, #8
 800da04:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800da06:	f000 f965 	bl	800dcd4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800da0a:	4b15      	ldr	r3, [pc, #84]	; (800da60 <prvCheckForValidListAndQueue+0x60>)
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d120      	bne.n	800da54 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800da12:	4814      	ldr	r0, [pc, #80]	; (800da64 <prvCheckForValidListAndQueue+0x64>)
 800da14:	f7fd fed6 	bl	800b7c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800da18:	4813      	ldr	r0, [pc, #76]	; (800da68 <prvCheckForValidListAndQueue+0x68>)
 800da1a:	f7fd fed3 	bl	800b7c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800da1e:	4b13      	ldr	r3, [pc, #76]	; (800da6c <prvCheckForValidListAndQueue+0x6c>)
 800da20:	4a10      	ldr	r2, [pc, #64]	; (800da64 <prvCheckForValidListAndQueue+0x64>)
 800da22:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800da24:	4b12      	ldr	r3, [pc, #72]	; (800da70 <prvCheckForValidListAndQueue+0x70>)
 800da26:	4a10      	ldr	r2, [pc, #64]	; (800da68 <prvCheckForValidListAndQueue+0x68>)
 800da28:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800da2a:	2300      	movs	r3, #0
 800da2c:	9300      	str	r3, [sp, #0]
 800da2e:	4b11      	ldr	r3, [pc, #68]	; (800da74 <prvCheckForValidListAndQueue+0x74>)
 800da30:	4a11      	ldr	r2, [pc, #68]	; (800da78 <prvCheckForValidListAndQueue+0x78>)
 800da32:	210c      	movs	r1, #12
 800da34:	200a      	movs	r0, #10
 800da36:	f7fd ffe1 	bl	800b9fc <xQueueGenericCreateStatic>
 800da3a:	4603      	mov	r3, r0
 800da3c:	4a08      	ldr	r2, [pc, #32]	; (800da60 <prvCheckForValidListAndQueue+0x60>)
 800da3e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800da40:	4b07      	ldr	r3, [pc, #28]	; (800da60 <prvCheckForValidListAndQueue+0x60>)
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d005      	beq.n	800da54 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800da48:	4b05      	ldr	r3, [pc, #20]	; (800da60 <prvCheckForValidListAndQueue+0x60>)
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	490b      	ldr	r1, [pc, #44]	; (800da7c <prvCheckForValidListAndQueue+0x7c>)
 800da4e:	4618      	mov	r0, r3
 800da50:	f7fe fcb0 	bl	800c3b4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800da54:	f000 f96e 	bl	800dd34 <vPortExitCritical>
}
 800da58:	bf00      	nop
 800da5a:	46bd      	mov	sp, r7
 800da5c:	bd80      	pop	{r7, pc}
 800da5e:	bf00      	nop
 800da60:	2000097c 	.word	0x2000097c
 800da64:	2000094c 	.word	0x2000094c
 800da68:	20000960 	.word	0x20000960
 800da6c:	20000974 	.word	0x20000974
 800da70:	20000978 	.word	0x20000978
 800da74:	20000a00 	.word	0x20000a00
 800da78:	20000988 	.word	0x20000988
 800da7c:	0800f3fc 	.word	0x0800f3fc

0800da80 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800da80:	b480      	push	{r7}
 800da82:	b085      	sub	sp, #20
 800da84:	af00      	add	r7, sp, #0
 800da86:	60f8      	str	r0, [r7, #12]
 800da88:	60b9      	str	r1, [r7, #8]
 800da8a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	3b04      	subs	r3, #4
 800da90:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800da98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	3b04      	subs	r3, #4
 800da9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800daa0:	68bb      	ldr	r3, [r7, #8]
 800daa2:	f023 0201 	bic.w	r2, r3, #1
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	3b04      	subs	r3, #4
 800daae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dab0:	4a0c      	ldr	r2, [pc, #48]	; (800dae4 <pxPortInitialiseStack+0x64>)
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	3b14      	subs	r3, #20
 800daba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dabc:	687a      	ldr	r2, [r7, #4]
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	3b04      	subs	r3, #4
 800dac6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	f06f 0202 	mvn.w	r2, #2
 800dace:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	3b20      	subs	r3, #32
 800dad4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dad6:	68fb      	ldr	r3, [r7, #12]
}
 800dad8:	4618      	mov	r0, r3
 800dada:	3714      	adds	r7, #20
 800dadc:	46bd      	mov	sp, r7
 800dade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae2:	4770      	bx	lr
 800dae4:	0800dae9 	.word	0x0800dae9

0800dae8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dae8:	b480      	push	{r7}
 800daea:	b085      	sub	sp, #20
 800daec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800daee:	2300      	movs	r3, #0
 800daf0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800daf2:	4b12      	ldr	r3, [pc, #72]	; (800db3c <prvTaskExitError+0x54>)
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dafa:	d00a      	beq.n	800db12 <prvTaskExitError+0x2a>
	__asm volatile
 800dafc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db00:	f383 8811 	msr	BASEPRI, r3
 800db04:	f3bf 8f6f 	isb	sy
 800db08:	f3bf 8f4f 	dsb	sy
 800db0c:	60fb      	str	r3, [r7, #12]
}
 800db0e:	bf00      	nop
 800db10:	e7fe      	b.n	800db10 <prvTaskExitError+0x28>
	__asm volatile
 800db12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db16:	f383 8811 	msr	BASEPRI, r3
 800db1a:	f3bf 8f6f 	isb	sy
 800db1e:	f3bf 8f4f 	dsb	sy
 800db22:	60bb      	str	r3, [r7, #8]
}
 800db24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800db26:	bf00      	nop
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d0fc      	beq.n	800db28 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800db2e:	bf00      	nop
 800db30:	bf00      	nop
 800db32:	3714      	adds	r7, #20
 800db34:	46bd      	mov	sp, r7
 800db36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3a:	4770      	bx	lr
 800db3c:	2000002c 	.word	0x2000002c

0800db40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800db40:	4b07      	ldr	r3, [pc, #28]	; (800db60 <pxCurrentTCBConst2>)
 800db42:	6819      	ldr	r1, [r3, #0]
 800db44:	6808      	ldr	r0, [r1, #0]
 800db46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db4a:	f380 8809 	msr	PSP, r0
 800db4e:	f3bf 8f6f 	isb	sy
 800db52:	f04f 0000 	mov.w	r0, #0
 800db56:	f380 8811 	msr	BASEPRI, r0
 800db5a:	4770      	bx	lr
 800db5c:	f3af 8000 	nop.w

0800db60 <pxCurrentTCBConst2>:
 800db60:	20000820 	.word	0x20000820
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800db64:	bf00      	nop
 800db66:	bf00      	nop

0800db68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800db68:	4808      	ldr	r0, [pc, #32]	; (800db8c <prvPortStartFirstTask+0x24>)
 800db6a:	6800      	ldr	r0, [r0, #0]
 800db6c:	6800      	ldr	r0, [r0, #0]
 800db6e:	f380 8808 	msr	MSP, r0
 800db72:	f04f 0000 	mov.w	r0, #0
 800db76:	f380 8814 	msr	CONTROL, r0
 800db7a:	b662      	cpsie	i
 800db7c:	b661      	cpsie	f
 800db7e:	f3bf 8f4f 	dsb	sy
 800db82:	f3bf 8f6f 	isb	sy
 800db86:	df00      	svc	0
 800db88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800db8a:	bf00      	nop
 800db8c:	e000ed08 	.word	0xe000ed08

0800db90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b086      	sub	sp, #24
 800db94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800db96:	4b46      	ldr	r3, [pc, #280]	; (800dcb0 <xPortStartScheduler+0x120>)
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	4a46      	ldr	r2, [pc, #280]	; (800dcb4 <xPortStartScheduler+0x124>)
 800db9c:	4293      	cmp	r3, r2
 800db9e:	d10a      	bne.n	800dbb6 <xPortStartScheduler+0x26>
	__asm volatile
 800dba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dba4:	f383 8811 	msr	BASEPRI, r3
 800dba8:	f3bf 8f6f 	isb	sy
 800dbac:	f3bf 8f4f 	dsb	sy
 800dbb0:	613b      	str	r3, [r7, #16]
}
 800dbb2:	bf00      	nop
 800dbb4:	e7fe      	b.n	800dbb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800dbb6:	4b3e      	ldr	r3, [pc, #248]	; (800dcb0 <xPortStartScheduler+0x120>)
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	4a3f      	ldr	r2, [pc, #252]	; (800dcb8 <xPortStartScheduler+0x128>)
 800dbbc:	4293      	cmp	r3, r2
 800dbbe:	d10a      	bne.n	800dbd6 <xPortStartScheduler+0x46>
	__asm volatile
 800dbc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbc4:	f383 8811 	msr	BASEPRI, r3
 800dbc8:	f3bf 8f6f 	isb	sy
 800dbcc:	f3bf 8f4f 	dsb	sy
 800dbd0:	60fb      	str	r3, [r7, #12]
}
 800dbd2:	bf00      	nop
 800dbd4:	e7fe      	b.n	800dbd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800dbd6:	4b39      	ldr	r3, [pc, #228]	; (800dcbc <xPortStartScheduler+0x12c>)
 800dbd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800dbda:	697b      	ldr	r3, [r7, #20]
 800dbdc:	781b      	ldrb	r3, [r3, #0]
 800dbde:	b2db      	uxtb	r3, r3
 800dbe0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800dbe2:	697b      	ldr	r3, [r7, #20]
 800dbe4:	22ff      	movs	r2, #255	; 0xff
 800dbe6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800dbe8:	697b      	ldr	r3, [r7, #20]
 800dbea:	781b      	ldrb	r3, [r3, #0]
 800dbec:	b2db      	uxtb	r3, r3
 800dbee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800dbf0:	78fb      	ldrb	r3, [r7, #3]
 800dbf2:	b2db      	uxtb	r3, r3
 800dbf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800dbf8:	b2da      	uxtb	r2, r3
 800dbfa:	4b31      	ldr	r3, [pc, #196]	; (800dcc0 <xPortStartScheduler+0x130>)
 800dbfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800dbfe:	4b31      	ldr	r3, [pc, #196]	; (800dcc4 <xPortStartScheduler+0x134>)
 800dc00:	2207      	movs	r2, #7
 800dc02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dc04:	e009      	b.n	800dc1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800dc06:	4b2f      	ldr	r3, [pc, #188]	; (800dcc4 <xPortStartScheduler+0x134>)
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	3b01      	subs	r3, #1
 800dc0c:	4a2d      	ldr	r2, [pc, #180]	; (800dcc4 <xPortStartScheduler+0x134>)
 800dc0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800dc10:	78fb      	ldrb	r3, [r7, #3]
 800dc12:	b2db      	uxtb	r3, r3
 800dc14:	005b      	lsls	r3, r3, #1
 800dc16:	b2db      	uxtb	r3, r3
 800dc18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dc1a:	78fb      	ldrb	r3, [r7, #3]
 800dc1c:	b2db      	uxtb	r3, r3
 800dc1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc22:	2b80      	cmp	r3, #128	; 0x80
 800dc24:	d0ef      	beq.n	800dc06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800dc26:	4b27      	ldr	r3, [pc, #156]	; (800dcc4 <xPortStartScheduler+0x134>)
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	f1c3 0307 	rsb	r3, r3, #7
 800dc2e:	2b04      	cmp	r3, #4
 800dc30:	d00a      	beq.n	800dc48 <xPortStartScheduler+0xb8>
	__asm volatile
 800dc32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc36:	f383 8811 	msr	BASEPRI, r3
 800dc3a:	f3bf 8f6f 	isb	sy
 800dc3e:	f3bf 8f4f 	dsb	sy
 800dc42:	60bb      	str	r3, [r7, #8]
}
 800dc44:	bf00      	nop
 800dc46:	e7fe      	b.n	800dc46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800dc48:	4b1e      	ldr	r3, [pc, #120]	; (800dcc4 <xPortStartScheduler+0x134>)
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	021b      	lsls	r3, r3, #8
 800dc4e:	4a1d      	ldr	r2, [pc, #116]	; (800dcc4 <xPortStartScheduler+0x134>)
 800dc50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800dc52:	4b1c      	ldr	r3, [pc, #112]	; (800dcc4 <xPortStartScheduler+0x134>)
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800dc5a:	4a1a      	ldr	r2, [pc, #104]	; (800dcc4 <xPortStartScheduler+0x134>)
 800dc5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	b2da      	uxtb	r2, r3
 800dc62:	697b      	ldr	r3, [r7, #20]
 800dc64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800dc66:	4b18      	ldr	r3, [pc, #96]	; (800dcc8 <xPortStartScheduler+0x138>)
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	4a17      	ldr	r2, [pc, #92]	; (800dcc8 <xPortStartScheduler+0x138>)
 800dc6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800dc70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800dc72:	4b15      	ldr	r3, [pc, #84]	; (800dcc8 <xPortStartScheduler+0x138>)
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	4a14      	ldr	r2, [pc, #80]	; (800dcc8 <xPortStartScheduler+0x138>)
 800dc78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800dc7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800dc7e:	f000 f8dd 	bl	800de3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800dc82:	4b12      	ldr	r3, [pc, #72]	; (800dccc <xPortStartScheduler+0x13c>)
 800dc84:	2200      	movs	r2, #0
 800dc86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800dc88:	f000 f8fc 	bl	800de84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800dc8c:	4b10      	ldr	r3, [pc, #64]	; (800dcd0 <xPortStartScheduler+0x140>)
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	4a0f      	ldr	r2, [pc, #60]	; (800dcd0 <xPortStartScheduler+0x140>)
 800dc92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800dc96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800dc98:	f7ff ff66 	bl	800db68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800dc9c:	f7fe ffa8 	bl	800cbf0 <vTaskSwitchContext>
	prvTaskExitError();
 800dca0:	f7ff ff22 	bl	800dae8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800dca4:	2300      	movs	r3, #0
}
 800dca6:	4618      	mov	r0, r3
 800dca8:	3718      	adds	r7, #24
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	bd80      	pop	{r7, pc}
 800dcae:	bf00      	nop
 800dcb0:	e000ed00 	.word	0xe000ed00
 800dcb4:	410fc271 	.word	0x410fc271
 800dcb8:	410fc270 	.word	0x410fc270
 800dcbc:	e000e400 	.word	0xe000e400
 800dcc0:	20000a48 	.word	0x20000a48
 800dcc4:	20000a4c 	.word	0x20000a4c
 800dcc8:	e000ed20 	.word	0xe000ed20
 800dccc:	2000002c 	.word	0x2000002c
 800dcd0:	e000ef34 	.word	0xe000ef34

0800dcd4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800dcd4:	b480      	push	{r7}
 800dcd6:	b083      	sub	sp, #12
 800dcd8:	af00      	add	r7, sp, #0
	__asm volatile
 800dcda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcde:	f383 8811 	msr	BASEPRI, r3
 800dce2:	f3bf 8f6f 	isb	sy
 800dce6:	f3bf 8f4f 	dsb	sy
 800dcea:	607b      	str	r3, [r7, #4]
}
 800dcec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800dcee:	4b0f      	ldr	r3, [pc, #60]	; (800dd2c <vPortEnterCritical+0x58>)
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	3301      	adds	r3, #1
 800dcf4:	4a0d      	ldr	r2, [pc, #52]	; (800dd2c <vPortEnterCritical+0x58>)
 800dcf6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800dcf8:	4b0c      	ldr	r3, [pc, #48]	; (800dd2c <vPortEnterCritical+0x58>)
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	2b01      	cmp	r3, #1
 800dcfe:	d10f      	bne.n	800dd20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dd00:	4b0b      	ldr	r3, [pc, #44]	; (800dd30 <vPortEnterCritical+0x5c>)
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	b2db      	uxtb	r3, r3
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d00a      	beq.n	800dd20 <vPortEnterCritical+0x4c>
	__asm volatile
 800dd0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd0e:	f383 8811 	msr	BASEPRI, r3
 800dd12:	f3bf 8f6f 	isb	sy
 800dd16:	f3bf 8f4f 	dsb	sy
 800dd1a:	603b      	str	r3, [r7, #0]
}
 800dd1c:	bf00      	nop
 800dd1e:	e7fe      	b.n	800dd1e <vPortEnterCritical+0x4a>
	}
}
 800dd20:	bf00      	nop
 800dd22:	370c      	adds	r7, #12
 800dd24:	46bd      	mov	sp, r7
 800dd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2a:	4770      	bx	lr
 800dd2c:	2000002c 	.word	0x2000002c
 800dd30:	e000ed04 	.word	0xe000ed04

0800dd34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800dd34:	b480      	push	{r7}
 800dd36:	b083      	sub	sp, #12
 800dd38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800dd3a:	4b12      	ldr	r3, [pc, #72]	; (800dd84 <vPortExitCritical+0x50>)
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d10a      	bne.n	800dd58 <vPortExitCritical+0x24>
	__asm volatile
 800dd42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd46:	f383 8811 	msr	BASEPRI, r3
 800dd4a:	f3bf 8f6f 	isb	sy
 800dd4e:	f3bf 8f4f 	dsb	sy
 800dd52:	607b      	str	r3, [r7, #4]
}
 800dd54:	bf00      	nop
 800dd56:	e7fe      	b.n	800dd56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800dd58:	4b0a      	ldr	r3, [pc, #40]	; (800dd84 <vPortExitCritical+0x50>)
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	3b01      	subs	r3, #1
 800dd5e:	4a09      	ldr	r2, [pc, #36]	; (800dd84 <vPortExitCritical+0x50>)
 800dd60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800dd62:	4b08      	ldr	r3, [pc, #32]	; (800dd84 <vPortExitCritical+0x50>)
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d105      	bne.n	800dd76 <vPortExitCritical+0x42>
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dd6e:	683b      	ldr	r3, [r7, #0]
 800dd70:	f383 8811 	msr	BASEPRI, r3
}
 800dd74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800dd76:	bf00      	nop
 800dd78:	370c      	adds	r7, #12
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd80:	4770      	bx	lr
 800dd82:	bf00      	nop
 800dd84:	2000002c 	.word	0x2000002c
	...

0800dd90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dd90:	f3ef 8009 	mrs	r0, PSP
 800dd94:	f3bf 8f6f 	isb	sy
 800dd98:	4b15      	ldr	r3, [pc, #84]	; (800ddf0 <pxCurrentTCBConst>)
 800dd9a:	681a      	ldr	r2, [r3, #0]
 800dd9c:	f01e 0f10 	tst.w	lr, #16
 800dda0:	bf08      	it	eq
 800dda2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dda6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddaa:	6010      	str	r0, [r2, #0]
 800ddac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ddb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ddb4:	f380 8811 	msr	BASEPRI, r0
 800ddb8:	f3bf 8f4f 	dsb	sy
 800ddbc:	f3bf 8f6f 	isb	sy
 800ddc0:	f7fe ff16 	bl	800cbf0 <vTaskSwitchContext>
 800ddc4:	f04f 0000 	mov.w	r0, #0
 800ddc8:	f380 8811 	msr	BASEPRI, r0
 800ddcc:	bc09      	pop	{r0, r3}
 800ddce:	6819      	ldr	r1, [r3, #0]
 800ddd0:	6808      	ldr	r0, [r1, #0]
 800ddd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddd6:	f01e 0f10 	tst.w	lr, #16
 800ddda:	bf08      	it	eq
 800dddc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dde0:	f380 8809 	msr	PSP, r0
 800dde4:	f3bf 8f6f 	isb	sy
 800dde8:	4770      	bx	lr
 800ddea:	bf00      	nop
 800ddec:	f3af 8000 	nop.w

0800ddf0 <pxCurrentTCBConst>:
 800ddf0:	20000820 	.word	0x20000820
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ddf4:	bf00      	nop
 800ddf6:	bf00      	nop

0800ddf8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b082      	sub	sp, #8
 800ddfc:	af00      	add	r7, sp, #0
	__asm volatile
 800ddfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de02:	f383 8811 	msr	BASEPRI, r3
 800de06:	f3bf 8f6f 	isb	sy
 800de0a:	f3bf 8f4f 	dsb	sy
 800de0e:	607b      	str	r3, [r7, #4]
}
 800de10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800de12:	f7fe fe35 	bl	800ca80 <xTaskIncrementTick>
 800de16:	4603      	mov	r3, r0
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d003      	beq.n	800de24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800de1c:	4b06      	ldr	r3, [pc, #24]	; (800de38 <SysTick_Handler+0x40>)
 800de1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de22:	601a      	str	r2, [r3, #0]
 800de24:	2300      	movs	r3, #0
 800de26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800de28:	683b      	ldr	r3, [r7, #0]
 800de2a:	f383 8811 	msr	BASEPRI, r3
}
 800de2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800de30:	bf00      	nop
 800de32:	3708      	adds	r7, #8
 800de34:	46bd      	mov	sp, r7
 800de36:	bd80      	pop	{r7, pc}
 800de38:	e000ed04 	.word	0xe000ed04

0800de3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800de3c:	b480      	push	{r7}
 800de3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800de40:	4b0b      	ldr	r3, [pc, #44]	; (800de70 <vPortSetupTimerInterrupt+0x34>)
 800de42:	2200      	movs	r2, #0
 800de44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800de46:	4b0b      	ldr	r3, [pc, #44]	; (800de74 <vPortSetupTimerInterrupt+0x38>)
 800de48:	2200      	movs	r2, #0
 800de4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800de4c:	4b0a      	ldr	r3, [pc, #40]	; (800de78 <vPortSetupTimerInterrupt+0x3c>)
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	4a0a      	ldr	r2, [pc, #40]	; (800de7c <vPortSetupTimerInterrupt+0x40>)
 800de52:	fba2 2303 	umull	r2, r3, r2, r3
 800de56:	099b      	lsrs	r3, r3, #6
 800de58:	4a09      	ldr	r2, [pc, #36]	; (800de80 <vPortSetupTimerInterrupt+0x44>)
 800de5a:	3b01      	subs	r3, #1
 800de5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800de5e:	4b04      	ldr	r3, [pc, #16]	; (800de70 <vPortSetupTimerInterrupt+0x34>)
 800de60:	2207      	movs	r2, #7
 800de62:	601a      	str	r2, [r3, #0]
}
 800de64:	bf00      	nop
 800de66:	46bd      	mov	sp, r7
 800de68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6c:	4770      	bx	lr
 800de6e:	bf00      	nop
 800de70:	e000e010 	.word	0xe000e010
 800de74:	e000e018 	.word	0xe000e018
 800de78:	20000000 	.word	0x20000000
 800de7c:	10624dd3 	.word	0x10624dd3
 800de80:	e000e014 	.word	0xe000e014

0800de84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800de84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800de94 <vPortEnableVFP+0x10>
 800de88:	6801      	ldr	r1, [r0, #0]
 800de8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800de8e:	6001      	str	r1, [r0, #0]
 800de90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800de92:	bf00      	nop
 800de94:	e000ed88 	.word	0xe000ed88

0800de98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800de98:	b480      	push	{r7}
 800de9a:	b085      	sub	sp, #20
 800de9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800de9e:	f3ef 8305 	mrs	r3, IPSR
 800dea2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	2b0f      	cmp	r3, #15
 800dea8:	d914      	bls.n	800ded4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800deaa:	4a17      	ldr	r2, [pc, #92]	; (800df08 <vPortValidateInterruptPriority+0x70>)
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	4413      	add	r3, r2
 800deb0:	781b      	ldrb	r3, [r3, #0]
 800deb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800deb4:	4b15      	ldr	r3, [pc, #84]	; (800df0c <vPortValidateInterruptPriority+0x74>)
 800deb6:	781b      	ldrb	r3, [r3, #0]
 800deb8:	7afa      	ldrb	r2, [r7, #11]
 800deba:	429a      	cmp	r2, r3
 800debc:	d20a      	bcs.n	800ded4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800debe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dec2:	f383 8811 	msr	BASEPRI, r3
 800dec6:	f3bf 8f6f 	isb	sy
 800deca:	f3bf 8f4f 	dsb	sy
 800dece:	607b      	str	r3, [r7, #4]
}
 800ded0:	bf00      	nop
 800ded2:	e7fe      	b.n	800ded2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ded4:	4b0e      	ldr	r3, [pc, #56]	; (800df10 <vPortValidateInterruptPriority+0x78>)
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800dedc:	4b0d      	ldr	r3, [pc, #52]	; (800df14 <vPortValidateInterruptPriority+0x7c>)
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	429a      	cmp	r2, r3
 800dee2:	d90a      	bls.n	800defa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800dee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dee8:	f383 8811 	msr	BASEPRI, r3
 800deec:	f3bf 8f6f 	isb	sy
 800def0:	f3bf 8f4f 	dsb	sy
 800def4:	603b      	str	r3, [r7, #0]
}
 800def6:	bf00      	nop
 800def8:	e7fe      	b.n	800def8 <vPortValidateInterruptPriority+0x60>
	}
 800defa:	bf00      	nop
 800defc:	3714      	adds	r7, #20
 800defe:	46bd      	mov	sp, r7
 800df00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df04:	4770      	bx	lr
 800df06:	bf00      	nop
 800df08:	e000e3f0 	.word	0xe000e3f0
 800df0c:	20000a48 	.word	0x20000a48
 800df10:	e000ed0c 	.word	0xe000ed0c
 800df14:	20000a4c 	.word	0x20000a4c

0800df18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b08a      	sub	sp, #40	; 0x28
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800df20:	2300      	movs	r3, #0
 800df22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800df24:	f7fe fcf2 	bl	800c90c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800df28:	4b5b      	ldr	r3, [pc, #364]	; (800e098 <pvPortMalloc+0x180>)
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d101      	bne.n	800df34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800df30:	f000 f920 	bl	800e174 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800df34:	4b59      	ldr	r3, [pc, #356]	; (800e09c <pvPortMalloc+0x184>)
 800df36:	681a      	ldr	r2, [r3, #0]
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	4013      	ands	r3, r2
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	f040 8093 	bne.w	800e068 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d01d      	beq.n	800df84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800df48:	2208      	movs	r2, #8
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	4413      	add	r3, r2
 800df4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	f003 0307 	and.w	r3, r3, #7
 800df56:	2b00      	cmp	r3, #0
 800df58:	d014      	beq.n	800df84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	f023 0307 	bic.w	r3, r3, #7
 800df60:	3308      	adds	r3, #8
 800df62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	f003 0307 	and.w	r3, r3, #7
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d00a      	beq.n	800df84 <pvPortMalloc+0x6c>
	__asm volatile
 800df6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df72:	f383 8811 	msr	BASEPRI, r3
 800df76:	f3bf 8f6f 	isb	sy
 800df7a:	f3bf 8f4f 	dsb	sy
 800df7e:	617b      	str	r3, [r7, #20]
}
 800df80:	bf00      	nop
 800df82:	e7fe      	b.n	800df82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d06e      	beq.n	800e068 <pvPortMalloc+0x150>
 800df8a:	4b45      	ldr	r3, [pc, #276]	; (800e0a0 <pvPortMalloc+0x188>)
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	687a      	ldr	r2, [r7, #4]
 800df90:	429a      	cmp	r2, r3
 800df92:	d869      	bhi.n	800e068 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800df94:	4b43      	ldr	r3, [pc, #268]	; (800e0a4 <pvPortMalloc+0x18c>)
 800df96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800df98:	4b42      	ldr	r3, [pc, #264]	; (800e0a4 <pvPortMalloc+0x18c>)
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800df9e:	e004      	b.n	800dfaa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800dfa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfa2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800dfa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dfaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfac:	685b      	ldr	r3, [r3, #4]
 800dfae:	687a      	ldr	r2, [r7, #4]
 800dfb0:	429a      	cmp	r2, r3
 800dfb2:	d903      	bls.n	800dfbc <pvPortMalloc+0xa4>
 800dfb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d1f1      	bne.n	800dfa0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800dfbc:	4b36      	ldr	r3, [pc, #216]	; (800e098 <pvPortMalloc+0x180>)
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dfc2:	429a      	cmp	r2, r3
 800dfc4:	d050      	beq.n	800e068 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800dfc6:	6a3b      	ldr	r3, [r7, #32]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	2208      	movs	r2, #8
 800dfcc:	4413      	add	r3, r2
 800dfce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dfd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfd2:	681a      	ldr	r2, [r3, #0]
 800dfd4:	6a3b      	ldr	r3, [r7, #32]
 800dfd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800dfd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfda:	685a      	ldr	r2, [r3, #4]
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	1ad2      	subs	r2, r2, r3
 800dfe0:	2308      	movs	r3, #8
 800dfe2:	005b      	lsls	r3, r3, #1
 800dfe4:	429a      	cmp	r2, r3
 800dfe6:	d91f      	bls.n	800e028 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800dfe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	4413      	add	r3, r2
 800dfee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dff0:	69bb      	ldr	r3, [r7, #24]
 800dff2:	f003 0307 	and.w	r3, r3, #7
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d00a      	beq.n	800e010 <pvPortMalloc+0xf8>
	__asm volatile
 800dffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dffe:	f383 8811 	msr	BASEPRI, r3
 800e002:	f3bf 8f6f 	isb	sy
 800e006:	f3bf 8f4f 	dsb	sy
 800e00a:	613b      	str	r3, [r7, #16]
}
 800e00c:	bf00      	nop
 800e00e:	e7fe      	b.n	800e00e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e012:	685a      	ldr	r2, [r3, #4]
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	1ad2      	subs	r2, r2, r3
 800e018:	69bb      	ldr	r3, [r7, #24]
 800e01a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e01e:	687a      	ldr	r2, [r7, #4]
 800e020:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e022:	69b8      	ldr	r0, [r7, #24]
 800e024:	f000 f908 	bl	800e238 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e028:	4b1d      	ldr	r3, [pc, #116]	; (800e0a0 <pvPortMalloc+0x188>)
 800e02a:	681a      	ldr	r2, [r3, #0]
 800e02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e02e:	685b      	ldr	r3, [r3, #4]
 800e030:	1ad3      	subs	r3, r2, r3
 800e032:	4a1b      	ldr	r2, [pc, #108]	; (800e0a0 <pvPortMalloc+0x188>)
 800e034:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e036:	4b1a      	ldr	r3, [pc, #104]	; (800e0a0 <pvPortMalloc+0x188>)
 800e038:	681a      	ldr	r2, [r3, #0]
 800e03a:	4b1b      	ldr	r3, [pc, #108]	; (800e0a8 <pvPortMalloc+0x190>)
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	429a      	cmp	r2, r3
 800e040:	d203      	bcs.n	800e04a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e042:	4b17      	ldr	r3, [pc, #92]	; (800e0a0 <pvPortMalloc+0x188>)
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	4a18      	ldr	r2, [pc, #96]	; (800e0a8 <pvPortMalloc+0x190>)
 800e048:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e04c:	685a      	ldr	r2, [r3, #4]
 800e04e:	4b13      	ldr	r3, [pc, #76]	; (800e09c <pvPortMalloc+0x184>)
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	431a      	orrs	r2, r3
 800e054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e056:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e05a:	2200      	movs	r2, #0
 800e05c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e05e:	4b13      	ldr	r3, [pc, #76]	; (800e0ac <pvPortMalloc+0x194>)
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	3301      	adds	r3, #1
 800e064:	4a11      	ldr	r2, [pc, #68]	; (800e0ac <pvPortMalloc+0x194>)
 800e066:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e068:	f7fe fc5e 	bl	800c928 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e06c:	69fb      	ldr	r3, [r7, #28]
 800e06e:	f003 0307 	and.w	r3, r3, #7
 800e072:	2b00      	cmp	r3, #0
 800e074:	d00a      	beq.n	800e08c <pvPortMalloc+0x174>
	__asm volatile
 800e076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e07a:	f383 8811 	msr	BASEPRI, r3
 800e07e:	f3bf 8f6f 	isb	sy
 800e082:	f3bf 8f4f 	dsb	sy
 800e086:	60fb      	str	r3, [r7, #12]
}
 800e088:	bf00      	nop
 800e08a:	e7fe      	b.n	800e08a <pvPortMalloc+0x172>
	return pvReturn;
 800e08c:	69fb      	ldr	r3, [r7, #28]
}
 800e08e:	4618      	mov	r0, r3
 800e090:	3728      	adds	r7, #40	; 0x28
 800e092:	46bd      	mov	sp, r7
 800e094:	bd80      	pop	{r7, pc}
 800e096:	bf00      	nop
 800e098:	20004658 	.word	0x20004658
 800e09c:	2000466c 	.word	0x2000466c
 800e0a0:	2000465c 	.word	0x2000465c
 800e0a4:	20004650 	.word	0x20004650
 800e0a8:	20004660 	.word	0x20004660
 800e0ac:	20004664 	.word	0x20004664

0800e0b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b086      	sub	sp, #24
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d04d      	beq.n	800e15e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e0c2:	2308      	movs	r3, #8
 800e0c4:	425b      	negs	r3, r3
 800e0c6:	697a      	ldr	r2, [r7, #20]
 800e0c8:	4413      	add	r3, r2
 800e0ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e0cc:	697b      	ldr	r3, [r7, #20]
 800e0ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e0d0:	693b      	ldr	r3, [r7, #16]
 800e0d2:	685a      	ldr	r2, [r3, #4]
 800e0d4:	4b24      	ldr	r3, [pc, #144]	; (800e168 <vPortFree+0xb8>)
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	4013      	ands	r3, r2
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d10a      	bne.n	800e0f4 <vPortFree+0x44>
	__asm volatile
 800e0de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0e2:	f383 8811 	msr	BASEPRI, r3
 800e0e6:	f3bf 8f6f 	isb	sy
 800e0ea:	f3bf 8f4f 	dsb	sy
 800e0ee:	60fb      	str	r3, [r7, #12]
}
 800e0f0:	bf00      	nop
 800e0f2:	e7fe      	b.n	800e0f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e0f4:	693b      	ldr	r3, [r7, #16]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d00a      	beq.n	800e112 <vPortFree+0x62>
	__asm volatile
 800e0fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e100:	f383 8811 	msr	BASEPRI, r3
 800e104:	f3bf 8f6f 	isb	sy
 800e108:	f3bf 8f4f 	dsb	sy
 800e10c:	60bb      	str	r3, [r7, #8]
}
 800e10e:	bf00      	nop
 800e110:	e7fe      	b.n	800e110 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e112:	693b      	ldr	r3, [r7, #16]
 800e114:	685a      	ldr	r2, [r3, #4]
 800e116:	4b14      	ldr	r3, [pc, #80]	; (800e168 <vPortFree+0xb8>)
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	4013      	ands	r3, r2
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d01e      	beq.n	800e15e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e120:	693b      	ldr	r3, [r7, #16]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d11a      	bne.n	800e15e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e128:	693b      	ldr	r3, [r7, #16]
 800e12a:	685a      	ldr	r2, [r3, #4]
 800e12c:	4b0e      	ldr	r3, [pc, #56]	; (800e168 <vPortFree+0xb8>)
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	43db      	mvns	r3, r3
 800e132:	401a      	ands	r2, r3
 800e134:	693b      	ldr	r3, [r7, #16]
 800e136:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e138:	f7fe fbe8 	bl	800c90c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e13c:	693b      	ldr	r3, [r7, #16]
 800e13e:	685a      	ldr	r2, [r3, #4]
 800e140:	4b0a      	ldr	r3, [pc, #40]	; (800e16c <vPortFree+0xbc>)
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	4413      	add	r3, r2
 800e146:	4a09      	ldr	r2, [pc, #36]	; (800e16c <vPortFree+0xbc>)
 800e148:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e14a:	6938      	ldr	r0, [r7, #16]
 800e14c:	f000 f874 	bl	800e238 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e150:	4b07      	ldr	r3, [pc, #28]	; (800e170 <vPortFree+0xc0>)
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	3301      	adds	r3, #1
 800e156:	4a06      	ldr	r2, [pc, #24]	; (800e170 <vPortFree+0xc0>)
 800e158:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e15a:	f7fe fbe5 	bl	800c928 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e15e:	bf00      	nop
 800e160:	3718      	adds	r7, #24
 800e162:	46bd      	mov	sp, r7
 800e164:	bd80      	pop	{r7, pc}
 800e166:	bf00      	nop
 800e168:	2000466c 	.word	0x2000466c
 800e16c:	2000465c 	.word	0x2000465c
 800e170:	20004668 	.word	0x20004668

0800e174 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e174:	b480      	push	{r7}
 800e176:	b085      	sub	sp, #20
 800e178:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e17a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e17e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e180:	4b27      	ldr	r3, [pc, #156]	; (800e220 <prvHeapInit+0xac>)
 800e182:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	f003 0307 	and.w	r3, r3, #7
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d00c      	beq.n	800e1a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	3307      	adds	r3, #7
 800e192:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	f023 0307 	bic.w	r3, r3, #7
 800e19a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e19c:	68ba      	ldr	r2, [r7, #8]
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	1ad3      	subs	r3, r2, r3
 800e1a2:	4a1f      	ldr	r2, [pc, #124]	; (800e220 <prvHeapInit+0xac>)
 800e1a4:	4413      	add	r3, r2
 800e1a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e1ac:	4a1d      	ldr	r2, [pc, #116]	; (800e224 <prvHeapInit+0xb0>)
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e1b2:	4b1c      	ldr	r3, [pc, #112]	; (800e224 <prvHeapInit+0xb0>)
 800e1b4:	2200      	movs	r2, #0
 800e1b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	68ba      	ldr	r2, [r7, #8]
 800e1bc:	4413      	add	r3, r2
 800e1be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e1c0:	2208      	movs	r2, #8
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	1a9b      	subs	r3, r3, r2
 800e1c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	f023 0307 	bic.w	r3, r3, #7
 800e1ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	4a15      	ldr	r2, [pc, #84]	; (800e228 <prvHeapInit+0xb4>)
 800e1d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e1d6:	4b14      	ldr	r3, [pc, #80]	; (800e228 <prvHeapInit+0xb4>)
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	2200      	movs	r2, #0
 800e1dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e1de:	4b12      	ldr	r3, [pc, #72]	; (800e228 <prvHeapInit+0xb4>)
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e1ea:	683b      	ldr	r3, [r7, #0]
 800e1ec:	68fa      	ldr	r2, [r7, #12]
 800e1ee:	1ad2      	subs	r2, r2, r3
 800e1f0:	683b      	ldr	r3, [r7, #0]
 800e1f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e1f4:	4b0c      	ldr	r3, [pc, #48]	; (800e228 <prvHeapInit+0xb4>)
 800e1f6:	681a      	ldr	r2, [r3, #0]
 800e1f8:	683b      	ldr	r3, [r7, #0]
 800e1fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e1fc:	683b      	ldr	r3, [r7, #0]
 800e1fe:	685b      	ldr	r3, [r3, #4]
 800e200:	4a0a      	ldr	r2, [pc, #40]	; (800e22c <prvHeapInit+0xb8>)
 800e202:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e204:	683b      	ldr	r3, [r7, #0]
 800e206:	685b      	ldr	r3, [r3, #4]
 800e208:	4a09      	ldr	r2, [pc, #36]	; (800e230 <prvHeapInit+0xbc>)
 800e20a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e20c:	4b09      	ldr	r3, [pc, #36]	; (800e234 <prvHeapInit+0xc0>)
 800e20e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e212:	601a      	str	r2, [r3, #0]
}
 800e214:	bf00      	nop
 800e216:	3714      	adds	r7, #20
 800e218:	46bd      	mov	sp, r7
 800e21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21e:	4770      	bx	lr
 800e220:	20000a50 	.word	0x20000a50
 800e224:	20004650 	.word	0x20004650
 800e228:	20004658 	.word	0x20004658
 800e22c:	20004660 	.word	0x20004660
 800e230:	2000465c 	.word	0x2000465c
 800e234:	2000466c 	.word	0x2000466c

0800e238 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e238:	b480      	push	{r7}
 800e23a:	b085      	sub	sp, #20
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e240:	4b28      	ldr	r3, [pc, #160]	; (800e2e4 <prvInsertBlockIntoFreeList+0xac>)
 800e242:	60fb      	str	r3, [r7, #12]
 800e244:	e002      	b.n	800e24c <prvInsertBlockIntoFreeList+0x14>
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	60fb      	str	r3, [r7, #12]
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	687a      	ldr	r2, [r7, #4]
 800e252:	429a      	cmp	r2, r3
 800e254:	d8f7      	bhi.n	800e246 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	685b      	ldr	r3, [r3, #4]
 800e25e:	68ba      	ldr	r2, [r7, #8]
 800e260:	4413      	add	r3, r2
 800e262:	687a      	ldr	r2, [r7, #4]
 800e264:	429a      	cmp	r2, r3
 800e266:	d108      	bne.n	800e27a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	685a      	ldr	r2, [r3, #4]
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	685b      	ldr	r3, [r3, #4]
 800e270:	441a      	add	r2, r3
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	685b      	ldr	r3, [r3, #4]
 800e282:	68ba      	ldr	r2, [r7, #8]
 800e284:	441a      	add	r2, r3
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	429a      	cmp	r2, r3
 800e28c:	d118      	bne.n	800e2c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	681a      	ldr	r2, [r3, #0]
 800e292:	4b15      	ldr	r3, [pc, #84]	; (800e2e8 <prvInsertBlockIntoFreeList+0xb0>)
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	429a      	cmp	r2, r3
 800e298:	d00d      	beq.n	800e2b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	685a      	ldr	r2, [r3, #4]
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	685b      	ldr	r3, [r3, #4]
 800e2a4:	441a      	add	r2, r3
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	681a      	ldr	r2, [r3, #0]
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	601a      	str	r2, [r3, #0]
 800e2b4:	e008      	b.n	800e2c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e2b6:	4b0c      	ldr	r3, [pc, #48]	; (800e2e8 <prvInsertBlockIntoFreeList+0xb0>)
 800e2b8:	681a      	ldr	r2, [r3, #0]
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	601a      	str	r2, [r3, #0]
 800e2be:	e003      	b.n	800e2c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	681a      	ldr	r2, [r3, #0]
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e2c8:	68fa      	ldr	r2, [r7, #12]
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	429a      	cmp	r2, r3
 800e2ce:	d002      	beq.n	800e2d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	687a      	ldr	r2, [r7, #4]
 800e2d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e2d6:	bf00      	nop
 800e2d8:	3714      	adds	r7, #20
 800e2da:	46bd      	mov	sp, r7
 800e2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e0:	4770      	bx	lr
 800e2e2:	bf00      	nop
 800e2e4:	20004650 	.word	0x20004650
 800e2e8:	20004658 	.word	0x20004658

0800e2ec <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800e2f0:	2201      	movs	r2, #1
 800e2f2:	490e      	ldr	r1, [pc, #56]	; (800e32c <MX_USB_HOST_Init+0x40>)
 800e2f4:	480e      	ldr	r0, [pc, #56]	; (800e330 <MX_USB_HOST_Init+0x44>)
 800e2f6:	f7fb fb37 	bl	8009968 <USBH_Init>
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d001      	beq.n	800e304 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800e300:	f7f3 facc 	bl	800189c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800e304:	490b      	ldr	r1, [pc, #44]	; (800e334 <MX_USB_HOST_Init+0x48>)
 800e306:	480a      	ldr	r0, [pc, #40]	; (800e330 <MX_USB_HOST_Init+0x44>)
 800e308:	f7fb fbe4 	bl	8009ad4 <USBH_RegisterClass>
 800e30c:	4603      	mov	r3, r0
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d001      	beq.n	800e316 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800e312:	f7f3 fac3 	bl	800189c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800e316:	4806      	ldr	r0, [pc, #24]	; (800e330 <MX_USB_HOST_Init+0x44>)
 800e318:	f7fb fc68 	bl	8009bec <USBH_Start>
 800e31c:	4603      	mov	r3, r0
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d001      	beq.n	800e326 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800e322:	f7f3 fabb 	bl	800189c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800e326:	bf00      	nop
 800e328:	bd80      	pop	{r7, pc}
 800e32a:	bf00      	nop
 800e32c:	0800e339 	.word	0x0800e339
 800e330:	20004b18 	.word	0x20004b18
 800e334:	2000000c 	.word	0x2000000c

0800e338 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800e338:	b480      	push	{r7}
 800e33a:	b083      	sub	sp, #12
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
 800e340:	460b      	mov	r3, r1
 800e342:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800e344:	78fb      	ldrb	r3, [r7, #3]
 800e346:	3b01      	subs	r3, #1
 800e348:	2b04      	cmp	r3, #4
 800e34a:	d819      	bhi.n	800e380 <USBH_UserProcess+0x48>
 800e34c:	a201      	add	r2, pc, #4	; (adr r2, 800e354 <USBH_UserProcess+0x1c>)
 800e34e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e352:	bf00      	nop
 800e354:	0800e381 	.word	0x0800e381
 800e358:	0800e371 	.word	0x0800e371
 800e35c:	0800e381 	.word	0x0800e381
 800e360:	0800e379 	.word	0x0800e379
 800e364:	0800e369 	.word	0x0800e369
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800e368:	4b09      	ldr	r3, [pc, #36]	; (800e390 <USBH_UserProcess+0x58>)
 800e36a:	2203      	movs	r2, #3
 800e36c:	701a      	strb	r2, [r3, #0]
  break;
 800e36e:	e008      	b.n	800e382 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800e370:	4b07      	ldr	r3, [pc, #28]	; (800e390 <USBH_UserProcess+0x58>)
 800e372:	2202      	movs	r2, #2
 800e374:	701a      	strb	r2, [r3, #0]
  break;
 800e376:	e004      	b.n	800e382 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800e378:	4b05      	ldr	r3, [pc, #20]	; (800e390 <USBH_UserProcess+0x58>)
 800e37a:	2201      	movs	r2, #1
 800e37c:	701a      	strb	r2, [r3, #0]
  break;
 800e37e:	e000      	b.n	800e382 <USBH_UserProcess+0x4a>

  default:
  break;
 800e380:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800e382:	bf00      	nop
 800e384:	370c      	adds	r7, #12
 800e386:	46bd      	mov	sp, r7
 800e388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38c:	4770      	bx	lr
 800e38e:	bf00      	nop
 800e390:	20004670 	.word	0x20004670

0800e394 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800e394:	b580      	push	{r7, lr}
 800e396:	b08a      	sub	sp, #40	; 0x28
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e39c:	f107 0314 	add.w	r3, r7, #20
 800e3a0:	2200      	movs	r2, #0
 800e3a2:	601a      	str	r2, [r3, #0]
 800e3a4:	605a      	str	r2, [r3, #4]
 800e3a6:	609a      	str	r2, [r3, #8]
 800e3a8:	60da      	str	r2, [r3, #12]
 800e3aa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e3b4:	d147      	bne.n	800e446 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	613b      	str	r3, [r7, #16]
 800e3ba:	4b25      	ldr	r3, [pc, #148]	; (800e450 <HAL_HCD_MspInit+0xbc>)
 800e3bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3be:	4a24      	ldr	r2, [pc, #144]	; (800e450 <HAL_HCD_MspInit+0xbc>)
 800e3c0:	f043 0301 	orr.w	r3, r3, #1
 800e3c4:	6313      	str	r3, [r2, #48]	; 0x30
 800e3c6:	4b22      	ldr	r3, [pc, #136]	; (800e450 <HAL_HCD_MspInit+0xbc>)
 800e3c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3ca:	f003 0301 	and.w	r3, r3, #1
 800e3ce:	613b      	str	r3, [r7, #16]
 800e3d0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800e3d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e3d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e3d8:	2300      	movs	r3, #0
 800e3da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e3dc:	2300      	movs	r3, #0
 800e3de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800e3e0:	f107 0314 	add.w	r3, r7, #20
 800e3e4:	4619      	mov	r1, r3
 800e3e6:	481b      	ldr	r0, [pc, #108]	; (800e454 <HAL_HCD_MspInit+0xc0>)
 800e3e8:	f7f5 fd4c 	bl	8003e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800e3ec:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800e3f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e3f2:	2302      	movs	r3, #2
 800e3f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e3fe:	230a      	movs	r3, #10
 800e400:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e402:	f107 0314 	add.w	r3, r7, #20
 800e406:	4619      	mov	r1, r3
 800e408:	4812      	ldr	r0, [pc, #72]	; (800e454 <HAL_HCD_MspInit+0xc0>)
 800e40a:	f7f5 fd3b 	bl	8003e84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e40e:	4b10      	ldr	r3, [pc, #64]	; (800e450 <HAL_HCD_MspInit+0xbc>)
 800e410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e412:	4a0f      	ldr	r2, [pc, #60]	; (800e450 <HAL_HCD_MspInit+0xbc>)
 800e414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e418:	6353      	str	r3, [r2, #52]	; 0x34
 800e41a:	2300      	movs	r3, #0
 800e41c:	60fb      	str	r3, [r7, #12]
 800e41e:	4b0c      	ldr	r3, [pc, #48]	; (800e450 <HAL_HCD_MspInit+0xbc>)
 800e420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e422:	4a0b      	ldr	r2, [pc, #44]	; (800e450 <HAL_HCD_MspInit+0xbc>)
 800e424:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e428:	6453      	str	r3, [r2, #68]	; 0x44
 800e42a:	4b09      	ldr	r3, [pc, #36]	; (800e450 <HAL_HCD_MspInit+0xbc>)
 800e42c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e42e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e432:	60fb      	str	r3, [r7, #12]
 800e434:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800e436:	2200      	movs	r2, #0
 800e438:	2105      	movs	r1, #5
 800e43a:	2043      	movs	r0, #67	; 0x43
 800e43c:	f7f5 f988 	bl	8003750 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e440:	2043      	movs	r0, #67	; 0x43
 800e442:	f7f5 f9a1 	bl	8003788 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e446:	bf00      	nop
 800e448:	3728      	adds	r7, #40	; 0x28
 800e44a:	46bd      	mov	sp, r7
 800e44c:	bd80      	pop	{r7, pc}
 800e44e:	bf00      	nop
 800e450:	40023800 	.word	0x40023800
 800e454:	40020000 	.word	0x40020000

0800e458 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b082      	sub	sp, #8
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e466:	4618      	mov	r0, r3
 800e468:	f7fc f86d 	bl	800a546 <USBH_LL_IncTimer>
}
 800e46c:	bf00      	nop
 800e46e:	3708      	adds	r7, #8
 800e470:	46bd      	mov	sp, r7
 800e472:	bd80      	pop	{r7, pc}

0800e474 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e474:	b580      	push	{r7, lr}
 800e476:	b082      	sub	sp, #8
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e482:	4618      	mov	r0, r3
 800e484:	f7fc f8b1 	bl	800a5ea <USBH_LL_Connect>
}
 800e488:	bf00      	nop
 800e48a:	3708      	adds	r7, #8
 800e48c:	46bd      	mov	sp, r7
 800e48e:	bd80      	pop	{r7, pc}

0800e490 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e490:	b580      	push	{r7, lr}
 800e492:	b082      	sub	sp, #8
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e49e:	4618      	mov	r0, r3
 800e4a0:	f7fc f8c6 	bl	800a630 <USBH_LL_Disconnect>
}
 800e4a4:	bf00      	nop
 800e4a6:	3708      	adds	r7, #8
 800e4a8:	46bd      	mov	sp, r7
 800e4aa:	bd80      	pop	{r7, pc}

0800e4ac <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800e4ac:	b580      	push	{r7, lr}
 800e4ae:	b082      	sub	sp, #8
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	6078      	str	r0, [r7, #4]
 800e4b4:	460b      	mov	r3, r1
 800e4b6:	70fb      	strb	r3, [r7, #3]
 800e4b8:	4613      	mov	r3, r2
 800e4ba:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	f7fc f8fb 	bl	800a6be <USBH_LL_NotifyURBChange>
#endif
}
 800e4c8:	bf00      	nop
 800e4ca:	3708      	adds	r7, #8
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	bd80      	pop	{r7, pc}

0800e4d0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b082      	sub	sp, #8
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e4de:	4618      	mov	r0, r3
 800e4e0:	f7fc f85b 	bl	800a59a <USBH_LL_PortEnabled>
}
 800e4e4:	bf00      	nop
 800e4e6:	3708      	adds	r7, #8
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	bd80      	pop	{r7, pc}

0800e4ec <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b082      	sub	sp, #8
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	f7fc f867 	bl	800a5ce <USBH_LL_PortDisabled>
}
 800e500:	bf00      	nop
 800e502:	3708      	adds	r7, #8
 800e504:	46bd      	mov	sp, r7
 800e506:	bd80      	pop	{r7, pc}

0800e508 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800e508:	b580      	push	{r7, lr}
 800e50a:	b082      	sub	sp, #8
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e516:	2b01      	cmp	r3, #1
 800e518:	d12a      	bne.n	800e570 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800e51a:	4a18      	ldr	r2, [pc, #96]	; (800e57c <USBH_LL_Init+0x74>)
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	4a15      	ldr	r2, [pc, #84]	; (800e57c <USBH_LL_Init+0x74>)
 800e526:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e52a:	4b14      	ldr	r3, [pc, #80]	; (800e57c <USBH_LL_Init+0x74>)
 800e52c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e530:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800e532:	4b12      	ldr	r3, [pc, #72]	; (800e57c <USBH_LL_Init+0x74>)
 800e534:	2208      	movs	r2, #8
 800e536:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800e538:	4b10      	ldr	r3, [pc, #64]	; (800e57c <USBH_LL_Init+0x74>)
 800e53a:	2201      	movs	r2, #1
 800e53c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e53e:	4b0f      	ldr	r3, [pc, #60]	; (800e57c <USBH_LL_Init+0x74>)
 800e540:	2200      	movs	r2, #0
 800e542:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800e544:	4b0d      	ldr	r3, [pc, #52]	; (800e57c <USBH_LL_Init+0x74>)
 800e546:	2202      	movs	r2, #2
 800e548:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e54a:	4b0c      	ldr	r3, [pc, #48]	; (800e57c <USBH_LL_Init+0x74>)
 800e54c:	2200      	movs	r2, #0
 800e54e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800e550:	480a      	ldr	r0, [pc, #40]	; (800e57c <USBH_LL_Init+0x74>)
 800e552:	f7f5 fe7e 	bl	8004252 <HAL_HCD_Init>
 800e556:	4603      	mov	r3, r0
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d001      	beq.n	800e560 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800e55c:	f7f3 f99e 	bl	800189c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800e560:	4806      	ldr	r0, [pc, #24]	; (800e57c <USBH_LL_Init+0x74>)
 800e562:	f7f6 fa62 	bl	8004a2a <HAL_HCD_GetCurrentFrame>
 800e566:	4603      	mov	r3, r0
 800e568:	4619      	mov	r1, r3
 800e56a:	6878      	ldr	r0, [r7, #4]
 800e56c:	f7fb ffdc 	bl	800a528 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800e570:	2300      	movs	r3, #0
}
 800e572:	4618      	mov	r0, r3
 800e574:	3708      	adds	r7, #8
 800e576:	46bd      	mov	sp, r7
 800e578:	bd80      	pop	{r7, pc}
 800e57a:	bf00      	nop
 800e57c:	20004efc 	.word	0x20004efc

0800e580 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800e580:	b580      	push	{r7, lr}
 800e582:	b084      	sub	sp, #16
 800e584:	af00      	add	r7, sp, #0
 800e586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e588:	2300      	movs	r3, #0
 800e58a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e58c:	2300      	movs	r3, #0
 800e58e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e596:	4618      	mov	r0, r3
 800e598:	f7f6 f9d1 	bl	800493e <HAL_HCD_Start>
 800e59c:	4603      	mov	r3, r0
 800e59e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e5a0:	7bfb      	ldrb	r3, [r7, #15]
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	f000 f95c 	bl	800e860 <USBH_Get_USB_Status>
 800e5a8:	4603      	mov	r3, r0
 800e5aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e5ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	3710      	adds	r7, #16
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	bd80      	pop	{r7, pc}

0800e5b6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800e5b6:	b580      	push	{r7, lr}
 800e5b8:	b084      	sub	sp, #16
 800e5ba:	af00      	add	r7, sp, #0
 800e5bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e5be:	2300      	movs	r3, #0
 800e5c0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	f7f6 f9d9 	bl	8004984 <HAL_HCD_Stop>
 800e5d2:	4603      	mov	r3, r0
 800e5d4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e5d6:	7bfb      	ldrb	r3, [r7, #15]
 800e5d8:	4618      	mov	r0, r3
 800e5da:	f000 f941 	bl	800e860 <USBH_Get_USB_Status>
 800e5de:	4603      	mov	r3, r0
 800e5e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e5e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	3710      	adds	r7, #16
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	bd80      	pop	{r7, pc}

0800e5ec <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b084      	sub	sp, #16
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800e5f4:	2301      	movs	r3, #1
 800e5f6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e5fe:	4618      	mov	r0, r3
 800e600:	f7f6 fa21 	bl	8004a46 <HAL_HCD_GetCurrentSpeed>
 800e604:	4603      	mov	r3, r0
 800e606:	2b02      	cmp	r3, #2
 800e608:	d00c      	beq.n	800e624 <USBH_LL_GetSpeed+0x38>
 800e60a:	2b02      	cmp	r3, #2
 800e60c:	d80d      	bhi.n	800e62a <USBH_LL_GetSpeed+0x3e>
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d002      	beq.n	800e618 <USBH_LL_GetSpeed+0x2c>
 800e612:	2b01      	cmp	r3, #1
 800e614:	d003      	beq.n	800e61e <USBH_LL_GetSpeed+0x32>
 800e616:	e008      	b.n	800e62a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800e618:	2300      	movs	r3, #0
 800e61a:	73fb      	strb	r3, [r7, #15]
    break;
 800e61c:	e008      	b.n	800e630 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800e61e:	2301      	movs	r3, #1
 800e620:	73fb      	strb	r3, [r7, #15]
    break;
 800e622:	e005      	b.n	800e630 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800e624:	2302      	movs	r3, #2
 800e626:	73fb      	strb	r3, [r7, #15]
    break;
 800e628:	e002      	b.n	800e630 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800e62a:	2301      	movs	r3, #1
 800e62c:	73fb      	strb	r3, [r7, #15]
    break;
 800e62e:	bf00      	nop
  }
  return  speed;
 800e630:	7bfb      	ldrb	r3, [r7, #15]
}
 800e632:	4618      	mov	r0, r3
 800e634:	3710      	adds	r7, #16
 800e636:	46bd      	mov	sp, r7
 800e638:	bd80      	pop	{r7, pc}

0800e63a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800e63a:	b580      	push	{r7, lr}
 800e63c:	b084      	sub	sp, #16
 800e63e:	af00      	add	r7, sp, #0
 800e640:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e642:	2300      	movs	r3, #0
 800e644:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e646:	2300      	movs	r3, #0
 800e648:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e650:	4618      	mov	r0, r3
 800e652:	f7f6 f9b4 	bl	80049be <HAL_HCD_ResetPort>
 800e656:	4603      	mov	r3, r0
 800e658:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e65a:	7bfb      	ldrb	r3, [r7, #15]
 800e65c:	4618      	mov	r0, r3
 800e65e:	f000 f8ff 	bl	800e860 <USBH_Get_USB_Status>
 800e662:	4603      	mov	r3, r0
 800e664:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e666:	7bbb      	ldrb	r3, [r7, #14]
}
 800e668:	4618      	mov	r0, r3
 800e66a:	3710      	adds	r7, #16
 800e66c:	46bd      	mov	sp, r7
 800e66e:	bd80      	pop	{r7, pc}

0800e670 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e670:	b580      	push	{r7, lr}
 800e672:	b082      	sub	sp, #8
 800e674:	af00      	add	r7, sp, #0
 800e676:	6078      	str	r0, [r7, #4]
 800e678:	460b      	mov	r3, r1
 800e67a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e682:	78fa      	ldrb	r2, [r7, #3]
 800e684:	4611      	mov	r1, r2
 800e686:	4618      	mov	r0, r3
 800e688:	f7f6 f9bb 	bl	8004a02 <HAL_HCD_HC_GetXferCount>
 800e68c:	4603      	mov	r3, r0
}
 800e68e:	4618      	mov	r0, r3
 800e690:	3708      	adds	r7, #8
 800e692:	46bd      	mov	sp, r7
 800e694:	bd80      	pop	{r7, pc}

0800e696 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e696:	b590      	push	{r4, r7, lr}
 800e698:	b089      	sub	sp, #36	; 0x24
 800e69a:	af04      	add	r7, sp, #16
 800e69c:	6078      	str	r0, [r7, #4]
 800e69e:	4608      	mov	r0, r1
 800e6a0:	4611      	mov	r1, r2
 800e6a2:	461a      	mov	r2, r3
 800e6a4:	4603      	mov	r3, r0
 800e6a6:	70fb      	strb	r3, [r7, #3]
 800e6a8:	460b      	mov	r3, r1
 800e6aa:	70bb      	strb	r3, [r7, #2]
 800e6ac:	4613      	mov	r3, r2
 800e6ae:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e6be:	787c      	ldrb	r4, [r7, #1]
 800e6c0:	78ba      	ldrb	r2, [r7, #2]
 800e6c2:	78f9      	ldrb	r1, [r7, #3]
 800e6c4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e6c6:	9302      	str	r3, [sp, #8]
 800e6c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e6cc:	9301      	str	r3, [sp, #4]
 800e6ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e6d2:	9300      	str	r3, [sp, #0]
 800e6d4:	4623      	mov	r3, r4
 800e6d6:	f7f5 fe1e 	bl	8004316 <HAL_HCD_HC_Init>
 800e6da:	4603      	mov	r3, r0
 800e6dc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800e6de:	7bfb      	ldrb	r3, [r7, #15]
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	f000 f8bd 	bl	800e860 <USBH_Get_USB_Status>
 800e6e6:	4603      	mov	r3, r0
 800e6e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e6ea:	7bbb      	ldrb	r3, [r7, #14]
}
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	3714      	adds	r7, #20
 800e6f0:	46bd      	mov	sp, r7
 800e6f2:	bd90      	pop	{r4, r7, pc}

0800e6f4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b084      	sub	sp, #16
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
 800e6fc:	460b      	mov	r3, r1
 800e6fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e700:	2300      	movs	r3, #0
 800e702:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e704:	2300      	movs	r3, #0
 800e706:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e70e:	78fa      	ldrb	r2, [r7, #3]
 800e710:	4611      	mov	r1, r2
 800e712:	4618      	mov	r0, r3
 800e714:	f7f5 fe8e 	bl	8004434 <HAL_HCD_HC_Halt>
 800e718:	4603      	mov	r3, r0
 800e71a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e71c:	7bfb      	ldrb	r3, [r7, #15]
 800e71e:	4618      	mov	r0, r3
 800e720:	f000 f89e 	bl	800e860 <USBH_Get_USB_Status>
 800e724:	4603      	mov	r3, r0
 800e726:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e728:	7bbb      	ldrb	r3, [r7, #14]
}
 800e72a:	4618      	mov	r0, r3
 800e72c:	3710      	adds	r7, #16
 800e72e:	46bd      	mov	sp, r7
 800e730:	bd80      	pop	{r7, pc}

0800e732 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800e732:	b590      	push	{r4, r7, lr}
 800e734:	b089      	sub	sp, #36	; 0x24
 800e736:	af04      	add	r7, sp, #16
 800e738:	6078      	str	r0, [r7, #4]
 800e73a:	4608      	mov	r0, r1
 800e73c:	4611      	mov	r1, r2
 800e73e:	461a      	mov	r2, r3
 800e740:	4603      	mov	r3, r0
 800e742:	70fb      	strb	r3, [r7, #3]
 800e744:	460b      	mov	r3, r1
 800e746:	70bb      	strb	r3, [r7, #2]
 800e748:	4613      	mov	r3, r2
 800e74a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e74c:	2300      	movs	r3, #0
 800e74e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e750:	2300      	movs	r3, #0
 800e752:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e75a:	787c      	ldrb	r4, [r7, #1]
 800e75c:	78ba      	ldrb	r2, [r7, #2]
 800e75e:	78f9      	ldrb	r1, [r7, #3]
 800e760:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e764:	9303      	str	r3, [sp, #12]
 800e766:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e768:	9302      	str	r3, [sp, #8]
 800e76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e76c:	9301      	str	r3, [sp, #4]
 800e76e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e772:	9300      	str	r3, [sp, #0]
 800e774:	4623      	mov	r3, r4
 800e776:	f7f5 fe81 	bl	800447c <HAL_HCD_HC_SubmitRequest>
 800e77a:	4603      	mov	r3, r0
 800e77c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800e77e:	7bfb      	ldrb	r3, [r7, #15]
 800e780:	4618      	mov	r0, r3
 800e782:	f000 f86d 	bl	800e860 <USBH_Get_USB_Status>
 800e786:	4603      	mov	r3, r0
 800e788:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e78a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e78c:	4618      	mov	r0, r3
 800e78e:	3714      	adds	r7, #20
 800e790:	46bd      	mov	sp, r7
 800e792:	bd90      	pop	{r4, r7, pc}

0800e794 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e794:	b580      	push	{r7, lr}
 800e796:	b082      	sub	sp, #8
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
 800e79c:	460b      	mov	r3, r1
 800e79e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e7a6:	78fa      	ldrb	r2, [r7, #3]
 800e7a8:	4611      	mov	r1, r2
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	f7f6 f915 	bl	80049da <HAL_HCD_HC_GetURBState>
 800e7b0:	4603      	mov	r3, r0
}
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	3708      	adds	r7, #8
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	bd80      	pop	{r7, pc}

0800e7ba <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800e7ba:	b580      	push	{r7, lr}
 800e7bc:	b082      	sub	sp, #8
 800e7be:	af00      	add	r7, sp, #0
 800e7c0:	6078      	str	r0, [r7, #4]
 800e7c2:	460b      	mov	r3, r1
 800e7c4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e7cc:	2b01      	cmp	r3, #1
 800e7ce:	d103      	bne.n	800e7d8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800e7d0:	78fb      	ldrb	r3, [r7, #3]
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	f000 f870 	bl	800e8b8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800e7d8:	20c8      	movs	r0, #200	; 0xc8
 800e7da:	f7f3 fd43 	bl	8002264 <HAL_Delay>
  return USBH_OK;
 800e7de:	2300      	movs	r3, #0
}
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	3708      	adds	r7, #8
 800e7e4:	46bd      	mov	sp, r7
 800e7e6:	bd80      	pop	{r7, pc}

0800e7e8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800e7e8:	b480      	push	{r7}
 800e7ea:	b085      	sub	sp, #20
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
 800e7f0:	460b      	mov	r3, r1
 800e7f2:	70fb      	strb	r3, [r7, #3]
 800e7f4:	4613      	mov	r3, r2
 800e7f6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e7fe:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800e800:	78fb      	ldrb	r3, [r7, #3]
 800e802:	68fa      	ldr	r2, [r7, #12]
 800e804:	212c      	movs	r1, #44	; 0x2c
 800e806:	fb01 f303 	mul.w	r3, r1, r3
 800e80a:	4413      	add	r3, r2
 800e80c:	333b      	adds	r3, #59	; 0x3b
 800e80e:	781b      	ldrb	r3, [r3, #0]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d009      	beq.n	800e828 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800e814:	78fb      	ldrb	r3, [r7, #3]
 800e816:	68fa      	ldr	r2, [r7, #12]
 800e818:	212c      	movs	r1, #44	; 0x2c
 800e81a:	fb01 f303 	mul.w	r3, r1, r3
 800e81e:	4413      	add	r3, r2
 800e820:	3354      	adds	r3, #84	; 0x54
 800e822:	78ba      	ldrb	r2, [r7, #2]
 800e824:	701a      	strb	r2, [r3, #0]
 800e826:	e008      	b.n	800e83a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800e828:	78fb      	ldrb	r3, [r7, #3]
 800e82a:	68fa      	ldr	r2, [r7, #12]
 800e82c:	212c      	movs	r1, #44	; 0x2c
 800e82e:	fb01 f303 	mul.w	r3, r1, r3
 800e832:	4413      	add	r3, r2
 800e834:	3355      	adds	r3, #85	; 0x55
 800e836:	78ba      	ldrb	r2, [r7, #2]
 800e838:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800e83a:	2300      	movs	r3, #0
}
 800e83c:	4618      	mov	r0, r3
 800e83e:	3714      	adds	r7, #20
 800e840:	46bd      	mov	sp, r7
 800e842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e846:	4770      	bx	lr

0800e848 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b082      	sub	sp, #8
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800e850:	6878      	ldr	r0, [r7, #4]
 800e852:	f7f3 fd07 	bl	8002264 <HAL_Delay>
}
 800e856:	bf00      	nop
 800e858:	3708      	adds	r7, #8
 800e85a:	46bd      	mov	sp, r7
 800e85c:	bd80      	pop	{r7, pc}
	...

0800e860 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e860:	b480      	push	{r7}
 800e862:	b085      	sub	sp, #20
 800e864:	af00      	add	r7, sp, #0
 800e866:	4603      	mov	r3, r0
 800e868:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e86a:	2300      	movs	r3, #0
 800e86c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e86e:	79fb      	ldrb	r3, [r7, #7]
 800e870:	2b03      	cmp	r3, #3
 800e872:	d817      	bhi.n	800e8a4 <USBH_Get_USB_Status+0x44>
 800e874:	a201      	add	r2, pc, #4	; (adr r2, 800e87c <USBH_Get_USB_Status+0x1c>)
 800e876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e87a:	bf00      	nop
 800e87c:	0800e88d 	.word	0x0800e88d
 800e880:	0800e893 	.word	0x0800e893
 800e884:	0800e899 	.word	0x0800e899
 800e888:	0800e89f 	.word	0x0800e89f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800e88c:	2300      	movs	r3, #0
 800e88e:	73fb      	strb	r3, [r7, #15]
    break;
 800e890:	e00b      	b.n	800e8aa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800e892:	2302      	movs	r3, #2
 800e894:	73fb      	strb	r3, [r7, #15]
    break;
 800e896:	e008      	b.n	800e8aa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800e898:	2301      	movs	r3, #1
 800e89a:	73fb      	strb	r3, [r7, #15]
    break;
 800e89c:	e005      	b.n	800e8aa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800e89e:	2302      	movs	r3, #2
 800e8a0:	73fb      	strb	r3, [r7, #15]
    break;
 800e8a2:	e002      	b.n	800e8aa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800e8a4:	2302      	movs	r3, #2
 800e8a6:	73fb      	strb	r3, [r7, #15]
    break;
 800e8a8:	bf00      	nop
  }
  return usb_status;
 800e8aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	3714      	adds	r7, #20
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b6:	4770      	bx	lr

0800e8b8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b084      	sub	sp, #16
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	4603      	mov	r3, r0
 800e8c0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800e8c2:	79fb      	ldrb	r3, [r7, #7]
 800e8c4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800e8c6:	79fb      	ldrb	r3, [r7, #7]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d102      	bne.n	800e8d2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800e8cc:	2301      	movs	r3, #1
 800e8ce:	73fb      	strb	r3, [r7, #15]
 800e8d0:	e001      	b.n	800e8d6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800e8d6:	7bfb      	ldrb	r3, [r7, #15]
 800e8d8:	461a      	mov	r2, r3
 800e8da:	2101      	movs	r1, #1
 800e8dc:	4803      	ldr	r0, [pc, #12]	; (800e8ec <MX_DriverVbusFS+0x34>)
 800e8de:	f7f5 fc85 	bl	80041ec <HAL_GPIO_WritePin>
}
 800e8e2:	bf00      	nop
 800e8e4:	3710      	adds	r7, #16
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	bd80      	pop	{r7, pc}
 800e8ea:	bf00      	nop
 800e8ec:	40020800 	.word	0x40020800

0800e8f0 <__errno>:
 800e8f0:	4b01      	ldr	r3, [pc, #4]	; (800e8f8 <__errno+0x8>)
 800e8f2:	6818      	ldr	r0, [r3, #0]
 800e8f4:	4770      	bx	lr
 800e8f6:	bf00      	nop
 800e8f8:	20000030 	.word	0x20000030

0800e8fc <__libc_init_array>:
 800e8fc:	b570      	push	{r4, r5, r6, lr}
 800e8fe:	4d0d      	ldr	r5, [pc, #52]	; (800e934 <__libc_init_array+0x38>)
 800e900:	4c0d      	ldr	r4, [pc, #52]	; (800e938 <__libc_init_array+0x3c>)
 800e902:	1b64      	subs	r4, r4, r5
 800e904:	10a4      	asrs	r4, r4, #2
 800e906:	2600      	movs	r6, #0
 800e908:	42a6      	cmp	r6, r4
 800e90a:	d109      	bne.n	800e920 <__libc_init_array+0x24>
 800e90c:	4d0b      	ldr	r5, [pc, #44]	; (800e93c <__libc_init_array+0x40>)
 800e90e:	4c0c      	ldr	r4, [pc, #48]	; (800e940 <__libc_init_array+0x44>)
 800e910:	f000 fcc8 	bl	800f2a4 <_init>
 800e914:	1b64      	subs	r4, r4, r5
 800e916:	10a4      	asrs	r4, r4, #2
 800e918:	2600      	movs	r6, #0
 800e91a:	42a6      	cmp	r6, r4
 800e91c:	d105      	bne.n	800e92a <__libc_init_array+0x2e>
 800e91e:	bd70      	pop	{r4, r5, r6, pc}
 800e920:	f855 3b04 	ldr.w	r3, [r5], #4
 800e924:	4798      	blx	r3
 800e926:	3601      	adds	r6, #1
 800e928:	e7ee      	b.n	800e908 <__libc_init_array+0xc>
 800e92a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e92e:	4798      	blx	r3
 800e930:	3601      	adds	r6, #1
 800e932:	e7f2      	b.n	800e91a <__libc_init_array+0x1e>
 800e934:	0800f4c0 	.word	0x0800f4c0
 800e938:	0800f4c0 	.word	0x0800f4c0
 800e93c:	0800f4c0 	.word	0x0800f4c0
 800e940:	0800f4c4 	.word	0x0800f4c4

0800e944 <__retarget_lock_acquire_recursive>:
 800e944:	4770      	bx	lr

0800e946 <__retarget_lock_release_recursive>:
 800e946:	4770      	bx	lr

0800e948 <malloc>:
 800e948:	4b02      	ldr	r3, [pc, #8]	; (800e954 <malloc+0xc>)
 800e94a:	4601      	mov	r1, r0
 800e94c:	6818      	ldr	r0, [r3, #0]
 800e94e:	f000 b871 	b.w	800ea34 <_malloc_r>
 800e952:	bf00      	nop
 800e954:	20000030 	.word	0x20000030

0800e958 <free>:
 800e958:	4b02      	ldr	r3, [pc, #8]	; (800e964 <free+0xc>)
 800e95a:	4601      	mov	r1, r0
 800e95c:	6818      	ldr	r0, [r3, #0]
 800e95e:	f000 b819 	b.w	800e994 <_free_r>
 800e962:	bf00      	nop
 800e964:	20000030 	.word	0x20000030

0800e968 <memcpy>:
 800e968:	440a      	add	r2, r1
 800e96a:	4291      	cmp	r1, r2
 800e96c:	f100 33ff 	add.w	r3, r0, #4294967295
 800e970:	d100      	bne.n	800e974 <memcpy+0xc>
 800e972:	4770      	bx	lr
 800e974:	b510      	push	{r4, lr}
 800e976:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e97a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e97e:	4291      	cmp	r1, r2
 800e980:	d1f9      	bne.n	800e976 <memcpy+0xe>
 800e982:	bd10      	pop	{r4, pc}

0800e984 <memset>:
 800e984:	4402      	add	r2, r0
 800e986:	4603      	mov	r3, r0
 800e988:	4293      	cmp	r3, r2
 800e98a:	d100      	bne.n	800e98e <memset+0xa>
 800e98c:	4770      	bx	lr
 800e98e:	f803 1b01 	strb.w	r1, [r3], #1
 800e992:	e7f9      	b.n	800e988 <memset+0x4>

0800e994 <_free_r>:
 800e994:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e996:	2900      	cmp	r1, #0
 800e998:	d048      	beq.n	800ea2c <_free_r+0x98>
 800e99a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e99e:	9001      	str	r0, [sp, #4]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	f1a1 0404 	sub.w	r4, r1, #4
 800e9a6:	bfb8      	it	lt
 800e9a8:	18e4      	addlt	r4, r4, r3
 800e9aa:	f000 f937 	bl	800ec1c <__malloc_lock>
 800e9ae:	4a20      	ldr	r2, [pc, #128]	; (800ea30 <_free_r+0x9c>)
 800e9b0:	9801      	ldr	r0, [sp, #4]
 800e9b2:	6813      	ldr	r3, [r2, #0]
 800e9b4:	4615      	mov	r5, r2
 800e9b6:	b933      	cbnz	r3, 800e9c6 <_free_r+0x32>
 800e9b8:	6063      	str	r3, [r4, #4]
 800e9ba:	6014      	str	r4, [r2, #0]
 800e9bc:	b003      	add	sp, #12
 800e9be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e9c2:	f000 b931 	b.w	800ec28 <__malloc_unlock>
 800e9c6:	42a3      	cmp	r3, r4
 800e9c8:	d90b      	bls.n	800e9e2 <_free_r+0x4e>
 800e9ca:	6821      	ldr	r1, [r4, #0]
 800e9cc:	1862      	adds	r2, r4, r1
 800e9ce:	4293      	cmp	r3, r2
 800e9d0:	bf04      	itt	eq
 800e9d2:	681a      	ldreq	r2, [r3, #0]
 800e9d4:	685b      	ldreq	r3, [r3, #4]
 800e9d6:	6063      	str	r3, [r4, #4]
 800e9d8:	bf04      	itt	eq
 800e9da:	1852      	addeq	r2, r2, r1
 800e9dc:	6022      	streq	r2, [r4, #0]
 800e9de:	602c      	str	r4, [r5, #0]
 800e9e0:	e7ec      	b.n	800e9bc <_free_r+0x28>
 800e9e2:	461a      	mov	r2, r3
 800e9e4:	685b      	ldr	r3, [r3, #4]
 800e9e6:	b10b      	cbz	r3, 800e9ec <_free_r+0x58>
 800e9e8:	42a3      	cmp	r3, r4
 800e9ea:	d9fa      	bls.n	800e9e2 <_free_r+0x4e>
 800e9ec:	6811      	ldr	r1, [r2, #0]
 800e9ee:	1855      	adds	r5, r2, r1
 800e9f0:	42a5      	cmp	r5, r4
 800e9f2:	d10b      	bne.n	800ea0c <_free_r+0x78>
 800e9f4:	6824      	ldr	r4, [r4, #0]
 800e9f6:	4421      	add	r1, r4
 800e9f8:	1854      	adds	r4, r2, r1
 800e9fa:	42a3      	cmp	r3, r4
 800e9fc:	6011      	str	r1, [r2, #0]
 800e9fe:	d1dd      	bne.n	800e9bc <_free_r+0x28>
 800ea00:	681c      	ldr	r4, [r3, #0]
 800ea02:	685b      	ldr	r3, [r3, #4]
 800ea04:	6053      	str	r3, [r2, #4]
 800ea06:	4421      	add	r1, r4
 800ea08:	6011      	str	r1, [r2, #0]
 800ea0a:	e7d7      	b.n	800e9bc <_free_r+0x28>
 800ea0c:	d902      	bls.n	800ea14 <_free_r+0x80>
 800ea0e:	230c      	movs	r3, #12
 800ea10:	6003      	str	r3, [r0, #0]
 800ea12:	e7d3      	b.n	800e9bc <_free_r+0x28>
 800ea14:	6825      	ldr	r5, [r4, #0]
 800ea16:	1961      	adds	r1, r4, r5
 800ea18:	428b      	cmp	r3, r1
 800ea1a:	bf04      	itt	eq
 800ea1c:	6819      	ldreq	r1, [r3, #0]
 800ea1e:	685b      	ldreq	r3, [r3, #4]
 800ea20:	6063      	str	r3, [r4, #4]
 800ea22:	bf04      	itt	eq
 800ea24:	1949      	addeq	r1, r1, r5
 800ea26:	6021      	streq	r1, [r4, #0]
 800ea28:	6054      	str	r4, [r2, #4]
 800ea2a:	e7c7      	b.n	800e9bc <_free_r+0x28>
 800ea2c:	b003      	add	sp, #12
 800ea2e:	bd30      	pop	{r4, r5, pc}
 800ea30:	20004674 	.word	0x20004674

0800ea34 <_malloc_r>:
 800ea34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea36:	1ccd      	adds	r5, r1, #3
 800ea38:	f025 0503 	bic.w	r5, r5, #3
 800ea3c:	3508      	adds	r5, #8
 800ea3e:	2d0c      	cmp	r5, #12
 800ea40:	bf38      	it	cc
 800ea42:	250c      	movcc	r5, #12
 800ea44:	2d00      	cmp	r5, #0
 800ea46:	4606      	mov	r6, r0
 800ea48:	db01      	blt.n	800ea4e <_malloc_r+0x1a>
 800ea4a:	42a9      	cmp	r1, r5
 800ea4c:	d903      	bls.n	800ea56 <_malloc_r+0x22>
 800ea4e:	230c      	movs	r3, #12
 800ea50:	6033      	str	r3, [r6, #0]
 800ea52:	2000      	movs	r0, #0
 800ea54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea56:	f000 f8e1 	bl	800ec1c <__malloc_lock>
 800ea5a:	4921      	ldr	r1, [pc, #132]	; (800eae0 <_malloc_r+0xac>)
 800ea5c:	680a      	ldr	r2, [r1, #0]
 800ea5e:	4614      	mov	r4, r2
 800ea60:	b99c      	cbnz	r4, 800ea8a <_malloc_r+0x56>
 800ea62:	4f20      	ldr	r7, [pc, #128]	; (800eae4 <_malloc_r+0xb0>)
 800ea64:	683b      	ldr	r3, [r7, #0]
 800ea66:	b923      	cbnz	r3, 800ea72 <_malloc_r+0x3e>
 800ea68:	4621      	mov	r1, r4
 800ea6a:	4630      	mov	r0, r6
 800ea6c:	f000 f8a6 	bl	800ebbc <_sbrk_r>
 800ea70:	6038      	str	r0, [r7, #0]
 800ea72:	4629      	mov	r1, r5
 800ea74:	4630      	mov	r0, r6
 800ea76:	f000 f8a1 	bl	800ebbc <_sbrk_r>
 800ea7a:	1c43      	adds	r3, r0, #1
 800ea7c:	d123      	bne.n	800eac6 <_malloc_r+0x92>
 800ea7e:	230c      	movs	r3, #12
 800ea80:	6033      	str	r3, [r6, #0]
 800ea82:	4630      	mov	r0, r6
 800ea84:	f000 f8d0 	bl	800ec28 <__malloc_unlock>
 800ea88:	e7e3      	b.n	800ea52 <_malloc_r+0x1e>
 800ea8a:	6823      	ldr	r3, [r4, #0]
 800ea8c:	1b5b      	subs	r3, r3, r5
 800ea8e:	d417      	bmi.n	800eac0 <_malloc_r+0x8c>
 800ea90:	2b0b      	cmp	r3, #11
 800ea92:	d903      	bls.n	800ea9c <_malloc_r+0x68>
 800ea94:	6023      	str	r3, [r4, #0]
 800ea96:	441c      	add	r4, r3
 800ea98:	6025      	str	r5, [r4, #0]
 800ea9a:	e004      	b.n	800eaa6 <_malloc_r+0x72>
 800ea9c:	6863      	ldr	r3, [r4, #4]
 800ea9e:	42a2      	cmp	r2, r4
 800eaa0:	bf0c      	ite	eq
 800eaa2:	600b      	streq	r3, [r1, #0]
 800eaa4:	6053      	strne	r3, [r2, #4]
 800eaa6:	4630      	mov	r0, r6
 800eaa8:	f000 f8be 	bl	800ec28 <__malloc_unlock>
 800eaac:	f104 000b 	add.w	r0, r4, #11
 800eab0:	1d23      	adds	r3, r4, #4
 800eab2:	f020 0007 	bic.w	r0, r0, #7
 800eab6:	1ac2      	subs	r2, r0, r3
 800eab8:	d0cc      	beq.n	800ea54 <_malloc_r+0x20>
 800eaba:	1a1b      	subs	r3, r3, r0
 800eabc:	50a3      	str	r3, [r4, r2]
 800eabe:	e7c9      	b.n	800ea54 <_malloc_r+0x20>
 800eac0:	4622      	mov	r2, r4
 800eac2:	6864      	ldr	r4, [r4, #4]
 800eac4:	e7cc      	b.n	800ea60 <_malloc_r+0x2c>
 800eac6:	1cc4      	adds	r4, r0, #3
 800eac8:	f024 0403 	bic.w	r4, r4, #3
 800eacc:	42a0      	cmp	r0, r4
 800eace:	d0e3      	beq.n	800ea98 <_malloc_r+0x64>
 800ead0:	1a21      	subs	r1, r4, r0
 800ead2:	4630      	mov	r0, r6
 800ead4:	f000 f872 	bl	800ebbc <_sbrk_r>
 800ead8:	3001      	adds	r0, #1
 800eada:	d1dd      	bne.n	800ea98 <_malloc_r+0x64>
 800eadc:	e7cf      	b.n	800ea7e <_malloc_r+0x4a>
 800eade:	bf00      	nop
 800eae0:	20004674 	.word	0x20004674
 800eae4:	20004678 	.word	0x20004678

0800eae8 <cleanup_glue>:
 800eae8:	b538      	push	{r3, r4, r5, lr}
 800eaea:	460c      	mov	r4, r1
 800eaec:	6809      	ldr	r1, [r1, #0]
 800eaee:	4605      	mov	r5, r0
 800eaf0:	b109      	cbz	r1, 800eaf6 <cleanup_glue+0xe>
 800eaf2:	f7ff fff9 	bl	800eae8 <cleanup_glue>
 800eaf6:	4621      	mov	r1, r4
 800eaf8:	4628      	mov	r0, r5
 800eafa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eafe:	f7ff bf49 	b.w	800e994 <_free_r>
	...

0800eb04 <_reclaim_reent>:
 800eb04:	4b2c      	ldr	r3, [pc, #176]	; (800ebb8 <_reclaim_reent+0xb4>)
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	4283      	cmp	r3, r0
 800eb0a:	b570      	push	{r4, r5, r6, lr}
 800eb0c:	4604      	mov	r4, r0
 800eb0e:	d051      	beq.n	800ebb4 <_reclaim_reent+0xb0>
 800eb10:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800eb12:	b143      	cbz	r3, 800eb26 <_reclaim_reent+0x22>
 800eb14:	68db      	ldr	r3, [r3, #12]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d14a      	bne.n	800ebb0 <_reclaim_reent+0xac>
 800eb1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb1c:	6819      	ldr	r1, [r3, #0]
 800eb1e:	b111      	cbz	r1, 800eb26 <_reclaim_reent+0x22>
 800eb20:	4620      	mov	r0, r4
 800eb22:	f7ff ff37 	bl	800e994 <_free_r>
 800eb26:	6961      	ldr	r1, [r4, #20]
 800eb28:	b111      	cbz	r1, 800eb30 <_reclaim_reent+0x2c>
 800eb2a:	4620      	mov	r0, r4
 800eb2c:	f7ff ff32 	bl	800e994 <_free_r>
 800eb30:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800eb32:	b111      	cbz	r1, 800eb3a <_reclaim_reent+0x36>
 800eb34:	4620      	mov	r0, r4
 800eb36:	f7ff ff2d 	bl	800e994 <_free_r>
 800eb3a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800eb3c:	b111      	cbz	r1, 800eb44 <_reclaim_reent+0x40>
 800eb3e:	4620      	mov	r0, r4
 800eb40:	f7ff ff28 	bl	800e994 <_free_r>
 800eb44:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800eb46:	b111      	cbz	r1, 800eb4e <_reclaim_reent+0x4a>
 800eb48:	4620      	mov	r0, r4
 800eb4a:	f7ff ff23 	bl	800e994 <_free_r>
 800eb4e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800eb50:	b111      	cbz	r1, 800eb58 <_reclaim_reent+0x54>
 800eb52:	4620      	mov	r0, r4
 800eb54:	f7ff ff1e 	bl	800e994 <_free_r>
 800eb58:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800eb5a:	b111      	cbz	r1, 800eb62 <_reclaim_reent+0x5e>
 800eb5c:	4620      	mov	r0, r4
 800eb5e:	f7ff ff19 	bl	800e994 <_free_r>
 800eb62:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800eb64:	b111      	cbz	r1, 800eb6c <_reclaim_reent+0x68>
 800eb66:	4620      	mov	r0, r4
 800eb68:	f7ff ff14 	bl	800e994 <_free_r>
 800eb6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eb6e:	b111      	cbz	r1, 800eb76 <_reclaim_reent+0x72>
 800eb70:	4620      	mov	r0, r4
 800eb72:	f7ff ff0f 	bl	800e994 <_free_r>
 800eb76:	69a3      	ldr	r3, [r4, #24]
 800eb78:	b1e3      	cbz	r3, 800ebb4 <_reclaim_reent+0xb0>
 800eb7a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800eb7c:	4620      	mov	r0, r4
 800eb7e:	4798      	blx	r3
 800eb80:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800eb82:	b1b9      	cbz	r1, 800ebb4 <_reclaim_reent+0xb0>
 800eb84:	4620      	mov	r0, r4
 800eb86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eb8a:	f7ff bfad 	b.w	800eae8 <cleanup_glue>
 800eb8e:	5949      	ldr	r1, [r1, r5]
 800eb90:	b941      	cbnz	r1, 800eba4 <_reclaim_reent+0xa0>
 800eb92:	3504      	adds	r5, #4
 800eb94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb96:	2d80      	cmp	r5, #128	; 0x80
 800eb98:	68d9      	ldr	r1, [r3, #12]
 800eb9a:	d1f8      	bne.n	800eb8e <_reclaim_reent+0x8a>
 800eb9c:	4620      	mov	r0, r4
 800eb9e:	f7ff fef9 	bl	800e994 <_free_r>
 800eba2:	e7ba      	b.n	800eb1a <_reclaim_reent+0x16>
 800eba4:	680e      	ldr	r6, [r1, #0]
 800eba6:	4620      	mov	r0, r4
 800eba8:	f7ff fef4 	bl	800e994 <_free_r>
 800ebac:	4631      	mov	r1, r6
 800ebae:	e7ef      	b.n	800eb90 <_reclaim_reent+0x8c>
 800ebb0:	2500      	movs	r5, #0
 800ebb2:	e7ef      	b.n	800eb94 <_reclaim_reent+0x90>
 800ebb4:	bd70      	pop	{r4, r5, r6, pc}
 800ebb6:	bf00      	nop
 800ebb8:	20000030 	.word	0x20000030

0800ebbc <_sbrk_r>:
 800ebbc:	b538      	push	{r3, r4, r5, lr}
 800ebbe:	4d06      	ldr	r5, [pc, #24]	; (800ebd8 <_sbrk_r+0x1c>)
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	4604      	mov	r4, r0
 800ebc4:	4608      	mov	r0, r1
 800ebc6:	602b      	str	r3, [r5, #0]
 800ebc8:	f7f3 fa98 	bl	80020fc <_sbrk>
 800ebcc:	1c43      	adds	r3, r0, #1
 800ebce:	d102      	bne.n	800ebd6 <_sbrk_r+0x1a>
 800ebd0:	682b      	ldr	r3, [r5, #0]
 800ebd2:	b103      	cbz	r3, 800ebd6 <_sbrk_r+0x1a>
 800ebd4:	6023      	str	r3, [r4, #0]
 800ebd6:	bd38      	pop	{r3, r4, r5, pc}
 800ebd8:	2000520c 	.word	0x2000520c

0800ebdc <siprintf>:
 800ebdc:	b40e      	push	{r1, r2, r3}
 800ebde:	b500      	push	{lr}
 800ebe0:	b09c      	sub	sp, #112	; 0x70
 800ebe2:	ab1d      	add	r3, sp, #116	; 0x74
 800ebe4:	9002      	str	r0, [sp, #8]
 800ebe6:	9006      	str	r0, [sp, #24]
 800ebe8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ebec:	4809      	ldr	r0, [pc, #36]	; (800ec14 <siprintf+0x38>)
 800ebee:	9107      	str	r1, [sp, #28]
 800ebf0:	9104      	str	r1, [sp, #16]
 800ebf2:	4909      	ldr	r1, [pc, #36]	; (800ec18 <siprintf+0x3c>)
 800ebf4:	f853 2b04 	ldr.w	r2, [r3], #4
 800ebf8:	9105      	str	r1, [sp, #20]
 800ebfa:	6800      	ldr	r0, [r0, #0]
 800ebfc:	9301      	str	r3, [sp, #4]
 800ebfe:	a902      	add	r1, sp, #8
 800ec00:	f000 f874 	bl	800ecec <_svfiprintf_r>
 800ec04:	9b02      	ldr	r3, [sp, #8]
 800ec06:	2200      	movs	r2, #0
 800ec08:	701a      	strb	r2, [r3, #0]
 800ec0a:	b01c      	add	sp, #112	; 0x70
 800ec0c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ec10:	b003      	add	sp, #12
 800ec12:	4770      	bx	lr
 800ec14:	20000030 	.word	0x20000030
 800ec18:	ffff0208 	.word	0xffff0208

0800ec1c <__malloc_lock>:
 800ec1c:	4801      	ldr	r0, [pc, #4]	; (800ec24 <__malloc_lock+0x8>)
 800ec1e:	f7ff be91 	b.w	800e944 <__retarget_lock_acquire_recursive>
 800ec22:	bf00      	nop
 800ec24:	20005204 	.word	0x20005204

0800ec28 <__malloc_unlock>:
 800ec28:	4801      	ldr	r0, [pc, #4]	; (800ec30 <__malloc_unlock+0x8>)
 800ec2a:	f7ff be8c 	b.w	800e946 <__retarget_lock_release_recursive>
 800ec2e:	bf00      	nop
 800ec30:	20005204 	.word	0x20005204

0800ec34 <__ssputs_r>:
 800ec34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec38:	688e      	ldr	r6, [r1, #8]
 800ec3a:	429e      	cmp	r6, r3
 800ec3c:	4682      	mov	sl, r0
 800ec3e:	460c      	mov	r4, r1
 800ec40:	4690      	mov	r8, r2
 800ec42:	461f      	mov	r7, r3
 800ec44:	d838      	bhi.n	800ecb8 <__ssputs_r+0x84>
 800ec46:	898a      	ldrh	r2, [r1, #12]
 800ec48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ec4c:	d032      	beq.n	800ecb4 <__ssputs_r+0x80>
 800ec4e:	6825      	ldr	r5, [r4, #0]
 800ec50:	6909      	ldr	r1, [r1, #16]
 800ec52:	eba5 0901 	sub.w	r9, r5, r1
 800ec56:	6965      	ldr	r5, [r4, #20]
 800ec58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ec5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ec60:	3301      	adds	r3, #1
 800ec62:	444b      	add	r3, r9
 800ec64:	106d      	asrs	r5, r5, #1
 800ec66:	429d      	cmp	r5, r3
 800ec68:	bf38      	it	cc
 800ec6a:	461d      	movcc	r5, r3
 800ec6c:	0553      	lsls	r3, r2, #21
 800ec6e:	d531      	bpl.n	800ecd4 <__ssputs_r+0xa0>
 800ec70:	4629      	mov	r1, r5
 800ec72:	f7ff fedf 	bl	800ea34 <_malloc_r>
 800ec76:	4606      	mov	r6, r0
 800ec78:	b950      	cbnz	r0, 800ec90 <__ssputs_r+0x5c>
 800ec7a:	230c      	movs	r3, #12
 800ec7c:	f8ca 3000 	str.w	r3, [sl]
 800ec80:	89a3      	ldrh	r3, [r4, #12]
 800ec82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec86:	81a3      	strh	r3, [r4, #12]
 800ec88:	f04f 30ff 	mov.w	r0, #4294967295
 800ec8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec90:	6921      	ldr	r1, [r4, #16]
 800ec92:	464a      	mov	r2, r9
 800ec94:	f7ff fe68 	bl	800e968 <memcpy>
 800ec98:	89a3      	ldrh	r3, [r4, #12]
 800ec9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ec9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eca2:	81a3      	strh	r3, [r4, #12]
 800eca4:	6126      	str	r6, [r4, #16]
 800eca6:	6165      	str	r5, [r4, #20]
 800eca8:	444e      	add	r6, r9
 800ecaa:	eba5 0509 	sub.w	r5, r5, r9
 800ecae:	6026      	str	r6, [r4, #0]
 800ecb0:	60a5      	str	r5, [r4, #8]
 800ecb2:	463e      	mov	r6, r7
 800ecb4:	42be      	cmp	r6, r7
 800ecb6:	d900      	bls.n	800ecba <__ssputs_r+0x86>
 800ecb8:	463e      	mov	r6, r7
 800ecba:	4632      	mov	r2, r6
 800ecbc:	6820      	ldr	r0, [r4, #0]
 800ecbe:	4641      	mov	r1, r8
 800ecc0:	f000 faa8 	bl	800f214 <memmove>
 800ecc4:	68a3      	ldr	r3, [r4, #8]
 800ecc6:	6822      	ldr	r2, [r4, #0]
 800ecc8:	1b9b      	subs	r3, r3, r6
 800ecca:	4432      	add	r2, r6
 800eccc:	60a3      	str	r3, [r4, #8]
 800ecce:	6022      	str	r2, [r4, #0]
 800ecd0:	2000      	movs	r0, #0
 800ecd2:	e7db      	b.n	800ec8c <__ssputs_r+0x58>
 800ecd4:	462a      	mov	r2, r5
 800ecd6:	f000 fab7 	bl	800f248 <_realloc_r>
 800ecda:	4606      	mov	r6, r0
 800ecdc:	2800      	cmp	r0, #0
 800ecde:	d1e1      	bne.n	800eca4 <__ssputs_r+0x70>
 800ece0:	6921      	ldr	r1, [r4, #16]
 800ece2:	4650      	mov	r0, sl
 800ece4:	f7ff fe56 	bl	800e994 <_free_r>
 800ece8:	e7c7      	b.n	800ec7a <__ssputs_r+0x46>
	...

0800ecec <_svfiprintf_r>:
 800ecec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecf0:	4698      	mov	r8, r3
 800ecf2:	898b      	ldrh	r3, [r1, #12]
 800ecf4:	061b      	lsls	r3, r3, #24
 800ecf6:	b09d      	sub	sp, #116	; 0x74
 800ecf8:	4607      	mov	r7, r0
 800ecfa:	460d      	mov	r5, r1
 800ecfc:	4614      	mov	r4, r2
 800ecfe:	d50e      	bpl.n	800ed1e <_svfiprintf_r+0x32>
 800ed00:	690b      	ldr	r3, [r1, #16]
 800ed02:	b963      	cbnz	r3, 800ed1e <_svfiprintf_r+0x32>
 800ed04:	2140      	movs	r1, #64	; 0x40
 800ed06:	f7ff fe95 	bl	800ea34 <_malloc_r>
 800ed0a:	6028      	str	r0, [r5, #0]
 800ed0c:	6128      	str	r0, [r5, #16]
 800ed0e:	b920      	cbnz	r0, 800ed1a <_svfiprintf_r+0x2e>
 800ed10:	230c      	movs	r3, #12
 800ed12:	603b      	str	r3, [r7, #0]
 800ed14:	f04f 30ff 	mov.w	r0, #4294967295
 800ed18:	e0d1      	b.n	800eebe <_svfiprintf_r+0x1d2>
 800ed1a:	2340      	movs	r3, #64	; 0x40
 800ed1c:	616b      	str	r3, [r5, #20]
 800ed1e:	2300      	movs	r3, #0
 800ed20:	9309      	str	r3, [sp, #36]	; 0x24
 800ed22:	2320      	movs	r3, #32
 800ed24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ed28:	f8cd 800c 	str.w	r8, [sp, #12]
 800ed2c:	2330      	movs	r3, #48	; 0x30
 800ed2e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800eed8 <_svfiprintf_r+0x1ec>
 800ed32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ed36:	f04f 0901 	mov.w	r9, #1
 800ed3a:	4623      	mov	r3, r4
 800ed3c:	469a      	mov	sl, r3
 800ed3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed42:	b10a      	cbz	r2, 800ed48 <_svfiprintf_r+0x5c>
 800ed44:	2a25      	cmp	r2, #37	; 0x25
 800ed46:	d1f9      	bne.n	800ed3c <_svfiprintf_r+0x50>
 800ed48:	ebba 0b04 	subs.w	fp, sl, r4
 800ed4c:	d00b      	beq.n	800ed66 <_svfiprintf_r+0x7a>
 800ed4e:	465b      	mov	r3, fp
 800ed50:	4622      	mov	r2, r4
 800ed52:	4629      	mov	r1, r5
 800ed54:	4638      	mov	r0, r7
 800ed56:	f7ff ff6d 	bl	800ec34 <__ssputs_r>
 800ed5a:	3001      	adds	r0, #1
 800ed5c:	f000 80aa 	beq.w	800eeb4 <_svfiprintf_r+0x1c8>
 800ed60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ed62:	445a      	add	r2, fp
 800ed64:	9209      	str	r2, [sp, #36]	; 0x24
 800ed66:	f89a 3000 	ldrb.w	r3, [sl]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	f000 80a2 	beq.w	800eeb4 <_svfiprintf_r+0x1c8>
 800ed70:	2300      	movs	r3, #0
 800ed72:	f04f 32ff 	mov.w	r2, #4294967295
 800ed76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed7a:	f10a 0a01 	add.w	sl, sl, #1
 800ed7e:	9304      	str	r3, [sp, #16]
 800ed80:	9307      	str	r3, [sp, #28]
 800ed82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ed86:	931a      	str	r3, [sp, #104]	; 0x68
 800ed88:	4654      	mov	r4, sl
 800ed8a:	2205      	movs	r2, #5
 800ed8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed90:	4851      	ldr	r0, [pc, #324]	; (800eed8 <_svfiprintf_r+0x1ec>)
 800ed92:	f7f1 fa25 	bl	80001e0 <memchr>
 800ed96:	9a04      	ldr	r2, [sp, #16]
 800ed98:	b9d8      	cbnz	r0, 800edd2 <_svfiprintf_r+0xe6>
 800ed9a:	06d0      	lsls	r0, r2, #27
 800ed9c:	bf44      	itt	mi
 800ed9e:	2320      	movmi	r3, #32
 800eda0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eda4:	0711      	lsls	r1, r2, #28
 800eda6:	bf44      	itt	mi
 800eda8:	232b      	movmi	r3, #43	; 0x2b
 800edaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800edae:	f89a 3000 	ldrb.w	r3, [sl]
 800edb2:	2b2a      	cmp	r3, #42	; 0x2a
 800edb4:	d015      	beq.n	800ede2 <_svfiprintf_r+0xf6>
 800edb6:	9a07      	ldr	r2, [sp, #28]
 800edb8:	4654      	mov	r4, sl
 800edba:	2000      	movs	r0, #0
 800edbc:	f04f 0c0a 	mov.w	ip, #10
 800edc0:	4621      	mov	r1, r4
 800edc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800edc6:	3b30      	subs	r3, #48	; 0x30
 800edc8:	2b09      	cmp	r3, #9
 800edca:	d94e      	bls.n	800ee6a <_svfiprintf_r+0x17e>
 800edcc:	b1b0      	cbz	r0, 800edfc <_svfiprintf_r+0x110>
 800edce:	9207      	str	r2, [sp, #28]
 800edd0:	e014      	b.n	800edfc <_svfiprintf_r+0x110>
 800edd2:	eba0 0308 	sub.w	r3, r0, r8
 800edd6:	fa09 f303 	lsl.w	r3, r9, r3
 800edda:	4313      	orrs	r3, r2
 800eddc:	9304      	str	r3, [sp, #16]
 800edde:	46a2      	mov	sl, r4
 800ede0:	e7d2      	b.n	800ed88 <_svfiprintf_r+0x9c>
 800ede2:	9b03      	ldr	r3, [sp, #12]
 800ede4:	1d19      	adds	r1, r3, #4
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	9103      	str	r1, [sp, #12]
 800edea:	2b00      	cmp	r3, #0
 800edec:	bfbb      	ittet	lt
 800edee:	425b      	neglt	r3, r3
 800edf0:	f042 0202 	orrlt.w	r2, r2, #2
 800edf4:	9307      	strge	r3, [sp, #28]
 800edf6:	9307      	strlt	r3, [sp, #28]
 800edf8:	bfb8      	it	lt
 800edfa:	9204      	strlt	r2, [sp, #16]
 800edfc:	7823      	ldrb	r3, [r4, #0]
 800edfe:	2b2e      	cmp	r3, #46	; 0x2e
 800ee00:	d10c      	bne.n	800ee1c <_svfiprintf_r+0x130>
 800ee02:	7863      	ldrb	r3, [r4, #1]
 800ee04:	2b2a      	cmp	r3, #42	; 0x2a
 800ee06:	d135      	bne.n	800ee74 <_svfiprintf_r+0x188>
 800ee08:	9b03      	ldr	r3, [sp, #12]
 800ee0a:	1d1a      	adds	r2, r3, #4
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	9203      	str	r2, [sp, #12]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	bfb8      	it	lt
 800ee14:	f04f 33ff 	movlt.w	r3, #4294967295
 800ee18:	3402      	adds	r4, #2
 800ee1a:	9305      	str	r3, [sp, #20]
 800ee1c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800eee8 <_svfiprintf_r+0x1fc>
 800ee20:	7821      	ldrb	r1, [r4, #0]
 800ee22:	2203      	movs	r2, #3
 800ee24:	4650      	mov	r0, sl
 800ee26:	f7f1 f9db 	bl	80001e0 <memchr>
 800ee2a:	b140      	cbz	r0, 800ee3e <_svfiprintf_r+0x152>
 800ee2c:	2340      	movs	r3, #64	; 0x40
 800ee2e:	eba0 000a 	sub.w	r0, r0, sl
 800ee32:	fa03 f000 	lsl.w	r0, r3, r0
 800ee36:	9b04      	ldr	r3, [sp, #16]
 800ee38:	4303      	orrs	r3, r0
 800ee3a:	3401      	adds	r4, #1
 800ee3c:	9304      	str	r3, [sp, #16]
 800ee3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee42:	4826      	ldr	r0, [pc, #152]	; (800eedc <_svfiprintf_r+0x1f0>)
 800ee44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ee48:	2206      	movs	r2, #6
 800ee4a:	f7f1 f9c9 	bl	80001e0 <memchr>
 800ee4e:	2800      	cmp	r0, #0
 800ee50:	d038      	beq.n	800eec4 <_svfiprintf_r+0x1d8>
 800ee52:	4b23      	ldr	r3, [pc, #140]	; (800eee0 <_svfiprintf_r+0x1f4>)
 800ee54:	bb1b      	cbnz	r3, 800ee9e <_svfiprintf_r+0x1b2>
 800ee56:	9b03      	ldr	r3, [sp, #12]
 800ee58:	3307      	adds	r3, #7
 800ee5a:	f023 0307 	bic.w	r3, r3, #7
 800ee5e:	3308      	adds	r3, #8
 800ee60:	9303      	str	r3, [sp, #12]
 800ee62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee64:	4433      	add	r3, r6
 800ee66:	9309      	str	r3, [sp, #36]	; 0x24
 800ee68:	e767      	b.n	800ed3a <_svfiprintf_r+0x4e>
 800ee6a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ee6e:	460c      	mov	r4, r1
 800ee70:	2001      	movs	r0, #1
 800ee72:	e7a5      	b.n	800edc0 <_svfiprintf_r+0xd4>
 800ee74:	2300      	movs	r3, #0
 800ee76:	3401      	adds	r4, #1
 800ee78:	9305      	str	r3, [sp, #20]
 800ee7a:	4619      	mov	r1, r3
 800ee7c:	f04f 0c0a 	mov.w	ip, #10
 800ee80:	4620      	mov	r0, r4
 800ee82:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee86:	3a30      	subs	r2, #48	; 0x30
 800ee88:	2a09      	cmp	r2, #9
 800ee8a:	d903      	bls.n	800ee94 <_svfiprintf_r+0x1a8>
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d0c5      	beq.n	800ee1c <_svfiprintf_r+0x130>
 800ee90:	9105      	str	r1, [sp, #20]
 800ee92:	e7c3      	b.n	800ee1c <_svfiprintf_r+0x130>
 800ee94:	fb0c 2101 	mla	r1, ip, r1, r2
 800ee98:	4604      	mov	r4, r0
 800ee9a:	2301      	movs	r3, #1
 800ee9c:	e7f0      	b.n	800ee80 <_svfiprintf_r+0x194>
 800ee9e:	ab03      	add	r3, sp, #12
 800eea0:	9300      	str	r3, [sp, #0]
 800eea2:	462a      	mov	r2, r5
 800eea4:	4b0f      	ldr	r3, [pc, #60]	; (800eee4 <_svfiprintf_r+0x1f8>)
 800eea6:	a904      	add	r1, sp, #16
 800eea8:	4638      	mov	r0, r7
 800eeaa:	f3af 8000 	nop.w
 800eeae:	1c42      	adds	r2, r0, #1
 800eeb0:	4606      	mov	r6, r0
 800eeb2:	d1d6      	bne.n	800ee62 <_svfiprintf_r+0x176>
 800eeb4:	89ab      	ldrh	r3, [r5, #12]
 800eeb6:	065b      	lsls	r3, r3, #25
 800eeb8:	f53f af2c 	bmi.w	800ed14 <_svfiprintf_r+0x28>
 800eebc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eebe:	b01d      	add	sp, #116	; 0x74
 800eec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eec4:	ab03      	add	r3, sp, #12
 800eec6:	9300      	str	r3, [sp, #0]
 800eec8:	462a      	mov	r2, r5
 800eeca:	4b06      	ldr	r3, [pc, #24]	; (800eee4 <_svfiprintf_r+0x1f8>)
 800eecc:	a904      	add	r1, sp, #16
 800eece:	4638      	mov	r0, r7
 800eed0:	f000 f87a 	bl	800efc8 <_printf_i>
 800eed4:	e7eb      	b.n	800eeae <_svfiprintf_r+0x1c2>
 800eed6:	bf00      	nop
 800eed8:	0800f484 	.word	0x0800f484
 800eedc:	0800f48e 	.word	0x0800f48e
 800eee0:	00000000 	.word	0x00000000
 800eee4:	0800ec35 	.word	0x0800ec35
 800eee8:	0800f48a 	.word	0x0800f48a

0800eeec <_printf_common>:
 800eeec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eef0:	4616      	mov	r6, r2
 800eef2:	4699      	mov	r9, r3
 800eef4:	688a      	ldr	r2, [r1, #8]
 800eef6:	690b      	ldr	r3, [r1, #16]
 800eef8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eefc:	4293      	cmp	r3, r2
 800eefe:	bfb8      	it	lt
 800ef00:	4613      	movlt	r3, r2
 800ef02:	6033      	str	r3, [r6, #0]
 800ef04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ef08:	4607      	mov	r7, r0
 800ef0a:	460c      	mov	r4, r1
 800ef0c:	b10a      	cbz	r2, 800ef12 <_printf_common+0x26>
 800ef0e:	3301      	adds	r3, #1
 800ef10:	6033      	str	r3, [r6, #0]
 800ef12:	6823      	ldr	r3, [r4, #0]
 800ef14:	0699      	lsls	r1, r3, #26
 800ef16:	bf42      	ittt	mi
 800ef18:	6833      	ldrmi	r3, [r6, #0]
 800ef1a:	3302      	addmi	r3, #2
 800ef1c:	6033      	strmi	r3, [r6, #0]
 800ef1e:	6825      	ldr	r5, [r4, #0]
 800ef20:	f015 0506 	ands.w	r5, r5, #6
 800ef24:	d106      	bne.n	800ef34 <_printf_common+0x48>
 800ef26:	f104 0a19 	add.w	sl, r4, #25
 800ef2a:	68e3      	ldr	r3, [r4, #12]
 800ef2c:	6832      	ldr	r2, [r6, #0]
 800ef2e:	1a9b      	subs	r3, r3, r2
 800ef30:	42ab      	cmp	r3, r5
 800ef32:	dc26      	bgt.n	800ef82 <_printf_common+0x96>
 800ef34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ef38:	1e13      	subs	r3, r2, #0
 800ef3a:	6822      	ldr	r2, [r4, #0]
 800ef3c:	bf18      	it	ne
 800ef3e:	2301      	movne	r3, #1
 800ef40:	0692      	lsls	r2, r2, #26
 800ef42:	d42b      	bmi.n	800ef9c <_printf_common+0xb0>
 800ef44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ef48:	4649      	mov	r1, r9
 800ef4a:	4638      	mov	r0, r7
 800ef4c:	47c0      	blx	r8
 800ef4e:	3001      	adds	r0, #1
 800ef50:	d01e      	beq.n	800ef90 <_printf_common+0xa4>
 800ef52:	6823      	ldr	r3, [r4, #0]
 800ef54:	68e5      	ldr	r5, [r4, #12]
 800ef56:	6832      	ldr	r2, [r6, #0]
 800ef58:	f003 0306 	and.w	r3, r3, #6
 800ef5c:	2b04      	cmp	r3, #4
 800ef5e:	bf08      	it	eq
 800ef60:	1aad      	subeq	r5, r5, r2
 800ef62:	68a3      	ldr	r3, [r4, #8]
 800ef64:	6922      	ldr	r2, [r4, #16]
 800ef66:	bf0c      	ite	eq
 800ef68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ef6c:	2500      	movne	r5, #0
 800ef6e:	4293      	cmp	r3, r2
 800ef70:	bfc4      	itt	gt
 800ef72:	1a9b      	subgt	r3, r3, r2
 800ef74:	18ed      	addgt	r5, r5, r3
 800ef76:	2600      	movs	r6, #0
 800ef78:	341a      	adds	r4, #26
 800ef7a:	42b5      	cmp	r5, r6
 800ef7c:	d11a      	bne.n	800efb4 <_printf_common+0xc8>
 800ef7e:	2000      	movs	r0, #0
 800ef80:	e008      	b.n	800ef94 <_printf_common+0xa8>
 800ef82:	2301      	movs	r3, #1
 800ef84:	4652      	mov	r2, sl
 800ef86:	4649      	mov	r1, r9
 800ef88:	4638      	mov	r0, r7
 800ef8a:	47c0      	blx	r8
 800ef8c:	3001      	adds	r0, #1
 800ef8e:	d103      	bne.n	800ef98 <_printf_common+0xac>
 800ef90:	f04f 30ff 	mov.w	r0, #4294967295
 800ef94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef98:	3501      	adds	r5, #1
 800ef9a:	e7c6      	b.n	800ef2a <_printf_common+0x3e>
 800ef9c:	18e1      	adds	r1, r4, r3
 800ef9e:	1c5a      	adds	r2, r3, #1
 800efa0:	2030      	movs	r0, #48	; 0x30
 800efa2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800efa6:	4422      	add	r2, r4
 800efa8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800efac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800efb0:	3302      	adds	r3, #2
 800efb2:	e7c7      	b.n	800ef44 <_printf_common+0x58>
 800efb4:	2301      	movs	r3, #1
 800efb6:	4622      	mov	r2, r4
 800efb8:	4649      	mov	r1, r9
 800efba:	4638      	mov	r0, r7
 800efbc:	47c0      	blx	r8
 800efbe:	3001      	adds	r0, #1
 800efc0:	d0e6      	beq.n	800ef90 <_printf_common+0xa4>
 800efc2:	3601      	adds	r6, #1
 800efc4:	e7d9      	b.n	800ef7a <_printf_common+0x8e>
	...

0800efc8 <_printf_i>:
 800efc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800efcc:	460c      	mov	r4, r1
 800efce:	4691      	mov	r9, r2
 800efd0:	7e27      	ldrb	r7, [r4, #24]
 800efd2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800efd4:	2f78      	cmp	r7, #120	; 0x78
 800efd6:	4680      	mov	r8, r0
 800efd8:	469a      	mov	sl, r3
 800efda:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800efde:	d807      	bhi.n	800eff0 <_printf_i+0x28>
 800efe0:	2f62      	cmp	r7, #98	; 0x62
 800efe2:	d80a      	bhi.n	800effa <_printf_i+0x32>
 800efe4:	2f00      	cmp	r7, #0
 800efe6:	f000 80d8 	beq.w	800f19a <_printf_i+0x1d2>
 800efea:	2f58      	cmp	r7, #88	; 0x58
 800efec:	f000 80a3 	beq.w	800f136 <_printf_i+0x16e>
 800eff0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800eff4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800eff8:	e03a      	b.n	800f070 <_printf_i+0xa8>
 800effa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800effe:	2b15      	cmp	r3, #21
 800f000:	d8f6      	bhi.n	800eff0 <_printf_i+0x28>
 800f002:	a001      	add	r0, pc, #4	; (adr r0, 800f008 <_printf_i+0x40>)
 800f004:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800f008:	0800f061 	.word	0x0800f061
 800f00c:	0800f075 	.word	0x0800f075
 800f010:	0800eff1 	.word	0x0800eff1
 800f014:	0800eff1 	.word	0x0800eff1
 800f018:	0800eff1 	.word	0x0800eff1
 800f01c:	0800eff1 	.word	0x0800eff1
 800f020:	0800f075 	.word	0x0800f075
 800f024:	0800eff1 	.word	0x0800eff1
 800f028:	0800eff1 	.word	0x0800eff1
 800f02c:	0800eff1 	.word	0x0800eff1
 800f030:	0800eff1 	.word	0x0800eff1
 800f034:	0800f181 	.word	0x0800f181
 800f038:	0800f0a5 	.word	0x0800f0a5
 800f03c:	0800f163 	.word	0x0800f163
 800f040:	0800eff1 	.word	0x0800eff1
 800f044:	0800eff1 	.word	0x0800eff1
 800f048:	0800f1a3 	.word	0x0800f1a3
 800f04c:	0800eff1 	.word	0x0800eff1
 800f050:	0800f0a5 	.word	0x0800f0a5
 800f054:	0800eff1 	.word	0x0800eff1
 800f058:	0800eff1 	.word	0x0800eff1
 800f05c:	0800f16b 	.word	0x0800f16b
 800f060:	680b      	ldr	r3, [r1, #0]
 800f062:	1d1a      	adds	r2, r3, #4
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	600a      	str	r2, [r1, #0]
 800f068:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f06c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f070:	2301      	movs	r3, #1
 800f072:	e0a3      	b.n	800f1bc <_printf_i+0x1f4>
 800f074:	6825      	ldr	r5, [r4, #0]
 800f076:	6808      	ldr	r0, [r1, #0]
 800f078:	062e      	lsls	r6, r5, #24
 800f07a:	f100 0304 	add.w	r3, r0, #4
 800f07e:	d50a      	bpl.n	800f096 <_printf_i+0xce>
 800f080:	6805      	ldr	r5, [r0, #0]
 800f082:	600b      	str	r3, [r1, #0]
 800f084:	2d00      	cmp	r5, #0
 800f086:	da03      	bge.n	800f090 <_printf_i+0xc8>
 800f088:	232d      	movs	r3, #45	; 0x2d
 800f08a:	426d      	negs	r5, r5
 800f08c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f090:	485e      	ldr	r0, [pc, #376]	; (800f20c <_printf_i+0x244>)
 800f092:	230a      	movs	r3, #10
 800f094:	e019      	b.n	800f0ca <_printf_i+0x102>
 800f096:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f09a:	6805      	ldr	r5, [r0, #0]
 800f09c:	600b      	str	r3, [r1, #0]
 800f09e:	bf18      	it	ne
 800f0a0:	b22d      	sxthne	r5, r5
 800f0a2:	e7ef      	b.n	800f084 <_printf_i+0xbc>
 800f0a4:	680b      	ldr	r3, [r1, #0]
 800f0a6:	6825      	ldr	r5, [r4, #0]
 800f0a8:	1d18      	adds	r0, r3, #4
 800f0aa:	6008      	str	r0, [r1, #0]
 800f0ac:	0628      	lsls	r0, r5, #24
 800f0ae:	d501      	bpl.n	800f0b4 <_printf_i+0xec>
 800f0b0:	681d      	ldr	r5, [r3, #0]
 800f0b2:	e002      	b.n	800f0ba <_printf_i+0xf2>
 800f0b4:	0669      	lsls	r1, r5, #25
 800f0b6:	d5fb      	bpl.n	800f0b0 <_printf_i+0xe8>
 800f0b8:	881d      	ldrh	r5, [r3, #0]
 800f0ba:	4854      	ldr	r0, [pc, #336]	; (800f20c <_printf_i+0x244>)
 800f0bc:	2f6f      	cmp	r7, #111	; 0x6f
 800f0be:	bf0c      	ite	eq
 800f0c0:	2308      	moveq	r3, #8
 800f0c2:	230a      	movne	r3, #10
 800f0c4:	2100      	movs	r1, #0
 800f0c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f0ca:	6866      	ldr	r6, [r4, #4]
 800f0cc:	60a6      	str	r6, [r4, #8]
 800f0ce:	2e00      	cmp	r6, #0
 800f0d0:	bfa2      	ittt	ge
 800f0d2:	6821      	ldrge	r1, [r4, #0]
 800f0d4:	f021 0104 	bicge.w	r1, r1, #4
 800f0d8:	6021      	strge	r1, [r4, #0]
 800f0da:	b90d      	cbnz	r5, 800f0e0 <_printf_i+0x118>
 800f0dc:	2e00      	cmp	r6, #0
 800f0de:	d04d      	beq.n	800f17c <_printf_i+0x1b4>
 800f0e0:	4616      	mov	r6, r2
 800f0e2:	fbb5 f1f3 	udiv	r1, r5, r3
 800f0e6:	fb03 5711 	mls	r7, r3, r1, r5
 800f0ea:	5dc7      	ldrb	r7, [r0, r7]
 800f0ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f0f0:	462f      	mov	r7, r5
 800f0f2:	42bb      	cmp	r3, r7
 800f0f4:	460d      	mov	r5, r1
 800f0f6:	d9f4      	bls.n	800f0e2 <_printf_i+0x11a>
 800f0f8:	2b08      	cmp	r3, #8
 800f0fa:	d10b      	bne.n	800f114 <_printf_i+0x14c>
 800f0fc:	6823      	ldr	r3, [r4, #0]
 800f0fe:	07df      	lsls	r7, r3, #31
 800f100:	d508      	bpl.n	800f114 <_printf_i+0x14c>
 800f102:	6923      	ldr	r3, [r4, #16]
 800f104:	6861      	ldr	r1, [r4, #4]
 800f106:	4299      	cmp	r1, r3
 800f108:	bfde      	ittt	le
 800f10a:	2330      	movle	r3, #48	; 0x30
 800f10c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f110:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f114:	1b92      	subs	r2, r2, r6
 800f116:	6122      	str	r2, [r4, #16]
 800f118:	f8cd a000 	str.w	sl, [sp]
 800f11c:	464b      	mov	r3, r9
 800f11e:	aa03      	add	r2, sp, #12
 800f120:	4621      	mov	r1, r4
 800f122:	4640      	mov	r0, r8
 800f124:	f7ff fee2 	bl	800eeec <_printf_common>
 800f128:	3001      	adds	r0, #1
 800f12a:	d14c      	bne.n	800f1c6 <_printf_i+0x1fe>
 800f12c:	f04f 30ff 	mov.w	r0, #4294967295
 800f130:	b004      	add	sp, #16
 800f132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f136:	4835      	ldr	r0, [pc, #212]	; (800f20c <_printf_i+0x244>)
 800f138:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f13c:	6823      	ldr	r3, [r4, #0]
 800f13e:	680e      	ldr	r6, [r1, #0]
 800f140:	061f      	lsls	r7, r3, #24
 800f142:	f856 5b04 	ldr.w	r5, [r6], #4
 800f146:	600e      	str	r6, [r1, #0]
 800f148:	d514      	bpl.n	800f174 <_printf_i+0x1ac>
 800f14a:	07d9      	lsls	r1, r3, #31
 800f14c:	bf44      	itt	mi
 800f14e:	f043 0320 	orrmi.w	r3, r3, #32
 800f152:	6023      	strmi	r3, [r4, #0]
 800f154:	b91d      	cbnz	r5, 800f15e <_printf_i+0x196>
 800f156:	6823      	ldr	r3, [r4, #0]
 800f158:	f023 0320 	bic.w	r3, r3, #32
 800f15c:	6023      	str	r3, [r4, #0]
 800f15e:	2310      	movs	r3, #16
 800f160:	e7b0      	b.n	800f0c4 <_printf_i+0xfc>
 800f162:	6823      	ldr	r3, [r4, #0]
 800f164:	f043 0320 	orr.w	r3, r3, #32
 800f168:	6023      	str	r3, [r4, #0]
 800f16a:	2378      	movs	r3, #120	; 0x78
 800f16c:	4828      	ldr	r0, [pc, #160]	; (800f210 <_printf_i+0x248>)
 800f16e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f172:	e7e3      	b.n	800f13c <_printf_i+0x174>
 800f174:	065e      	lsls	r6, r3, #25
 800f176:	bf48      	it	mi
 800f178:	b2ad      	uxthmi	r5, r5
 800f17a:	e7e6      	b.n	800f14a <_printf_i+0x182>
 800f17c:	4616      	mov	r6, r2
 800f17e:	e7bb      	b.n	800f0f8 <_printf_i+0x130>
 800f180:	680b      	ldr	r3, [r1, #0]
 800f182:	6826      	ldr	r6, [r4, #0]
 800f184:	6960      	ldr	r0, [r4, #20]
 800f186:	1d1d      	adds	r5, r3, #4
 800f188:	600d      	str	r5, [r1, #0]
 800f18a:	0635      	lsls	r5, r6, #24
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	d501      	bpl.n	800f194 <_printf_i+0x1cc>
 800f190:	6018      	str	r0, [r3, #0]
 800f192:	e002      	b.n	800f19a <_printf_i+0x1d2>
 800f194:	0671      	lsls	r1, r6, #25
 800f196:	d5fb      	bpl.n	800f190 <_printf_i+0x1c8>
 800f198:	8018      	strh	r0, [r3, #0]
 800f19a:	2300      	movs	r3, #0
 800f19c:	6123      	str	r3, [r4, #16]
 800f19e:	4616      	mov	r6, r2
 800f1a0:	e7ba      	b.n	800f118 <_printf_i+0x150>
 800f1a2:	680b      	ldr	r3, [r1, #0]
 800f1a4:	1d1a      	adds	r2, r3, #4
 800f1a6:	600a      	str	r2, [r1, #0]
 800f1a8:	681e      	ldr	r6, [r3, #0]
 800f1aa:	6862      	ldr	r2, [r4, #4]
 800f1ac:	2100      	movs	r1, #0
 800f1ae:	4630      	mov	r0, r6
 800f1b0:	f7f1 f816 	bl	80001e0 <memchr>
 800f1b4:	b108      	cbz	r0, 800f1ba <_printf_i+0x1f2>
 800f1b6:	1b80      	subs	r0, r0, r6
 800f1b8:	6060      	str	r0, [r4, #4]
 800f1ba:	6863      	ldr	r3, [r4, #4]
 800f1bc:	6123      	str	r3, [r4, #16]
 800f1be:	2300      	movs	r3, #0
 800f1c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f1c4:	e7a8      	b.n	800f118 <_printf_i+0x150>
 800f1c6:	6923      	ldr	r3, [r4, #16]
 800f1c8:	4632      	mov	r2, r6
 800f1ca:	4649      	mov	r1, r9
 800f1cc:	4640      	mov	r0, r8
 800f1ce:	47d0      	blx	sl
 800f1d0:	3001      	adds	r0, #1
 800f1d2:	d0ab      	beq.n	800f12c <_printf_i+0x164>
 800f1d4:	6823      	ldr	r3, [r4, #0]
 800f1d6:	079b      	lsls	r3, r3, #30
 800f1d8:	d413      	bmi.n	800f202 <_printf_i+0x23a>
 800f1da:	68e0      	ldr	r0, [r4, #12]
 800f1dc:	9b03      	ldr	r3, [sp, #12]
 800f1de:	4298      	cmp	r0, r3
 800f1e0:	bfb8      	it	lt
 800f1e2:	4618      	movlt	r0, r3
 800f1e4:	e7a4      	b.n	800f130 <_printf_i+0x168>
 800f1e6:	2301      	movs	r3, #1
 800f1e8:	4632      	mov	r2, r6
 800f1ea:	4649      	mov	r1, r9
 800f1ec:	4640      	mov	r0, r8
 800f1ee:	47d0      	blx	sl
 800f1f0:	3001      	adds	r0, #1
 800f1f2:	d09b      	beq.n	800f12c <_printf_i+0x164>
 800f1f4:	3501      	adds	r5, #1
 800f1f6:	68e3      	ldr	r3, [r4, #12]
 800f1f8:	9903      	ldr	r1, [sp, #12]
 800f1fa:	1a5b      	subs	r3, r3, r1
 800f1fc:	42ab      	cmp	r3, r5
 800f1fe:	dcf2      	bgt.n	800f1e6 <_printf_i+0x21e>
 800f200:	e7eb      	b.n	800f1da <_printf_i+0x212>
 800f202:	2500      	movs	r5, #0
 800f204:	f104 0619 	add.w	r6, r4, #25
 800f208:	e7f5      	b.n	800f1f6 <_printf_i+0x22e>
 800f20a:	bf00      	nop
 800f20c:	0800f495 	.word	0x0800f495
 800f210:	0800f4a6 	.word	0x0800f4a6

0800f214 <memmove>:
 800f214:	4288      	cmp	r0, r1
 800f216:	b510      	push	{r4, lr}
 800f218:	eb01 0402 	add.w	r4, r1, r2
 800f21c:	d902      	bls.n	800f224 <memmove+0x10>
 800f21e:	4284      	cmp	r4, r0
 800f220:	4623      	mov	r3, r4
 800f222:	d807      	bhi.n	800f234 <memmove+0x20>
 800f224:	1e43      	subs	r3, r0, #1
 800f226:	42a1      	cmp	r1, r4
 800f228:	d008      	beq.n	800f23c <memmove+0x28>
 800f22a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f22e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f232:	e7f8      	b.n	800f226 <memmove+0x12>
 800f234:	4402      	add	r2, r0
 800f236:	4601      	mov	r1, r0
 800f238:	428a      	cmp	r2, r1
 800f23a:	d100      	bne.n	800f23e <memmove+0x2a>
 800f23c:	bd10      	pop	{r4, pc}
 800f23e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f242:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f246:	e7f7      	b.n	800f238 <memmove+0x24>

0800f248 <_realloc_r>:
 800f248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f24a:	4607      	mov	r7, r0
 800f24c:	4614      	mov	r4, r2
 800f24e:	460e      	mov	r6, r1
 800f250:	b921      	cbnz	r1, 800f25c <_realloc_r+0x14>
 800f252:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f256:	4611      	mov	r1, r2
 800f258:	f7ff bbec 	b.w	800ea34 <_malloc_r>
 800f25c:	b922      	cbnz	r2, 800f268 <_realloc_r+0x20>
 800f25e:	f7ff fb99 	bl	800e994 <_free_r>
 800f262:	4625      	mov	r5, r4
 800f264:	4628      	mov	r0, r5
 800f266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f268:	f000 f814 	bl	800f294 <_malloc_usable_size_r>
 800f26c:	42a0      	cmp	r0, r4
 800f26e:	d20f      	bcs.n	800f290 <_realloc_r+0x48>
 800f270:	4621      	mov	r1, r4
 800f272:	4638      	mov	r0, r7
 800f274:	f7ff fbde 	bl	800ea34 <_malloc_r>
 800f278:	4605      	mov	r5, r0
 800f27a:	2800      	cmp	r0, #0
 800f27c:	d0f2      	beq.n	800f264 <_realloc_r+0x1c>
 800f27e:	4631      	mov	r1, r6
 800f280:	4622      	mov	r2, r4
 800f282:	f7ff fb71 	bl	800e968 <memcpy>
 800f286:	4631      	mov	r1, r6
 800f288:	4638      	mov	r0, r7
 800f28a:	f7ff fb83 	bl	800e994 <_free_r>
 800f28e:	e7e9      	b.n	800f264 <_realloc_r+0x1c>
 800f290:	4635      	mov	r5, r6
 800f292:	e7e7      	b.n	800f264 <_realloc_r+0x1c>

0800f294 <_malloc_usable_size_r>:
 800f294:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f298:	1f18      	subs	r0, r3, #4
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	bfbc      	itt	lt
 800f29e:	580b      	ldrlt	r3, [r1, r0]
 800f2a0:	18c0      	addlt	r0, r0, r3
 800f2a2:	4770      	bx	lr

0800f2a4 <_init>:
 800f2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2a6:	bf00      	nop
 800f2a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2aa:	bc08      	pop	{r3}
 800f2ac:	469e      	mov	lr, r3
 800f2ae:	4770      	bx	lr

0800f2b0 <_fini>:
 800f2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2b2:	bf00      	nop
 800f2b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2b6:	bc08      	pop	{r3}
 800f2b8:	469e      	mov	lr, r3
 800f2ba:	4770      	bx	lr
