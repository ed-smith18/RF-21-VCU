
RF21_VCU_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ef1c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  0800f0ac  0800f0ac  0001f0ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f2a8  0800f2a8  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800f2a8  0800f2a8  0001f2a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f2b0  0800f2b0  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f2b0  0800f2b0  0001f2b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f2b4  0800f2b4  0001f2b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800f2b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          0000512c  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200051c0  200051c0  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00033c75  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000063e8  00000000  00000000  00053d39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002298  00000000  00000000  0005a128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002078  00000000  00000000  0005c3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a42f  00000000  00000000  0005e438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002c00a  00000000  00000000  00088867  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ef00c  00000000  00000000  000b4871  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001a387d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009928  00000000  00000000  001a38d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f094 	.word	0x0800f094

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800f094 	.word	0x0800f094

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295
 800089c:	f04f 30ff 	movne.w	r0, #4294967295
 80008a0:	f000 b96e 	b.w	8000b80 <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9d08      	ldr	r5, [sp, #32]
 80008c2:	4604      	mov	r4, r0
 80008c4:	468c      	mov	ip, r1
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	f040 8083 	bne.w	80009d2 <__udivmoddi4+0x116>
 80008cc:	428a      	cmp	r2, r1
 80008ce:	4617      	mov	r7, r2
 80008d0:	d947      	bls.n	8000962 <__udivmoddi4+0xa6>
 80008d2:	fab2 f282 	clz	r2, r2
 80008d6:	b142      	cbz	r2, 80008ea <__udivmoddi4+0x2e>
 80008d8:	f1c2 0020 	rsb	r0, r2, #32
 80008dc:	fa24 f000 	lsr.w	r0, r4, r0
 80008e0:	4091      	lsls	r1, r2
 80008e2:	4097      	lsls	r7, r2
 80008e4:	ea40 0c01 	orr.w	ip, r0, r1
 80008e8:	4094      	lsls	r4, r2
 80008ea:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008ee:	0c23      	lsrs	r3, r4, #16
 80008f0:	fbbc f6f8 	udiv	r6, ip, r8
 80008f4:	fa1f fe87 	uxth.w	lr, r7
 80008f8:	fb08 c116 	mls	r1, r8, r6, ip
 80008fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000900:	fb06 f10e 	mul.w	r1, r6, lr
 8000904:	4299      	cmp	r1, r3
 8000906:	d909      	bls.n	800091c <__udivmoddi4+0x60>
 8000908:	18fb      	adds	r3, r7, r3
 800090a:	f106 30ff 	add.w	r0, r6, #4294967295
 800090e:	f080 8119 	bcs.w	8000b44 <__udivmoddi4+0x288>
 8000912:	4299      	cmp	r1, r3
 8000914:	f240 8116 	bls.w	8000b44 <__udivmoddi4+0x288>
 8000918:	3e02      	subs	r6, #2
 800091a:	443b      	add	r3, r7
 800091c:	1a5b      	subs	r3, r3, r1
 800091e:	b2a4      	uxth	r4, r4
 8000920:	fbb3 f0f8 	udiv	r0, r3, r8
 8000924:	fb08 3310 	mls	r3, r8, r0, r3
 8000928:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800092c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000930:	45a6      	cmp	lr, r4
 8000932:	d909      	bls.n	8000948 <__udivmoddi4+0x8c>
 8000934:	193c      	adds	r4, r7, r4
 8000936:	f100 33ff 	add.w	r3, r0, #4294967295
 800093a:	f080 8105 	bcs.w	8000b48 <__udivmoddi4+0x28c>
 800093e:	45a6      	cmp	lr, r4
 8000940:	f240 8102 	bls.w	8000b48 <__udivmoddi4+0x28c>
 8000944:	3802      	subs	r0, #2
 8000946:	443c      	add	r4, r7
 8000948:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800094c:	eba4 040e 	sub.w	r4, r4, lr
 8000950:	2600      	movs	r6, #0
 8000952:	b11d      	cbz	r5, 800095c <__udivmoddi4+0xa0>
 8000954:	40d4      	lsrs	r4, r2
 8000956:	2300      	movs	r3, #0
 8000958:	e9c5 4300 	strd	r4, r3, [r5]
 800095c:	4631      	mov	r1, r6
 800095e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000962:	b902      	cbnz	r2, 8000966 <__udivmoddi4+0xaa>
 8000964:	deff      	udf	#255	; 0xff
 8000966:	fab2 f282 	clz	r2, r2
 800096a:	2a00      	cmp	r2, #0
 800096c:	d150      	bne.n	8000a10 <__udivmoddi4+0x154>
 800096e:	1bcb      	subs	r3, r1, r7
 8000970:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000974:	fa1f f887 	uxth.w	r8, r7
 8000978:	2601      	movs	r6, #1
 800097a:	fbb3 fcfe 	udiv	ip, r3, lr
 800097e:	0c21      	lsrs	r1, r4, #16
 8000980:	fb0e 331c 	mls	r3, lr, ip, r3
 8000984:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000988:	fb08 f30c 	mul.w	r3, r8, ip
 800098c:	428b      	cmp	r3, r1
 800098e:	d907      	bls.n	80009a0 <__udivmoddi4+0xe4>
 8000990:	1879      	adds	r1, r7, r1
 8000992:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000996:	d202      	bcs.n	800099e <__udivmoddi4+0xe2>
 8000998:	428b      	cmp	r3, r1
 800099a:	f200 80e9 	bhi.w	8000b70 <__udivmoddi4+0x2b4>
 800099e:	4684      	mov	ip, r0
 80009a0:	1ac9      	subs	r1, r1, r3
 80009a2:	b2a3      	uxth	r3, r4
 80009a4:	fbb1 f0fe 	udiv	r0, r1, lr
 80009a8:	fb0e 1110 	mls	r1, lr, r0, r1
 80009ac:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80009b0:	fb08 f800 	mul.w	r8, r8, r0
 80009b4:	45a0      	cmp	r8, r4
 80009b6:	d907      	bls.n	80009c8 <__udivmoddi4+0x10c>
 80009b8:	193c      	adds	r4, r7, r4
 80009ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80009be:	d202      	bcs.n	80009c6 <__udivmoddi4+0x10a>
 80009c0:	45a0      	cmp	r8, r4
 80009c2:	f200 80d9 	bhi.w	8000b78 <__udivmoddi4+0x2bc>
 80009c6:	4618      	mov	r0, r3
 80009c8:	eba4 0408 	sub.w	r4, r4, r8
 80009cc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80009d0:	e7bf      	b.n	8000952 <__udivmoddi4+0x96>
 80009d2:	428b      	cmp	r3, r1
 80009d4:	d909      	bls.n	80009ea <__udivmoddi4+0x12e>
 80009d6:	2d00      	cmp	r5, #0
 80009d8:	f000 80b1 	beq.w	8000b3e <__udivmoddi4+0x282>
 80009dc:	2600      	movs	r6, #0
 80009de:	e9c5 0100 	strd	r0, r1, [r5]
 80009e2:	4630      	mov	r0, r6
 80009e4:	4631      	mov	r1, r6
 80009e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ea:	fab3 f683 	clz	r6, r3
 80009ee:	2e00      	cmp	r6, #0
 80009f0:	d14a      	bne.n	8000a88 <__udivmoddi4+0x1cc>
 80009f2:	428b      	cmp	r3, r1
 80009f4:	d302      	bcc.n	80009fc <__udivmoddi4+0x140>
 80009f6:	4282      	cmp	r2, r0
 80009f8:	f200 80b8 	bhi.w	8000b6c <__udivmoddi4+0x2b0>
 80009fc:	1a84      	subs	r4, r0, r2
 80009fe:	eb61 0103 	sbc.w	r1, r1, r3
 8000a02:	2001      	movs	r0, #1
 8000a04:	468c      	mov	ip, r1
 8000a06:	2d00      	cmp	r5, #0
 8000a08:	d0a8      	beq.n	800095c <__udivmoddi4+0xa0>
 8000a0a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a0e:	e7a5      	b.n	800095c <__udivmoddi4+0xa0>
 8000a10:	f1c2 0320 	rsb	r3, r2, #32
 8000a14:	fa20 f603 	lsr.w	r6, r0, r3
 8000a18:	4097      	lsls	r7, r2
 8000a1a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a1e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a22:	40d9      	lsrs	r1, r3
 8000a24:	4330      	orrs	r0, r6
 8000a26:	0c03      	lsrs	r3, r0, #16
 8000a28:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a2c:	fa1f f887 	uxth.w	r8, r7
 8000a30:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a38:	fb06 f108 	mul.w	r1, r6, r8
 8000a3c:	4299      	cmp	r1, r3
 8000a3e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a42:	d909      	bls.n	8000a58 <__udivmoddi4+0x19c>
 8000a44:	18fb      	adds	r3, r7, r3
 8000a46:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a4a:	f080 808d 	bcs.w	8000b68 <__udivmoddi4+0x2ac>
 8000a4e:	4299      	cmp	r1, r3
 8000a50:	f240 808a 	bls.w	8000b68 <__udivmoddi4+0x2ac>
 8000a54:	3e02      	subs	r6, #2
 8000a56:	443b      	add	r3, r7
 8000a58:	1a5b      	subs	r3, r3, r1
 8000a5a:	b281      	uxth	r1, r0
 8000a5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a68:	fb00 f308 	mul.w	r3, r0, r8
 8000a6c:	428b      	cmp	r3, r1
 8000a6e:	d907      	bls.n	8000a80 <__udivmoddi4+0x1c4>
 8000a70:	1879      	adds	r1, r7, r1
 8000a72:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a76:	d273      	bcs.n	8000b60 <__udivmoddi4+0x2a4>
 8000a78:	428b      	cmp	r3, r1
 8000a7a:	d971      	bls.n	8000b60 <__udivmoddi4+0x2a4>
 8000a7c:	3802      	subs	r0, #2
 8000a7e:	4439      	add	r1, r7
 8000a80:	1acb      	subs	r3, r1, r3
 8000a82:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a86:	e778      	b.n	800097a <__udivmoddi4+0xbe>
 8000a88:	f1c6 0c20 	rsb	ip, r6, #32
 8000a8c:	fa03 f406 	lsl.w	r4, r3, r6
 8000a90:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a94:	431c      	orrs	r4, r3
 8000a96:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000a9e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000aa2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000aa6:	431f      	orrs	r7, r3
 8000aa8:	0c3b      	lsrs	r3, r7, #16
 8000aaa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000aae:	fa1f f884 	uxth.w	r8, r4
 8000ab2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ab6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000aba:	fb09 fa08 	mul.w	sl, r9, r8
 8000abe:	458a      	cmp	sl, r1
 8000ac0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ac4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ac8:	d908      	bls.n	8000adc <__udivmoddi4+0x220>
 8000aca:	1861      	adds	r1, r4, r1
 8000acc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ad0:	d248      	bcs.n	8000b64 <__udivmoddi4+0x2a8>
 8000ad2:	458a      	cmp	sl, r1
 8000ad4:	d946      	bls.n	8000b64 <__udivmoddi4+0x2a8>
 8000ad6:	f1a9 0902 	sub.w	r9, r9, #2
 8000ada:	4421      	add	r1, r4
 8000adc:	eba1 010a 	sub.w	r1, r1, sl
 8000ae0:	b2bf      	uxth	r7, r7
 8000ae2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ae6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000aea:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000aee:	fb00 f808 	mul.w	r8, r0, r8
 8000af2:	45b8      	cmp	r8, r7
 8000af4:	d907      	bls.n	8000b06 <__udivmoddi4+0x24a>
 8000af6:	19e7      	adds	r7, r4, r7
 8000af8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000afc:	d22e      	bcs.n	8000b5c <__udivmoddi4+0x2a0>
 8000afe:	45b8      	cmp	r8, r7
 8000b00:	d92c      	bls.n	8000b5c <__udivmoddi4+0x2a0>
 8000b02:	3802      	subs	r0, #2
 8000b04:	4427      	add	r7, r4
 8000b06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b0a:	eba7 0708 	sub.w	r7, r7, r8
 8000b0e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b12:	454f      	cmp	r7, r9
 8000b14:	46c6      	mov	lr, r8
 8000b16:	4649      	mov	r1, r9
 8000b18:	d31a      	bcc.n	8000b50 <__udivmoddi4+0x294>
 8000b1a:	d017      	beq.n	8000b4c <__udivmoddi4+0x290>
 8000b1c:	b15d      	cbz	r5, 8000b36 <__udivmoddi4+0x27a>
 8000b1e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b22:	eb67 0701 	sbc.w	r7, r7, r1
 8000b26:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b2a:	40f2      	lsrs	r2, r6
 8000b2c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b30:	40f7      	lsrs	r7, r6
 8000b32:	e9c5 2700 	strd	r2, r7, [r5]
 8000b36:	2600      	movs	r6, #0
 8000b38:	4631      	mov	r1, r6
 8000b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3e:	462e      	mov	r6, r5
 8000b40:	4628      	mov	r0, r5
 8000b42:	e70b      	b.n	800095c <__udivmoddi4+0xa0>
 8000b44:	4606      	mov	r6, r0
 8000b46:	e6e9      	b.n	800091c <__udivmoddi4+0x60>
 8000b48:	4618      	mov	r0, r3
 8000b4a:	e6fd      	b.n	8000948 <__udivmoddi4+0x8c>
 8000b4c:	4543      	cmp	r3, r8
 8000b4e:	d2e5      	bcs.n	8000b1c <__udivmoddi4+0x260>
 8000b50:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b54:	eb69 0104 	sbc.w	r1, r9, r4
 8000b58:	3801      	subs	r0, #1
 8000b5a:	e7df      	b.n	8000b1c <__udivmoddi4+0x260>
 8000b5c:	4608      	mov	r0, r1
 8000b5e:	e7d2      	b.n	8000b06 <__udivmoddi4+0x24a>
 8000b60:	4660      	mov	r0, ip
 8000b62:	e78d      	b.n	8000a80 <__udivmoddi4+0x1c4>
 8000b64:	4681      	mov	r9, r0
 8000b66:	e7b9      	b.n	8000adc <__udivmoddi4+0x220>
 8000b68:	4666      	mov	r6, ip
 8000b6a:	e775      	b.n	8000a58 <__udivmoddi4+0x19c>
 8000b6c:	4630      	mov	r0, r6
 8000b6e:	e74a      	b.n	8000a06 <__udivmoddi4+0x14a>
 8000b70:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b74:	4439      	add	r1, r7
 8000b76:	e713      	b.n	80009a0 <__udivmoddi4+0xe4>
 8000b78:	3802      	subs	r0, #2
 8000b7a:	443c      	add	r4, r7
 8000b7c:	e724      	b.n	80009c8 <__udivmoddi4+0x10c>
 8000b7e:	bf00      	nop

08000b80 <__aeabi_idiv0>:
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop

08000b84 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	4a07      	ldr	r2, [pc, #28]	; (8000bb0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b94:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	4a06      	ldr	r2, [pc, #24]	; (8000bb4 <vApplicationGetIdleTaskMemory+0x30>)
 8000b9a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2280      	movs	r2, #128	; 0x80
 8000ba0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000ba2:	bf00      	nop
 8000ba4:	3714      	adds	r7, #20
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	200000b0 	.word	0x200000b0
 8000bb4:	20000164 	.word	0x20000164

08000bb8 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	4a07      	ldr	r2, [pc, #28]	; (8000be4 <vApplicationGetTimerTaskMemory+0x2c>)
 8000bc8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	4a06      	ldr	r2, [pc, #24]	; (8000be8 <vApplicationGetTimerTaskMemory+0x30>)
 8000bce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bd6:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000bd8:	bf00      	nop
 8000bda:	3714      	adds	r7, #20
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	20000364 	.word	0x20000364
 8000be8:	20000418 	.word	0x20000418

08000bec <HAL_CAN_RxFifo0MsgPendingCallback>:
uint8_t TxData[8];
uint8_t RxData[8];

uint32_t TxMailbox;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]

	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8000bf4:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000bf6:	4a0b      	ldr	r2, [pc, #44]	; (8000c24 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f002 f902 	bl	8002e04 <HAL_CAN_GetRxMessage>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
		Error_Handler();
 8000c06:	f000 fdef 	bl	80017e8 <Error_Handler>
	}
	HAL_GPIO_WritePin(GPIOD, LD3_Pin, GPIO_PIN_SET);
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c10:	4805      	ldr	r0, [pc, #20]	; (8000c28 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000c12:	f003 fa65 	bl	80040e0 <HAL_GPIO_WritePin>
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	200048dc 	.word	0x200048dc
 8000c24:	200049cc 	.word	0x200049cc
 8000c28:	40020c00 	.word	0x40020c00

08000c2c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000c2c:	b5b0      	push	{r4, r5, r7, lr}
 8000c2e:	b09e      	sub	sp, #120	; 0x78
 8000c30:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000c32:	f001 fa4f 	bl	80020d4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000c36:	f000 f8c1 	bl	8000dbc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000c3a:	f000 fb5f 	bl	80012fc <MX_GPIO_Init>
	MX_I2C1_Init();
 8000c3e:	f000 fa6f 	bl	8001120 <MX_I2C1_Init>
	MX_I2S3_Init();
 8000c42:	f000 fa9b 	bl	800117c <MX_I2S3_Init>
	MX_SPI1_Init();
 8000c46:	f000 fac9 	bl	80011dc <MX_SPI1_Init>
	MX_DMA_Init();
 8000c4a:	f000 fb27 	bl	800129c <MX_DMA_Init>
	MX_ADC1_Init();
 8000c4e:	f000 f91f 	bl	8000e90 <MX_ADC1_Init>
	MX_USART2_UART_Init();
 8000c52:	f000 faf9 	bl	8001248 <MX_USART2_UART_Init>
	MX_ADC2_Init();
 8000c56:	f000 f96d 	bl	8000f34 <MX_ADC2_Init>
	MX_ADC3_Init();
 8000c5a:	f000 f9bd 	bl	8000fd8 <MX_ADC3_Init>
	MX_CAN1_Init();
 8000c5e:	f000 fa0d 	bl	800107c <MX_CAN1_Init>
	/* USER CODE BEGIN 2 */
	HAL_ADC_Start_DMA(&hadc1, &appsVal[0], 1); //start the ADC for APPS 1 in DMA mode
 8000c62:	2201      	movs	r2, #1
 8000c64:	4943      	ldr	r1, [pc, #268]	; (8000d74 <main+0x148>)
 8000c66:	4844      	ldr	r0, [pc, #272]	; (8000d78 <main+0x14c>)
 8000c68:	f001 fade 	bl	8002228 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc3, &bpsVal, 1); //start the ADC for Brake Pressure Sensor in DMA mode
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	4943      	ldr	r1, [pc, #268]	; (8000d7c <main+0x150>)
 8000c70:	4843      	ldr	r0, [pc, #268]	; (8000d80 <main+0x154>)
 8000c72:	f001 fad9 	bl	8002228 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, &appsVal[1], 1); //start the ADC for APPS 2 in DMA mode
 8000c76:	2201      	movs	r2, #1
 8000c78:	4942      	ldr	r1, [pc, #264]	; (8000d84 <main+0x158>)
 8000c7a:	4843      	ldr	r0, [pc, #268]	; (8000d88 <main+0x15c>)
 8000c7c:	f001 fad4 	bl	8002228 <HAL_ADC_Start_DMA>

	//Start the CAN Bus
	HAL_CAN_Start(&hcan1);
 8000c80:	4842      	ldr	r0, [pc, #264]	; (8000d8c <main+0x160>)
 8000c82:	f002 f87b 	bl	8002d7c <HAL_CAN_Start>

	//Initialize the CAN RX Interrupt
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)
 8000c86:	2102      	movs	r1, #2
 8000c88:	4840      	ldr	r0, [pc, #256]	; (8000d8c <main+0x160>)
 8000c8a:	f002 f9cd 	bl	8003028 <HAL_CAN_ActivateNotification>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <main+0x6c>
			!= HAL_OK) {
		Error_Handler();
 8000c94:	f000 fda8 	bl	80017e8 <Error_Handler>
	}

	//Setting Required Data Values for CAN frame
	TxHeader.DLC = 8;	//data length in bytes
 8000c98:	4b3d      	ldr	r3, [pc, #244]	; (8000d90 <main+0x164>)
 8000c9a:	2208      	movs	r2, #8
 8000c9c:	611a      	str	r2, [r3, #16]
	TxHeader.ExtId = 0;
 8000c9e:	4b3c      	ldr	r3, [pc, #240]	; (8000d90 <main+0x164>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	605a      	str	r2, [r3, #4]
	TxHeader.IDE = CAN_ID_STD; //specify standard CAN ID
 8000ca4:	4b3a      	ldr	r3, [pc, #232]	; (8000d90 <main+0x164>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA; //specifies we are sending a CAN frame
 8000caa:	4b39      	ldr	r3, [pc, #228]	; (8000d90 <main+0x164>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = 0x21;	//CAN ID of this device
 8000cb0:	4b37      	ldr	r3, [pc, #220]	; (8000d90 <main+0x164>)
 8000cb2:	2221      	movs	r2, #33	; 0x21
 8000cb4:	601a      	str	r2, [r3, #0]
	TxHeader.TransmitGlobalTime = DISABLE;
 8000cb6:	4b36      	ldr	r3, [pc, #216]	; (8000d90 <main+0x164>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	751a      	strb	r2, [r3, #20]
	/* add semaphores, ... */
	/* USER CODE END RTOS_SEMAPHORES */

	/* Create the timer(s) */
	/* definition and creation of implausibility_Timer */
	osTimerDef(implausibility_Timer, OTCallback);
 8000cbc:	4b35      	ldr	r3, [pc, #212]	; (8000d94 <main+0x168>)
 8000cbe:	673b      	str	r3, [r7, #112]	; 0x70
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	677b      	str	r3, [r7, #116]	; 0x74
	implausibility_TimerHandle = osTimerCreate(osTimer(implausibility_Timer),
 8000cc4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f00a fb5d 	bl	800b38c <osTimerCreate>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	4a30      	ldr	r2, [pc, #192]	; (8000d98 <main+0x16c>)
 8000cd6:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of ledTask */
	osThreadDef(ledTask, startLEDTask, osPriorityNormal, 0, 128);
 8000cd8:	4b30      	ldr	r3, [pc, #192]	; (8000d9c <main+0x170>)
 8000cda:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000cde:	461d      	mov	r5, r3
 8000ce0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ce2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ce4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ce8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	ledTaskHandle = osThreadCreate(osThread(ledTask), NULL);
 8000cec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f00a fae9 	bl	800b2ca <osThreadCreate>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	4a29      	ldr	r2, [pc, #164]	; (8000da0 <main+0x174>)
 8000cfc:	6013      	str	r3, [r2, #0]

	/* definition and creation of uartTask */
	osThreadDef(uartTask, startUART_Task, osPriorityNormal, 0, 256);
 8000cfe:	4b29      	ldr	r3, [pc, #164]	; (8000da4 <main+0x178>)
 8000d00:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000d04:	461d      	mov	r5, r3
 8000d06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d0a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	uartTaskHandle = osThreadCreate(osThread(uartTask), NULL);
 8000d12:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d16:	2100      	movs	r1, #0
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f00a fad6 	bl	800b2ca <osThreadCreate>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	4a21      	ldr	r2, [pc, #132]	; (8000da8 <main+0x17c>)
 8000d22:	6013      	str	r3, [r2, #0]

	/* definition and creation of Torque_Command */
	osThreadDef(Torque_Command, startTorqueCommand, osPriorityRealtime, 0, 256);
 8000d24:	4b21      	ldr	r3, [pc, #132]	; (8000dac <main+0x180>)
 8000d26:	f107 041c 	add.w	r4, r7, #28
 8000d2a:	461d      	mov	r5, r3
 8000d2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d30:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d34:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Torque_CommandHandle = osThreadCreate(osThread(Torque_Command), NULL);
 8000d38:	f107 031c 	add.w	r3, r7, #28
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f00a fac3 	bl	800b2ca <osThreadCreate>
 8000d44:	4603      	mov	r3, r0
 8000d46:	4a1a      	ldr	r2, [pc, #104]	; (8000db0 <main+0x184>)
 8000d48:	6013      	str	r3, [r2, #0]

	/* definition and creation of BPS_Limit_Check */
	osThreadDef(BPS_Limit_Check, startBPSCheck, osPriorityHigh, 0, 128);
 8000d4a:	4b1a      	ldr	r3, [pc, #104]	; (8000db4 <main+0x188>)
 8000d4c:	463c      	mov	r4, r7
 8000d4e:	461d      	mov	r5, r3
 8000d50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d54:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d58:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	BPS_Limit_CheckHandle = osThreadCreate(osThread(BPS_Limit_Check), NULL);
 8000d5c:	463b      	mov	r3, r7
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4618      	mov	r0, r3
 8000d62:	f00a fab2 	bl	800b2ca <osThreadCreate>
 8000d66:	4603      	mov	r3, r0
 8000d68:	4a13      	ldr	r2, [pc, #76]	; (8000db8 <main+0x18c>)
 8000d6a:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000d6c:	f00a faa6 	bl	800b2bc <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000d70:	e7fe      	b.n	8000d70 <main+0x144>
 8000d72:	bf00      	nop
 8000d74:	200049e8 	.word	0x200049e8
 8000d78:	20004784 	.word	0x20004784
 8000d7c:	20004874 	.word	0x20004874
 8000d80:	200047cc 	.word	0x200047cc
 8000d84:	200049ec 	.word	0x200049ec
 8000d88:	20004680 	.word	0x20004680
 8000d8c:	2000498c 	.word	0x2000498c
 8000d90:	200049b4 	.word	0x200049b4
 8000d94:	080017b1 	.word	0x080017b1
 8000d98:	20004988 	.word	0x20004988
 8000d9c:	0800f0e0 	.word	0x0800f0e0
 8000da0:	2000471c 	.word	0x2000471c
 8000da4:	0800f0fc 	.word	0x0800f0fc
 8000da8:	20004780 	.word	0x20004780
 8000dac:	0800f118 	.word	0x0800f118
 8000db0:	2000467c 	.word	0x2000467c
 8000db4:	0800f134 	.word	0x0800f134
 8000db8:	20004a38 	.word	0x20004a38

08000dbc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b094      	sub	sp, #80	; 0x50
 8000dc0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000dc2:	f107 0320 	add.w	r3, r7, #32
 8000dc6:	2230      	movs	r2, #48	; 0x30
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f00d fcd2 	bl	800e774 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000dd0:	f107 030c 	add.w	r3, r7, #12
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000de0:	2300      	movs	r3, #0
 8000de2:	60bb      	str	r3, [r7, #8]
 8000de4:	4b28      	ldr	r3, [pc, #160]	; (8000e88 <SystemClock_Config+0xcc>)
 8000de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de8:	4a27      	ldr	r2, [pc, #156]	; (8000e88 <SystemClock_Config+0xcc>)
 8000dea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dee:	6413      	str	r3, [r2, #64]	; 0x40
 8000df0:	4b25      	ldr	r3, [pc, #148]	; (8000e88 <SystemClock_Config+0xcc>)
 8000df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df8:	60bb      	str	r3, [r7, #8]
 8000dfa:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	607b      	str	r3, [r7, #4]
 8000e00:	4b22      	ldr	r3, [pc, #136]	; (8000e8c <SystemClock_Config+0xd0>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a21      	ldr	r2, [pc, #132]	; (8000e8c <SystemClock_Config+0xd0>)
 8000e06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e0a:	6013      	str	r3, [r2, #0]
 8000e0c:	4b1f      	ldr	r3, [pc, #124]	; (8000e8c <SystemClock_Config+0xd0>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e14:	607b      	str	r3, [r7, #4]
 8000e16:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e22:	2302      	movs	r3, #2
 8000e24:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e26:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000e2c:	2308      	movs	r3, #8
 8000e2e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000e30:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000e34:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e36:	2302      	movs	r3, #2
 8000e38:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e3a:	2307      	movs	r3, #7
 8000e3c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000e3e:	f107 0320 	add.w	r3, r7, #32
 8000e42:	4618      	mov	r0, r3
 8000e44:	f005 fcd4 	bl	80067f0 <HAL_RCC_OscConfig>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <SystemClock_Config+0x96>
		Error_Handler();
 8000e4e:	f000 fccb 	bl	80017e8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000e52:	230f      	movs	r3, #15
 8000e54:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e56:	2302      	movs	r3, #2
 8000e58:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e5e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e62:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e68:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000e6a:	f107 030c 	add.w	r3, r7, #12
 8000e6e:	2105      	movs	r1, #5
 8000e70:	4618      	mov	r0, r3
 8000e72:	f005 ff35 	bl	8006ce0 <HAL_RCC_ClockConfig>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <SystemClock_Config+0xc4>
		Error_Handler();
 8000e7c:	f000 fcb4 	bl	80017e8 <Error_Handler>
	}
}
 8000e80:	bf00      	nop
 8000e82:	3750      	adds	r7, #80	; 0x50
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40007000 	.word	0x40007000

08000e90 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000e96:	463b      	mov	r3, r7
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000ea2:	4b21      	ldr	r3, [pc, #132]	; (8000f28 <MX_ADC1_Init+0x98>)
 8000ea4:	4a21      	ldr	r2, [pc, #132]	; (8000f2c <MX_ADC1_Init+0x9c>)
 8000ea6:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ea8:	4b1f      	ldr	r3, [pc, #124]	; (8000f28 <MX_ADC1_Init+0x98>)
 8000eaa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000eae:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000eb0:	4b1d      	ldr	r3, [pc, #116]	; (8000f28 <MX_ADC1_Init+0x98>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8000eb6:	4b1c      	ldr	r3, [pc, #112]	; (8000f28 <MX_ADC1_Init+0x98>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000ebc:	4b1a      	ldr	r3, [pc, #104]	; (8000f28 <MX_ADC1_Init+0x98>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ec2:	4b19      	ldr	r3, [pc, #100]	; (8000f28 <MX_ADC1_Init+0x98>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eca:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <MX_ADC1_Init+0x98>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ed0:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <MX_ADC1_Init+0x98>)
 8000ed2:	4a17      	ldr	r2, [pc, #92]	; (8000f30 <MX_ADC1_Init+0xa0>)
 8000ed4:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ed6:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <MX_ADC1_Init+0x98>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8000edc:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <MX_ADC1_Init+0x98>)
 8000ede:	2201      	movs	r2, #1
 8000ee0:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ee2:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <MX_ADC1_Init+0x98>)
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eea:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <MX_ADC1_Init+0x98>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000ef0:	480d      	ldr	r0, [pc, #52]	; (8000f28 <MX_ADC1_Init+0x98>)
 8000ef2:	f001 f955 	bl	80021a0 <HAL_ADC_Init>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_ADC1_Init+0x70>
		Error_Handler();
 8000efc:	f000 fc74 	bl	80017e8 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8000f00:	2301      	movs	r3, #1
 8000f02:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000f04:	2301      	movs	r3, #1
 8000f06:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000f0c:	463b      	mov	r3, r7
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4805      	ldr	r0, [pc, #20]	; (8000f28 <MX_ADC1_Init+0x98>)
 8000f12:	f001 fab7 	bl	8002484 <HAL_ADC_ConfigChannel>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_ADC1_Init+0x90>
		Error_Handler();
 8000f1c:	f000 fc64 	bl	80017e8 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000f20:	bf00      	nop
 8000f22:	3710      	adds	r7, #16
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20004784 	.word	0x20004784
 8000f2c:	40012000 	.word	0x40012000
 8000f30:	0f000001 	.word	0x0f000001

08000f34 <MX_ADC2_Init>:
/**
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000f3a:	463b      	mov	r3, r7
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC2_Init 1 */

	/* USER CODE END ADC2_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc2.Instance = ADC2;
 8000f46:	4b21      	ldr	r3, [pc, #132]	; (8000fcc <MX_ADC2_Init+0x98>)
 8000f48:	4a21      	ldr	r2, [pc, #132]	; (8000fd0 <MX_ADC2_Init+0x9c>)
 8000f4a:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f4c:	4b1f      	ldr	r3, [pc, #124]	; (8000fcc <MX_ADC2_Init+0x98>)
 8000f4e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f52:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000f54:	4b1d      	ldr	r3, [pc, #116]	; (8000fcc <MX_ADC2_Init+0x98>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
	hadc2.Init.ScanConvMode = DISABLE;
 8000f5a:	4b1c      	ldr	r3, [pc, #112]	; (8000fcc <MX_ADC2_Init+0x98>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	611a      	str	r2, [r3, #16]
	hadc2.Init.ContinuousConvMode = ENABLE;
 8000f60:	4b1a      	ldr	r3, [pc, #104]	; (8000fcc <MX_ADC2_Init+0x98>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	761a      	strb	r2, [r3, #24]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000f66:	4b19      	ldr	r3, [pc, #100]	; (8000fcc <MX_ADC2_Init+0x98>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f6e:	4b17      	ldr	r3, [pc, #92]	; (8000fcc <MX_ADC2_Init+0x98>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f74:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <MX_ADC2_Init+0x98>)
 8000f76:	4a17      	ldr	r2, [pc, #92]	; (8000fd4 <MX_ADC2_Init+0xa0>)
 8000f78:	629a      	str	r2, [r3, #40]	; 0x28
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f7a:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <MX_ADC2_Init+0x98>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	60da      	str	r2, [r3, #12]
	hadc2.Init.NbrOfConversion = 1;
 8000f80:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <MX_ADC2_Init+0x98>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	61da      	str	r2, [r3, #28]
	hadc2.Init.DMAContinuousRequests = ENABLE;
 8000f86:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <MX_ADC2_Init+0x98>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f8e:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <MX_ADC2_Init+0x98>)
 8000f90:	2201      	movs	r2, #1
 8000f92:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 8000f94:	480d      	ldr	r0, [pc, #52]	; (8000fcc <MX_ADC2_Init+0x98>)
 8000f96:	f001 f903 	bl	80021a0 <HAL_ADC_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_ADC2_Init+0x70>
		Error_Handler();
 8000fa0:	f000 fc22 	bl	80017e8 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4805      	ldr	r0, [pc, #20]	; (8000fcc <MX_ADC2_Init+0x98>)
 8000fb6:	f001 fa65 	bl	8002484 <HAL_ADC_ConfigChannel>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_ADC2_Init+0x90>
		Error_Handler();
 8000fc0:	f000 fc12 	bl	80017e8 <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 8000fc4:	bf00      	nop
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20004680 	.word	0x20004680
 8000fd0:	40012100 	.word	0x40012100
 8000fd4:	0f000001 	.word	0x0f000001

08000fd8 <MX_ADC3_Init>:
/**
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000fde:	463b      	mov	r3, r7
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC3_Init 1 */

	/* USER CODE END ADC3_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc3.Instance = ADC3;
 8000fea:	4b21      	ldr	r3, [pc, #132]	; (8001070 <MX_ADC3_Init+0x98>)
 8000fec:	4a21      	ldr	r2, [pc, #132]	; (8001074 <MX_ADC3_Init+0x9c>)
 8000fee:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ff0:	4b1f      	ldr	r3, [pc, #124]	; (8001070 <MX_ADC3_Init+0x98>)
 8000ff2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ff6:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000ff8:	4b1d      	ldr	r3, [pc, #116]	; (8001070 <MX_ADC3_Init+0x98>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = DISABLE;
 8000ffe:	4b1c      	ldr	r3, [pc, #112]	; (8001070 <MX_ADC3_Init+0x98>)
 8001000:	2200      	movs	r2, #0
 8001002:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = ENABLE;
 8001004:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <MX_ADC3_Init+0x98>)
 8001006:	2201      	movs	r2, #1
 8001008:	761a      	strb	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 800100a:	4b19      	ldr	r3, [pc, #100]	; (8001070 <MX_ADC3_Init+0x98>)
 800100c:	2200      	movs	r2, #0
 800100e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001012:	4b17      	ldr	r3, [pc, #92]	; (8001070 <MX_ADC3_Init+0x98>)
 8001014:	2200      	movs	r2, #0
 8001016:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001018:	4b15      	ldr	r3, [pc, #84]	; (8001070 <MX_ADC3_Init+0x98>)
 800101a:	4a17      	ldr	r2, [pc, #92]	; (8001078 <MX_ADC3_Init+0xa0>)
 800101c:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800101e:	4b14      	ldr	r3, [pc, #80]	; (8001070 <MX_ADC3_Init+0x98>)
 8001020:	2200      	movs	r2, #0
 8001022:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 8001024:	4b12      	ldr	r3, [pc, #72]	; (8001070 <MX_ADC3_Init+0x98>)
 8001026:	2201      	movs	r2, #1
 8001028:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = ENABLE;
 800102a:	4b11      	ldr	r3, [pc, #68]	; (8001070 <MX_ADC3_Init+0x98>)
 800102c:	2201      	movs	r2, #1
 800102e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001032:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <MX_ADC3_Init+0x98>)
 8001034:	2201      	movs	r2, #1
 8001036:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 8001038:	480d      	ldr	r0, [pc, #52]	; (8001070 <MX_ADC3_Init+0x98>)
 800103a:	f001 f8b1 	bl	80021a0 <HAL_ADC_Init>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_ADC3_Init+0x70>
		Error_Handler();
 8001044:	f000 fbd0 	bl	80017e8 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_12;
 8001048:	230c      	movs	r3, #12
 800104a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 800104c:	2301      	movs	r3, #1
 800104e:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001050:	2300      	movs	r3, #0
 8001052:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8001054:	463b      	mov	r3, r7
 8001056:	4619      	mov	r1, r3
 8001058:	4805      	ldr	r0, [pc, #20]	; (8001070 <MX_ADC3_Init+0x98>)
 800105a:	f001 fa13 	bl	8002484 <HAL_ADC_ConfigChannel>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_ADC3_Init+0x90>
		Error_Handler();
 8001064:	f000 fbc0 	bl	80017e8 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 8001068:	bf00      	nop
 800106a:	3710      	adds	r7, #16
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	200047cc 	.word	0x200047cc
 8001074:	40012200 	.word	0x40012200
 8001078:	0f000001 	.word	0x0f000001

0800107c <MX_CAN1_Init>:
/**
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void) {
 800107c:	b580      	push	{r7, lr}
 800107e:	b08a      	sub	sp, #40	; 0x28
 8001080:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 8001082:	4b25      	ldr	r3, [pc, #148]	; (8001118 <MX_CAN1_Init+0x9c>)
 8001084:	4a25      	ldr	r2, [pc, #148]	; (800111c <MX_CAN1_Init+0xa0>)
 8001086:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 14;
 8001088:	4b23      	ldr	r3, [pc, #140]	; (8001118 <MX_CAN1_Init+0x9c>)
 800108a:	220e      	movs	r2, #14
 800108c:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 800108e:	4b22      	ldr	r3, [pc, #136]	; (8001118 <MX_CAN1_Init+0x9c>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001094:	4b20      	ldr	r3, [pc, #128]	; (8001118 <MX_CAN1_Init+0x9c>)
 8001096:	2200      	movs	r2, #0
 8001098:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800109a:	4b1f      	ldr	r3, [pc, #124]	; (8001118 <MX_CAN1_Init+0x9c>)
 800109c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010a0:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 80010a2:	4b1d      	ldr	r3, [pc, #116]	; (8001118 <MX_CAN1_Init+0x9c>)
 80010a4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80010a8:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 80010aa:	4b1b      	ldr	r3, [pc, #108]	; (8001118 <MX_CAN1_Init+0x9c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 80010b0:	4b19      	ldr	r3, [pc, #100]	; (8001118 <MX_CAN1_Init+0x9c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 80010b6:	4b18      	ldr	r3, [pc, #96]	; (8001118 <MX_CAN1_Init+0x9c>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 80010bc:	4b16      	ldr	r3, [pc, #88]	; (8001118 <MX_CAN1_Init+0x9c>)
 80010be:	2200      	movs	r2, #0
 80010c0:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 80010c2:	4b15      	ldr	r3, [pc, #84]	; (8001118 <MX_CAN1_Init+0x9c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 80010c8:	4b13      	ldr	r3, [pc, #76]	; (8001118 <MX_CAN1_Init+0x9c>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 80010ce:	4812      	ldr	r0, [pc, #72]	; (8001118 <MX_CAN1_Init+0x9c>)
 80010d0:	f001 fc78 	bl	80029c4 <HAL_CAN_Init>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_CAN1_Init+0x62>
		Error_Handler();
 80010da:	f000 fb85 	bl	80017e8 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */
	CAN_FilterTypeDef canfilterconfig;
	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80010de:	2301      	movs	r3, #1
 80010e0:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0x0000;
 80010ee:	2300      	movs	r3, #0
 80010f0:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80010fe:	2301      	movs	r3, #1
 8001100:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 0; // how many filters to assign to the CAN1 (master can)
 8001102:	2300      	movs	r3, #0
 8001104:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8001106:	463b      	mov	r3, r7
 8001108:	4619      	mov	r1, r3
 800110a:	4803      	ldr	r0, [pc, #12]	; (8001118 <MX_CAN1_Init+0x9c>)
 800110c:	f001 fd56 	bl	8002bbc <HAL_CAN_ConfigFilter>
	/* USER CODE END CAN1_Init 2 */

}
 8001110:	bf00      	nop
 8001112:	3728      	adds	r7, #40	; 0x28
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	2000498c 	.word	0x2000498c
 800111c:	40006400 	.word	0x40006400

08001120 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001124:	4b12      	ldr	r3, [pc, #72]	; (8001170 <MX_I2C1_Init+0x50>)
 8001126:	4a13      	ldr	r2, [pc, #76]	; (8001174 <MX_I2C1_Init+0x54>)
 8001128:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800112a:	4b11      	ldr	r3, [pc, #68]	; (8001170 <MX_I2C1_Init+0x50>)
 800112c:	4a12      	ldr	r2, [pc, #72]	; (8001178 <MX_I2C1_Init+0x58>)
 800112e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001130:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <MX_I2C1_Init+0x50>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001136:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <MX_I2C1_Init+0x50>)
 8001138:	2200      	movs	r2, #0
 800113a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800113c:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <MX_I2C1_Init+0x50>)
 800113e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001142:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001144:	4b0a      	ldr	r3, [pc, #40]	; (8001170 <MX_I2C1_Init+0x50>)
 8001146:	2200      	movs	r2, #0
 8001148:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800114a:	4b09      	ldr	r3, [pc, #36]	; (8001170 <MX_I2C1_Init+0x50>)
 800114c:	2200      	movs	r2, #0
 800114e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001150:	4b07      	ldr	r3, [pc, #28]	; (8001170 <MX_I2C1_Init+0x50>)
 8001152:	2200      	movs	r2, #0
 8001154:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001156:	4b06      	ldr	r3, [pc, #24]	; (8001170 <MX_I2C1_Init+0x50>)
 8001158:	2200      	movs	r2, #0
 800115a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800115c:	4804      	ldr	r0, [pc, #16]	; (8001170 <MX_I2C1_Init+0x50>)
 800115e:	f004 fd63 	bl	8005c28 <HAL_I2C_Init>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001168:	f000 fb3e 	bl	80017e8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}
 8001170:	200046c8 	.word	0x200046c8
 8001174:	40005400 	.word	0x40005400
 8001178:	000186a0 	.word	0x000186a0

0800117c <MX_I2S3_Init>:
/**
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S3_Init(void) {
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
	/* USER CODE END I2S3_Init 0 */

	/* USER CODE BEGIN I2S3_Init 1 */

	/* USER CODE END I2S3_Init 1 */
	hi2s3.Instance = SPI3;
 8001180:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <MX_I2S3_Init+0x54>)
 8001182:	4a14      	ldr	r2, [pc, #80]	; (80011d4 <MX_I2S3_Init+0x58>)
 8001184:	601a      	str	r2, [r3, #0]
	hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001186:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <MX_I2S3_Init+0x54>)
 8001188:	f44f 7200 	mov.w	r2, #512	; 0x200
 800118c:	605a      	str	r2, [r3, #4]
	hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800118e:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <MX_I2S3_Init+0x54>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
	hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001194:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <MX_I2S3_Init+0x54>)
 8001196:	2200      	movs	r2, #0
 8001198:	60da      	str	r2, [r3, #12]
	hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800119a:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <MX_I2S3_Init+0x54>)
 800119c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011a0:	611a      	str	r2, [r3, #16]
	hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80011a2:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <MX_I2S3_Init+0x54>)
 80011a4:	4a0c      	ldr	r2, [pc, #48]	; (80011d8 <MX_I2S3_Init+0x5c>)
 80011a6:	615a      	str	r2, [r3, #20]
	hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80011a8:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <MX_I2S3_Init+0x54>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	619a      	str	r2, [r3, #24]
	hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80011ae:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <MX_I2S3_Init+0x54>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	61da      	str	r2, [r3, #28]
	hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80011b4:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <MX_I2S3_Init+0x54>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s3) != HAL_OK) {
 80011ba:	4805      	ldr	r0, [pc, #20]	; (80011d0 <MX_I2S3_Init+0x54>)
 80011bc:	f004 fe78 	bl	8005eb0 <HAL_I2S_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_I2S3_Init+0x4e>
		Error_Handler();
 80011c6:	f000 fb0f 	bl	80017e8 <Error_Handler>
	}
	/* USER CODE BEGIN I2S3_Init 2 */

	/* USER CODE END I2S3_Init 2 */

}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	200049f0 	.word	0x200049f0
 80011d4:	40003c00 	.word	0x40003c00
 80011d8:	00017700 	.word	0x00017700

080011dc <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80011e0:	4b17      	ldr	r3, [pc, #92]	; (8001240 <MX_SPI1_Init+0x64>)
 80011e2:	4a18      	ldr	r2, [pc, #96]	; (8001244 <MX_SPI1_Init+0x68>)
 80011e4:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80011e6:	4b16      	ldr	r3, [pc, #88]	; (8001240 <MX_SPI1_Init+0x64>)
 80011e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011ec:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011ee:	4b14      	ldr	r3, [pc, #80]	; (8001240 <MX_SPI1_Init+0x64>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011f4:	4b12      	ldr	r3, [pc, #72]	; (8001240 <MX_SPI1_Init+0x64>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011fa:	4b11      	ldr	r3, [pc, #68]	; (8001240 <MX_SPI1_Init+0x64>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001200:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <MX_SPI1_Init+0x64>)
 8001202:	2200      	movs	r2, #0
 8001204:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001206:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <MX_SPI1_Init+0x64>)
 8001208:	f44f 7200 	mov.w	r2, #512	; 0x200
 800120c:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800120e:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <MX_SPI1_Init+0x64>)
 8001210:	2200      	movs	r2, #0
 8001212:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001214:	4b0a      	ldr	r3, [pc, #40]	; (8001240 <MX_SPI1_Init+0x64>)
 8001216:	2200      	movs	r2, #0
 8001218:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800121a:	4b09      	ldr	r3, [pc, #36]	; (8001240 <MX_SPI1_Init+0x64>)
 800121c:	2200      	movs	r2, #0
 800121e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001220:	4b07      	ldr	r3, [pc, #28]	; (8001240 <MX_SPI1_Init+0x64>)
 8001222:	2200      	movs	r2, #0
 8001224:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8001226:	4b06      	ldr	r3, [pc, #24]	; (8001240 <MX_SPI1_Init+0x64>)
 8001228:	220a      	movs	r2, #10
 800122a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800122c:	4804      	ldr	r0, [pc, #16]	; (8001240 <MX_SPI1_Init+0x64>)
 800122e:	f006 f8c5 	bl	80073bc <HAL_SPI_Init>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_SPI1_Init+0x60>
		Error_Handler();
 8001238:	f000 fad6 	bl	80017e8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20004884 	.word	0x20004884
 8001244:	40013000 	.word	0x40013000

08001248 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800124c:	4b11      	ldr	r3, [pc, #68]	; (8001294 <MX_USART2_UART_Init+0x4c>)
 800124e:	4a12      	ldr	r2, [pc, #72]	; (8001298 <MX_USART2_UART_Init+0x50>)
 8001250:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 256000;
 8001252:	4b10      	ldr	r3, [pc, #64]	; (8001294 <MX_USART2_UART_Init+0x4c>)
 8001254:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
 8001258:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800125a:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <MX_USART2_UART_Init+0x4c>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001260:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <MX_USART2_UART_Init+0x4c>)
 8001262:	2200      	movs	r2, #0
 8001264:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001266:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <MX_USART2_UART_Init+0x4c>)
 8001268:	2200      	movs	r2, #0
 800126a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800126c:	4b09      	ldr	r3, [pc, #36]	; (8001294 <MX_USART2_UART_Init+0x4c>)
 800126e:	220c      	movs	r2, #12
 8001270:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001272:	4b08      	ldr	r3, [pc, #32]	; (8001294 <MX_USART2_UART_Init+0x4c>)
 8001274:	2200      	movs	r2, #0
 8001276:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001278:	4b06      	ldr	r3, [pc, #24]	; (8001294 <MX_USART2_UART_Init+0x4c>)
 800127a:	2200      	movs	r2, #0
 800127c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800127e:	4805      	ldr	r0, [pc, #20]	; (8001294 <MX_USART2_UART_Init+0x4c>)
 8001280:	f006 fbd2 	bl	8007a28 <HAL_UART_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_USART2_UART_Init+0x46>
		Error_Handler();
 800128a:	f000 faad 	bl	80017e8 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	200048e4 	.word	0x200048e4
 8001298:	40004400 	.word	0x40004400

0800129c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	4b14      	ldr	r3, [pc, #80]	; (80012f8 <MX_DMA_Init+0x5c>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a13      	ldr	r2, [pc, #76]	; (80012f8 <MX_DMA_Init+0x5c>)
 80012ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <MX_DMA_Init+0x5c>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80012be:	2200      	movs	r2, #0
 80012c0:	2105      	movs	r1, #5
 80012c2:	2038      	movs	r0, #56	; 0x38
 80012c4:	f002 f9be 	bl	8003644 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012c8:	2038      	movs	r0, #56	; 0x38
 80012ca:	f002 f9d7 	bl	800367c <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80012ce:	2200      	movs	r2, #0
 80012d0:	2105      	movs	r1, #5
 80012d2:	2039      	movs	r0, #57	; 0x39
 80012d4:	f002 f9b6 	bl	8003644 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80012d8:	2039      	movs	r0, #57	; 0x39
 80012da:	f002 f9cf 	bl	800367c <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80012de:	2200      	movs	r2, #0
 80012e0:	2105      	movs	r1, #5
 80012e2:	203a      	movs	r0, #58	; 0x3a
 80012e4:	f002 f9ae 	bl	8003644 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80012e8:	203a      	movs	r0, #58	; 0x3a
 80012ea:	f002 f9c7 	bl	800367c <HAL_NVIC_EnableIRQ>

}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40023800 	.word	0x40023800

080012fc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08c      	sub	sp, #48	; 0x30
 8001300:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001302:	f107 031c 	add.w	r3, r7, #28
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]
 800130e:	60da      	str	r2, [r3, #12]
 8001310:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	61bb      	str	r3, [r7, #24]
 8001316:	4b81      	ldr	r3, [pc, #516]	; (800151c <MX_GPIO_Init+0x220>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a80      	ldr	r2, [pc, #512]	; (800151c <MX_GPIO_Init+0x220>)
 800131c:	f043 0310 	orr.w	r3, r3, #16
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b7e      	ldr	r3, [pc, #504]	; (800151c <MX_GPIO_Init+0x220>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0310 	and.w	r3, r3, #16
 800132a:	61bb      	str	r3, [r7, #24]
 800132c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	617b      	str	r3, [r7, #20]
 8001332:	4b7a      	ldr	r3, [pc, #488]	; (800151c <MX_GPIO_Init+0x220>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	4a79      	ldr	r2, [pc, #484]	; (800151c <MX_GPIO_Init+0x220>)
 8001338:	f043 0304 	orr.w	r3, r3, #4
 800133c:	6313      	str	r3, [r2, #48]	; 0x30
 800133e:	4b77      	ldr	r3, [pc, #476]	; (800151c <MX_GPIO_Init+0x220>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0304 	and.w	r3, r3, #4
 8001346:	617b      	str	r3, [r7, #20]
 8001348:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	613b      	str	r3, [r7, #16]
 800134e:	4b73      	ldr	r3, [pc, #460]	; (800151c <MX_GPIO_Init+0x220>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a72      	ldr	r2, [pc, #456]	; (800151c <MX_GPIO_Init+0x220>)
 8001354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4b70      	ldr	r3, [pc, #448]	; (800151c <MX_GPIO_Init+0x220>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001362:	613b      	str	r3, [r7, #16]
 8001364:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	4b6c      	ldr	r3, [pc, #432]	; (800151c <MX_GPIO_Init+0x220>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4a6b      	ldr	r2, [pc, #428]	; (800151c <MX_GPIO_Init+0x220>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6313      	str	r3, [r2, #48]	; 0x30
 8001376:	4b69      	ldr	r3, [pc, #420]	; (800151c <MX_GPIO_Init+0x220>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	60bb      	str	r3, [r7, #8]
 8001386:	4b65      	ldr	r3, [pc, #404]	; (800151c <MX_GPIO_Init+0x220>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	4a64      	ldr	r2, [pc, #400]	; (800151c <MX_GPIO_Init+0x220>)
 800138c:	f043 0302 	orr.w	r3, r3, #2
 8001390:	6313      	str	r3, [r2, #48]	; 0x30
 8001392:	4b62      	ldr	r3, [pc, #392]	; (800151c <MX_GPIO_Init+0x220>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	60bb      	str	r3, [r7, #8]
 800139c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	607b      	str	r3, [r7, #4]
 80013a2:	4b5e      	ldr	r3, [pc, #376]	; (800151c <MX_GPIO_Init+0x220>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a5d      	ldr	r2, [pc, #372]	; (800151c <MX_GPIO_Init+0x220>)
 80013a8:	f043 0308 	orr.w	r3, r3, #8
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b5b      	ldr	r3, [pc, #364]	; (800151c <MX_GPIO_Init+0x220>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f003 0308 	and.w	r3, r3, #8
 80013b6:	607b      	str	r3, [r7, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80013ba:	2200      	movs	r2, #0
 80013bc:	2108      	movs	r1, #8
 80013be:	4858      	ldr	r0, [pc, #352]	; (8001520 <MX_GPIO_Init+0x224>)
 80013c0:	f002 fe8e 	bl	80040e0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 80013c4:	2201      	movs	r2, #1
 80013c6:	2101      	movs	r1, #1
 80013c8:	4856      	ldr	r0, [pc, #344]	; (8001524 <MX_GPIO_Init+0x228>)
 80013ca:	f002 fe89 	bl	80040e0 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Ready_to_Drive_Sound_GPIO_Port, Ready_to_Drive_Sound_Pin,
 80013ce:	2200      	movs	r2, #0
 80013d0:	2102      	movs	r1, #2
 80013d2:	4855      	ldr	r0, [pc, #340]	; (8001528 <MX_GPIO_Init+0x22c>)
 80013d4:	f002 fe84 	bl	80040e0 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 80013d8:	2200      	movs	r2, #0
 80013da:	f24f 0110 	movw	r1, #61456	; 0xf010
 80013de:	4853      	ldr	r0, [pc, #332]	; (800152c <MX_GPIO_Init+0x230>)
 80013e0:	f002 fe7e 	bl	80040e0 <HAL_GPIO_WritePin>
	LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : PE3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013e4:	2308      	movs	r3, #8
 80013e6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e8:	2301      	movs	r3, #1
 80013ea:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f0:	2300      	movs	r3, #0
 80013f2:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013f4:	f107 031c 	add.w	r3, r7, #28
 80013f8:	4619      	mov	r1, r3
 80013fa:	4849      	ldr	r0, [pc, #292]	; (8001520 <MX_GPIO_Init+0x224>)
 80013fc:	f002 fcbc 	bl	8003d78 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001400:	2301      	movs	r3, #1
 8001402:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001404:	2301      	movs	r3, #1
 8001406:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140c:	2300      	movs	r3, #0
 800140e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001410:	f107 031c 	add.w	r3, r7, #28
 8001414:	4619      	mov	r1, r3
 8001416:	4843      	ldr	r0, [pc, #268]	; (8001524 <MX_GPIO_Init+0x228>)
 8001418:	f002 fcae 	bl	8003d78 <HAL_GPIO_Init>

	/*Configure GPIO pin : Start_Button_Pin */
	GPIO_InitStruct.Pin = Start_Button_Pin;
 800141c:	2302      	movs	r3, #2
 800141e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001420:	2300      	movs	r3, #0
 8001422:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001424:	2301      	movs	r3, #1
 8001426:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(Start_Button_GPIO_Port, &GPIO_InitStruct);
 8001428:	f107 031c 	add.w	r3, r7, #28
 800142c:	4619      	mov	r1, r3
 800142e:	483d      	ldr	r0, [pc, #244]	; (8001524 <MX_GPIO_Init+0x228>)
 8001430:	f002 fca2 	bl	8003d78 <HAL_GPIO_Init>

	/*Configure GPIO pin : PDM_OUT_Pin */
	GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001434:	2308      	movs	r3, #8
 8001436:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001438:	2302      	movs	r3, #2
 800143a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001440:	2300      	movs	r3, #0
 8001442:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001444:	2305      	movs	r3, #5
 8001446:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001448:	f107 031c 	add.w	r3, r7, #28
 800144c:	4619      	mov	r1, r3
 800144e:	4835      	ldr	r0, [pc, #212]	; (8001524 <MX_GPIO_Init+0x228>)
 8001450:	f002 fc92 	bl	8003d78 <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001454:	2301      	movs	r3, #1
 8001456:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001458:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800145c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001462:	f107 031c 	add.w	r3, r7, #28
 8001466:	4619      	mov	r1, r3
 8001468:	4831      	ldr	r0, [pc, #196]	; (8001530 <MX_GPIO_Init+0x234>)
 800146a:	f002 fc85 	bl	8003d78 <HAL_GPIO_Init>

	/*Configure GPIO pin : Ready_to_Drive_Sound_Pin */
	GPIO_InitStruct.Pin = Ready_to_Drive_Sound_Pin;
 800146e:	2302      	movs	r3, #2
 8001470:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001472:	2301      	movs	r3, #1
 8001474:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147a:	2300      	movs	r3, #0
 800147c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(Ready_to_Drive_Sound_GPIO_Port, &GPIO_InitStruct);
 800147e:	f107 031c 	add.w	r3, r7, #28
 8001482:	4619      	mov	r1, r3
 8001484:	4828      	ldr	r0, [pc, #160]	; (8001528 <MX_GPIO_Init+0x22c>)
 8001486:	f002 fc77 	bl	8003d78 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 800148a:	2304      	movs	r3, #4
 800148c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800148e:	2300      	movs	r3, #0
 8001490:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001496:	f107 031c 	add.w	r3, r7, #28
 800149a:	4619      	mov	r1, r3
 800149c:	4822      	ldr	r0, [pc, #136]	; (8001528 <MX_GPIO_Init+0x22c>)
 800149e:	f002 fc6b 	bl	8003d78 <HAL_GPIO_Init>

	/*Configure GPIO pin : CLK_IN_Pin */
	GPIO_InitStruct.Pin = CLK_IN_Pin;
 80014a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014a6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a8:	2302      	movs	r3, #2
 80014aa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b0:	2300      	movs	r3, #0
 80014b2:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014b4:	2305      	movs	r3, #5
 80014b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80014b8:	f107 031c 	add.w	r3, r7, #28
 80014bc:	4619      	mov	r1, r3
 80014be:	481a      	ldr	r0, [pc, #104]	; (8001528 <MX_GPIO_Init+0x22c>)
 80014c0:	f002 fc5a 	bl	8003d78 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
	 Audio_RST_Pin */
	GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 80014c4:	f24f 0310 	movw	r3, #61456	; 0xf010
 80014c8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ca:	2301      	movs	r3, #1
 80014cc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d2:	2300      	movs	r3, #0
 80014d4:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014d6:	f107 031c 	add.w	r3, r7, #28
 80014da:	4619      	mov	r1, r3
 80014dc:	4813      	ldr	r0, [pc, #76]	; (800152c <MX_GPIO_Init+0x230>)
 80014de:	f002 fc4b 	bl	8003d78 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80014e2:	2320      	movs	r3, #32
 80014e4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e6:	2300      	movs	r3, #0
 80014e8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80014ee:	f107 031c 	add.w	r3, r7, #28
 80014f2:	4619      	mov	r1, r3
 80014f4:	480d      	ldr	r0, [pc, #52]	; (800152c <MX_GPIO_Init+0x230>)
 80014f6:	f002 fc3f 	bl	8003d78 <HAL_GPIO_Init>

	/*Configure GPIO pin : MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80014fa:	2302      	movs	r3, #2
 80014fc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80014fe:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001502:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001508:	f107 031c 	add.w	r3, r7, #28
 800150c:	4619      	mov	r1, r3
 800150e:	4804      	ldr	r0, [pc, #16]	; (8001520 <MX_GPIO_Init+0x224>)
 8001510:	f002 fc32 	bl	8003d78 <HAL_GPIO_Init>

}
 8001514:	bf00      	nop
 8001516:	3730      	adds	r7, #48	; 0x30
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40023800 	.word	0x40023800
 8001520:	40021000 	.word	0x40021000
 8001524:	40020800 	.word	0x40020800
 8001528:	40020400 	.word	0x40020400
 800152c:	40020c00 	.word	0x40020c00
 8001530:	40020000 	.word	0x40020000
 8001534:	00000000 	.word	0x00000000

08001538 <APPS_Mapping>:
	return false; //shouldn't get to here

} //end Ready_to_Drive()

static void APPS_Mapping(uint32_t *appsVal_0, uint32_t *appsVal_1,
		uint32_t apps_PP[]) {
 8001538:	b590      	push	{r4, r7, lr}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]

	apps_PP[0] = 0.0518 * (*appsVal_0) - 29.53;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff f905 	bl	8000758 <__aeabi_ui2d>
 800154e:	a31c      	add	r3, pc, #112	; (adr r3, 80015c0 <APPS_Mapping+0x88>)
 8001550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001554:	f7fe fe94 	bl	8000280 <__aeabi_dmul>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	4610      	mov	r0, r2
 800155e:	4619      	mov	r1, r3
 8001560:	a319      	add	r3, pc, #100	; (adr r3, 80015c8 <APPS_Mapping+0x90>)
 8001562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001566:	f7fe ffb9 	bl	80004dc <__aeabi_dsub>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	4610      	mov	r0, r2
 8001570:	4619      	mov	r1, r3
 8001572:	f7ff f96b 	bl	800084c <__aeabi_d2uiz>
 8001576:	4602      	mov	r2, r0
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	601a      	str	r2, [r3, #0]
	apps_PP[1] = 0.038 * (*appsVal_1) - 35.25;
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff f8e9 	bl	8000758 <__aeabi_ui2d>
 8001586:	a312      	add	r3, pc, #72	; (adr r3, 80015d0 <APPS_Mapping+0x98>)
 8001588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158c:	f7fe fe78 	bl	8000280 <__aeabi_dmul>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	4610      	mov	r0, r2
 8001596:	4619      	mov	r1, r3
 8001598:	a30f      	add	r3, pc, #60	; (adr r3, 80015d8 <APPS_Mapping+0xa0>)
 800159a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159e:	f7fe ff9d 	bl	80004dc <__aeabi_dsub>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	4610      	mov	r0, r2
 80015a8:	4619      	mov	r1, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	1d1c      	adds	r4, r3, #4
 80015ae:	f7ff f94d 	bl	800084c <__aeabi_d2uiz>
 80015b2:	4603      	mov	r3, r0
 80015b4:	6023      	str	r3, [r4, #0]

} //end APPS_Mapping()
 80015b6:	bf00      	nop
 80015b8:	3714      	adds	r7, #20
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd90      	pop	{r4, r7, pc}
 80015be:	bf00      	nop
 80015c0:	93dd97f6 	.word	0x93dd97f6
 80015c4:	3faa8587 	.word	0x3faa8587
 80015c8:	147ae148 	.word	0x147ae148
 80015cc:	403d87ae 	.word	0x403d87ae
 80015d0:	6a7ef9db 	.word	0x6a7ef9db
 80015d4:	3fa374bc 	.word	0x3fa374bc
 80015d8:	00000000 	.word	0x00000000
 80015dc:	4041a000 	.word	0x4041a000

080015e0 <startLEDTask>:
 * @brief  Function implementing the ledTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_startLEDTask */
void startLEDTask(void const *argument) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	/* init code for USB_HOST */
	MX_USB_HOST_Init();
 80015e8:	f00c fd78 	bl	800e0dc <MX_USB_HOST_Init>
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 80015ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015f0:	4803      	ldr	r0, [pc, #12]	; (8001600 <startLEDTask+0x20>)
 80015f2:	f002 fd8e 	bl	8004112 <HAL_GPIO_TogglePin>
		osDelay(1000);
 80015f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015fa:	f009 feb2 	bl	800b362 <osDelay>
		HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 80015fe:	e7f5      	b.n	80015ec <startLEDTask+0xc>
 8001600:	40020c00 	.word	0x40020c00

08001604 <startUART_Task>:
 * @brief Function implementing the uartTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startUART_Task */
void startUART_Task(void const *argument) {
 8001604:	b590      	push	{r4, r7, lr}
 8001606:	b0cb      	sub	sp, #300	; 0x12c
 8001608:	af02      	add	r7, sp, #8
 800160a:	1d3b      	adds	r3, r7, #4
 800160c:	6018      	str	r0, [r3, #0]
	/* USER CODE BEGIN startUART_Task */
	char startBtn[16] = "";
 800160e:	2300      	movs	r3, #0
 8001610:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8001614:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
	char msg[256];
	uint32_t apps_PP[2]; //to store APPS Pedal Position Values (in %)

	/* Infinite loop */
	for (;;) {
		if (!HAL_GPIO_ReadPin(GPIOC, Start_Button_Pin)) {
 8001620:	2102      	movs	r1, #2
 8001622:	4820      	ldr	r0, [pc, #128]	; (80016a4 <startUART_Task+0xa0>)
 8001624:	f002 fd44 	bl	80040b0 <HAL_GPIO_ReadPin>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d107      	bne.n	800163e <startUART_Task+0x3a>
			strcpy(startBtn, "Pressed");
 800162e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001632:	4a1d      	ldr	r2, [pc, #116]	; (80016a8 <startUART_Task+0xa4>)
 8001634:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001638:	e883 0003 	stmia.w	r3, {r0, r1}
 800163c:	e005      	b.n	800164a <startUART_Task+0x46>
		} else {
			strcpy(startBtn, "Not Pressed");
 800163e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001642:	4a1a      	ldr	r2, [pc, #104]	; (80016ac <startUART_Task+0xa8>)
 8001644:	ca07      	ldmia	r2, {r0, r1, r2}
 8001646:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}

		APPS_Mapping(&appsVal[0], &appsVal[1], apps_PP);
 800164a:	f107 0308 	add.w	r3, r7, #8
 800164e:	461a      	mov	r2, r3
 8001650:	4917      	ldr	r1, [pc, #92]	; (80016b0 <startUART_Task+0xac>)
 8001652:	4818      	ldr	r0, [pc, #96]	; (80016b4 <startUART_Task+0xb0>)
 8001654:	f7ff ff70 	bl	8001538 <APPS_Mapping>

		//send out APPS values + APPS Pedal Position over UART
		sprintf(msg,
 8001658:	4b16      	ldr	r3, [pc, #88]	; (80016b4 <startUART_Task+0xb0>)
 800165a:	6819      	ldr	r1, [r3, #0]
 800165c:	4b15      	ldr	r3, [pc, #84]	; (80016b4 <startUART_Task+0xb0>)
 800165e:	685c      	ldr	r4, [r3, #4]
 8001660:	f107 0308 	add.w	r3, r7, #8
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f107 0208 	add.w	r2, r7, #8
 800166a:	6852      	ldr	r2, [r2, #4]
 800166c:	f107 0010 	add.w	r0, r7, #16
 8001670:	9201      	str	r2, [sp, #4]
 8001672:	9300      	str	r3, [sp, #0]
 8001674:	4623      	mov	r3, r4
 8001676:	460a      	mov	r2, r1
 8001678:	490f      	ldr	r1, [pc, #60]	; (80016b8 <startUART_Task+0xb4>)
 800167a:	f00d f9a7 	bl	800e9cc <siprintf>
				"APPS_1 = %lu \t APPS_2 = %lu \t PP1 = %lu \t PP2 = %lu \r\n",
				appsVal[0], appsVal[1], apps_PP[0], apps_PP[1]);
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800167e:	f107 0310 	add.w	r3, r7, #16
 8001682:	4618      	mov	r0, r3
 8001684:	f7fe fda4 	bl	80001d0 <strlen>
 8001688:	4603      	mov	r3, r0
 800168a:	b29a      	uxth	r2, r3
 800168c:	f107 0110 	add.w	r1, r7, #16
 8001690:	f04f 33ff 	mov.w	r3, #4294967295
 8001694:	4809      	ldr	r0, [pc, #36]	; (80016bc <startUART_Task+0xb8>)
 8001696:	f006 fa14 	bl	8007ac2 <HAL_UART_Transmit>
		osDelay(100);
 800169a:	2064      	movs	r0, #100	; 0x64
 800169c:	f009 fe61 	bl	800b362 <osDelay>
		if (!HAL_GPIO_ReadPin(GPIOC, Start_Button_Pin)) {
 80016a0:	e7be      	b.n	8001620 <startUART_Task+0x1c>
 80016a2:	bf00      	nop
 80016a4:	40020800 	.word	0x40020800
 80016a8:	0800f150 	.word	0x0800f150
 80016ac:	0800f158 	.word	0x0800f158
 80016b0:	200049ec 	.word	0x200049ec
 80016b4:	200049e8 	.word	0x200049e8
 80016b8:	0800f164 	.word	0x0800f164
 80016bc:	200048e4 	.word	0x200048e4

080016c0 <startTorqueCommand>:
 * @brief Function implementing the Torque_Command thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startTorqueCommand */
void startTorqueCommand(void const *argument) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
	uint32_t apps_PP[2]; //to store APPS Pedal Position Values (in %)

	//First need to send Drive Enable command in order to gain control over the motor controller
	//Motor controller will timeout if it dosn't receive Drive Enable command or dosn't periodically receive Set Current command
	//We can send the Drive Enable command once and then periodically send Set Current command to prevent it from timing out.
	TxData[0] = 0x24; //Message ID for "Drive Enable" for motor controller
 80016c8:	4b2b      	ldr	r3, [pc, #172]	; (8001778 <startTorqueCommand+0xb8>)
 80016ca:	2224      	movs	r2, #36	; 0x24
 80016cc:	701a      	strb	r2, [r3, #0]
	TxData[1] = 0x1F; //Node ID for Standard CAN message
 80016ce:	4b2a      	ldr	r3, [pc, #168]	; (8001778 <startTorqueCommand+0xb8>)
 80016d0:	221f      	movs	r2, #31
 80016d2:	705a      	strb	r2, [r3, #1]
	TxData[2] = 1; // 1: TRUE enables drive, 0: FALSE disables drive
 80016d4:	4b28      	ldr	r3, [pc, #160]	; (8001778 <startTorqueCommand+0xb8>)
 80016d6:	2201      	movs	r2, #1
 80016d8:	709a      	strb	r2, [r3, #2]
//		Error_Handler();
//	}

	/* Infinite loop */
	for (;;) {
		HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 80016da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016de:	4827      	ldr	r0, [pc, #156]	; (800177c <startTorqueCommand+0xbc>)
 80016e0:	f002 fd17 	bl	8004112 <HAL_GPIO_TogglePin>

		if ((appsVal[0] < APPS_0_MIN) || (appsVal[0] > APPS_0_MAX)) {
 80016e4:	4b26      	ldr	r3, [pc, #152]	; (8001780 <startTorqueCommand+0xc0>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	22c8      	movs	r2, #200	; 0xc8
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d305      	bcc.n	80016fa <startTorqueCommand+0x3a>
 80016ee:	4b24      	ldr	r3, [pc, #144]	; (8001780 <startTorqueCommand+0xc0>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d902      	bls.n	8001700 <startTorqueCommand+0x40>
			//May to need to have an outside function suspend this task since
			//if we need to restart the tasks when values go back to within range,
			//we can only do that from an outside/external function.
			APPS_Failure = true;
 80016fa:	4b22      	ldr	r3, [pc, #136]	; (8001784 <startTorqueCommand+0xc4>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	701a      	strb	r2, [r3, #0]
			//need to send out CAN message to set motor torque to zero
		}

		if ((appsVal[1] < APPS_1_MIN) || (appsVal[1] > APPS_1_MAX)) {
 8001700:	4b1f      	ldr	r3, [pc, #124]	; (8001780 <startTorqueCommand+0xc0>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001708:	4293      	cmp	r3, r2
 800170a:	d305      	bcc.n	8001718 <startTorqueCommand+0x58>
 800170c:	4b1c      	ldr	r3, [pc, #112]	; (8001780 <startTorqueCommand+0xc0>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f640 723c 	movw	r2, #3900	; 0xf3c
 8001714:	4293      	cmp	r3, r2
 8001716:	d903      	bls.n	8001720 <startTorqueCommand+0x60>
			//shutdown power to motor
			APPS_Failure = true;
 8001718:	4b1a      	ldr	r3, [pc, #104]	; (8001784 <startTorqueCommand+0xc4>)
 800171a:	2201      	movs	r2, #1
 800171c:	701a      	strb	r2, [r3, #0]
 800171e:	e002      	b.n	8001726 <startTorqueCommand+0x66>
			//need to send out CAN message to set motor torque to zero
		}

		else {
			APPS_Failure = false;
 8001720:	4b18      	ldr	r3, [pc, #96]	; (8001784 <startTorqueCommand+0xc4>)
 8001722:	2200      	movs	r2, #0
 8001724:	701a      	strb	r2, [r3, #0]
		}

		APPS_Mapping(&appsVal[0], &appsVal[1], apps_PP);
 8001726:	f107 0308 	add.w	r3, r7, #8
 800172a:	461a      	mov	r2, r3
 800172c:	4916      	ldr	r1, [pc, #88]	; (8001788 <startTorqueCommand+0xc8>)
 800172e:	4814      	ldr	r0, [pc, #80]	; (8001780 <startTorqueCommand+0xc0>)
 8001730:	f7ff ff02 	bl	8001538 <APPS_Mapping>

		if (abs(apps_PP[0] - apps_PP[1]) <= 10) {
 8001734:	68ba      	ldr	r2, [r7, #8]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	f113 0f0a 	cmn.w	r3, #10
 800173e:	db14      	blt.n	800176a <startTorqueCommand+0xaa>
 8001740:	68ba      	ldr	r2, [r7, #8]
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b0a      	cmp	r3, #10
 8001748:	dc0f      	bgt.n	800176a <startTorqueCommand+0xaa>

			//reset timer using non-blocking code method

			//osTimerStop(implausibility_TimerHandle);
			//Broadcast messages sent to motor controller to control motor torque
			TxData[0] = 0x1A; //Message ID for "Set AC Current" for motor controller
 800174a:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <startTorqueCommand+0xb8>)
 800174c:	221a      	movs	r2, #26
 800174e:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x1F; //Node ID for Standard CAN message
 8001750:	4b09      	ldr	r3, [pc, #36]	; (8001778 <startTorqueCommand+0xb8>)
 8001752:	221f      	movs	r2, #31
 8001754:	705a      	strb	r2, [r3, #1]
			TxData[2] = 10 * apps_PP[0]; //Will take the linear sensor as the primary sensor for sending signals to motor controller. (Needs to be scaled by 10 first)
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	b2db      	uxtb	r3, r3
 800175a:	461a      	mov	r2, r3
 800175c:	0092      	lsls	r2, r2, #2
 800175e:	4413      	add	r3, r2
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	b2da      	uxtb	r2, r3
 8001764:	4b04      	ldr	r3, [pc, #16]	; (8001778 <startTorqueCommand+0xb8>)
 8001766:	709a      	strb	r2, [r3, #2]

			if (!APPS_Failure) {
 8001768:	e002      	b.n	8001770 <startTorqueCommand+0xb0>
		else {
//			HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
//			osDelay(25);
//			HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
			//osTimerStart(implausibility_TimerHandle, 100);
			implausibility = true;
 800176a:	4b08      	ldr	r3, [pc, #32]	; (800178c <startTorqueCommand+0xcc>)
 800176c:	2201      	movs	r2, #1
 800176e:	701a      	strb	r2, [r3, #0]

			// if timer has run for >100ms then send CAN message to set motor torque to zero

		}			//end else

		osDelay(50); //May need to reduce the delay between sending out CAN messages
 8001770:	2032      	movs	r0, #50	; 0x32
 8001772:	f009 fdf6 	bl	800b362 <osDelay>
		HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 8001776:	e7b0      	b.n	80016da <startTorqueCommand+0x1a>
 8001778:	20004878 	.word	0x20004878
 800177c:	40020c00 	.word	0x40020c00
 8001780:	200049e8 	.word	0x200049e8
 8001784:	20000818 	.word	0x20000818
 8001788:	200049ec 	.word	0x200049ec
 800178c:	20000819 	.word	0x20000819

08001790 <startBPSCheck>:
 * @brief Function implementing the BPS_Limit_Check thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startBPSCheck */
void startBPSCheck(void const *argument) {
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN startBPSCheck */
	/* Infinite loop */
	for (;;) {
		if ((bpsVal < bps_MIN) || (bpsVal > bps_MAX)) {
 8001798:	4b04      	ldr	r3, [pc, #16]	; (80017ac <startBPSCheck+0x1c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80017a0:	4293      	cmp	r3, r2
			//Shutdown power to motor
			//osThreadSuspend(Torque_CommandHandle);
		}

		osDelay(100);
 80017a2:	2064      	movs	r0, #100	; 0x64
 80017a4:	f009 fddd 	bl	800b362 <osDelay>
		if ((bpsVal < bps_MIN) || (bpsVal > bps_MAX)) {
 80017a8:	e7f6      	b.n	8001798 <startBPSCheck+0x8>
 80017aa:	bf00      	nop
 80017ac:	20004874 	.word	0x20004874

080017b0 <OTCallback>:
	}
	/* USER CODE END startBPSCheck */
}

/* OTCallback function */
void OTCallback(void const *argument) {
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
//	osDelay(25);
//	HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
	//once 100ms timer expires, shutdown power to motor
	/* USER CODE END OTCallback */
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a04      	ldr	r2, [pc, #16]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d101      	bne.n	80017da <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80017d6:	f000 fc9f 	bl	8002118 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40010000 	.word	0x40010000

080017e8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017ec:	b672      	cpsid	i
}
 80017ee:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80017f0:	e7fe      	b.n	80017f0 <Error_Handler+0x8>
	...

080017f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	607b      	str	r3, [r7, #4]
 80017fe:	4b12      	ldr	r3, [pc, #72]	; (8001848 <HAL_MspInit+0x54>)
 8001800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001802:	4a11      	ldr	r2, [pc, #68]	; (8001848 <HAL_MspInit+0x54>)
 8001804:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001808:	6453      	str	r3, [r2, #68]	; 0x44
 800180a:	4b0f      	ldr	r3, [pc, #60]	; (8001848 <HAL_MspInit+0x54>)
 800180c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001812:	607b      	str	r3, [r7, #4]
 8001814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	603b      	str	r3, [r7, #0]
 800181a:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <HAL_MspInit+0x54>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	4a0a      	ldr	r2, [pc, #40]	; (8001848 <HAL_MspInit+0x54>)
 8001820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001824:	6413      	str	r3, [r2, #64]	; 0x40
 8001826:	4b08      	ldr	r3, [pc, #32]	; (8001848 <HAL_MspInit+0x54>)
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182e:	603b      	str	r3, [r7, #0]
 8001830:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001832:	2200      	movs	r2, #0
 8001834:	210f      	movs	r1, #15
 8001836:	f06f 0001 	mvn.w	r0, #1
 800183a:	f001 ff03 	bl	8003644 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800183e:	bf00      	nop
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40023800 	.word	0x40023800

0800184c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08e      	sub	sp, #56	; 0x38
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001854:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]
 8001862:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a9b      	ldr	r2, [pc, #620]	; (8001ad8 <HAL_ADC_MspInit+0x28c>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d161      	bne.n	8001932 <HAL_ADC_MspInit+0xe6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	623b      	str	r3, [r7, #32]
 8001872:	4b9a      	ldr	r3, [pc, #616]	; (8001adc <HAL_ADC_MspInit+0x290>)
 8001874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001876:	4a99      	ldr	r2, [pc, #612]	; (8001adc <HAL_ADC_MspInit+0x290>)
 8001878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800187c:	6453      	str	r3, [r2, #68]	; 0x44
 800187e:	4b97      	ldr	r3, [pc, #604]	; (8001adc <HAL_ADC_MspInit+0x290>)
 8001880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001886:	623b      	str	r3, [r7, #32]
 8001888:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	61fb      	str	r3, [r7, #28]
 800188e:	4b93      	ldr	r3, [pc, #588]	; (8001adc <HAL_ADC_MspInit+0x290>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	4a92      	ldr	r2, [pc, #584]	; (8001adc <HAL_ADC_MspInit+0x290>)
 8001894:	f043 0301 	orr.w	r3, r3, #1
 8001898:	6313      	str	r3, [r2, #48]	; 0x30
 800189a:	4b90      	ldr	r3, [pc, #576]	; (8001adc <HAL_ADC_MspInit+0x290>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	61fb      	str	r3, [r7, #28]
 80018a4:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80018a6:	2302      	movs	r3, #2
 80018a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018aa:	2303      	movs	r3, #3
 80018ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b6:	4619      	mov	r1, r3
 80018b8:	4889      	ldr	r0, [pc, #548]	; (8001ae0 <HAL_ADC_MspInit+0x294>)
 80018ba:	f002 fa5d 	bl	8003d78 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80018be:	4b89      	ldr	r3, [pc, #548]	; (8001ae4 <HAL_ADC_MspInit+0x298>)
 80018c0:	4a89      	ldr	r2, [pc, #548]	; (8001ae8 <HAL_ADC_MspInit+0x29c>)
 80018c2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80018c4:	4b87      	ldr	r3, [pc, #540]	; (8001ae4 <HAL_ADC_MspInit+0x298>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018ca:	4b86      	ldr	r3, [pc, #536]	; (8001ae4 <HAL_ADC_MspInit+0x298>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80018d0:	4b84      	ldr	r3, [pc, #528]	; (8001ae4 <HAL_ADC_MspInit+0x298>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80018d6:	4b83      	ldr	r3, [pc, #524]	; (8001ae4 <HAL_ADC_MspInit+0x298>)
 80018d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018dc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80018de:	4b81      	ldr	r3, [pc, #516]	; (8001ae4 <HAL_ADC_MspInit+0x298>)
 80018e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018e4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80018e6:	4b7f      	ldr	r3, [pc, #508]	; (8001ae4 <HAL_ADC_MspInit+0x298>)
 80018e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018ec:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80018ee:	4b7d      	ldr	r3, [pc, #500]	; (8001ae4 <HAL_ADC_MspInit+0x298>)
 80018f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018f4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80018f6:	4b7b      	ldr	r3, [pc, #492]	; (8001ae4 <HAL_ADC_MspInit+0x298>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80018fc:	4b79      	ldr	r3, [pc, #484]	; (8001ae4 <HAL_ADC_MspInit+0x298>)
 80018fe:	2204      	movs	r2, #4
 8001900:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001902:	4b78      	ldr	r3, [pc, #480]	; (8001ae4 <HAL_ADC_MspInit+0x298>)
 8001904:	2203      	movs	r2, #3
 8001906:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8001908:	4b76      	ldr	r3, [pc, #472]	; (8001ae4 <HAL_ADC_MspInit+0x298>)
 800190a:	2200      	movs	r2, #0
 800190c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800190e:	4b75      	ldr	r3, [pc, #468]	; (8001ae4 <HAL_ADC_MspInit+0x298>)
 8001910:	2200      	movs	r2, #0
 8001912:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001914:	4873      	ldr	r0, [pc, #460]	; (8001ae4 <HAL_ADC_MspInit+0x298>)
 8001916:	f001 febf 	bl	8003698 <HAL_DMA_Init>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <HAL_ADC_MspInit+0xd8>
    {
      Error_Handler();
 8001920:	f7ff ff62 	bl	80017e8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4a6f      	ldr	r2, [pc, #444]	; (8001ae4 <HAL_ADC_MspInit+0x298>)
 8001928:	639a      	str	r2, [r3, #56]	; 0x38
 800192a:	4a6e      	ldr	r2, [pc, #440]	; (8001ae4 <HAL_ADC_MspInit+0x298>)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001930:	e0ce      	b.n	8001ad0 <HAL_ADC_MspInit+0x284>
  else if(hadc->Instance==ADC2)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a6d      	ldr	r2, [pc, #436]	; (8001aec <HAL_ADC_MspInit+0x2a0>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d162      	bne.n	8001a02 <HAL_ADC_MspInit+0x1b6>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800193c:	2300      	movs	r3, #0
 800193e:	61bb      	str	r3, [r7, #24]
 8001940:	4b66      	ldr	r3, [pc, #408]	; (8001adc <HAL_ADC_MspInit+0x290>)
 8001942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001944:	4a65      	ldr	r2, [pc, #404]	; (8001adc <HAL_ADC_MspInit+0x290>)
 8001946:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800194a:	6453      	str	r3, [r2, #68]	; 0x44
 800194c:	4b63      	ldr	r3, [pc, #396]	; (8001adc <HAL_ADC_MspInit+0x290>)
 800194e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001950:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001954:	61bb      	str	r3, [r7, #24]
 8001956:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	4b5f      	ldr	r3, [pc, #380]	; (8001adc <HAL_ADC_MspInit+0x290>)
 800195e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001960:	4a5e      	ldr	r2, [pc, #376]	; (8001adc <HAL_ADC_MspInit+0x290>)
 8001962:	f043 0301 	orr.w	r3, r3, #1
 8001966:	6313      	str	r3, [r2, #48]	; 0x30
 8001968:	4b5c      	ldr	r3, [pc, #368]	; (8001adc <HAL_ADC_MspInit+0x290>)
 800196a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196c:	f003 0301 	and.w	r3, r3, #1
 8001970:	617b      	str	r3, [r7, #20]
 8001972:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001974:	2308      	movs	r3, #8
 8001976:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001978:	2303      	movs	r3, #3
 800197a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001984:	4619      	mov	r1, r3
 8001986:	4856      	ldr	r0, [pc, #344]	; (8001ae0 <HAL_ADC_MspInit+0x294>)
 8001988:	f002 f9f6 	bl	8003d78 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800198c:	4b58      	ldr	r3, [pc, #352]	; (8001af0 <HAL_ADC_MspInit+0x2a4>)
 800198e:	4a59      	ldr	r2, [pc, #356]	; (8001af4 <HAL_ADC_MspInit+0x2a8>)
 8001990:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8001992:	4b57      	ldr	r3, [pc, #348]	; (8001af0 <HAL_ADC_MspInit+0x2a4>)
 8001994:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001998:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800199a:	4b55      	ldr	r3, [pc, #340]	; (8001af0 <HAL_ADC_MspInit+0x2a4>)
 800199c:	2200      	movs	r2, #0
 800199e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80019a0:	4b53      	ldr	r3, [pc, #332]	; (8001af0 <HAL_ADC_MspInit+0x2a4>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80019a6:	4b52      	ldr	r3, [pc, #328]	; (8001af0 <HAL_ADC_MspInit+0x2a4>)
 80019a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019ac:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019ae:	4b50      	ldr	r3, [pc, #320]	; (8001af0 <HAL_ADC_MspInit+0x2a4>)
 80019b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019b4:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019b6:	4b4e      	ldr	r3, [pc, #312]	; (8001af0 <HAL_ADC_MspInit+0x2a4>)
 80019b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019bc:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80019be:	4b4c      	ldr	r3, [pc, #304]	; (8001af0 <HAL_ADC_MspInit+0x2a4>)
 80019c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019c4:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80019c6:	4b4a      	ldr	r3, [pc, #296]	; (8001af0 <HAL_ADC_MspInit+0x2a4>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80019cc:	4b48      	ldr	r3, [pc, #288]	; (8001af0 <HAL_ADC_MspInit+0x2a4>)
 80019ce:	2204      	movs	r2, #4
 80019d0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80019d2:	4b47      	ldr	r3, [pc, #284]	; (8001af0 <HAL_ADC_MspInit+0x2a4>)
 80019d4:	2203      	movs	r2, #3
 80019d6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc2.Init.MemBurst = DMA_MBURST_SINGLE;
 80019d8:	4b45      	ldr	r3, [pc, #276]	; (8001af0 <HAL_ADC_MspInit+0x2a4>)
 80019da:	2200      	movs	r2, #0
 80019dc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80019de:	4b44      	ldr	r3, [pc, #272]	; (8001af0 <HAL_ADC_MspInit+0x2a4>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80019e4:	4842      	ldr	r0, [pc, #264]	; (8001af0 <HAL_ADC_MspInit+0x2a4>)
 80019e6:	f001 fe57 	bl	8003698 <HAL_DMA_Init>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <HAL_ADC_MspInit+0x1a8>
      Error_Handler();
 80019f0:	f7ff fefa 	bl	80017e8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a3e      	ldr	r2, [pc, #248]	; (8001af0 <HAL_ADC_MspInit+0x2a4>)
 80019f8:	639a      	str	r2, [r3, #56]	; 0x38
 80019fa:	4a3d      	ldr	r2, [pc, #244]	; (8001af0 <HAL_ADC_MspInit+0x2a4>)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001a00:	e066      	b.n	8001ad0 <HAL_ADC_MspInit+0x284>
  else if(hadc->Instance==ADC3)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a3c      	ldr	r2, [pc, #240]	; (8001af8 <HAL_ADC_MspInit+0x2ac>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d161      	bne.n	8001ad0 <HAL_ADC_MspInit+0x284>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	613b      	str	r3, [r7, #16]
 8001a10:	4b32      	ldr	r3, [pc, #200]	; (8001adc <HAL_ADC_MspInit+0x290>)
 8001a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a14:	4a31      	ldr	r2, [pc, #196]	; (8001adc <HAL_ADC_MspInit+0x290>)
 8001a16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a1a:	6453      	str	r3, [r2, #68]	; 0x44
 8001a1c:	4b2f      	ldr	r3, [pc, #188]	; (8001adc <HAL_ADC_MspInit+0x290>)
 8001a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a24:	613b      	str	r3, [r7, #16]
 8001a26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	4b2b      	ldr	r3, [pc, #172]	; (8001adc <HAL_ADC_MspInit+0x290>)
 8001a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a30:	4a2a      	ldr	r2, [pc, #168]	; (8001adc <HAL_ADC_MspInit+0x290>)
 8001a32:	f043 0304 	orr.w	r3, r3, #4
 8001a36:	6313      	str	r3, [r2, #48]	; 0x30
 8001a38:	4b28      	ldr	r3, [pc, #160]	; (8001adc <HAL_ADC_MspInit+0x290>)
 8001a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3c:	f003 0304 	and.w	r3, r3, #4
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a44:	2304      	movs	r3, #4
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a54:	4619      	mov	r1, r3
 8001a56:	4829      	ldr	r0, [pc, #164]	; (8001afc <HAL_ADC_MspInit+0x2b0>)
 8001a58:	f002 f98e 	bl	8003d78 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8001a5c:	4b28      	ldr	r3, [pc, #160]	; (8001b00 <HAL_ADC_MspInit+0x2b4>)
 8001a5e:	4a29      	ldr	r2, [pc, #164]	; (8001b04 <HAL_ADC_MspInit+0x2b8>)
 8001a60:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8001a62:	4b27      	ldr	r3, [pc, #156]	; (8001b00 <HAL_ADC_MspInit+0x2b4>)
 8001a64:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a68:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a6a:	4b25      	ldr	r3, [pc, #148]	; (8001b00 <HAL_ADC_MspInit+0x2b4>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a70:	4b23      	ldr	r3, [pc, #140]	; (8001b00 <HAL_ADC_MspInit+0x2b4>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001a76:	4b22      	ldr	r3, [pc, #136]	; (8001b00 <HAL_ADC_MspInit+0x2b4>)
 8001a78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a7c:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a7e:	4b20      	ldr	r3, [pc, #128]	; (8001b00 <HAL_ADC_MspInit+0x2b4>)
 8001a80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a84:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a86:	4b1e      	ldr	r3, [pc, #120]	; (8001b00 <HAL_ADC_MspInit+0x2b4>)
 8001a88:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a8c:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001a8e:	4b1c      	ldr	r3, [pc, #112]	; (8001b00 <HAL_ADC_MspInit+0x2b4>)
 8001a90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a94:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001a96:	4b1a      	ldr	r3, [pc, #104]	; (8001b00 <HAL_ADC_MspInit+0x2b4>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001a9c:	4b18      	ldr	r3, [pc, #96]	; (8001b00 <HAL_ADC_MspInit+0x2b4>)
 8001a9e:	2204      	movs	r2, #4
 8001aa0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001aa2:	4b17      	ldr	r3, [pc, #92]	; (8001b00 <HAL_ADC_MspInit+0x2b4>)
 8001aa4:	2203      	movs	r2, #3
 8001aa6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc3.Init.MemBurst = DMA_MBURST_SINGLE;
 8001aa8:	4b15      	ldr	r3, [pc, #84]	; (8001b00 <HAL_ADC_MspInit+0x2b4>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001aae:	4b14      	ldr	r3, [pc, #80]	; (8001b00 <HAL_ADC_MspInit+0x2b4>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001ab4:	4812      	ldr	r0, [pc, #72]	; (8001b00 <HAL_ADC_MspInit+0x2b4>)
 8001ab6:	f001 fdef 	bl	8003698 <HAL_DMA_Init>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <HAL_ADC_MspInit+0x278>
      Error_Handler();
 8001ac0:	f7ff fe92 	bl	80017e8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4a0e      	ldr	r2, [pc, #56]	; (8001b00 <HAL_ADC_MspInit+0x2b4>)
 8001ac8:	639a      	str	r2, [r3, #56]	; 0x38
 8001aca:	4a0d      	ldr	r2, [pc, #52]	; (8001b00 <HAL_ADC_MspInit+0x2b4>)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001ad0:	bf00      	nop
 8001ad2:	3738      	adds	r7, #56	; 0x38
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40012000 	.word	0x40012000
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	40020000 	.word	0x40020000
 8001ae4:	20004814 	.word	0x20004814
 8001ae8:	40026410 	.word	0x40026410
 8001aec:	40012100 	.word	0x40012100
 8001af0:	20004928 	.word	0x20004928
 8001af4:	40026440 	.word	0x40026440
 8001af8:	40012200 	.word	0x40012200
 8001afc:	40020800 	.word	0x40020800
 8001b00:	20004720 	.word	0x20004720
 8001b04:	40026428 	.word	0x40026428

08001b08 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08a      	sub	sp, #40	; 0x28
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b10:	f107 0314 	add.w	r3, r7, #20
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	60da      	str	r2, [r3, #12]
 8001b1e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a1d      	ldr	r2, [pc, #116]	; (8001b9c <HAL_CAN_MspInit+0x94>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d133      	bne.n	8001b92 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	613b      	str	r3, [r7, #16]
 8001b2e:	4b1c      	ldr	r3, [pc, #112]	; (8001ba0 <HAL_CAN_MspInit+0x98>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	4a1b      	ldr	r2, [pc, #108]	; (8001ba0 <HAL_CAN_MspInit+0x98>)
 8001b34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b38:	6413      	str	r3, [r2, #64]	; 0x40
 8001b3a:	4b19      	ldr	r3, [pc, #100]	; (8001ba0 <HAL_CAN_MspInit+0x98>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b42:	613b      	str	r3, [r7, #16]
 8001b44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <HAL_CAN_MspInit+0x98>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	4a14      	ldr	r2, [pc, #80]	; (8001ba0 <HAL_CAN_MspInit+0x98>)
 8001b50:	f043 0308 	orr.w	r3, r3, #8
 8001b54:	6313      	str	r3, [r2, #48]	; 0x30
 8001b56:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <HAL_CAN_MspInit+0x98>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	f003 0308 	and.w	r3, r3, #8
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b62:	2303      	movs	r3, #3
 8001b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b66:	2302      	movs	r3, #2
 8001b68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001b72:	2309      	movs	r3, #9
 8001b74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b76:	f107 0314 	add.w	r3, r7, #20
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4809      	ldr	r0, [pc, #36]	; (8001ba4 <HAL_CAN_MspInit+0x9c>)
 8001b7e:	f002 f8fb 	bl	8003d78 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001b82:	2200      	movs	r2, #0
 8001b84:	2105      	movs	r1, #5
 8001b86:	2014      	movs	r0, #20
 8001b88:	f001 fd5c 	bl	8003644 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001b8c:	2014      	movs	r0, #20
 8001b8e:	f001 fd75 	bl	800367c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001b92:	bf00      	nop
 8001b94:	3728      	adds	r7, #40	; 0x28
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40006400 	.word	0x40006400
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	40020c00 	.word	0x40020c00

08001ba8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08a      	sub	sp, #40	; 0x28
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb0:	f107 0314 	add.w	r3, r7, #20
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	609a      	str	r2, [r3, #8]
 8001bbc:	60da      	str	r2, [r3, #12]
 8001bbe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a19      	ldr	r2, [pc, #100]	; (8001c2c <HAL_I2C_MspInit+0x84>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d12c      	bne.n	8001c24 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	613b      	str	r3, [r7, #16]
 8001bce:	4b18      	ldr	r3, [pc, #96]	; (8001c30 <HAL_I2C_MspInit+0x88>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	4a17      	ldr	r2, [pc, #92]	; (8001c30 <HAL_I2C_MspInit+0x88>)
 8001bd4:	f043 0302 	orr.w	r3, r3, #2
 8001bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bda:	4b15      	ldr	r3, [pc, #84]	; (8001c30 <HAL_I2C_MspInit+0x88>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	613b      	str	r3, [r7, #16]
 8001be4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001be6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001bea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bec:	2312      	movs	r3, #18
 8001bee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bf8:	2304      	movs	r3, #4
 8001bfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bfc:	f107 0314 	add.w	r3, r7, #20
 8001c00:	4619      	mov	r1, r3
 8001c02:	480c      	ldr	r0, [pc, #48]	; (8001c34 <HAL_I2C_MspInit+0x8c>)
 8001c04:	f002 f8b8 	bl	8003d78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c08:	2300      	movs	r3, #0
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	4b08      	ldr	r3, [pc, #32]	; (8001c30 <HAL_I2C_MspInit+0x88>)
 8001c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c10:	4a07      	ldr	r2, [pc, #28]	; (8001c30 <HAL_I2C_MspInit+0x88>)
 8001c12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c16:	6413      	str	r3, [r2, #64]	; 0x40
 8001c18:	4b05      	ldr	r3, [pc, #20]	; (8001c30 <HAL_I2C_MspInit+0x88>)
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c24:	bf00      	nop
 8001c26:	3728      	adds	r7, #40	; 0x28
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40005400 	.word	0x40005400
 8001c30:	40023800 	.word	0x40023800
 8001c34:	40020400 	.word	0x40020400

08001c38 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b08e      	sub	sp, #56	; 0x38
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
 8001c4c:	60da      	str	r2, [r3, #12]
 8001c4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c50:	f107 0314 	add.w	r3, r7, #20
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a31      	ldr	r2, [pc, #196]	; (8001d28 <HAL_I2S_MspInit+0xf0>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d15a      	bne.n	8001d1e <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001c6c:	23c0      	movs	r3, #192	; 0xc0
 8001c6e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001c70:	2302      	movs	r3, #2
 8001c72:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c74:	f107 0314 	add.w	r3, r7, #20
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f005 fa5f 	bl	800713c <HAL_RCCEx_PeriphCLKConfig>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001c84:	f7ff fdb0 	bl	80017e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001c88:	2300      	movs	r3, #0
 8001c8a:	613b      	str	r3, [r7, #16]
 8001c8c:	4b27      	ldr	r3, [pc, #156]	; (8001d2c <HAL_I2S_MspInit+0xf4>)
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c90:	4a26      	ldr	r2, [pc, #152]	; (8001d2c <HAL_I2S_MspInit+0xf4>)
 8001c92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c96:	6413      	str	r3, [r2, #64]	; 0x40
 8001c98:	4b24      	ldr	r3, [pc, #144]	; (8001d2c <HAL_I2S_MspInit+0xf4>)
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ca0:	613b      	str	r3, [r7, #16]
 8001ca2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	4b20      	ldr	r3, [pc, #128]	; (8001d2c <HAL_I2S_MspInit+0xf4>)
 8001caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cac:	4a1f      	ldr	r2, [pc, #124]	; (8001d2c <HAL_I2S_MspInit+0xf4>)
 8001cae:	f043 0301 	orr.w	r3, r3, #1
 8001cb2:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb4:	4b1d      	ldr	r3, [pc, #116]	; (8001d2c <HAL_I2S_MspInit+0xf4>)
 8001cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60bb      	str	r3, [r7, #8]
 8001cc4:	4b19      	ldr	r3, [pc, #100]	; (8001d2c <HAL_I2S_MspInit+0xf4>)
 8001cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc8:	4a18      	ldr	r2, [pc, #96]	; (8001d2c <HAL_I2S_MspInit+0xf4>)
 8001cca:	f043 0304 	orr.w	r3, r3, #4
 8001cce:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd0:	4b16      	ldr	r3, [pc, #88]	; (8001d2c <HAL_I2S_MspInit+0xf4>)
 8001cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd4:	f003 0304 	and.w	r3, r3, #4
 8001cd8:	60bb      	str	r3, [r7, #8]
 8001cda:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001cdc:	2310      	movs	r3, #16
 8001cde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001cec:	2306      	movs	r3, #6
 8001cee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001cf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	480e      	ldr	r0, [pc, #56]	; (8001d30 <HAL_I2S_MspInit+0xf8>)
 8001cf8:	f002 f83e 	bl	8003d78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001cfc:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001d00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d02:	2302      	movs	r3, #2
 8001d04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d0e:	2306      	movs	r3, #6
 8001d10:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d16:	4619      	mov	r1, r3
 8001d18:	4806      	ldr	r0, [pc, #24]	; (8001d34 <HAL_I2S_MspInit+0xfc>)
 8001d1a:	f002 f82d 	bl	8003d78 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001d1e:	bf00      	nop
 8001d20:	3738      	adds	r7, #56	; 0x38
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40003c00 	.word	0x40003c00
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40020000 	.word	0x40020000
 8001d34:	40020800 	.word	0x40020800

08001d38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b08a      	sub	sp, #40	; 0x28
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d40:	f107 0314 	add.w	r3, r7, #20
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	605a      	str	r2, [r3, #4]
 8001d4a:	609a      	str	r2, [r3, #8]
 8001d4c:	60da      	str	r2, [r3, #12]
 8001d4e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a19      	ldr	r2, [pc, #100]	; (8001dbc <HAL_SPI_MspInit+0x84>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d12b      	bne.n	8001db2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	613b      	str	r3, [r7, #16]
 8001d5e:	4b18      	ldr	r3, [pc, #96]	; (8001dc0 <HAL_SPI_MspInit+0x88>)
 8001d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d62:	4a17      	ldr	r2, [pc, #92]	; (8001dc0 <HAL_SPI_MspInit+0x88>)
 8001d64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d68:	6453      	str	r3, [r2, #68]	; 0x44
 8001d6a:	4b15      	ldr	r3, [pc, #84]	; (8001dc0 <HAL_SPI_MspInit+0x88>)
 8001d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d72:	613b      	str	r3, [r7, #16]
 8001d74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	4b11      	ldr	r3, [pc, #68]	; (8001dc0 <HAL_SPI_MspInit+0x88>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	4a10      	ldr	r2, [pc, #64]	; (8001dc0 <HAL_SPI_MspInit+0x88>)
 8001d80:	f043 0301 	orr.w	r3, r3, #1
 8001d84:	6313      	str	r3, [r2, #48]	; 0x30
 8001d86:	4b0e      	ldr	r3, [pc, #56]	; (8001dc0 <HAL_SPI_MspInit+0x88>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001d92:	23e0      	movs	r3, #224	; 0xe0
 8001d94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d96:	2302      	movs	r3, #2
 8001d98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001da2:	2305      	movs	r3, #5
 8001da4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da6:	f107 0314 	add.w	r3, r7, #20
 8001daa:	4619      	mov	r1, r3
 8001dac:	4805      	ldr	r0, [pc, #20]	; (8001dc4 <HAL_SPI_MspInit+0x8c>)
 8001dae:	f001 ffe3 	bl	8003d78 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001db2:	bf00      	nop
 8001db4:	3728      	adds	r7, #40	; 0x28
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40013000 	.word	0x40013000
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	40020000 	.word	0x40020000

08001dc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08a      	sub	sp, #40	; 0x28
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd0:	f107 0314 	add.w	r3, r7, #20
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	60da      	str	r2, [r3, #12]
 8001dde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a28      	ldr	r2, [pc, #160]	; (8001e88 <HAL_UART_MspInit+0xc0>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d149      	bne.n	8001e7e <HAL_UART_MspInit+0xb6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	613b      	str	r3, [r7, #16]
 8001dee:	4b27      	ldr	r3, [pc, #156]	; (8001e8c <HAL_UART_MspInit+0xc4>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	4a26      	ldr	r2, [pc, #152]	; (8001e8c <HAL_UART_MspInit+0xc4>)
 8001df4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001df8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dfa:	4b24      	ldr	r3, [pc, #144]	; (8001e8c <HAL_UART_MspInit+0xc4>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e02:	613b      	str	r3, [r7, #16]
 8001e04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	60fb      	str	r3, [r7, #12]
 8001e0a:	4b20      	ldr	r3, [pc, #128]	; (8001e8c <HAL_UART_MspInit+0xc4>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	4a1f      	ldr	r2, [pc, #124]	; (8001e8c <HAL_UART_MspInit+0xc4>)
 8001e10:	f043 0301 	orr.w	r3, r3, #1
 8001e14:	6313      	str	r3, [r2, #48]	; 0x30
 8001e16:	4b1d      	ldr	r3, [pc, #116]	; (8001e8c <HAL_UART_MspInit+0xc4>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	60bb      	str	r3, [r7, #8]
 8001e26:	4b19      	ldr	r3, [pc, #100]	; (8001e8c <HAL_UART_MspInit+0xc4>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	4a18      	ldr	r2, [pc, #96]	; (8001e8c <HAL_UART_MspInit+0xc4>)
 8001e2c:	f043 0308 	orr.w	r3, r3, #8
 8001e30:	6313      	str	r3, [r2, #48]	; 0x30
 8001e32:	4b16      	ldr	r3, [pc, #88]	; (8001e8c <HAL_UART_MspInit+0xc4>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	f003 0308 	and.w	r3, r3, #8
 8001e3a:	60bb      	str	r3, [r7, #8]
 8001e3c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e3e:	2304      	movs	r3, #4
 8001e40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e42:	2302      	movs	r3, #2
 8001e44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e46:	2300      	movs	r3, #0
 8001e48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e4e:	2307      	movs	r3, #7
 8001e50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e52:	f107 0314 	add.w	r3, r7, #20
 8001e56:	4619      	mov	r1, r3
 8001e58:	480d      	ldr	r0, [pc, #52]	; (8001e90 <HAL_UART_MspInit+0xc8>)
 8001e5a:	f001 ff8d 	bl	8003d78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e5e:	2340      	movs	r3, #64	; 0x40
 8001e60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e62:	2302      	movs	r3, #2
 8001e64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e66:	2300      	movs	r3, #0
 8001e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e6e:	2307      	movs	r3, #7
 8001e70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e72:	f107 0314 	add.w	r3, r7, #20
 8001e76:	4619      	mov	r1, r3
 8001e78:	4806      	ldr	r0, [pc, #24]	; (8001e94 <HAL_UART_MspInit+0xcc>)
 8001e7a:	f001 ff7d 	bl	8003d78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e7e:	bf00      	nop
 8001e80:	3728      	adds	r7, #40	; 0x28
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40004400 	.word	0x40004400
 8001e8c:	40023800 	.word	0x40023800
 8001e90:	40020000 	.word	0x40020000
 8001e94:	40020c00 	.word	0x40020c00

08001e98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b08c      	sub	sp, #48	; 0x30
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	6879      	ldr	r1, [r7, #4]
 8001eac:	2019      	movs	r0, #25
 8001eae:	f001 fbc9 	bl	8003644 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001eb2:	2019      	movs	r0, #25
 8001eb4:	f001 fbe2 	bl	800367c <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001eb8:	2300      	movs	r3, #0
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	4b1f      	ldr	r3, [pc, #124]	; (8001f3c <HAL_InitTick+0xa4>)
 8001ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec0:	4a1e      	ldr	r2, [pc, #120]	; (8001f3c <HAL_InitTick+0xa4>)
 8001ec2:	f043 0301 	orr.w	r3, r3, #1
 8001ec6:	6453      	str	r3, [r2, #68]	; 0x44
 8001ec8:	4b1c      	ldr	r3, [pc, #112]	; (8001f3c <HAL_InitTick+0xa4>)
 8001eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ed4:	f107 0210 	add.w	r2, r7, #16
 8001ed8:	f107 0314 	add.w	r3, r7, #20
 8001edc:	4611      	mov	r1, r2
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f005 f8fa 	bl	80070d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001ee4:	f005 f8e4 	bl	80070b0 <HAL_RCC_GetPCLK2Freq>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ef0:	4a13      	ldr	r2, [pc, #76]	; (8001f40 <HAL_InitTick+0xa8>)
 8001ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef6:	0c9b      	lsrs	r3, r3, #18
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001efc:	4b11      	ldr	r3, [pc, #68]	; (8001f44 <HAL_InitTick+0xac>)
 8001efe:	4a12      	ldr	r2, [pc, #72]	; (8001f48 <HAL_InitTick+0xb0>)
 8001f00:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001f02:	4b10      	ldr	r3, [pc, #64]	; (8001f44 <HAL_InitTick+0xac>)
 8001f04:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f08:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001f0a:	4a0e      	ldr	r2, [pc, #56]	; (8001f44 <HAL_InitTick+0xac>)
 8001f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f0e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001f10:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <HAL_InitTick+0xac>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f16:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <HAL_InitTick+0xac>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001f1c:	4809      	ldr	r0, [pc, #36]	; (8001f44 <HAL_InitTick+0xac>)
 8001f1e:	f005 fad6 	bl	80074ce <HAL_TIM_Base_Init>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d104      	bne.n	8001f32 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001f28:	4806      	ldr	r0, [pc, #24]	; (8001f44 <HAL_InitTick+0xac>)
 8001f2a:	f005 fb29 	bl	8007580 <HAL_TIM_Base_Start_IT>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	e000      	b.n	8001f34 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3730      	adds	r7, #48	; 0x30
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	431bde83 	.word	0x431bde83
 8001f44:	20004a3c 	.word	0x20004a3c
 8001f48:	40010000 	.word	0x40010000

08001f4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f50:	e7fe      	b.n	8001f50 <NMI_Handler+0x4>

08001f52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f52:	b480      	push	{r7}
 8001f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f56:	e7fe      	b.n	8001f56 <HardFault_Handler+0x4>

08001f58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f5c:	e7fe      	b.n	8001f5c <MemManage_Handler+0x4>

08001f5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f62:	e7fe      	b.n	8001f62 <BusFault_Handler+0x4>

08001f64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f68:	e7fe      	b.n	8001f68 <UsageFault_Handler+0x4>

08001f6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001f7c:	4802      	ldr	r0, [pc, #8]	; (8001f88 <CAN1_RX0_IRQHandler+0x10>)
 8001f7e:	f001 f879 	bl	8003074 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	2000498c 	.word	0x2000498c

08001f8c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f90:	4802      	ldr	r0, [pc, #8]	; (8001f9c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001f92:	f005 fb65 	bl	8007660 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	20004a3c 	.word	0x20004a3c

08001fa0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001fa4:	4802      	ldr	r0, [pc, #8]	; (8001fb0 <DMA2_Stream0_IRQHandler+0x10>)
 8001fa6:	f001 fc7d 	bl	80038a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	20004814 	.word	0x20004814

08001fb4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001fb8:	4802      	ldr	r0, [pc, #8]	; (8001fc4 <DMA2_Stream1_IRQHandler+0x10>)
 8001fba:	f001 fc73 	bl	80038a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20004720 	.word	0x20004720

08001fc8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001fcc:	4802      	ldr	r0, [pc, #8]	; (8001fd8 <DMA2_Stream2_IRQHandler+0x10>)
 8001fce:	f001 fc69 	bl	80038a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	20004928 	.word	0x20004928

08001fdc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001fe0:	4802      	ldr	r0, [pc, #8]	; (8001fec <OTG_FS_IRQHandler+0x10>)
 8001fe2:	f002 fb1b 	bl	800461c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20004eac 	.word	0x20004eac

08001ff0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ff8:	4a14      	ldr	r2, [pc, #80]	; (800204c <_sbrk+0x5c>)
 8001ffa:	4b15      	ldr	r3, [pc, #84]	; (8002050 <_sbrk+0x60>)
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002004:	4b13      	ldr	r3, [pc, #76]	; (8002054 <_sbrk+0x64>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d102      	bne.n	8002012 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800200c:	4b11      	ldr	r3, [pc, #68]	; (8002054 <_sbrk+0x64>)
 800200e:	4a12      	ldr	r2, [pc, #72]	; (8002058 <_sbrk+0x68>)
 8002010:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002012:	4b10      	ldr	r3, [pc, #64]	; (8002054 <_sbrk+0x64>)
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4413      	add	r3, r2
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	429a      	cmp	r2, r3
 800201e:	d207      	bcs.n	8002030 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002020:	f00c fb5e 	bl	800e6e0 <__errno>
 8002024:	4603      	mov	r3, r0
 8002026:	220c      	movs	r2, #12
 8002028:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800202a:	f04f 33ff 	mov.w	r3, #4294967295
 800202e:	e009      	b.n	8002044 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002030:	4b08      	ldr	r3, [pc, #32]	; (8002054 <_sbrk+0x64>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002036:	4b07      	ldr	r3, [pc, #28]	; (8002054 <_sbrk+0x64>)
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4413      	add	r3, r2
 800203e:	4a05      	ldr	r2, [pc, #20]	; (8002054 <_sbrk+0x64>)
 8002040:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002042:	68fb      	ldr	r3, [r7, #12]
}
 8002044:	4618      	mov	r0, r3
 8002046:	3718      	adds	r7, #24
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	20020000 	.word	0x20020000
 8002050:	00000400 	.word	0x00000400
 8002054:	2000081c 	.word	0x2000081c
 8002058:	200051c0 	.word	0x200051c0

0800205c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002060:	4b06      	ldr	r3, [pc, #24]	; (800207c <SystemInit+0x20>)
 8002062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002066:	4a05      	ldr	r2, [pc, #20]	; (800207c <SystemInit+0x20>)
 8002068:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800206c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002070:	bf00      	nop
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	e000ed00 	.word	0xe000ed00

08002080 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002080:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002084:	480d      	ldr	r0, [pc, #52]	; (80020bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002086:	490e      	ldr	r1, [pc, #56]	; (80020c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002088:	4a0e      	ldr	r2, [pc, #56]	; (80020c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800208a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800208c:	e002      	b.n	8002094 <LoopCopyDataInit>

0800208e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800208e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002090:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002092:	3304      	adds	r3, #4

08002094 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002094:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002096:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002098:	d3f9      	bcc.n	800208e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800209a:	4a0b      	ldr	r2, [pc, #44]	; (80020c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800209c:	4c0b      	ldr	r4, [pc, #44]	; (80020cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800209e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020a0:	e001      	b.n	80020a6 <LoopFillZerobss>

080020a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020a4:	3204      	adds	r2, #4

080020a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020a8:	d3fb      	bcc.n	80020a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80020aa:	f7ff ffd7 	bl	800205c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020ae:	f00c fb1d 	bl	800e6ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020b2:	f7fe fdbb 	bl	8000c2c <main>
  bx  lr    
 80020b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80020b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020c0:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80020c4:	0800f2b8 	.word	0x0800f2b8
  ldr r2, =_sbss
 80020c8:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80020cc:	200051c0 	.word	0x200051c0

080020d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020d0:	e7fe      	b.n	80020d0 <ADC_IRQHandler>
	...

080020d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020d8:	4b0e      	ldr	r3, [pc, #56]	; (8002114 <HAL_Init+0x40>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a0d      	ldr	r2, [pc, #52]	; (8002114 <HAL_Init+0x40>)
 80020de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020e4:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <HAL_Init+0x40>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a0a      	ldr	r2, [pc, #40]	; (8002114 <HAL_Init+0x40>)
 80020ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020f0:	4b08      	ldr	r3, [pc, #32]	; (8002114 <HAL_Init+0x40>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a07      	ldr	r2, [pc, #28]	; (8002114 <HAL_Init+0x40>)
 80020f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020fc:	2003      	movs	r0, #3
 80020fe:	f001 fa96 	bl	800362e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002102:	200f      	movs	r0, #15
 8002104:	f7ff fec8 	bl	8001e98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002108:	f7ff fb74 	bl	80017f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40023c00 	.word	0x40023c00

08002118 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800211c:	4b06      	ldr	r3, [pc, #24]	; (8002138 <HAL_IncTick+0x20>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	461a      	mov	r2, r3
 8002122:	4b06      	ldr	r3, [pc, #24]	; (800213c <HAL_IncTick+0x24>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4413      	add	r3, r2
 8002128:	4a04      	ldr	r2, [pc, #16]	; (800213c <HAL_IncTick+0x24>)
 800212a:	6013      	str	r3, [r2, #0]
}
 800212c:	bf00      	nop
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	20000008 	.word	0x20000008
 800213c:	20004a84 	.word	0x20004a84

08002140 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  return uwTick;
 8002144:	4b03      	ldr	r3, [pc, #12]	; (8002154 <HAL_GetTick+0x14>)
 8002146:	681b      	ldr	r3, [r3, #0]
}
 8002148:	4618      	mov	r0, r3
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	20004a84 	.word	0x20004a84

08002158 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002160:	f7ff ffee 	bl	8002140 <HAL_GetTick>
 8002164:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002170:	d005      	beq.n	800217e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002172:	4b0a      	ldr	r3, [pc, #40]	; (800219c <HAL_Delay+0x44>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	461a      	mov	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	4413      	add	r3, r2
 800217c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800217e:	bf00      	nop
 8002180:	f7ff ffde 	bl	8002140 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	429a      	cmp	r2, r3
 800218e:	d8f7      	bhi.n	8002180 <HAL_Delay+0x28>
  {
  }
}
 8002190:	bf00      	nop
 8002192:	bf00      	nop
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	20000008 	.word	0x20000008

080021a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021a8:	2300      	movs	r3, #0
 80021aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e033      	b.n	800221e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d109      	bne.n	80021d2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f7ff fb44 	bl	800184c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	f003 0310 	and.w	r3, r3, #16
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d118      	bne.n	8002210 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021e6:	f023 0302 	bic.w	r3, r3, #2
 80021ea:	f043 0202 	orr.w	r2, r3, #2
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 fa68 	bl	80026c8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	f023 0303 	bic.w	r3, r3, #3
 8002206:	f043 0201 	orr.w	r2, r3, #1
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	641a      	str	r2, [r3, #64]	; 0x40
 800220e:	e001      	b.n	8002214 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800221c:	7bfb      	ldrb	r3, [r7, #15]
}
 800221e:	4618      	mov	r0, r3
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
	...

08002228 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002234:	2300      	movs	r3, #0
 8002236:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800223e:	2b01      	cmp	r3, #1
 8002240:	d101      	bne.n	8002246 <HAL_ADC_Start_DMA+0x1e>
 8002242:	2302      	movs	r3, #2
 8002244:	e0e9      	b.n	800241a <HAL_ADC_Start_DMA+0x1f2>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f003 0301 	and.w	r3, r3, #1
 8002258:	2b01      	cmp	r3, #1
 800225a:	d018      	beq.n	800228e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	689a      	ldr	r2, [r3, #8]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f042 0201 	orr.w	r2, r2, #1
 800226a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800226c:	4b6d      	ldr	r3, [pc, #436]	; (8002424 <HAL_ADC_Start_DMA+0x1fc>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a6d      	ldr	r2, [pc, #436]	; (8002428 <HAL_ADC_Start_DMA+0x200>)
 8002272:	fba2 2303 	umull	r2, r3, r2, r3
 8002276:	0c9a      	lsrs	r2, r3, #18
 8002278:	4613      	mov	r3, r2
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	4413      	add	r3, r2
 800227e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002280:	e002      	b.n	8002288 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	3b01      	subs	r3, #1
 8002286:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1f9      	bne.n	8002282 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002298:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800229c:	d107      	bne.n	80022ae <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f003 0301 	and.w	r3, r3, #1
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	f040 80a1 	bne.w	8002400 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80022c6:	f023 0301 	bic.w	r3, r3, #1
 80022ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d007      	beq.n	80022f0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022e8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022fc:	d106      	bne.n	800230c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002302:	f023 0206 	bic.w	r2, r3, #6
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	645a      	str	r2, [r3, #68]	; 0x44
 800230a:	e002      	b.n	8002312 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800231a:	4b44      	ldr	r3, [pc, #272]	; (800242c <HAL_ADC_Start_DMA+0x204>)
 800231c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002322:	4a43      	ldr	r2, [pc, #268]	; (8002430 <HAL_ADC_Start_DMA+0x208>)
 8002324:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800232a:	4a42      	ldr	r2, [pc, #264]	; (8002434 <HAL_ADC_Start_DMA+0x20c>)
 800232c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002332:	4a41      	ldr	r2, [pc, #260]	; (8002438 <HAL_ADC_Start_DMA+0x210>)
 8002334:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800233e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	685a      	ldr	r2, [r3, #4]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800234e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689a      	ldr	r2, [r3, #8]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800235e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	334c      	adds	r3, #76	; 0x4c
 800236a:	4619      	mov	r1, r3
 800236c:	68ba      	ldr	r2, [r7, #8]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f001 fa40 	bl	80037f4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f003 031f 	and.w	r3, r3, #31
 800237c:	2b00      	cmp	r3, #0
 800237e:	d12a      	bne.n	80023d6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a2d      	ldr	r2, [pc, #180]	; (800243c <HAL_ADC_Start_DMA+0x214>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d015      	beq.n	80023b6 <HAL_ADC_Start_DMA+0x18e>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a2c      	ldr	r2, [pc, #176]	; (8002440 <HAL_ADC_Start_DMA+0x218>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d105      	bne.n	80023a0 <HAL_ADC_Start_DMA+0x178>
 8002394:	4b25      	ldr	r3, [pc, #148]	; (800242c <HAL_ADC_Start_DMA+0x204>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f003 031f 	and.w	r3, r3, #31
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00a      	beq.n	80023b6 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a27      	ldr	r2, [pc, #156]	; (8002444 <HAL_ADC_Start_DMA+0x21c>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d136      	bne.n	8002418 <HAL_ADC_Start_DMA+0x1f0>
 80023aa:	4b20      	ldr	r3, [pc, #128]	; (800242c <HAL_ADC_Start_DMA+0x204>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f003 0310 	and.w	r3, r3, #16
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d130      	bne.n	8002418 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d129      	bne.n	8002418 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689a      	ldr	r2, [r3, #8]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80023d2:	609a      	str	r2, [r3, #8]
 80023d4:	e020      	b.n	8002418 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a18      	ldr	r2, [pc, #96]	; (800243c <HAL_ADC_Start_DMA+0x214>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d11b      	bne.n	8002418 <HAL_ADC_Start_DMA+0x1f0>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d114      	bne.n	8002418 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80023fc:	609a      	str	r2, [r3, #8]
 80023fe:	e00b      	b.n	8002418 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002404:	f043 0210 	orr.w	r2, r3, #16
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002410:	f043 0201 	orr.w	r2, r3, #1
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3718      	adds	r7, #24
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	20000000 	.word	0x20000000
 8002428:	431bde83 	.word	0x431bde83
 800242c:	40012300 	.word	0x40012300
 8002430:	080028c1 	.word	0x080028c1
 8002434:	0800297b 	.word	0x0800297b
 8002438:	08002997 	.word	0x08002997
 800243c:	40012000 	.word	0x40012000
 8002440:	40012100 	.word	0x40012100
 8002444:	40012200 	.word	0x40012200

08002448 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800248e:	2300      	movs	r3, #0
 8002490:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002498:	2b01      	cmp	r3, #1
 800249a:	d101      	bne.n	80024a0 <HAL_ADC_ConfigChannel+0x1c>
 800249c:	2302      	movs	r3, #2
 800249e:	e105      	b.n	80026ac <HAL_ADC_ConfigChannel+0x228>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2b09      	cmp	r3, #9
 80024ae:	d925      	bls.n	80024fc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68d9      	ldr	r1, [r3, #12]
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	461a      	mov	r2, r3
 80024be:	4613      	mov	r3, r2
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	4413      	add	r3, r2
 80024c4:	3b1e      	subs	r3, #30
 80024c6:	2207      	movs	r2, #7
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	43da      	mvns	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	400a      	ands	r2, r1
 80024d4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68d9      	ldr	r1, [r3, #12]
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	4618      	mov	r0, r3
 80024e8:	4603      	mov	r3, r0
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	4403      	add	r3, r0
 80024ee:	3b1e      	subs	r3, #30
 80024f0:	409a      	lsls	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	430a      	orrs	r2, r1
 80024f8:	60da      	str	r2, [r3, #12]
 80024fa:	e022      	b.n	8002542 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6919      	ldr	r1, [r3, #16]
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	b29b      	uxth	r3, r3
 8002508:	461a      	mov	r2, r3
 800250a:	4613      	mov	r3, r2
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	4413      	add	r3, r2
 8002510:	2207      	movs	r2, #7
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	43da      	mvns	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	400a      	ands	r2, r1
 800251e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6919      	ldr	r1, [r3, #16]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	689a      	ldr	r2, [r3, #8]
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	b29b      	uxth	r3, r3
 8002530:	4618      	mov	r0, r3
 8002532:	4603      	mov	r3, r0
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	4403      	add	r3, r0
 8002538:	409a      	lsls	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	430a      	orrs	r2, r1
 8002540:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	2b06      	cmp	r3, #6
 8002548:	d824      	bhi.n	8002594 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685a      	ldr	r2, [r3, #4]
 8002554:	4613      	mov	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4413      	add	r3, r2
 800255a:	3b05      	subs	r3, #5
 800255c:	221f      	movs	r2, #31
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	43da      	mvns	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	400a      	ands	r2, r1
 800256a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	b29b      	uxth	r3, r3
 8002578:	4618      	mov	r0, r3
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685a      	ldr	r2, [r3, #4]
 800257e:	4613      	mov	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	4413      	add	r3, r2
 8002584:	3b05      	subs	r3, #5
 8002586:	fa00 f203 	lsl.w	r2, r0, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	430a      	orrs	r2, r1
 8002590:	635a      	str	r2, [r3, #52]	; 0x34
 8002592:	e04c      	b.n	800262e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	2b0c      	cmp	r3, #12
 800259a:	d824      	bhi.n	80025e6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685a      	ldr	r2, [r3, #4]
 80025a6:	4613      	mov	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	4413      	add	r3, r2
 80025ac:	3b23      	subs	r3, #35	; 0x23
 80025ae:	221f      	movs	r2, #31
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	43da      	mvns	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	400a      	ands	r2, r1
 80025bc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	4618      	mov	r0, r3
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685a      	ldr	r2, [r3, #4]
 80025d0:	4613      	mov	r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4413      	add	r3, r2
 80025d6:	3b23      	subs	r3, #35	; 0x23
 80025d8:	fa00 f203 	lsl.w	r2, r0, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	430a      	orrs	r2, r1
 80025e2:	631a      	str	r2, [r3, #48]	; 0x30
 80025e4:	e023      	b.n	800262e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685a      	ldr	r2, [r3, #4]
 80025f0:	4613      	mov	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4413      	add	r3, r2
 80025f6:	3b41      	subs	r3, #65	; 0x41
 80025f8:	221f      	movs	r2, #31
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	43da      	mvns	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	400a      	ands	r2, r1
 8002606:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	b29b      	uxth	r3, r3
 8002614:	4618      	mov	r0, r3
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	4613      	mov	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	4413      	add	r3, r2
 8002620:	3b41      	subs	r3, #65	; 0x41
 8002622:	fa00 f203 	lsl.w	r2, r0, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	430a      	orrs	r2, r1
 800262c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800262e:	4b22      	ldr	r3, [pc, #136]	; (80026b8 <HAL_ADC_ConfigChannel+0x234>)
 8002630:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a21      	ldr	r2, [pc, #132]	; (80026bc <HAL_ADC_ConfigChannel+0x238>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d109      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x1cc>
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b12      	cmp	r3, #18
 8002642:	d105      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a19      	ldr	r2, [pc, #100]	; (80026bc <HAL_ADC_ConfigChannel+0x238>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d123      	bne.n	80026a2 <HAL_ADC_ConfigChannel+0x21e>
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2b10      	cmp	r3, #16
 8002660:	d003      	beq.n	800266a <HAL_ADC_ConfigChannel+0x1e6>
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2b11      	cmp	r3, #17
 8002668:	d11b      	bne.n	80026a2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2b10      	cmp	r3, #16
 800267c:	d111      	bne.n	80026a2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800267e:	4b10      	ldr	r3, [pc, #64]	; (80026c0 <HAL_ADC_ConfigChannel+0x23c>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a10      	ldr	r2, [pc, #64]	; (80026c4 <HAL_ADC_ConfigChannel+0x240>)
 8002684:	fba2 2303 	umull	r2, r3, r2, r3
 8002688:	0c9a      	lsrs	r2, r3, #18
 800268a:	4613      	mov	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4413      	add	r3, r2
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002694:	e002      	b.n	800269c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	3b01      	subs	r3, #1
 800269a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1f9      	bne.n	8002696 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	40012300 	.word	0x40012300
 80026bc:	40012000 	.word	0x40012000
 80026c0:	20000000 	.word	0x20000000
 80026c4:	431bde83 	.word	0x431bde83

080026c8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026d0:	4b79      	ldr	r3, [pc, #484]	; (80028b8 <ADC_Init+0x1f0>)
 80026d2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	431a      	orrs	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6859      	ldr	r1, [r3, #4]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	021a      	lsls	r2, r3, #8
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	430a      	orrs	r2, r1
 8002710:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	685a      	ldr	r2, [r3, #4]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002720:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	6859      	ldr	r1, [r3, #4]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	430a      	orrs	r2, r1
 8002732:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	689a      	ldr	r2, [r3, #8]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002742:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6899      	ldr	r1, [r3, #8]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68da      	ldr	r2, [r3, #12]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	430a      	orrs	r2, r1
 8002754:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275a:	4a58      	ldr	r2, [pc, #352]	; (80028bc <ADC_Init+0x1f4>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d022      	beq.n	80027a6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800276e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6899      	ldr	r1, [r3, #8]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	430a      	orrs	r2, r1
 8002780:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002790:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6899      	ldr	r1, [r3, #8]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	430a      	orrs	r2, r1
 80027a2:	609a      	str	r2, [r3, #8]
 80027a4:	e00f      	b.n	80027c6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	689a      	ldr	r2, [r3, #8]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80027c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	689a      	ldr	r2, [r3, #8]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 0202 	bic.w	r2, r2, #2
 80027d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	6899      	ldr	r1, [r3, #8]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	7e1b      	ldrb	r3, [r3, #24]
 80027e0:	005a      	lsls	r2, r3, #1
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	430a      	orrs	r2, r1
 80027e8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d01b      	beq.n	800282c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002802:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002812:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6859      	ldr	r1, [r3, #4]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281e:	3b01      	subs	r3, #1
 8002820:	035a      	lsls	r2, r3, #13
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	430a      	orrs	r2, r1
 8002828:	605a      	str	r2, [r3, #4]
 800282a:	e007      	b.n	800283c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800283a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800284a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	69db      	ldr	r3, [r3, #28]
 8002856:	3b01      	subs	r3, #1
 8002858:	051a      	lsls	r2, r3, #20
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	430a      	orrs	r2, r1
 8002860:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002870:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6899      	ldr	r1, [r3, #8]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800287e:	025a      	lsls	r2, r3, #9
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	430a      	orrs	r2, r1
 8002886:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689a      	ldr	r2, [r3, #8]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002896:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6899      	ldr	r1, [r3, #8]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	029a      	lsls	r2, r3, #10
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	430a      	orrs	r2, r1
 80028aa:	609a      	str	r2, [r3, #8]
}
 80028ac:	bf00      	nop
 80028ae:	3714      	adds	r7, #20
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	40012300 	.word	0x40012300
 80028bc:	0f000001 	.word	0x0f000001

080028c0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028cc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d13c      	bne.n	8002954 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d12b      	bne.n	800294c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d127      	bne.n	800294c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002902:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002906:	2b00      	cmp	r3, #0
 8002908:	d006      	beq.n	8002918 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002914:	2b00      	cmp	r3, #0
 8002916:	d119      	bne.n	800294c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	685a      	ldr	r2, [r3, #4]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 0220 	bic.w	r2, r2, #32
 8002926:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002938:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d105      	bne.n	800294c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002944:	f043 0201 	orr.w	r2, r3, #1
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	f7ff fd7b 	bl	8002448 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002952:	e00e      	b.n	8002972 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002958:	f003 0310 	and.w	r3, r3, #16
 800295c:	2b00      	cmp	r3, #0
 800295e:	d003      	beq.n	8002968 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	f7ff fd85 	bl	8002470 <HAL_ADC_ErrorCallback>
}
 8002966:	e004      	b.n	8002972 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800296c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	4798      	blx	r3
}
 8002972:	bf00      	nop
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b084      	sub	sp, #16
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002986:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	f7ff fd67 	bl	800245c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800298e:	bf00      	nop
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b084      	sub	sp, #16
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2240      	movs	r2, #64	; 0x40
 80029a8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ae:	f043 0204 	orr.w	r2, r3, #4
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80029b6:	68f8      	ldr	r0, [r7, #12]
 80029b8:	f7ff fd5a 	bl	8002470 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029bc:	bf00      	nop
 80029be:	3710      	adds	r7, #16
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e0ed      	b.n	8002bb2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d102      	bne.n	80029e8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f7ff f890 	bl	8001b08 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f042 0201 	orr.w	r2, r2, #1
 80029f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029f8:	f7ff fba2 	bl	8002140 <HAL_GetTick>
 80029fc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80029fe:	e012      	b.n	8002a26 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a00:	f7ff fb9e 	bl	8002140 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b0a      	cmp	r3, #10
 8002a0c:	d90b      	bls.n	8002a26 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a12:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2205      	movs	r2, #5
 8002a1e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e0c5      	b.n	8002bb2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d0e5      	beq.n	8002a00 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 0202 	bic.w	r2, r2, #2
 8002a42:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a44:	f7ff fb7c 	bl	8002140 <HAL_GetTick>
 8002a48:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002a4a:	e012      	b.n	8002a72 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a4c:	f7ff fb78 	bl	8002140 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b0a      	cmp	r3, #10
 8002a58:	d90b      	bls.n	8002a72 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2205      	movs	r2, #5
 8002a6a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e09f      	b.n	8002bb2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1e5      	bne.n	8002a4c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	7e1b      	ldrb	r3, [r3, #24]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d108      	bne.n	8002a9a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	e007      	b.n	8002aaa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002aa8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	7e5b      	ldrb	r3, [r3, #25]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d108      	bne.n	8002ac4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	e007      	b.n	8002ad4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ad2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	7e9b      	ldrb	r3, [r3, #26]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d108      	bne.n	8002aee <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f042 0220 	orr.w	r2, r2, #32
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	e007      	b.n	8002afe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 0220 	bic.w	r2, r2, #32
 8002afc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	7edb      	ldrb	r3, [r3, #27]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d108      	bne.n	8002b18 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f022 0210 	bic.w	r2, r2, #16
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	e007      	b.n	8002b28 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f042 0210 	orr.w	r2, r2, #16
 8002b26:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	7f1b      	ldrb	r3, [r3, #28]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d108      	bne.n	8002b42 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f042 0208 	orr.w	r2, r2, #8
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	e007      	b.n	8002b52 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f022 0208 	bic.w	r2, r2, #8
 8002b50:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	7f5b      	ldrb	r3, [r3, #29]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d108      	bne.n	8002b6c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f042 0204 	orr.w	r2, r2, #4
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	e007      	b.n	8002b7c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 0204 	bic.w	r2, r2, #4
 8002b7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	431a      	orrs	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	695b      	ldr	r3, [r3, #20]
 8002b90:	ea42 0103 	orr.w	r1, r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	1e5a      	subs	r2, r3, #1
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
	...

08002bbc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b087      	sub	sp, #28
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bd2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002bd4:	7cfb      	ldrb	r3, [r7, #19]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d003      	beq.n	8002be2 <HAL_CAN_ConfigFilter+0x26>
 8002bda:	7cfb      	ldrb	r3, [r7, #19]
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	f040 80be 	bne.w	8002d5e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002be2:	4b65      	ldr	r3, [pc, #404]	; (8002d78 <HAL_CAN_ConfigFilter+0x1bc>)
 8002be4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002bec:	f043 0201 	orr.w	r2, r3, #1
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002bfc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	021b      	lsls	r3, r3, #8
 8002c12:	431a      	orrs	r2, r3
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	f003 031f 	and.w	r3, r3, #31
 8002c22:	2201      	movs	r2, #1
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	43db      	mvns	r3, r3
 8002c34:	401a      	ands	r2, r3
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	69db      	ldr	r3, [r3, #28]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d123      	bne.n	8002c8c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	401a      	ands	r2, r3
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002c66:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	3248      	adds	r2, #72	; 0x48
 8002c6c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002c80:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002c82:	6979      	ldr	r1, [r7, #20]
 8002c84:	3348      	adds	r3, #72	; 0x48
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	440b      	add	r3, r1
 8002c8a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	69db      	ldr	r3, [r3, #28]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d122      	bne.n	8002cda <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002cb4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	3248      	adds	r2, #72	; 0x48
 8002cba:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002cce:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002cd0:	6979      	ldr	r1, [r7, #20]
 8002cd2:	3348      	adds	r3, #72	; 0x48
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	440b      	add	r3, r1
 8002cd8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d109      	bne.n	8002cf6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	43db      	mvns	r3, r3
 8002cec:	401a      	ands	r2, r3
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002cf4:	e007      	b.n	8002d06 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d109      	bne.n	8002d22 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	43db      	mvns	r3, r3
 8002d18:	401a      	ands	r2, r3
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002d20:	e007      	b.n	8002d32 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d107      	bne.n	8002d4a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	431a      	orrs	r2, r3
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002d50:	f023 0201 	bic.w	r2, r3, #1
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	e006      	b.n	8002d6c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
  }
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	371c      	adds	r7, #28
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr
 8002d78:	40006400 	.word	0x40006400

08002d7c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d12e      	bne.n	8002dee <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2202      	movs	r2, #2
 8002d94:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f022 0201 	bic.w	r2, r2, #1
 8002da6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002da8:	f7ff f9ca 	bl	8002140 <HAL_GetTick>
 8002dac:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002dae:	e012      	b.n	8002dd6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002db0:	f7ff f9c6 	bl	8002140 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b0a      	cmp	r3, #10
 8002dbc:	d90b      	bls.n	8002dd6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2205      	movs	r2, #5
 8002dce:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e012      	b.n	8002dfc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1e5      	bne.n	8002db0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002dea:	2300      	movs	r3, #0
 8002dec:	e006      	b.n	8002dfc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
  }
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002e04:	b480      	push	{r7}
 8002e06:	b087      	sub	sp, #28
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
 8002e10:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e18:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002e1a:	7dfb      	ldrb	r3, [r7, #23]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d003      	beq.n	8002e28 <HAL_CAN_GetRxMessage+0x24>
 8002e20:	7dfb      	ldrb	r3, [r7, #23]
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	f040 80f3 	bne.w	800300e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d10e      	bne.n	8002e4c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	f003 0303 	and.w	r3, r3, #3
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d116      	bne.n	8002e6a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e40:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e0e7      	b.n	800301c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	f003 0303 	and.w	r3, r3, #3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d107      	bne.n	8002e6a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e0d8      	b.n	800301c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	331b      	adds	r3, #27
 8002e72:	011b      	lsls	r3, r3, #4
 8002e74:	4413      	add	r3, r2
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0204 	and.w	r2, r3, #4
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d10c      	bne.n	8002ea2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	331b      	adds	r3, #27
 8002e90:	011b      	lsls	r3, r3, #4
 8002e92:	4413      	add	r3, r2
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	0d5b      	lsrs	r3, r3, #21
 8002e98:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	e00b      	b.n	8002eba <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	331b      	adds	r3, #27
 8002eaa:	011b      	lsls	r3, r3, #4
 8002eac:	4413      	add	r3, r2
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	08db      	lsrs	r3, r3, #3
 8002eb2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	331b      	adds	r3, #27
 8002ec2:	011b      	lsls	r3, r3, #4
 8002ec4:	4413      	add	r3, r2
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0202 	and.w	r2, r3, #2
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	331b      	adds	r3, #27
 8002ed8:	011b      	lsls	r3, r3, #4
 8002eda:	4413      	add	r3, r2
 8002edc:	3304      	adds	r3, #4
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 020f 	and.w	r2, r3, #15
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	331b      	adds	r3, #27
 8002ef0:	011b      	lsls	r3, r3, #4
 8002ef2:	4413      	add	r3, r2
 8002ef4:	3304      	adds	r3, #4
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	0a1b      	lsrs	r3, r3, #8
 8002efa:	b2da      	uxtb	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	331b      	adds	r3, #27
 8002f08:	011b      	lsls	r3, r3, #4
 8002f0a:	4413      	add	r3, r2
 8002f0c:	3304      	adds	r3, #4
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	0c1b      	lsrs	r3, r3, #16
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	011b      	lsls	r3, r3, #4
 8002f20:	4413      	add	r3, r2
 8002f22:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	b2da      	uxtb	r2, r3
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	011b      	lsls	r3, r3, #4
 8002f36:	4413      	add	r3, r2
 8002f38:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	0a1a      	lsrs	r2, r3, #8
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	3301      	adds	r3, #1
 8002f44:	b2d2      	uxtb	r2, r2
 8002f46:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	011b      	lsls	r3, r3, #4
 8002f50:	4413      	add	r3, r2
 8002f52:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	0c1a      	lsrs	r2, r3, #16
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	3302      	adds	r3, #2
 8002f5e:	b2d2      	uxtb	r2, r2
 8002f60:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	011b      	lsls	r3, r3, #4
 8002f6a:	4413      	add	r3, r2
 8002f6c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	0e1a      	lsrs	r2, r3, #24
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	3303      	adds	r3, #3
 8002f78:	b2d2      	uxtb	r2, r2
 8002f7a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	011b      	lsls	r3, r3, #4
 8002f84:	4413      	add	r3, r2
 8002f86:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	3304      	adds	r3, #4
 8002f90:	b2d2      	uxtb	r2, r2
 8002f92:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	011b      	lsls	r3, r3, #4
 8002f9c:	4413      	add	r3, r2
 8002f9e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	0a1a      	lsrs	r2, r3, #8
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	3305      	adds	r3, #5
 8002faa:	b2d2      	uxtb	r2, r2
 8002fac:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	011b      	lsls	r3, r3, #4
 8002fb6:	4413      	add	r3, r2
 8002fb8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	0c1a      	lsrs	r2, r3, #16
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	3306      	adds	r3, #6
 8002fc4:	b2d2      	uxtb	r2, r2
 8002fc6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	011b      	lsls	r3, r3, #4
 8002fd0:	4413      	add	r3, r2
 8002fd2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	0e1a      	lsrs	r2, r3, #24
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	3307      	adds	r3, #7
 8002fde:	b2d2      	uxtb	r2, r2
 8002fe0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d108      	bne.n	8002ffa <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68da      	ldr	r2, [r3, #12]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f042 0220 	orr.w	r2, r2, #32
 8002ff6:	60da      	str	r2, [r3, #12]
 8002ff8:	e007      	b.n	800300a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	691a      	ldr	r2, [r3, #16]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f042 0220 	orr.w	r2, r2, #32
 8003008:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800300a:	2300      	movs	r3, #0
 800300c:	e006      	b.n	800301c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003012:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
  }
}
 800301c:	4618      	mov	r0, r3
 800301e:	371c      	adds	r7, #28
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003028:	b480      	push	{r7}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003038:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800303a:	7bfb      	ldrb	r3, [r7, #15]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d002      	beq.n	8003046 <HAL_CAN_ActivateNotification+0x1e>
 8003040:	7bfb      	ldrb	r3, [r7, #15]
 8003042:	2b02      	cmp	r3, #2
 8003044:	d109      	bne.n	800305a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	6959      	ldr	r1, [r3, #20]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	430a      	orrs	r2, r1
 8003054:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003056:	2300      	movs	r3, #0
 8003058:	e006      	b.n	8003068 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
  }
}
 8003068:	4618      	mov	r0, r3
 800306a:	3714      	adds	r7, #20
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b08a      	sub	sp, #40	; 0x28
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800307c:	2300      	movs	r3, #0
 800307e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80030b0:	6a3b      	ldr	r3, [r7, #32]
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d07c      	beq.n	80031b4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d023      	beq.n	800310c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2201      	movs	r2, #1
 80030ca:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d003      	beq.n	80030de <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 f983 	bl	80033e2 <HAL_CAN_TxMailbox0CompleteCallback>
 80030dc:	e016      	b.n	800310c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	f003 0304 	and.w	r3, r3, #4
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d004      	beq.n	80030f2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80030e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80030ee:	627b      	str	r3, [r7, #36]	; 0x24
 80030f0:	e00c      	b.n	800310c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	f003 0308 	and.w	r3, r3, #8
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d004      	beq.n	8003106 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80030fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003102:	627b      	str	r3, [r7, #36]	; 0x24
 8003104:	e002      	b.n	800310c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 f989 	bl	800341e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003112:	2b00      	cmp	r3, #0
 8003114:	d024      	beq.n	8003160 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800311e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003126:	2b00      	cmp	r3, #0
 8003128:	d003      	beq.n	8003132 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 f963 	bl	80033f6 <HAL_CAN_TxMailbox1CompleteCallback>
 8003130:	e016      	b.n	8003160 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003138:	2b00      	cmp	r3, #0
 800313a:	d004      	beq.n	8003146 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800313c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003142:	627b      	str	r3, [r7, #36]	; 0x24
 8003144:	e00c      	b.n	8003160 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800314c:	2b00      	cmp	r3, #0
 800314e:	d004      	beq.n	800315a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003152:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003156:	627b      	str	r3, [r7, #36]	; 0x24
 8003158:	e002      	b.n	8003160 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 f969 	bl	8003432 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d024      	beq.n	80031b4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003172:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d003      	beq.n	8003186 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 f943 	bl	800340a <HAL_CAN_TxMailbox2CompleteCallback>
 8003184:	e016      	b.n	80031b4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d004      	beq.n	800319a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003192:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003196:	627b      	str	r3, [r7, #36]	; 0x24
 8003198:	e00c      	b.n	80031b4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d004      	beq.n	80031ae <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80031a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031aa:	627b      	str	r3, [r7, #36]	; 0x24
 80031ac:	e002      	b.n	80031b4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f949 	bl	8003446 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80031b4:	6a3b      	ldr	r3, [r7, #32]
 80031b6:	f003 0308 	and.w	r3, r3, #8
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00c      	beq.n	80031d8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	f003 0310 	and.w	r3, r3, #16
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d007      	beq.n	80031d8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80031c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031ce:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2210      	movs	r2, #16
 80031d6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80031d8:	6a3b      	ldr	r3, [r7, #32]
 80031da:	f003 0304 	and.w	r3, r3, #4
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00b      	beq.n	80031fa <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	f003 0308 	and.w	r3, r3, #8
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d006      	beq.n	80031fa <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2208      	movs	r2, #8
 80031f2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 f930 	bl	800345a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80031fa:	6a3b      	ldr	r3, [r7, #32]
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d009      	beq.n	8003218 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	f003 0303 	and.w	r3, r3, #3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d002      	beq.n	8003218 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f7fd fcea 	bl	8000bec <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003218:	6a3b      	ldr	r3, [r7, #32]
 800321a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00c      	beq.n	800323c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	f003 0310 	and.w	r3, r3, #16
 8003228:	2b00      	cmp	r3, #0
 800322a:	d007      	beq.n	800323c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003232:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2210      	movs	r2, #16
 800323a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800323c:	6a3b      	ldr	r3, [r7, #32]
 800323e:	f003 0320 	and.w	r3, r3, #32
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00b      	beq.n	800325e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	f003 0308 	and.w	r3, r3, #8
 800324c:	2b00      	cmp	r3, #0
 800324e:	d006      	beq.n	800325e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2208      	movs	r2, #8
 8003256:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 f912 	bl	8003482 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800325e:	6a3b      	ldr	r3, [r7, #32]
 8003260:	f003 0310 	and.w	r3, r3, #16
 8003264:	2b00      	cmp	r3, #0
 8003266:	d009      	beq.n	800327c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	f003 0303 	and.w	r3, r3, #3
 8003272:	2b00      	cmp	r3, #0
 8003274:	d002      	beq.n	800327c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 f8f9 	bl	800346e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800327c:	6a3b      	ldr	r3, [r7, #32]
 800327e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00b      	beq.n	800329e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	f003 0310 	and.w	r3, r3, #16
 800328c:	2b00      	cmp	r3, #0
 800328e:	d006      	beq.n	800329e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2210      	movs	r2, #16
 8003296:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f000 f8fc 	bl	8003496 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800329e:	6a3b      	ldr	r3, [r7, #32]
 80032a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00b      	beq.n	80032c0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	f003 0308 	and.w	r3, r3, #8
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d006      	beq.n	80032c0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2208      	movs	r2, #8
 80032b8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f8f5 	bl	80034aa <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80032c0:	6a3b      	ldr	r3, [r7, #32]
 80032c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d07b      	beq.n	80033c2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	f003 0304 	and.w	r3, r3, #4
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d072      	beq.n	80033ba <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80032d4:	6a3b      	ldr	r3, [r7, #32]
 80032d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d008      	beq.n	80032f0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d003      	beq.n	80032f0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80032e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ea:	f043 0301 	orr.w	r3, r3, #1
 80032ee:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80032f0:	6a3b      	ldr	r3, [r7, #32]
 80032f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d008      	beq.n	800330c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003300:	2b00      	cmp	r3, #0
 8003302:	d003      	beq.n	800330c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003306:	f043 0302 	orr.w	r3, r3, #2
 800330a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800330c:	6a3b      	ldr	r3, [r7, #32]
 800330e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003312:	2b00      	cmp	r3, #0
 8003314:	d008      	beq.n	8003328 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800331c:	2b00      	cmp	r3, #0
 800331e:	d003      	beq.n	8003328 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003322:	f043 0304 	orr.w	r3, r3, #4
 8003326:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003328:	6a3b      	ldr	r3, [r7, #32]
 800332a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800332e:	2b00      	cmp	r3, #0
 8003330:	d043      	beq.n	80033ba <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003338:	2b00      	cmp	r3, #0
 800333a:	d03e      	beq.n	80033ba <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003342:	2b60      	cmp	r3, #96	; 0x60
 8003344:	d02b      	beq.n	800339e <HAL_CAN_IRQHandler+0x32a>
 8003346:	2b60      	cmp	r3, #96	; 0x60
 8003348:	d82e      	bhi.n	80033a8 <HAL_CAN_IRQHandler+0x334>
 800334a:	2b50      	cmp	r3, #80	; 0x50
 800334c:	d022      	beq.n	8003394 <HAL_CAN_IRQHandler+0x320>
 800334e:	2b50      	cmp	r3, #80	; 0x50
 8003350:	d82a      	bhi.n	80033a8 <HAL_CAN_IRQHandler+0x334>
 8003352:	2b40      	cmp	r3, #64	; 0x40
 8003354:	d019      	beq.n	800338a <HAL_CAN_IRQHandler+0x316>
 8003356:	2b40      	cmp	r3, #64	; 0x40
 8003358:	d826      	bhi.n	80033a8 <HAL_CAN_IRQHandler+0x334>
 800335a:	2b30      	cmp	r3, #48	; 0x30
 800335c:	d010      	beq.n	8003380 <HAL_CAN_IRQHandler+0x30c>
 800335e:	2b30      	cmp	r3, #48	; 0x30
 8003360:	d822      	bhi.n	80033a8 <HAL_CAN_IRQHandler+0x334>
 8003362:	2b10      	cmp	r3, #16
 8003364:	d002      	beq.n	800336c <HAL_CAN_IRQHandler+0x2f8>
 8003366:	2b20      	cmp	r3, #32
 8003368:	d005      	beq.n	8003376 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800336a:	e01d      	b.n	80033a8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800336c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336e:	f043 0308 	orr.w	r3, r3, #8
 8003372:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003374:	e019      	b.n	80033aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003378:	f043 0310 	orr.w	r3, r3, #16
 800337c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800337e:	e014      	b.n	80033aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003382:	f043 0320 	orr.w	r3, r3, #32
 8003386:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003388:	e00f      	b.n	80033aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800338a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003390:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003392:	e00a      	b.n	80033aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003396:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800339a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800339c:	e005      	b.n	80033aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033a4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80033a6:	e000      	b.n	80033aa <HAL_CAN_IRQHandler+0x336>
            break;
 80033a8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	699a      	ldr	r2, [r3, #24]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80033b8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2204      	movs	r2, #4
 80033c0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d008      	beq.n	80033da <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ce:	431a      	orrs	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f000 f872 	bl	80034be <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80033da:	bf00      	nop
 80033dc:	3728      	adds	r7, #40	; 0x28
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b083      	sub	sp, #12
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80033ea:	bf00      	nop
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80033f6:	b480      	push	{r7}
 80033f8:	b083      	sub	sp, #12
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80033fe:	bf00      	nop
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr

0800340a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800340a:	b480      	push	{r7}
 800340c:	b083      	sub	sp, #12
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003412:	bf00      	nop
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr

0800341e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800341e:	b480      	push	{r7}
 8003420:	b083      	sub	sp, #12
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003426:	bf00      	nop
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr

08003432 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003432:	b480      	push	{r7}
 8003434:	b083      	sub	sp, #12
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800343a:	bf00      	nop
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003446:	b480      	push	{r7}
 8003448:	b083      	sub	sp, #12
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800344e:	bf00      	nop
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800345a:	b480      	push	{r7}
 800345c:	b083      	sub	sp, #12
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003462:	bf00      	nop
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr

0800346e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800346e:	b480      	push	{r7}
 8003470:	b083      	sub	sp, #12
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003476:	bf00      	nop
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr

08003482 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003482:	b480      	push	{r7}
 8003484:	b083      	sub	sp, #12
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800348a:	bf00      	nop
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr

08003496 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003496:	b480      	push	{r7}
 8003498:	b083      	sub	sp, #12
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800349e:	bf00      	nop
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr

080034aa <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80034aa:	b480      	push	{r7}
 80034ac:	b083      	sub	sp, #12
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80034b2:	bf00      	nop
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr

080034be <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80034be:	b480      	push	{r7}
 80034c0:	b083      	sub	sp, #12
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80034c6:	bf00      	nop
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
	...

080034d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f003 0307 	and.w	r3, r3, #7
 80034e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034e4:	4b0c      	ldr	r3, [pc, #48]	; (8003518 <__NVIC_SetPriorityGrouping+0x44>)
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034ea:	68ba      	ldr	r2, [r7, #8]
 80034ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034f0:	4013      	ands	r3, r2
 80034f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003504:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003506:	4a04      	ldr	r2, [pc, #16]	; (8003518 <__NVIC_SetPriorityGrouping+0x44>)
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	60d3      	str	r3, [r2, #12]
}
 800350c:	bf00      	nop
 800350e:	3714      	adds	r7, #20
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr
 8003518:	e000ed00 	.word	0xe000ed00

0800351c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003520:	4b04      	ldr	r3, [pc, #16]	; (8003534 <__NVIC_GetPriorityGrouping+0x18>)
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	0a1b      	lsrs	r3, r3, #8
 8003526:	f003 0307 	and.w	r3, r3, #7
}
 800352a:	4618      	mov	r0, r3
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr
 8003534:	e000ed00 	.word	0xe000ed00

08003538 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	4603      	mov	r3, r0
 8003540:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003546:	2b00      	cmp	r3, #0
 8003548:	db0b      	blt.n	8003562 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800354a:	79fb      	ldrb	r3, [r7, #7]
 800354c:	f003 021f 	and.w	r2, r3, #31
 8003550:	4907      	ldr	r1, [pc, #28]	; (8003570 <__NVIC_EnableIRQ+0x38>)
 8003552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003556:	095b      	lsrs	r3, r3, #5
 8003558:	2001      	movs	r0, #1
 800355a:	fa00 f202 	lsl.w	r2, r0, r2
 800355e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003562:	bf00      	nop
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	e000e100 	.word	0xe000e100

08003574 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	4603      	mov	r3, r0
 800357c:	6039      	str	r1, [r7, #0]
 800357e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003584:	2b00      	cmp	r3, #0
 8003586:	db0a      	blt.n	800359e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	b2da      	uxtb	r2, r3
 800358c:	490c      	ldr	r1, [pc, #48]	; (80035c0 <__NVIC_SetPriority+0x4c>)
 800358e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003592:	0112      	lsls	r2, r2, #4
 8003594:	b2d2      	uxtb	r2, r2
 8003596:	440b      	add	r3, r1
 8003598:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800359c:	e00a      	b.n	80035b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	b2da      	uxtb	r2, r3
 80035a2:	4908      	ldr	r1, [pc, #32]	; (80035c4 <__NVIC_SetPriority+0x50>)
 80035a4:	79fb      	ldrb	r3, [r7, #7]
 80035a6:	f003 030f 	and.w	r3, r3, #15
 80035aa:	3b04      	subs	r3, #4
 80035ac:	0112      	lsls	r2, r2, #4
 80035ae:	b2d2      	uxtb	r2, r2
 80035b0:	440b      	add	r3, r1
 80035b2:	761a      	strb	r2, [r3, #24]
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr
 80035c0:	e000e100 	.word	0xe000e100
 80035c4:	e000ed00 	.word	0xe000ed00

080035c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b089      	sub	sp, #36	; 0x24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f003 0307 	and.w	r3, r3, #7
 80035da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	f1c3 0307 	rsb	r3, r3, #7
 80035e2:	2b04      	cmp	r3, #4
 80035e4:	bf28      	it	cs
 80035e6:	2304      	movcs	r3, #4
 80035e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	3304      	adds	r3, #4
 80035ee:	2b06      	cmp	r3, #6
 80035f0:	d902      	bls.n	80035f8 <NVIC_EncodePriority+0x30>
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	3b03      	subs	r3, #3
 80035f6:	e000      	b.n	80035fa <NVIC_EncodePriority+0x32>
 80035f8:	2300      	movs	r3, #0
 80035fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	fa02 f303 	lsl.w	r3, r2, r3
 8003606:	43da      	mvns	r2, r3
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	401a      	ands	r2, r3
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003610:	f04f 31ff 	mov.w	r1, #4294967295
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	fa01 f303 	lsl.w	r3, r1, r3
 800361a:	43d9      	mvns	r1, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003620:	4313      	orrs	r3, r2
         );
}
 8003622:	4618      	mov	r0, r3
 8003624:	3724      	adds	r7, #36	; 0x24
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr

0800362e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b082      	sub	sp, #8
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f7ff ff4c 	bl	80034d4 <__NVIC_SetPriorityGrouping>
}
 800363c:	bf00      	nop
 800363e:	3708      	adds	r7, #8
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	4603      	mov	r3, r0
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
 8003650:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003652:	2300      	movs	r3, #0
 8003654:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003656:	f7ff ff61 	bl	800351c <__NVIC_GetPriorityGrouping>
 800365a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	68b9      	ldr	r1, [r7, #8]
 8003660:	6978      	ldr	r0, [r7, #20]
 8003662:	f7ff ffb1 	bl	80035c8 <NVIC_EncodePriority>
 8003666:	4602      	mov	r2, r0
 8003668:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800366c:	4611      	mov	r1, r2
 800366e:	4618      	mov	r0, r3
 8003670:	f7ff ff80 	bl	8003574 <__NVIC_SetPriority>
}
 8003674:	bf00      	nop
 8003676:	3718      	adds	r7, #24
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	4603      	mov	r3, r0
 8003684:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800368a:	4618      	mov	r0, r3
 800368c:	f7ff ff54 	bl	8003538 <__NVIC_EnableIRQ>
}
 8003690:	bf00      	nop
 8003692:	3708      	adds	r7, #8
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80036a0:	2300      	movs	r3, #0
 80036a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80036a4:	f7fe fd4c 	bl	8002140 <HAL_GetTick>
 80036a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d101      	bne.n	80036b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e099      	b.n	80037e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2202      	movs	r2, #2
 80036b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f022 0201 	bic.w	r2, r2, #1
 80036d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036d4:	e00f      	b.n	80036f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036d6:	f7fe fd33 	bl	8002140 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b05      	cmp	r3, #5
 80036e2:	d908      	bls.n	80036f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2220      	movs	r2, #32
 80036e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2203      	movs	r2, #3
 80036ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e078      	b.n	80037e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0301 	and.w	r3, r3, #1
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1e8      	bne.n	80036d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800370c:	697a      	ldr	r2, [r7, #20]
 800370e:	4b38      	ldr	r3, [pc, #224]	; (80037f0 <HAL_DMA_Init+0x158>)
 8003710:	4013      	ands	r3, r2
 8003712:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003722:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800372e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800373a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	4313      	orrs	r3, r2
 8003746:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374c:	2b04      	cmp	r3, #4
 800374e:	d107      	bne.n	8003760 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003758:	4313      	orrs	r3, r2
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	4313      	orrs	r3, r2
 800375e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	697a      	ldr	r2, [r7, #20]
 8003766:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	f023 0307 	bic.w	r3, r3, #7
 8003776:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	4313      	orrs	r3, r2
 8003780:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003786:	2b04      	cmp	r3, #4
 8003788:	d117      	bne.n	80037ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	4313      	orrs	r3, r2
 8003792:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00e      	beq.n	80037ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 fa6f 	bl	8003c80 <DMA_CheckFifoParam>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d008      	beq.n	80037ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2240      	movs	r2, #64	; 0x40
 80037ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80037b6:	2301      	movs	r3, #1
 80037b8:	e016      	b.n	80037e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 fa26 	bl	8003c14 <DMA_CalcBaseAndBitshift>
 80037c8:	4603      	mov	r3, r0
 80037ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d0:	223f      	movs	r2, #63	; 0x3f
 80037d2:	409a      	lsls	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3718      	adds	r7, #24
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	f010803f 	.word	0xf010803f

080037f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
 8003800:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003802:	2300      	movs	r3, #0
 8003804:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800380a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003812:	2b01      	cmp	r3, #1
 8003814:	d101      	bne.n	800381a <HAL_DMA_Start_IT+0x26>
 8003816:	2302      	movs	r3, #2
 8003818:	e040      	b.n	800389c <HAL_DMA_Start_IT+0xa8>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2b01      	cmp	r3, #1
 800382c:	d12f      	bne.n	800388e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2202      	movs	r2, #2
 8003832:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	68b9      	ldr	r1, [r7, #8]
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f000 f9b8 	bl	8003bb8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800384c:	223f      	movs	r2, #63	; 0x3f
 800384e:	409a      	lsls	r2, r3
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f042 0216 	orr.w	r2, r2, #22
 8003862:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003868:	2b00      	cmp	r3, #0
 800386a:	d007      	beq.n	800387c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f042 0208 	orr.w	r2, r2, #8
 800387a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f042 0201 	orr.w	r2, r2, #1
 800388a:	601a      	str	r2, [r3, #0]
 800388c:	e005      	b.n	800389a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003896:	2302      	movs	r3, #2
 8003898:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800389a:	7dfb      	ldrb	r3, [r7, #23]
}
 800389c:	4618      	mov	r0, r3
 800389e:	3718      	adds	r7, #24
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80038ac:	2300      	movs	r3, #0
 80038ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80038b0:	4b92      	ldr	r3, [pc, #584]	; (8003afc <HAL_DMA_IRQHandler+0x258>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a92      	ldr	r2, [pc, #584]	; (8003b00 <HAL_DMA_IRQHandler+0x25c>)
 80038b6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ba:	0a9b      	lsrs	r3, r3, #10
 80038bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ce:	2208      	movs	r2, #8
 80038d0:	409a      	lsls	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	4013      	ands	r3, r2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d01a      	beq.n	8003910 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0304 	and.w	r3, r3, #4
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d013      	beq.n	8003910 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f022 0204 	bic.w	r2, r2, #4
 80038f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038fc:	2208      	movs	r2, #8
 80038fe:	409a      	lsls	r2, r3
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003908:	f043 0201 	orr.w	r2, r3, #1
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003914:	2201      	movs	r2, #1
 8003916:	409a      	lsls	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	4013      	ands	r3, r2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d012      	beq.n	8003946 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00b      	beq.n	8003946 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003932:	2201      	movs	r2, #1
 8003934:	409a      	lsls	r2, r3
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393e:	f043 0202 	orr.w	r2, r3, #2
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800394a:	2204      	movs	r2, #4
 800394c:	409a      	lsls	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	4013      	ands	r3, r2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d012      	beq.n	800397c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00b      	beq.n	800397c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003968:	2204      	movs	r2, #4
 800396a:	409a      	lsls	r2, r3
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003974:	f043 0204 	orr.w	r2, r3, #4
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003980:	2210      	movs	r2, #16
 8003982:	409a      	lsls	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	4013      	ands	r3, r2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d043      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0308 	and.w	r3, r3, #8
 8003996:	2b00      	cmp	r3, #0
 8003998:	d03c      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800399e:	2210      	movs	r2, #16
 80039a0:	409a      	lsls	r2, r3
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d018      	beq.n	80039e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d108      	bne.n	80039d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d024      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	4798      	blx	r3
 80039d2:	e01f      	b.n	8003a14 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d01b      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	4798      	blx	r3
 80039e4:	e016      	b.n	8003a14 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d107      	bne.n	8003a04 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 0208 	bic.w	r2, r2, #8
 8003a02:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d003      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a18:	2220      	movs	r2, #32
 8003a1a:	409a      	lsls	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	4013      	ands	r3, r2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f000 808e 	beq.w	8003b42 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0310 	and.w	r3, r3, #16
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f000 8086 	beq.w	8003b42 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a3a:	2220      	movs	r2, #32
 8003a3c:	409a      	lsls	r2, r3
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b05      	cmp	r3, #5
 8003a4c:	d136      	bne.n	8003abc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f022 0216 	bic.w	r2, r2, #22
 8003a5c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	695a      	ldr	r2, [r3, #20]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a6c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d103      	bne.n	8003a7e <HAL_DMA_IRQHandler+0x1da>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d007      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f022 0208 	bic.w	r2, r2, #8
 8003a8c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a92:	223f      	movs	r2, #63	; 0x3f
 8003a94:	409a      	lsls	r2, r3
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d07d      	beq.n	8003bae <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	4798      	blx	r3
        }
        return;
 8003aba:	e078      	b.n	8003bae <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d01c      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d108      	bne.n	8003aea <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d030      	beq.n	8003b42 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	4798      	blx	r3
 8003ae8:	e02b      	b.n	8003b42 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d027      	beq.n	8003b42 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	4798      	blx	r3
 8003afa:	e022      	b.n	8003b42 <HAL_DMA_IRQHandler+0x29e>
 8003afc:	20000000 	.word	0x20000000
 8003b00:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10f      	bne.n	8003b32 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 0210 	bic.w	r2, r2, #16
 8003b20:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2201      	movs	r2, #1
 8003b26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d003      	beq.n	8003b42 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d032      	beq.n	8003bb0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d022      	beq.n	8003b9c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2205      	movs	r2, #5
 8003b5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 0201 	bic.w	r2, r2, #1
 8003b6c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	3301      	adds	r3, #1
 8003b72:	60bb      	str	r3, [r7, #8]
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d307      	bcc.n	8003b8a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1f2      	bne.n	8003b6e <HAL_DMA_IRQHandler+0x2ca>
 8003b88:	e000      	b.n	8003b8c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003b8a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d005      	beq.n	8003bb0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	4798      	blx	r3
 8003bac:	e000      	b.n	8003bb0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003bae:	bf00      	nop
    }
  }
}
 8003bb0:	3718      	adds	r7, #24
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop

08003bb8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
 8003bc4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003bd4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	683a      	ldr	r2, [r7, #0]
 8003bdc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	2b40      	cmp	r3, #64	; 0x40
 8003be4:	d108      	bne.n	8003bf8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68ba      	ldr	r2, [r7, #8]
 8003bf4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003bf6:	e007      	b.n	8003c08 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	60da      	str	r2, [r3, #12]
}
 8003c08:	bf00      	nop
 8003c0a:	3714      	adds	r7, #20
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	3b10      	subs	r3, #16
 8003c24:	4a14      	ldr	r2, [pc, #80]	; (8003c78 <DMA_CalcBaseAndBitshift+0x64>)
 8003c26:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2a:	091b      	lsrs	r3, r3, #4
 8003c2c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003c2e:	4a13      	ldr	r2, [pc, #76]	; (8003c7c <DMA_CalcBaseAndBitshift+0x68>)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	4413      	add	r3, r2
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	461a      	mov	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2b03      	cmp	r3, #3
 8003c40:	d909      	bls.n	8003c56 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c4a:	f023 0303 	bic.w	r3, r3, #3
 8003c4e:	1d1a      	adds	r2, r3, #4
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	659a      	str	r2, [r3, #88]	; 0x58
 8003c54:	e007      	b.n	8003c66 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c5e:	f023 0303 	bic.w	r3, r3, #3
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3714      	adds	r7, #20
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	aaaaaaab 	.word	0xaaaaaaab
 8003c7c:	0800f20c 	.word	0x0800f20c

08003c80 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c90:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d11f      	bne.n	8003cda <DMA_CheckFifoParam+0x5a>
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	2b03      	cmp	r3, #3
 8003c9e:	d856      	bhi.n	8003d4e <DMA_CheckFifoParam+0xce>
 8003ca0:	a201      	add	r2, pc, #4	; (adr r2, 8003ca8 <DMA_CheckFifoParam+0x28>)
 8003ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca6:	bf00      	nop
 8003ca8:	08003cb9 	.word	0x08003cb9
 8003cac:	08003ccb 	.word	0x08003ccb
 8003cb0:	08003cb9 	.word	0x08003cb9
 8003cb4:	08003d4f 	.word	0x08003d4f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d046      	beq.n	8003d52 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cc8:	e043      	b.n	8003d52 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003cd2:	d140      	bne.n	8003d56 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cd8:	e03d      	b.n	8003d56 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ce2:	d121      	bne.n	8003d28 <DMA_CheckFifoParam+0xa8>
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	2b03      	cmp	r3, #3
 8003ce8:	d837      	bhi.n	8003d5a <DMA_CheckFifoParam+0xda>
 8003cea:	a201      	add	r2, pc, #4	; (adr r2, 8003cf0 <DMA_CheckFifoParam+0x70>)
 8003cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf0:	08003d01 	.word	0x08003d01
 8003cf4:	08003d07 	.word	0x08003d07
 8003cf8:	08003d01 	.word	0x08003d01
 8003cfc:	08003d19 	.word	0x08003d19
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	73fb      	strb	r3, [r7, #15]
      break;
 8003d04:	e030      	b.n	8003d68 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d025      	beq.n	8003d5e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d16:	e022      	b.n	8003d5e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d20:	d11f      	bne.n	8003d62 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003d26:	e01c      	b.n	8003d62 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d903      	bls.n	8003d36 <DMA_CheckFifoParam+0xb6>
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	2b03      	cmp	r3, #3
 8003d32:	d003      	beq.n	8003d3c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003d34:	e018      	b.n	8003d68 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	73fb      	strb	r3, [r7, #15]
      break;
 8003d3a:	e015      	b.n	8003d68 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00e      	beq.n	8003d66 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d4c:	e00b      	b.n	8003d66 <DMA_CheckFifoParam+0xe6>
      break;
 8003d4e:	bf00      	nop
 8003d50:	e00a      	b.n	8003d68 <DMA_CheckFifoParam+0xe8>
      break;
 8003d52:	bf00      	nop
 8003d54:	e008      	b.n	8003d68 <DMA_CheckFifoParam+0xe8>
      break;
 8003d56:	bf00      	nop
 8003d58:	e006      	b.n	8003d68 <DMA_CheckFifoParam+0xe8>
      break;
 8003d5a:	bf00      	nop
 8003d5c:	e004      	b.n	8003d68 <DMA_CheckFifoParam+0xe8>
      break;
 8003d5e:	bf00      	nop
 8003d60:	e002      	b.n	8003d68 <DMA_CheckFifoParam+0xe8>
      break;   
 8003d62:	bf00      	nop
 8003d64:	e000      	b.n	8003d68 <DMA_CheckFifoParam+0xe8>
      break;
 8003d66:	bf00      	nop
    }
  } 
  
  return status; 
 8003d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3714      	adds	r7, #20
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop

08003d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b089      	sub	sp, #36	; 0x24
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d82:	2300      	movs	r3, #0
 8003d84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d86:	2300      	movs	r3, #0
 8003d88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d8e:	2300      	movs	r3, #0
 8003d90:	61fb      	str	r3, [r7, #28]
 8003d92:	e16b      	b.n	800406c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d94:	2201      	movs	r2, #1
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	4013      	ands	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	f040 815a 	bne.w	8004066 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f003 0303 	and.w	r3, r3, #3
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d005      	beq.n	8003dca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d130      	bne.n	8003e2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	005b      	lsls	r3, r3, #1
 8003dd4:	2203      	movs	r2, #3
 8003dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dda:	43db      	mvns	r3, r3
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	4013      	ands	r3, r2
 8003de0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	68da      	ldr	r2, [r3, #12]
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	005b      	lsls	r3, r3, #1
 8003dea:	fa02 f303 	lsl.w	r3, r2, r3
 8003dee:	69ba      	ldr	r2, [r7, #24]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e00:	2201      	movs	r2, #1
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	fa02 f303 	lsl.w	r3, r2, r3
 8003e08:	43db      	mvns	r3, r3
 8003e0a:	69ba      	ldr	r2, [r7, #24]
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	091b      	lsrs	r3, r3, #4
 8003e16:	f003 0201 	and.w	r2, r3, #1
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e20:	69ba      	ldr	r2, [r7, #24]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	69ba      	ldr	r2, [r7, #24]
 8003e2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f003 0303 	and.w	r3, r3, #3
 8003e34:	2b03      	cmp	r3, #3
 8003e36:	d017      	beq.n	8003e68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	2203      	movs	r2, #3
 8003e44:	fa02 f303 	lsl.w	r3, r2, r3
 8003e48:	43db      	mvns	r3, r3
 8003e4a:	69ba      	ldr	r2, [r7, #24]
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	689a      	ldr	r2, [r3, #8]
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	005b      	lsls	r3, r3, #1
 8003e58:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5c:	69ba      	ldr	r2, [r7, #24]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f003 0303 	and.w	r3, r3, #3
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d123      	bne.n	8003ebc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	08da      	lsrs	r2, r3, #3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	3208      	adds	r2, #8
 8003e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	f003 0307 	and.w	r3, r3, #7
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	220f      	movs	r2, #15
 8003e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e90:	43db      	mvns	r3, r3
 8003e92:	69ba      	ldr	r2, [r7, #24]
 8003e94:	4013      	ands	r3, r2
 8003e96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	691a      	ldr	r2, [r3, #16]
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	f003 0307 	and.w	r3, r3, #7
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	08da      	lsrs	r2, r3, #3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	3208      	adds	r2, #8
 8003eb6:	69b9      	ldr	r1, [r7, #24]
 8003eb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	2203      	movs	r2, #3
 8003ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ecc:	43db      	mvns	r3, r3
 8003ece:	69ba      	ldr	r2, [r7, #24]
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f003 0203 	and.w	r2, r3, #3
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	005b      	lsls	r3, r3, #1
 8003ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f000 80b4 	beq.w	8004066 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003efe:	2300      	movs	r3, #0
 8003f00:	60fb      	str	r3, [r7, #12]
 8003f02:	4b60      	ldr	r3, [pc, #384]	; (8004084 <HAL_GPIO_Init+0x30c>)
 8003f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f06:	4a5f      	ldr	r2, [pc, #380]	; (8004084 <HAL_GPIO_Init+0x30c>)
 8003f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8003f0e:	4b5d      	ldr	r3, [pc, #372]	; (8004084 <HAL_GPIO_Init+0x30c>)
 8003f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f16:	60fb      	str	r3, [r7, #12]
 8003f18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f1a:	4a5b      	ldr	r2, [pc, #364]	; (8004088 <HAL_GPIO_Init+0x310>)
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	089b      	lsrs	r3, r3, #2
 8003f20:	3302      	adds	r3, #2
 8003f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	f003 0303 	and.w	r3, r3, #3
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	220f      	movs	r2, #15
 8003f32:	fa02 f303 	lsl.w	r3, r2, r3
 8003f36:	43db      	mvns	r3, r3
 8003f38:	69ba      	ldr	r2, [r7, #24]
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a52      	ldr	r2, [pc, #328]	; (800408c <HAL_GPIO_Init+0x314>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d02b      	beq.n	8003f9e <HAL_GPIO_Init+0x226>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a51      	ldr	r2, [pc, #324]	; (8004090 <HAL_GPIO_Init+0x318>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d025      	beq.n	8003f9a <HAL_GPIO_Init+0x222>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a50      	ldr	r2, [pc, #320]	; (8004094 <HAL_GPIO_Init+0x31c>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d01f      	beq.n	8003f96 <HAL_GPIO_Init+0x21e>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a4f      	ldr	r2, [pc, #316]	; (8004098 <HAL_GPIO_Init+0x320>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d019      	beq.n	8003f92 <HAL_GPIO_Init+0x21a>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a4e      	ldr	r2, [pc, #312]	; (800409c <HAL_GPIO_Init+0x324>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d013      	beq.n	8003f8e <HAL_GPIO_Init+0x216>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a4d      	ldr	r2, [pc, #308]	; (80040a0 <HAL_GPIO_Init+0x328>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d00d      	beq.n	8003f8a <HAL_GPIO_Init+0x212>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a4c      	ldr	r2, [pc, #304]	; (80040a4 <HAL_GPIO_Init+0x32c>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d007      	beq.n	8003f86 <HAL_GPIO_Init+0x20e>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a4b      	ldr	r2, [pc, #300]	; (80040a8 <HAL_GPIO_Init+0x330>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d101      	bne.n	8003f82 <HAL_GPIO_Init+0x20a>
 8003f7e:	2307      	movs	r3, #7
 8003f80:	e00e      	b.n	8003fa0 <HAL_GPIO_Init+0x228>
 8003f82:	2308      	movs	r3, #8
 8003f84:	e00c      	b.n	8003fa0 <HAL_GPIO_Init+0x228>
 8003f86:	2306      	movs	r3, #6
 8003f88:	e00a      	b.n	8003fa0 <HAL_GPIO_Init+0x228>
 8003f8a:	2305      	movs	r3, #5
 8003f8c:	e008      	b.n	8003fa0 <HAL_GPIO_Init+0x228>
 8003f8e:	2304      	movs	r3, #4
 8003f90:	e006      	b.n	8003fa0 <HAL_GPIO_Init+0x228>
 8003f92:	2303      	movs	r3, #3
 8003f94:	e004      	b.n	8003fa0 <HAL_GPIO_Init+0x228>
 8003f96:	2302      	movs	r3, #2
 8003f98:	e002      	b.n	8003fa0 <HAL_GPIO_Init+0x228>
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e000      	b.n	8003fa0 <HAL_GPIO_Init+0x228>
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	69fa      	ldr	r2, [r7, #28]
 8003fa2:	f002 0203 	and.w	r2, r2, #3
 8003fa6:	0092      	lsls	r2, r2, #2
 8003fa8:	4093      	lsls	r3, r2
 8003faa:	69ba      	ldr	r2, [r7, #24]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fb0:	4935      	ldr	r1, [pc, #212]	; (8004088 <HAL_GPIO_Init+0x310>)
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	089b      	lsrs	r3, r3, #2
 8003fb6:	3302      	adds	r3, #2
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fbe:	4b3b      	ldr	r3, [pc, #236]	; (80040ac <HAL_GPIO_Init+0x334>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	43db      	mvns	r3, r3
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	4013      	ands	r3, r2
 8003fcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d003      	beq.n	8003fe2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003fda:	69ba      	ldr	r2, [r7, #24]
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003fe2:	4a32      	ldr	r2, [pc, #200]	; (80040ac <HAL_GPIO_Init+0x334>)
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003fe8:	4b30      	ldr	r3, [pc, #192]	; (80040ac <HAL_GPIO_Init+0x334>)
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	43db      	mvns	r3, r3
 8003ff2:	69ba      	ldr	r2, [r7, #24]
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d003      	beq.n	800400c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	4313      	orrs	r3, r2
 800400a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800400c:	4a27      	ldr	r2, [pc, #156]	; (80040ac <HAL_GPIO_Init+0x334>)
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004012:	4b26      	ldr	r3, [pc, #152]	; (80040ac <HAL_GPIO_Init+0x334>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	43db      	mvns	r3, r3
 800401c:	69ba      	ldr	r2, [r7, #24]
 800401e:	4013      	ands	r3, r2
 8004020:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d003      	beq.n	8004036 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800402e:	69ba      	ldr	r2, [r7, #24]
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	4313      	orrs	r3, r2
 8004034:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004036:	4a1d      	ldr	r2, [pc, #116]	; (80040ac <HAL_GPIO_Init+0x334>)
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800403c:	4b1b      	ldr	r3, [pc, #108]	; (80040ac <HAL_GPIO_Init+0x334>)
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	43db      	mvns	r3, r3
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	4013      	ands	r3, r2
 800404a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d003      	beq.n	8004060 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	4313      	orrs	r3, r2
 800405e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004060:	4a12      	ldr	r2, [pc, #72]	; (80040ac <HAL_GPIO_Init+0x334>)
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	3301      	adds	r3, #1
 800406a:	61fb      	str	r3, [r7, #28]
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	2b0f      	cmp	r3, #15
 8004070:	f67f ae90 	bls.w	8003d94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004074:	bf00      	nop
 8004076:	bf00      	nop
 8004078:	3724      	adds	r7, #36	; 0x24
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	40023800 	.word	0x40023800
 8004088:	40013800 	.word	0x40013800
 800408c:	40020000 	.word	0x40020000
 8004090:	40020400 	.word	0x40020400
 8004094:	40020800 	.word	0x40020800
 8004098:	40020c00 	.word	0x40020c00
 800409c:	40021000 	.word	0x40021000
 80040a0:	40021400 	.word	0x40021400
 80040a4:	40021800 	.word	0x40021800
 80040a8:	40021c00 	.word	0x40021c00
 80040ac:	40013c00 	.word	0x40013c00

080040b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	460b      	mov	r3, r1
 80040ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	691a      	ldr	r2, [r3, #16]
 80040c0:	887b      	ldrh	r3, [r7, #2]
 80040c2:	4013      	ands	r3, r2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d002      	beq.n	80040ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80040c8:	2301      	movs	r3, #1
 80040ca:	73fb      	strb	r3, [r7, #15]
 80040cc:	e001      	b.n	80040d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80040ce:	2300      	movs	r3, #0
 80040d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80040d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3714      	adds	r7, #20
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	460b      	mov	r3, r1
 80040ea:	807b      	strh	r3, [r7, #2]
 80040ec:	4613      	mov	r3, r2
 80040ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040f0:	787b      	ldrb	r3, [r7, #1]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d003      	beq.n	80040fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040f6:	887a      	ldrh	r2, [r7, #2]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80040fc:	e003      	b.n	8004106 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80040fe:	887b      	ldrh	r3, [r7, #2]
 8004100:	041a      	lsls	r2, r3, #16
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	619a      	str	r2, [r3, #24]
}
 8004106:	bf00      	nop
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr

08004112 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004112:	b480      	push	{r7}
 8004114:	b085      	sub	sp, #20
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
 800411a:	460b      	mov	r3, r1
 800411c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004124:	887a      	ldrh	r2, [r7, #2]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	4013      	ands	r3, r2
 800412a:	041a      	lsls	r2, r3, #16
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	43d9      	mvns	r1, r3
 8004130:	887b      	ldrh	r3, [r7, #2]
 8004132:	400b      	ands	r3, r1
 8004134:	431a      	orrs	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	619a      	str	r2, [r3, #24]
}
 800413a:	bf00      	nop
 800413c:	3714      	adds	r7, #20
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr

08004146 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004146:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004148:	b08f      	sub	sp, #60	; 0x3c
 800414a:	af0a      	add	r7, sp, #40	; 0x28
 800414c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d101      	bne.n	8004158 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e054      	b.n	8004202 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d106      	bne.n	8004178 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f00a f806 	bl	800e184 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2203      	movs	r2, #3
 800417c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004188:	2b00      	cmp	r3, #0
 800418a:	d102      	bne.n	8004192 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4618      	mov	r0, r3
 8004198:	f003 ffce 	bl	8008138 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	603b      	str	r3, [r7, #0]
 80041a2:	687e      	ldr	r6, [r7, #4]
 80041a4:	466d      	mov	r5, sp
 80041a6:	f106 0410 	add.w	r4, r6, #16
 80041aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80041b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80041ba:	1d33      	adds	r3, r6, #4
 80041bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80041be:	6838      	ldr	r0, [r7, #0]
 80041c0:	f003 ff48 	bl	8008054 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2101      	movs	r1, #1
 80041ca:	4618      	mov	r0, r3
 80041cc:	f003 ffc5 	bl	800815a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	603b      	str	r3, [r7, #0]
 80041d6:	687e      	ldr	r6, [r7, #4]
 80041d8:	466d      	mov	r5, sp
 80041da:	f106 0410 	add.w	r4, r6, #16
 80041de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80041ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80041ee:	1d33      	adds	r3, r6, #4
 80041f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80041f2:	6838      	ldr	r0, [r7, #0]
 80041f4:	f004 f92c 	bl	8008450 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3714      	adds	r7, #20
 8004206:	46bd      	mov	sp, r7
 8004208:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800420a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800420a:	b590      	push	{r4, r7, lr}
 800420c:	b089      	sub	sp, #36	; 0x24
 800420e:	af04      	add	r7, sp, #16
 8004210:	6078      	str	r0, [r7, #4]
 8004212:	4608      	mov	r0, r1
 8004214:	4611      	mov	r1, r2
 8004216:	461a      	mov	r2, r3
 8004218:	4603      	mov	r3, r0
 800421a:	70fb      	strb	r3, [r7, #3]
 800421c:	460b      	mov	r3, r1
 800421e:	70bb      	strb	r3, [r7, #2]
 8004220:	4613      	mov	r3, r2
 8004222:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800422a:	2b01      	cmp	r3, #1
 800422c:	d101      	bne.n	8004232 <HAL_HCD_HC_Init+0x28>
 800422e:	2302      	movs	r3, #2
 8004230:	e076      	b.n	8004320 <HAL_HCD_HC_Init+0x116>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800423a:	78fb      	ldrb	r3, [r7, #3]
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	212c      	movs	r1, #44	; 0x2c
 8004240:	fb01 f303 	mul.w	r3, r1, r3
 8004244:	4413      	add	r3, r2
 8004246:	333d      	adds	r3, #61	; 0x3d
 8004248:	2200      	movs	r2, #0
 800424a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800424c:	78fb      	ldrb	r3, [r7, #3]
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	212c      	movs	r1, #44	; 0x2c
 8004252:	fb01 f303 	mul.w	r3, r1, r3
 8004256:	4413      	add	r3, r2
 8004258:	3338      	adds	r3, #56	; 0x38
 800425a:	787a      	ldrb	r2, [r7, #1]
 800425c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800425e:	78fb      	ldrb	r3, [r7, #3]
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	212c      	movs	r1, #44	; 0x2c
 8004264:	fb01 f303 	mul.w	r3, r1, r3
 8004268:	4413      	add	r3, r2
 800426a:	3340      	adds	r3, #64	; 0x40
 800426c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800426e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004270:	78fb      	ldrb	r3, [r7, #3]
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	212c      	movs	r1, #44	; 0x2c
 8004276:	fb01 f303 	mul.w	r3, r1, r3
 800427a:	4413      	add	r3, r2
 800427c:	3339      	adds	r3, #57	; 0x39
 800427e:	78fa      	ldrb	r2, [r7, #3]
 8004280:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004282:	78fb      	ldrb	r3, [r7, #3]
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	212c      	movs	r1, #44	; 0x2c
 8004288:	fb01 f303 	mul.w	r3, r1, r3
 800428c:	4413      	add	r3, r2
 800428e:	333f      	adds	r3, #63	; 0x3f
 8004290:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004294:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004296:	78fb      	ldrb	r3, [r7, #3]
 8004298:	78ba      	ldrb	r2, [r7, #2]
 800429a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800429e:	b2d0      	uxtb	r0, r2
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	212c      	movs	r1, #44	; 0x2c
 80042a4:	fb01 f303 	mul.w	r3, r1, r3
 80042a8:	4413      	add	r3, r2
 80042aa:	333a      	adds	r3, #58	; 0x3a
 80042ac:	4602      	mov	r2, r0
 80042ae:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80042b0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	da09      	bge.n	80042cc <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80042b8:	78fb      	ldrb	r3, [r7, #3]
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	212c      	movs	r1, #44	; 0x2c
 80042be:	fb01 f303 	mul.w	r3, r1, r3
 80042c2:	4413      	add	r3, r2
 80042c4:	333b      	adds	r3, #59	; 0x3b
 80042c6:	2201      	movs	r2, #1
 80042c8:	701a      	strb	r2, [r3, #0]
 80042ca:	e008      	b.n	80042de <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80042cc:	78fb      	ldrb	r3, [r7, #3]
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	212c      	movs	r1, #44	; 0x2c
 80042d2:	fb01 f303 	mul.w	r3, r1, r3
 80042d6:	4413      	add	r3, r2
 80042d8:	333b      	adds	r3, #59	; 0x3b
 80042da:	2200      	movs	r2, #0
 80042dc:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80042de:	78fb      	ldrb	r3, [r7, #3]
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	212c      	movs	r1, #44	; 0x2c
 80042e4:	fb01 f303 	mul.w	r3, r1, r3
 80042e8:	4413      	add	r3, r2
 80042ea:	333c      	adds	r3, #60	; 0x3c
 80042ec:	f897 2020 	ldrb.w	r2, [r7, #32]
 80042f0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6818      	ldr	r0, [r3, #0]
 80042f6:	787c      	ldrb	r4, [r7, #1]
 80042f8:	78ba      	ldrb	r2, [r7, #2]
 80042fa:	78f9      	ldrb	r1, [r7, #3]
 80042fc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80042fe:	9302      	str	r3, [sp, #8]
 8004300:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004304:	9301      	str	r3, [sp, #4]
 8004306:	f897 3020 	ldrb.w	r3, [r7, #32]
 800430a:	9300      	str	r3, [sp, #0]
 800430c:	4623      	mov	r3, r4
 800430e:	f004 fa19 	bl	8008744 <USB_HC_Init>
 8004312:	4603      	mov	r3, r0
 8004314:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800431e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004320:	4618      	mov	r0, r3
 8004322:	3714      	adds	r7, #20
 8004324:	46bd      	mov	sp, r7
 8004326:	bd90      	pop	{r4, r7, pc}

08004328 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	460b      	mov	r3, r1
 8004332:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004334:	2300      	movs	r3, #0
 8004336:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800433e:	2b01      	cmp	r3, #1
 8004340:	d101      	bne.n	8004346 <HAL_HCD_HC_Halt+0x1e>
 8004342:	2302      	movs	r3, #2
 8004344:	e00f      	b.n	8004366 <HAL_HCD_HC_Halt+0x3e>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	78fa      	ldrb	r2, [r7, #3]
 8004354:	4611      	mov	r1, r2
 8004356:	4618      	mov	r0, r3
 8004358:	f004 fc55 	bl	8008c06 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004364:	7bfb      	ldrb	r3, [r7, #15]
}
 8004366:	4618      	mov	r0, r3
 8004368:	3710      	adds	r7, #16
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
	...

08004370 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	4608      	mov	r0, r1
 800437a:	4611      	mov	r1, r2
 800437c:	461a      	mov	r2, r3
 800437e:	4603      	mov	r3, r0
 8004380:	70fb      	strb	r3, [r7, #3]
 8004382:	460b      	mov	r3, r1
 8004384:	70bb      	strb	r3, [r7, #2]
 8004386:	4613      	mov	r3, r2
 8004388:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800438a:	78fb      	ldrb	r3, [r7, #3]
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	212c      	movs	r1, #44	; 0x2c
 8004390:	fb01 f303 	mul.w	r3, r1, r3
 8004394:	4413      	add	r3, r2
 8004396:	333b      	adds	r3, #59	; 0x3b
 8004398:	78ba      	ldrb	r2, [r7, #2]
 800439a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800439c:	78fb      	ldrb	r3, [r7, #3]
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	212c      	movs	r1, #44	; 0x2c
 80043a2:	fb01 f303 	mul.w	r3, r1, r3
 80043a6:	4413      	add	r3, r2
 80043a8:	333f      	adds	r3, #63	; 0x3f
 80043aa:	787a      	ldrb	r2, [r7, #1]
 80043ac:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80043ae:	7c3b      	ldrb	r3, [r7, #16]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d112      	bne.n	80043da <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80043b4:	78fb      	ldrb	r3, [r7, #3]
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	212c      	movs	r1, #44	; 0x2c
 80043ba:	fb01 f303 	mul.w	r3, r1, r3
 80043be:	4413      	add	r3, r2
 80043c0:	3342      	adds	r3, #66	; 0x42
 80043c2:	2203      	movs	r2, #3
 80043c4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80043c6:	78fb      	ldrb	r3, [r7, #3]
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	212c      	movs	r1, #44	; 0x2c
 80043cc:	fb01 f303 	mul.w	r3, r1, r3
 80043d0:	4413      	add	r3, r2
 80043d2:	333d      	adds	r3, #61	; 0x3d
 80043d4:	7f3a      	ldrb	r2, [r7, #28]
 80043d6:	701a      	strb	r2, [r3, #0]
 80043d8:	e008      	b.n	80043ec <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80043da:	78fb      	ldrb	r3, [r7, #3]
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	212c      	movs	r1, #44	; 0x2c
 80043e0:	fb01 f303 	mul.w	r3, r1, r3
 80043e4:	4413      	add	r3, r2
 80043e6:	3342      	adds	r3, #66	; 0x42
 80043e8:	2202      	movs	r2, #2
 80043ea:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80043ec:	787b      	ldrb	r3, [r7, #1]
 80043ee:	2b03      	cmp	r3, #3
 80043f0:	f200 80c6 	bhi.w	8004580 <HAL_HCD_HC_SubmitRequest+0x210>
 80043f4:	a201      	add	r2, pc, #4	; (adr r2, 80043fc <HAL_HCD_HC_SubmitRequest+0x8c>)
 80043f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043fa:	bf00      	nop
 80043fc:	0800440d 	.word	0x0800440d
 8004400:	0800456d 	.word	0x0800456d
 8004404:	08004471 	.word	0x08004471
 8004408:	080044ef 	.word	0x080044ef
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800440c:	7c3b      	ldrb	r3, [r7, #16]
 800440e:	2b01      	cmp	r3, #1
 8004410:	f040 80b8 	bne.w	8004584 <HAL_HCD_HC_SubmitRequest+0x214>
 8004414:	78bb      	ldrb	r3, [r7, #2]
 8004416:	2b00      	cmp	r3, #0
 8004418:	f040 80b4 	bne.w	8004584 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800441c:	8b3b      	ldrh	r3, [r7, #24]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d108      	bne.n	8004434 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004422:	78fb      	ldrb	r3, [r7, #3]
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	212c      	movs	r1, #44	; 0x2c
 8004428:	fb01 f303 	mul.w	r3, r1, r3
 800442c:	4413      	add	r3, r2
 800442e:	3355      	adds	r3, #85	; 0x55
 8004430:	2201      	movs	r2, #1
 8004432:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004434:	78fb      	ldrb	r3, [r7, #3]
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	212c      	movs	r1, #44	; 0x2c
 800443a:	fb01 f303 	mul.w	r3, r1, r3
 800443e:	4413      	add	r3, r2
 8004440:	3355      	adds	r3, #85	; 0x55
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d109      	bne.n	800445c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004448:	78fb      	ldrb	r3, [r7, #3]
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	212c      	movs	r1, #44	; 0x2c
 800444e:	fb01 f303 	mul.w	r3, r1, r3
 8004452:	4413      	add	r3, r2
 8004454:	3342      	adds	r3, #66	; 0x42
 8004456:	2200      	movs	r2, #0
 8004458:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800445a:	e093      	b.n	8004584 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800445c:	78fb      	ldrb	r3, [r7, #3]
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	212c      	movs	r1, #44	; 0x2c
 8004462:	fb01 f303 	mul.w	r3, r1, r3
 8004466:	4413      	add	r3, r2
 8004468:	3342      	adds	r3, #66	; 0x42
 800446a:	2202      	movs	r2, #2
 800446c:	701a      	strb	r2, [r3, #0]
      break;
 800446e:	e089      	b.n	8004584 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004470:	78bb      	ldrb	r3, [r7, #2]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d11d      	bne.n	80044b2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004476:	78fb      	ldrb	r3, [r7, #3]
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	212c      	movs	r1, #44	; 0x2c
 800447c:	fb01 f303 	mul.w	r3, r1, r3
 8004480:	4413      	add	r3, r2
 8004482:	3355      	adds	r3, #85	; 0x55
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d109      	bne.n	800449e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800448a:	78fb      	ldrb	r3, [r7, #3]
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	212c      	movs	r1, #44	; 0x2c
 8004490:	fb01 f303 	mul.w	r3, r1, r3
 8004494:	4413      	add	r3, r2
 8004496:	3342      	adds	r3, #66	; 0x42
 8004498:	2200      	movs	r2, #0
 800449a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800449c:	e073      	b.n	8004586 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800449e:	78fb      	ldrb	r3, [r7, #3]
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	212c      	movs	r1, #44	; 0x2c
 80044a4:	fb01 f303 	mul.w	r3, r1, r3
 80044a8:	4413      	add	r3, r2
 80044aa:	3342      	adds	r3, #66	; 0x42
 80044ac:	2202      	movs	r2, #2
 80044ae:	701a      	strb	r2, [r3, #0]
      break;
 80044b0:	e069      	b.n	8004586 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80044b2:	78fb      	ldrb	r3, [r7, #3]
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	212c      	movs	r1, #44	; 0x2c
 80044b8:	fb01 f303 	mul.w	r3, r1, r3
 80044bc:	4413      	add	r3, r2
 80044be:	3354      	adds	r3, #84	; 0x54
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d109      	bne.n	80044da <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80044c6:	78fb      	ldrb	r3, [r7, #3]
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	212c      	movs	r1, #44	; 0x2c
 80044cc:	fb01 f303 	mul.w	r3, r1, r3
 80044d0:	4413      	add	r3, r2
 80044d2:	3342      	adds	r3, #66	; 0x42
 80044d4:	2200      	movs	r2, #0
 80044d6:	701a      	strb	r2, [r3, #0]
      break;
 80044d8:	e055      	b.n	8004586 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80044da:	78fb      	ldrb	r3, [r7, #3]
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	212c      	movs	r1, #44	; 0x2c
 80044e0:	fb01 f303 	mul.w	r3, r1, r3
 80044e4:	4413      	add	r3, r2
 80044e6:	3342      	adds	r3, #66	; 0x42
 80044e8:	2202      	movs	r2, #2
 80044ea:	701a      	strb	r2, [r3, #0]
      break;
 80044ec:	e04b      	b.n	8004586 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80044ee:	78bb      	ldrb	r3, [r7, #2]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d11d      	bne.n	8004530 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80044f4:	78fb      	ldrb	r3, [r7, #3]
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	212c      	movs	r1, #44	; 0x2c
 80044fa:	fb01 f303 	mul.w	r3, r1, r3
 80044fe:	4413      	add	r3, r2
 8004500:	3355      	adds	r3, #85	; 0x55
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d109      	bne.n	800451c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004508:	78fb      	ldrb	r3, [r7, #3]
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	212c      	movs	r1, #44	; 0x2c
 800450e:	fb01 f303 	mul.w	r3, r1, r3
 8004512:	4413      	add	r3, r2
 8004514:	3342      	adds	r3, #66	; 0x42
 8004516:	2200      	movs	r2, #0
 8004518:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800451a:	e034      	b.n	8004586 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800451c:	78fb      	ldrb	r3, [r7, #3]
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	212c      	movs	r1, #44	; 0x2c
 8004522:	fb01 f303 	mul.w	r3, r1, r3
 8004526:	4413      	add	r3, r2
 8004528:	3342      	adds	r3, #66	; 0x42
 800452a:	2202      	movs	r2, #2
 800452c:	701a      	strb	r2, [r3, #0]
      break;
 800452e:	e02a      	b.n	8004586 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004530:	78fb      	ldrb	r3, [r7, #3]
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	212c      	movs	r1, #44	; 0x2c
 8004536:	fb01 f303 	mul.w	r3, r1, r3
 800453a:	4413      	add	r3, r2
 800453c:	3354      	adds	r3, #84	; 0x54
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d109      	bne.n	8004558 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004544:	78fb      	ldrb	r3, [r7, #3]
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	212c      	movs	r1, #44	; 0x2c
 800454a:	fb01 f303 	mul.w	r3, r1, r3
 800454e:	4413      	add	r3, r2
 8004550:	3342      	adds	r3, #66	; 0x42
 8004552:	2200      	movs	r2, #0
 8004554:	701a      	strb	r2, [r3, #0]
      break;
 8004556:	e016      	b.n	8004586 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004558:	78fb      	ldrb	r3, [r7, #3]
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	212c      	movs	r1, #44	; 0x2c
 800455e:	fb01 f303 	mul.w	r3, r1, r3
 8004562:	4413      	add	r3, r2
 8004564:	3342      	adds	r3, #66	; 0x42
 8004566:	2202      	movs	r2, #2
 8004568:	701a      	strb	r2, [r3, #0]
      break;
 800456a:	e00c      	b.n	8004586 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800456c:	78fb      	ldrb	r3, [r7, #3]
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	212c      	movs	r1, #44	; 0x2c
 8004572:	fb01 f303 	mul.w	r3, r1, r3
 8004576:	4413      	add	r3, r2
 8004578:	3342      	adds	r3, #66	; 0x42
 800457a:	2200      	movs	r2, #0
 800457c:	701a      	strb	r2, [r3, #0]
      break;
 800457e:	e002      	b.n	8004586 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8004580:	bf00      	nop
 8004582:	e000      	b.n	8004586 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8004584:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004586:	78fb      	ldrb	r3, [r7, #3]
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	212c      	movs	r1, #44	; 0x2c
 800458c:	fb01 f303 	mul.w	r3, r1, r3
 8004590:	4413      	add	r3, r2
 8004592:	3344      	adds	r3, #68	; 0x44
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004598:	78fb      	ldrb	r3, [r7, #3]
 800459a:	8b3a      	ldrh	r2, [r7, #24]
 800459c:	6879      	ldr	r1, [r7, #4]
 800459e:	202c      	movs	r0, #44	; 0x2c
 80045a0:	fb00 f303 	mul.w	r3, r0, r3
 80045a4:	440b      	add	r3, r1
 80045a6:	334c      	adds	r3, #76	; 0x4c
 80045a8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80045aa:	78fb      	ldrb	r3, [r7, #3]
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	212c      	movs	r1, #44	; 0x2c
 80045b0:	fb01 f303 	mul.w	r3, r1, r3
 80045b4:	4413      	add	r3, r2
 80045b6:	3360      	adds	r3, #96	; 0x60
 80045b8:	2200      	movs	r2, #0
 80045ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80045bc:	78fb      	ldrb	r3, [r7, #3]
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	212c      	movs	r1, #44	; 0x2c
 80045c2:	fb01 f303 	mul.w	r3, r1, r3
 80045c6:	4413      	add	r3, r2
 80045c8:	3350      	adds	r3, #80	; 0x50
 80045ca:	2200      	movs	r2, #0
 80045cc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80045ce:	78fb      	ldrb	r3, [r7, #3]
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	212c      	movs	r1, #44	; 0x2c
 80045d4:	fb01 f303 	mul.w	r3, r1, r3
 80045d8:	4413      	add	r3, r2
 80045da:	3339      	adds	r3, #57	; 0x39
 80045dc:	78fa      	ldrb	r2, [r7, #3]
 80045de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80045e0:	78fb      	ldrb	r3, [r7, #3]
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	212c      	movs	r1, #44	; 0x2c
 80045e6:	fb01 f303 	mul.w	r3, r1, r3
 80045ea:	4413      	add	r3, r2
 80045ec:	3361      	adds	r3, #97	; 0x61
 80045ee:	2200      	movs	r2, #0
 80045f0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6818      	ldr	r0, [r3, #0]
 80045f6:	78fb      	ldrb	r3, [r7, #3]
 80045f8:	222c      	movs	r2, #44	; 0x2c
 80045fa:	fb02 f303 	mul.w	r3, r2, r3
 80045fe:	3338      	adds	r3, #56	; 0x38
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	18d1      	adds	r1, r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	b2db      	uxtb	r3, r3
 800460a:	461a      	mov	r2, r3
 800460c:	f004 f9a8 	bl	8008960 <USB_HC_StartXfer>
 8004610:	4603      	mov	r3, r0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3708      	adds	r7, #8
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop

0800461c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4618      	mov	r0, r3
 8004634:	f003 fecb 	bl	80083ce <USB_GetMode>
 8004638:	4603      	mov	r3, r0
 800463a:	2b01      	cmp	r3, #1
 800463c:	f040 80f6 	bne.w	800482c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4618      	mov	r0, r3
 8004646:	f003 feaf 	bl	80083a8 <USB_ReadInterrupts>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	f000 80ec 	beq.w	800482a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4618      	mov	r0, r3
 8004658:	f003 fea6 	bl	80083a8 <USB_ReadInterrupts>
 800465c:	4603      	mov	r3, r0
 800465e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004662:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004666:	d104      	bne.n	8004672 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004670:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4618      	mov	r0, r3
 8004678:	f003 fe96 	bl	80083a8 <USB_ReadInterrupts>
 800467c:	4603      	mov	r3, r0
 800467e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004682:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004686:	d104      	bne.n	8004692 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004690:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4618      	mov	r0, r3
 8004698:	f003 fe86 	bl	80083a8 <USB_ReadInterrupts>
 800469c:	4603      	mov	r3, r0
 800469e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046a6:	d104      	bne.n	80046b2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80046b0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4618      	mov	r0, r3
 80046b8:	f003 fe76 	bl	80083a8 <USB_ReadInterrupts>
 80046bc:	4603      	mov	r3, r0
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d103      	bne.n	80046ce <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2202      	movs	r2, #2
 80046cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f003 fe68 	bl	80083a8 <USB_ReadInterrupts>
 80046d8:	4603      	mov	r3, r0
 80046da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046e2:	d11c      	bne.n	800471e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80046ec:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d10f      	bne.n	800471e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80046fe:	2110      	movs	r1, #16
 8004700:	6938      	ldr	r0, [r7, #16]
 8004702:	f003 fd77 	bl	80081f4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004706:	6938      	ldr	r0, [r7, #16]
 8004708:	f003 fd98 	bl	800823c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2101      	movs	r1, #1
 8004712:	4618      	mov	r0, r3
 8004714:	f003 ff50 	bl	80085b8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f009 fdb1 	bl	800e280 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4618      	mov	r0, r3
 8004724:	f003 fe40 	bl	80083a8 <USB_ReadInterrupts>
 8004728:	4603      	mov	r3, r0
 800472a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800472e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004732:	d102      	bne.n	800473a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f001 fa03 	bl	8005b40 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4618      	mov	r0, r3
 8004740:	f003 fe32 	bl	80083a8 <USB_ReadInterrupts>
 8004744:	4603      	mov	r3, r0
 8004746:	f003 0308 	and.w	r3, r3, #8
 800474a:	2b08      	cmp	r3, #8
 800474c:	d106      	bne.n	800475c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f009 fd7a 	bl	800e248 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2208      	movs	r2, #8
 800475a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4618      	mov	r0, r3
 8004762:	f003 fe21 	bl	80083a8 <USB_ReadInterrupts>
 8004766:	4603      	mov	r3, r0
 8004768:	f003 0310 	and.w	r3, r3, #16
 800476c:	2b10      	cmp	r3, #16
 800476e:	d101      	bne.n	8004774 <HAL_HCD_IRQHandler+0x158>
 8004770:	2301      	movs	r3, #1
 8004772:	e000      	b.n	8004776 <HAL_HCD_IRQHandler+0x15a>
 8004774:	2300      	movs	r3, #0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d012      	beq.n	80047a0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	699a      	ldr	r2, [r3, #24]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f022 0210 	bic.w	r2, r2, #16
 8004788:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f001 f906 	bl	800599c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	699a      	ldr	r2, [r3, #24]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f042 0210 	orr.w	r2, r2, #16
 800479e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4618      	mov	r0, r3
 80047a6:	f003 fdff 	bl	80083a8 <USB_ReadInterrupts>
 80047aa:	4603      	mov	r3, r0
 80047ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047b4:	d13a      	bne.n	800482c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4618      	mov	r0, r3
 80047bc:	f004 fa12 	bl	8008be4 <USB_HC_ReadInterrupt>
 80047c0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80047c2:	2300      	movs	r3, #0
 80047c4:	617b      	str	r3, [r7, #20]
 80047c6:	e025      	b.n	8004814 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	f003 030f 	and.w	r3, r3, #15
 80047ce:	68ba      	ldr	r2, [r7, #8]
 80047d0:	fa22 f303 	lsr.w	r3, r2, r3
 80047d4:	f003 0301 	and.w	r3, r3, #1
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d018      	beq.n	800480e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	015a      	lsls	r2, r3, #5
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	4413      	add	r3, r2
 80047e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047f2:	d106      	bne.n	8004802 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	4619      	mov	r1, r3
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f8ab 	bl	8004956 <HCD_HC_IN_IRQHandler>
 8004800:	e005      	b.n	800480e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	b2db      	uxtb	r3, r3
 8004806:	4619      	mov	r1, r3
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f000 fcc6 	bl	800519a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	3301      	adds	r3, #1
 8004812:	617b      	str	r3, [r7, #20]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	429a      	cmp	r2, r3
 800481c:	d3d4      	bcc.n	80047c8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004826:	615a      	str	r2, [r3, #20]
 8004828:	e000      	b.n	800482c <HAL_HCD_IRQHandler+0x210>
      return;
 800482a:	bf00      	nop
    }
  }
}
 800482c:	3718      	adds	r7, #24
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}

08004832 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004832:	b580      	push	{r7, lr}
 8004834:	b082      	sub	sp, #8
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004840:	2b01      	cmp	r3, #1
 8004842:	d101      	bne.n	8004848 <HAL_HCD_Start+0x16>
 8004844:	2302      	movs	r3, #2
 8004846:	e013      	b.n	8004870 <HAL_HCD_Start+0x3e>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2101      	movs	r1, #1
 8004856:	4618      	mov	r0, r3
 8004858:	f003 ff12 	bl	8008680 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4618      	mov	r0, r3
 8004862:	f003 fc58 	bl	8008116 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3708      	adds	r7, #8
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004886:	2b01      	cmp	r3, #1
 8004888:	d101      	bne.n	800488e <HAL_HCD_Stop+0x16>
 800488a:	2302      	movs	r3, #2
 800488c:	e00d      	b.n	80048aa <HAL_HCD_Stop+0x32>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4618      	mov	r0, r3
 800489c:	f004 fb0c 	bl	8008eb8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3708      	adds	r7, #8
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80048b2:	b580      	push	{r7, lr}
 80048b4:	b082      	sub	sp, #8
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4618      	mov	r0, r3
 80048c0:	f003 feb4 	bl	800862c <USB_ResetPort>
 80048c4:	4603      	mov	r3, r0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3708      	adds	r7, #8
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}

080048ce <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b083      	sub	sp, #12
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
 80048d6:	460b      	mov	r3, r1
 80048d8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80048da:	78fb      	ldrb	r3, [r7, #3]
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	212c      	movs	r1, #44	; 0x2c
 80048e0:	fb01 f303 	mul.w	r3, r1, r3
 80048e4:	4413      	add	r3, r2
 80048e6:	3360      	adds	r3, #96	; 0x60
 80048e8:	781b      	ldrb	r3, [r3, #0]
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	370c      	adds	r7, #12
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr

080048f6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80048f6:	b480      	push	{r7}
 80048f8:	b083      	sub	sp, #12
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
 80048fe:	460b      	mov	r3, r1
 8004900:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004902:	78fb      	ldrb	r3, [r7, #3]
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	212c      	movs	r1, #44	; 0x2c
 8004908:	fb01 f303 	mul.w	r3, r1, r3
 800490c:	4413      	add	r3, r2
 800490e:	3350      	adds	r3, #80	; 0x50
 8004910:	681b      	ldr	r3, [r3, #0]
}
 8004912:	4618      	mov	r0, r3
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr

0800491e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800491e:	b580      	push	{r7, lr}
 8004920:	b082      	sub	sp, #8
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4618      	mov	r0, r3
 800492c:	f003 fef8 	bl	8008720 <USB_GetCurrentFrame>
 8004930:	4603      	mov	r3, r0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3708      	adds	r7, #8
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800493a:	b580      	push	{r7, lr}
 800493c:	b082      	sub	sp, #8
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4618      	mov	r0, r3
 8004948:	f003 fed3 	bl	80086f2 <USB_GetHostSpeed>
 800494c:	4603      	mov	r3, r0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3708      	adds	r7, #8
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004956:	b580      	push	{r7, lr}
 8004958:	b086      	sub	sp, #24
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
 800495e:	460b      	mov	r3, r1
 8004960:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800496c:	78fb      	ldrb	r3, [r7, #3]
 800496e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	015a      	lsls	r2, r3, #5
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	4413      	add	r3, r2
 8004978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f003 0304 	and.w	r3, r3, #4
 8004982:	2b04      	cmp	r3, #4
 8004984:	d119      	bne.n	80049ba <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	015a      	lsls	r2, r3, #5
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	4413      	add	r3, r2
 800498e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004992:	461a      	mov	r2, r3
 8004994:	2304      	movs	r3, #4
 8004996:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	015a      	lsls	r2, r3, #5
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	4413      	add	r3, r2
 80049a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	0151      	lsls	r1, r2, #5
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	440a      	add	r2, r1
 80049ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049b2:	f043 0302 	orr.w	r3, r3, #2
 80049b6:	60d3      	str	r3, [r2, #12]
 80049b8:	e101      	b.n	8004bbe <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	015a      	lsls	r2, r3, #5
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	4413      	add	r3, r2
 80049c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049d0:	d12b      	bne.n	8004a2a <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	015a      	lsls	r2, r3, #5
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	4413      	add	r3, r2
 80049da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049de:	461a      	mov	r2, r3
 80049e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80049e4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	212c      	movs	r1, #44	; 0x2c
 80049ec:	fb01 f303 	mul.w	r3, r1, r3
 80049f0:	4413      	add	r3, r2
 80049f2:	3361      	adds	r3, #97	; 0x61
 80049f4:	2207      	movs	r2, #7
 80049f6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	015a      	lsls	r2, r3, #5
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	4413      	add	r3, r2
 8004a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	0151      	lsls	r1, r2, #5
 8004a0a:	693a      	ldr	r2, [r7, #16]
 8004a0c:	440a      	add	r2, r1
 8004a0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a12:	f043 0302 	orr.w	r3, r3, #2
 8004a16:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	b2d2      	uxtb	r2, r2
 8004a20:	4611      	mov	r1, r2
 8004a22:	4618      	mov	r0, r3
 8004a24:	f004 f8ef 	bl	8008c06 <USB_HC_Halt>
 8004a28:	e0c9      	b.n	8004bbe <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	015a      	lsls	r2, r3, #5
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	4413      	add	r3, r2
 8004a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f003 0320 	and.w	r3, r3, #32
 8004a3c:	2b20      	cmp	r3, #32
 8004a3e:	d109      	bne.n	8004a54 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	015a      	lsls	r2, r3, #5
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	4413      	add	r3, r2
 8004a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	2320      	movs	r3, #32
 8004a50:	6093      	str	r3, [r2, #8]
 8004a52:	e0b4      	b.n	8004bbe <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	015a      	lsls	r2, r3, #5
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f003 0308 	and.w	r3, r3, #8
 8004a66:	2b08      	cmp	r3, #8
 8004a68:	d133      	bne.n	8004ad2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	015a      	lsls	r2, r3, #5
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	4413      	add	r3, r2
 8004a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	0151      	lsls	r1, r2, #5
 8004a7c:	693a      	ldr	r2, [r7, #16]
 8004a7e:	440a      	add	r2, r1
 8004a80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a84:	f043 0302 	orr.w	r3, r3, #2
 8004a88:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	212c      	movs	r1, #44	; 0x2c
 8004a90:	fb01 f303 	mul.w	r3, r1, r3
 8004a94:	4413      	add	r3, r2
 8004a96:	3361      	adds	r3, #97	; 0x61
 8004a98:	2205      	movs	r2, #5
 8004a9a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	015a      	lsls	r2, r3, #5
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	2310      	movs	r3, #16
 8004aac:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	015a      	lsls	r2, r3, #5
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aba:	461a      	mov	r2, r3
 8004abc:	2308      	movs	r3, #8
 8004abe:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	b2d2      	uxtb	r2, r2
 8004ac8:	4611      	mov	r1, r2
 8004aca:	4618      	mov	r0, r3
 8004acc:	f004 f89b 	bl	8008c06 <USB_HC_Halt>
 8004ad0:	e075      	b.n	8004bbe <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	015a      	lsls	r2, r3, #5
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	4413      	add	r3, r2
 8004ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ae4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ae8:	d134      	bne.n	8004b54 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	015a      	lsls	r2, r3, #5
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	4413      	add	r3, r2
 8004af2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	0151      	lsls	r1, r2, #5
 8004afc:	693a      	ldr	r2, [r7, #16]
 8004afe:	440a      	add	r2, r1
 8004b00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b04:	f043 0302 	orr.w	r3, r3, #2
 8004b08:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	212c      	movs	r1, #44	; 0x2c
 8004b10:	fb01 f303 	mul.w	r3, r1, r3
 8004b14:	4413      	add	r3, r2
 8004b16:	3361      	adds	r3, #97	; 0x61
 8004b18:	2208      	movs	r2, #8
 8004b1a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	015a      	lsls	r2, r3, #5
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	4413      	add	r3, r2
 8004b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b28:	461a      	mov	r2, r3
 8004b2a:	2310      	movs	r3, #16
 8004b2c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	015a      	lsls	r2, r3, #5
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	4413      	add	r3, r2
 8004b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b40:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	b2d2      	uxtb	r2, r2
 8004b4a:	4611      	mov	r1, r2
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f004 f85a 	bl	8008c06 <USB_HC_Halt>
 8004b52:	e034      	b.n	8004bbe <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	015a      	lsls	r2, r3, #5
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b66:	2b80      	cmp	r3, #128	; 0x80
 8004b68:	d129      	bne.n	8004bbe <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	015a      	lsls	r2, r3, #5
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	4413      	add	r3, r2
 8004b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	0151      	lsls	r1, r2, #5
 8004b7c:	693a      	ldr	r2, [r7, #16]
 8004b7e:	440a      	add	r2, r1
 8004b80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b84:	f043 0302 	orr.w	r3, r3, #2
 8004b88:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	212c      	movs	r1, #44	; 0x2c
 8004b90:	fb01 f303 	mul.w	r3, r1, r3
 8004b94:	4413      	add	r3, r2
 8004b96:	3361      	adds	r3, #97	; 0x61
 8004b98:	2206      	movs	r2, #6
 8004b9a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	b2d2      	uxtb	r2, r2
 8004ba4:	4611      	mov	r1, r2
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f004 f82d 	bl	8008c06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	015a      	lsls	r2, r3, #5
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bb8:	461a      	mov	r2, r3
 8004bba:	2380      	movs	r3, #128	; 0x80
 8004bbc:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	015a      	lsls	r2, r3, #5
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bd4:	d122      	bne.n	8004c1c <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	015a      	lsls	r2, r3, #5
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	4413      	add	r3, r2
 8004bde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	0151      	lsls	r1, r2, #5
 8004be8:	693a      	ldr	r2, [r7, #16]
 8004bea:	440a      	add	r2, r1
 8004bec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004bf0:	f043 0302 	orr.w	r3, r3, #2
 8004bf4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	b2d2      	uxtb	r2, r2
 8004bfe:	4611      	mov	r1, r2
 8004c00:	4618      	mov	r0, r3
 8004c02:	f004 f800 	bl	8008c06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	015a      	lsls	r2, r3, #5
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c12:	461a      	mov	r2, r3
 8004c14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c18:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004c1a:	e2ba      	b.n	8005192 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	015a      	lsls	r2, r3, #5
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	4413      	add	r3, r2
 8004c24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f003 0301 	and.w	r3, r3, #1
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	f040 811b 	bne.w	8004e6a <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d019      	beq.n	8004c70 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	212c      	movs	r1, #44	; 0x2c
 8004c42:	fb01 f303 	mul.w	r3, r1, r3
 8004c46:	4413      	add	r3, r2
 8004c48:	3348      	adds	r3, #72	; 0x48
 8004c4a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	0159      	lsls	r1, r3, #5
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	440b      	add	r3, r1
 8004c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004c5e:	1ad2      	subs	r2, r2, r3
 8004c60:	6879      	ldr	r1, [r7, #4]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	202c      	movs	r0, #44	; 0x2c
 8004c66:	fb00 f303 	mul.w	r3, r0, r3
 8004c6a:	440b      	add	r3, r1
 8004c6c:	3350      	adds	r3, #80	; 0x50
 8004c6e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	212c      	movs	r1, #44	; 0x2c
 8004c76:	fb01 f303 	mul.w	r3, r1, r3
 8004c7a:	4413      	add	r3, r2
 8004c7c:	3361      	adds	r3, #97	; 0x61
 8004c7e:	2201      	movs	r2, #1
 8004c80:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	212c      	movs	r1, #44	; 0x2c
 8004c88:	fb01 f303 	mul.w	r3, r1, r3
 8004c8c:	4413      	add	r3, r2
 8004c8e:	335c      	adds	r3, #92	; 0x5c
 8004c90:	2200      	movs	r2, #0
 8004c92:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	015a      	lsls	r2, r3, #5
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	212c      	movs	r1, #44	; 0x2c
 8004cac:	fb01 f303 	mul.w	r3, r1, r3
 8004cb0:	4413      	add	r3, r2
 8004cb2:	333f      	adds	r3, #63	; 0x3f
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d009      	beq.n	8004cce <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	212c      	movs	r1, #44	; 0x2c
 8004cc0:	fb01 f303 	mul.w	r3, r1, r3
 8004cc4:	4413      	add	r3, r2
 8004cc6:	333f      	adds	r3, #63	; 0x3f
 8004cc8:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d121      	bne.n	8004d12 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	015a      	lsls	r2, r3, #5
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	0151      	lsls	r1, r2, #5
 8004ce0:	693a      	ldr	r2, [r7, #16]
 8004ce2:	440a      	add	r2, r1
 8004ce4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ce8:	f043 0302 	orr.w	r3, r3, #2
 8004cec:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	b2d2      	uxtb	r2, r2
 8004cf6:	4611      	mov	r1, r2
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f003 ff84 	bl	8008c06 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	015a      	lsls	r2, r3, #5
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	4413      	add	r3, r2
 8004d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	2310      	movs	r3, #16
 8004d0e:	6093      	str	r3, [r2, #8]
 8004d10:	e066      	b.n	8004de0 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	212c      	movs	r1, #44	; 0x2c
 8004d18:	fb01 f303 	mul.w	r3, r1, r3
 8004d1c:	4413      	add	r3, r2
 8004d1e:	333f      	adds	r3, #63	; 0x3f
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	2b03      	cmp	r3, #3
 8004d24:	d127      	bne.n	8004d76 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	015a      	lsls	r2, r3, #5
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	0151      	lsls	r1, r2, #5
 8004d38:	693a      	ldr	r2, [r7, #16]
 8004d3a:	440a      	add	r2, r1
 8004d3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d44:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	212c      	movs	r1, #44	; 0x2c
 8004d4c:	fb01 f303 	mul.w	r3, r1, r3
 8004d50:	4413      	add	r3, r2
 8004d52:	3360      	adds	r3, #96	; 0x60
 8004d54:	2201      	movs	r2, #1
 8004d56:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	b2d9      	uxtb	r1, r3
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	202c      	movs	r0, #44	; 0x2c
 8004d62:	fb00 f303 	mul.w	r3, r0, r3
 8004d66:	4413      	add	r3, r2
 8004d68:	3360      	adds	r3, #96	; 0x60
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f009 fa94 	bl	800e29c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004d74:	e034      	b.n	8004de0 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	212c      	movs	r1, #44	; 0x2c
 8004d7c:	fb01 f303 	mul.w	r3, r1, r3
 8004d80:	4413      	add	r3, r2
 8004d82:	333f      	adds	r3, #63	; 0x3f
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d12a      	bne.n	8004de0 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	212c      	movs	r1, #44	; 0x2c
 8004d90:	fb01 f303 	mul.w	r3, r1, r3
 8004d94:	4413      	add	r3, r2
 8004d96:	3360      	adds	r3, #96	; 0x60
 8004d98:	2201      	movs	r2, #1
 8004d9a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	212c      	movs	r1, #44	; 0x2c
 8004da2:	fb01 f303 	mul.w	r3, r1, r3
 8004da6:	4413      	add	r3, r2
 8004da8:	3354      	adds	r3, #84	; 0x54
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	f083 0301 	eor.w	r3, r3, #1
 8004db0:	b2d8      	uxtb	r0, r3
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	212c      	movs	r1, #44	; 0x2c
 8004db8:	fb01 f303 	mul.w	r3, r1, r3
 8004dbc:	4413      	add	r3, r2
 8004dbe:	3354      	adds	r3, #84	; 0x54
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	b2d9      	uxtb	r1, r3
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	202c      	movs	r0, #44	; 0x2c
 8004dce:	fb00 f303 	mul.w	r3, r0, r3
 8004dd2:	4413      	add	r3, r2
 8004dd4:	3360      	adds	r3, #96	; 0x60
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	461a      	mov	r2, r3
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f009 fa5e 	bl	800e29c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d12b      	bne.n	8004e40 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	212c      	movs	r1, #44	; 0x2c
 8004dee:	fb01 f303 	mul.w	r3, r1, r3
 8004df2:	4413      	add	r3, r2
 8004df4:	3348      	adds	r3, #72	; 0x48
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	6879      	ldr	r1, [r7, #4]
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	202c      	movs	r0, #44	; 0x2c
 8004dfe:	fb00 f202 	mul.w	r2, r0, r2
 8004e02:	440a      	add	r2, r1
 8004e04:	3240      	adds	r2, #64	; 0x40
 8004e06:	8812      	ldrh	r2, [r2, #0]
 8004e08:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e0c:	f003 0301 	and.w	r3, r3, #1
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	f000 81be 	beq.w	8005192 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	212c      	movs	r1, #44	; 0x2c
 8004e1c:	fb01 f303 	mul.w	r3, r1, r3
 8004e20:	4413      	add	r3, r2
 8004e22:	3354      	adds	r3, #84	; 0x54
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	f083 0301 	eor.w	r3, r3, #1
 8004e2a:	b2d8      	uxtb	r0, r3
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	212c      	movs	r1, #44	; 0x2c
 8004e32:	fb01 f303 	mul.w	r3, r1, r3
 8004e36:	4413      	add	r3, r2
 8004e38:	3354      	adds	r3, #84	; 0x54
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	701a      	strb	r2, [r3, #0]
}
 8004e3e:	e1a8      	b.n	8005192 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	212c      	movs	r1, #44	; 0x2c
 8004e46:	fb01 f303 	mul.w	r3, r1, r3
 8004e4a:	4413      	add	r3, r2
 8004e4c:	3354      	adds	r3, #84	; 0x54
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	f083 0301 	eor.w	r3, r3, #1
 8004e54:	b2d8      	uxtb	r0, r3
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	212c      	movs	r1, #44	; 0x2c
 8004e5c:	fb01 f303 	mul.w	r3, r1, r3
 8004e60:	4413      	add	r3, r2
 8004e62:	3354      	adds	r3, #84	; 0x54
 8004e64:	4602      	mov	r2, r0
 8004e66:	701a      	strb	r2, [r3, #0]
}
 8004e68:	e193      	b.n	8005192 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	015a      	lsls	r2, r3, #5
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	4413      	add	r3, r2
 8004e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	f003 0302 	and.w	r3, r3, #2
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	f040 8106 	bne.w	800508e <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	015a      	lsls	r2, r3, #5
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	4413      	add	r3, r2
 8004e8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	0151      	lsls	r1, r2, #5
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	440a      	add	r2, r1
 8004e98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e9c:	f023 0302 	bic.w	r3, r3, #2
 8004ea0:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	212c      	movs	r1, #44	; 0x2c
 8004ea8:	fb01 f303 	mul.w	r3, r1, r3
 8004eac:	4413      	add	r3, r2
 8004eae:	3361      	adds	r3, #97	; 0x61
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d109      	bne.n	8004eca <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	212c      	movs	r1, #44	; 0x2c
 8004ebc:	fb01 f303 	mul.w	r3, r1, r3
 8004ec0:	4413      	add	r3, r2
 8004ec2:	3360      	adds	r3, #96	; 0x60
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	701a      	strb	r2, [r3, #0]
 8004ec8:	e0c9      	b.n	800505e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	212c      	movs	r1, #44	; 0x2c
 8004ed0:	fb01 f303 	mul.w	r3, r1, r3
 8004ed4:	4413      	add	r3, r2
 8004ed6:	3361      	adds	r3, #97	; 0x61
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	2b05      	cmp	r3, #5
 8004edc:	d109      	bne.n	8004ef2 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	212c      	movs	r1, #44	; 0x2c
 8004ee4:	fb01 f303 	mul.w	r3, r1, r3
 8004ee8:	4413      	add	r3, r2
 8004eea:	3360      	adds	r3, #96	; 0x60
 8004eec:	2205      	movs	r2, #5
 8004eee:	701a      	strb	r2, [r3, #0]
 8004ef0:	e0b5      	b.n	800505e <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	212c      	movs	r1, #44	; 0x2c
 8004ef8:	fb01 f303 	mul.w	r3, r1, r3
 8004efc:	4413      	add	r3, r2
 8004efe:	3361      	adds	r3, #97	; 0x61
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	2b06      	cmp	r3, #6
 8004f04:	d009      	beq.n	8004f1a <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	212c      	movs	r1, #44	; 0x2c
 8004f0c:	fb01 f303 	mul.w	r3, r1, r3
 8004f10:	4413      	add	r3, r2
 8004f12:	3361      	adds	r3, #97	; 0x61
 8004f14:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004f16:	2b08      	cmp	r3, #8
 8004f18:	d150      	bne.n	8004fbc <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	212c      	movs	r1, #44	; 0x2c
 8004f20:	fb01 f303 	mul.w	r3, r1, r3
 8004f24:	4413      	add	r3, r2
 8004f26:	335c      	adds	r3, #92	; 0x5c
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	1c5a      	adds	r2, r3, #1
 8004f2c:	6879      	ldr	r1, [r7, #4]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	202c      	movs	r0, #44	; 0x2c
 8004f32:	fb00 f303 	mul.w	r3, r0, r3
 8004f36:	440b      	add	r3, r1
 8004f38:	335c      	adds	r3, #92	; 0x5c
 8004f3a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	212c      	movs	r1, #44	; 0x2c
 8004f42:	fb01 f303 	mul.w	r3, r1, r3
 8004f46:	4413      	add	r3, r2
 8004f48:	335c      	adds	r3, #92	; 0x5c
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d912      	bls.n	8004f76 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	212c      	movs	r1, #44	; 0x2c
 8004f56:	fb01 f303 	mul.w	r3, r1, r3
 8004f5a:	4413      	add	r3, r2
 8004f5c:	335c      	adds	r3, #92	; 0x5c
 8004f5e:	2200      	movs	r2, #0
 8004f60:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	212c      	movs	r1, #44	; 0x2c
 8004f68:	fb01 f303 	mul.w	r3, r1, r3
 8004f6c:	4413      	add	r3, r2
 8004f6e:	3360      	adds	r3, #96	; 0x60
 8004f70:	2204      	movs	r2, #4
 8004f72:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004f74:	e073      	b.n	800505e <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	212c      	movs	r1, #44	; 0x2c
 8004f7c:	fb01 f303 	mul.w	r3, r1, r3
 8004f80:	4413      	add	r3, r2
 8004f82:	3360      	adds	r3, #96	; 0x60
 8004f84:	2202      	movs	r2, #2
 8004f86:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	015a      	lsls	r2, r3, #5
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	4413      	add	r3, r2
 8004f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f9e:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004fa6:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	015a      	lsls	r2, r3, #5
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	4413      	add	r3, r2
 8004fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004fba:	e050      	b.n	800505e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	212c      	movs	r1, #44	; 0x2c
 8004fc2:	fb01 f303 	mul.w	r3, r1, r3
 8004fc6:	4413      	add	r3, r2
 8004fc8:	3361      	adds	r3, #97	; 0x61
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	2b03      	cmp	r3, #3
 8004fce:	d122      	bne.n	8005016 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	212c      	movs	r1, #44	; 0x2c
 8004fd6:	fb01 f303 	mul.w	r3, r1, r3
 8004fda:	4413      	add	r3, r2
 8004fdc:	3360      	adds	r3, #96	; 0x60
 8004fde:	2202      	movs	r2, #2
 8004fe0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	015a      	lsls	r2, r3, #5
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	4413      	add	r3, r2
 8004fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ff8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005000:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	015a      	lsls	r2, r3, #5
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	4413      	add	r3, r2
 800500a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800500e:	461a      	mov	r2, r3
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	6013      	str	r3, [r2, #0]
 8005014:	e023      	b.n	800505e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	212c      	movs	r1, #44	; 0x2c
 800501c:	fb01 f303 	mul.w	r3, r1, r3
 8005020:	4413      	add	r3, r2
 8005022:	3361      	adds	r3, #97	; 0x61
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	2b07      	cmp	r3, #7
 8005028:	d119      	bne.n	800505e <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	212c      	movs	r1, #44	; 0x2c
 8005030:	fb01 f303 	mul.w	r3, r1, r3
 8005034:	4413      	add	r3, r2
 8005036:	335c      	adds	r3, #92	; 0x5c
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	1c5a      	adds	r2, r3, #1
 800503c:	6879      	ldr	r1, [r7, #4]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	202c      	movs	r0, #44	; 0x2c
 8005042:	fb00 f303 	mul.w	r3, r0, r3
 8005046:	440b      	add	r3, r1
 8005048:	335c      	adds	r3, #92	; 0x5c
 800504a:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	212c      	movs	r1, #44	; 0x2c
 8005052:	fb01 f303 	mul.w	r3, r1, r3
 8005056:	4413      	add	r3, r2
 8005058:	3360      	adds	r3, #96	; 0x60
 800505a:	2204      	movs	r2, #4
 800505c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	015a      	lsls	r2, r3, #5
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	4413      	add	r3, r2
 8005066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800506a:	461a      	mov	r2, r3
 800506c:	2302      	movs	r3, #2
 800506e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	b2d9      	uxtb	r1, r3
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	202c      	movs	r0, #44	; 0x2c
 800507a:	fb00 f303 	mul.w	r3, r0, r3
 800507e:	4413      	add	r3, r2
 8005080:	3360      	adds	r3, #96	; 0x60
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	461a      	mov	r2, r3
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f009 f908 	bl	800e29c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800508c:	e081      	b.n	8005192 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	015a      	lsls	r2, r3, #5
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	4413      	add	r3, r2
 8005096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	f003 0310 	and.w	r3, r3, #16
 80050a0:	2b10      	cmp	r3, #16
 80050a2:	d176      	bne.n	8005192 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	212c      	movs	r1, #44	; 0x2c
 80050aa:	fb01 f303 	mul.w	r3, r1, r3
 80050ae:	4413      	add	r3, r2
 80050b0:	333f      	adds	r3, #63	; 0x3f
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	2b03      	cmp	r3, #3
 80050b6:	d121      	bne.n	80050fc <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	212c      	movs	r1, #44	; 0x2c
 80050be:	fb01 f303 	mul.w	r3, r1, r3
 80050c2:	4413      	add	r3, r2
 80050c4:	335c      	adds	r3, #92	; 0x5c
 80050c6:	2200      	movs	r2, #0
 80050c8:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	015a      	lsls	r2, r3, #5
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	4413      	add	r3, r2
 80050d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	0151      	lsls	r1, r2, #5
 80050dc:	693a      	ldr	r2, [r7, #16]
 80050de:	440a      	add	r2, r1
 80050e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050e4:	f043 0302 	orr.w	r3, r3, #2
 80050e8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	b2d2      	uxtb	r2, r2
 80050f2:	4611      	mov	r1, r2
 80050f4:	4618      	mov	r0, r3
 80050f6:	f003 fd86 	bl	8008c06 <USB_HC_Halt>
 80050fa:	e041      	b.n	8005180 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	212c      	movs	r1, #44	; 0x2c
 8005102:	fb01 f303 	mul.w	r3, r1, r3
 8005106:	4413      	add	r3, r2
 8005108:	333f      	adds	r3, #63	; 0x3f
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d009      	beq.n	8005124 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	212c      	movs	r1, #44	; 0x2c
 8005116:	fb01 f303 	mul.w	r3, r1, r3
 800511a:	4413      	add	r3, r2
 800511c:	333f      	adds	r3, #63	; 0x3f
 800511e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005120:	2b02      	cmp	r3, #2
 8005122:	d12d      	bne.n	8005180 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	212c      	movs	r1, #44	; 0x2c
 800512a:	fb01 f303 	mul.w	r3, r1, r3
 800512e:	4413      	add	r3, r2
 8005130:	335c      	adds	r3, #92	; 0x5c
 8005132:	2200      	movs	r2, #0
 8005134:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d120      	bne.n	8005180 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	212c      	movs	r1, #44	; 0x2c
 8005144:	fb01 f303 	mul.w	r3, r1, r3
 8005148:	4413      	add	r3, r2
 800514a:	3361      	adds	r3, #97	; 0x61
 800514c:	2203      	movs	r2, #3
 800514e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	015a      	lsls	r2, r3, #5
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	4413      	add	r3, r2
 8005158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	0151      	lsls	r1, r2, #5
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	440a      	add	r2, r1
 8005166:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800516a:	f043 0302 	orr.w	r3, r3, #2
 800516e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	b2d2      	uxtb	r2, r2
 8005178:	4611      	mov	r1, r2
 800517a:	4618      	mov	r0, r3
 800517c:	f003 fd43 	bl	8008c06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	015a      	lsls	r2, r3, #5
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	4413      	add	r3, r2
 8005188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800518c:	461a      	mov	r2, r3
 800518e:	2310      	movs	r3, #16
 8005190:	6093      	str	r3, [r2, #8]
}
 8005192:	bf00      	nop
 8005194:	3718      	adds	r7, #24
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}

0800519a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800519a:	b580      	push	{r7, lr}
 800519c:	b088      	sub	sp, #32
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
 80051a2:	460b      	mov	r3, r1
 80051a4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80051b0:	78fb      	ldrb	r3, [r7, #3]
 80051b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	015a      	lsls	r2, r3, #5
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	4413      	add	r3, r2
 80051bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	f003 0304 	and.w	r3, r3, #4
 80051c6:	2b04      	cmp	r3, #4
 80051c8:	d119      	bne.n	80051fe <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	015a      	lsls	r2, r3, #5
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	4413      	add	r3, r2
 80051d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051d6:	461a      	mov	r2, r3
 80051d8:	2304      	movs	r3, #4
 80051da:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	015a      	lsls	r2, r3, #5
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	4413      	add	r3, r2
 80051e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	0151      	lsls	r1, r2, #5
 80051ee:	69ba      	ldr	r2, [r7, #24]
 80051f0:	440a      	add	r2, r1
 80051f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051f6:	f043 0302 	orr.w	r3, r3, #2
 80051fa:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80051fc:	e3ca      	b.n	8005994 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	015a      	lsls	r2, r3, #5
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	4413      	add	r3, r2
 8005206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	f003 0320 	and.w	r3, r3, #32
 8005210:	2b20      	cmp	r3, #32
 8005212:	d13e      	bne.n	8005292 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	015a      	lsls	r2, r3, #5
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	4413      	add	r3, r2
 800521c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005220:	461a      	mov	r2, r3
 8005222:	2320      	movs	r3, #32
 8005224:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	212c      	movs	r1, #44	; 0x2c
 800522c:	fb01 f303 	mul.w	r3, r1, r3
 8005230:	4413      	add	r3, r2
 8005232:	333d      	adds	r3, #61	; 0x3d
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	2b01      	cmp	r3, #1
 8005238:	f040 83ac 	bne.w	8005994 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	212c      	movs	r1, #44	; 0x2c
 8005242:	fb01 f303 	mul.w	r3, r1, r3
 8005246:	4413      	add	r3, r2
 8005248:	333d      	adds	r3, #61	; 0x3d
 800524a:	2200      	movs	r2, #0
 800524c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	212c      	movs	r1, #44	; 0x2c
 8005254:	fb01 f303 	mul.w	r3, r1, r3
 8005258:	4413      	add	r3, r2
 800525a:	3360      	adds	r3, #96	; 0x60
 800525c:	2202      	movs	r2, #2
 800525e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	015a      	lsls	r2, r3, #5
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	4413      	add	r3, r2
 8005268:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	0151      	lsls	r1, r2, #5
 8005272:	69ba      	ldr	r2, [r7, #24]
 8005274:	440a      	add	r2, r1
 8005276:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800527a:	f043 0302 	orr.w	r3, r3, #2
 800527e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	697a      	ldr	r2, [r7, #20]
 8005286:	b2d2      	uxtb	r2, r2
 8005288:	4611      	mov	r1, r2
 800528a:	4618      	mov	r0, r3
 800528c:	f003 fcbb 	bl	8008c06 <USB_HC_Halt>
}
 8005290:	e380      	b.n	8005994 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	015a      	lsls	r2, r3, #5
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	4413      	add	r3, r2
 800529a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052a8:	d122      	bne.n	80052f0 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	015a      	lsls	r2, r3, #5
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	4413      	add	r3, r2
 80052b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	697a      	ldr	r2, [r7, #20]
 80052ba:	0151      	lsls	r1, r2, #5
 80052bc:	69ba      	ldr	r2, [r7, #24]
 80052be:	440a      	add	r2, r1
 80052c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052c4:	f043 0302 	orr.w	r3, r3, #2
 80052c8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	b2d2      	uxtb	r2, r2
 80052d2:	4611      	mov	r1, r2
 80052d4:	4618      	mov	r0, r3
 80052d6:	f003 fc96 	bl	8008c06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	015a      	lsls	r2, r3, #5
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	4413      	add	r3, r2
 80052e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052e6:	461a      	mov	r2, r3
 80052e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052ec:	6093      	str	r3, [r2, #8]
}
 80052ee:	e351      	b.n	8005994 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	015a      	lsls	r2, r3, #5
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	4413      	add	r3, r2
 80052f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	f003 0301 	and.w	r3, r3, #1
 8005302:	2b01      	cmp	r3, #1
 8005304:	d150      	bne.n	80053a8 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	212c      	movs	r1, #44	; 0x2c
 800530c:	fb01 f303 	mul.w	r3, r1, r3
 8005310:	4413      	add	r3, r2
 8005312:	335c      	adds	r3, #92	; 0x5c
 8005314:	2200      	movs	r2, #0
 8005316:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	015a      	lsls	r2, r3, #5
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	4413      	add	r3, r2
 8005320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800532a:	2b40      	cmp	r3, #64	; 0x40
 800532c:	d111      	bne.n	8005352 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	212c      	movs	r1, #44	; 0x2c
 8005334:	fb01 f303 	mul.w	r3, r1, r3
 8005338:	4413      	add	r3, r2
 800533a:	333d      	adds	r3, #61	; 0x3d
 800533c:	2201      	movs	r2, #1
 800533e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	015a      	lsls	r2, r3, #5
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	4413      	add	r3, r2
 8005348:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800534c:	461a      	mov	r2, r3
 800534e:	2340      	movs	r3, #64	; 0x40
 8005350:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	015a      	lsls	r2, r3, #5
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	4413      	add	r3, r2
 800535a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	697a      	ldr	r2, [r7, #20]
 8005362:	0151      	lsls	r1, r2, #5
 8005364:	69ba      	ldr	r2, [r7, #24]
 8005366:	440a      	add	r2, r1
 8005368:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800536c:	f043 0302 	orr.w	r3, r3, #2
 8005370:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	b2d2      	uxtb	r2, r2
 800537a:	4611      	mov	r1, r2
 800537c:	4618      	mov	r0, r3
 800537e:	f003 fc42 	bl	8008c06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	015a      	lsls	r2, r3, #5
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	4413      	add	r3, r2
 800538a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800538e:	461a      	mov	r2, r3
 8005390:	2301      	movs	r3, #1
 8005392:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	212c      	movs	r1, #44	; 0x2c
 800539a:	fb01 f303 	mul.w	r3, r1, r3
 800539e:	4413      	add	r3, r2
 80053a0:	3361      	adds	r3, #97	; 0x61
 80053a2:	2201      	movs	r2, #1
 80053a4:	701a      	strb	r2, [r3, #0]
}
 80053a6:	e2f5      	b.n	8005994 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	015a      	lsls	r2, r3, #5
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	4413      	add	r3, r2
 80053b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ba:	2b40      	cmp	r3, #64	; 0x40
 80053bc:	d13c      	bne.n	8005438 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	212c      	movs	r1, #44	; 0x2c
 80053c4:	fb01 f303 	mul.w	r3, r1, r3
 80053c8:	4413      	add	r3, r2
 80053ca:	3361      	adds	r3, #97	; 0x61
 80053cc:	2204      	movs	r2, #4
 80053ce:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	212c      	movs	r1, #44	; 0x2c
 80053d6:	fb01 f303 	mul.w	r3, r1, r3
 80053da:	4413      	add	r3, r2
 80053dc:	333d      	adds	r3, #61	; 0x3d
 80053de:	2201      	movs	r2, #1
 80053e0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	212c      	movs	r1, #44	; 0x2c
 80053e8:	fb01 f303 	mul.w	r3, r1, r3
 80053ec:	4413      	add	r3, r2
 80053ee:	335c      	adds	r3, #92	; 0x5c
 80053f0:	2200      	movs	r2, #0
 80053f2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	015a      	lsls	r2, r3, #5
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	4413      	add	r3, r2
 80053fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	0151      	lsls	r1, r2, #5
 8005406:	69ba      	ldr	r2, [r7, #24]
 8005408:	440a      	add	r2, r1
 800540a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800540e:	f043 0302 	orr.w	r3, r3, #2
 8005412:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	697a      	ldr	r2, [r7, #20]
 800541a:	b2d2      	uxtb	r2, r2
 800541c:	4611      	mov	r1, r2
 800541e:	4618      	mov	r0, r3
 8005420:	f003 fbf1 	bl	8008c06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	015a      	lsls	r2, r3, #5
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	4413      	add	r3, r2
 800542c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005430:	461a      	mov	r2, r3
 8005432:	2340      	movs	r3, #64	; 0x40
 8005434:	6093      	str	r3, [r2, #8]
}
 8005436:	e2ad      	b.n	8005994 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	015a      	lsls	r2, r3, #5
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	4413      	add	r3, r2
 8005440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f003 0308 	and.w	r3, r3, #8
 800544a:	2b08      	cmp	r3, #8
 800544c:	d12a      	bne.n	80054a4 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	015a      	lsls	r2, r3, #5
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	4413      	add	r3, r2
 8005456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800545a:	461a      	mov	r2, r3
 800545c:	2308      	movs	r3, #8
 800545e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	015a      	lsls	r2, r3, #5
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	4413      	add	r3, r2
 8005468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	697a      	ldr	r2, [r7, #20]
 8005470:	0151      	lsls	r1, r2, #5
 8005472:	69ba      	ldr	r2, [r7, #24]
 8005474:	440a      	add	r2, r1
 8005476:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800547a:	f043 0302 	orr.w	r3, r3, #2
 800547e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	697a      	ldr	r2, [r7, #20]
 8005486:	b2d2      	uxtb	r2, r2
 8005488:	4611      	mov	r1, r2
 800548a:	4618      	mov	r0, r3
 800548c:	f003 fbbb 	bl	8008c06 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	212c      	movs	r1, #44	; 0x2c
 8005496:	fb01 f303 	mul.w	r3, r1, r3
 800549a:	4413      	add	r3, r2
 800549c:	3361      	adds	r3, #97	; 0x61
 800549e:	2205      	movs	r2, #5
 80054a0:	701a      	strb	r2, [r3, #0]
}
 80054a2:	e277      	b.n	8005994 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	015a      	lsls	r2, r3, #5
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	4413      	add	r3, r2
 80054ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f003 0310 	and.w	r3, r3, #16
 80054b6:	2b10      	cmp	r3, #16
 80054b8:	d150      	bne.n	800555c <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	212c      	movs	r1, #44	; 0x2c
 80054c0:	fb01 f303 	mul.w	r3, r1, r3
 80054c4:	4413      	add	r3, r2
 80054c6:	335c      	adds	r3, #92	; 0x5c
 80054c8:	2200      	movs	r2, #0
 80054ca:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	212c      	movs	r1, #44	; 0x2c
 80054d2:	fb01 f303 	mul.w	r3, r1, r3
 80054d6:	4413      	add	r3, r2
 80054d8:	3361      	adds	r3, #97	; 0x61
 80054da:	2203      	movs	r2, #3
 80054dc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	212c      	movs	r1, #44	; 0x2c
 80054e4:	fb01 f303 	mul.w	r3, r1, r3
 80054e8:	4413      	add	r3, r2
 80054ea:	333d      	adds	r3, #61	; 0x3d
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d112      	bne.n	8005518 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	212c      	movs	r1, #44	; 0x2c
 80054f8:	fb01 f303 	mul.w	r3, r1, r3
 80054fc:	4413      	add	r3, r2
 80054fe:	333c      	adds	r3, #60	; 0x3c
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d108      	bne.n	8005518 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	212c      	movs	r1, #44	; 0x2c
 800550c:	fb01 f303 	mul.w	r3, r1, r3
 8005510:	4413      	add	r3, r2
 8005512:	333d      	adds	r3, #61	; 0x3d
 8005514:	2201      	movs	r2, #1
 8005516:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	015a      	lsls	r2, r3, #5
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	4413      	add	r3, r2
 8005520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	697a      	ldr	r2, [r7, #20]
 8005528:	0151      	lsls	r1, r2, #5
 800552a:	69ba      	ldr	r2, [r7, #24]
 800552c:	440a      	add	r2, r1
 800552e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005532:	f043 0302 	orr.w	r3, r3, #2
 8005536:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	697a      	ldr	r2, [r7, #20]
 800553e:	b2d2      	uxtb	r2, r2
 8005540:	4611      	mov	r1, r2
 8005542:	4618      	mov	r0, r3
 8005544:	f003 fb5f 	bl	8008c06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	015a      	lsls	r2, r3, #5
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	4413      	add	r3, r2
 8005550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005554:	461a      	mov	r2, r3
 8005556:	2310      	movs	r3, #16
 8005558:	6093      	str	r3, [r2, #8]
}
 800555a:	e21b      	b.n	8005994 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	015a      	lsls	r2, r3, #5
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	4413      	add	r3, r2
 8005564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800556e:	2b80      	cmp	r3, #128	; 0x80
 8005570:	d174      	bne.n	800565c <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d121      	bne.n	80055be <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	212c      	movs	r1, #44	; 0x2c
 8005580:	fb01 f303 	mul.w	r3, r1, r3
 8005584:	4413      	add	r3, r2
 8005586:	3361      	adds	r3, #97	; 0x61
 8005588:	2206      	movs	r2, #6
 800558a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	015a      	lsls	r2, r3, #5
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	4413      	add	r3, r2
 8005594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	0151      	lsls	r1, r2, #5
 800559e:	69ba      	ldr	r2, [r7, #24]
 80055a0:	440a      	add	r2, r1
 80055a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055a6:	f043 0302 	orr.w	r3, r3, #2
 80055aa:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	b2d2      	uxtb	r2, r2
 80055b4:	4611      	mov	r1, r2
 80055b6:	4618      	mov	r0, r3
 80055b8:	f003 fb25 	bl	8008c06 <USB_HC_Halt>
 80055bc:	e044      	b.n	8005648 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	212c      	movs	r1, #44	; 0x2c
 80055c4:	fb01 f303 	mul.w	r3, r1, r3
 80055c8:	4413      	add	r3, r2
 80055ca:	335c      	adds	r3, #92	; 0x5c
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	1c5a      	adds	r2, r3, #1
 80055d0:	6879      	ldr	r1, [r7, #4]
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	202c      	movs	r0, #44	; 0x2c
 80055d6:	fb00 f303 	mul.w	r3, r0, r3
 80055da:	440b      	add	r3, r1
 80055dc:	335c      	adds	r3, #92	; 0x5c
 80055de:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	212c      	movs	r1, #44	; 0x2c
 80055e6:	fb01 f303 	mul.w	r3, r1, r3
 80055ea:	4413      	add	r3, r2
 80055ec:	335c      	adds	r3, #92	; 0x5c
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	d920      	bls.n	8005636 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	212c      	movs	r1, #44	; 0x2c
 80055fa:	fb01 f303 	mul.w	r3, r1, r3
 80055fe:	4413      	add	r3, r2
 8005600:	335c      	adds	r3, #92	; 0x5c
 8005602:	2200      	movs	r2, #0
 8005604:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	212c      	movs	r1, #44	; 0x2c
 800560c:	fb01 f303 	mul.w	r3, r1, r3
 8005610:	4413      	add	r3, r2
 8005612:	3360      	adds	r3, #96	; 0x60
 8005614:	2204      	movs	r2, #4
 8005616:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	b2d9      	uxtb	r1, r3
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	202c      	movs	r0, #44	; 0x2c
 8005622:	fb00 f303 	mul.w	r3, r0, r3
 8005626:	4413      	add	r3, r2
 8005628:	3360      	adds	r3, #96	; 0x60
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	461a      	mov	r2, r3
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f008 fe34 	bl	800e29c <HAL_HCD_HC_NotifyURBChange_Callback>
 8005634:	e008      	b.n	8005648 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	212c      	movs	r1, #44	; 0x2c
 800563c:	fb01 f303 	mul.w	r3, r1, r3
 8005640:	4413      	add	r3, r2
 8005642:	3360      	adds	r3, #96	; 0x60
 8005644:	2202      	movs	r2, #2
 8005646:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	015a      	lsls	r2, r3, #5
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	4413      	add	r3, r2
 8005650:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005654:	461a      	mov	r2, r3
 8005656:	2380      	movs	r3, #128	; 0x80
 8005658:	6093      	str	r3, [r2, #8]
}
 800565a:	e19b      	b.n	8005994 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	015a      	lsls	r2, r3, #5
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	4413      	add	r3, r2
 8005664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800566e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005672:	d134      	bne.n	80056de <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	015a      	lsls	r2, r3, #5
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	4413      	add	r3, r2
 800567c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	697a      	ldr	r2, [r7, #20]
 8005684:	0151      	lsls	r1, r2, #5
 8005686:	69ba      	ldr	r2, [r7, #24]
 8005688:	440a      	add	r2, r1
 800568a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800568e:	f043 0302 	orr.w	r3, r3, #2
 8005692:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	697a      	ldr	r2, [r7, #20]
 800569a:	b2d2      	uxtb	r2, r2
 800569c:	4611      	mov	r1, r2
 800569e:	4618      	mov	r0, r3
 80056a0:	f003 fab1 	bl	8008c06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	015a      	lsls	r2, r3, #5
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	4413      	add	r3, r2
 80056ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056b0:	461a      	mov	r2, r3
 80056b2:	2310      	movs	r3, #16
 80056b4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	015a      	lsls	r2, r3, #5
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	4413      	add	r3, r2
 80056be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056c2:	461a      	mov	r2, r3
 80056c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056c8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	212c      	movs	r1, #44	; 0x2c
 80056d0:	fb01 f303 	mul.w	r3, r1, r3
 80056d4:	4413      	add	r3, r2
 80056d6:	3361      	adds	r3, #97	; 0x61
 80056d8:	2208      	movs	r2, #8
 80056da:	701a      	strb	r2, [r3, #0]
}
 80056dc:	e15a      	b.n	8005994 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	015a      	lsls	r2, r3, #5
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	4413      	add	r3, r2
 80056e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	f003 0302 	and.w	r3, r3, #2
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	f040 814f 	bne.w	8005994 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	015a      	lsls	r2, r3, #5
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	4413      	add	r3, r2
 80056fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	697a      	ldr	r2, [r7, #20]
 8005706:	0151      	lsls	r1, r2, #5
 8005708:	69ba      	ldr	r2, [r7, #24]
 800570a:	440a      	add	r2, r1
 800570c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005710:	f023 0302 	bic.w	r3, r3, #2
 8005714:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	212c      	movs	r1, #44	; 0x2c
 800571c:	fb01 f303 	mul.w	r3, r1, r3
 8005720:	4413      	add	r3, r2
 8005722:	3361      	adds	r3, #97	; 0x61
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	2b01      	cmp	r3, #1
 8005728:	d17d      	bne.n	8005826 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	212c      	movs	r1, #44	; 0x2c
 8005730:	fb01 f303 	mul.w	r3, r1, r3
 8005734:	4413      	add	r3, r2
 8005736:	3360      	adds	r3, #96	; 0x60
 8005738:	2201      	movs	r2, #1
 800573a:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	212c      	movs	r1, #44	; 0x2c
 8005742:	fb01 f303 	mul.w	r3, r1, r3
 8005746:	4413      	add	r3, r2
 8005748:	333f      	adds	r3, #63	; 0x3f
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	2b02      	cmp	r3, #2
 800574e:	d00a      	beq.n	8005766 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	212c      	movs	r1, #44	; 0x2c
 8005756:	fb01 f303 	mul.w	r3, r1, r3
 800575a:	4413      	add	r3, r2
 800575c:	333f      	adds	r3, #63	; 0x3f
 800575e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005760:	2b03      	cmp	r3, #3
 8005762:	f040 8100 	bne.w	8005966 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d113      	bne.n	8005796 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	212c      	movs	r1, #44	; 0x2c
 8005774:	fb01 f303 	mul.w	r3, r1, r3
 8005778:	4413      	add	r3, r2
 800577a:	3355      	adds	r3, #85	; 0x55
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	f083 0301 	eor.w	r3, r3, #1
 8005782:	b2d8      	uxtb	r0, r3
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	212c      	movs	r1, #44	; 0x2c
 800578a:	fb01 f303 	mul.w	r3, r1, r3
 800578e:	4413      	add	r3, r2
 8005790:	3355      	adds	r3, #85	; 0x55
 8005792:	4602      	mov	r2, r0
 8005794:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	2b01      	cmp	r3, #1
 800579c:	f040 80e3 	bne.w	8005966 <HCD_HC_OUT_IRQHandler+0x7cc>
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	212c      	movs	r1, #44	; 0x2c
 80057a6:	fb01 f303 	mul.w	r3, r1, r3
 80057aa:	4413      	add	r3, r2
 80057ac:	334c      	adds	r3, #76	; 0x4c
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	f000 80d8 	beq.w	8005966 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	212c      	movs	r1, #44	; 0x2c
 80057bc:	fb01 f303 	mul.w	r3, r1, r3
 80057c0:	4413      	add	r3, r2
 80057c2:	334c      	adds	r3, #76	; 0x4c
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	6879      	ldr	r1, [r7, #4]
 80057c8:	697a      	ldr	r2, [r7, #20]
 80057ca:	202c      	movs	r0, #44	; 0x2c
 80057cc:	fb00 f202 	mul.w	r2, r0, r2
 80057d0:	440a      	add	r2, r1
 80057d2:	3240      	adds	r2, #64	; 0x40
 80057d4:	8812      	ldrh	r2, [r2, #0]
 80057d6:	4413      	add	r3, r2
 80057d8:	3b01      	subs	r3, #1
 80057da:	6879      	ldr	r1, [r7, #4]
 80057dc:	697a      	ldr	r2, [r7, #20]
 80057de:	202c      	movs	r0, #44	; 0x2c
 80057e0:	fb00 f202 	mul.w	r2, r0, r2
 80057e4:	440a      	add	r2, r1
 80057e6:	3240      	adds	r2, #64	; 0x40
 80057e8:	8812      	ldrh	r2, [r2, #0]
 80057ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80057ee:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f003 0301 	and.w	r3, r3, #1
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f000 80b5 	beq.w	8005966 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	212c      	movs	r1, #44	; 0x2c
 8005802:	fb01 f303 	mul.w	r3, r1, r3
 8005806:	4413      	add	r3, r2
 8005808:	3355      	adds	r3, #85	; 0x55
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	f083 0301 	eor.w	r3, r3, #1
 8005810:	b2d8      	uxtb	r0, r3
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	212c      	movs	r1, #44	; 0x2c
 8005818:	fb01 f303 	mul.w	r3, r1, r3
 800581c:	4413      	add	r3, r2
 800581e:	3355      	adds	r3, #85	; 0x55
 8005820:	4602      	mov	r2, r0
 8005822:	701a      	strb	r2, [r3, #0]
 8005824:	e09f      	b.n	8005966 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	212c      	movs	r1, #44	; 0x2c
 800582c:	fb01 f303 	mul.w	r3, r1, r3
 8005830:	4413      	add	r3, r2
 8005832:	3361      	adds	r3, #97	; 0x61
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	2b03      	cmp	r3, #3
 8005838:	d109      	bne.n	800584e <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	212c      	movs	r1, #44	; 0x2c
 8005840:	fb01 f303 	mul.w	r3, r1, r3
 8005844:	4413      	add	r3, r2
 8005846:	3360      	adds	r3, #96	; 0x60
 8005848:	2202      	movs	r2, #2
 800584a:	701a      	strb	r2, [r3, #0]
 800584c:	e08b      	b.n	8005966 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	212c      	movs	r1, #44	; 0x2c
 8005854:	fb01 f303 	mul.w	r3, r1, r3
 8005858:	4413      	add	r3, r2
 800585a:	3361      	adds	r3, #97	; 0x61
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	2b04      	cmp	r3, #4
 8005860:	d109      	bne.n	8005876 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	212c      	movs	r1, #44	; 0x2c
 8005868:	fb01 f303 	mul.w	r3, r1, r3
 800586c:	4413      	add	r3, r2
 800586e:	3360      	adds	r3, #96	; 0x60
 8005870:	2202      	movs	r2, #2
 8005872:	701a      	strb	r2, [r3, #0]
 8005874:	e077      	b.n	8005966 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	212c      	movs	r1, #44	; 0x2c
 800587c:	fb01 f303 	mul.w	r3, r1, r3
 8005880:	4413      	add	r3, r2
 8005882:	3361      	adds	r3, #97	; 0x61
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	2b05      	cmp	r3, #5
 8005888:	d109      	bne.n	800589e <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	212c      	movs	r1, #44	; 0x2c
 8005890:	fb01 f303 	mul.w	r3, r1, r3
 8005894:	4413      	add	r3, r2
 8005896:	3360      	adds	r3, #96	; 0x60
 8005898:	2205      	movs	r2, #5
 800589a:	701a      	strb	r2, [r3, #0]
 800589c:	e063      	b.n	8005966 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	212c      	movs	r1, #44	; 0x2c
 80058a4:	fb01 f303 	mul.w	r3, r1, r3
 80058a8:	4413      	add	r3, r2
 80058aa:	3361      	adds	r3, #97	; 0x61
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	2b06      	cmp	r3, #6
 80058b0:	d009      	beq.n	80058c6 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	212c      	movs	r1, #44	; 0x2c
 80058b8:	fb01 f303 	mul.w	r3, r1, r3
 80058bc:	4413      	add	r3, r2
 80058be:	3361      	adds	r3, #97	; 0x61
 80058c0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80058c2:	2b08      	cmp	r3, #8
 80058c4:	d14f      	bne.n	8005966 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	212c      	movs	r1, #44	; 0x2c
 80058cc:	fb01 f303 	mul.w	r3, r1, r3
 80058d0:	4413      	add	r3, r2
 80058d2:	335c      	adds	r3, #92	; 0x5c
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	1c5a      	adds	r2, r3, #1
 80058d8:	6879      	ldr	r1, [r7, #4]
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	202c      	movs	r0, #44	; 0x2c
 80058de:	fb00 f303 	mul.w	r3, r0, r3
 80058e2:	440b      	add	r3, r1
 80058e4:	335c      	adds	r3, #92	; 0x5c
 80058e6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	212c      	movs	r1, #44	; 0x2c
 80058ee:	fb01 f303 	mul.w	r3, r1, r3
 80058f2:	4413      	add	r3, r2
 80058f4:	335c      	adds	r3, #92	; 0x5c
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	d912      	bls.n	8005922 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	212c      	movs	r1, #44	; 0x2c
 8005902:	fb01 f303 	mul.w	r3, r1, r3
 8005906:	4413      	add	r3, r2
 8005908:	335c      	adds	r3, #92	; 0x5c
 800590a:	2200      	movs	r2, #0
 800590c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	212c      	movs	r1, #44	; 0x2c
 8005914:	fb01 f303 	mul.w	r3, r1, r3
 8005918:	4413      	add	r3, r2
 800591a:	3360      	adds	r3, #96	; 0x60
 800591c:	2204      	movs	r2, #4
 800591e:	701a      	strb	r2, [r3, #0]
 8005920:	e021      	b.n	8005966 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	212c      	movs	r1, #44	; 0x2c
 8005928:	fb01 f303 	mul.w	r3, r1, r3
 800592c:	4413      	add	r3, r2
 800592e:	3360      	adds	r3, #96	; 0x60
 8005930:	2202      	movs	r2, #2
 8005932:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	015a      	lsls	r2, r3, #5
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	4413      	add	r3, r2
 800593c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800594a:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005952:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	015a      	lsls	r2, r3, #5
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	4413      	add	r3, r2
 800595c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005960:	461a      	mov	r2, r3
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	015a      	lsls	r2, r3, #5
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	4413      	add	r3, r2
 800596e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005972:	461a      	mov	r2, r3
 8005974:	2302      	movs	r3, #2
 8005976:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	b2d9      	uxtb	r1, r3
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	202c      	movs	r0, #44	; 0x2c
 8005982:	fb00 f303 	mul.w	r3, r0, r3
 8005986:	4413      	add	r3, r2
 8005988:	3360      	adds	r3, #96	; 0x60
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	461a      	mov	r2, r3
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f008 fc84 	bl	800e29c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005994:	bf00      	nop
 8005996:	3720      	adds	r7, #32
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b08a      	sub	sp, #40	; 0x28
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ac:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6a1b      	ldr	r3, [r3, #32]
 80059b4:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	f003 030f 	and.w	r3, r3, #15
 80059bc:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	0c5b      	lsrs	r3, r3, #17
 80059c2:	f003 030f 	and.w	r3, r3, #15
 80059c6:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	091b      	lsrs	r3, r3, #4
 80059cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059d0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d004      	beq.n	80059e2 <HCD_RXQLVL_IRQHandler+0x46>
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	2b05      	cmp	r3, #5
 80059dc:	f000 80a9 	beq.w	8005b32 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80059e0:	e0aa      	b.n	8005b38 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	f000 80a6 	beq.w	8005b36 <HCD_RXQLVL_IRQHandler+0x19a>
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	212c      	movs	r1, #44	; 0x2c
 80059f0:	fb01 f303 	mul.w	r3, r1, r3
 80059f4:	4413      	add	r3, r2
 80059f6:	3344      	adds	r3, #68	; 0x44
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	f000 809b 	beq.w	8005b36 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	212c      	movs	r1, #44	; 0x2c
 8005a06:	fb01 f303 	mul.w	r3, r1, r3
 8005a0a:	4413      	add	r3, r2
 8005a0c:	3350      	adds	r3, #80	; 0x50
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	441a      	add	r2, r3
 8005a14:	6879      	ldr	r1, [r7, #4]
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	202c      	movs	r0, #44	; 0x2c
 8005a1a:	fb00 f303 	mul.w	r3, r0, r3
 8005a1e:	440b      	add	r3, r1
 8005a20:	334c      	adds	r3, #76	; 0x4c
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d87a      	bhi.n	8005b1e <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6818      	ldr	r0, [r3, #0]
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	212c      	movs	r1, #44	; 0x2c
 8005a32:	fb01 f303 	mul.w	r3, r1, r3
 8005a36:	4413      	add	r3, r2
 8005a38:	3344      	adds	r3, #68	; 0x44
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	693a      	ldr	r2, [r7, #16]
 8005a3e:	b292      	uxth	r2, r2
 8005a40:	4619      	mov	r1, r3
 8005a42:	f002 fc59 	bl	80082f8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	212c      	movs	r1, #44	; 0x2c
 8005a4c:	fb01 f303 	mul.w	r3, r1, r3
 8005a50:	4413      	add	r3, r2
 8005a52:	3344      	adds	r3, #68	; 0x44
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	441a      	add	r2, r3
 8005a5a:	6879      	ldr	r1, [r7, #4]
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	202c      	movs	r0, #44	; 0x2c
 8005a60:	fb00 f303 	mul.w	r3, r0, r3
 8005a64:	440b      	add	r3, r1
 8005a66:	3344      	adds	r3, #68	; 0x44
 8005a68:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	212c      	movs	r1, #44	; 0x2c
 8005a70:	fb01 f303 	mul.w	r3, r1, r3
 8005a74:	4413      	add	r3, r2
 8005a76:	3350      	adds	r3, #80	; 0x50
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	441a      	add	r2, r3
 8005a7e:	6879      	ldr	r1, [r7, #4]
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	202c      	movs	r0, #44	; 0x2c
 8005a84:	fb00 f303 	mul.w	r3, r0, r3
 8005a88:	440b      	add	r3, r1
 8005a8a:	3350      	adds	r3, #80	; 0x50
 8005a8c:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	015a      	lsls	r2, r3, #5
 8005a92:	6a3b      	ldr	r3, [r7, #32]
 8005a94:	4413      	add	r3, r2
 8005a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a9a:	691b      	ldr	r3, [r3, #16]
 8005a9c:	0cdb      	lsrs	r3, r3, #19
 8005a9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005aa2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	212c      	movs	r1, #44	; 0x2c
 8005aaa:	fb01 f303 	mul.w	r3, r1, r3
 8005aae:	4413      	add	r3, r2
 8005ab0:	3340      	adds	r3, #64	; 0x40
 8005ab2:	881b      	ldrh	r3, [r3, #0]
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d13c      	bne.n	8005b36 <HCD_RXQLVL_IRQHandler+0x19a>
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d039      	beq.n	8005b36 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	015a      	lsls	r2, r3, #5
 8005ac6:	6a3b      	ldr	r3, [r7, #32]
 8005ac8:	4413      	add	r3, r2
 8005aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ad8:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ae0:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	015a      	lsls	r2, r3, #5
 8005ae6:	6a3b      	ldr	r3, [r7, #32]
 8005ae8:	4413      	add	r3, r2
 8005aea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aee:	461a      	mov	r2, r3
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	212c      	movs	r1, #44	; 0x2c
 8005afa:	fb01 f303 	mul.w	r3, r1, r3
 8005afe:	4413      	add	r3, r2
 8005b00:	3354      	adds	r3, #84	; 0x54
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	f083 0301 	eor.w	r3, r3, #1
 8005b08:	b2d8      	uxtb	r0, r3
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	212c      	movs	r1, #44	; 0x2c
 8005b10:	fb01 f303 	mul.w	r3, r1, r3
 8005b14:	4413      	add	r3, r2
 8005b16:	3354      	adds	r3, #84	; 0x54
 8005b18:	4602      	mov	r2, r0
 8005b1a:	701a      	strb	r2, [r3, #0]
      break;
 8005b1c:	e00b      	b.n	8005b36 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	212c      	movs	r1, #44	; 0x2c
 8005b24:	fb01 f303 	mul.w	r3, r1, r3
 8005b28:	4413      	add	r3, r2
 8005b2a:	3360      	adds	r3, #96	; 0x60
 8005b2c:	2204      	movs	r2, #4
 8005b2e:	701a      	strb	r2, [r3, #0]
      break;
 8005b30:	e001      	b.n	8005b36 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8005b32:	bf00      	nop
 8005b34:	e000      	b.n	8005b38 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8005b36:	bf00      	nop
  }
}
 8005b38:	bf00      	nop
 8005b3a:	3728      	adds	r7, #40	; 0x28
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005b6c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f003 0302 	and.w	r3, r3, #2
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d10b      	bne.n	8005b90 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d102      	bne.n	8005b88 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f008 fb6e 	bl	800e264 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	f043 0302 	orr.w	r3, r3, #2
 8005b8e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f003 0308 	and.w	r3, r3, #8
 8005b96:	2b08      	cmp	r3, #8
 8005b98:	d132      	bne.n	8005c00 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	f043 0308 	orr.w	r3, r3, #8
 8005ba0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f003 0304 	and.w	r3, r3, #4
 8005ba8:	2b04      	cmp	r3, #4
 8005baa:	d126      	bne.n	8005bfa <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	699b      	ldr	r3, [r3, #24]
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d113      	bne.n	8005bdc <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005bba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005bbe:	d106      	bne.n	8005bce <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2102      	movs	r1, #2
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f002 fcf6 	bl	80085b8 <USB_InitFSLSPClkSel>
 8005bcc:	e011      	b.n	8005bf2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2101      	movs	r1, #1
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f002 fcef 	bl	80085b8 <USB_InitFSLSPClkSel>
 8005bda:	e00a      	b.n	8005bf2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d106      	bne.n	8005bf2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bea:	461a      	mov	r2, r3
 8005bec:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005bf0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f008 fb64 	bl	800e2c0 <HAL_HCD_PortEnabled_Callback>
 8005bf8:	e002      	b.n	8005c00 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f008 fb6e 	bl	800e2dc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f003 0320 	and.w	r3, r3, #32
 8005c06:	2b20      	cmp	r3, #32
 8005c08:	d103      	bne.n	8005c12 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	f043 0320 	orr.w	r3, r3, #32
 8005c10:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005c18:	461a      	mov	r2, r3
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	6013      	str	r3, [r2, #0]
}
 8005c1e:	bf00      	nop
 8005c20:	3718      	adds	r7, #24
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
	...

08005c28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d101      	bne.n	8005c3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e12b      	b.n	8005e92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d106      	bne.n	8005c54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f7fb ffaa 	bl	8001ba8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2224      	movs	r2, #36	; 0x24
 8005c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f022 0201 	bic.w	r2, r2, #1
 8005c6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005c8c:	f001 f9fc 	bl	8007088 <HAL_RCC_GetPCLK1Freq>
 8005c90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	4a81      	ldr	r2, [pc, #516]	; (8005e9c <HAL_I2C_Init+0x274>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d807      	bhi.n	8005cac <HAL_I2C_Init+0x84>
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	4a80      	ldr	r2, [pc, #512]	; (8005ea0 <HAL_I2C_Init+0x278>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	bf94      	ite	ls
 8005ca4:	2301      	movls	r3, #1
 8005ca6:	2300      	movhi	r3, #0
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	e006      	b.n	8005cba <HAL_I2C_Init+0x92>
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	4a7d      	ldr	r2, [pc, #500]	; (8005ea4 <HAL_I2C_Init+0x27c>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	bf94      	ite	ls
 8005cb4:	2301      	movls	r3, #1
 8005cb6:	2300      	movhi	r3, #0
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d001      	beq.n	8005cc2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e0e7      	b.n	8005e92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	4a78      	ldr	r2, [pc, #480]	; (8005ea8 <HAL_I2C_Init+0x280>)
 8005cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8005cca:	0c9b      	lsrs	r3, r3, #18
 8005ccc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68ba      	ldr	r2, [r7, #8]
 8005cde:	430a      	orrs	r2, r1
 8005ce0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	6a1b      	ldr	r3, [r3, #32]
 8005ce8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	4a6a      	ldr	r2, [pc, #424]	; (8005e9c <HAL_I2C_Init+0x274>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d802      	bhi.n	8005cfc <HAL_I2C_Init+0xd4>
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	e009      	b.n	8005d10 <HAL_I2C_Init+0xe8>
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005d02:	fb02 f303 	mul.w	r3, r2, r3
 8005d06:	4a69      	ldr	r2, [pc, #420]	; (8005eac <HAL_I2C_Init+0x284>)
 8005d08:	fba2 2303 	umull	r2, r3, r2, r3
 8005d0c:	099b      	lsrs	r3, r3, #6
 8005d0e:	3301      	adds	r3, #1
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	6812      	ldr	r2, [r2, #0]
 8005d14:	430b      	orrs	r3, r1
 8005d16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	69db      	ldr	r3, [r3, #28]
 8005d1e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005d22:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	495c      	ldr	r1, [pc, #368]	; (8005e9c <HAL_I2C_Init+0x274>)
 8005d2c:	428b      	cmp	r3, r1
 8005d2e:	d819      	bhi.n	8005d64 <HAL_I2C_Init+0x13c>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	1e59      	subs	r1, r3, #1
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	005b      	lsls	r3, r3, #1
 8005d3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d3e:	1c59      	adds	r1, r3, #1
 8005d40:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005d44:	400b      	ands	r3, r1
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00a      	beq.n	8005d60 <HAL_I2C_Init+0x138>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	1e59      	subs	r1, r3, #1
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	005b      	lsls	r3, r3, #1
 8005d54:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d58:	3301      	adds	r3, #1
 8005d5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d5e:	e051      	b.n	8005e04 <HAL_I2C_Init+0x1dc>
 8005d60:	2304      	movs	r3, #4
 8005d62:	e04f      	b.n	8005e04 <HAL_I2C_Init+0x1dc>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d111      	bne.n	8005d90 <HAL_I2C_Init+0x168>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	1e58      	subs	r0, r3, #1
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6859      	ldr	r1, [r3, #4]
 8005d74:	460b      	mov	r3, r1
 8005d76:	005b      	lsls	r3, r3, #1
 8005d78:	440b      	add	r3, r1
 8005d7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d7e:	3301      	adds	r3, #1
 8005d80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	bf0c      	ite	eq
 8005d88:	2301      	moveq	r3, #1
 8005d8a:	2300      	movne	r3, #0
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	e012      	b.n	8005db6 <HAL_I2C_Init+0x18e>
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	1e58      	subs	r0, r3, #1
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6859      	ldr	r1, [r3, #4]
 8005d98:	460b      	mov	r3, r1
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	440b      	add	r3, r1
 8005d9e:	0099      	lsls	r1, r3, #2
 8005da0:	440b      	add	r3, r1
 8005da2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005da6:	3301      	adds	r3, #1
 8005da8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	bf0c      	ite	eq
 8005db0:	2301      	moveq	r3, #1
 8005db2:	2300      	movne	r3, #0
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d001      	beq.n	8005dbe <HAL_I2C_Init+0x196>
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e022      	b.n	8005e04 <HAL_I2C_Init+0x1dc>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d10e      	bne.n	8005de4 <HAL_I2C_Init+0x1bc>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	1e58      	subs	r0, r3, #1
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6859      	ldr	r1, [r3, #4]
 8005dce:	460b      	mov	r3, r1
 8005dd0:	005b      	lsls	r3, r3, #1
 8005dd2:	440b      	add	r3, r1
 8005dd4:	fbb0 f3f3 	udiv	r3, r0, r3
 8005dd8:	3301      	adds	r3, #1
 8005dda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005de2:	e00f      	b.n	8005e04 <HAL_I2C_Init+0x1dc>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	1e58      	subs	r0, r3, #1
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6859      	ldr	r1, [r3, #4]
 8005dec:	460b      	mov	r3, r1
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	440b      	add	r3, r1
 8005df2:	0099      	lsls	r1, r3, #2
 8005df4:	440b      	add	r3, r1
 8005df6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e04:	6879      	ldr	r1, [r7, #4]
 8005e06:	6809      	ldr	r1, [r1, #0]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	69da      	ldr	r2, [r3, #28]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a1b      	ldr	r3, [r3, #32]
 8005e1e:	431a      	orrs	r2, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	430a      	orrs	r2, r1
 8005e26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005e32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	6911      	ldr	r1, [r2, #16]
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	68d2      	ldr	r2, [r2, #12]
 8005e3e:	4311      	orrs	r1, r2
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	6812      	ldr	r2, [r2, #0]
 8005e44:	430b      	orrs	r3, r1
 8005e46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	695a      	ldr	r2, [r3, #20]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	699b      	ldr	r3, [r3, #24]
 8005e5a:	431a      	orrs	r2, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	430a      	orrs	r2, r1
 8005e62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f042 0201 	orr.w	r2, r2, #1
 8005e72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2220      	movs	r2, #32
 8005e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	000186a0 	.word	0x000186a0
 8005ea0:	001e847f 	.word	0x001e847f
 8005ea4:	003d08ff 	.word	0x003d08ff
 8005ea8:	431bde83 	.word	0x431bde83
 8005eac:	10624dd3 	.word	0x10624dd3

08005eb0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b088      	sub	sp, #32
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d101      	bne.n	8005ec2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e128      	b.n	8006114 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d109      	bne.n	8005ee2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a90      	ldr	r2, [pc, #576]	; (800611c <HAL_I2S_Init+0x26c>)
 8005eda:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f7fb feab 	bl	8001c38 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2202      	movs	r2, #2
 8005ee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	69db      	ldr	r3, [r3, #28]
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	6812      	ldr	r2, [r2, #0]
 8005ef4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005ef8:	f023 030f 	bic.w	r3, r3, #15
 8005efc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2202      	movs	r2, #2
 8005f04:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	695b      	ldr	r3, [r3, #20]
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	d060      	beq.n	8005fd0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d102      	bne.n	8005f1c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005f16:	2310      	movs	r3, #16
 8005f18:	617b      	str	r3, [r7, #20]
 8005f1a:	e001      	b.n	8005f20 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005f1c:	2320      	movs	r3, #32
 8005f1e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	2b20      	cmp	r3, #32
 8005f26:	d802      	bhi.n	8005f2e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	005b      	lsls	r3, r3, #1
 8005f2c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005f2e:	2001      	movs	r0, #1
 8005f30:	f001 f9e6 	bl	8007300 <HAL_RCCEx_GetPeriphCLKFreq>
 8005f34:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f3e:	d125      	bne.n	8005f8c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d010      	beq.n	8005f6a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f52:	4613      	mov	r3, r2
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	4413      	add	r3, r2
 8005f58:	005b      	lsls	r3, r3, #1
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	695b      	ldr	r3, [r3, #20]
 8005f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f64:	3305      	adds	r3, #5
 8005f66:	613b      	str	r3, [r7, #16]
 8005f68:	e01f      	b.n	8005faa <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	00db      	lsls	r3, r3, #3
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f74:	4613      	mov	r3, r2
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	4413      	add	r3, r2
 8005f7a:	005b      	lsls	r3, r3, #1
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	695b      	ldr	r3, [r3, #20]
 8005f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f86:	3305      	adds	r3, #5
 8005f88:	613b      	str	r3, [r7, #16]
 8005f8a:	e00e      	b.n	8005faa <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f94:	4613      	mov	r3, r2
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	4413      	add	r3, r2
 8005f9a:	005b      	lsls	r3, r3, #1
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	695b      	ldr	r3, [r3, #20]
 8005fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fa6:	3305      	adds	r3, #5
 8005fa8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	4a5c      	ldr	r2, [pc, #368]	; (8006120 <HAL_I2S_Init+0x270>)
 8005fae:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb2:	08db      	lsrs	r3, r3, #3
 8005fb4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	f003 0301 	and.w	r3, r3, #1
 8005fbc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005fbe:	693a      	ldr	r2, [r7, #16]
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	1ad3      	subs	r3, r2, r3
 8005fc4:	085b      	lsrs	r3, r3, #1
 8005fc6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	021b      	lsls	r3, r3, #8
 8005fcc:	61bb      	str	r3, [r7, #24]
 8005fce:	e003      	b.n	8005fd8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005fd0:	2302      	movs	r3, #2
 8005fd2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d902      	bls.n	8005fe4 <HAL_I2S_Init+0x134>
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	2bff      	cmp	r3, #255	; 0xff
 8005fe2:	d907      	bls.n	8005ff4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fe8:	f043 0210 	orr.w	r2, r3, #16
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e08f      	b.n	8006114 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	691a      	ldr	r2, [r3, #16]
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	ea42 0103 	orr.w	r1, r2, r3
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	69fa      	ldr	r2, [r7, #28]
 8006004:	430a      	orrs	r2, r1
 8006006:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	69db      	ldr	r3, [r3, #28]
 800600e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006012:	f023 030f 	bic.w	r3, r3, #15
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	6851      	ldr	r1, [r2, #4]
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	6892      	ldr	r2, [r2, #8]
 800601e:	4311      	orrs	r1, r2
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	68d2      	ldr	r2, [r2, #12]
 8006024:	4311      	orrs	r1, r2
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	6992      	ldr	r2, [r2, #24]
 800602a:	430a      	orrs	r2, r1
 800602c:	431a      	orrs	r2, r3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006036:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a1b      	ldr	r3, [r3, #32]
 800603c:	2b01      	cmp	r3, #1
 800603e:	d161      	bne.n	8006104 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4a38      	ldr	r2, [pc, #224]	; (8006124 <HAL_I2S_Init+0x274>)
 8006044:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a37      	ldr	r2, [pc, #220]	; (8006128 <HAL_I2S_Init+0x278>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d101      	bne.n	8006054 <HAL_I2S_Init+0x1a4>
 8006050:	4b36      	ldr	r3, [pc, #216]	; (800612c <HAL_I2S_Init+0x27c>)
 8006052:	e001      	b.n	8006058 <HAL_I2S_Init+0x1a8>
 8006054:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006058:	69db      	ldr	r3, [r3, #28]
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	6812      	ldr	r2, [r2, #0]
 800605e:	4932      	ldr	r1, [pc, #200]	; (8006128 <HAL_I2S_Init+0x278>)
 8006060:	428a      	cmp	r2, r1
 8006062:	d101      	bne.n	8006068 <HAL_I2S_Init+0x1b8>
 8006064:	4a31      	ldr	r2, [pc, #196]	; (800612c <HAL_I2S_Init+0x27c>)
 8006066:	e001      	b.n	800606c <HAL_I2S_Init+0x1bc>
 8006068:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800606c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006070:	f023 030f 	bic.w	r3, r3, #15
 8006074:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a2b      	ldr	r2, [pc, #172]	; (8006128 <HAL_I2S_Init+0x278>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d101      	bne.n	8006084 <HAL_I2S_Init+0x1d4>
 8006080:	4b2a      	ldr	r3, [pc, #168]	; (800612c <HAL_I2S_Init+0x27c>)
 8006082:	e001      	b.n	8006088 <HAL_I2S_Init+0x1d8>
 8006084:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006088:	2202      	movs	r2, #2
 800608a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a25      	ldr	r2, [pc, #148]	; (8006128 <HAL_I2S_Init+0x278>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d101      	bne.n	800609a <HAL_I2S_Init+0x1ea>
 8006096:	4b25      	ldr	r3, [pc, #148]	; (800612c <HAL_I2S_Init+0x27c>)
 8006098:	e001      	b.n	800609e <HAL_I2S_Init+0x1ee>
 800609a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800609e:	69db      	ldr	r3, [r3, #28]
 80060a0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060aa:	d003      	beq.n	80060b4 <HAL_I2S_Init+0x204>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d103      	bne.n	80060bc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80060b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80060b8:	613b      	str	r3, [r7, #16]
 80060ba:	e001      	b.n	80060c0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80060bc:	2300      	movs	r3, #0
 80060be:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80060ca:	4313      	orrs	r3, r2
 80060cc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80060d4:	4313      	orrs	r3, r2
 80060d6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	699b      	ldr	r3, [r3, #24]
 80060dc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80060de:	4313      	orrs	r3, r2
 80060e0:	b29a      	uxth	r2, r3
 80060e2:	897b      	ldrh	r3, [r7, #10]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80060ec:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a0d      	ldr	r2, [pc, #52]	; (8006128 <HAL_I2S_Init+0x278>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d101      	bne.n	80060fc <HAL_I2S_Init+0x24c>
 80060f8:	4b0c      	ldr	r3, [pc, #48]	; (800612c <HAL_I2S_Init+0x27c>)
 80060fa:	e001      	b.n	8006100 <HAL_I2S_Init+0x250>
 80060fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006100:	897a      	ldrh	r2, [r7, #10]
 8006102:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2201      	movs	r2, #1
 800610e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	3720      	adds	r7, #32
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}
 800611c:	08006227 	.word	0x08006227
 8006120:	cccccccd 	.word	0xcccccccd
 8006124:	0800633d 	.word	0x0800633d
 8006128:	40003800 	.word	0x40003800
 800612c:	40003400 	.word	0x40003400

08006130 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800614c:	bf00      	nop
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006160:	bf00      	nop
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006178:	881a      	ldrh	r2, [r3, #0]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006184:	1c9a      	adds	r2, r3, #2
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800618e:	b29b      	uxth	r3, r3
 8006190:	3b01      	subs	r3, #1
 8006192:	b29a      	uxth	r2, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800619c:	b29b      	uxth	r3, r3
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d10e      	bne.n	80061c0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	685a      	ldr	r2, [r3, #4]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80061b0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f7ff ffb8 	bl	8006130 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80061c0:	bf00      	nop
 80061c2:	3708      	adds	r7, #8
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}

080061c8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68da      	ldr	r2, [r3, #12]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061da:	b292      	uxth	r2, r2
 80061dc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e2:	1c9a      	adds	r2, r3, #2
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	3b01      	subs	r3, #1
 80061f0:	b29a      	uxth	r2, r3
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d10e      	bne.n	800621e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	685a      	ldr	r2, [r3, #4]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800620e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f7ff ff93 	bl	8006144 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800621e:	bf00      	nop
 8006220:	3708      	adds	r7, #8
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006226:	b580      	push	{r7, lr}
 8006228:	b086      	sub	sp, #24
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800623c:	b2db      	uxtb	r3, r3
 800623e:	2b04      	cmp	r3, #4
 8006240:	d13a      	bne.n	80062b8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	f003 0301 	and.w	r3, r3, #1
 8006248:	2b01      	cmp	r3, #1
 800624a:	d109      	bne.n	8006260 <I2S_IRQHandler+0x3a>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006256:	2b40      	cmp	r3, #64	; 0x40
 8006258:	d102      	bne.n	8006260 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f7ff ffb4 	bl	80061c8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006266:	2b40      	cmp	r3, #64	; 0x40
 8006268:	d126      	bne.n	80062b8 <I2S_IRQHandler+0x92>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	f003 0320 	and.w	r3, r3, #32
 8006274:	2b20      	cmp	r3, #32
 8006276:	d11f      	bne.n	80062b8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	685a      	ldr	r2, [r3, #4]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006286:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006288:	2300      	movs	r3, #0
 800628a:	613b      	str	r3, [r7, #16]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	613b      	str	r3, [r7, #16]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	613b      	str	r3, [r7, #16]
 800629c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2201      	movs	r2, #1
 80062a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062aa:	f043 0202 	orr.w	r2, r3, #2
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f7ff ff50 	bl	8006158 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	2b03      	cmp	r3, #3
 80062c2:	d136      	bne.n	8006332 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	f003 0302 	and.w	r3, r3, #2
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	d109      	bne.n	80062e2 <I2S_IRQHandler+0xbc>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062d8:	2b80      	cmp	r3, #128	; 0x80
 80062da:	d102      	bne.n	80062e2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f7ff ff45 	bl	800616c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	f003 0308 	and.w	r3, r3, #8
 80062e8:	2b08      	cmp	r3, #8
 80062ea:	d122      	bne.n	8006332 <I2S_IRQHandler+0x10c>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	f003 0320 	and.w	r3, r3, #32
 80062f6:	2b20      	cmp	r3, #32
 80062f8:	d11b      	bne.n	8006332 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	685a      	ldr	r2, [r3, #4]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006308:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800630a:	2300      	movs	r3, #0
 800630c:	60fb      	str	r3, [r7, #12]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	60fb      	str	r3, [r7, #12]
 8006316:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006324:	f043 0204 	orr.w	r2, r3, #4
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f7ff ff13 	bl	8006158 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006332:	bf00      	nop
 8006334:	3718      	adds	r7, #24
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
	...

0800633c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b088      	sub	sp, #32
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4aa2      	ldr	r2, [pc, #648]	; (80065dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d101      	bne.n	800635a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006356:	4ba2      	ldr	r3, [pc, #648]	; (80065e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006358:	e001      	b.n	800635e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800635a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a9b      	ldr	r2, [pc, #620]	; (80065dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d101      	bne.n	8006378 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006374:	4b9a      	ldr	r3, [pc, #616]	; (80065e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006376:	e001      	b.n	800637c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006378:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006388:	d004      	beq.n	8006394 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	f040 8099 	bne.w	80064c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	f003 0302 	and.w	r3, r3, #2
 800639a:	2b02      	cmp	r3, #2
 800639c:	d107      	bne.n	80063ae <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d002      	beq.n	80063ae <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 f925 	bl	80065f8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	f003 0301 	and.w	r3, r3, #1
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d107      	bne.n	80063c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d002      	beq.n	80063c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 f9c8 	bl	8006758 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ce:	2b40      	cmp	r3, #64	; 0x40
 80063d0:	d13a      	bne.n	8006448 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	f003 0320 	and.w	r3, r3, #32
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d035      	beq.n	8006448 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a7e      	ldr	r2, [pc, #504]	; (80065dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d101      	bne.n	80063ea <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80063e6:	4b7e      	ldr	r3, [pc, #504]	; (80065e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80063e8:	e001      	b.n	80063ee <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80063ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80063ee:	685a      	ldr	r2, [r3, #4]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4979      	ldr	r1, [pc, #484]	; (80065dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80063f6:	428b      	cmp	r3, r1
 80063f8:	d101      	bne.n	80063fe <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80063fa:	4b79      	ldr	r3, [pc, #484]	; (80065e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80063fc:	e001      	b.n	8006402 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80063fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006402:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006406:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	685a      	ldr	r2, [r3, #4]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006416:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006418:	2300      	movs	r3, #0
 800641a:	60fb      	str	r3, [r7, #12]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	60fb      	str	r3, [r7, #12]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	60fb      	str	r3, [r7, #12]
 800642c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2201      	movs	r2, #1
 8006432:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800643a:	f043 0202 	orr.w	r2, r3, #2
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f7ff fe88 	bl	8006158 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	f003 0308 	and.w	r3, r3, #8
 800644e:	2b08      	cmp	r3, #8
 8006450:	f040 80be 	bne.w	80065d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	f003 0320 	and.w	r3, r3, #32
 800645a:	2b00      	cmp	r3, #0
 800645c:	f000 80b8 	beq.w	80065d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	685a      	ldr	r2, [r3, #4]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800646e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a59      	ldr	r2, [pc, #356]	; (80065dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d101      	bne.n	800647e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800647a:	4b59      	ldr	r3, [pc, #356]	; (80065e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800647c:	e001      	b.n	8006482 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800647e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006482:	685a      	ldr	r2, [r3, #4]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4954      	ldr	r1, [pc, #336]	; (80065dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800648a:	428b      	cmp	r3, r1
 800648c:	d101      	bne.n	8006492 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800648e:	4b54      	ldr	r3, [pc, #336]	; (80065e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006490:	e001      	b.n	8006496 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006492:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006496:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800649a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800649c:	2300      	movs	r3, #0
 800649e:	60bb      	str	r3, [r7, #8]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	60bb      	str	r3, [r7, #8]
 80064a8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2201      	movs	r2, #1
 80064ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064b6:	f043 0204 	orr.w	r2, r3, #4
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f7ff fe4a 	bl	8006158 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80064c4:	e084      	b.n	80065d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	f003 0302 	and.w	r3, r3, #2
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	d107      	bne.n	80064e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d002      	beq.n	80064e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 f8be 	bl	800665c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	f003 0301 	and.w	r3, r3, #1
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d107      	bne.n	80064fa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d002      	beq.n	80064fa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 f8fd 	bl	80066f4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006500:	2b40      	cmp	r3, #64	; 0x40
 8006502:	d12f      	bne.n	8006564 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	f003 0320 	and.w	r3, r3, #32
 800650a:	2b00      	cmp	r3, #0
 800650c:	d02a      	beq.n	8006564 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	685a      	ldr	r2, [r3, #4]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800651c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a2e      	ldr	r2, [pc, #184]	; (80065dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d101      	bne.n	800652c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006528:	4b2d      	ldr	r3, [pc, #180]	; (80065e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800652a:	e001      	b.n	8006530 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800652c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006530:	685a      	ldr	r2, [r3, #4]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4929      	ldr	r1, [pc, #164]	; (80065dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006538:	428b      	cmp	r3, r1
 800653a:	d101      	bne.n	8006540 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800653c:	4b28      	ldr	r3, [pc, #160]	; (80065e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800653e:	e001      	b.n	8006544 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006540:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006544:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006548:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2201      	movs	r2, #1
 800654e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006556:	f043 0202 	orr.w	r2, r3, #2
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f7ff fdfa 	bl	8006158 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	f003 0308 	and.w	r3, r3, #8
 800656a:	2b08      	cmp	r3, #8
 800656c:	d131      	bne.n	80065d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	f003 0320 	and.w	r3, r3, #32
 8006574:	2b00      	cmp	r3, #0
 8006576:	d02c      	beq.n	80065d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a17      	ldr	r2, [pc, #92]	; (80065dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d101      	bne.n	8006586 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006582:	4b17      	ldr	r3, [pc, #92]	; (80065e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006584:	e001      	b.n	800658a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006586:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800658a:	685a      	ldr	r2, [r3, #4]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4912      	ldr	r1, [pc, #72]	; (80065dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006592:	428b      	cmp	r3, r1
 8006594:	d101      	bne.n	800659a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8006596:	4b12      	ldr	r3, [pc, #72]	; (80065e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006598:	e001      	b.n	800659e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800659a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800659e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80065a2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	685a      	ldr	r2, [r3, #4]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80065b2:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2201      	movs	r2, #1
 80065b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065c0:	f043 0204 	orr.w	r2, r3, #4
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f7ff fdc5 	bl	8006158 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80065ce:	e000      	b.n	80065d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80065d0:	bf00      	nop
}
 80065d2:	bf00      	nop
 80065d4:	3720      	adds	r7, #32
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	40003800 	.word	0x40003800
 80065e0:	40003400 	.word	0x40003400

080065e4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80065ec:	bf00      	nop
 80065ee:	370c      	adds	r7, #12
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b082      	sub	sp, #8
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006604:	1c99      	adds	r1, r3, #2
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	6251      	str	r1, [r2, #36]	; 0x24
 800660a:	881a      	ldrh	r2, [r3, #0]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006616:	b29b      	uxth	r3, r3
 8006618:	3b01      	subs	r3, #1
 800661a:	b29a      	uxth	r2, r3
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006624:	b29b      	uxth	r3, r3
 8006626:	2b00      	cmp	r3, #0
 8006628:	d113      	bne.n	8006652 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	685a      	ldr	r2, [r3, #4]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006638:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800663e:	b29b      	uxth	r3, r3
 8006640:	2b00      	cmp	r3, #0
 8006642:	d106      	bne.n	8006652 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f7ff ffc9 	bl	80065e4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006652:	bf00      	nop
 8006654:	3708      	adds	r7, #8
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
	...

0800665c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b082      	sub	sp, #8
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006668:	1c99      	adds	r1, r3, #2
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	6251      	str	r1, [r2, #36]	; 0x24
 800666e:	8819      	ldrh	r1, [r3, #0]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a1d      	ldr	r2, [pc, #116]	; (80066ec <I2SEx_TxISR_I2SExt+0x90>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d101      	bne.n	800667e <I2SEx_TxISR_I2SExt+0x22>
 800667a:	4b1d      	ldr	r3, [pc, #116]	; (80066f0 <I2SEx_TxISR_I2SExt+0x94>)
 800667c:	e001      	b.n	8006682 <I2SEx_TxISR_I2SExt+0x26>
 800667e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006682:	460a      	mov	r2, r1
 8006684:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800668a:	b29b      	uxth	r3, r3
 800668c:	3b01      	subs	r3, #1
 800668e:	b29a      	uxth	r2, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006698:	b29b      	uxth	r3, r3
 800669a:	2b00      	cmp	r3, #0
 800669c:	d121      	bne.n	80066e2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a12      	ldr	r2, [pc, #72]	; (80066ec <I2SEx_TxISR_I2SExt+0x90>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d101      	bne.n	80066ac <I2SEx_TxISR_I2SExt+0x50>
 80066a8:	4b11      	ldr	r3, [pc, #68]	; (80066f0 <I2SEx_TxISR_I2SExt+0x94>)
 80066aa:	e001      	b.n	80066b0 <I2SEx_TxISR_I2SExt+0x54>
 80066ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066b0:	685a      	ldr	r2, [r3, #4]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	490d      	ldr	r1, [pc, #52]	; (80066ec <I2SEx_TxISR_I2SExt+0x90>)
 80066b8:	428b      	cmp	r3, r1
 80066ba:	d101      	bne.n	80066c0 <I2SEx_TxISR_I2SExt+0x64>
 80066bc:	4b0c      	ldr	r3, [pc, #48]	; (80066f0 <I2SEx_TxISR_I2SExt+0x94>)
 80066be:	e001      	b.n	80066c4 <I2SEx_TxISR_I2SExt+0x68>
 80066c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80066c8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d106      	bne.n	80066e2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f7ff ff81 	bl	80065e4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80066e2:	bf00      	nop
 80066e4:	3708      	adds	r7, #8
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	40003800 	.word	0x40003800
 80066f0:	40003400 	.word	0x40003400

080066f4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b082      	sub	sp, #8
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68d8      	ldr	r0, [r3, #12]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006706:	1c99      	adds	r1, r3, #2
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800670c:	b282      	uxth	r2, r0
 800670e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006714:	b29b      	uxth	r3, r3
 8006716:	3b01      	subs	r3, #1
 8006718:	b29a      	uxth	r2, r3
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006722:	b29b      	uxth	r3, r3
 8006724:	2b00      	cmp	r3, #0
 8006726:	d113      	bne.n	8006750 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	685a      	ldr	r2, [r3, #4]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006736:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800673c:	b29b      	uxth	r3, r3
 800673e:	2b00      	cmp	r3, #0
 8006740:	d106      	bne.n	8006750 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2201      	movs	r2, #1
 8006746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f7ff ff4a 	bl	80065e4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006750:	bf00      	nop
 8006752:	3708      	adds	r7, #8
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a20      	ldr	r2, [pc, #128]	; (80067e8 <I2SEx_RxISR_I2SExt+0x90>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d101      	bne.n	800676e <I2SEx_RxISR_I2SExt+0x16>
 800676a:	4b20      	ldr	r3, [pc, #128]	; (80067ec <I2SEx_RxISR_I2SExt+0x94>)
 800676c:	e001      	b.n	8006772 <I2SEx_RxISR_I2SExt+0x1a>
 800676e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006772:	68d8      	ldr	r0, [r3, #12]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006778:	1c99      	adds	r1, r3, #2
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800677e:	b282      	uxth	r2, r0
 8006780:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006786:	b29b      	uxth	r3, r3
 8006788:	3b01      	subs	r3, #1
 800678a:	b29a      	uxth	r2, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006794:	b29b      	uxth	r3, r3
 8006796:	2b00      	cmp	r3, #0
 8006798:	d121      	bne.n	80067de <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a12      	ldr	r2, [pc, #72]	; (80067e8 <I2SEx_RxISR_I2SExt+0x90>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d101      	bne.n	80067a8 <I2SEx_RxISR_I2SExt+0x50>
 80067a4:	4b11      	ldr	r3, [pc, #68]	; (80067ec <I2SEx_RxISR_I2SExt+0x94>)
 80067a6:	e001      	b.n	80067ac <I2SEx_RxISR_I2SExt+0x54>
 80067a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067ac:	685a      	ldr	r2, [r3, #4]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	490d      	ldr	r1, [pc, #52]	; (80067e8 <I2SEx_RxISR_I2SExt+0x90>)
 80067b4:	428b      	cmp	r3, r1
 80067b6:	d101      	bne.n	80067bc <I2SEx_RxISR_I2SExt+0x64>
 80067b8:	4b0c      	ldr	r3, [pc, #48]	; (80067ec <I2SEx_RxISR_I2SExt+0x94>)
 80067ba:	e001      	b.n	80067c0 <I2SEx_RxISR_I2SExt+0x68>
 80067bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067c0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80067c4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d106      	bne.n	80067de <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f7ff ff03 	bl	80065e4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80067de:	bf00      	nop
 80067e0:	3708      	adds	r7, #8
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	40003800 	.word	0x40003800
 80067ec:	40003400 	.word	0x40003400

080067f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b086      	sub	sp, #24
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d101      	bne.n	8006802 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	e264      	b.n	8006ccc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 0301 	and.w	r3, r3, #1
 800680a:	2b00      	cmp	r3, #0
 800680c:	d075      	beq.n	80068fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800680e:	4ba3      	ldr	r3, [pc, #652]	; (8006a9c <HAL_RCC_OscConfig+0x2ac>)
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	f003 030c 	and.w	r3, r3, #12
 8006816:	2b04      	cmp	r3, #4
 8006818:	d00c      	beq.n	8006834 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800681a:	4ba0      	ldr	r3, [pc, #640]	; (8006a9c <HAL_RCC_OscConfig+0x2ac>)
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006822:	2b08      	cmp	r3, #8
 8006824:	d112      	bne.n	800684c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006826:	4b9d      	ldr	r3, [pc, #628]	; (8006a9c <HAL_RCC_OscConfig+0x2ac>)
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800682e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006832:	d10b      	bne.n	800684c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006834:	4b99      	ldr	r3, [pc, #612]	; (8006a9c <HAL_RCC_OscConfig+0x2ac>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800683c:	2b00      	cmp	r3, #0
 800683e:	d05b      	beq.n	80068f8 <HAL_RCC_OscConfig+0x108>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d157      	bne.n	80068f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	e23f      	b.n	8006ccc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006854:	d106      	bne.n	8006864 <HAL_RCC_OscConfig+0x74>
 8006856:	4b91      	ldr	r3, [pc, #580]	; (8006a9c <HAL_RCC_OscConfig+0x2ac>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a90      	ldr	r2, [pc, #576]	; (8006a9c <HAL_RCC_OscConfig+0x2ac>)
 800685c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006860:	6013      	str	r3, [r2, #0]
 8006862:	e01d      	b.n	80068a0 <HAL_RCC_OscConfig+0xb0>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800686c:	d10c      	bne.n	8006888 <HAL_RCC_OscConfig+0x98>
 800686e:	4b8b      	ldr	r3, [pc, #556]	; (8006a9c <HAL_RCC_OscConfig+0x2ac>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a8a      	ldr	r2, [pc, #552]	; (8006a9c <HAL_RCC_OscConfig+0x2ac>)
 8006874:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006878:	6013      	str	r3, [r2, #0]
 800687a:	4b88      	ldr	r3, [pc, #544]	; (8006a9c <HAL_RCC_OscConfig+0x2ac>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a87      	ldr	r2, [pc, #540]	; (8006a9c <HAL_RCC_OscConfig+0x2ac>)
 8006880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006884:	6013      	str	r3, [r2, #0]
 8006886:	e00b      	b.n	80068a0 <HAL_RCC_OscConfig+0xb0>
 8006888:	4b84      	ldr	r3, [pc, #528]	; (8006a9c <HAL_RCC_OscConfig+0x2ac>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a83      	ldr	r2, [pc, #524]	; (8006a9c <HAL_RCC_OscConfig+0x2ac>)
 800688e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006892:	6013      	str	r3, [r2, #0]
 8006894:	4b81      	ldr	r3, [pc, #516]	; (8006a9c <HAL_RCC_OscConfig+0x2ac>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a80      	ldr	r2, [pc, #512]	; (8006a9c <HAL_RCC_OscConfig+0x2ac>)
 800689a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800689e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d013      	beq.n	80068d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068a8:	f7fb fc4a 	bl	8002140 <HAL_GetTick>
 80068ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068ae:	e008      	b.n	80068c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068b0:	f7fb fc46 	bl	8002140 <HAL_GetTick>
 80068b4:	4602      	mov	r2, r0
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	2b64      	cmp	r3, #100	; 0x64
 80068bc:	d901      	bls.n	80068c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80068be:	2303      	movs	r3, #3
 80068c0:	e204      	b.n	8006ccc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068c2:	4b76      	ldr	r3, [pc, #472]	; (8006a9c <HAL_RCC_OscConfig+0x2ac>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d0f0      	beq.n	80068b0 <HAL_RCC_OscConfig+0xc0>
 80068ce:	e014      	b.n	80068fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068d0:	f7fb fc36 	bl	8002140 <HAL_GetTick>
 80068d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068d6:	e008      	b.n	80068ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068d8:	f7fb fc32 	bl	8002140 <HAL_GetTick>
 80068dc:	4602      	mov	r2, r0
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	1ad3      	subs	r3, r2, r3
 80068e2:	2b64      	cmp	r3, #100	; 0x64
 80068e4:	d901      	bls.n	80068ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80068e6:	2303      	movs	r3, #3
 80068e8:	e1f0      	b.n	8006ccc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068ea:	4b6c      	ldr	r3, [pc, #432]	; (8006a9c <HAL_RCC_OscConfig+0x2ac>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d1f0      	bne.n	80068d8 <HAL_RCC_OscConfig+0xe8>
 80068f6:	e000      	b.n	80068fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 0302 	and.w	r3, r3, #2
 8006902:	2b00      	cmp	r3, #0
 8006904:	d063      	beq.n	80069ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006906:	4b65      	ldr	r3, [pc, #404]	; (8006a9c <HAL_RCC_OscConfig+0x2ac>)
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	f003 030c 	and.w	r3, r3, #12
 800690e:	2b00      	cmp	r3, #0
 8006910:	d00b      	beq.n	800692a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006912:	4b62      	ldr	r3, [pc, #392]	; (8006a9c <HAL_RCC_OscConfig+0x2ac>)
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800691a:	2b08      	cmp	r3, #8
 800691c:	d11c      	bne.n	8006958 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800691e:	4b5f      	ldr	r3, [pc, #380]	; (8006a9c <HAL_RCC_OscConfig+0x2ac>)
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006926:	2b00      	cmp	r3, #0
 8006928:	d116      	bne.n	8006958 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800692a:	4b5c      	ldr	r3, [pc, #368]	; (8006a9c <HAL_RCC_OscConfig+0x2ac>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f003 0302 	and.w	r3, r3, #2
 8006932:	2b00      	cmp	r3, #0
 8006934:	d005      	beq.n	8006942 <HAL_RCC_OscConfig+0x152>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	2b01      	cmp	r3, #1
 800693c:	d001      	beq.n	8006942 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	e1c4      	b.n	8006ccc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006942:	4b56      	ldr	r3, [pc, #344]	; (8006a9c <HAL_RCC_OscConfig+0x2ac>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	00db      	lsls	r3, r3, #3
 8006950:	4952      	ldr	r1, [pc, #328]	; (8006a9c <HAL_RCC_OscConfig+0x2ac>)
 8006952:	4313      	orrs	r3, r2
 8006954:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006956:	e03a      	b.n	80069ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d020      	beq.n	80069a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006960:	4b4f      	ldr	r3, [pc, #316]	; (8006aa0 <HAL_RCC_OscConfig+0x2b0>)
 8006962:	2201      	movs	r2, #1
 8006964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006966:	f7fb fbeb 	bl	8002140 <HAL_GetTick>
 800696a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800696c:	e008      	b.n	8006980 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800696e:	f7fb fbe7 	bl	8002140 <HAL_GetTick>
 8006972:	4602      	mov	r2, r0
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	1ad3      	subs	r3, r2, r3
 8006978:	2b02      	cmp	r3, #2
 800697a:	d901      	bls.n	8006980 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800697c:	2303      	movs	r3, #3
 800697e:	e1a5      	b.n	8006ccc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006980:	4b46      	ldr	r3, [pc, #280]	; (8006a9c <HAL_RCC_OscConfig+0x2ac>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 0302 	and.w	r3, r3, #2
 8006988:	2b00      	cmp	r3, #0
 800698a:	d0f0      	beq.n	800696e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800698c:	4b43      	ldr	r3, [pc, #268]	; (8006a9c <HAL_RCC_OscConfig+0x2ac>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	691b      	ldr	r3, [r3, #16]
 8006998:	00db      	lsls	r3, r3, #3
 800699a:	4940      	ldr	r1, [pc, #256]	; (8006a9c <HAL_RCC_OscConfig+0x2ac>)
 800699c:	4313      	orrs	r3, r2
 800699e:	600b      	str	r3, [r1, #0]
 80069a0:	e015      	b.n	80069ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069a2:	4b3f      	ldr	r3, [pc, #252]	; (8006aa0 <HAL_RCC_OscConfig+0x2b0>)
 80069a4:	2200      	movs	r2, #0
 80069a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069a8:	f7fb fbca 	bl	8002140 <HAL_GetTick>
 80069ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069ae:	e008      	b.n	80069c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069b0:	f7fb fbc6 	bl	8002140 <HAL_GetTick>
 80069b4:	4602      	mov	r2, r0
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	1ad3      	subs	r3, r2, r3
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	d901      	bls.n	80069c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80069be:	2303      	movs	r3, #3
 80069c0:	e184      	b.n	8006ccc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069c2:	4b36      	ldr	r3, [pc, #216]	; (8006a9c <HAL_RCC_OscConfig+0x2ac>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 0302 	and.w	r3, r3, #2
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d1f0      	bne.n	80069b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 0308 	and.w	r3, r3, #8
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d030      	beq.n	8006a3c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	695b      	ldr	r3, [r3, #20]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d016      	beq.n	8006a10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069e2:	4b30      	ldr	r3, [pc, #192]	; (8006aa4 <HAL_RCC_OscConfig+0x2b4>)
 80069e4:	2201      	movs	r2, #1
 80069e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069e8:	f7fb fbaa 	bl	8002140 <HAL_GetTick>
 80069ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069ee:	e008      	b.n	8006a02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80069f0:	f7fb fba6 	bl	8002140 <HAL_GetTick>
 80069f4:	4602      	mov	r2, r0
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	1ad3      	subs	r3, r2, r3
 80069fa:	2b02      	cmp	r3, #2
 80069fc:	d901      	bls.n	8006a02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80069fe:	2303      	movs	r3, #3
 8006a00:	e164      	b.n	8006ccc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a02:	4b26      	ldr	r3, [pc, #152]	; (8006a9c <HAL_RCC_OscConfig+0x2ac>)
 8006a04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a06:	f003 0302 	and.w	r3, r3, #2
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d0f0      	beq.n	80069f0 <HAL_RCC_OscConfig+0x200>
 8006a0e:	e015      	b.n	8006a3c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a10:	4b24      	ldr	r3, [pc, #144]	; (8006aa4 <HAL_RCC_OscConfig+0x2b4>)
 8006a12:	2200      	movs	r2, #0
 8006a14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a16:	f7fb fb93 	bl	8002140 <HAL_GetTick>
 8006a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a1c:	e008      	b.n	8006a30 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a1e:	f7fb fb8f 	bl	8002140 <HAL_GetTick>
 8006a22:	4602      	mov	r2, r0
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	1ad3      	subs	r3, r2, r3
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	d901      	bls.n	8006a30 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006a2c:	2303      	movs	r3, #3
 8006a2e:	e14d      	b.n	8006ccc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a30:	4b1a      	ldr	r3, [pc, #104]	; (8006a9c <HAL_RCC_OscConfig+0x2ac>)
 8006a32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a34:	f003 0302 	and.w	r3, r3, #2
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d1f0      	bne.n	8006a1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 0304 	and.w	r3, r3, #4
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f000 80a0 	beq.w	8006b8a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a4e:	4b13      	ldr	r3, [pc, #76]	; (8006a9c <HAL_RCC_OscConfig+0x2ac>)
 8006a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d10f      	bne.n	8006a7a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	60bb      	str	r3, [r7, #8]
 8006a5e:	4b0f      	ldr	r3, [pc, #60]	; (8006a9c <HAL_RCC_OscConfig+0x2ac>)
 8006a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a62:	4a0e      	ldr	r2, [pc, #56]	; (8006a9c <HAL_RCC_OscConfig+0x2ac>)
 8006a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a68:	6413      	str	r3, [r2, #64]	; 0x40
 8006a6a:	4b0c      	ldr	r3, [pc, #48]	; (8006a9c <HAL_RCC_OscConfig+0x2ac>)
 8006a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a72:	60bb      	str	r3, [r7, #8]
 8006a74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a76:	2301      	movs	r3, #1
 8006a78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a7a:	4b0b      	ldr	r3, [pc, #44]	; (8006aa8 <HAL_RCC_OscConfig+0x2b8>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d121      	bne.n	8006aca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a86:	4b08      	ldr	r3, [pc, #32]	; (8006aa8 <HAL_RCC_OscConfig+0x2b8>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a07      	ldr	r2, [pc, #28]	; (8006aa8 <HAL_RCC_OscConfig+0x2b8>)
 8006a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a92:	f7fb fb55 	bl	8002140 <HAL_GetTick>
 8006a96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a98:	e011      	b.n	8006abe <HAL_RCC_OscConfig+0x2ce>
 8006a9a:	bf00      	nop
 8006a9c:	40023800 	.word	0x40023800
 8006aa0:	42470000 	.word	0x42470000
 8006aa4:	42470e80 	.word	0x42470e80
 8006aa8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006aac:	f7fb fb48 	bl	8002140 <HAL_GetTick>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	1ad3      	subs	r3, r2, r3
 8006ab6:	2b02      	cmp	r3, #2
 8006ab8:	d901      	bls.n	8006abe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	e106      	b.n	8006ccc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006abe:	4b85      	ldr	r3, [pc, #532]	; (8006cd4 <HAL_RCC_OscConfig+0x4e4>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d0f0      	beq.n	8006aac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d106      	bne.n	8006ae0 <HAL_RCC_OscConfig+0x2f0>
 8006ad2:	4b81      	ldr	r3, [pc, #516]	; (8006cd8 <HAL_RCC_OscConfig+0x4e8>)
 8006ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ad6:	4a80      	ldr	r2, [pc, #512]	; (8006cd8 <HAL_RCC_OscConfig+0x4e8>)
 8006ad8:	f043 0301 	orr.w	r3, r3, #1
 8006adc:	6713      	str	r3, [r2, #112]	; 0x70
 8006ade:	e01c      	b.n	8006b1a <HAL_RCC_OscConfig+0x32a>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	2b05      	cmp	r3, #5
 8006ae6:	d10c      	bne.n	8006b02 <HAL_RCC_OscConfig+0x312>
 8006ae8:	4b7b      	ldr	r3, [pc, #492]	; (8006cd8 <HAL_RCC_OscConfig+0x4e8>)
 8006aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aec:	4a7a      	ldr	r2, [pc, #488]	; (8006cd8 <HAL_RCC_OscConfig+0x4e8>)
 8006aee:	f043 0304 	orr.w	r3, r3, #4
 8006af2:	6713      	str	r3, [r2, #112]	; 0x70
 8006af4:	4b78      	ldr	r3, [pc, #480]	; (8006cd8 <HAL_RCC_OscConfig+0x4e8>)
 8006af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006af8:	4a77      	ldr	r2, [pc, #476]	; (8006cd8 <HAL_RCC_OscConfig+0x4e8>)
 8006afa:	f043 0301 	orr.w	r3, r3, #1
 8006afe:	6713      	str	r3, [r2, #112]	; 0x70
 8006b00:	e00b      	b.n	8006b1a <HAL_RCC_OscConfig+0x32a>
 8006b02:	4b75      	ldr	r3, [pc, #468]	; (8006cd8 <HAL_RCC_OscConfig+0x4e8>)
 8006b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b06:	4a74      	ldr	r2, [pc, #464]	; (8006cd8 <HAL_RCC_OscConfig+0x4e8>)
 8006b08:	f023 0301 	bic.w	r3, r3, #1
 8006b0c:	6713      	str	r3, [r2, #112]	; 0x70
 8006b0e:	4b72      	ldr	r3, [pc, #456]	; (8006cd8 <HAL_RCC_OscConfig+0x4e8>)
 8006b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b12:	4a71      	ldr	r2, [pc, #452]	; (8006cd8 <HAL_RCC_OscConfig+0x4e8>)
 8006b14:	f023 0304 	bic.w	r3, r3, #4
 8006b18:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d015      	beq.n	8006b4e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b22:	f7fb fb0d 	bl	8002140 <HAL_GetTick>
 8006b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b28:	e00a      	b.n	8006b40 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b2a:	f7fb fb09 	bl	8002140 <HAL_GetTick>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	1ad3      	subs	r3, r2, r3
 8006b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d901      	bls.n	8006b40 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006b3c:	2303      	movs	r3, #3
 8006b3e:	e0c5      	b.n	8006ccc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b40:	4b65      	ldr	r3, [pc, #404]	; (8006cd8 <HAL_RCC_OscConfig+0x4e8>)
 8006b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b44:	f003 0302 	and.w	r3, r3, #2
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d0ee      	beq.n	8006b2a <HAL_RCC_OscConfig+0x33a>
 8006b4c:	e014      	b.n	8006b78 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b4e:	f7fb faf7 	bl	8002140 <HAL_GetTick>
 8006b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b54:	e00a      	b.n	8006b6c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b56:	f7fb faf3 	bl	8002140 <HAL_GetTick>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	1ad3      	subs	r3, r2, r3
 8006b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d901      	bls.n	8006b6c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006b68:	2303      	movs	r3, #3
 8006b6a:	e0af      	b.n	8006ccc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b6c:	4b5a      	ldr	r3, [pc, #360]	; (8006cd8 <HAL_RCC_OscConfig+0x4e8>)
 8006b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b70:	f003 0302 	and.w	r3, r3, #2
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d1ee      	bne.n	8006b56 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b78:	7dfb      	ldrb	r3, [r7, #23]
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d105      	bne.n	8006b8a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b7e:	4b56      	ldr	r3, [pc, #344]	; (8006cd8 <HAL_RCC_OscConfig+0x4e8>)
 8006b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b82:	4a55      	ldr	r2, [pc, #340]	; (8006cd8 <HAL_RCC_OscConfig+0x4e8>)
 8006b84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b88:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	699b      	ldr	r3, [r3, #24]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	f000 809b 	beq.w	8006cca <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006b94:	4b50      	ldr	r3, [pc, #320]	; (8006cd8 <HAL_RCC_OscConfig+0x4e8>)
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	f003 030c 	and.w	r3, r3, #12
 8006b9c:	2b08      	cmp	r3, #8
 8006b9e:	d05c      	beq.n	8006c5a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	699b      	ldr	r3, [r3, #24]
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	d141      	bne.n	8006c2c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ba8:	4b4c      	ldr	r3, [pc, #304]	; (8006cdc <HAL_RCC_OscConfig+0x4ec>)
 8006baa:	2200      	movs	r2, #0
 8006bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bae:	f7fb fac7 	bl	8002140 <HAL_GetTick>
 8006bb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bb4:	e008      	b.n	8006bc8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bb6:	f7fb fac3 	bl	8002140 <HAL_GetTick>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	1ad3      	subs	r3, r2, r3
 8006bc0:	2b02      	cmp	r3, #2
 8006bc2:	d901      	bls.n	8006bc8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006bc4:	2303      	movs	r3, #3
 8006bc6:	e081      	b.n	8006ccc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bc8:	4b43      	ldr	r3, [pc, #268]	; (8006cd8 <HAL_RCC_OscConfig+0x4e8>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d1f0      	bne.n	8006bb6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	69da      	ldr	r2, [r3, #28]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6a1b      	ldr	r3, [r3, #32]
 8006bdc:	431a      	orrs	r2, r3
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be2:	019b      	lsls	r3, r3, #6
 8006be4:	431a      	orrs	r2, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bea:	085b      	lsrs	r3, r3, #1
 8006bec:	3b01      	subs	r3, #1
 8006bee:	041b      	lsls	r3, r3, #16
 8006bf0:	431a      	orrs	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf6:	061b      	lsls	r3, r3, #24
 8006bf8:	4937      	ldr	r1, [pc, #220]	; (8006cd8 <HAL_RCC_OscConfig+0x4e8>)
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006bfe:	4b37      	ldr	r3, [pc, #220]	; (8006cdc <HAL_RCC_OscConfig+0x4ec>)
 8006c00:	2201      	movs	r2, #1
 8006c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c04:	f7fb fa9c 	bl	8002140 <HAL_GetTick>
 8006c08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c0a:	e008      	b.n	8006c1e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c0c:	f7fb fa98 	bl	8002140 <HAL_GetTick>
 8006c10:	4602      	mov	r2, r0
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	2b02      	cmp	r3, #2
 8006c18:	d901      	bls.n	8006c1e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006c1a:	2303      	movs	r3, #3
 8006c1c:	e056      	b.n	8006ccc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c1e:	4b2e      	ldr	r3, [pc, #184]	; (8006cd8 <HAL_RCC_OscConfig+0x4e8>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d0f0      	beq.n	8006c0c <HAL_RCC_OscConfig+0x41c>
 8006c2a:	e04e      	b.n	8006cca <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c2c:	4b2b      	ldr	r3, [pc, #172]	; (8006cdc <HAL_RCC_OscConfig+0x4ec>)
 8006c2e:	2200      	movs	r2, #0
 8006c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c32:	f7fb fa85 	bl	8002140 <HAL_GetTick>
 8006c36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c38:	e008      	b.n	8006c4c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c3a:	f7fb fa81 	bl	8002140 <HAL_GetTick>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	1ad3      	subs	r3, r2, r3
 8006c44:	2b02      	cmp	r3, #2
 8006c46:	d901      	bls.n	8006c4c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	e03f      	b.n	8006ccc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c4c:	4b22      	ldr	r3, [pc, #136]	; (8006cd8 <HAL_RCC_OscConfig+0x4e8>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d1f0      	bne.n	8006c3a <HAL_RCC_OscConfig+0x44a>
 8006c58:	e037      	b.n	8006cca <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d101      	bne.n	8006c66 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	e032      	b.n	8006ccc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006c66:	4b1c      	ldr	r3, [pc, #112]	; (8006cd8 <HAL_RCC_OscConfig+0x4e8>)
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	699b      	ldr	r3, [r3, #24]
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d028      	beq.n	8006cc6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d121      	bne.n	8006cc6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d11a      	bne.n	8006cc6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006c90:	68fa      	ldr	r2, [r7, #12]
 8006c92:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006c96:	4013      	ands	r3, r2
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006c9c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d111      	bne.n	8006cc6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cac:	085b      	lsrs	r3, r3, #1
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d107      	bne.n	8006cc6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d001      	beq.n	8006cca <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e000      	b.n	8006ccc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006cca:	2300      	movs	r3, #0
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3718      	adds	r7, #24
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}
 8006cd4:	40007000 	.word	0x40007000
 8006cd8:	40023800 	.word	0x40023800
 8006cdc:	42470060 	.word	0x42470060

08006ce0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d101      	bne.n	8006cf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e0cc      	b.n	8006e8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006cf4:	4b68      	ldr	r3, [pc, #416]	; (8006e98 <HAL_RCC_ClockConfig+0x1b8>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f003 0307 	and.w	r3, r3, #7
 8006cfc:	683a      	ldr	r2, [r7, #0]
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d90c      	bls.n	8006d1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d02:	4b65      	ldr	r3, [pc, #404]	; (8006e98 <HAL_RCC_ClockConfig+0x1b8>)
 8006d04:	683a      	ldr	r2, [r7, #0]
 8006d06:	b2d2      	uxtb	r2, r2
 8006d08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d0a:	4b63      	ldr	r3, [pc, #396]	; (8006e98 <HAL_RCC_ClockConfig+0x1b8>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 0307 	and.w	r3, r3, #7
 8006d12:	683a      	ldr	r2, [r7, #0]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d001      	beq.n	8006d1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e0b8      	b.n	8006e8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 0302 	and.w	r3, r3, #2
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d020      	beq.n	8006d6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 0304 	and.w	r3, r3, #4
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d005      	beq.n	8006d40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d34:	4b59      	ldr	r3, [pc, #356]	; (8006e9c <HAL_RCC_ClockConfig+0x1bc>)
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	4a58      	ldr	r2, [pc, #352]	; (8006e9c <HAL_RCC_ClockConfig+0x1bc>)
 8006d3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006d3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 0308 	and.w	r3, r3, #8
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d005      	beq.n	8006d58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d4c:	4b53      	ldr	r3, [pc, #332]	; (8006e9c <HAL_RCC_ClockConfig+0x1bc>)
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	4a52      	ldr	r2, [pc, #328]	; (8006e9c <HAL_RCC_ClockConfig+0x1bc>)
 8006d52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006d56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d58:	4b50      	ldr	r3, [pc, #320]	; (8006e9c <HAL_RCC_ClockConfig+0x1bc>)
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	494d      	ldr	r1, [pc, #308]	; (8006e9c <HAL_RCC_ClockConfig+0x1bc>)
 8006d66:	4313      	orrs	r3, r2
 8006d68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f003 0301 	and.w	r3, r3, #1
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d044      	beq.n	8006e00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d107      	bne.n	8006d8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d7e:	4b47      	ldr	r3, [pc, #284]	; (8006e9c <HAL_RCC_ClockConfig+0x1bc>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d119      	bne.n	8006dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e07f      	b.n	8006e8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	2b02      	cmp	r3, #2
 8006d94:	d003      	beq.n	8006d9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d9a:	2b03      	cmp	r3, #3
 8006d9c:	d107      	bne.n	8006dae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d9e:	4b3f      	ldr	r3, [pc, #252]	; (8006e9c <HAL_RCC_ClockConfig+0x1bc>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d109      	bne.n	8006dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	e06f      	b.n	8006e8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dae:	4b3b      	ldr	r3, [pc, #236]	; (8006e9c <HAL_RCC_ClockConfig+0x1bc>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f003 0302 	and.w	r3, r3, #2
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d101      	bne.n	8006dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	e067      	b.n	8006e8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006dbe:	4b37      	ldr	r3, [pc, #220]	; (8006e9c <HAL_RCC_ClockConfig+0x1bc>)
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	f023 0203 	bic.w	r2, r3, #3
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	4934      	ldr	r1, [pc, #208]	; (8006e9c <HAL_RCC_ClockConfig+0x1bc>)
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006dd0:	f7fb f9b6 	bl	8002140 <HAL_GetTick>
 8006dd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dd6:	e00a      	b.n	8006dee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006dd8:	f7fb f9b2 	bl	8002140 <HAL_GetTick>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d901      	bls.n	8006dee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006dea:	2303      	movs	r3, #3
 8006dec:	e04f      	b.n	8006e8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dee:	4b2b      	ldr	r3, [pc, #172]	; (8006e9c <HAL_RCC_ClockConfig+0x1bc>)
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	f003 020c 	and.w	r2, r3, #12
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d1eb      	bne.n	8006dd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e00:	4b25      	ldr	r3, [pc, #148]	; (8006e98 <HAL_RCC_ClockConfig+0x1b8>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 0307 	and.w	r3, r3, #7
 8006e08:	683a      	ldr	r2, [r7, #0]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d20c      	bcs.n	8006e28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e0e:	4b22      	ldr	r3, [pc, #136]	; (8006e98 <HAL_RCC_ClockConfig+0x1b8>)
 8006e10:	683a      	ldr	r2, [r7, #0]
 8006e12:	b2d2      	uxtb	r2, r2
 8006e14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e16:	4b20      	ldr	r3, [pc, #128]	; (8006e98 <HAL_RCC_ClockConfig+0x1b8>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f003 0307 	and.w	r3, r3, #7
 8006e1e:	683a      	ldr	r2, [r7, #0]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d001      	beq.n	8006e28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	e032      	b.n	8006e8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f003 0304 	and.w	r3, r3, #4
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d008      	beq.n	8006e46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e34:	4b19      	ldr	r3, [pc, #100]	; (8006e9c <HAL_RCC_ClockConfig+0x1bc>)
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	4916      	ldr	r1, [pc, #88]	; (8006e9c <HAL_RCC_ClockConfig+0x1bc>)
 8006e42:	4313      	orrs	r3, r2
 8006e44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f003 0308 	and.w	r3, r3, #8
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d009      	beq.n	8006e66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e52:	4b12      	ldr	r3, [pc, #72]	; (8006e9c <HAL_RCC_ClockConfig+0x1bc>)
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	00db      	lsls	r3, r3, #3
 8006e60:	490e      	ldr	r1, [pc, #56]	; (8006e9c <HAL_RCC_ClockConfig+0x1bc>)
 8006e62:	4313      	orrs	r3, r2
 8006e64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006e66:	f000 f821 	bl	8006eac <HAL_RCC_GetSysClockFreq>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	4b0b      	ldr	r3, [pc, #44]	; (8006e9c <HAL_RCC_ClockConfig+0x1bc>)
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	091b      	lsrs	r3, r3, #4
 8006e72:	f003 030f 	and.w	r3, r3, #15
 8006e76:	490a      	ldr	r1, [pc, #40]	; (8006ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8006e78:	5ccb      	ldrb	r3, [r1, r3]
 8006e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8006e7e:	4a09      	ldr	r2, [pc, #36]	; (8006ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8006e80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006e82:	4b09      	ldr	r3, [pc, #36]	; (8006ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4618      	mov	r0, r3
 8006e88:	f7fb f806 	bl	8001e98 <HAL_InitTick>

  return HAL_OK;
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3710      	adds	r7, #16
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	40023c00 	.word	0x40023c00
 8006e9c:	40023800 	.word	0x40023800
 8006ea0:	0800f1f4 	.word	0x0800f1f4
 8006ea4:	20000000 	.word	0x20000000
 8006ea8:	20000004 	.word	0x20000004

08006eac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006eac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006eb0:	b084      	sub	sp, #16
 8006eb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	607b      	str	r3, [r7, #4]
 8006eb8:	2300      	movs	r3, #0
 8006eba:	60fb      	str	r3, [r7, #12]
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ec4:	4b67      	ldr	r3, [pc, #412]	; (8007064 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	f003 030c 	and.w	r3, r3, #12
 8006ecc:	2b08      	cmp	r3, #8
 8006ece:	d00d      	beq.n	8006eec <HAL_RCC_GetSysClockFreq+0x40>
 8006ed0:	2b08      	cmp	r3, #8
 8006ed2:	f200 80bd 	bhi.w	8007050 <HAL_RCC_GetSysClockFreq+0x1a4>
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d002      	beq.n	8006ee0 <HAL_RCC_GetSysClockFreq+0x34>
 8006eda:	2b04      	cmp	r3, #4
 8006edc:	d003      	beq.n	8006ee6 <HAL_RCC_GetSysClockFreq+0x3a>
 8006ede:	e0b7      	b.n	8007050 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ee0:	4b61      	ldr	r3, [pc, #388]	; (8007068 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006ee2:	60bb      	str	r3, [r7, #8]
       break;
 8006ee4:	e0b7      	b.n	8007056 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006ee6:	4b61      	ldr	r3, [pc, #388]	; (800706c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006ee8:	60bb      	str	r3, [r7, #8]
      break;
 8006eea:	e0b4      	b.n	8007056 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006eec:	4b5d      	ldr	r3, [pc, #372]	; (8007064 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ef4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006ef6:	4b5b      	ldr	r3, [pc, #364]	; (8007064 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d04d      	beq.n	8006f9e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f02:	4b58      	ldr	r3, [pc, #352]	; (8007064 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	099b      	lsrs	r3, r3, #6
 8006f08:	461a      	mov	r2, r3
 8006f0a:	f04f 0300 	mov.w	r3, #0
 8006f0e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006f12:	f04f 0100 	mov.w	r1, #0
 8006f16:	ea02 0800 	and.w	r8, r2, r0
 8006f1a:	ea03 0901 	and.w	r9, r3, r1
 8006f1e:	4640      	mov	r0, r8
 8006f20:	4649      	mov	r1, r9
 8006f22:	f04f 0200 	mov.w	r2, #0
 8006f26:	f04f 0300 	mov.w	r3, #0
 8006f2a:	014b      	lsls	r3, r1, #5
 8006f2c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006f30:	0142      	lsls	r2, r0, #5
 8006f32:	4610      	mov	r0, r2
 8006f34:	4619      	mov	r1, r3
 8006f36:	ebb0 0008 	subs.w	r0, r0, r8
 8006f3a:	eb61 0109 	sbc.w	r1, r1, r9
 8006f3e:	f04f 0200 	mov.w	r2, #0
 8006f42:	f04f 0300 	mov.w	r3, #0
 8006f46:	018b      	lsls	r3, r1, #6
 8006f48:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006f4c:	0182      	lsls	r2, r0, #6
 8006f4e:	1a12      	subs	r2, r2, r0
 8006f50:	eb63 0301 	sbc.w	r3, r3, r1
 8006f54:	f04f 0000 	mov.w	r0, #0
 8006f58:	f04f 0100 	mov.w	r1, #0
 8006f5c:	00d9      	lsls	r1, r3, #3
 8006f5e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006f62:	00d0      	lsls	r0, r2, #3
 8006f64:	4602      	mov	r2, r0
 8006f66:	460b      	mov	r3, r1
 8006f68:	eb12 0208 	adds.w	r2, r2, r8
 8006f6c:	eb43 0309 	adc.w	r3, r3, r9
 8006f70:	f04f 0000 	mov.w	r0, #0
 8006f74:	f04f 0100 	mov.w	r1, #0
 8006f78:	0259      	lsls	r1, r3, #9
 8006f7a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006f7e:	0250      	lsls	r0, r2, #9
 8006f80:	4602      	mov	r2, r0
 8006f82:	460b      	mov	r3, r1
 8006f84:	4610      	mov	r0, r2
 8006f86:	4619      	mov	r1, r3
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	f04f 0300 	mov.w	r3, #0
 8006f90:	f7f9 fc7c 	bl	800088c <__aeabi_uldivmod>
 8006f94:	4602      	mov	r2, r0
 8006f96:	460b      	mov	r3, r1
 8006f98:	4613      	mov	r3, r2
 8006f9a:	60fb      	str	r3, [r7, #12]
 8006f9c:	e04a      	b.n	8007034 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f9e:	4b31      	ldr	r3, [pc, #196]	; (8007064 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	099b      	lsrs	r3, r3, #6
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	f04f 0300 	mov.w	r3, #0
 8006faa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006fae:	f04f 0100 	mov.w	r1, #0
 8006fb2:	ea02 0400 	and.w	r4, r2, r0
 8006fb6:	ea03 0501 	and.w	r5, r3, r1
 8006fba:	4620      	mov	r0, r4
 8006fbc:	4629      	mov	r1, r5
 8006fbe:	f04f 0200 	mov.w	r2, #0
 8006fc2:	f04f 0300 	mov.w	r3, #0
 8006fc6:	014b      	lsls	r3, r1, #5
 8006fc8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006fcc:	0142      	lsls	r2, r0, #5
 8006fce:	4610      	mov	r0, r2
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	1b00      	subs	r0, r0, r4
 8006fd4:	eb61 0105 	sbc.w	r1, r1, r5
 8006fd8:	f04f 0200 	mov.w	r2, #0
 8006fdc:	f04f 0300 	mov.w	r3, #0
 8006fe0:	018b      	lsls	r3, r1, #6
 8006fe2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006fe6:	0182      	lsls	r2, r0, #6
 8006fe8:	1a12      	subs	r2, r2, r0
 8006fea:	eb63 0301 	sbc.w	r3, r3, r1
 8006fee:	f04f 0000 	mov.w	r0, #0
 8006ff2:	f04f 0100 	mov.w	r1, #0
 8006ff6:	00d9      	lsls	r1, r3, #3
 8006ff8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006ffc:	00d0      	lsls	r0, r2, #3
 8006ffe:	4602      	mov	r2, r0
 8007000:	460b      	mov	r3, r1
 8007002:	1912      	adds	r2, r2, r4
 8007004:	eb45 0303 	adc.w	r3, r5, r3
 8007008:	f04f 0000 	mov.w	r0, #0
 800700c:	f04f 0100 	mov.w	r1, #0
 8007010:	0299      	lsls	r1, r3, #10
 8007012:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007016:	0290      	lsls	r0, r2, #10
 8007018:	4602      	mov	r2, r0
 800701a:	460b      	mov	r3, r1
 800701c:	4610      	mov	r0, r2
 800701e:	4619      	mov	r1, r3
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	461a      	mov	r2, r3
 8007024:	f04f 0300 	mov.w	r3, #0
 8007028:	f7f9 fc30 	bl	800088c <__aeabi_uldivmod>
 800702c:	4602      	mov	r2, r0
 800702e:	460b      	mov	r3, r1
 8007030:	4613      	mov	r3, r2
 8007032:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007034:	4b0b      	ldr	r3, [pc, #44]	; (8007064 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	0c1b      	lsrs	r3, r3, #16
 800703a:	f003 0303 	and.w	r3, r3, #3
 800703e:	3301      	adds	r3, #1
 8007040:	005b      	lsls	r3, r3, #1
 8007042:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	fbb2 f3f3 	udiv	r3, r2, r3
 800704c:	60bb      	str	r3, [r7, #8]
      break;
 800704e:	e002      	b.n	8007056 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007050:	4b05      	ldr	r3, [pc, #20]	; (8007068 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007052:	60bb      	str	r3, [r7, #8]
      break;
 8007054:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007056:	68bb      	ldr	r3, [r7, #8]
}
 8007058:	4618      	mov	r0, r3
 800705a:	3710      	adds	r7, #16
 800705c:	46bd      	mov	sp, r7
 800705e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007062:	bf00      	nop
 8007064:	40023800 	.word	0x40023800
 8007068:	00f42400 	.word	0x00f42400
 800706c:	007a1200 	.word	0x007a1200

08007070 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007070:	b480      	push	{r7}
 8007072:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007074:	4b03      	ldr	r3, [pc, #12]	; (8007084 <HAL_RCC_GetHCLKFreq+0x14>)
 8007076:	681b      	ldr	r3, [r3, #0]
}
 8007078:	4618      	mov	r0, r3
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr
 8007082:	bf00      	nop
 8007084:	20000000 	.word	0x20000000

08007088 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800708c:	f7ff fff0 	bl	8007070 <HAL_RCC_GetHCLKFreq>
 8007090:	4602      	mov	r2, r0
 8007092:	4b05      	ldr	r3, [pc, #20]	; (80070a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	0a9b      	lsrs	r3, r3, #10
 8007098:	f003 0307 	and.w	r3, r3, #7
 800709c:	4903      	ldr	r1, [pc, #12]	; (80070ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800709e:	5ccb      	ldrb	r3, [r1, r3]
 80070a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	40023800 	.word	0x40023800
 80070ac:	0800f204 	.word	0x0800f204

080070b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80070b4:	f7ff ffdc 	bl	8007070 <HAL_RCC_GetHCLKFreq>
 80070b8:	4602      	mov	r2, r0
 80070ba:	4b05      	ldr	r3, [pc, #20]	; (80070d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	0b5b      	lsrs	r3, r3, #13
 80070c0:	f003 0307 	and.w	r3, r3, #7
 80070c4:	4903      	ldr	r1, [pc, #12]	; (80070d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80070c6:	5ccb      	ldrb	r3, [r1, r3]
 80070c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	40023800 	.word	0x40023800
 80070d4:	0800f204 	.word	0x0800f204

080070d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80070d8:	b480      	push	{r7}
 80070da:	b083      	sub	sp, #12
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	220f      	movs	r2, #15
 80070e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80070e8:	4b12      	ldr	r3, [pc, #72]	; (8007134 <HAL_RCC_GetClockConfig+0x5c>)
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	f003 0203 	and.w	r2, r3, #3
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80070f4:	4b0f      	ldr	r3, [pc, #60]	; (8007134 <HAL_RCC_GetClockConfig+0x5c>)
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007100:	4b0c      	ldr	r3, [pc, #48]	; (8007134 <HAL_RCC_GetClockConfig+0x5c>)
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800710c:	4b09      	ldr	r3, [pc, #36]	; (8007134 <HAL_RCC_GetClockConfig+0x5c>)
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	08db      	lsrs	r3, r3, #3
 8007112:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800711a:	4b07      	ldr	r3, [pc, #28]	; (8007138 <HAL_RCC_GetClockConfig+0x60>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f003 0207 	and.w	r2, r3, #7
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	601a      	str	r2, [r3, #0]
}
 8007126:	bf00      	nop
 8007128:	370c      	adds	r7, #12
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr
 8007132:	bf00      	nop
 8007134:	40023800 	.word	0x40023800
 8007138:	40023c00 	.word	0x40023c00

0800713c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b086      	sub	sp, #24
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007144:	2300      	movs	r3, #0
 8007146:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007148:	2300      	movs	r3, #0
 800714a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f003 0301 	and.w	r3, r3, #1
 8007154:	2b00      	cmp	r3, #0
 8007156:	d105      	bne.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007160:	2b00      	cmp	r3, #0
 8007162:	d035      	beq.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007164:	4b62      	ldr	r3, [pc, #392]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007166:	2200      	movs	r2, #0
 8007168:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800716a:	f7fa ffe9 	bl	8002140 <HAL_GetTick>
 800716e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007170:	e008      	b.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007172:	f7fa ffe5 	bl	8002140 <HAL_GetTick>
 8007176:	4602      	mov	r2, r0
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	1ad3      	subs	r3, r2, r3
 800717c:	2b02      	cmp	r3, #2
 800717e:	d901      	bls.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007180:	2303      	movs	r3, #3
 8007182:	e0b0      	b.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007184:	4b5b      	ldr	r3, [pc, #364]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800718c:	2b00      	cmp	r3, #0
 800718e:	d1f0      	bne.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	019a      	lsls	r2, r3, #6
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	071b      	lsls	r3, r3, #28
 800719c:	4955      	ldr	r1, [pc, #340]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800719e:	4313      	orrs	r3, r2
 80071a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80071a4:	4b52      	ldr	r3, [pc, #328]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80071a6:	2201      	movs	r2, #1
 80071a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80071aa:	f7fa ffc9 	bl	8002140 <HAL_GetTick>
 80071ae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80071b0:	e008      	b.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80071b2:	f7fa ffc5 	bl	8002140 <HAL_GetTick>
 80071b6:	4602      	mov	r2, r0
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	1ad3      	subs	r3, r2, r3
 80071bc:	2b02      	cmp	r3, #2
 80071be:	d901      	bls.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80071c0:	2303      	movs	r3, #3
 80071c2:	e090      	b.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80071c4:	4b4b      	ldr	r3, [pc, #300]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d0f0      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 0302 	and.w	r3, r3, #2
 80071d8:	2b00      	cmp	r3, #0
 80071da:	f000 8083 	beq.w	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80071de:	2300      	movs	r3, #0
 80071e0:	60fb      	str	r3, [r7, #12]
 80071e2:	4b44      	ldr	r3, [pc, #272]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e6:	4a43      	ldr	r2, [pc, #268]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071ec:	6413      	str	r3, [r2, #64]	; 0x40
 80071ee:	4b41      	ldr	r3, [pc, #260]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071f6:	60fb      	str	r3, [r7, #12]
 80071f8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80071fa:	4b3f      	ldr	r3, [pc, #252]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a3e      	ldr	r2, [pc, #248]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007204:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007206:	f7fa ff9b 	bl	8002140 <HAL_GetTick>
 800720a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800720c:	e008      	b.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800720e:	f7fa ff97 	bl	8002140 <HAL_GetTick>
 8007212:	4602      	mov	r2, r0
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	1ad3      	subs	r3, r2, r3
 8007218:	2b02      	cmp	r3, #2
 800721a:	d901      	bls.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800721c:	2303      	movs	r3, #3
 800721e:	e062      	b.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007220:	4b35      	ldr	r3, [pc, #212]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007228:	2b00      	cmp	r3, #0
 800722a:	d0f0      	beq.n	800720e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800722c:	4b31      	ldr	r3, [pc, #196]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800722e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007230:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007234:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d02f      	beq.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007244:	693a      	ldr	r2, [r7, #16]
 8007246:	429a      	cmp	r2, r3
 8007248:	d028      	beq.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800724a:	4b2a      	ldr	r3, [pc, #168]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800724c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800724e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007252:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007254:	4b29      	ldr	r3, [pc, #164]	; (80072fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007256:	2201      	movs	r2, #1
 8007258:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800725a:	4b28      	ldr	r3, [pc, #160]	; (80072fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800725c:	2200      	movs	r2, #0
 800725e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007260:	4a24      	ldr	r2, [pc, #144]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007266:	4b23      	ldr	r3, [pc, #140]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800726a:	f003 0301 	and.w	r3, r3, #1
 800726e:	2b01      	cmp	r3, #1
 8007270:	d114      	bne.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007272:	f7fa ff65 	bl	8002140 <HAL_GetTick>
 8007276:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007278:	e00a      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800727a:	f7fa ff61 	bl	8002140 <HAL_GetTick>
 800727e:	4602      	mov	r2, r0
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	1ad3      	subs	r3, r2, r3
 8007284:	f241 3288 	movw	r2, #5000	; 0x1388
 8007288:	4293      	cmp	r3, r2
 800728a:	d901      	bls.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800728c:	2303      	movs	r3, #3
 800728e:	e02a      	b.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007290:	4b18      	ldr	r3, [pc, #96]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007294:	f003 0302 	and.w	r3, r3, #2
 8007298:	2b00      	cmp	r3, #0
 800729a:	d0ee      	beq.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072a8:	d10d      	bne.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80072aa:	4b12      	ldr	r3, [pc, #72]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	68db      	ldr	r3, [r3, #12]
 80072b6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80072ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072be:	490d      	ldr	r1, [pc, #52]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072c0:	4313      	orrs	r3, r2
 80072c2:	608b      	str	r3, [r1, #8]
 80072c4:	e005      	b.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80072c6:	4b0b      	ldr	r3, [pc, #44]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	4a0a      	ldr	r2, [pc, #40]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072cc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80072d0:	6093      	str	r3, [r2, #8]
 80072d2:	4b08      	ldr	r3, [pc, #32]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	68db      	ldr	r3, [r3, #12]
 80072da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072de:	4905      	ldr	r1, [pc, #20]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072e0:	4313      	orrs	r3, r2
 80072e2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3718      	adds	r7, #24
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop
 80072f0:	42470068 	.word	0x42470068
 80072f4:	40023800 	.word	0x40023800
 80072f8:	40007000 	.word	0x40007000
 80072fc:	42470e40 	.word	0x42470e40

08007300 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007300:	b480      	push	{r7}
 8007302:	b087      	sub	sp, #28
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007308:	2300      	movs	r3, #0
 800730a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800730c:	2300      	movs	r3, #0
 800730e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007310:	2300      	movs	r3, #0
 8007312:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007314:	2300      	movs	r3, #0
 8007316:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2b01      	cmp	r3, #1
 800731c:	d13e      	bne.n	800739c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800731e:	4b23      	ldr	r3, [pc, #140]	; (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007326:	60fb      	str	r3, [r7, #12]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d005      	beq.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2b01      	cmp	r3, #1
 8007332:	d12f      	bne.n	8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007334:	4b1e      	ldr	r3, [pc, #120]	; (80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007336:	617b      	str	r3, [r7, #20]
          break;
 8007338:	e02f      	b.n	800739a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800733a:	4b1c      	ldr	r3, [pc, #112]	; (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007342:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007346:	d108      	bne.n	800735a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007348:	4b18      	ldr	r3, [pc, #96]	; (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007350:	4a18      	ldr	r2, [pc, #96]	; (80073b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007352:	fbb2 f3f3 	udiv	r3, r2, r3
 8007356:	613b      	str	r3, [r7, #16]
 8007358:	e007      	b.n	800736a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800735a:	4b14      	ldr	r3, [pc, #80]	; (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007362:	4a15      	ldr	r2, [pc, #84]	; (80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007364:	fbb2 f3f3 	udiv	r3, r2, r3
 8007368:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800736a:	4b10      	ldr	r3, [pc, #64]	; (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800736c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007370:	099b      	lsrs	r3, r3, #6
 8007372:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	fb02 f303 	mul.w	r3, r2, r3
 800737c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800737e:	4b0b      	ldr	r3, [pc, #44]	; (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007380:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007384:	0f1b      	lsrs	r3, r3, #28
 8007386:	f003 0307 	and.w	r3, r3, #7
 800738a:	68ba      	ldr	r2, [r7, #8]
 800738c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007390:	617b      	str	r3, [r7, #20]
          break;
 8007392:	e002      	b.n	800739a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007394:	2300      	movs	r3, #0
 8007396:	617b      	str	r3, [r7, #20]
          break;
 8007398:	bf00      	nop
        }
      }
      break;
 800739a:	bf00      	nop
    }
  }
  return frequency;
 800739c:	697b      	ldr	r3, [r7, #20]
}
 800739e:	4618      	mov	r0, r3
 80073a0:	371c      	adds	r7, #28
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr
 80073aa:	bf00      	nop
 80073ac:	40023800 	.word	0x40023800
 80073b0:	00bb8000 	.word	0x00bb8000
 80073b4:	007a1200 	.word	0x007a1200
 80073b8:	00f42400 	.word	0x00f42400

080073bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b082      	sub	sp, #8
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d101      	bne.n	80073ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80073ca:	2301      	movs	r3, #1
 80073cc:	e07b      	b.n	80074c6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d108      	bne.n	80073e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073de:	d009      	beq.n	80073f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	61da      	str	r2, [r3, #28]
 80073e6:	e005      	b.n	80073f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007400:	b2db      	uxtb	r3, r3
 8007402:	2b00      	cmp	r3, #0
 8007404:	d106      	bne.n	8007414 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f7fa fc92 	bl	8001d38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2202      	movs	r2, #2
 8007418:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800742a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800743c:	431a      	orrs	r2, r3
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	68db      	ldr	r3, [r3, #12]
 8007442:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007446:	431a      	orrs	r2, r3
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	691b      	ldr	r3, [r3, #16]
 800744c:	f003 0302 	and.w	r3, r3, #2
 8007450:	431a      	orrs	r2, r3
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	695b      	ldr	r3, [r3, #20]
 8007456:	f003 0301 	and.w	r3, r3, #1
 800745a:	431a      	orrs	r2, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	699b      	ldr	r3, [r3, #24]
 8007460:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007464:	431a      	orrs	r2, r3
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	69db      	ldr	r3, [r3, #28]
 800746a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800746e:	431a      	orrs	r2, r3
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6a1b      	ldr	r3, [r3, #32]
 8007474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007478:	ea42 0103 	orr.w	r1, r2, r3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007480:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	430a      	orrs	r2, r1
 800748a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	699b      	ldr	r3, [r3, #24]
 8007490:	0c1b      	lsrs	r3, r3, #16
 8007492:	f003 0104 	and.w	r1, r3, #4
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800749a:	f003 0210 	and.w	r2, r3, #16
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	430a      	orrs	r2, r1
 80074a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	69da      	ldr	r2, [r3, #28]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80074b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2200      	movs	r2, #0
 80074ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3708      	adds	r7, #8
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}

080074ce <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80074ce:	b580      	push	{r7, lr}
 80074d0:	b082      	sub	sp, #8
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d101      	bne.n	80074e0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	e041      	b.n	8007564 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d106      	bne.n	80074fa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 f839 	bl	800756c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2202      	movs	r2, #2
 80074fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	3304      	adds	r3, #4
 800750a:	4619      	mov	r1, r3
 800750c:	4610      	mov	r0, r2
 800750e:	f000 f9d7 	bl	80078c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2201      	movs	r2, #1
 8007516:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2201      	movs	r2, #1
 800751e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2201      	movs	r2, #1
 8007526:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2201      	movs	r2, #1
 800752e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2201      	movs	r2, #1
 8007536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2201      	movs	r2, #1
 800753e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2201      	movs	r2, #1
 8007546:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2201      	movs	r2, #1
 800754e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2201      	movs	r2, #1
 8007556:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2201      	movs	r2, #1
 800755e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007562:	2300      	movs	r3, #0
}
 8007564:	4618      	mov	r0, r3
 8007566:	3708      	adds	r7, #8
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007574:	bf00      	nop
 8007576:	370c      	adds	r7, #12
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007580:	b480      	push	{r7}
 8007582:	b085      	sub	sp, #20
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800758e:	b2db      	uxtb	r3, r3
 8007590:	2b01      	cmp	r3, #1
 8007592:	d001      	beq.n	8007598 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007594:	2301      	movs	r3, #1
 8007596:	e04e      	b.n	8007636 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2202      	movs	r2, #2
 800759c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68da      	ldr	r2, [r3, #12]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f042 0201 	orr.w	r2, r2, #1
 80075ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a23      	ldr	r2, [pc, #140]	; (8007644 <HAL_TIM_Base_Start_IT+0xc4>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d022      	beq.n	8007600 <HAL_TIM_Base_Start_IT+0x80>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075c2:	d01d      	beq.n	8007600 <HAL_TIM_Base_Start_IT+0x80>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a1f      	ldr	r2, [pc, #124]	; (8007648 <HAL_TIM_Base_Start_IT+0xc8>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d018      	beq.n	8007600 <HAL_TIM_Base_Start_IT+0x80>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a1e      	ldr	r2, [pc, #120]	; (800764c <HAL_TIM_Base_Start_IT+0xcc>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d013      	beq.n	8007600 <HAL_TIM_Base_Start_IT+0x80>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a1c      	ldr	r2, [pc, #112]	; (8007650 <HAL_TIM_Base_Start_IT+0xd0>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d00e      	beq.n	8007600 <HAL_TIM_Base_Start_IT+0x80>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a1b      	ldr	r2, [pc, #108]	; (8007654 <HAL_TIM_Base_Start_IT+0xd4>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d009      	beq.n	8007600 <HAL_TIM_Base_Start_IT+0x80>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a19      	ldr	r2, [pc, #100]	; (8007658 <HAL_TIM_Base_Start_IT+0xd8>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d004      	beq.n	8007600 <HAL_TIM_Base_Start_IT+0x80>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a18      	ldr	r2, [pc, #96]	; (800765c <HAL_TIM_Base_Start_IT+0xdc>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d111      	bne.n	8007624 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	f003 0307 	and.w	r3, r3, #7
 800760a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2b06      	cmp	r3, #6
 8007610:	d010      	beq.n	8007634 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f042 0201 	orr.w	r2, r2, #1
 8007620:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007622:	e007      	b.n	8007634 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	681a      	ldr	r2, [r3, #0]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f042 0201 	orr.w	r2, r2, #1
 8007632:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3714      	adds	r7, #20
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr
 8007642:	bf00      	nop
 8007644:	40010000 	.word	0x40010000
 8007648:	40000400 	.word	0x40000400
 800764c:	40000800 	.word	0x40000800
 8007650:	40000c00 	.word	0x40000c00
 8007654:	40010400 	.word	0x40010400
 8007658:	40014000 	.word	0x40014000
 800765c:	40001800 	.word	0x40001800

08007660 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	691b      	ldr	r3, [r3, #16]
 800766e:	f003 0302 	and.w	r3, r3, #2
 8007672:	2b02      	cmp	r3, #2
 8007674:	d122      	bne.n	80076bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	68db      	ldr	r3, [r3, #12]
 800767c:	f003 0302 	and.w	r3, r3, #2
 8007680:	2b02      	cmp	r3, #2
 8007682:	d11b      	bne.n	80076bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f06f 0202 	mvn.w	r2, #2
 800768c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2201      	movs	r2, #1
 8007692:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	699b      	ldr	r3, [r3, #24]
 800769a:	f003 0303 	and.w	r3, r3, #3
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d003      	beq.n	80076aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 f8ee 	bl	8007884 <HAL_TIM_IC_CaptureCallback>
 80076a8:	e005      	b.n	80076b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 f8e0 	bl	8007870 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 f8f1 	bl	8007898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	691b      	ldr	r3, [r3, #16]
 80076c2:	f003 0304 	and.w	r3, r3, #4
 80076c6:	2b04      	cmp	r3, #4
 80076c8:	d122      	bne.n	8007710 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	f003 0304 	and.w	r3, r3, #4
 80076d4:	2b04      	cmp	r3, #4
 80076d6:	d11b      	bne.n	8007710 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f06f 0204 	mvn.w	r2, #4
 80076e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2202      	movs	r2, #2
 80076e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	699b      	ldr	r3, [r3, #24]
 80076ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d003      	beq.n	80076fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 f8c4 	bl	8007884 <HAL_TIM_IC_CaptureCallback>
 80076fc:	e005      	b.n	800770a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 f8b6 	bl	8007870 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 f8c7 	bl	8007898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	691b      	ldr	r3, [r3, #16]
 8007716:	f003 0308 	and.w	r3, r3, #8
 800771a:	2b08      	cmp	r3, #8
 800771c:	d122      	bne.n	8007764 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	f003 0308 	and.w	r3, r3, #8
 8007728:	2b08      	cmp	r3, #8
 800772a:	d11b      	bne.n	8007764 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f06f 0208 	mvn.w	r2, #8
 8007734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2204      	movs	r2, #4
 800773a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	69db      	ldr	r3, [r3, #28]
 8007742:	f003 0303 	and.w	r3, r3, #3
 8007746:	2b00      	cmp	r3, #0
 8007748:	d003      	beq.n	8007752 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 f89a 	bl	8007884 <HAL_TIM_IC_CaptureCallback>
 8007750:	e005      	b.n	800775e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 f88c 	bl	8007870 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 f89d 	bl	8007898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	f003 0310 	and.w	r3, r3, #16
 800776e:	2b10      	cmp	r3, #16
 8007770:	d122      	bne.n	80077b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	f003 0310 	and.w	r3, r3, #16
 800777c:	2b10      	cmp	r3, #16
 800777e:	d11b      	bne.n	80077b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f06f 0210 	mvn.w	r2, #16
 8007788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2208      	movs	r2, #8
 800778e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	69db      	ldr	r3, [r3, #28]
 8007796:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800779a:	2b00      	cmp	r3, #0
 800779c:	d003      	beq.n	80077a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 f870 	bl	8007884 <HAL_TIM_IC_CaptureCallback>
 80077a4:	e005      	b.n	80077b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 f862 	bl	8007870 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 f873 	bl	8007898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	691b      	ldr	r3, [r3, #16]
 80077be:	f003 0301 	and.w	r3, r3, #1
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d10e      	bne.n	80077e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	68db      	ldr	r3, [r3, #12]
 80077cc:	f003 0301 	and.w	r3, r3, #1
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d107      	bne.n	80077e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f06f 0201 	mvn.w	r2, #1
 80077dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f7f9 fff0 	bl	80017c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	691b      	ldr	r3, [r3, #16]
 80077ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077ee:	2b80      	cmp	r3, #128	; 0x80
 80077f0:	d10e      	bne.n	8007810 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	68db      	ldr	r3, [r3, #12]
 80077f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077fc:	2b80      	cmp	r3, #128	; 0x80
 80077fe:	d107      	bne.n	8007810 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 f902 	bl	8007a14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	691b      	ldr	r3, [r3, #16]
 8007816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800781a:	2b40      	cmp	r3, #64	; 0x40
 800781c:	d10e      	bne.n	800783c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	68db      	ldr	r3, [r3, #12]
 8007824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007828:	2b40      	cmp	r3, #64	; 0x40
 800782a:	d107      	bne.n	800783c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 f838 	bl	80078ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	691b      	ldr	r3, [r3, #16]
 8007842:	f003 0320 	and.w	r3, r3, #32
 8007846:	2b20      	cmp	r3, #32
 8007848:	d10e      	bne.n	8007868 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	f003 0320 	and.w	r3, r3, #32
 8007854:	2b20      	cmp	r3, #32
 8007856:	d107      	bne.n	8007868 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f06f 0220 	mvn.w	r2, #32
 8007860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 f8cc 	bl	8007a00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007868:	bf00      	nop
 800786a:	3708      	adds	r7, #8
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007870:	b480      	push	{r7}
 8007872:	b083      	sub	sp, #12
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007878:	bf00      	nop
 800787a:	370c      	adds	r7, #12
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr

08007884 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800788c:	bf00      	nop
 800788e:	370c      	adds	r7, #12
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr

08007898 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007898:	b480      	push	{r7}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80078a0:	bf00      	nop
 80078a2:	370c      	adds	r7, #12
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr

080078ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b083      	sub	sp, #12
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80078b4:	bf00      	nop
 80078b6:	370c      	adds	r7, #12
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr

080078c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b085      	sub	sp, #20
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	4a40      	ldr	r2, [pc, #256]	; (80079d4 <TIM_Base_SetConfig+0x114>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d013      	beq.n	8007900 <TIM_Base_SetConfig+0x40>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078de:	d00f      	beq.n	8007900 <TIM_Base_SetConfig+0x40>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	4a3d      	ldr	r2, [pc, #244]	; (80079d8 <TIM_Base_SetConfig+0x118>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d00b      	beq.n	8007900 <TIM_Base_SetConfig+0x40>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	4a3c      	ldr	r2, [pc, #240]	; (80079dc <TIM_Base_SetConfig+0x11c>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d007      	beq.n	8007900 <TIM_Base_SetConfig+0x40>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4a3b      	ldr	r2, [pc, #236]	; (80079e0 <TIM_Base_SetConfig+0x120>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d003      	beq.n	8007900 <TIM_Base_SetConfig+0x40>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	4a3a      	ldr	r2, [pc, #232]	; (80079e4 <TIM_Base_SetConfig+0x124>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d108      	bne.n	8007912 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007906:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	68fa      	ldr	r2, [r7, #12]
 800790e:	4313      	orrs	r3, r2
 8007910:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	4a2f      	ldr	r2, [pc, #188]	; (80079d4 <TIM_Base_SetConfig+0x114>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d02b      	beq.n	8007972 <TIM_Base_SetConfig+0xb2>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007920:	d027      	beq.n	8007972 <TIM_Base_SetConfig+0xb2>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	4a2c      	ldr	r2, [pc, #176]	; (80079d8 <TIM_Base_SetConfig+0x118>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d023      	beq.n	8007972 <TIM_Base_SetConfig+0xb2>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4a2b      	ldr	r2, [pc, #172]	; (80079dc <TIM_Base_SetConfig+0x11c>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d01f      	beq.n	8007972 <TIM_Base_SetConfig+0xb2>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4a2a      	ldr	r2, [pc, #168]	; (80079e0 <TIM_Base_SetConfig+0x120>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d01b      	beq.n	8007972 <TIM_Base_SetConfig+0xb2>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4a29      	ldr	r2, [pc, #164]	; (80079e4 <TIM_Base_SetConfig+0x124>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d017      	beq.n	8007972 <TIM_Base_SetConfig+0xb2>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4a28      	ldr	r2, [pc, #160]	; (80079e8 <TIM_Base_SetConfig+0x128>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d013      	beq.n	8007972 <TIM_Base_SetConfig+0xb2>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4a27      	ldr	r2, [pc, #156]	; (80079ec <TIM_Base_SetConfig+0x12c>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d00f      	beq.n	8007972 <TIM_Base_SetConfig+0xb2>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4a26      	ldr	r2, [pc, #152]	; (80079f0 <TIM_Base_SetConfig+0x130>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d00b      	beq.n	8007972 <TIM_Base_SetConfig+0xb2>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4a25      	ldr	r2, [pc, #148]	; (80079f4 <TIM_Base_SetConfig+0x134>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d007      	beq.n	8007972 <TIM_Base_SetConfig+0xb2>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4a24      	ldr	r2, [pc, #144]	; (80079f8 <TIM_Base_SetConfig+0x138>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d003      	beq.n	8007972 <TIM_Base_SetConfig+0xb2>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4a23      	ldr	r2, [pc, #140]	; (80079fc <TIM_Base_SetConfig+0x13c>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d108      	bne.n	8007984 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007978:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	68db      	ldr	r3, [r3, #12]
 800797e:	68fa      	ldr	r2, [r7, #12]
 8007980:	4313      	orrs	r3, r2
 8007982:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	695b      	ldr	r3, [r3, #20]
 800798e:	4313      	orrs	r3, r2
 8007990:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	68fa      	ldr	r2, [r7, #12]
 8007996:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	689a      	ldr	r2, [r3, #8]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	681a      	ldr	r2, [r3, #0]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	4a0a      	ldr	r2, [pc, #40]	; (80079d4 <TIM_Base_SetConfig+0x114>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d003      	beq.n	80079b8 <TIM_Base_SetConfig+0xf8>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	4a0c      	ldr	r2, [pc, #48]	; (80079e4 <TIM_Base_SetConfig+0x124>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d103      	bne.n	80079c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	691a      	ldr	r2, [r3, #16]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	615a      	str	r2, [r3, #20]
}
 80079c6:	bf00      	nop
 80079c8:	3714      	adds	r7, #20
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr
 80079d2:	bf00      	nop
 80079d4:	40010000 	.word	0x40010000
 80079d8:	40000400 	.word	0x40000400
 80079dc:	40000800 	.word	0x40000800
 80079e0:	40000c00 	.word	0x40000c00
 80079e4:	40010400 	.word	0x40010400
 80079e8:	40014000 	.word	0x40014000
 80079ec:	40014400 	.word	0x40014400
 80079f0:	40014800 	.word	0x40014800
 80079f4:	40001800 	.word	0x40001800
 80079f8:	40001c00 	.word	0x40001c00
 80079fc:	40002000 	.word	0x40002000

08007a00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b083      	sub	sp, #12
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a08:	bf00      	nop
 8007a0a:	370c      	adds	r7, #12
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr

08007a14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b083      	sub	sp, #12
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a1c:	bf00      	nop
 8007a1e:	370c      	adds	r7, #12
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr

08007a28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b082      	sub	sp, #8
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d101      	bne.n	8007a3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	e03f      	b.n	8007aba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d106      	bne.n	8007a54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f7fa f9ba 	bl	8001dc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2224      	movs	r2, #36	; 0x24
 8007a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	68da      	ldr	r2, [r3, #12]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 f929 	bl	8007cc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	691a      	ldr	r2, [r3, #16]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007a80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	695a      	ldr	r2, [r3, #20]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007a90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	68da      	ldr	r2, [r3, #12]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007aa0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2220      	movs	r2, #32
 8007aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2220      	movs	r2, #32
 8007ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007ab8:	2300      	movs	r3, #0
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3708      	adds	r7, #8
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}

08007ac2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ac2:	b580      	push	{r7, lr}
 8007ac4:	b08a      	sub	sp, #40	; 0x28
 8007ac6:	af02      	add	r7, sp, #8
 8007ac8:	60f8      	str	r0, [r7, #12]
 8007aca:	60b9      	str	r1, [r7, #8]
 8007acc:	603b      	str	r3, [r7, #0]
 8007ace:	4613      	mov	r3, r2
 8007ad0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	2b20      	cmp	r3, #32
 8007ae0:	d17c      	bne.n	8007bdc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d002      	beq.n	8007aee <HAL_UART_Transmit+0x2c>
 8007ae8:	88fb      	ldrh	r3, [r7, #6]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d101      	bne.n	8007af2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007aee:	2301      	movs	r3, #1
 8007af0:	e075      	b.n	8007bde <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d101      	bne.n	8007b00 <HAL_UART_Transmit+0x3e>
 8007afc:	2302      	movs	r3, #2
 8007afe:	e06e      	b.n	8007bde <HAL_UART_Transmit+0x11c>
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2201      	movs	r2, #1
 8007b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2221      	movs	r2, #33	; 0x21
 8007b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b16:	f7fa fb13 	bl	8002140 <HAL_GetTick>
 8007b1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	88fa      	ldrh	r2, [r7, #6]
 8007b20:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	88fa      	ldrh	r2, [r7, #6]
 8007b26:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b30:	d108      	bne.n	8007b44 <HAL_UART_Transmit+0x82>
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	691b      	ldr	r3, [r3, #16]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d104      	bne.n	8007b44 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	61bb      	str	r3, [r7, #24]
 8007b42:	e003      	b.n	8007b4c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007b54:	e02a      	b.n	8007bac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	9300      	str	r3, [sp, #0]
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	2180      	movs	r1, #128	; 0x80
 8007b60:	68f8      	ldr	r0, [r7, #12]
 8007b62:	f000 f840 	bl	8007be6 <UART_WaitOnFlagUntilTimeout>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d001      	beq.n	8007b70 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007b6c:	2303      	movs	r3, #3
 8007b6e:	e036      	b.n	8007bde <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007b70:	69fb      	ldr	r3, [r7, #28]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d10b      	bne.n	8007b8e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007b76:	69bb      	ldr	r3, [r7, #24]
 8007b78:	881b      	ldrh	r3, [r3, #0]
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b84:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007b86:	69bb      	ldr	r3, [r7, #24]
 8007b88:	3302      	adds	r3, #2
 8007b8a:	61bb      	str	r3, [r7, #24]
 8007b8c:	e007      	b.n	8007b9e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007b8e:	69fb      	ldr	r3, [r7, #28]
 8007b90:	781a      	ldrb	r2, [r3, #0]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007b98:	69fb      	ldr	r3, [r7, #28]
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	3b01      	subs	r3, #1
 8007ba6:	b29a      	uxth	r2, r3
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d1cf      	bne.n	8007b56 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	9300      	str	r3, [sp, #0]
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	2140      	movs	r1, #64	; 0x40
 8007bc0:	68f8      	ldr	r0, [r7, #12]
 8007bc2:	f000 f810 	bl	8007be6 <UART_WaitOnFlagUntilTimeout>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d001      	beq.n	8007bd0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007bcc:	2303      	movs	r3, #3
 8007bce:	e006      	b.n	8007bde <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2220      	movs	r2, #32
 8007bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	e000      	b.n	8007bde <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007bdc:	2302      	movs	r3, #2
  }
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3720      	adds	r7, #32
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}

08007be6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007be6:	b580      	push	{r7, lr}
 8007be8:	b090      	sub	sp, #64	; 0x40
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	60f8      	str	r0, [r7, #12]
 8007bee:	60b9      	str	r1, [r7, #8]
 8007bf0:	603b      	str	r3, [r7, #0]
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bf6:	e050      	b.n	8007c9a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bfe:	d04c      	beq.n	8007c9a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007c00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d007      	beq.n	8007c16 <UART_WaitOnFlagUntilTimeout+0x30>
 8007c06:	f7fa fa9b 	bl	8002140 <HAL_GetTick>
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	1ad3      	subs	r3, r2, r3
 8007c10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d241      	bcs.n	8007c9a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	330c      	adds	r3, #12
 8007c1c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c20:	e853 3f00 	ldrex	r3, [r3]
 8007c24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c28:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	330c      	adds	r3, #12
 8007c34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007c36:	637a      	str	r2, [r7, #52]	; 0x34
 8007c38:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c3e:	e841 2300 	strex	r3, r2, [r1]
 8007c42:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d1e5      	bne.n	8007c16 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	3314      	adds	r3, #20
 8007c50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	e853 3f00 	ldrex	r3, [r3]
 8007c58:	613b      	str	r3, [r7, #16]
   return(result);
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	f023 0301 	bic.w	r3, r3, #1
 8007c60:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	3314      	adds	r3, #20
 8007c68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c6a:	623a      	str	r2, [r7, #32]
 8007c6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c6e:	69f9      	ldr	r1, [r7, #28]
 8007c70:	6a3a      	ldr	r2, [r7, #32]
 8007c72:	e841 2300 	strex	r3, r2, [r1]
 8007c76:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c78:	69bb      	ldr	r3, [r7, #24]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d1e5      	bne.n	8007c4a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2220      	movs	r2, #32
 8007c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2220      	movs	r2, #32
 8007c8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2200      	movs	r2, #0
 8007c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007c96:	2303      	movs	r3, #3
 8007c98:	e00f      	b.n	8007cba <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	4013      	ands	r3, r2
 8007ca4:	68ba      	ldr	r2, [r7, #8]
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	bf0c      	ite	eq
 8007caa:	2301      	moveq	r3, #1
 8007cac:	2300      	movne	r3, #0
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	79fb      	ldrb	r3, [r7, #7]
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d09f      	beq.n	8007bf8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007cb8:	2300      	movs	r3, #0
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3740      	adds	r7, #64	; 0x40
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
	...

08007cc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cc8:	b09f      	sub	sp, #124	; 0x7c
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007cce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	691b      	ldr	r3, [r3, #16]
 8007cd4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007cd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cda:	68d9      	ldr	r1, [r3, #12]
 8007cdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cde:	681a      	ldr	r2, [r3, #0]
 8007ce0:	ea40 0301 	orr.w	r3, r0, r1
 8007ce4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ce8:	689a      	ldr	r2, [r3, #8]
 8007cea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cec:	691b      	ldr	r3, [r3, #16]
 8007cee:	431a      	orrs	r2, r3
 8007cf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cf2:	695b      	ldr	r3, [r3, #20]
 8007cf4:	431a      	orrs	r2, r3
 8007cf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cf8:	69db      	ldr	r3, [r3, #28]
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007cfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007d08:	f021 010c 	bic.w	r1, r1, #12
 8007d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d12:	430b      	orrs	r3, r1
 8007d14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007d16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	695b      	ldr	r3, [r3, #20]
 8007d1c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007d20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d22:	6999      	ldr	r1, [r3, #24]
 8007d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	ea40 0301 	orr.w	r3, r0, r1
 8007d2c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007d2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	4bc5      	ldr	r3, [pc, #788]	; (8008048 <UART_SetConfig+0x384>)
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d004      	beq.n	8007d42 <UART_SetConfig+0x7e>
 8007d38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	4bc3      	ldr	r3, [pc, #780]	; (800804c <UART_SetConfig+0x388>)
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d103      	bne.n	8007d4a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007d42:	f7ff f9b5 	bl	80070b0 <HAL_RCC_GetPCLK2Freq>
 8007d46:	6778      	str	r0, [r7, #116]	; 0x74
 8007d48:	e002      	b.n	8007d50 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007d4a:	f7ff f99d 	bl	8007088 <HAL_RCC_GetPCLK1Freq>
 8007d4e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d52:	69db      	ldr	r3, [r3, #28]
 8007d54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d58:	f040 80b6 	bne.w	8007ec8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007d5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d5e:	461c      	mov	r4, r3
 8007d60:	f04f 0500 	mov.w	r5, #0
 8007d64:	4622      	mov	r2, r4
 8007d66:	462b      	mov	r3, r5
 8007d68:	1891      	adds	r1, r2, r2
 8007d6a:	6439      	str	r1, [r7, #64]	; 0x40
 8007d6c:	415b      	adcs	r3, r3
 8007d6e:	647b      	str	r3, [r7, #68]	; 0x44
 8007d70:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007d74:	1912      	adds	r2, r2, r4
 8007d76:	eb45 0303 	adc.w	r3, r5, r3
 8007d7a:	f04f 0000 	mov.w	r0, #0
 8007d7e:	f04f 0100 	mov.w	r1, #0
 8007d82:	00d9      	lsls	r1, r3, #3
 8007d84:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007d88:	00d0      	lsls	r0, r2, #3
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	460b      	mov	r3, r1
 8007d8e:	1911      	adds	r1, r2, r4
 8007d90:	6639      	str	r1, [r7, #96]	; 0x60
 8007d92:	416b      	adcs	r3, r5
 8007d94:	667b      	str	r3, [r7, #100]	; 0x64
 8007d96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	f04f 0300 	mov.w	r3, #0
 8007da0:	1891      	adds	r1, r2, r2
 8007da2:	63b9      	str	r1, [r7, #56]	; 0x38
 8007da4:	415b      	adcs	r3, r3
 8007da6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007da8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007dac:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007db0:	f7f8 fd6c 	bl	800088c <__aeabi_uldivmod>
 8007db4:	4602      	mov	r2, r0
 8007db6:	460b      	mov	r3, r1
 8007db8:	4ba5      	ldr	r3, [pc, #660]	; (8008050 <UART_SetConfig+0x38c>)
 8007dba:	fba3 2302 	umull	r2, r3, r3, r2
 8007dbe:	095b      	lsrs	r3, r3, #5
 8007dc0:	011e      	lsls	r6, r3, #4
 8007dc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007dc4:	461c      	mov	r4, r3
 8007dc6:	f04f 0500 	mov.w	r5, #0
 8007dca:	4622      	mov	r2, r4
 8007dcc:	462b      	mov	r3, r5
 8007dce:	1891      	adds	r1, r2, r2
 8007dd0:	6339      	str	r1, [r7, #48]	; 0x30
 8007dd2:	415b      	adcs	r3, r3
 8007dd4:	637b      	str	r3, [r7, #52]	; 0x34
 8007dd6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007dda:	1912      	adds	r2, r2, r4
 8007ddc:	eb45 0303 	adc.w	r3, r5, r3
 8007de0:	f04f 0000 	mov.w	r0, #0
 8007de4:	f04f 0100 	mov.w	r1, #0
 8007de8:	00d9      	lsls	r1, r3, #3
 8007dea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007dee:	00d0      	lsls	r0, r2, #3
 8007df0:	4602      	mov	r2, r0
 8007df2:	460b      	mov	r3, r1
 8007df4:	1911      	adds	r1, r2, r4
 8007df6:	65b9      	str	r1, [r7, #88]	; 0x58
 8007df8:	416b      	adcs	r3, r5
 8007dfa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007dfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	461a      	mov	r2, r3
 8007e02:	f04f 0300 	mov.w	r3, #0
 8007e06:	1891      	adds	r1, r2, r2
 8007e08:	62b9      	str	r1, [r7, #40]	; 0x28
 8007e0a:	415b      	adcs	r3, r3
 8007e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007e12:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007e16:	f7f8 fd39 	bl	800088c <__aeabi_uldivmod>
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	4b8c      	ldr	r3, [pc, #560]	; (8008050 <UART_SetConfig+0x38c>)
 8007e20:	fba3 1302 	umull	r1, r3, r3, r2
 8007e24:	095b      	lsrs	r3, r3, #5
 8007e26:	2164      	movs	r1, #100	; 0x64
 8007e28:	fb01 f303 	mul.w	r3, r1, r3
 8007e2c:	1ad3      	subs	r3, r2, r3
 8007e2e:	00db      	lsls	r3, r3, #3
 8007e30:	3332      	adds	r3, #50	; 0x32
 8007e32:	4a87      	ldr	r2, [pc, #540]	; (8008050 <UART_SetConfig+0x38c>)
 8007e34:	fba2 2303 	umull	r2, r3, r2, r3
 8007e38:	095b      	lsrs	r3, r3, #5
 8007e3a:	005b      	lsls	r3, r3, #1
 8007e3c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007e40:	441e      	add	r6, r3
 8007e42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e44:	4618      	mov	r0, r3
 8007e46:	f04f 0100 	mov.w	r1, #0
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	460b      	mov	r3, r1
 8007e4e:	1894      	adds	r4, r2, r2
 8007e50:	623c      	str	r4, [r7, #32]
 8007e52:	415b      	adcs	r3, r3
 8007e54:	627b      	str	r3, [r7, #36]	; 0x24
 8007e56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007e5a:	1812      	adds	r2, r2, r0
 8007e5c:	eb41 0303 	adc.w	r3, r1, r3
 8007e60:	f04f 0400 	mov.w	r4, #0
 8007e64:	f04f 0500 	mov.w	r5, #0
 8007e68:	00dd      	lsls	r5, r3, #3
 8007e6a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007e6e:	00d4      	lsls	r4, r2, #3
 8007e70:	4622      	mov	r2, r4
 8007e72:	462b      	mov	r3, r5
 8007e74:	1814      	adds	r4, r2, r0
 8007e76:	653c      	str	r4, [r7, #80]	; 0x50
 8007e78:	414b      	adcs	r3, r1
 8007e7a:	657b      	str	r3, [r7, #84]	; 0x54
 8007e7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	461a      	mov	r2, r3
 8007e82:	f04f 0300 	mov.w	r3, #0
 8007e86:	1891      	adds	r1, r2, r2
 8007e88:	61b9      	str	r1, [r7, #24]
 8007e8a:	415b      	adcs	r3, r3
 8007e8c:	61fb      	str	r3, [r7, #28]
 8007e8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e92:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007e96:	f7f8 fcf9 	bl	800088c <__aeabi_uldivmod>
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	460b      	mov	r3, r1
 8007e9e:	4b6c      	ldr	r3, [pc, #432]	; (8008050 <UART_SetConfig+0x38c>)
 8007ea0:	fba3 1302 	umull	r1, r3, r3, r2
 8007ea4:	095b      	lsrs	r3, r3, #5
 8007ea6:	2164      	movs	r1, #100	; 0x64
 8007ea8:	fb01 f303 	mul.w	r3, r1, r3
 8007eac:	1ad3      	subs	r3, r2, r3
 8007eae:	00db      	lsls	r3, r3, #3
 8007eb0:	3332      	adds	r3, #50	; 0x32
 8007eb2:	4a67      	ldr	r2, [pc, #412]	; (8008050 <UART_SetConfig+0x38c>)
 8007eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8007eb8:	095b      	lsrs	r3, r3, #5
 8007eba:	f003 0207 	and.w	r2, r3, #7
 8007ebe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4432      	add	r2, r6
 8007ec4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007ec6:	e0b9      	b.n	800803c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ec8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007eca:	461c      	mov	r4, r3
 8007ecc:	f04f 0500 	mov.w	r5, #0
 8007ed0:	4622      	mov	r2, r4
 8007ed2:	462b      	mov	r3, r5
 8007ed4:	1891      	adds	r1, r2, r2
 8007ed6:	6139      	str	r1, [r7, #16]
 8007ed8:	415b      	adcs	r3, r3
 8007eda:	617b      	str	r3, [r7, #20]
 8007edc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007ee0:	1912      	adds	r2, r2, r4
 8007ee2:	eb45 0303 	adc.w	r3, r5, r3
 8007ee6:	f04f 0000 	mov.w	r0, #0
 8007eea:	f04f 0100 	mov.w	r1, #0
 8007eee:	00d9      	lsls	r1, r3, #3
 8007ef0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007ef4:	00d0      	lsls	r0, r2, #3
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	460b      	mov	r3, r1
 8007efa:	eb12 0804 	adds.w	r8, r2, r4
 8007efe:	eb43 0905 	adc.w	r9, r3, r5
 8007f02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	4618      	mov	r0, r3
 8007f08:	f04f 0100 	mov.w	r1, #0
 8007f0c:	f04f 0200 	mov.w	r2, #0
 8007f10:	f04f 0300 	mov.w	r3, #0
 8007f14:	008b      	lsls	r3, r1, #2
 8007f16:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007f1a:	0082      	lsls	r2, r0, #2
 8007f1c:	4640      	mov	r0, r8
 8007f1e:	4649      	mov	r1, r9
 8007f20:	f7f8 fcb4 	bl	800088c <__aeabi_uldivmod>
 8007f24:	4602      	mov	r2, r0
 8007f26:	460b      	mov	r3, r1
 8007f28:	4b49      	ldr	r3, [pc, #292]	; (8008050 <UART_SetConfig+0x38c>)
 8007f2a:	fba3 2302 	umull	r2, r3, r3, r2
 8007f2e:	095b      	lsrs	r3, r3, #5
 8007f30:	011e      	lsls	r6, r3, #4
 8007f32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f34:	4618      	mov	r0, r3
 8007f36:	f04f 0100 	mov.w	r1, #0
 8007f3a:	4602      	mov	r2, r0
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	1894      	adds	r4, r2, r2
 8007f40:	60bc      	str	r4, [r7, #8]
 8007f42:	415b      	adcs	r3, r3
 8007f44:	60fb      	str	r3, [r7, #12]
 8007f46:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007f4a:	1812      	adds	r2, r2, r0
 8007f4c:	eb41 0303 	adc.w	r3, r1, r3
 8007f50:	f04f 0400 	mov.w	r4, #0
 8007f54:	f04f 0500 	mov.w	r5, #0
 8007f58:	00dd      	lsls	r5, r3, #3
 8007f5a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007f5e:	00d4      	lsls	r4, r2, #3
 8007f60:	4622      	mov	r2, r4
 8007f62:	462b      	mov	r3, r5
 8007f64:	1814      	adds	r4, r2, r0
 8007f66:	64bc      	str	r4, [r7, #72]	; 0x48
 8007f68:	414b      	adcs	r3, r1
 8007f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	4618      	mov	r0, r3
 8007f72:	f04f 0100 	mov.w	r1, #0
 8007f76:	f04f 0200 	mov.w	r2, #0
 8007f7a:	f04f 0300 	mov.w	r3, #0
 8007f7e:	008b      	lsls	r3, r1, #2
 8007f80:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007f84:	0082      	lsls	r2, r0, #2
 8007f86:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007f8a:	f7f8 fc7f 	bl	800088c <__aeabi_uldivmod>
 8007f8e:	4602      	mov	r2, r0
 8007f90:	460b      	mov	r3, r1
 8007f92:	4b2f      	ldr	r3, [pc, #188]	; (8008050 <UART_SetConfig+0x38c>)
 8007f94:	fba3 1302 	umull	r1, r3, r3, r2
 8007f98:	095b      	lsrs	r3, r3, #5
 8007f9a:	2164      	movs	r1, #100	; 0x64
 8007f9c:	fb01 f303 	mul.w	r3, r1, r3
 8007fa0:	1ad3      	subs	r3, r2, r3
 8007fa2:	011b      	lsls	r3, r3, #4
 8007fa4:	3332      	adds	r3, #50	; 0x32
 8007fa6:	4a2a      	ldr	r2, [pc, #168]	; (8008050 <UART_SetConfig+0x38c>)
 8007fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8007fac:	095b      	lsrs	r3, r3, #5
 8007fae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007fb2:	441e      	add	r6, r3
 8007fb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f04f 0100 	mov.w	r1, #0
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	460b      	mov	r3, r1
 8007fc0:	1894      	adds	r4, r2, r2
 8007fc2:	603c      	str	r4, [r7, #0]
 8007fc4:	415b      	adcs	r3, r3
 8007fc6:	607b      	str	r3, [r7, #4]
 8007fc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fcc:	1812      	adds	r2, r2, r0
 8007fce:	eb41 0303 	adc.w	r3, r1, r3
 8007fd2:	f04f 0400 	mov.w	r4, #0
 8007fd6:	f04f 0500 	mov.w	r5, #0
 8007fda:	00dd      	lsls	r5, r3, #3
 8007fdc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007fe0:	00d4      	lsls	r4, r2, #3
 8007fe2:	4622      	mov	r2, r4
 8007fe4:	462b      	mov	r3, r5
 8007fe6:	eb12 0a00 	adds.w	sl, r2, r0
 8007fea:	eb43 0b01 	adc.w	fp, r3, r1
 8007fee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f04f 0100 	mov.w	r1, #0
 8007ff8:	f04f 0200 	mov.w	r2, #0
 8007ffc:	f04f 0300 	mov.w	r3, #0
 8008000:	008b      	lsls	r3, r1, #2
 8008002:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008006:	0082      	lsls	r2, r0, #2
 8008008:	4650      	mov	r0, sl
 800800a:	4659      	mov	r1, fp
 800800c:	f7f8 fc3e 	bl	800088c <__aeabi_uldivmod>
 8008010:	4602      	mov	r2, r0
 8008012:	460b      	mov	r3, r1
 8008014:	4b0e      	ldr	r3, [pc, #56]	; (8008050 <UART_SetConfig+0x38c>)
 8008016:	fba3 1302 	umull	r1, r3, r3, r2
 800801a:	095b      	lsrs	r3, r3, #5
 800801c:	2164      	movs	r1, #100	; 0x64
 800801e:	fb01 f303 	mul.w	r3, r1, r3
 8008022:	1ad3      	subs	r3, r2, r3
 8008024:	011b      	lsls	r3, r3, #4
 8008026:	3332      	adds	r3, #50	; 0x32
 8008028:	4a09      	ldr	r2, [pc, #36]	; (8008050 <UART_SetConfig+0x38c>)
 800802a:	fba2 2303 	umull	r2, r3, r2, r3
 800802e:	095b      	lsrs	r3, r3, #5
 8008030:	f003 020f 	and.w	r2, r3, #15
 8008034:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4432      	add	r2, r6
 800803a:	609a      	str	r2, [r3, #8]
}
 800803c:	bf00      	nop
 800803e:	377c      	adds	r7, #124	; 0x7c
 8008040:	46bd      	mov	sp, r7
 8008042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008046:	bf00      	nop
 8008048:	40011000 	.word	0x40011000
 800804c:	40011400 	.word	0x40011400
 8008050:	51eb851f 	.word	0x51eb851f

08008054 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008054:	b084      	sub	sp, #16
 8008056:	b580      	push	{r7, lr}
 8008058:	b084      	sub	sp, #16
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
 800805e:	f107 001c 	add.w	r0, r7, #28
 8008062:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008068:	2b01      	cmp	r3, #1
 800806a:	d122      	bne.n	80080b2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008070:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	68db      	ldr	r3, [r3, #12]
 800807c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008080:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	68db      	ldr	r3, [r3, #12]
 800808c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008094:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008096:	2b01      	cmp	r3, #1
 8008098:	d105      	bne.n	80080a6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	68db      	ldr	r3, [r3, #12]
 800809e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 f9a0 	bl	80083ec <USB_CoreReset>
 80080ac:	4603      	mov	r3, r0
 80080ae:	73fb      	strb	r3, [r7, #15]
 80080b0:	e01a      	b.n	80080e8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	68db      	ldr	r3, [r3, #12]
 80080b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 f994 	bl	80083ec <USB_CoreReset>
 80080c4:	4603      	mov	r3, r0
 80080c6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80080c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d106      	bne.n	80080dc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	639a      	str	r2, [r3, #56]	; 0x38
 80080da:	e005      	b.n	80080e8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80080e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	d10b      	bne.n	8008106 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	689b      	ldr	r3, [r3, #8]
 80080f2:	f043 0206 	orr.w	r2, r3, #6
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	689b      	ldr	r3, [r3, #8]
 80080fe:	f043 0220 	orr.w	r2, r3, #32
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008106:	7bfb      	ldrb	r3, [r7, #15]
}
 8008108:	4618      	mov	r0, r3
 800810a:	3710      	adds	r7, #16
 800810c:	46bd      	mov	sp, r7
 800810e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008112:	b004      	add	sp, #16
 8008114:	4770      	bx	lr

08008116 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008116:	b480      	push	{r7}
 8008118:	b083      	sub	sp, #12
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	f043 0201 	orr.w	r2, r3, #1
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800812a:	2300      	movs	r3, #0
}
 800812c:	4618      	mov	r0, r3
 800812e:	370c      	adds	r7, #12
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr

08008138 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008138:	b480      	push	{r7}
 800813a:	b083      	sub	sp, #12
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	f023 0201 	bic.w	r2, r3, #1
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800814c:	2300      	movs	r3, #0
}
 800814e:	4618      	mov	r0, r3
 8008150:	370c      	adds	r7, #12
 8008152:	46bd      	mov	sp, r7
 8008154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008158:	4770      	bx	lr

0800815a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800815a:	b580      	push	{r7, lr}
 800815c:	b084      	sub	sp, #16
 800815e:	af00      	add	r7, sp, #0
 8008160:	6078      	str	r0, [r7, #4]
 8008162:	460b      	mov	r3, r1
 8008164:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008166:	2300      	movs	r3, #0
 8008168:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	68db      	ldr	r3, [r3, #12]
 800816e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008176:	78fb      	ldrb	r3, [r7, #3]
 8008178:	2b01      	cmp	r3, #1
 800817a:	d115      	bne.n	80081a8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	68db      	ldr	r3, [r3, #12]
 8008180:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008188:	2001      	movs	r0, #1
 800818a:	f7f9 ffe5 	bl	8002158 <HAL_Delay>
      ms++;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	3301      	adds	r3, #1
 8008192:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 f91a 	bl	80083ce <USB_GetMode>
 800819a:	4603      	mov	r3, r0
 800819c:	2b01      	cmp	r3, #1
 800819e:	d01e      	beq.n	80081de <USB_SetCurrentMode+0x84>
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2b31      	cmp	r3, #49	; 0x31
 80081a4:	d9f0      	bls.n	8008188 <USB_SetCurrentMode+0x2e>
 80081a6:	e01a      	b.n	80081de <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80081a8:	78fb      	ldrb	r3, [r7, #3]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d115      	bne.n	80081da <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	68db      	ldr	r3, [r3, #12]
 80081b2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80081ba:	2001      	movs	r0, #1
 80081bc:	f7f9 ffcc 	bl	8002158 <HAL_Delay>
      ms++;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	3301      	adds	r3, #1
 80081c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 f901 	bl	80083ce <USB_GetMode>
 80081cc:	4603      	mov	r3, r0
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d005      	beq.n	80081de <USB_SetCurrentMode+0x84>
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2b31      	cmp	r3, #49	; 0x31
 80081d6:	d9f0      	bls.n	80081ba <USB_SetCurrentMode+0x60>
 80081d8:	e001      	b.n	80081de <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80081da:	2301      	movs	r3, #1
 80081dc:	e005      	b.n	80081ea <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2b32      	cmp	r3, #50	; 0x32
 80081e2:	d101      	bne.n	80081e8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80081e4:	2301      	movs	r3, #1
 80081e6:	e000      	b.n	80081ea <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80081e8:	2300      	movs	r3, #0
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3710      	adds	r7, #16
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
	...

080081f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b085      	sub	sp, #20
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80081fe:	2300      	movs	r3, #0
 8008200:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	019b      	lsls	r3, r3, #6
 8008206:	f043 0220 	orr.w	r2, r3, #32
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	3301      	adds	r3, #1
 8008212:	60fb      	str	r3, [r7, #12]
 8008214:	4a08      	ldr	r2, [pc, #32]	; (8008238 <USB_FlushTxFifo+0x44>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d901      	bls.n	800821e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800821a:	2303      	movs	r3, #3
 800821c:	e006      	b.n	800822c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	691b      	ldr	r3, [r3, #16]
 8008222:	f003 0320 	and.w	r3, r3, #32
 8008226:	2b20      	cmp	r3, #32
 8008228:	d0f1      	beq.n	800820e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800822a:	2300      	movs	r3, #0
}
 800822c:	4618      	mov	r0, r3
 800822e:	3714      	adds	r7, #20
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr
 8008238:	00030d40 	.word	0x00030d40

0800823c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800823c:	b480      	push	{r7}
 800823e:	b085      	sub	sp, #20
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008244:	2300      	movs	r3, #0
 8008246:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2210      	movs	r2, #16
 800824c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	3301      	adds	r3, #1
 8008252:	60fb      	str	r3, [r7, #12]
 8008254:	4a08      	ldr	r2, [pc, #32]	; (8008278 <USB_FlushRxFifo+0x3c>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d901      	bls.n	800825e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800825a:	2303      	movs	r3, #3
 800825c:	e006      	b.n	800826c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	691b      	ldr	r3, [r3, #16]
 8008262:	f003 0310 	and.w	r3, r3, #16
 8008266:	2b10      	cmp	r3, #16
 8008268:	d0f1      	beq.n	800824e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800826a:	2300      	movs	r3, #0
}
 800826c:	4618      	mov	r0, r3
 800826e:	3714      	adds	r7, #20
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr
 8008278:	00030d40 	.word	0x00030d40

0800827c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800827c:	b480      	push	{r7}
 800827e:	b089      	sub	sp, #36	; 0x24
 8008280:	af00      	add	r7, sp, #0
 8008282:	60f8      	str	r0, [r7, #12]
 8008284:	60b9      	str	r1, [r7, #8]
 8008286:	4611      	mov	r1, r2
 8008288:	461a      	mov	r2, r3
 800828a:	460b      	mov	r3, r1
 800828c:	71fb      	strb	r3, [r7, #7]
 800828e:	4613      	mov	r3, r2
 8008290:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800829a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d123      	bne.n	80082ea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80082a2:	88bb      	ldrh	r3, [r7, #4]
 80082a4:	3303      	adds	r3, #3
 80082a6:	089b      	lsrs	r3, r3, #2
 80082a8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80082aa:	2300      	movs	r3, #0
 80082ac:	61bb      	str	r3, [r7, #24]
 80082ae:	e018      	b.n	80082e2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80082b0:	79fb      	ldrb	r3, [r7, #7]
 80082b2:	031a      	lsls	r2, r3, #12
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	4413      	add	r3, r2
 80082b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082bc:	461a      	mov	r2, r3
 80082be:	69fb      	ldr	r3, [r7, #28]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80082c4:	69fb      	ldr	r3, [r7, #28]
 80082c6:	3301      	adds	r3, #1
 80082c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80082ca:	69fb      	ldr	r3, [r7, #28]
 80082cc:	3301      	adds	r3, #1
 80082ce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80082d0:	69fb      	ldr	r3, [r7, #28]
 80082d2:	3301      	adds	r3, #1
 80082d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80082d6:	69fb      	ldr	r3, [r7, #28]
 80082d8:	3301      	adds	r3, #1
 80082da:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80082dc:	69bb      	ldr	r3, [r7, #24]
 80082de:	3301      	adds	r3, #1
 80082e0:	61bb      	str	r3, [r7, #24]
 80082e2:	69ba      	ldr	r2, [r7, #24]
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d3e2      	bcc.n	80082b0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80082ea:	2300      	movs	r3, #0
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3724      	adds	r7, #36	; 0x24
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr

080082f8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b08b      	sub	sp, #44	; 0x2c
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	60f8      	str	r0, [r7, #12]
 8008300:	60b9      	str	r1, [r7, #8]
 8008302:	4613      	mov	r3, r2
 8008304:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800830e:	88fb      	ldrh	r3, [r7, #6]
 8008310:	089b      	lsrs	r3, r3, #2
 8008312:	b29b      	uxth	r3, r3
 8008314:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008316:	88fb      	ldrh	r3, [r7, #6]
 8008318:	f003 0303 	and.w	r3, r3, #3
 800831c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800831e:	2300      	movs	r3, #0
 8008320:	623b      	str	r3, [r7, #32]
 8008322:	e014      	b.n	800834e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008324:	69bb      	ldr	r3, [r7, #24]
 8008326:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800832a:	681a      	ldr	r2, [r3, #0]
 800832c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008332:	3301      	adds	r3, #1
 8008334:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008338:	3301      	adds	r3, #1
 800833a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800833c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833e:	3301      	adds	r3, #1
 8008340:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008344:	3301      	adds	r3, #1
 8008346:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008348:	6a3b      	ldr	r3, [r7, #32]
 800834a:	3301      	adds	r3, #1
 800834c:	623b      	str	r3, [r7, #32]
 800834e:	6a3a      	ldr	r2, [r7, #32]
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	429a      	cmp	r2, r3
 8008354:	d3e6      	bcc.n	8008324 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008356:	8bfb      	ldrh	r3, [r7, #30]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d01e      	beq.n	800839a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800835c:	2300      	movs	r3, #0
 800835e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008360:	69bb      	ldr	r3, [r7, #24]
 8008362:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008366:	461a      	mov	r2, r3
 8008368:	f107 0310 	add.w	r3, r7, #16
 800836c:	6812      	ldr	r2, [r2, #0]
 800836e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008370:	693a      	ldr	r2, [r7, #16]
 8008372:	6a3b      	ldr	r3, [r7, #32]
 8008374:	b2db      	uxtb	r3, r3
 8008376:	00db      	lsls	r3, r3, #3
 8008378:	fa22 f303 	lsr.w	r3, r2, r3
 800837c:	b2da      	uxtb	r2, r3
 800837e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008380:	701a      	strb	r2, [r3, #0]
      i++;
 8008382:	6a3b      	ldr	r3, [r7, #32]
 8008384:	3301      	adds	r3, #1
 8008386:	623b      	str	r3, [r7, #32]
      pDest++;
 8008388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838a:	3301      	adds	r3, #1
 800838c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800838e:	8bfb      	ldrh	r3, [r7, #30]
 8008390:	3b01      	subs	r3, #1
 8008392:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008394:	8bfb      	ldrh	r3, [r7, #30]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d1ea      	bne.n	8008370 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800839a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800839c:	4618      	mov	r0, r3
 800839e:	372c      	adds	r7, #44	; 0x2c
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr

080083a8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b085      	sub	sp, #20
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	695b      	ldr	r3, [r3, #20]
 80083b4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	699b      	ldr	r3, [r3, #24]
 80083ba:	68fa      	ldr	r2, [r7, #12]
 80083bc:	4013      	ands	r3, r2
 80083be:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80083c0:	68fb      	ldr	r3, [r7, #12]
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3714      	adds	r7, #20
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr

080083ce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80083ce:	b480      	push	{r7}
 80083d0:	b083      	sub	sp, #12
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	695b      	ldr	r3, [r3, #20]
 80083da:	f003 0301 	and.w	r3, r3, #1
}
 80083de:	4618      	mov	r0, r3
 80083e0:	370c      	adds	r7, #12
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr
	...

080083ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b085      	sub	sp, #20
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80083f4:	2300      	movs	r3, #0
 80083f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	3301      	adds	r3, #1
 80083fc:	60fb      	str	r3, [r7, #12]
 80083fe:	4a13      	ldr	r2, [pc, #76]	; (800844c <USB_CoreReset+0x60>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d901      	bls.n	8008408 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8008404:	2303      	movs	r3, #3
 8008406:	e01a      	b.n	800843e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	691b      	ldr	r3, [r3, #16]
 800840c:	2b00      	cmp	r3, #0
 800840e:	daf3      	bge.n	80083f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008410:	2300      	movs	r3, #0
 8008412:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	691b      	ldr	r3, [r3, #16]
 8008418:	f043 0201 	orr.w	r2, r3, #1
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	3301      	adds	r3, #1
 8008424:	60fb      	str	r3, [r7, #12]
 8008426:	4a09      	ldr	r2, [pc, #36]	; (800844c <USB_CoreReset+0x60>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d901      	bls.n	8008430 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800842c:	2303      	movs	r3, #3
 800842e:	e006      	b.n	800843e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	691b      	ldr	r3, [r3, #16]
 8008434:	f003 0301 	and.w	r3, r3, #1
 8008438:	2b01      	cmp	r3, #1
 800843a:	d0f1      	beq.n	8008420 <USB_CoreReset+0x34>

  return HAL_OK;
 800843c:	2300      	movs	r3, #0
}
 800843e:	4618      	mov	r0, r3
 8008440:	3714      	adds	r7, #20
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr
 800844a:	bf00      	nop
 800844c:	00030d40 	.word	0x00030d40

08008450 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008450:	b084      	sub	sp, #16
 8008452:	b580      	push	{r7, lr}
 8008454:	b084      	sub	sp, #16
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
 800845a:	f107 001c 	add.w	r0, r7, #28
 800845e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800846c:	461a      	mov	r2, r3
 800846e:	2300      	movs	r3, #0
 8008470:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008476:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008482:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800848e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800849a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d018      	beq.n	80084d4 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80084a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d10a      	bne.n	80084be <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	68ba      	ldr	r2, [r7, #8]
 80084b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80084b6:	f043 0304 	orr.w	r3, r3, #4
 80084ba:	6013      	str	r3, [r2, #0]
 80084bc:	e014      	b.n	80084e8 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	68ba      	ldr	r2, [r7, #8]
 80084c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80084cc:	f023 0304 	bic.w	r3, r3, #4
 80084d0:	6013      	str	r3, [r2, #0]
 80084d2:	e009      	b.n	80084e8 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	68ba      	ldr	r2, [r7, #8]
 80084de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80084e2:	f023 0304 	bic.w	r3, r3, #4
 80084e6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80084e8:	2110      	movs	r1, #16
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f7ff fe82 	bl	80081f4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f7ff fea3 	bl	800823c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80084f6:	2300      	movs	r3, #0
 80084f8:	60fb      	str	r3, [r7, #12]
 80084fa:	e015      	b.n	8008528 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	015a      	lsls	r2, r3, #5
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	4413      	add	r3, r2
 8008504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008508:	461a      	mov	r2, r3
 800850a:	f04f 33ff 	mov.w	r3, #4294967295
 800850e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	015a      	lsls	r2, r3, #5
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	4413      	add	r3, r2
 8008518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800851c:	461a      	mov	r2, r3
 800851e:	2300      	movs	r3, #0
 8008520:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	3301      	adds	r3, #1
 8008526:	60fb      	str	r3, [r7, #12]
 8008528:	6a3b      	ldr	r3, [r7, #32]
 800852a:	68fa      	ldr	r2, [r7, #12]
 800852c:	429a      	cmp	r2, r3
 800852e:	d3e5      	bcc.n	80084fc <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2200      	movs	r2, #0
 8008534:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f04f 32ff 	mov.w	r2, #4294967295
 800853c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008546:	2b00      	cmp	r3, #0
 8008548:	d00b      	beq.n	8008562 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008550:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4a13      	ldr	r2, [pc, #76]	; (80085a4 <USB_HostInit+0x154>)
 8008556:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	4a13      	ldr	r2, [pc, #76]	; (80085a8 <USB_HostInit+0x158>)
 800855c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008560:	e009      	b.n	8008576 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2280      	movs	r2, #128	; 0x80
 8008566:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	4a10      	ldr	r2, [pc, #64]	; (80085ac <USB_HostInit+0x15c>)
 800856c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	4a0f      	ldr	r2, [pc, #60]	; (80085b0 <USB_HostInit+0x160>)
 8008572:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008578:	2b00      	cmp	r3, #0
 800857a:	d105      	bne.n	8008588 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	699b      	ldr	r3, [r3, #24]
 8008580:	f043 0210 	orr.w	r2, r3, #16
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	699a      	ldr	r2, [r3, #24]
 800858c:	4b09      	ldr	r3, [pc, #36]	; (80085b4 <USB_HostInit+0x164>)
 800858e:	4313      	orrs	r3, r2
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8008594:	2300      	movs	r3, #0
}
 8008596:	4618      	mov	r0, r3
 8008598:	3710      	adds	r7, #16
 800859a:	46bd      	mov	sp, r7
 800859c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80085a0:	b004      	add	sp, #16
 80085a2:	4770      	bx	lr
 80085a4:	01000200 	.word	0x01000200
 80085a8:	00e00300 	.word	0x00e00300
 80085ac:	00600080 	.word	0x00600080
 80085b0:	004000e0 	.word	0x004000e0
 80085b4:	a3200008 	.word	0xa3200008

080085b8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b085      	sub	sp, #20
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	460b      	mov	r3, r1
 80085c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	68fa      	ldr	r2, [r7, #12]
 80085d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80085d6:	f023 0303 	bic.w	r3, r3, #3
 80085da:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80085e2:	681a      	ldr	r2, [r3, #0]
 80085e4:	78fb      	ldrb	r3, [r7, #3]
 80085e6:	f003 0303 	and.w	r3, r3, #3
 80085ea:	68f9      	ldr	r1, [r7, #12]
 80085ec:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80085f0:	4313      	orrs	r3, r2
 80085f2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80085f4:	78fb      	ldrb	r3, [r7, #3]
 80085f6:	2b01      	cmp	r3, #1
 80085f8:	d107      	bne.n	800860a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008600:	461a      	mov	r2, r3
 8008602:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008606:	6053      	str	r3, [r2, #4]
 8008608:	e009      	b.n	800861e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800860a:	78fb      	ldrb	r3, [r7, #3]
 800860c:	2b02      	cmp	r3, #2
 800860e:	d106      	bne.n	800861e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008616:	461a      	mov	r2, r3
 8008618:	f241 7370 	movw	r3, #6000	; 0x1770
 800861c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800861e:	2300      	movs	r3, #0
}
 8008620:	4618      	mov	r0, r3
 8008622:	3714      	adds	r7, #20
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr

0800862c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008638:	2300      	movs	r3, #0
 800863a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800864c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	68fa      	ldr	r2, [r7, #12]
 8008652:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008656:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800865a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800865c:	2064      	movs	r0, #100	; 0x64
 800865e:	f7f9 fd7b 	bl	8002158 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	68fa      	ldr	r2, [r7, #12]
 8008666:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800866a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800866e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008670:	200a      	movs	r0, #10
 8008672:	f7f9 fd71 	bl	8002158 <HAL_Delay>

  return HAL_OK;
 8008676:	2300      	movs	r3, #0
}
 8008678:	4618      	mov	r0, r3
 800867a:	3710      	adds	r7, #16
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008680:	b480      	push	{r7}
 8008682:	b085      	sub	sp, #20
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	460b      	mov	r3, r1
 800868a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008690:	2300      	movs	r3, #0
 8008692:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80086a4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d109      	bne.n	80086c4 <USB_DriveVbus+0x44>
 80086b0:	78fb      	ldrb	r3, [r7, #3]
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d106      	bne.n	80086c4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	68fa      	ldr	r2, [r7, #12]
 80086ba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80086be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80086c2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80086ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086ce:	d109      	bne.n	80086e4 <USB_DriveVbus+0x64>
 80086d0:	78fb      	ldrb	r3, [r7, #3]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d106      	bne.n	80086e4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	68fa      	ldr	r2, [r7, #12]
 80086da:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80086de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80086e2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80086e4:	2300      	movs	r3, #0
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3714      	adds	r7, #20
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr

080086f2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80086f2:	b480      	push	{r7}
 80086f4:	b085      	sub	sp, #20
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80086fe:	2300      	movs	r3, #0
 8008700:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	0c5b      	lsrs	r3, r3, #17
 8008710:	f003 0303 	and.w	r3, r3, #3
}
 8008714:	4618      	mov	r0, r3
 8008716:	3714      	adds	r7, #20
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr

08008720 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008720:	b480      	push	{r7}
 8008722:	b085      	sub	sp, #20
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	b29b      	uxth	r3, r3
}
 8008736:	4618      	mov	r0, r3
 8008738:	3714      	adds	r7, #20
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr
	...

08008744 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b088      	sub	sp, #32
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	4608      	mov	r0, r1
 800874e:	4611      	mov	r1, r2
 8008750:	461a      	mov	r2, r3
 8008752:	4603      	mov	r3, r0
 8008754:	70fb      	strb	r3, [r7, #3]
 8008756:	460b      	mov	r3, r1
 8008758:	70bb      	strb	r3, [r7, #2]
 800875a:	4613      	mov	r3, r2
 800875c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800875e:	2300      	movs	r3, #0
 8008760:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8008766:	78fb      	ldrb	r3, [r7, #3]
 8008768:	015a      	lsls	r2, r3, #5
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	4413      	add	r3, r2
 800876e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008772:	461a      	mov	r2, r3
 8008774:	f04f 33ff 	mov.w	r3, #4294967295
 8008778:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800877a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800877e:	2b03      	cmp	r3, #3
 8008780:	d87e      	bhi.n	8008880 <USB_HC_Init+0x13c>
 8008782:	a201      	add	r2, pc, #4	; (adr r2, 8008788 <USB_HC_Init+0x44>)
 8008784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008788:	08008799 	.word	0x08008799
 800878c:	08008843 	.word	0x08008843
 8008790:	08008799 	.word	0x08008799
 8008794:	08008805 	.word	0x08008805
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008798:	78fb      	ldrb	r3, [r7, #3]
 800879a:	015a      	lsls	r2, r3, #5
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	4413      	add	r3, r2
 80087a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087a4:	461a      	mov	r2, r3
 80087a6:	f240 439d 	movw	r3, #1181	; 0x49d
 80087aa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80087ac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	da10      	bge.n	80087d6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80087b4:	78fb      	ldrb	r3, [r7, #3]
 80087b6:	015a      	lsls	r2, r3, #5
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	4413      	add	r3, r2
 80087bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087c0:	68db      	ldr	r3, [r3, #12]
 80087c2:	78fa      	ldrb	r2, [r7, #3]
 80087c4:	0151      	lsls	r1, r2, #5
 80087c6:	693a      	ldr	r2, [r7, #16]
 80087c8:	440a      	add	r2, r1
 80087ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087d2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80087d4:	e057      	b.n	8008886 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d051      	beq.n	8008886 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80087e2:	78fb      	ldrb	r3, [r7, #3]
 80087e4:	015a      	lsls	r2, r3, #5
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	4413      	add	r3, r2
 80087ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087ee:	68db      	ldr	r3, [r3, #12]
 80087f0:	78fa      	ldrb	r2, [r7, #3]
 80087f2:	0151      	lsls	r1, r2, #5
 80087f4:	693a      	ldr	r2, [r7, #16]
 80087f6:	440a      	add	r2, r1
 80087f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087fc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008800:	60d3      	str	r3, [r2, #12]
      break;
 8008802:	e040      	b.n	8008886 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008804:	78fb      	ldrb	r3, [r7, #3]
 8008806:	015a      	lsls	r2, r3, #5
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	4413      	add	r3, r2
 800880c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008810:	461a      	mov	r2, r3
 8008812:	f240 639d 	movw	r3, #1693	; 0x69d
 8008816:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008818:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800881c:	2b00      	cmp	r3, #0
 800881e:	da34      	bge.n	800888a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008820:	78fb      	ldrb	r3, [r7, #3]
 8008822:	015a      	lsls	r2, r3, #5
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	4413      	add	r3, r2
 8008828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	78fa      	ldrb	r2, [r7, #3]
 8008830:	0151      	lsls	r1, r2, #5
 8008832:	693a      	ldr	r2, [r7, #16]
 8008834:	440a      	add	r2, r1
 8008836:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800883a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800883e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008840:	e023      	b.n	800888a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008842:	78fb      	ldrb	r3, [r7, #3]
 8008844:	015a      	lsls	r2, r3, #5
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	4413      	add	r3, r2
 800884a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800884e:	461a      	mov	r2, r3
 8008850:	f240 2325 	movw	r3, #549	; 0x225
 8008854:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008856:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800885a:	2b00      	cmp	r3, #0
 800885c:	da17      	bge.n	800888e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800885e:	78fb      	ldrb	r3, [r7, #3]
 8008860:	015a      	lsls	r2, r3, #5
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	4413      	add	r3, r2
 8008866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800886a:	68db      	ldr	r3, [r3, #12]
 800886c:	78fa      	ldrb	r2, [r7, #3]
 800886e:	0151      	lsls	r1, r2, #5
 8008870:	693a      	ldr	r2, [r7, #16]
 8008872:	440a      	add	r2, r1
 8008874:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008878:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800887c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800887e:	e006      	b.n	800888e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008880:	2301      	movs	r3, #1
 8008882:	77fb      	strb	r3, [r7, #31]
      break;
 8008884:	e004      	b.n	8008890 <USB_HC_Init+0x14c>
      break;
 8008886:	bf00      	nop
 8008888:	e002      	b.n	8008890 <USB_HC_Init+0x14c>
      break;
 800888a:	bf00      	nop
 800888c:	e000      	b.n	8008890 <USB_HC_Init+0x14c>
      break;
 800888e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008896:	699a      	ldr	r2, [r3, #24]
 8008898:	78fb      	ldrb	r3, [r7, #3]
 800889a:	f003 030f 	and.w	r3, r3, #15
 800889e:	2101      	movs	r1, #1
 80088a0:	fa01 f303 	lsl.w	r3, r1, r3
 80088a4:	6939      	ldr	r1, [r7, #16]
 80088a6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80088aa:	4313      	orrs	r3, r2
 80088ac:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	699b      	ldr	r3, [r3, #24]
 80088b2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80088ba:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	da03      	bge.n	80088ca <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80088c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088c6:	61bb      	str	r3, [r7, #24]
 80088c8:	e001      	b.n	80088ce <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80088ca:	2300      	movs	r3, #0
 80088cc:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f7ff ff0f 	bl	80086f2 <USB_GetHostSpeed>
 80088d4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80088d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80088da:	2b02      	cmp	r3, #2
 80088dc:	d106      	bne.n	80088ec <USB_HC_Init+0x1a8>
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2b02      	cmp	r3, #2
 80088e2:	d003      	beq.n	80088ec <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80088e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80088e8:	617b      	str	r3, [r7, #20]
 80088ea:	e001      	b.n	80088f0 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80088ec:	2300      	movs	r3, #0
 80088ee:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80088f0:	787b      	ldrb	r3, [r7, #1]
 80088f2:	059b      	lsls	r3, r3, #22
 80088f4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80088f8:	78bb      	ldrb	r3, [r7, #2]
 80088fa:	02db      	lsls	r3, r3, #11
 80088fc:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008900:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008902:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008906:	049b      	lsls	r3, r3, #18
 8008908:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800890c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800890e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008910:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008914:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008916:	69bb      	ldr	r3, [r7, #24]
 8008918:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800891a:	78fb      	ldrb	r3, [r7, #3]
 800891c:	0159      	lsls	r1, r3, #5
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	440b      	add	r3, r1
 8008922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008926:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800892c:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800892e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008932:	2b03      	cmp	r3, #3
 8008934:	d10f      	bne.n	8008956 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8008936:	78fb      	ldrb	r3, [r7, #3]
 8008938:	015a      	lsls	r2, r3, #5
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	4413      	add	r3, r2
 800893e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	78fa      	ldrb	r2, [r7, #3]
 8008946:	0151      	lsls	r1, r2, #5
 8008948:	693a      	ldr	r2, [r7, #16]
 800894a:	440a      	add	r2, r1
 800894c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008950:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008954:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008956:	7ffb      	ldrb	r3, [r7, #31]
}
 8008958:	4618      	mov	r0, r3
 800895a:	3720      	adds	r7, #32
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}

08008960 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b08c      	sub	sp, #48	; 0x30
 8008964:	af02      	add	r7, sp, #8
 8008966:	60f8      	str	r0, [r7, #12]
 8008968:	60b9      	str	r1, [r7, #8]
 800896a:	4613      	mov	r3, r2
 800896c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	785b      	ldrb	r3, [r3, #1]
 8008976:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008978:	f44f 7380 	mov.w	r3, #256	; 0x100
 800897c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008986:	2b00      	cmp	r3, #0
 8008988:	d02d      	beq.n	80089e6 <USB_HC_StartXfer+0x86>
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	791b      	ldrb	r3, [r3, #4]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d129      	bne.n	80089e6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8008992:	79fb      	ldrb	r3, [r7, #7]
 8008994:	2b01      	cmp	r3, #1
 8008996:	d117      	bne.n	80089c8 <USB_HC_StartXfer+0x68>
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	79db      	ldrb	r3, [r3, #7]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d003      	beq.n	80089a8 <USB_HC_StartXfer+0x48>
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	79db      	ldrb	r3, [r3, #7]
 80089a4:	2b02      	cmp	r3, #2
 80089a6:	d10f      	bne.n	80089c8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80089a8:	69fb      	ldr	r3, [r7, #28]
 80089aa:	015a      	lsls	r2, r3, #5
 80089ac:	6a3b      	ldr	r3, [r7, #32]
 80089ae:	4413      	add	r3, r2
 80089b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089b4:	68db      	ldr	r3, [r3, #12]
 80089b6:	69fa      	ldr	r2, [r7, #28]
 80089b8:	0151      	lsls	r1, r2, #5
 80089ba:	6a3a      	ldr	r2, [r7, #32]
 80089bc:	440a      	add	r2, r1
 80089be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80089c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089c6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80089c8:	79fb      	ldrb	r3, [r7, #7]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d10b      	bne.n	80089e6 <USB_HC_StartXfer+0x86>
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	795b      	ldrb	r3, [r3, #5]
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d107      	bne.n	80089e6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	785b      	ldrb	r3, [r3, #1]
 80089da:	4619      	mov	r1, r3
 80089dc:	68f8      	ldr	r0, [r7, #12]
 80089de:	f000 fa2f 	bl	8008e40 <USB_DoPing>
      return HAL_OK;
 80089e2:	2300      	movs	r3, #0
 80089e4:	e0f8      	b.n	8008bd8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	695b      	ldr	r3, [r3, #20]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d018      	beq.n	8008a20 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	695b      	ldr	r3, [r3, #20]
 80089f2:	68ba      	ldr	r2, [r7, #8]
 80089f4:	8912      	ldrh	r2, [r2, #8]
 80089f6:	4413      	add	r3, r2
 80089f8:	3b01      	subs	r3, #1
 80089fa:	68ba      	ldr	r2, [r7, #8]
 80089fc:	8912      	ldrh	r2, [r2, #8]
 80089fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a02:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8008a04:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008a06:	8b7b      	ldrh	r3, [r7, #26]
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d90b      	bls.n	8008a24 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8008a0c:	8b7b      	ldrh	r3, [r7, #26]
 8008a0e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008a10:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008a12:	68ba      	ldr	r2, [r7, #8]
 8008a14:	8912      	ldrh	r2, [r2, #8]
 8008a16:	fb02 f203 	mul.w	r2, r2, r3
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	611a      	str	r2, [r3, #16]
 8008a1e:	e001      	b.n	8008a24 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8008a20:	2301      	movs	r3, #1
 8008a22:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	78db      	ldrb	r3, [r3, #3]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d007      	beq.n	8008a3c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008a2c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008a2e:	68ba      	ldr	r2, [r7, #8]
 8008a30:	8912      	ldrh	r2, [r2, #8]
 8008a32:	fb02 f203 	mul.w	r2, r2, r3
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	611a      	str	r2, [r3, #16]
 8008a3a:	e003      	b.n	8008a44 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	695a      	ldr	r2, [r3, #20]
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	691b      	ldr	r3, [r3, #16]
 8008a48:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008a4c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008a4e:	04d9      	lsls	r1, r3, #19
 8008a50:	4b63      	ldr	r3, [pc, #396]	; (8008be0 <USB_HC_StartXfer+0x280>)
 8008a52:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008a54:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	7a9b      	ldrb	r3, [r3, #10]
 8008a5a:	075b      	lsls	r3, r3, #29
 8008a5c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008a60:	69f9      	ldr	r1, [r7, #28]
 8008a62:	0148      	lsls	r0, r1, #5
 8008a64:	6a39      	ldr	r1, [r7, #32]
 8008a66:	4401      	add	r1, r0
 8008a68:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008a6c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008a6e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008a70:	79fb      	ldrb	r3, [r7, #7]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d009      	beq.n	8008a8a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	68d9      	ldr	r1, [r3, #12]
 8008a7a:	69fb      	ldr	r3, [r7, #28]
 8008a7c:	015a      	lsls	r2, r3, #5
 8008a7e:	6a3b      	ldr	r3, [r7, #32]
 8008a80:	4413      	add	r3, r2
 8008a82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a86:	460a      	mov	r2, r1
 8008a88:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008a8a:	6a3b      	ldr	r3, [r7, #32]
 8008a8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	f003 0301 	and.w	r3, r3, #1
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	bf0c      	ite	eq
 8008a9a:	2301      	moveq	r3, #1
 8008a9c:	2300      	movne	r3, #0
 8008a9e:	b2db      	uxtb	r3, r3
 8008aa0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008aa2:	69fb      	ldr	r3, [r7, #28]
 8008aa4:	015a      	lsls	r2, r3, #5
 8008aa6:	6a3b      	ldr	r3, [r7, #32]
 8008aa8:	4413      	add	r3, r2
 8008aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	69fa      	ldr	r2, [r7, #28]
 8008ab2:	0151      	lsls	r1, r2, #5
 8008ab4:	6a3a      	ldr	r2, [r7, #32]
 8008ab6:	440a      	add	r2, r1
 8008ab8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008abc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008ac0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008ac2:	69fb      	ldr	r3, [r7, #28]
 8008ac4:	015a      	lsls	r2, r3, #5
 8008ac6:	6a3b      	ldr	r3, [r7, #32]
 8008ac8:	4413      	add	r3, r2
 8008aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ace:	681a      	ldr	r2, [r3, #0]
 8008ad0:	7e7b      	ldrb	r3, [r7, #25]
 8008ad2:	075b      	lsls	r3, r3, #29
 8008ad4:	69f9      	ldr	r1, [r7, #28]
 8008ad6:	0148      	lsls	r0, r1, #5
 8008ad8:	6a39      	ldr	r1, [r7, #32]
 8008ada:	4401      	add	r1, r0
 8008adc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008ae4:	69fb      	ldr	r3, [r7, #28]
 8008ae6:	015a      	lsls	r2, r3, #5
 8008ae8:	6a3b      	ldr	r3, [r7, #32]
 8008aea:	4413      	add	r3, r2
 8008aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008afa:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	78db      	ldrb	r3, [r3, #3]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d004      	beq.n	8008b0e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b0a:	613b      	str	r3, [r7, #16]
 8008b0c:	e003      	b.n	8008b16 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008b14:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b1c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008b1e:	69fb      	ldr	r3, [r7, #28]
 8008b20:	015a      	lsls	r2, r3, #5
 8008b22:	6a3b      	ldr	r3, [r7, #32]
 8008b24:	4413      	add	r3, r2
 8008b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008b30:	79fb      	ldrb	r3, [r7, #7]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d001      	beq.n	8008b3a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8008b36:	2300      	movs	r3, #0
 8008b38:	e04e      	b.n	8008bd8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	78db      	ldrb	r3, [r3, #3]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d149      	bne.n	8008bd6 <USB_HC_StartXfer+0x276>
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	695b      	ldr	r3, [r3, #20]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d045      	beq.n	8008bd6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	79db      	ldrb	r3, [r3, #7]
 8008b4e:	2b03      	cmp	r3, #3
 8008b50:	d830      	bhi.n	8008bb4 <USB_HC_StartXfer+0x254>
 8008b52:	a201      	add	r2, pc, #4	; (adr r2, 8008b58 <USB_HC_StartXfer+0x1f8>)
 8008b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b58:	08008b69 	.word	0x08008b69
 8008b5c:	08008b8d 	.word	0x08008b8d
 8008b60:	08008b69 	.word	0x08008b69
 8008b64:	08008b8d 	.word	0x08008b8d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	695b      	ldr	r3, [r3, #20]
 8008b6c:	3303      	adds	r3, #3
 8008b6e:	089b      	lsrs	r3, r3, #2
 8008b70:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008b72:	8afa      	ldrh	r2, [r7, #22]
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d91c      	bls.n	8008bb8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	699b      	ldr	r3, [r3, #24]
 8008b82:	f043 0220 	orr.w	r2, r3, #32
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	619a      	str	r2, [r3, #24]
        }
        break;
 8008b8a:	e015      	b.n	8008bb8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	695b      	ldr	r3, [r3, #20]
 8008b90:	3303      	adds	r3, #3
 8008b92:	089b      	lsrs	r3, r3, #2
 8008b94:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008b96:	8afa      	ldrh	r2, [r7, #22]
 8008b98:	6a3b      	ldr	r3, [r7, #32]
 8008b9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b9e:	691b      	ldr	r3, [r3, #16]
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	d90a      	bls.n	8008bbc <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	699b      	ldr	r3, [r3, #24]
 8008baa:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	619a      	str	r2, [r3, #24]
        }
        break;
 8008bb2:	e003      	b.n	8008bbc <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008bb4:	bf00      	nop
 8008bb6:	e002      	b.n	8008bbe <USB_HC_StartXfer+0x25e>
        break;
 8008bb8:	bf00      	nop
 8008bba:	e000      	b.n	8008bbe <USB_HC_StartXfer+0x25e>
        break;
 8008bbc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	68d9      	ldr	r1, [r3, #12]
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	785a      	ldrb	r2, [r3, #1]
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	695b      	ldr	r3, [r3, #20]
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	2000      	movs	r0, #0
 8008bce:	9000      	str	r0, [sp, #0]
 8008bd0:	68f8      	ldr	r0, [r7, #12]
 8008bd2:	f7ff fb53 	bl	800827c <USB_WritePacket>
  }

  return HAL_OK;
 8008bd6:	2300      	movs	r3, #0
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3728      	adds	r7, #40	; 0x28
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}
 8008be0:	1ff80000 	.word	0x1ff80000

08008be4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b085      	sub	sp, #20
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008bf6:	695b      	ldr	r3, [r3, #20]
 8008bf8:	b29b      	uxth	r3, r3
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3714      	adds	r7, #20
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c04:	4770      	bx	lr

08008c06 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008c06:	b480      	push	{r7}
 8008c08:	b089      	sub	sp, #36	; 0x24
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	6078      	str	r0, [r7, #4]
 8008c0e:	460b      	mov	r3, r1
 8008c10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8008c16:	78fb      	ldrb	r3, [r7, #3]
 8008c18:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	015a      	lsls	r2, r3, #5
 8008c22:	69bb      	ldr	r3, [r7, #24]
 8008c24:	4413      	add	r3, r2
 8008c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	0c9b      	lsrs	r3, r3, #18
 8008c2e:	f003 0303 	and.w	r3, r3, #3
 8008c32:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	015a      	lsls	r2, r3, #5
 8008c38:	69bb      	ldr	r3, [r7, #24]
 8008c3a:	4413      	add	r3, r2
 8008c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	0fdb      	lsrs	r3, r3, #31
 8008c44:	f003 0301 	and.w	r3, r3, #1
 8008c48:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	f003 0320 	and.w	r3, r3, #32
 8008c52:	2b20      	cmp	r3, #32
 8008c54:	d104      	bne.n	8008c60 <USB_HC_Halt+0x5a>
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d101      	bne.n	8008c60 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	e0e8      	b.n	8008e32 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d002      	beq.n	8008c6c <USB_HC_Halt+0x66>
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	2b02      	cmp	r3, #2
 8008c6a:	d173      	bne.n	8008d54 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	015a      	lsls	r2, r3, #5
 8008c70:	69bb      	ldr	r3, [r7, #24]
 8008c72:	4413      	add	r3, r2
 8008c74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	697a      	ldr	r2, [r7, #20]
 8008c7c:	0151      	lsls	r1, r2, #5
 8008c7e:	69ba      	ldr	r2, [r7, #24]
 8008c80:	440a      	add	r2, r1
 8008c82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c8a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	689b      	ldr	r3, [r3, #8]
 8008c90:	f003 0320 	and.w	r3, r3, #32
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	f040 80cb 	bne.w	8008e30 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c9e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d143      	bne.n	8008d2e <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	015a      	lsls	r2, r3, #5
 8008caa:	69bb      	ldr	r3, [r7, #24]
 8008cac:	4413      	add	r3, r2
 8008cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	697a      	ldr	r2, [r7, #20]
 8008cb6:	0151      	lsls	r1, r2, #5
 8008cb8:	69ba      	ldr	r2, [r7, #24]
 8008cba:	440a      	add	r2, r1
 8008cbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008cc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008cc4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	015a      	lsls	r2, r3, #5
 8008cca:	69bb      	ldr	r3, [r7, #24]
 8008ccc:	4413      	add	r3, r2
 8008cce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	697a      	ldr	r2, [r7, #20]
 8008cd6:	0151      	lsls	r1, r2, #5
 8008cd8:	69ba      	ldr	r2, [r7, #24]
 8008cda:	440a      	add	r2, r1
 8008cdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ce0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008ce4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	015a      	lsls	r2, r3, #5
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	4413      	add	r3, r2
 8008cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	697a      	ldr	r2, [r7, #20]
 8008cf6:	0151      	lsls	r1, r2, #5
 8008cf8:	69ba      	ldr	r2, [r7, #24]
 8008cfa:	440a      	add	r2, r1
 8008cfc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d00:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008d04:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8008d06:	69fb      	ldr	r3, [r7, #28]
 8008d08:	3301      	adds	r3, #1
 8008d0a:	61fb      	str	r3, [r7, #28]
 8008d0c:	69fb      	ldr	r3, [r7, #28]
 8008d0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d12:	d81d      	bhi.n	8008d50 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	015a      	lsls	r2, r3, #5
 8008d18:	69bb      	ldr	r3, [r7, #24]
 8008d1a:	4413      	add	r3, r2
 8008d1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d2a:	d0ec      	beq.n	8008d06 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008d2c:	e080      	b.n	8008e30 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	015a      	lsls	r2, r3, #5
 8008d32:	69bb      	ldr	r3, [r7, #24]
 8008d34:	4413      	add	r3, r2
 8008d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	697a      	ldr	r2, [r7, #20]
 8008d3e:	0151      	lsls	r1, r2, #5
 8008d40:	69ba      	ldr	r2, [r7, #24]
 8008d42:	440a      	add	r2, r1
 8008d44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008d4c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008d4e:	e06f      	b.n	8008e30 <USB_HC_Halt+0x22a>
            break;
 8008d50:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008d52:	e06d      	b.n	8008e30 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	015a      	lsls	r2, r3, #5
 8008d58:	69bb      	ldr	r3, [r7, #24]
 8008d5a:	4413      	add	r3, r2
 8008d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	697a      	ldr	r2, [r7, #20]
 8008d64:	0151      	lsls	r1, r2, #5
 8008d66:	69ba      	ldr	r2, [r7, #24]
 8008d68:	440a      	add	r2, r1
 8008d6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d6e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d72:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008d74:	69bb      	ldr	r3, [r7, #24]
 8008d76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d7a:	691b      	ldr	r3, [r3, #16]
 8008d7c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d143      	bne.n	8008e0c <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	015a      	lsls	r2, r3, #5
 8008d88:	69bb      	ldr	r3, [r7, #24]
 8008d8a:	4413      	add	r3, r2
 8008d8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	697a      	ldr	r2, [r7, #20]
 8008d94:	0151      	lsls	r1, r2, #5
 8008d96:	69ba      	ldr	r2, [r7, #24]
 8008d98:	440a      	add	r2, r1
 8008d9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008da2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	015a      	lsls	r2, r3, #5
 8008da8:	69bb      	ldr	r3, [r7, #24]
 8008daa:	4413      	add	r3, r2
 8008dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	697a      	ldr	r2, [r7, #20]
 8008db4:	0151      	lsls	r1, r2, #5
 8008db6:	69ba      	ldr	r2, [r7, #24]
 8008db8:	440a      	add	r2, r1
 8008dba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008dbe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008dc2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	015a      	lsls	r2, r3, #5
 8008dc8:	69bb      	ldr	r3, [r7, #24]
 8008dca:	4413      	add	r3, r2
 8008dcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	697a      	ldr	r2, [r7, #20]
 8008dd4:	0151      	lsls	r1, r2, #5
 8008dd6:	69ba      	ldr	r2, [r7, #24]
 8008dd8:	440a      	add	r2, r1
 8008dda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008dde:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008de2:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008de4:	69fb      	ldr	r3, [r7, #28]
 8008de6:	3301      	adds	r3, #1
 8008de8:	61fb      	str	r3, [r7, #28]
 8008dea:	69fb      	ldr	r3, [r7, #28]
 8008dec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008df0:	d81d      	bhi.n	8008e2e <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	015a      	lsls	r2, r3, #5
 8008df6:	69bb      	ldr	r3, [r7, #24]
 8008df8:	4413      	add	r3, r2
 8008dfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e08:	d0ec      	beq.n	8008de4 <USB_HC_Halt+0x1de>
 8008e0a:	e011      	b.n	8008e30 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	015a      	lsls	r2, r3, #5
 8008e10:	69bb      	ldr	r3, [r7, #24]
 8008e12:	4413      	add	r3, r2
 8008e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	697a      	ldr	r2, [r7, #20]
 8008e1c:	0151      	lsls	r1, r2, #5
 8008e1e:	69ba      	ldr	r2, [r7, #24]
 8008e20:	440a      	add	r2, r1
 8008e22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008e2a:	6013      	str	r3, [r2, #0]
 8008e2c:	e000      	b.n	8008e30 <USB_HC_Halt+0x22a>
          break;
 8008e2e:	bf00      	nop
    }
  }

  return HAL_OK;
 8008e30:	2300      	movs	r3, #0
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3724      	adds	r7, #36	; 0x24
 8008e36:	46bd      	mov	sp, r7
 8008e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3c:	4770      	bx	lr
	...

08008e40 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b087      	sub	sp, #28
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	460b      	mov	r3, r1
 8008e4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008e50:	78fb      	ldrb	r3, [r7, #3]
 8008e52:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008e54:	2301      	movs	r3, #1
 8008e56:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	04da      	lsls	r2, r3, #19
 8008e5c:	4b15      	ldr	r3, [pc, #84]	; (8008eb4 <USB_DoPing+0x74>)
 8008e5e:	4013      	ands	r3, r2
 8008e60:	693a      	ldr	r2, [r7, #16]
 8008e62:	0151      	lsls	r1, r2, #5
 8008e64:	697a      	ldr	r2, [r7, #20]
 8008e66:	440a      	add	r2, r1
 8008e68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008e70:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	015a      	lsls	r2, r3, #5
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	4413      	add	r3, r2
 8008e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008e88:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008e90:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	015a      	lsls	r2, r3, #5
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	4413      	add	r3, r2
 8008e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e9e:	461a      	mov	r2, r3
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008ea4:	2300      	movs	r3, #0
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	371c      	adds	r7, #28
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb0:	4770      	bx	lr
 8008eb2:	bf00      	nop
 8008eb4:	1ff80000 	.word	0x1ff80000

08008eb8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b086      	sub	sp, #24
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f7ff f935 	bl	8008138 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8008ece:	2110      	movs	r1, #16
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f7ff f98f 	bl	80081f4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f7ff f9b0 	bl	800823c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008edc:	2300      	movs	r3, #0
 8008ede:	613b      	str	r3, [r7, #16]
 8008ee0:	e01f      	b.n	8008f22 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	015a      	lsls	r2, r3, #5
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	4413      	add	r3, r2
 8008eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ef8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008f00:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008f08:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	015a      	lsls	r2, r3, #5
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	4413      	add	r3, r2
 8008f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f16:	461a      	mov	r2, r3
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	3301      	adds	r3, #1
 8008f20:	613b      	str	r3, [r7, #16]
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	2b0f      	cmp	r3, #15
 8008f26:	d9dc      	bls.n	8008ee2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008f28:	2300      	movs	r3, #0
 8008f2a:	613b      	str	r3, [r7, #16]
 8008f2c:	e034      	b.n	8008f98 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	015a      	lsls	r2, r3, #5
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	4413      	add	r3, r2
 8008f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f44:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008f4c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008f54:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	015a      	lsls	r2, r3, #5
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	4413      	add	r3, r2
 8008f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f62:	461a      	mov	r2, r3
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	3301      	adds	r3, #1
 8008f6c:	617b      	str	r3, [r7, #20]
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008f74:	d80c      	bhi.n	8008f90 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	015a      	lsls	r2, r3, #5
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	4413      	add	r3, r2
 8008f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f8c:	d0ec      	beq.n	8008f68 <USB_StopHost+0xb0>
 8008f8e:	e000      	b.n	8008f92 <USB_StopHost+0xda>
        break;
 8008f90:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	3301      	adds	r3, #1
 8008f96:	613b      	str	r3, [r7, #16]
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	2b0f      	cmp	r3, #15
 8008f9c:	d9c7      	bls.n	8008f2e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8008faa:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f04f 32ff 	mov.w	r2, #4294967295
 8008fb2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f7ff f8ae 	bl	8008116 <USB_EnableGlobalInt>

  return HAL_OK;
 8008fba:	2300      	movs	r3, #0
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3718      	adds	r7, #24
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008fc4:	b590      	push	{r4, r7, lr}
 8008fc6:	b089      	sub	sp, #36	; 0x24
 8008fc8:	af04      	add	r7, sp, #16
 8008fca:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008fcc:	2301      	movs	r3, #1
 8008fce:	2202      	movs	r2, #2
 8008fd0:	2102      	movs	r1, #2
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 fcb8 	bl	8009948 <USBH_FindInterface>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008fdc:	7bfb      	ldrb	r3, [r7, #15]
 8008fde:	2bff      	cmp	r3, #255	; 0xff
 8008fe0:	d002      	beq.n	8008fe8 <USBH_CDC_InterfaceInit+0x24>
 8008fe2:	7bfb      	ldrb	r3, [r7, #15]
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d901      	bls.n	8008fec <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008fe8:	2302      	movs	r3, #2
 8008fea:	e13d      	b.n	8009268 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008fec:	7bfb      	ldrb	r3, [r7, #15]
 8008fee:	4619      	mov	r1, r3
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f000 fc8d 	bl	8009910 <USBH_SelectInterface>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008ffa:	7bbb      	ldrb	r3, [r7, #14]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d001      	beq.n	8009004 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009000:	2302      	movs	r3, #2
 8009002:	e131      	b.n	8009268 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800900a:	2050      	movs	r0, #80	; 0x50
 800900c:	f005 fb94 	bl	800e738 <malloc>
 8009010:	4603      	mov	r3, r0
 8009012:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800901a:	69db      	ldr	r3, [r3, #28]
 800901c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d101      	bne.n	8009028 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009024:	2302      	movs	r3, #2
 8009026:	e11f      	b.n	8009268 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009028:	2250      	movs	r2, #80	; 0x50
 800902a:	2100      	movs	r1, #0
 800902c:	68b8      	ldr	r0, [r7, #8]
 800902e:	f005 fba1 	bl	800e774 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8009032:	7bfb      	ldrb	r3, [r7, #15]
 8009034:	687a      	ldr	r2, [r7, #4]
 8009036:	211a      	movs	r1, #26
 8009038:	fb01 f303 	mul.w	r3, r1, r3
 800903c:	4413      	add	r3, r2
 800903e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009042:	781b      	ldrb	r3, [r3, #0]
 8009044:	b25b      	sxtb	r3, r3
 8009046:	2b00      	cmp	r3, #0
 8009048:	da15      	bge.n	8009076 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800904a:	7bfb      	ldrb	r3, [r7, #15]
 800904c:	687a      	ldr	r2, [r7, #4]
 800904e:	211a      	movs	r1, #26
 8009050:	fb01 f303 	mul.w	r3, r1, r3
 8009054:	4413      	add	r3, r2
 8009056:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800905a:	781a      	ldrb	r2, [r3, #0]
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009060:	7bfb      	ldrb	r3, [r7, #15]
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	211a      	movs	r1, #26
 8009066:	fb01 f303 	mul.w	r3, r1, r3
 800906a:	4413      	add	r3, r2
 800906c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009070:	881a      	ldrh	r2, [r3, #0]
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	785b      	ldrb	r3, [r3, #1]
 800907a:	4619      	mov	r1, r3
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f002 f890 	bl	800b1a2 <USBH_AllocPipe>
 8009082:	4603      	mov	r3, r0
 8009084:	461a      	mov	r2, r3
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	7819      	ldrb	r1, [r3, #0]
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	7858      	ldrb	r0, [r3, #1]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800909e:	68ba      	ldr	r2, [r7, #8]
 80090a0:	8952      	ldrh	r2, [r2, #10]
 80090a2:	9202      	str	r2, [sp, #8]
 80090a4:	2203      	movs	r2, #3
 80090a6:	9201      	str	r2, [sp, #4]
 80090a8:	9300      	str	r3, [sp, #0]
 80090aa:	4623      	mov	r3, r4
 80090ac:	4602      	mov	r2, r0
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f002 f848 	bl	800b144 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	781b      	ldrb	r3, [r3, #0]
 80090b8:	2200      	movs	r2, #0
 80090ba:	4619      	mov	r1, r3
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f005 fa8b 	bl	800e5d8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80090c2:	2300      	movs	r3, #0
 80090c4:	2200      	movs	r2, #0
 80090c6:	210a      	movs	r1, #10
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f000 fc3d 	bl	8009948 <USBH_FindInterface>
 80090ce:	4603      	mov	r3, r0
 80090d0:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80090d2:	7bfb      	ldrb	r3, [r7, #15]
 80090d4:	2bff      	cmp	r3, #255	; 0xff
 80090d6:	d002      	beq.n	80090de <USBH_CDC_InterfaceInit+0x11a>
 80090d8:	7bfb      	ldrb	r3, [r7, #15]
 80090da:	2b01      	cmp	r3, #1
 80090dc:	d901      	bls.n	80090e2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80090de:	2302      	movs	r3, #2
 80090e0:	e0c2      	b.n	8009268 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80090e2:	7bfb      	ldrb	r3, [r7, #15]
 80090e4:	687a      	ldr	r2, [r7, #4]
 80090e6:	211a      	movs	r1, #26
 80090e8:	fb01 f303 	mul.w	r3, r1, r3
 80090ec:	4413      	add	r3, r2
 80090ee:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80090f2:	781b      	ldrb	r3, [r3, #0]
 80090f4:	b25b      	sxtb	r3, r3
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	da16      	bge.n	8009128 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80090fa:	7bfb      	ldrb	r3, [r7, #15]
 80090fc:	687a      	ldr	r2, [r7, #4]
 80090fe:	211a      	movs	r1, #26
 8009100:	fb01 f303 	mul.w	r3, r1, r3
 8009104:	4413      	add	r3, r2
 8009106:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800910a:	781a      	ldrb	r2, [r3, #0]
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009110:	7bfb      	ldrb	r3, [r7, #15]
 8009112:	687a      	ldr	r2, [r7, #4]
 8009114:	211a      	movs	r1, #26
 8009116:	fb01 f303 	mul.w	r3, r1, r3
 800911a:	4413      	add	r3, r2
 800911c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009120:	881a      	ldrh	r2, [r3, #0]
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	835a      	strh	r2, [r3, #26]
 8009126:	e015      	b.n	8009154 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009128:	7bfb      	ldrb	r3, [r7, #15]
 800912a:	687a      	ldr	r2, [r7, #4]
 800912c:	211a      	movs	r1, #26
 800912e:	fb01 f303 	mul.w	r3, r1, r3
 8009132:	4413      	add	r3, r2
 8009134:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009138:	781a      	ldrb	r2, [r3, #0]
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800913e:	7bfb      	ldrb	r3, [r7, #15]
 8009140:	687a      	ldr	r2, [r7, #4]
 8009142:	211a      	movs	r1, #26
 8009144:	fb01 f303 	mul.w	r3, r1, r3
 8009148:	4413      	add	r3, r2
 800914a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800914e:	881a      	ldrh	r2, [r3, #0]
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8009154:	7bfb      	ldrb	r3, [r7, #15]
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	211a      	movs	r1, #26
 800915a:	fb01 f303 	mul.w	r3, r1, r3
 800915e:	4413      	add	r3, r2
 8009160:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009164:	781b      	ldrb	r3, [r3, #0]
 8009166:	b25b      	sxtb	r3, r3
 8009168:	2b00      	cmp	r3, #0
 800916a:	da16      	bge.n	800919a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800916c:	7bfb      	ldrb	r3, [r7, #15]
 800916e:	687a      	ldr	r2, [r7, #4]
 8009170:	211a      	movs	r1, #26
 8009172:	fb01 f303 	mul.w	r3, r1, r3
 8009176:	4413      	add	r3, r2
 8009178:	f203 3356 	addw	r3, r3, #854	; 0x356
 800917c:	781a      	ldrb	r2, [r3, #0]
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009182:	7bfb      	ldrb	r3, [r7, #15]
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	211a      	movs	r1, #26
 8009188:	fb01 f303 	mul.w	r3, r1, r3
 800918c:	4413      	add	r3, r2
 800918e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009192:	881a      	ldrh	r2, [r3, #0]
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	835a      	strh	r2, [r3, #26]
 8009198:	e015      	b.n	80091c6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800919a:	7bfb      	ldrb	r3, [r7, #15]
 800919c:	687a      	ldr	r2, [r7, #4]
 800919e:	211a      	movs	r1, #26
 80091a0:	fb01 f303 	mul.w	r3, r1, r3
 80091a4:	4413      	add	r3, r2
 80091a6:	f203 3356 	addw	r3, r3, #854	; 0x356
 80091aa:	781a      	ldrb	r2, [r3, #0]
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80091b0:	7bfb      	ldrb	r3, [r7, #15]
 80091b2:	687a      	ldr	r2, [r7, #4]
 80091b4:	211a      	movs	r1, #26
 80091b6:	fb01 f303 	mul.w	r3, r1, r3
 80091ba:	4413      	add	r3, r2
 80091bc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80091c0:	881a      	ldrh	r2, [r3, #0]
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	7b9b      	ldrb	r3, [r3, #14]
 80091ca:	4619      	mov	r1, r3
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f001 ffe8 	bl	800b1a2 <USBH_AllocPipe>
 80091d2:	4603      	mov	r3, r0
 80091d4:	461a      	mov	r2, r3
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	7bdb      	ldrb	r3, [r3, #15]
 80091de:	4619      	mov	r1, r3
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f001 ffde 	bl	800b1a2 <USBH_AllocPipe>
 80091e6:	4603      	mov	r3, r0
 80091e8:	461a      	mov	r2, r3
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	7b59      	ldrb	r1, [r3, #13]
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	7b98      	ldrb	r0, [r3, #14]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009202:	68ba      	ldr	r2, [r7, #8]
 8009204:	8b12      	ldrh	r2, [r2, #24]
 8009206:	9202      	str	r2, [sp, #8]
 8009208:	2202      	movs	r2, #2
 800920a:	9201      	str	r2, [sp, #4]
 800920c:	9300      	str	r3, [sp, #0]
 800920e:	4623      	mov	r3, r4
 8009210:	4602      	mov	r2, r0
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f001 ff96 	bl	800b144 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	7b19      	ldrb	r1, [r3, #12]
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	7bd8      	ldrb	r0, [r3, #15]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800922c:	68ba      	ldr	r2, [r7, #8]
 800922e:	8b52      	ldrh	r2, [r2, #26]
 8009230:	9202      	str	r2, [sp, #8]
 8009232:	2202      	movs	r2, #2
 8009234:	9201      	str	r2, [sp, #4]
 8009236:	9300      	str	r3, [sp, #0]
 8009238:	4623      	mov	r3, r4
 800923a:	4602      	mov	r2, r0
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f001 ff81 	bl	800b144 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	2200      	movs	r2, #0
 8009246:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	7b5b      	ldrb	r3, [r3, #13]
 800924e:	2200      	movs	r2, #0
 8009250:	4619      	mov	r1, r3
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f005 f9c0 	bl	800e5d8 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	7b1b      	ldrb	r3, [r3, #12]
 800925c:	2200      	movs	r2, #0
 800925e:	4619      	mov	r1, r3
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f005 f9b9 	bl	800e5d8 <USBH_LL_SetToggle>

  return USBH_OK;
 8009266:	2300      	movs	r3, #0
}
 8009268:	4618      	mov	r0, r3
 800926a:	3714      	adds	r7, #20
 800926c:	46bd      	mov	sp, r7
 800926e:	bd90      	pop	{r4, r7, pc}

08009270 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800927e:	69db      	ldr	r3, [r3, #28]
 8009280:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	781b      	ldrb	r3, [r3, #0]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d00e      	beq.n	80092a8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	781b      	ldrb	r3, [r3, #0]
 800928e:	4619      	mov	r1, r3
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f001 ff76 	bl	800b182 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	781b      	ldrb	r3, [r3, #0]
 800929a:	4619      	mov	r1, r3
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f001 ffa1 	bl	800b1e4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	2200      	movs	r2, #0
 80092a6:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	7b1b      	ldrb	r3, [r3, #12]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d00e      	beq.n	80092ce <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	7b1b      	ldrb	r3, [r3, #12]
 80092b4:	4619      	mov	r1, r3
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f001 ff63 	bl	800b182 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	7b1b      	ldrb	r3, [r3, #12]
 80092c0:	4619      	mov	r1, r3
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f001 ff8e 	bl	800b1e4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2200      	movs	r2, #0
 80092cc:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	7b5b      	ldrb	r3, [r3, #13]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d00e      	beq.n	80092f4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	7b5b      	ldrb	r3, [r3, #13]
 80092da:	4619      	mov	r1, r3
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f001 ff50 	bl	800b182 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	7b5b      	ldrb	r3, [r3, #13]
 80092e6:	4619      	mov	r1, r3
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f001 ff7b 	bl	800b1e4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2200      	movs	r2, #0
 80092f2:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80092fa:	69db      	ldr	r3, [r3, #28]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d00b      	beq.n	8009318 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009306:	69db      	ldr	r3, [r3, #28]
 8009308:	4618      	mov	r0, r3
 800930a:	f005 fa1d 	bl	800e748 <free>
    phost->pActiveClass->pData = 0U;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009314:	2200      	movs	r2, #0
 8009316:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009318:	2300      	movs	r3, #0
}
 800931a:	4618      	mov	r0, r3
 800931c:	3710      	adds	r7, #16
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}

08009322 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009322:	b580      	push	{r7, lr}
 8009324:	b084      	sub	sp, #16
 8009326:	af00      	add	r7, sp, #0
 8009328:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009330:	69db      	ldr	r3, [r3, #28]
 8009332:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	3340      	adds	r3, #64	; 0x40
 8009338:	4619      	mov	r1, r3
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f000 f8b1 	bl	80094a2 <GetLineCoding>
 8009340:	4603      	mov	r3, r0
 8009342:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009344:	7afb      	ldrb	r3, [r7, #11]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d105      	bne.n	8009356 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009350:	2102      	movs	r1, #2
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8009356:	7afb      	ldrb	r3, [r7, #11]
}
 8009358:	4618      	mov	r0, r3
 800935a:	3710      	adds	r7, #16
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}

08009360 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b084      	sub	sp, #16
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009368:	2301      	movs	r3, #1
 800936a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800936c:	2300      	movs	r3, #0
 800936e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009376:	69db      	ldr	r3, [r3, #28]
 8009378:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009380:	2b04      	cmp	r3, #4
 8009382:	d877      	bhi.n	8009474 <USBH_CDC_Process+0x114>
 8009384:	a201      	add	r2, pc, #4	; (adr r2, 800938c <USBH_CDC_Process+0x2c>)
 8009386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800938a:	bf00      	nop
 800938c:	080093a1 	.word	0x080093a1
 8009390:	080093a7 	.word	0x080093a7
 8009394:	080093d7 	.word	0x080093d7
 8009398:	0800944b 	.word	0x0800944b
 800939c:	08009459 	.word	0x08009459
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80093a0:	2300      	movs	r3, #0
 80093a2:	73fb      	strb	r3, [r7, #15]
      break;
 80093a4:	e06d      	b.n	8009482 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093aa:	4619      	mov	r1, r3
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 f897 	bl	80094e0 <SetLineCoding>
 80093b2:	4603      	mov	r3, r0
 80093b4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80093b6:	7bbb      	ldrb	r3, [r7, #14]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d104      	bne.n	80093c6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	2202      	movs	r2, #2
 80093c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80093c4:	e058      	b.n	8009478 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80093c6:	7bbb      	ldrb	r3, [r7, #14]
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d055      	beq.n	8009478 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	2204      	movs	r2, #4
 80093d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80093d4:	e050      	b.n	8009478 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	3340      	adds	r3, #64	; 0x40
 80093da:	4619      	mov	r1, r3
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f000 f860 	bl	80094a2 <GetLineCoding>
 80093e2:	4603      	mov	r3, r0
 80093e4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80093e6:	7bbb      	ldrb	r3, [r7, #14]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d126      	bne.n	800943a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	2200      	movs	r2, #0
 80093f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093fe:	791b      	ldrb	r3, [r3, #4]
 8009400:	429a      	cmp	r2, r3
 8009402:	d13b      	bne.n	800947c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800940e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009410:	429a      	cmp	r2, r3
 8009412:	d133      	bne.n	800947c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800941e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009420:	429a      	cmp	r2, r3
 8009422:	d12b      	bne.n	800947c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800942c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800942e:	429a      	cmp	r2, r3
 8009430:	d124      	bne.n	800947c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f000 f982 	bl	800973c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009438:	e020      	b.n	800947c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800943a:	7bbb      	ldrb	r3, [r7, #14]
 800943c:	2b01      	cmp	r3, #1
 800943e:	d01d      	beq.n	800947c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	2204      	movs	r2, #4
 8009444:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009448:	e018      	b.n	800947c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 f867 	bl	800951e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f000 f8f6 	bl	8009642 <CDC_ProcessReception>
      break;
 8009456:	e014      	b.n	8009482 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009458:	2100      	movs	r1, #0
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f001 f951 	bl	800a702 <USBH_ClrFeature>
 8009460:	4603      	mov	r3, r0
 8009462:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009464:	7bbb      	ldrb	r3, [r7, #14]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d10a      	bne.n	8009480 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	2200      	movs	r2, #0
 800946e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8009472:	e005      	b.n	8009480 <USBH_CDC_Process+0x120>

    default:
      break;
 8009474:	bf00      	nop
 8009476:	e004      	b.n	8009482 <USBH_CDC_Process+0x122>
      break;
 8009478:	bf00      	nop
 800947a:	e002      	b.n	8009482 <USBH_CDC_Process+0x122>
      break;
 800947c:	bf00      	nop
 800947e:	e000      	b.n	8009482 <USBH_CDC_Process+0x122>
      break;
 8009480:	bf00      	nop

  }

  return status;
 8009482:	7bfb      	ldrb	r3, [r7, #15]
}
 8009484:	4618      	mov	r0, r3
 8009486:	3710      	adds	r7, #16
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}

0800948c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800948c:	b480      	push	{r7}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009494:	2300      	movs	r3, #0
}
 8009496:	4618      	mov	r0, r3
 8009498:	370c      	adds	r7, #12
 800949a:	46bd      	mov	sp, r7
 800949c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a0:	4770      	bx	lr

080094a2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80094a2:	b580      	push	{r7, lr}
 80094a4:	b082      	sub	sp, #8
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	6078      	str	r0, [r7, #4]
 80094aa:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	22a1      	movs	r2, #161	; 0xa1
 80094b0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2221      	movs	r2, #33	; 0x21
 80094b6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2200      	movs	r2, #0
 80094bc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2200      	movs	r2, #0
 80094c2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2207      	movs	r2, #7
 80094c8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	2207      	movs	r2, #7
 80094ce:	4619      	mov	r1, r3
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f001 faf6 	bl	800aac2 <USBH_CtlReq>
 80094d6:	4603      	mov	r3, r0
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3708      	adds	r7, #8
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}

080094e0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b082      	sub	sp, #8
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2221      	movs	r2, #33	; 0x21
 80094ee:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2220      	movs	r2, #32
 80094f4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2200      	movs	r2, #0
 80094fa:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2200      	movs	r2, #0
 8009500:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2207      	movs	r2, #7
 8009506:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	2207      	movs	r2, #7
 800950c:	4619      	mov	r1, r3
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f001 fad7 	bl	800aac2 <USBH_CtlReq>
 8009514:	4603      	mov	r3, r0
}
 8009516:	4618      	mov	r0, r3
 8009518:	3708      	adds	r7, #8
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}

0800951e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800951e:	b580      	push	{r7, lr}
 8009520:	b086      	sub	sp, #24
 8009522:	af02      	add	r7, sp, #8
 8009524:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800952c:	69db      	ldr	r3, [r3, #28]
 800952e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009530:	2300      	movs	r3, #0
 8009532:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800953a:	2b01      	cmp	r3, #1
 800953c:	d002      	beq.n	8009544 <CDC_ProcessTransmission+0x26>
 800953e:	2b02      	cmp	r3, #2
 8009540:	d023      	beq.n	800958a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8009542:	e07a      	b.n	800963a <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009548:	68fa      	ldr	r2, [r7, #12]
 800954a:	8b12      	ldrh	r2, [r2, #24]
 800954c:	4293      	cmp	r3, r2
 800954e:	d90b      	bls.n	8009568 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	69d9      	ldr	r1, [r3, #28]
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	8b1a      	ldrh	r2, [r3, #24]
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	7b5b      	ldrb	r3, [r3, #13]
 800955c:	2001      	movs	r0, #1
 800955e:	9000      	str	r0, [sp, #0]
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f001 fdac 	bl	800b0be <USBH_BulkSendData>
 8009566:	e00b      	b.n	8009580 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8009570:	b29a      	uxth	r2, r3
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	7b5b      	ldrb	r3, [r3, #13]
 8009576:	2001      	movs	r0, #1
 8009578:	9000      	str	r0, [sp, #0]
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f001 fd9f 	bl	800b0be <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	2202      	movs	r2, #2
 8009584:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009588:	e057      	b.n	800963a <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	7b5b      	ldrb	r3, [r3, #13]
 800958e:	4619      	mov	r1, r3
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f004 fff7 	bl	800e584 <USBH_LL_GetURBState>
 8009596:	4603      	mov	r3, r0
 8009598:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800959a:	7afb      	ldrb	r3, [r7, #11]
 800959c:	2b01      	cmp	r3, #1
 800959e:	d136      	bne.n	800960e <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a4:	68fa      	ldr	r2, [r7, #12]
 80095a6:	8b12      	ldrh	r2, [r2, #24]
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d90e      	bls.n	80095ca <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b0:	68fa      	ldr	r2, [r7, #12]
 80095b2:	8b12      	ldrh	r2, [r2, #24]
 80095b4:	1a9a      	subs	r2, r3, r2
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	69db      	ldr	r3, [r3, #28]
 80095be:	68fa      	ldr	r2, [r7, #12]
 80095c0:	8b12      	ldrh	r2, [r2, #24]
 80095c2:	441a      	add	r2, r3
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	61da      	str	r2, [r3, #28]
 80095c8:	e002      	b.n	80095d0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	2200      	movs	r2, #0
 80095ce:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d004      	beq.n	80095e2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	2201      	movs	r2, #1
 80095dc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 80095e0:	e006      	b.n	80095f0 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	2200      	movs	r2, #0
 80095e6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f000 f892 	bl	8009714 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2204      	movs	r2, #4
 80095f4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009604:	2200      	movs	r2, #0
 8009606:	4619      	mov	r1, r3
 8009608:	f001 ff1c 	bl	800b444 <osMessagePut>
      break;
 800960c:	e014      	b.n	8009638 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800960e:	7afb      	ldrb	r3, [r7, #11]
 8009610:	2b02      	cmp	r3, #2
 8009612:	d111      	bne.n	8009638 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2201      	movs	r2, #1
 8009618:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2204      	movs	r2, #4
 8009620:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009630:	2200      	movs	r2, #0
 8009632:	4619      	mov	r1, r3
 8009634:	f001 ff06 	bl	800b444 <osMessagePut>
      break;
 8009638:	bf00      	nop
  }
}
 800963a:	bf00      	nop
 800963c:	3710      	adds	r7, #16
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}

08009642 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8009642:	b580      	push	{r7, lr}
 8009644:	b086      	sub	sp, #24
 8009646:	af00      	add	r7, sp, #0
 8009648:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009650:	69db      	ldr	r3, [r3, #28]
 8009652:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009654:	2300      	movs	r3, #0
 8009656:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800965e:	2b03      	cmp	r3, #3
 8009660:	d002      	beq.n	8009668 <CDC_ProcessReception+0x26>
 8009662:	2b04      	cmp	r3, #4
 8009664:	d00e      	beq.n	8009684 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8009666:	e051      	b.n	800970c <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	6a19      	ldr	r1, [r3, #32]
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	8b5a      	ldrh	r2, [r3, #26]
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	7b1b      	ldrb	r3, [r3, #12]
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f001 fd47 	bl	800b108 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	2204      	movs	r2, #4
 800967e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8009682:	e043      	b.n	800970c <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	7b1b      	ldrb	r3, [r3, #12]
 8009688:	4619      	mov	r1, r3
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f004 ff7a 	bl	800e584 <USBH_LL_GetURBState>
 8009690:	4603      	mov	r3, r0
 8009692:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8009694:	7cfb      	ldrb	r3, [r7, #19]
 8009696:	2b01      	cmp	r3, #1
 8009698:	d137      	bne.n	800970a <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	7b1b      	ldrb	r3, [r3, #12]
 800969e:	4619      	mov	r1, r3
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f004 fedd 	bl	800e460 <USBH_LL_GetLastXferSize>
 80096a6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096ac:	68fa      	ldr	r2, [r7, #12]
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d016      	beq.n	80096e0 <CDC_ProcessReception+0x9e>
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	8b5b      	ldrh	r3, [r3, #26]
 80096b6:	461a      	mov	r2, r3
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d910      	bls.n	80096e0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	1ad2      	subs	r2, r2, r3
 80096c6:	697b      	ldr	r3, [r7, #20]
 80096c8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	6a1a      	ldr	r2, [r3, #32]
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	441a      	add	r2, r3
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	2203      	movs	r2, #3
 80096da:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 80096de:	e006      	b.n	80096ee <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	2200      	movs	r2, #0
 80096e4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f000 f81d 	bl	8009728 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2204      	movs	r2, #4
 80096f2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009702:	2200      	movs	r2, #0
 8009704:	4619      	mov	r1, r3
 8009706:	f001 fe9d 	bl	800b444 <osMessagePut>
      break;
 800970a:	bf00      	nop
  }
}
 800970c:	bf00      	nop
 800970e:	3718      	adds	r7, #24
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009714:	b480      	push	{r7}
 8009716:	b083      	sub	sp, #12
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800971c:	bf00      	nop
 800971e:	370c      	adds	r7, #12
 8009720:	46bd      	mov	sp, r7
 8009722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009726:	4770      	bx	lr

08009728 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009728:	b480      	push	{r7}
 800972a:	b083      	sub	sp, #12
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009730:	bf00      	nop
 8009732:	370c      	adds	r7, #12
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr

0800973c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800973c:	b480      	push	{r7}
 800973e:	b083      	sub	sp, #12
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009744:	bf00      	nop
 8009746:	370c      	adds	r7, #12
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr

08009750 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8009750:	b5b0      	push	{r4, r5, r7, lr}
 8009752:	b090      	sub	sp, #64	; 0x40
 8009754:	af00      	add	r7, sp, #0
 8009756:	60f8      	str	r0, [r7, #12]
 8009758:	60b9      	str	r1, [r7, #8]
 800975a:	4613      	mov	r3, r2
 800975c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d101      	bne.n	8009768 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009764:	2302      	movs	r3, #2
 8009766:	e04d      	b.n	8009804 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	79fa      	ldrb	r2, [r7, #7]
 800976c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2200      	movs	r2, #0
 8009774:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2200      	movs	r2, #0
 800977c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8009780:	68f8      	ldr	r0, [r7, #12]
 8009782:	f000 f847 	bl	8009814 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	2200      	movs	r2, #0
 800978a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2200      	movs	r2, #0
 8009792:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2200      	movs	r2, #0
 800979a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2200      	movs	r2, #0
 80097a2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d003      	beq.n	80097b4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	68ba      	ldr	r2, [r7, #8]
 80097b0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 80097b4:	4b15      	ldr	r3, [pc, #84]	; (800980c <USBH_Init+0xbc>)
 80097b6:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80097ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80097bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 80097c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80097c4:	2100      	movs	r1, #0
 80097c6:	4618      	mov	r0, r3
 80097c8:	f001 fe14 	bl	800b3f4 <osMessageCreate>
 80097cc:	4602      	mov	r2, r0
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 80097d4:	4b0e      	ldr	r3, [pc, #56]	; (8009810 <USBH_Init+0xc0>)
 80097d6:	f107 0414 	add.w	r4, r7, #20
 80097da:	461d      	mov	r5, r3
 80097dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80097de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80097e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80097e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 80097e8:	f107 0314 	add.w	r3, r7, #20
 80097ec:	68f9      	ldr	r1, [r7, #12]
 80097ee:	4618      	mov	r0, r3
 80097f0:	f001 fd6b 	bl	800b2ca <osThreadCreate>
 80097f4:	4602      	mov	r2, r0
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80097fc:	68f8      	ldr	r0, [r7, #12]
 80097fe:	f004 fd7b 	bl	800e2f8 <USBH_LL_Init>

  return USBH_OK;
 8009802:	2300      	movs	r3, #0
}
 8009804:	4618      	mov	r0, r3
 8009806:	3740      	adds	r7, #64	; 0x40
 8009808:	46bd      	mov	sp, r7
 800980a:	bdb0      	pop	{r4, r5, r7, pc}
 800980c:	0800f1ac 	.word	0x0800f1ac
 8009810:	0800f1bc 	.word	0x0800f1bc

08009814 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009814:	b480      	push	{r7}
 8009816:	b085      	sub	sp, #20
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800981c:	2300      	movs	r3, #0
 800981e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009820:	2300      	movs	r3, #0
 8009822:	60fb      	str	r3, [r7, #12]
 8009824:	e009      	b.n	800983a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009826:	687a      	ldr	r2, [r7, #4]
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	33e0      	adds	r3, #224	; 0xe0
 800982c:	009b      	lsls	r3, r3, #2
 800982e:	4413      	add	r3, r2
 8009830:	2200      	movs	r2, #0
 8009832:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	3301      	adds	r3, #1
 8009838:	60fb      	str	r3, [r7, #12]
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2b0e      	cmp	r3, #14
 800983e:	d9f2      	bls.n	8009826 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009840:	2300      	movs	r3, #0
 8009842:	60fb      	str	r3, [r7, #12]
 8009844:	e009      	b.n	800985a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009846:	687a      	ldr	r2, [r7, #4]
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	4413      	add	r3, r2
 800984c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009850:	2200      	movs	r2, #0
 8009852:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	3301      	adds	r3, #1
 8009858:	60fb      	str	r3, [r7, #12]
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009860:	d3f1      	bcc.n	8009846 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2200      	movs	r2, #0
 8009866:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2200      	movs	r2, #0
 800986c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2201      	movs	r2, #1
 8009872:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2200      	movs	r2, #0
 8009878:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2201      	movs	r2, #1
 8009880:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2240      	movs	r2, #64	; 0x40
 8009886:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2200      	movs	r2, #0
 800988c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2200      	movs	r2, #0
 8009892:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2201      	movs	r2, #1
 800989a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2200      	movs	r2, #0
 80098a2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2200      	movs	r2, #0
 80098aa:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80098ae:	2300      	movs	r3, #0
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	3714      	adds	r7, #20
 80098b4:	46bd      	mov	sp, r7
 80098b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ba:	4770      	bx	lr

080098bc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80098bc:	b480      	push	{r7}
 80098be:	b085      	sub	sp, #20
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80098c6:	2300      	movs	r3, #0
 80098c8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d016      	beq.n	80098fe <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d10e      	bne.n	80098f8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80098e0:	1c59      	adds	r1, r3, #1
 80098e2:	687a      	ldr	r2, [r7, #4]
 80098e4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80098e8:	687a      	ldr	r2, [r7, #4]
 80098ea:	33de      	adds	r3, #222	; 0xde
 80098ec:	6839      	ldr	r1, [r7, #0]
 80098ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80098f2:	2300      	movs	r3, #0
 80098f4:	73fb      	strb	r3, [r7, #15]
 80098f6:	e004      	b.n	8009902 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80098f8:	2302      	movs	r3, #2
 80098fa:	73fb      	strb	r3, [r7, #15]
 80098fc:	e001      	b.n	8009902 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80098fe:	2302      	movs	r3, #2
 8009900:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009902:	7bfb      	ldrb	r3, [r7, #15]
}
 8009904:	4618      	mov	r0, r3
 8009906:	3714      	adds	r7, #20
 8009908:	46bd      	mov	sp, r7
 800990a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990e:	4770      	bx	lr

08009910 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009910:	b480      	push	{r7}
 8009912:	b085      	sub	sp, #20
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
 8009918:	460b      	mov	r3, r1
 800991a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800991c:	2300      	movs	r3, #0
 800991e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8009926:	78fa      	ldrb	r2, [r7, #3]
 8009928:	429a      	cmp	r2, r3
 800992a:	d204      	bcs.n	8009936 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	78fa      	ldrb	r2, [r7, #3]
 8009930:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009934:	e001      	b.n	800993a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009936:	2302      	movs	r3, #2
 8009938:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800993a:	7bfb      	ldrb	r3, [r7, #15]
}
 800993c:	4618      	mov	r0, r3
 800993e:	3714      	adds	r7, #20
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr

08009948 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009948:	b480      	push	{r7}
 800994a:	b087      	sub	sp, #28
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
 8009950:	4608      	mov	r0, r1
 8009952:	4611      	mov	r1, r2
 8009954:	461a      	mov	r2, r3
 8009956:	4603      	mov	r3, r0
 8009958:	70fb      	strb	r3, [r7, #3]
 800995a:	460b      	mov	r3, r1
 800995c:	70bb      	strb	r3, [r7, #2]
 800995e:	4613      	mov	r3, r2
 8009960:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009962:	2300      	movs	r3, #0
 8009964:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8009966:	2300      	movs	r3, #0
 8009968:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009970:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009972:	e025      	b.n	80099c0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009974:	7dfb      	ldrb	r3, [r7, #23]
 8009976:	221a      	movs	r2, #26
 8009978:	fb02 f303 	mul.w	r3, r2, r3
 800997c:	3308      	adds	r3, #8
 800997e:	68fa      	ldr	r2, [r7, #12]
 8009980:	4413      	add	r3, r2
 8009982:	3302      	adds	r3, #2
 8009984:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	795b      	ldrb	r3, [r3, #5]
 800998a:	78fa      	ldrb	r2, [r7, #3]
 800998c:	429a      	cmp	r2, r3
 800998e:	d002      	beq.n	8009996 <USBH_FindInterface+0x4e>
 8009990:	78fb      	ldrb	r3, [r7, #3]
 8009992:	2bff      	cmp	r3, #255	; 0xff
 8009994:	d111      	bne.n	80099ba <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009996:	693b      	ldr	r3, [r7, #16]
 8009998:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800999a:	78ba      	ldrb	r2, [r7, #2]
 800999c:	429a      	cmp	r2, r3
 800999e:	d002      	beq.n	80099a6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80099a0:	78bb      	ldrb	r3, [r7, #2]
 80099a2:	2bff      	cmp	r3, #255	; 0xff
 80099a4:	d109      	bne.n	80099ba <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80099aa:	787a      	ldrb	r2, [r7, #1]
 80099ac:	429a      	cmp	r2, r3
 80099ae:	d002      	beq.n	80099b6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80099b0:	787b      	ldrb	r3, [r7, #1]
 80099b2:	2bff      	cmp	r3, #255	; 0xff
 80099b4:	d101      	bne.n	80099ba <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80099b6:	7dfb      	ldrb	r3, [r7, #23]
 80099b8:	e006      	b.n	80099c8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80099ba:	7dfb      	ldrb	r3, [r7, #23]
 80099bc:	3301      	adds	r3, #1
 80099be:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80099c0:	7dfb      	ldrb	r3, [r7, #23]
 80099c2:	2b01      	cmp	r3, #1
 80099c4:	d9d6      	bls.n	8009974 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80099c6:	23ff      	movs	r3, #255	; 0xff
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	371c      	adds	r7, #28
 80099cc:	46bd      	mov	sp, r7
 80099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d2:	4770      	bx	lr

080099d4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b082      	sub	sp, #8
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f004 fcc7 	bl	800e370 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80099e2:	2101      	movs	r1, #1
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f004 fde0 	bl	800e5aa <USBH_LL_DriverVBUS>

  return USBH_OK;
 80099ea:	2300      	movs	r3, #0
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3708      	adds	r7, #8
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b088      	sub	sp, #32
 80099f8:	af04      	add	r7, sp, #16
 80099fa:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80099fc:	2302      	movs	r3, #2
 80099fe:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009a00:	2300      	movs	r3, #0
 8009a02:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8009a0a:	b2db      	uxtb	r3, r3
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	d102      	bne.n	8009a16 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2203      	movs	r2, #3
 8009a14:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	781b      	ldrb	r3, [r3, #0]
 8009a1a:	b2db      	uxtb	r3, r3
 8009a1c:	2b0b      	cmp	r3, #11
 8009a1e:	f200 823c 	bhi.w	8009e9a <USBH_Process+0x4a6>
 8009a22:	a201      	add	r2, pc, #4	; (adr r2, 8009a28 <USBH_Process+0x34>)
 8009a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a28:	08009a59 	.word	0x08009a59
 8009a2c:	08009aa7 	.word	0x08009aa7
 8009a30:	08009b2b 	.word	0x08009b2b
 8009a34:	08009e19 	.word	0x08009e19
 8009a38:	08009e9b 	.word	0x08009e9b
 8009a3c:	08009beb 	.word	0x08009beb
 8009a40:	08009da3 	.word	0x08009da3
 8009a44:	08009c3d 	.word	0x08009c3d
 8009a48:	08009c79 	.word	0x08009c79
 8009a4c:	08009cb3 	.word	0x08009cb3
 8009a50:	08009cfb 	.word	0x08009cfb
 8009a54:	08009e01 	.word	0x08009e01
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009a5e:	b2db      	uxtb	r3, r3
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	f000 821c 	beq.w	8009e9e <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2201      	movs	r2, #1
 8009a6a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009a6c:	20c8      	movs	r0, #200	; 0xc8
 8009a6e:	f004 fde3 	bl	800e638 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f004 fcd9 	bl	800e42a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2200      	movs	r2, #0
 8009a84:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	4619      	mov	r1, r3
 8009aa0:	f001 fcd0 	bl	800b444 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009aa4:	e1fb      	b.n	8009e9e <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009aac:	2b01      	cmp	r3, #1
 8009aae:	d107      	bne.n	8009ac0 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2202      	movs	r2, #2
 8009abc:	701a      	strb	r2, [r3, #0]
 8009abe:	e025      	b.n	8009b0c <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009ac6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009aca:	d914      	bls.n	8009af6 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009ad2:	3301      	adds	r3, #1
 8009ad4:	b2da      	uxtb	r2, r3
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009ae2:	2b03      	cmp	r3, #3
 8009ae4:	d903      	bls.n	8009aee <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	220d      	movs	r2, #13
 8009aea:	701a      	strb	r2, [r3, #0]
 8009aec:	e00e      	b.n	8009b0c <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2200      	movs	r2, #0
 8009af2:	701a      	strb	r2, [r3, #0]
 8009af4:	e00a      	b.n	8009b0c <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009afc:	f103 020a 	add.w	r2, r3, #10
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8009b06:	200a      	movs	r0, #10
 8009b08:	f004 fd96 	bl	800e638 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2201      	movs	r2, #1
 8009b10:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009b20:	2200      	movs	r2, #0
 8009b22:	4619      	mov	r1, r3
 8009b24:	f001 fc8e 	bl	800b444 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009b28:	e1c0      	b.n	8009eac <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d005      	beq.n	8009b40 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009b3a:	2104      	movs	r1, #4
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009b40:	2064      	movs	r0, #100	; 0x64
 8009b42:	f004 fd79 	bl	800e638 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f004 fc48 	bl	800e3dc <USBH_LL_GetSpeed>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	461a      	mov	r2, r3
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2205      	movs	r2, #5
 8009b5a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009b5c:	2100      	movs	r1, #0
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f001 fb1f 	bl	800b1a2 <USBH_AllocPipe>
 8009b64:	4603      	mov	r3, r0
 8009b66:	461a      	mov	r2, r3
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009b6c:	2180      	movs	r1, #128	; 0x80
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f001 fb17 	bl	800b1a2 <USBH_AllocPipe>
 8009b74:	4603      	mov	r3, r0
 8009b76:	461a      	mov	r2, r3
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	7919      	ldrb	r1, [r3, #4]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009b8c:	687a      	ldr	r2, [r7, #4]
 8009b8e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009b90:	b292      	uxth	r2, r2
 8009b92:	9202      	str	r2, [sp, #8]
 8009b94:	2200      	movs	r2, #0
 8009b96:	9201      	str	r2, [sp, #4]
 8009b98:	9300      	str	r3, [sp, #0]
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	2280      	movs	r2, #128	; 0x80
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f001 fad0 	bl	800b144 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	7959      	ldrb	r1, [r3, #5]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009bb4:	687a      	ldr	r2, [r7, #4]
 8009bb6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009bb8:	b292      	uxth	r2, r2
 8009bba:	9202      	str	r2, [sp, #8]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	9201      	str	r2, [sp, #4]
 8009bc0:	9300      	str	r3, [sp, #0]
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f001 fabc 	bl	800b144 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2201      	movs	r2, #1
 8009bd0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009be0:	2200      	movs	r2, #0
 8009be2:	4619      	mov	r1, r3
 8009be4:	f001 fc2e 	bl	800b444 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009be8:	e160      	b.n	8009eac <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f000 f964 	bl	8009eb8 <USBH_HandleEnum>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009bf4:	7bbb      	ldrb	r3, [r7, #14]
 8009bf6:	b2db      	uxtb	r3, r3
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	f040 8152 	bne.w	8009ea2 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2200      	movs	r2, #0
 8009c02:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8009c0c:	2b01      	cmp	r3, #1
 8009c0e:	d103      	bne.n	8009c18 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2208      	movs	r2, #8
 8009c14:	701a      	strb	r2, [r3, #0]
 8009c16:	e002      	b.n	8009c1e <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2207      	movs	r2, #7
 8009c1c:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2205      	movs	r2, #5
 8009c22:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009c32:	2200      	movs	r2, #0
 8009c34:	4619      	mov	r1, r3
 8009c36:	f001 fc05 	bl	800b444 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009c3a:	e132      	b.n	8009ea2 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	f000 812f 	beq.w	8009ea6 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009c4e:	2101      	movs	r1, #1
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2208      	movs	r2, #8
 8009c58:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2205      	movs	r2, #5
 8009c5e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009c6e:	2200      	movs	r2, #0
 8009c70:	4619      	mov	r1, r3
 8009c72:	f001 fbe7 	bl	800b444 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8009c76:	e116      	b.n	8009ea6 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8009c7e:	b29b      	uxth	r3, r3
 8009c80:	4619      	mov	r1, r3
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f000 fcf6 	bl	800a674 <USBH_SetCfg>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d102      	bne.n	8009c94 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2209      	movs	r2, #9
 8009c92:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2201      	movs	r2, #1
 8009c98:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009ca8:	2200      	movs	r2, #0
 8009caa:	4619      	mov	r1, r3
 8009cac:	f001 fbca 	bl	800b444 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009cb0:	e0fc      	b.n	8009eac <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8009cb8:	f003 0320 	and.w	r3, r3, #32
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d00a      	beq.n	8009cd6 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8009cc0:	2101      	movs	r1, #1
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f000 fcf9 	bl	800a6ba <USBH_SetFeature>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d106      	bne.n	8009cdc <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	220a      	movs	r2, #10
 8009cd2:	701a      	strb	r2, [r3, #0]
 8009cd4:	e002      	b.n	8009cdc <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	220a      	movs	r2, #10
 8009cda:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2201      	movs	r2, #1
 8009ce0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	4619      	mov	r1, r3
 8009cf4:	f001 fba6 	bl	800b444 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009cf8:	e0d8      	b.n	8009eac <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d03f      	beq.n	8009d84 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2200      	movs	r2, #0
 8009d08:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	73fb      	strb	r3, [r7, #15]
 8009d10:	e016      	b.n	8009d40 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009d12:	7bfa      	ldrb	r2, [r7, #15]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	32de      	adds	r2, #222	; 0xde
 8009d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d1c:	791a      	ldrb	r2, [r3, #4]
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8009d24:	429a      	cmp	r2, r3
 8009d26:	d108      	bne.n	8009d3a <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009d28:	7bfa      	ldrb	r2, [r7, #15]
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	32de      	adds	r2, #222	; 0xde
 8009d2e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8009d38:	e005      	b.n	8009d46 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009d3a:	7bfb      	ldrb	r3, [r7, #15]
 8009d3c:	3301      	adds	r3, #1
 8009d3e:	73fb      	strb	r3, [r7, #15]
 8009d40:	7bfb      	ldrb	r3, [r7, #15]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d0e5      	beq.n	8009d12 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d016      	beq.n	8009d7e <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d56:	689b      	ldr	r3, [r3, #8]
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	4798      	blx	r3
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d109      	bne.n	8009d76 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2206      	movs	r2, #6
 8009d66:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009d6e:	2103      	movs	r1, #3
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	4798      	blx	r3
 8009d74:	e006      	b.n	8009d84 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	220d      	movs	r2, #13
 8009d7a:	701a      	strb	r2, [r3, #0]
 8009d7c:	e002      	b.n	8009d84 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	220d      	movs	r2, #13
 8009d82:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2205      	movs	r2, #5
 8009d88:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009d98:	2200      	movs	r2, #0
 8009d9a:	4619      	mov	r1, r3
 8009d9c:	f001 fb52 	bl	800b444 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009da0:	e084      	b.n	8009eac <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d017      	beq.n	8009ddc <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009db2:	691b      	ldr	r3, [r3, #16]
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	4798      	blx	r3
 8009db8:	4603      	mov	r3, r0
 8009dba:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009dbc:	7bbb      	ldrb	r3, [r7, #14]
 8009dbe:	b2db      	uxtb	r3, r3
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d103      	bne.n	8009dcc <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	220b      	movs	r2, #11
 8009dc8:	701a      	strb	r2, [r3, #0]
 8009dca:	e00a      	b.n	8009de2 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 8009dcc:	7bbb      	ldrb	r3, [r7, #14]
 8009dce:	b2db      	uxtb	r3, r3
 8009dd0:	2b02      	cmp	r3, #2
 8009dd2:	d106      	bne.n	8009de2 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	220d      	movs	r2, #13
 8009dd8:	701a      	strb	r2, [r3, #0]
 8009dda:	e002      	b.n	8009de2 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	220d      	movs	r2, #13
 8009de0:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2205      	movs	r2, #5
 8009de6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009df6:	2200      	movs	r2, #0
 8009df8:	4619      	mov	r1, r3
 8009dfa:	f001 fb23 	bl	800b444 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009dfe:	e055      	b.n	8009eac <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d04f      	beq.n	8009eaa <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e10:	695b      	ldr	r3, [r3, #20]
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	4798      	blx	r3
      }
      break;
 8009e16:	e048      	b.n	8009eaa <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f7ff fcf7 	bl	8009814 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d009      	beq.n	8009e44 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e36:	68db      	ldr	r3, [r3, #12]
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d005      	beq.n	8009e5a <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009e54:	2105      	movs	r1, #5
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8009e60:	b2db      	uxtb	r3, r3
 8009e62:	2b01      	cmp	r3, #1
 8009e64:	d107      	bne.n	8009e76 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f7ff fdb0 	bl	80099d4 <USBH_Start>
 8009e74:	e002      	b.n	8009e7c <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f004 fa7a 	bl	800e370 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2201      	movs	r2, #1
 8009e80:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009e90:	2200      	movs	r2, #0
 8009e92:	4619      	mov	r1, r3
 8009e94:	f001 fad6 	bl	800b444 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009e98:	e008      	b.n	8009eac <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 8009e9a:	bf00      	nop
 8009e9c:	e006      	b.n	8009eac <USBH_Process+0x4b8>
      break;
 8009e9e:	bf00      	nop
 8009ea0:	e004      	b.n	8009eac <USBH_Process+0x4b8>
      break;
 8009ea2:	bf00      	nop
 8009ea4:	e002      	b.n	8009eac <USBH_Process+0x4b8>
    break;
 8009ea6:	bf00      	nop
 8009ea8:	e000      	b.n	8009eac <USBH_Process+0x4b8>
      break;
 8009eaa:	bf00      	nop
  }
  return USBH_OK;
 8009eac:	2300      	movs	r3, #0
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3710      	adds	r7, #16
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}
 8009eb6:	bf00      	nop

08009eb8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b088      	sub	sp, #32
 8009ebc:	af04      	add	r7, sp, #16
 8009ebe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	785b      	ldrb	r3, [r3, #1]
 8009ecc:	2b07      	cmp	r3, #7
 8009ece:	f200 8208 	bhi.w	800a2e2 <USBH_HandleEnum+0x42a>
 8009ed2:	a201      	add	r2, pc, #4	; (adr r2, 8009ed8 <USBH_HandleEnum+0x20>)
 8009ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ed8:	08009ef9 	.word	0x08009ef9
 8009edc:	08009fb7 	.word	0x08009fb7
 8009ee0:	0800a021 	.word	0x0800a021
 8009ee4:	0800a0af 	.word	0x0800a0af
 8009ee8:	0800a119 	.word	0x0800a119
 8009eec:	0800a189 	.word	0x0800a189
 8009ef0:	0800a225 	.word	0x0800a225
 8009ef4:	0800a2a3 	.word	0x0800a2a3
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009ef8:	2108      	movs	r1, #8
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f000 faea 	bl	800a4d4 <USBH_Get_DevDesc>
 8009f00:	4603      	mov	r3, r0
 8009f02:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009f04:	7bbb      	ldrb	r3, [r7, #14]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d130      	bne.n	8009f6c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2201      	movs	r2, #1
 8009f18:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	7919      	ldrb	r1, [r3, #4]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009f2a:	687a      	ldr	r2, [r7, #4]
 8009f2c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009f2e:	b292      	uxth	r2, r2
 8009f30:	9202      	str	r2, [sp, #8]
 8009f32:	2200      	movs	r2, #0
 8009f34:	9201      	str	r2, [sp, #4]
 8009f36:	9300      	str	r3, [sp, #0]
 8009f38:	4603      	mov	r3, r0
 8009f3a:	2280      	movs	r2, #128	; 0x80
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f001 f901 	bl	800b144 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	7959      	ldrb	r1, [r3, #5]
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009f52:	687a      	ldr	r2, [r7, #4]
 8009f54:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009f56:	b292      	uxth	r2, r2
 8009f58:	9202      	str	r2, [sp, #8]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	9201      	str	r2, [sp, #4]
 8009f5e:	9300      	str	r3, [sp, #0]
 8009f60:	4603      	mov	r3, r0
 8009f62:	2200      	movs	r2, #0
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f001 f8ed 	bl	800b144 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009f6a:	e1bc      	b.n	800a2e6 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009f6c:	7bbb      	ldrb	r3, [r7, #14]
 8009f6e:	2b03      	cmp	r3, #3
 8009f70:	f040 81b9 	bne.w	800a2e6 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009f7a:	3301      	adds	r3, #1
 8009f7c:	b2da      	uxtb	r2, r3
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009f8a:	2b03      	cmp	r3, #3
 8009f8c:	d903      	bls.n	8009f96 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	220d      	movs	r2, #13
 8009f92:	701a      	strb	r2, [r3, #0]
      break;
 8009f94:	e1a7      	b.n	800a2e6 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	795b      	ldrb	r3, [r3, #5]
 8009f9a:	4619      	mov	r1, r3
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f001 f921 	bl	800b1e4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	791b      	ldrb	r3, [r3, #4]
 8009fa6:	4619      	mov	r1, r3
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f001 f91b 	bl	800b1e4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	701a      	strb	r2, [r3, #0]
      break;
 8009fb4:	e197      	b.n	800a2e6 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009fb6:	2112      	movs	r1, #18
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f000 fa8b 	bl	800a4d4 <USBH_Get_DevDesc>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009fc2:	7bbb      	ldrb	r3, [r7, #14]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d103      	bne.n	8009fd0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2202      	movs	r2, #2
 8009fcc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009fce:	e18c      	b.n	800a2ea <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009fd0:	7bbb      	ldrb	r3, [r7, #14]
 8009fd2:	2b03      	cmp	r3, #3
 8009fd4:	f040 8189 	bne.w	800a2ea <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009fde:	3301      	adds	r3, #1
 8009fe0:	b2da      	uxtb	r2, r3
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009fee:	2b03      	cmp	r3, #3
 8009ff0:	d903      	bls.n	8009ffa <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	220d      	movs	r2, #13
 8009ff6:	701a      	strb	r2, [r3, #0]
      break;
 8009ff8:	e177      	b.n	800a2ea <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	795b      	ldrb	r3, [r3, #5]
 8009ffe:	4619      	mov	r1, r3
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f001 f8ef 	bl	800b1e4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	791b      	ldrb	r3, [r3, #4]
 800a00a:	4619      	mov	r1, r3
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f001 f8e9 	bl	800b1e4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2200      	movs	r2, #0
 800a016:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2200      	movs	r2, #0
 800a01c:	701a      	strb	r2, [r3, #0]
      break;
 800a01e:	e164      	b.n	800a2ea <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a020:	2101      	movs	r1, #1
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f000 fb02 	bl	800a62c <USBH_SetAddress>
 800a028:	4603      	mov	r3, r0
 800a02a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a02c:	7bbb      	ldrb	r3, [r7, #14]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d132      	bne.n	800a098 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800a032:	2002      	movs	r0, #2
 800a034:	f004 fb00 	bl	800e638 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2201      	movs	r2, #1
 800a03c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2203      	movs	r2, #3
 800a044:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	7919      	ldrb	r1, [r3, #4]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a056:	687a      	ldr	r2, [r7, #4]
 800a058:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a05a:	b292      	uxth	r2, r2
 800a05c:	9202      	str	r2, [sp, #8]
 800a05e:	2200      	movs	r2, #0
 800a060:	9201      	str	r2, [sp, #4]
 800a062:	9300      	str	r3, [sp, #0]
 800a064:	4603      	mov	r3, r0
 800a066:	2280      	movs	r2, #128	; 0x80
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f001 f86b 	bl	800b144 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	7959      	ldrb	r1, [r3, #5]
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a07e:	687a      	ldr	r2, [r7, #4]
 800a080:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a082:	b292      	uxth	r2, r2
 800a084:	9202      	str	r2, [sp, #8]
 800a086:	2200      	movs	r2, #0
 800a088:	9201      	str	r2, [sp, #4]
 800a08a:	9300      	str	r3, [sp, #0]
 800a08c:	4603      	mov	r3, r0
 800a08e:	2200      	movs	r2, #0
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f001 f857 	bl	800b144 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a096:	e12a      	b.n	800a2ee <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a098:	7bbb      	ldrb	r3, [r7, #14]
 800a09a:	2b03      	cmp	r3, #3
 800a09c:	f040 8127 	bne.w	800a2ee <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	220d      	movs	r2, #13
 800a0a4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	705a      	strb	r2, [r3, #1]
      break;
 800a0ac:	e11f      	b.n	800a2ee <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a0ae:	2109      	movs	r1, #9
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f000 fa37 	bl	800a524 <USBH_Get_CfgDesc>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a0ba:	7bbb      	ldrb	r3, [r7, #14]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d103      	bne.n	800a0c8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2204      	movs	r2, #4
 800a0c4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a0c6:	e114      	b.n	800a2f2 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a0c8:	7bbb      	ldrb	r3, [r7, #14]
 800a0ca:	2b03      	cmp	r3, #3
 800a0cc:	f040 8111 	bne.w	800a2f2 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a0d6:	3301      	adds	r3, #1
 800a0d8:	b2da      	uxtb	r2, r3
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a0e6:	2b03      	cmp	r3, #3
 800a0e8:	d903      	bls.n	800a0f2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	220d      	movs	r2, #13
 800a0ee:	701a      	strb	r2, [r3, #0]
      break;
 800a0f0:	e0ff      	b.n	800a2f2 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	795b      	ldrb	r3, [r3, #5]
 800a0f6:	4619      	mov	r1, r3
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f001 f873 	bl	800b1e4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	791b      	ldrb	r3, [r3, #4]
 800a102:	4619      	mov	r1, r3
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f001 f86d 	bl	800b1e4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2200      	movs	r2, #0
 800a10e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2200      	movs	r2, #0
 800a114:	701a      	strb	r2, [r3, #0]
      break;
 800a116:	e0ec      	b.n	800a2f2 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800a11e:	4619      	mov	r1, r3
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f000 f9ff 	bl	800a524 <USBH_Get_CfgDesc>
 800a126:	4603      	mov	r3, r0
 800a128:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a12a:	7bbb      	ldrb	r3, [r7, #14]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d103      	bne.n	800a138 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2205      	movs	r2, #5
 800a134:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a136:	e0de      	b.n	800a2f6 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a138:	7bbb      	ldrb	r3, [r7, #14]
 800a13a:	2b03      	cmp	r3, #3
 800a13c:	f040 80db 	bne.w	800a2f6 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a146:	3301      	adds	r3, #1
 800a148:	b2da      	uxtb	r2, r3
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a156:	2b03      	cmp	r3, #3
 800a158:	d903      	bls.n	800a162 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	220d      	movs	r2, #13
 800a15e:	701a      	strb	r2, [r3, #0]
      break;
 800a160:	e0c9      	b.n	800a2f6 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	795b      	ldrb	r3, [r3, #5]
 800a166:	4619      	mov	r1, r3
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f001 f83b 	bl	800b1e4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	791b      	ldrb	r3, [r3, #4]
 800a172:	4619      	mov	r1, r3
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f001 f835 	bl	800b1e4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2200      	movs	r2, #0
 800a17e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2200      	movs	r2, #0
 800a184:	701a      	strb	r2, [r3, #0]
      break;
 800a186:	e0b6      	b.n	800a2f6 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d036      	beq.n	800a200 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a19e:	23ff      	movs	r3, #255	; 0xff
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f000 f9e3 	bl	800a56c <USBH_Get_StringDesc>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a1aa:	7bbb      	ldrb	r3, [r7, #14]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d111      	bne.n	800a1d4 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2206      	movs	r2, #6
 800a1b4:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2205      	movs	r2, #5
 800a1ba:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	4619      	mov	r1, r3
 800a1ce:	f001 f939 	bl	800b444 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a1d2:	e092      	b.n	800a2fa <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a1d4:	7bbb      	ldrb	r3, [r7, #14]
 800a1d6:	2b03      	cmp	r3, #3
 800a1d8:	f040 808f 	bne.w	800a2fa <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2206      	movs	r2, #6
 800a1e0:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2205      	movs	r2, #5
 800a1e6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	f001 f923 	bl	800b444 <osMessagePut>
      break;
 800a1fe:	e07c      	b.n	800a2fa <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2206      	movs	r2, #6
 800a204:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2205      	movs	r2, #5
 800a20a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a21a:	2200      	movs	r2, #0
 800a21c:	4619      	mov	r1, r3
 800a21e:	f001 f911 	bl	800b444 <osMessagePut>
      break;
 800a222:	e06a      	b.n	800a2fa <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d027      	beq.n	800a27e <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a23a:	23ff      	movs	r3, #255	; 0xff
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	f000 f995 	bl	800a56c <USBH_Get_StringDesc>
 800a242:	4603      	mov	r3, r0
 800a244:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a246:	7bbb      	ldrb	r3, [r7, #14]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d103      	bne.n	800a254 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2207      	movs	r2, #7
 800a250:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a252:	e054      	b.n	800a2fe <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a254:	7bbb      	ldrb	r3, [r7, #14]
 800a256:	2b03      	cmp	r3, #3
 800a258:	d151      	bne.n	800a2fe <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2207      	movs	r2, #7
 800a25e:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2205      	movs	r2, #5
 800a264:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a274:	2200      	movs	r2, #0
 800a276:	4619      	mov	r1, r3
 800a278:	f001 f8e4 	bl	800b444 <osMessagePut>
      break;
 800a27c:	e03f      	b.n	800a2fe <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2207      	movs	r2, #7
 800a282:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2205      	movs	r2, #5
 800a288:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a298:	2200      	movs	r2, #0
 800a29a:	4619      	mov	r1, r3
 800a29c:	f001 f8d2 	bl	800b444 <osMessagePut>
      break;
 800a2a0:	e02d      	b.n	800a2fe <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d017      	beq.n	800a2dc <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a2b8:	23ff      	movs	r3, #255	; 0xff
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f000 f956 	bl	800a56c <USBH_Get_StringDesc>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a2c4:	7bbb      	ldrb	r3, [r7, #14]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d102      	bne.n	800a2d0 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a2ce:	e018      	b.n	800a302 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a2d0:	7bbb      	ldrb	r3, [r7, #14]
 800a2d2:	2b03      	cmp	r3, #3
 800a2d4:	d115      	bne.n	800a302 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	73fb      	strb	r3, [r7, #15]
      break;
 800a2da:	e012      	b.n	800a302 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	73fb      	strb	r3, [r7, #15]
      break;
 800a2e0:	e00f      	b.n	800a302 <USBH_HandleEnum+0x44a>

    default:
      break;
 800a2e2:	bf00      	nop
 800a2e4:	e00e      	b.n	800a304 <USBH_HandleEnum+0x44c>
      break;
 800a2e6:	bf00      	nop
 800a2e8:	e00c      	b.n	800a304 <USBH_HandleEnum+0x44c>
      break;
 800a2ea:	bf00      	nop
 800a2ec:	e00a      	b.n	800a304 <USBH_HandleEnum+0x44c>
      break;
 800a2ee:	bf00      	nop
 800a2f0:	e008      	b.n	800a304 <USBH_HandleEnum+0x44c>
      break;
 800a2f2:	bf00      	nop
 800a2f4:	e006      	b.n	800a304 <USBH_HandleEnum+0x44c>
      break;
 800a2f6:	bf00      	nop
 800a2f8:	e004      	b.n	800a304 <USBH_HandleEnum+0x44c>
      break;
 800a2fa:	bf00      	nop
 800a2fc:	e002      	b.n	800a304 <USBH_HandleEnum+0x44c>
      break;
 800a2fe:	bf00      	nop
 800a300:	e000      	b.n	800a304 <USBH_HandleEnum+0x44c>
      break;
 800a302:	bf00      	nop
  }
  return Status;
 800a304:	7bfb      	ldrb	r3, [r7, #15]
}
 800a306:	4618      	mov	r0, r3
 800a308:	3710      	adds	r7, #16
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}
 800a30e:	bf00      	nop

0800a310 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a310:	b480      	push	{r7}
 800a312:	b083      	sub	sp, #12
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	683a      	ldr	r2, [r7, #0]
 800a31e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800a322:	bf00      	nop
 800a324:	370c      	adds	r7, #12
 800a326:	46bd      	mov	sp, r7
 800a328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32c:	4770      	bx	lr

0800a32e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a32e:	b580      	push	{r7, lr}
 800a330:	b082      	sub	sp, #8
 800a332:	af00      	add	r7, sp, #0
 800a334:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a33c:	1c5a      	adds	r2, r3, #1
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f000 f804 	bl	800a352 <USBH_HandleSof>
}
 800a34a:	bf00      	nop
 800a34c:	3708      	adds	r7, #8
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}

0800a352 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a352:	b580      	push	{r7, lr}
 800a354:	b082      	sub	sp, #8
 800a356:	af00      	add	r7, sp, #0
 800a358:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	781b      	ldrb	r3, [r3, #0]
 800a35e:	b2db      	uxtb	r3, r3
 800a360:	2b0b      	cmp	r3, #11
 800a362:	d10a      	bne.n	800a37a <USBH_HandleSof+0x28>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d005      	beq.n	800a37a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a374:	699b      	ldr	r3, [r3, #24]
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	4798      	blx	r3
  }
}
 800a37a:	bf00      	nop
 800a37c:	3708      	adds	r7, #8
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}

0800a382 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a382:	b580      	push	{r7, lr}
 800a384:	b082      	sub	sp, #8
 800a386:	af00      	add	r7, sp, #0
 800a388:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2201      	movs	r2, #1
 800a38e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2201      	movs	r2, #1
 800a396:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	4619      	mov	r1, r3
 800a3aa:	f001 f84b 	bl	800b444 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800a3ae:	bf00      	nop
}
 800a3b0:	3708      	adds	r7, #8
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}

0800a3b6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a3b6:	b480      	push	{r7}
 800a3b8:	b083      	sub	sp, #12
 800a3ba:	af00      	add	r7, sp, #0
 800a3bc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800a3c6:	bf00      	nop
}
 800a3c8:	370c      	adds	r7, #12
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d0:	4770      	bx	lr

0800a3d2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a3d2:	b580      	push	{r7, lr}
 800a3d4:	b082      	sub	sp, #8
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2201      	movs	r2, #1
 800a3de:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2201      	movs	r2, #1
 800a3f6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a406:	2200      	movs	r2, #0
 800a408:	4619      	mov	r1, r3
 800a40a:	f001 f81b 	bl	800b444 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800a40e:	2300      	movs	r3, #0
}
 800a410:	4618      	mov	r0, r3
 800a412:	3708      	adds	r7, #8
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}

0800a418 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b082      	sub	sp, #8
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2201      	movs	r2, #1
 800a424:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2200      	movs	r2, #0
 800a42c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2200      	movs	r2, #0
 800a434:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f003 ffb4 	bl	800e3a6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	791b      	ldrb	r3, [r3, #4]
 800a442:	4619      	mov	r1, r3
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f000 fecd 	bl	800b1e4 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	795b      	ldrb	r3, [r3, #5]
 800a44e:	4619      	mov	r1, r3
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f000 fec7 	bl	800b1e4 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2201      	movs	r2, #1
 800a45a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a46a:	2200      	movs	r2, #0
 800a46c:	4619      	mov	r1, r3
 800a46e:	f000 ffe9 	bl	800b444 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800a472:	2300      	movs	r3, #0
}
 800a474:	4618      	mov	r0, r3
 800a476:	3708      	adds	r7, #8
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}

0800a47c <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b086      	sub	sp, #24
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 800a48a:	f107 030c 	add.w	r3, r7, #12
 800a48e:	f04f 32ff 	mov.w	r2, #4294967295
 800a492:	4618      	mov	r0, r3
 800a494:	f001 f816 	bl	800b4c4 <osMessageGet>
    if (event.status == osEventMessage)
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	2b10      	cmp	r3, #16
 800a49c:	d1f2      	bne.n	800a484 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f7ff faa8 	bl	80099f4 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800a4a4:	e7ee      	b.n	800a484 <USBH_Process_OS+0x8>

0800a4a6 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800a4a6:	b580      	push	{r7, lr}
 800a4a8:	b082      	sub	sp, #8
 800a4aa:	af00      	add	r7, sp, #0
 800a4ac:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2201      	movs	r2, #1
 800a4b2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	4619      	mov	r1, r3
 800a4c6:	f000 ffbd 	bl	800b444 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800a4ca:	2300      	movs	r3, #0
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3708      	adds	r7, #8
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}

0800a4d4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b086      	sub	sp, #24
 800a4d8:	af02      	add	r7, sp, #8
 800a4da:	6078      	str	r0, [r7, #4]
 800a4dc:	460b      	mov	r3, r1
 800a4de:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800a4e6:	78fb      	ldrb	r3, [r7, #3]
 800a4e8:	b29b      	uxth	r3, r3
 800a4ea:	9300      	str	r3, [sp, #0]
 800a4ec:	4613      	mov	r3, r2
 800a4ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a4f2:	2100      	movs	r1, #0
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f000 f864 	bl	800a5c2 <USBH_GetDescriptor>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	73fb      	strb	r3, [r7, #15]
 800a4fe:	7bfb      	ldrb	r3, [r7, #15]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d10a      	bne.n	800a51a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f203 3026 	addw	r0, r3, #806	; 0x326
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a510:	78fa      	ldrb	r2, [r7, #3]
 800a512:	b292      	uxth	r2, r2
 800a514:	4619      	mov	r1, r3
 800a516:	f000 f918 	bl	800a74a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800a51a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3710      	adds	r7, #16
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}

0800a524 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800a524:	b580      	push	{r7, lr}
 800a526:	b086      	sub	sp, #24
 800a528:	af02      	add	r7, sp, #8
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	460b      	mov	r3, r1
 800a52e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	331c      	adds	r3, #28
 800a534:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a536:	887b      	ldrh	r3, [r7, #2]
 800a538:	9300      	str	r3, [sp, #0]
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a540:	2100      	movs	r1, #0
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f000 f83d 	bl	800a5c2 <USBH_GetDescriptor>
 800a548:	4603      	mov	r3, r0
 800a54a:	72fb      	strb	r3, [r7, #11]
 800a54c:	7afb      	ldrb	r3, [r7, #11]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d107      	bne.n	800a562 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a558:	887a      	ldrh	r2, [r7, #2]
 800a55a:	68f9      	ldr	r1, [r7, #12]
 800a55c:	4618      	mov	r0, r3
 800a55e:	f000 f964 	bl	800a82a <USBH_ParseCfgDesc>
  }

  return status;
 800a562:	7afb      	ldrb	r3, [r7, #11]
}
 800a564:	4618      	mov	r0, r3
 800a566:	3710      	adds	r7, #16
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}

0800a56c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b088      	sub	sp, #32
 800a570:	af02      	add	r7, sp, #8
 800a572:	60f8      	str	r0, [r7, #12]
 800a574:	607a      	str	r2, [r7, #4]
 800a576:	461a      	mov	r2, r3
 800a578:	460b      	mov	r3, r1
 800a57a:	72fb      	strb	r3, [r7, #11]
 800a57c:	4613      	mov	r3, r2
 800a57e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800a580:	7afb      	ldrb	r3, [r7, #11]
 800a582:	b29b      	uxth	r3, r3
 800a584:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a588:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800a590:	893b      	ldrh	r3, [r7, #8]
 800a592:	9300      	str	r3, [sp, #0]
 800a594:	460b      	mov	r3, r1
 800a596:	2100      	movs	r1, #0
 800a598:	68f8      	ldr	r0, [r7, #12]
 800a59a:	f000 f812 	bl	800a5c2 <USBH_GetDescriptor>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	75fb      	strb	r3, [r7, #23]
 800a5a2:	7dfb      	ldrb	r3, [r7, #23]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d107      	bne.n	800a5b8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a5ae:	893a      	ldrh	r2, [r7, #8]
 800a5b0:	6879      	ldr	r1, [r7, #4]
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f000 fa37 	bl	800aa26 <USBH_ParseStringDesc>
  }

  return status;
 800a5b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3718      	adds	r7, #24
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}

0800a5c2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800a5c2:	b580      	push	{r7, lr}
 800a5c4:	b084      	sub	sp, #16
 800a5c6:	af00      	add	r7, sp, #0
 800a5c8:	60f8      	str	r0, [r7, #12]
 800a5ca:	607b      	str	r3, [r7, #4]
 800a5cc:	460b      	mov	r3, r1
 800a5ce:	72fb      	strb	r3, [r7, #11]
 800a5d0:	4613      	mov	r3, r2
 800a5d2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	789b      	ldrb	r3, [r3, #2]
 800a5d8:	2b01      	cmp	r3, #1
 800a5da:	d11c      	bne.n	800a616 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a5dc:	7afb      	ldrb	r3, [r7, #11]
 800a5de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a5e2:	b2da      	uxtb	r2, r3
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	2206      	movs	r2, #6
 800a5ec:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	893a      	ldrh	r2, [r7, #8]
 800a5f2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a5f4:	893b      	ldrh	r3, [r7, #8]
 800a5f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a5fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a5fe:	d104      	bne.n	800a60a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	f240 4209 	movw	r2, #1033	; 0x409
 800a606:	829a      	strh	r2, [r3, #20]
 800a608:	e002      	b.n	800a610 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	2200      	movs	r2, #0
 800a60e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	8b3a      	ldrh	r2, [r7, #24]
 800a614:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a616:	8b3b      	ldrh	r3, [r7, #24]
 800a618:	461a      	mov	r2, r3
 800a61a:	6879      	ldr	r1, [r7, #4]
 800a61c:	68f8      	ldr	r0, [r7, #12]
 800a61e:	f000 fa50 	bl	800aac2 <USBH_CtlReq>
 800a622:	4603      	mov	r3, r0
}
 800a624:	4618      	mov	r0, r3
 800a626:	3710      	adds	r7, #16
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}

0800a62c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b082      	sub	sp, #8
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
 800a634:	460b      	mov	r3, r1
 800a636:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	789b      	ldrb	r3, [r3, #2]
 800a63c:	2b01      	cmp	r3, #1
 800a63e:	d10f      	bne.n	800a660 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2200      	movs	r2, #0
 800a644:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2205      	movs	r2, #5
 800a64a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a64c:	78fb      	ldrb	r3, [r7, #3]
 800a64e:	b29a      	uxth	r2, r3
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2200      	movs	r2, #0
 800a658:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2200      	movs	r2, #0
 800a65e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a660:	2200      	movs	r2, #0
 800a662:	2100      	movs	r1, #0
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f000 fa2c 	bl	800aac2 <USBH_CtlReq>
 800a66a:	4603      	mov	r3, r0
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3708      	adds	r7, #8
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}

0800a674 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b082      	sub	sp, #8
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
 800a67c:	460b      	mov	r3, r1
 800a67e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	789b      	ldrb	r3, [r3, #2]
 800a684:	2b01      	cmp	r3, #1
 800a686:	d10e      	bne.n	800a6a6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2200      	movs	r2, #0
 800a68c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2209      	movs	r2, #9
 800a692:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	887a      	ldrh	r2, [r7, #2]
 800a698:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2200      	movs	r2, #0
 800a69e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	2100      	movs	r1, #0
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f000 fa09 	bl	800aac2 <USBH_CtlReq>
 800a6b0:	4603      	mov	r3, r0
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3708      	adds	r7, #8
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}

0800a6ba <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a6ba:	b580      	push	{r7, lr}
 800a6bc:	b082      	sub	sp, #8
 800a6be:	af00      	add	r7, sp, #0
 800a6c0:	6078      	str	r0, [r7, #4]
 800a6c2:	460b      	mov	r3, r1
 800a6c4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	789b      	ldrb	r3, [r3, #2]
 800a6ca:	2b01      	cmp	r3, #1
 800a6cc:	d10f      	bne.n	800a6ee <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2203      	movs	r2, #3
 800a6d8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a6da:	78fb      	ldrb	r3, [r7, #3]
 800a6dc:	b29a      	uxth	r2, r3
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	2100      	movs	r1, #0
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f000 f9e5 	bl	800aac2 <USBH_CtlReq>
 800a6f8:	4603      	mov	r3, r0
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	3708      	adds	r7, #8
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}

0800a702 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a702:	b580      	push	{r7, lr}
 800a704:	b082      	sub	sp, #8
 800a706:	af00      	add	r7, sp, #0
 800a708:	6078      	str	r0, [r7, #4]
 800a70a:	460b      	mov	r3, r1
 800a70c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	789b      	ldrb	r3, [r3, #2]
 800a712:	2b01      	cmp	r3, #1
 800a714:	d10f      	bne.n	800a736 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2202      	movs	r2, #2
 800a71a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2201      	movs	r2, #1
 800a720:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2200      	movs	r2, #0
 800a726:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a728:	78fb      	ldrb	r3, [r7, #3]
 800a72a:	b29a      	uxth	r2, r3
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2200      	movs	r2, #0
 800a734:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800a736:	2200      	movs	r2, #0
 800a738:	2100      	movs	r1, #0
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f000 f9c1 	bl	800aac2 <USBH_CtlReq>
 800a740:	4603      	mov	r3, r0
}
 800a742:	4618      	mov	r0, r3
 800a744:	3708      	adds	r7, #8
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}

0800a74a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800a74a:	b480      	push	{r7}
 800a74c:	b085      	sub	sp, #20
 800a74e:	af00      	add	r7, sp, #0
 800a750:	60f8      	str	r0, [r7, #12]
 800a752:	60b9      	str	r1, [r7, #8]
 800a754:	4613      	mov	r3, r2
 800a756:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	781a      	ldrb	r2, [r3, #0]
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	785a      	ldrb	r2, [r3, #1]
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	3302      	adds	r3, #2
 800a76c:	781b      	ldrb	r3, [r3, #0]
 800a76e:	b29a      	uxth	r2, r3
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	3303      	adds	r3, #3
 800a774:	781b      	ldrb	r3, [r3, #0]
 800a776:	b29b      	uxth	r3, r3
 800a778:	021b      	lsls	r3, r3, #8
 800a77a:	b29b      	uxth	r3, r3
 800a77c:	4313      	orrs	r3, r2
 800a77e:	b29a      	uxth	r2, r3
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	791a      	ldrb	r2, [r3, #4]
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	795a      	ldrb	r2, [r3, #5]
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	799a      	ldrb	r2, [r3, #6]
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	79da      	ldrb	r2, [r3, #7]
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800a7a4:	88fb      	ldrh	r3, [r7, #6]
 800a7a6:	2b08      	cmp	r3, #8
 800a7a8:	d939      	bls.n	800a81e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	3308      	adds	r3, #8
 800a7ae:	781b      	ldrb	r3, [r3, #0]
 800a7b0:	b29a      	uxth	r2, r3
 800a7b2:	68bb      	ldr	r3, [r7, #8]
 800a7b4:	3309      	adds	r3, #9
 800a7b6:	781b      	ldrb	r3, [r3, #0]
 800a7b8:	b29b      	uxth	r3, r3
 800a7ba:	021b      	lsls	r3, r3, #8
 800a7bc:	b29b      	uxth	r3, r3
 800a7be:	4313      	orrs	r3, r2
 800a7c0:	b29a      	uxth	r2, r3
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	330a      	adds	r3, #10
 800a7ca:	781b      	ldrb	r3, [r3, #0]
 800a7cc:	b29a      	uxth	r2, r3
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	330b      	adds	r3, #11
 800a7d2:	781b      	ldrb	r3, [r3, #0]
 800a7d4:	b29b      	uxth	r3, r3
 800a7d6:	021b      	lsls	r3, r3, #8
 800a7d8:	b29b      	uxth	r3, r3
 800a7da:	4313      	orrs	r3, r2
 800a7dc:	b29a      	uxth	r2, r3
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800a7e2:	68bb      	ldr	r3, [r7, #8]
 800a7e4:	330c      	adds	r3, #12
 800a7e6:	781b      	ldrb	r3, [r3, #0]
 800a7e8:	b29a      	uxth	r2, r3
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	330d      	adds	r3, #13
 800a7ee:	781b      	ldrb	r3, [r3, #0]
 800a7f0:	b29b      	uxth	r3, r3
 800a7f2:	021b      	lsls	r3, r3, #8
 800a7f4:	b29b      	uxth	r3, r3
 800a7f6:	4313      	orrs	r3, r2
 800a7f8:	b29a      	uxth	r2, r3
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	7b9a      	ldrb	r2, [r3, #14]
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	7bda      	ldrb	r2, [r3, #15]
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	7c1a      	ldrb	r2, [r3, #16]
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	7c5a      	ldrb	r2, [r3, #17]
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	745a      	strb	r2, [r3, #17]
  }
}
 800a81e:	bf00      	nop
 800a820:	3714      	adds	r7, #20
 800a822:	46bd      	mov	sp, r7
 800a824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a828:	4770      	bx	lr

0800a82a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800a82a:	b580      	push	{r7, lr}
 800a82c:	b08a      	sub	sp, #40	; 0x28
 800a82e:	af00      	add	r7, sp, #0
 800a830:	60f8      	str	r0, [r7, #12]
 800a832:	60b9      	str	r1, [r7, #8]
 800a834:	4613      	mov	r3, r2
 800a836:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a83c:	2300      	movs	r3, #0
 800a83e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800a842:	2300      	movs	r3, #0
 800a844:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	781a      	ldrb	r2, [r3, #0]
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	785a      	ldrb	r2, [r3, #1]
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	3302      	adds	r3, #2
 800a860:	781b      	ldrb	r3, [r3, #0]
 800a862:	b29a      	uxth	r2, r3
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	3303      	adds	r3, #3
 800a868:	781b      	ldrb	r3, [r3, #0]
 800a86a:	b29b      	uxth	r3, r3
 800a86c:	021b      	lsls	r3, r3, #8
 800a86e:	b29b      	uxth	r3, r3
 800a870:	4313      	orrs	r3, r2
 800a872:	b29a      	uxth	r2, r3
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	791a      	ldrb	r2, [r3, #4]
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	795a      	ldrb	r2, [r3, #5]
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	799a      	ldrb	r2, [r3, #6]
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800a890:	68bb      	ldr	r3, [r7, #8]
 800a892:	79da      	ldrb	r2, [r3, #7]
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	7a1a      	ldrb	r2, [r3, #8]
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a8a0:	88fb      	ldrh	r3, [r7, #6]
 800a8a2:	2b09      	cmp	r3, #9
 800a8a4:	d95f      	bls.n	800a966 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800a8a6:	2309      	movs	r3, #9
 800a8a8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a8ae:	e051      	b.n	800a954 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a8b0:	f107 0316 	add.w	r3, r7, #22
 800a8b4:	4619      	mov	r1, r3
 800a8b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a8b8:	f000 f8e8 	bl	800aa8c <USBH_GetNextDesc>
 800a8bc:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800a8be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c0:	785b      	ldrb	r3, [r3, #1]
 800a8c2:	2b04      	cmp	r3, #4
 800a8c4:	d146      	bne.n	800a954 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800a8c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a8ca:	221a      	movs	r2, #26
 800a8cc:	fb02 f303 	mul.w	r3, r2, r3
 800a8d0:	3308      	adds	r3, #8
 800a8d2:	68fa      	ldr	r2, [r7, #12]
 800a8d4:	4413      	add	r3, r2
 800a8d6:	3302      	adds	r3, #2
 800a8d8:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a8da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a8dc:	69f8      	ldr	r0, [r7, #28]
 800a8de:	f000 f846 	bl	800a96e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a8ec:	e022      	b.n	800a934 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a8ee:	f107 0316 	add.w	r3, r7, #22
 800a8f2:	4619      	mov	r1, r3
 800a8f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a8f6:	f000 f8c9 	bl	800aa8c <USBH_GetNextDesc>
 800a8fa:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800a8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8fe:	785b      	ldrb	r3, [r3, #1]
 800a900:	2b05      	cmp	r3, #5
 800a902:	d117      	bne.n	800a934 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a904:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a908:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a90c:	3201      	adds	r2, #1
 800a90e:	00d2      	lsls	r2, r2, #3
 800a910:	211a      	movs	r1, #26
 800a912:	fb01 f303 	mul.w	r3, r1, r3
 800a916:	4413      	add	r3, r2
 800a918:	3308      	adds	r3, #8
 800a91a:	68fa      	ldr	r2, [r7, #12]
 800a91c:	4413      	add	r3, r2
 800a91e:	3304      	adds	r3, #4
 800a920:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800a922:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a924:	69b8      	ldr	r0, [r7, #24]
 800a926:	f000 f851 	bl	800a9cc <USBH_ParseEPDesc>
            ep_ix++;
 800a92a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a92e:	3301      	adds	r3, #1
 800a930:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a934:	69fb      	ldr	r3, [r7, #28]
 800a936:	791b      	ldrb	r3, [r3, #4]
 800a938:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a93c:	429a      	cmp	r2, r3
 800a93e:	d204      	bcs.n	800a94a <USBH_ParseCfgDesc+0x120>
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	885a      	ldrh	r2, [r3, #2]
 800a944:	8afb      	ldrh	r3, [r7, #22]
 800a946:	429a      	cmp	r2, r3
 800a948:	d8d1      	bhi.n	800a8ee <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800a94a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a94e:	3301      	adds	r3, #1
 800a950:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a954:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a958:	2b01      	cmp	r3, #1
 800a95a:	d804      	bhi.n	800a966 <USBH_ParseCfgDesc+0x13c>
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	885a      	ldrh	r2, [r3, #2]
 800a960:	8afb      	ldrh	r3, [r7, #22]
 800a962:	429a      	cmp	r2, r3
 800a964:	d8a4      	bhi.n	800a8b0 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800a966:	bf00      	nop
 800a968:	3728      	adds	r7, #40	; 0x28
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}

0800a96e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800a96e:	b480      	push	{r7}
 800a970:	b083      	sub	sp, #12
 800a972:	af00      	add	r7, sp, #0
 800a974:	6078      	str	r0, [r7, #4]
 800a976:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	781a      	ldrb	r2, [r3, #0]
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	785a      	ldrb	r2, [r3, #1]
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	789a      	ldrb	r2, [r3, #2]
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	78da      	ldrb	r2, [r3, #3]
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	791a      	ldrb	r2, [r3, #4]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	795a      	ldrb	r2, [r3, #5]
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	799a      	ldrb	r2, [r3, #6]
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	79da      	ldrb	r2, [r3, #7]
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	7a1a      	ldrb	r2, [r3, #8]
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	721a      	strb	r2, [r3, #8]
}
 800a9c0:	bf00      	nop
 800a9c2:	370c      	adds	r7, #12
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ca:	4770      	bx	lr

0800a9cc <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b083      	sub	sp, #12
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
 800a9d4:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	781a      	ldrb	r2, [r3, #0]
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	785a      	ldrb	r2, [r3, #1]
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	789a      	ldrb	r2, [r3, #2]
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	78da      	ldrb	r2, [r3, #3]
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	3304      	adds	r3, #4
 800a9fa:	781b      	ldrb	r3, [r3, #0]
 800a9fc:	b29a      	uxth	r2, r3
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	3305      	adds	r3, #5
 800aa02:	781b      	ldrb	r3, [r3, #0]
 800aa04:	b29b      	uxth	r3, r3
 800aa06:	021b      	lsls	r3, r3, #8
 800aa08:	b29b      	uxth	r3, r3
 800aa0a:	4313      	orrs	r3, r2
 800aa0c:	b29a      	uxth	r2, r3
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	799a      	ldrb	r2, [r3, #6]
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	719a      	strb	r2, [r3, #6]
}
 800aa1a:	bf00      	nop
 800aa1c:	370c      	adds	r7, #12
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa24:	4770      	bx	lr

0800aa26 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800aa26:	b480      	push	{r7}
 800aa28:	b087      	sub	sp, #28
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	60f8      	str	r0, [r7, #12]
 800aa2e:	60b9      	str	r1, [r7, #8]
 800aa30:	4613      	mov	r3, r2
 800aa32:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	3301      	adds	r3, #1
 800aa38:	781b      	ldrb	r3, [r3, #0]
 800aa3a:	2b03      	cmp	r3, #3
 800aa3c:	d120      	bne.n	800aa80 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	781b      	ldrb	r3, [r3, #0]
 800aa42:	1e9a      	subs	r2, r3, #2
 800aa44:	88fb      	ldrh	r3, [r7, #6]
 800aa46:	4293      	cmp	r3, r2
 800aa48:	bf28      	it	cs
 800aa4a:	4613      	movcs	r3, r2
 800aa4c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	3302      	adds	r3, #2
 800aa52:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800aa54:	2300      	movs	r3, #0
 800aa56:	82fb      	strh	r3, [r7, #22]
 800aa58:	e00b      	b.n	800aa72 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800aa5a:	8afb      	ldrh	r3, [r7, #22]
 800aa5c:	68fa      	ldr	r2, [r7, #12]
 800aa5e:	4413      	add	r3, r2
 800aa60:	781a      	ldrb	r2, [r3, #0]
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	701a      	strb	r2, [r3, #0]
      pdest++;
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	3301      	adds	r3, #1
 800aa6a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800aa6c:	8afb      	ldrh	r3, [r7, #22]
 800aa6e:	3302      	adds	r3, #2
 800aa70:	82fb      	strh	r3, [r7, #22]
 800aa72:	8afa      	ldrh	r2, [r7, #22]
 800aa74:	8abb      	ldrh	r3, [r7, #20]
 800aa76:	429a      	cmp	r2, r3
 800aa78:	d3ef      	bcc.n	800aa5a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	701a      	strb	r2, [r3, #0]
  }
}
 800aa80:	bf00      	nop
 800aa82:	371c      	adds	r7, #28
 800aa84:	46bd      	mov	sp, r7
 800aa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8a:	4770      	bx	lr

0800aa8c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	b085      	sub	sp, #20
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
 800aa94:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	881a      	ldrh	r2, [r3, #0]
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	781b      	ldrb	r3, [r3, #0]
 800aa9e:	b29b      	uxth	r3, r3
 800aaa0:	4413      	add	r3, r2
 800aaa2:	b29a      	uxth	r2, r3
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	781b      	ldrb	r3, [r3, #0]
 800aaac:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	4413      	add	r3, r2
 800aab2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800aab4:	68fb      	ldr	r3, [r7, #12]
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	3714      	adds	r7, #20
 800aaba:	46bd      	mov	sp, r7
 800aabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac0:	4770      	bx	lr

0800aac2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800aac2:	b580      	push	{r7, lr}
 800aac4:	b086      	sub	sp, #24
 800aac6:	af00      	add	r7, sp, #0
 800aac8:	60f8      	str	r0, [r7, #12]
 800aaca:	60b9      	str	r1, [r7, #8]
 800aacc:	4613      	mov	r3, r2
 800aace:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800aad0:	2301      	movs	r3, #1
 800aad2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	789b      	ldrb	r3, [r3, #2]
 800aad8:	2b01      	cmp	r3, #1
 800aada:	d002      	beq.n	800aae2 <USBH_CtlReq+0x20>
 800aadc:	2b02      	cmp	r3, #2
 800aade:	d01d      	beq.n	800ab1c <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800aae0:	e043      	b.n	800ab6a <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	68ba      	ldr	r2, [r7, #8]
 800aae6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	88fa      	ldrh	r2, [r7, #6]
 800aaec:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	2201      	movs	r2, #1
 800aaf2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	2202      	movs	r2, #2
 800aaf8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800aafa:	2301      	movs	r3, #1
 800aafc:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	2203      	movs	r2, #3
 800ab02:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ab12:	2200      	movs	r2, #0
 800ab14:	4619      	mov	r1, r3
 800ab16:	f000 fc95 	bl	800b444 <osMessagePut>
      break;
 800ab1a:	e026      	b.n	800ab6a <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800ab1c:	68f8      	ldr	r0, [r7, #12]
 800ab1e:	f000 f829 	bl	800ab74 <USBH_HandleControl>
 800ab22:	4603      	mov	r3, r0
 800ab24:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800ab26:	7dfb      	ldrb	r3, [r7, #23]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d002      	beq.n	800ab32 <USBH_CtlReq+0x70>
 800ab2c:	7dfb      	ldrb	r3, [r7, #23]
 800ab2e:	2b03      	cmp	r3, #3
 800ab30:	d106      	bne.n	800ab40 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	2201      	movs	r2, #1
 800ab36:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	761a      	strb	r2, [r3, #24]
 800ab3e:	e005      	b.n	800ab4c <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800ab40:	7dfb      	ldrb	r3, [r7, #23]
 800ab42:	2b02      	cmp	r3, #2
 800ab44:	d102      	bne.n	800ab4c <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	2201      	movs	r2, #1
 800ab4a:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	2203      	movs	r2, #3
 800ab50:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ab60:	2200      	movs	r2, #0
 800ab62:	4619      	mov	r1, r3
 800ab64:	f000 fc6e 	bl	800b444 <osMessagePut>
      break;
 800ab68:	bf00      	nop
  }
  return status;
 800ab6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	3718      	adds	r7, #24
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}

0800ab74 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b086      	sub	sp, #24
 800ab78:	af02      	add	r7, sp, #8
 800ab7a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ab80:	2300      	movs	r3, #0
 800ab82:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	7e1b      	ldrb	r3, [r3, #24]
 800ab88:	3b01      	subs	r3, #1
 800ab8a:	2b0a      	cmp	r3, #10
 800ab8c:	f200 8229 	bhi.w	800afe2 <USBH_HandleControl+0x46e>
 800ab90:	a201      	add	r2, pc, #4	; (adr r2, 800ab98 <USBH_HandleControl+0x24>)
 800ab92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab96:	bf00      	nop
 800ab98:	0800abc5 	.word	0x0800abc5
 800ab9c:	0800abdf 	.word	0x0800abdf
 800aba0:	0800ac81 	.word	0x0800ac81
 800aba4:	0800aca7 	.word	0x0800aca7
 800aba8:	0800ad33 	.word	0x0800ad33
 800abac:	0800ad5d 	.word	0x0800ad5d
 800abb0:	0800ae1f 	.word	0x0800ae1f
 800abb4:	0800ae41 	.word	0x0800ae41
 800abb8:	0800aed3 	.word	0x0800aed3
 800abbc:	0800aef9 	.word	0x0800aef9
 800abc0:	0800af8b 	.word	0x0800af8b
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f103 0110 	add.w	r1, r3, #16
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	795b      	ldrb	r3, [r3, #5]
 800abce:	461a      	mov	r2, r3
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f000 fa17 	bl	800b004 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2202      	movs	r2, #2
 800abda:	761a      	strb	r2, [r3, #24]
      break;
 800abdc:	e20c      	b.n	800aff8 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	795b      	ldrb	r3, [r3, #5]
 800abe2:	4619      	mov	r1, r3
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f003 fccd 	bl	800e584 <USBH_LL_GetURBState>
 800abea:	4603      	mov	r3, r0
 800abec:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800abee:	7bbb      	ldrb	r3, [r7, #14]
 800abf0:	2b01      	cmp	r3, #1
 800abf2:	d12c      	bne.n	800ac4e <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	7c1b      	ldrb	r3, [r3, #16]
 800abf8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800abfc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	8adb      	ldrh	r3, [r3, #22]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d00a      	beq.n	800ac1c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800ac06:	7b7b      	ldrb	r3, [r7, #13]
 800ac08:	2b80      	cmp	r3, #128	; 0x80
 800ac0a:	d103      	bne.n	800ac14 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2203      	movs	r2, #3
 800ac10:	761a      	strb	r2, [r3, #24]
 800ac12:	e00d      	b.n	800ac30 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2205      	movs	r2, #5
 800ac18:	761a      	strb	r2, [r3, #24]
 800ac1a:	e009      	b.n	800ac30 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800ac1c:	7b7b      	ldrb	r3, [r7, #13]
 800ac1e:	2b80      	cmp	r3, #128	; 0x80
 800ac20:	d103      	bne.n	800ac2a <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2209      	movs	r2, #9
 800ac26:	761a      	strb	r2, [r3, #24]
 800ac28:	e002      	b.n	800ac30 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2207      	movs	r2, #7
 800ac2e:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2203      	movs	r2, #3
 800ac34:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ac44:	2200      	movs	r2, #0
 800ac46:	4619      	mov	r1, r3
 800ac48:	f000 fbfc 	bl	800b444 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ac4c:	e1cb      	b.n	800afe6 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800ac4e:	7bbb      	ldrb	r3, [r7, #14]
 800ac50:	2b04      	cmp	r3, #4
 800ac52:	d003      	beq.n	800ac5c <USBH_HandleControl+0xe8>
 800ac54:	7bbb      	ldrb	r3, [r7, #14]
 800ac56:	2b02      	cmp	r3, #2
 800ac58:	f040 81c5 	bne.w	800afe6 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	220b      	movs	r2, #11
 800ac60:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2203      	movs	r2, #3
 800ac66:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ac76:	2200      	movs	r2, #0
 800ac78:	4619      	mov	r1, r3
 800ac7a:	f000 fbe3 	bl	800b444 <osMessagePut>
      break;
 800ac7e:	e1b2      	b.n	800afe6 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ac86:	b29a      	uxth	r2, r3
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6899      	ldr	r1, [r3, #8]
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	899a      	ldrh	r2, [r3, #12]
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	791b      	ldrb	r3, [r3, #4]
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f000 f9f2 	bl	800b082 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2204      	movs	r2, #4
 800aca2:	761a      	strb	r2, [r3, #24]
      break;
 800aca4:	e1a8      	b.n	800aff8 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	791b      	ldrb	r3, [r3, #4]
 800acaa:	4619      	mov	r1, r3
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f003 fc69 	bl	800e584 <USBH_LL_GetURBState>
 800acb2:	4603      	mov	r3, r0
 800acb4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800acb6:	7bbb      	ldrb	r3, [r7, #14]
 800acb8:	2b01      	cmp	r3, #1
 800acba:	d110      	bne.n	800acde <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2209      	movs	r2, #9
 800acc0:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2203      	movs	r2, #3
 800acc6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800acd6:	2200      	movs	r2, #0
 800acd8:	4619      	mov	r1, r3
 800acda:	f000 fbb3 	bl	800b444 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800acde:	7bbb      	ldrb	r3, [r7, #14]
 800ace0:	2b05      	cmp	r3, #5
 800ace2:	d110      	bne.n	800ad06 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800ace4:	2303      	movs	r3, #3
 800ace6:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2203      	movs	r2, #3
 800acec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800acfc:	2200      	movs	r2, #0
 800acfe:	4619      	mov	r1, r3
 800ad00:	f000 fba0 	bl	800b444 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ad04:	e171      	b.n	800afea <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800ad06:	7bbb      	ldrb	r3, [r7, #14]
 800ad08:	2b04      	cmp	r3, #4
 800ad0a:	f040 816e 	bne.w	800afea <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	220b      	movs	r2, #11
 800ad12:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2203      	movs	r2, #3
 800ad18:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ad28:	2200      	movs	r2, #0
 800ad2a:	4619      	mov	r1, r3
 800ad2c:	f000 fb8a 	bl	800b444 <osMessagePut>
      break;
 800ad30:	e15b      	b.n	800afea <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6899      	ldr	r1, [r3, #8]
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	899a      	ldrh	r2, [r3, #12]
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	795b      	ldrb	r3, [r3, #5]
 800ad3e:	2001      	movs	r0, #1
 800ad40:	9000      	str	r0, [sp, #0]
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f000 f978 	bl	800b038 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ad4e:	b29a      	uxth	r2, r3
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2206      	movs	r2, #6
 800ad58:	761a      	strb	r2, [r3, #24]
      break;
 800ad5a:	e14d      	b.n	800aff8 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	795b      	ldrb	r3, [r3, #5]
 800ad60:	4619      	mov	r1, r3
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	f003 fc0e 	bl	800e584 <USBH_LL_GetURBState>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ad6c:	7bbb      	ldrb	r3, [r7, #14]
 800ad6e:	2b01      	cmp	r3, #1
 800ad70:	d111      	bne.n	800ad96 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2207      	movs	r2, #7
 800ad76:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2203      	movs	r2, #3
 800ad7c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	4619      	mov	r1, r3
 800ad90:	f000 fb58 	bl	800b444 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ad94:	e12b      	b.n	800afee <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800ad96:	7bbb      	ldrb	r3, [r7, #14]
 800ad98:	2b05      	cmp	r3, #5
 800ad9a:	d113      	bne.n	800adc4 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	220c      	movs	r2, #12
 800ada0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ada2:	2303      	movs	r3, #3
 800ada4:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2203      	movs	r2, #3
 800adaa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800adba:	2200      	movs	r2, #0
 800adbc:	4619      	mov	r1, r3
 800adbe:	f000 fb41 	bl	800b444 <osMessagePut>
      break;
 800adc2:	e114      	b.n	800afee <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800adc4:	7bbb      	ldrb	r3, [r7, #14]
 800adc6:	2b02      	cmp	r3, #2
 800adc8:	d111      	bne.n	800adee <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	2205      	movs	r2, #5
 800adce:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2203      	movs	r2, #3
 800add4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ade4:	2200      	movs	r2, #0
 800ade6:	4619      	mov	r1, r3
 800ade8:	f000 fb2c 	bl	800b444 <osMessagePut>
      break;
 800adec:	e0ff      	b.n	800afee <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800adee:	7bbb      	ldrb	r3, [r7, #14]
 800adf0:	2b04      	cmp	r3, #4
 800adf2:	f040 80fc 	bne.w	800afee <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	220b      	movs	r2, #11
 800adfa:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800adfc:	2302      	movs	r3, #2
 800adfe:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2203      	movs	r2, #3
 800ae04:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ae14:	2200      	movs	r2, #0
 800ae16:	4619      	mov	r1, r3
 800ae18:	f000 fb14 	bl	800b444 <osMessagePut>
      break;
 800ae1c:	e0e7      	b.n	800afee <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	791b      	ldrb	r3, [r3, #4]
 800ae22:	2200      	movs	r2, #0
 800ae24:	2100      	movs	r1, #0
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f000 f92b 	bl	800b082 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ae32:	b29a      	uxth	r2, r3
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2208      	movs	r2, #8
 800ae3c:	761a      	strb	r2, [r3, #24]

      break;
 800ae3e:	e0db      	b.n	800aff8 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	791b      	ldrb	r3, [r3, #4]
 800ae44:	4619      	mov	r1, r3
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f003 fb9c 	bl	800e584 <USBH_LL_GetURBState>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ae50:	7bbb      	ldrb	r3, [r7, #14]
 800ae52:	2b01      	cmp	r3, #1
 800ae54:	d113      	bne.n	800ae7e <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	220d      	movs	r2, #13
 800ae5a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2203      	movs	r2, #3
 800ae64:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ae74:	2200      	movs	r2, #0
 800ae76:	4619      	mov	r1, r3
 800ae78:	f000 fae4 	bl	800b444 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ae7c:	e0b9      	b.n	800aff2 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800ae7e:	7bbb      	ldrb	r3, [r7, #14]
 800ae80:	2b04      	cmp	r3, #4
 800ae82:	d111      	bne.n	800aea8 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	220b      	movs	r2, #11
 800ae88:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2203      	movs	r2, #3
 800ae8e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ae9e:	2200      	movs	r2, #0
 800aea0:	4619      	mov	r1, r3
 800aea2:	f000 facf 	bl	800b444 <osMessagePut>
      break;
 800aea6:	e0a4      	b.n	800aff2 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800aea8:	7bbb      	ldrb	r3, [r7, #14]
 800aeaa:	2b05      	cmp	r3, #5
 800aeac:	f040 80a1 	bne.w	800aff2 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800aeb0:	2303      	movs	r3, #3
 800aeb2:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2203      	movs	r2, #3
 800aeb8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800aec8:	2200      	movs	r2, #0
 800aeca:	4619      	mov	r1, r3
 800aecc:	f000 faba 	bl	800b444 <osMessagePut>
      break;
 800aed0:	e08f      	b.n	800aff2 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	795b      	ldrb	r3, [r3, #5]
 800aed6:	2201      	movs	r2, #1
 800aed8:	9200      	str	r2, [sp, #0]
 800aeda:	2200      	movs	r2, #0
 800aedc:	2100      	movs	r1, #0
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f000 f8aa 	bl	800b038 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800aeea:	b29a      	uxth	r2, r3
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	220a      	movs	r2, #10
 800aef4:	761a      	strb	r2, [r3, #24]
      break;
 800aef6:	e07f      	b.n	800aff8 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	795b      	ldrb	r3, [r3, #5]
 800aefc:	4619      	mov	r1, r3
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f003 fb40 	bl	800e584 <USBH_LL_GetURBState>
 800af04:	4603      	mov	r3, r0
 800af06:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800af08:	7bbb      	ldrb	r3, [r7, #14]
 800af0a:	2b01      	cmp	r3, #1
 800af0c:	d113      	bne.n	800af36 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800af0e:	2300      	movs	r3, #0
 800af10:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	220d      	movs	r2, #13
 800af16:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2203      	movs	r2, #3
 800af1c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800af2c:	2200      	movs	r2, #0
 800af2e:	4619      	mov	r1, r3
 800af30:	f000 fa88 	bl	800b444 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800af34:	e05f      	b.n	800aff6 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800af36:	7bbb      	ldrb	r3, [r7, #14]
 800af38:	2b02      	cmp	r3, #2
 800af3a:	d111      	bne.n	800af60 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2209      	movs	r2, #9
 800af40:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2203      	movs	r2, #3
 800af46:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800af56:	2200      	movs	r2, #0
 800af58:	4619      	mov	r1, r3
 800af5a:	f000 fa73 	bl	800b444 <osMessagePut>
      break;
 800af5e:	e04a      	b.n	800aff6 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800af60:	7bbb      	ldrb	r3, [r7, #14]
 800af62:	2b04      	cmp	r3, #4
 800af64:	d147      	bne.n	800aff6 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	220b      	movs	r2, #11
 800af6a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2203      	movs	r2, #3
 800af70:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800af80:	2200      	movs	r2, #0
 800af82:	4619      	mov	r1, r3
 800af84:	f000 fa5e 	bl	800b444 <osMessagePut>
      break;
 800af88:	e035      	b.n	800aff6 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	7e5b      	ldrb	r3, [r3, #25]
 800af8e:	3301      	adds	r3, #1
 800af90:	b2da      	uxtb	r2, r3
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	765a      	strb	r2, [r3, #25]
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	7e5b      	ldrb	r3, [r3, #25]
 800af9a:	2b02      	cmp	r3, #2
 800af9c:	d806      	bhi.n	800afac <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2201      	movs	r2, #1
 800afa2:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2201      	movs	r2, #1
 800afa8:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800afaa:	e025      	b.n	800aff8 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800afb2:	2106      	movs	r1, #6
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2200      	movs	r2, #0
 800afbc:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	795b      	ldrb	r3, [r3, #5]
 800afc2:	4619      	mov	r1, r3
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f000 f90d 	bl	800b1e4 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	791b      	ldrb	r3, [r3, #4]
 800afce:	4619      	mov	r1, r3
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f000 f907 	bl	800b1e4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2200      	movs	r2, #0
 800afda:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800afdc:	2302      	movs	r3, #2
 800afde:	73fb      	strb	r3, [r7, #15]
      break;
 800afe0:	e00a      	b.n	800aff8 <USBH_HandleControl+0x484>

    default:
      break;
 800afe2:	bf00      	nop
 800afe4:	e008      	b.n	800aff8 <USBH_HandleControl+0x484>
      break;
 800afe6:	bf00      	nop
 800afe8:	e006      	b.n	800aff8 <USBH_HandleControl+0x484>
      break;
 800afea:	bf00      	nop
 800afec:	e004      	b.n	800aff8 <USBH_HandleControl+0x484>
      break;
 800afee:	bf00      	nop
 800aff0:	e002      	b.n	800aff8 <USBH_HandleControl+0x484>
      break;
 800aff2:	bf00      	nop
 800aff4:	e000      	b.n	800aff8 <USBH_HandleControl+0x484>
      break;
 800aff6:	bf00      	nop
  }

  return status;
 800aff8:	7bfb      	ldrb	r3, [r7, #15]
}
 800affa:	4618      	mov	r0, r3
 800affc:	3710      	adds	r7, #16
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}
 800b002:	bf00      	nop

0800b004 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b088      	sub	sp, #32
 800b008:	af04      	add	r7, sp, #16
 800b00a:	60f8      	str	r0, [r7, #12]
 800b00c:	60b9      	str	r1, [r7, #8]
 800b00e:	4613      	mov	r3, r2
 800b010:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b012:	79f9      	ldrb	r1, [r7, #7]
 800b014:	2300      	movs	r3, #0
 800b016:	9303      	str	r3, [sp, #12]
 800b018:	2308      	movs	r3, #8
 800b01a:	9302      	str	r3, [sp, #8]
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	9301      	str	r3, [sp, #4]
 800b020:	2300      	movs	r3, #0
 800b022:	9300      	str	r3, [sp, #0]
 800b024:	2300      	movs	r3, #0
 800b026:	2200      	movs	r2, #0
 800b028:	68f8      	ldr	r0, [r7, #12]
 800b02a:	f003 fa7a 	bl	800e522 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800b02e:	2300      	movs	r3, #0
}
 800b030:	4618      	mov	r0, r3
 800b032:	3710      	adds	r7, #16
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}

0800b038 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b088      	sub	sp, #32
 800b03c:	af04      	add	r7, sp, #16
 800b03e:	60f8      	str	r0, [r7, #12]
 800b040:	60b9      	str	r1, [r7, #8]
 800b042:	4611      	mov	r1, r2
 800b044:	461a      	mov	r2, r3
 800b046:	460b      	mov	r3, r1
 800b048:	80fb      	strh	r3, [r7, #6]
 800b04a:	4613      	mov	r3, r2
 800b04c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b054:	2b00      	cmp	r3, #0
 800b056:	d001      	beq.n	800b05c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b058:	2300      	movs	r3, #0
 800b05a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b05c:	7979      	ldrb	r1, [r7, #5]
 800b05e:	7e3b      	ldrb	r3, [r7, #24]
 800b060:	9303      	str	r3, [sp, #12]
 800b062:	88fb      	ldrh	r3, [r7, #6]
 800b064:	9302      	str	r3, [sp, #8]
 800b066:	68bb      	ldr	r3, [r7, #8]
 800b068:	9301      	str	r3, [sp, #4]
 800b06a:	2301      	movs	r3, #1
 800b06c:	9300      	str	r3, [sp, #0]
 800b06e:	2300      	movs	r3, #0
 800b070:	2200      	movs	r2, #0
 800b072:	68f8      	ldr	r0, [r7, #12]
 800b074:	f003 fa55 	bl	800e522 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b078:	2300      	movs	r3, #0
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3710      	adds	r7, #16
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}

0800b082 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b082:	b580      	push	{r7, lr}
 800b084:	b088      	sub	sp, #32
 800b086:	af04      	add	r7, sp, #16
 800b088:	60f8      	str	r0, [r7, #12]
 800b08a:	60b9      	str	r1, [r7, #8]
 800b08c:	4611      	mov	r1, r2
 800b08e:	461a      	mov	r2, r3
 800b090:	460b      	mov	r3, r1
 800b092:	80fb      	strh	r3, [r7, #6]
 800b094:	4613      	mov	r3, r2
 800b096:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b098:	7979      	ldrb	r1, [r7, #5]
 800b09a:	2300      	movs	r3, #0
 800b09c:	9303      	str	r3, [sp, #12]
 800b09e:	88fb      	ldrh	r3, [r7, #6]
 800b0a0:	9302      	str	r3, [sp, #8]
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	9301      	str	r3, [sp, #4]
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	9300      	str	r3, [sp, #0]
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	2201      	movs	r2, #1
 800b0ae:	68f8      	ldr	r0, [r7, #12]
 800b0b0:	f003 fa37 	bl	800e522 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b0b4:	2300      	movs	r3, #0

}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3710      	adds	r7, #16
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}

0800b0be <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b0be:	b580      	push	{r7, lr}
 800b0c0:	b088      	sub	sp, #32
 800b0c2:	af04      	add	r7, sp, #16
 800b0c4:	60f8      	str	r0, [r7, #12]
 800b0c6:	60b9      	str	r1, [r7, #8]
 800b0c8:	4611      	mov	r1, r2
 800b0ca:	461a      	mov	r2, r3
 800b0cc:	460b      	mov	r3, r1
 800b0ce:	80fb      	strh	r3, [r7, #6]
 800b0d0:	4613      	mov	r3, r2
 800b0d2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d001      	beq.n	800b0e2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b0e2:	7979      	ldrb	r1, [r7, #5]
 800b0e4:	7e3b      	ldrb	r3, [r7, #24]
 800b0e6:	9303      	str	r3, [sp, #12]
 800b0e8:	88fb      	ldrh	r3, [r7, #6]
 800b0ea:	9302      	str	r3, [sp, #8]
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	9301      	str	r3, [sp, #4]
 800b0f0:	2301      	movs	r3, #1
 800b0f2:	9300      	str	r3, [sp, #0]
 800b0f4:	2302      	movs	r3, #2
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	68f8      	ldr	r0, [r7, #12]
 800b0fa:	f003 fa12 	bl	800e522 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b0fe:	2300      	movs	r3, #0
}
 800b100:	4618      	mov	r0, r3
 800b102:	3710      	adds	r7, #16
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}

0800b108 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b088      	sub	sp, #32
 800b10c:	af04      	add	r7, sp, #16
 800b10e:	60f8      	str	r0, [r7, #12]
 800b110:	60b9      	str	r1, [r7, #8]
 800b112:	4611      	mov	r1, r2
 800b114:	461a      	mov	r2, r3
 800b116:	460b      	mov	r3, r1
 800b118:	80fb      	strh	r3, [r7, #6]
 800b11a:	4613      	mov	r3, r2
 800b11c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b11e:	7979      	ldrb	r1, [r7, #5]
 800b120:	2300      	movs	r3, #0
 800b122:	9303      	str	r3, [sp, #12]
 800b124:	88fb      	ldrh	r3, [r7, #6]
 800b126:	9302      	str	r3, [sp, #8]
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	9301      	str	r3, [sp, #4]
 800b12c:	2301      	movs	r3, #1
 800b12e:	9300      	str	r3, [sp, #0]
 800b130:	2302      	movs	r3, #2
 800b132:	2201      	movs	r2, #1
 800b134:	68f8      	ldr	r0, [r7, #12]
 800b136:	f003 f9f4 	bl	800e522 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b13a:	2300      	movs	r3, #0
}
 800b13c:	4618      	mov	r0, r3
 800b13e:	3710      	adds	r7, #16
 800b140:	46bd      	mov	sp, r7
 800b142:	bd80      	pop	{r7, pc}

0800b144 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b086      	sub	sp, #24
 800b148:	af04      	add	r7, sp, #16
 800b14a:	6078      	str	r0, [r7, #4]
 800b14c:	4608      	mov	r0, r1
 800b14e:	4611      	mov	r1, r2
 800b150:	461a      	mov	r2, r3
 800b152:	4603      	mov	r3, r0
 800b154:	70fb      	strb	r3, [r7, #3]
 800b156:	460b      	mov	r3, r1
 800b158:	70bb      	strb	r3, [r7, #2]
 800b15a:	4613      	mov	r3, r2
 800b15c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b15e:	7878      	ldrb	r0, [r7, #1]
 800b160:	78ba      	ldrb	r2, [r7, #2]
 800b162:	78f9      	ldrb	r1, [r7, #3]
 800b164:	8b3b      	ldrh	r3, [r7, #24]
 800b166:	9302      	str	r3, [sp, #8]
 800b168:	7d3b      	ldrb	r3, [r7, #20]
 800b16a:	9301      	str	r3, [sp, #4]
 800b16c:	7c3b      	ldrb	r3, [r7, #16]
 800b16e:	9300      	str	r3, [sp, #0]
 800b170:	4603      	mov	r3, r0
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f003 f987 	bl	800e486 <USBH_LL_OpenPipe>

  return USBH_OK;
 800b178:	2300      	movs	r3, #0
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	3708      	adds	r7, #8
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd80      	pop	{r7, pc}

0800b182 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b182:	b580      	push	{r7, lr}
 800b184:	b082      	sub	sp, #8
 800b186:	af00      	add	r7, sp, #0
 800b188:	6078      	str	r0, [r7, #4]
 800b18a:	460b      	mov	r3, r1
 800b18c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800b18e:	78fb      	ldrb	r3, [r7, #3]
 800b190:	4619      	mov	r1, r3
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f003 f9a6 	bl	800e4e4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b198:	2300      	movs	r3, #0
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	3708      	adds	r7, #8
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}

0800b1a2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b1a2:	b580      	push	{r7, lr}
 800b1a4:	b084      	sub	sp, #16
 800b1a6:	af00      	add	r7, sp, #0
 800b1a8:	6078      	str	r0, [r7, #4]
 800b1aa:	460b      	mov	r3, r1
 800b1ac:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f000 f836 	bl	800b220 <USBH_GetFreePipe>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b1b8:	89fb      	ldrh	r3, [r7, #14]
 800b1ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b1be:	4293      	cmp	r3, r2
 800b1c0:	d00a      	beq.n	800b1d8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800b1c2:	78fa      	ldrb	r2, [r7, #3]
 800b1c4:	89fb      	ldrh	r3, [r7, #14]
 800b1c6:	f003 030f 	and.w	r3, r3, #15
 800b1ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b1ce:	6879      	ldr	r1, [r7, #4]
 800b1d0:	33e0      	adds	r3, #224	; 0xe0
 800b1d2:	009b      	lsls	r3, r3, #2
 800b1d4:	440b      	add	r3, r1
 800b1d6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b1d8:	89fb      	ldrh	r3, [r7, #14]
 800b1da:	b2db      	uxtb	r3, r3
}
 800b1dc:	4618      	mov	r0, r3
 800b1de:	3710      	adds	r7, #16
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}

0800b1e4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b083      	sub	sp, #12
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
 800b1ec:	460b      	mov	r3, r1
 800b1ee:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800b1f0:	78fb      	ldrb	r3, [r7, #3]
 800b1f2:	2b0a      	cmp	r3, #10
 800b1f4:	d80d      	bhi.n	800b212 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b1f6:	78fb      	ldrb	r3, [r7, #3]
 800b1f8:	687a      	ldr	r2, [r7, #4]
 800b1fa:	33e0      	adds	r3, #224	; 0xe0
 800b1fc:	009b      	lsls	r3, r3, #2
 800b1fe:	4413      	add	r3, r2
 800b200:	685a      	ldr	r2, [r3, #4]
 800b202:	78fb      	ldrb	r3, [r7, #3]
 800b204:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b208:	6879      	ldr	r1, [r7, #4]
 800b20a:	33e0      	adds	r3, #224	; 0xe0
 800b20c:	009b      	lsls	r3, r3, #2
 800b20e:	440b      	add	r3, r1
 800b210:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b212:	2300      	movs	r3, #0
}
 800b214:	4618      	mov	r0, r3
 800b216:	370c      	adds	r7, #12
 800b218:	46bd      	mov	sp, r7
 800b21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21e:	4770      	bx	lr

0800b220 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b220:	b480      	push	{r7}
 800b222:	b085      	sub	sp, #20
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b228:	2300      	movs	r3, #0
 800b22a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800b22c:	2300      	movs	r3, #0
 800b22e:	73fb      	strb	r3, [r7, #15]
 800b230:	e00f      	b.n	800b252 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b232:	7bfb      	ldrb	r3, [r7, #15]
 800b234:	687a      	ldr	r2, [r7, #4]
 800b236:	33e0      	adds	r3, #224	; 0xe0
 800b238:	009b      	lsls	r3, r3, #2
 800b23a:	4413      	add	r3, r2
 800b23c:	685b      	ldr	r3, [r3, #4]
 800b23e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b242:	2b00      	cmp	r3, #0
 800b244:	d102      	bne.n	800b24c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b246:	7bfb      	ldrb	r3, [r7, #15]
 800b248:	b29b      	uxth	r3, r3
 800b24a:	e007      	b.n	800b25c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800b24c:	7bfb      	ldrb	r3, [r7, #15]
 800b24e:	3301      	adds	r3, #1
 800b250:	73fb      	strb	r3, [r7, #15]
 800b252:	7bfb      	ldrb	r3, [r7, #15]
 800b254:	2b0a      	cmp	r3, #10
 800b256:	d9ec      	bls.n	800b232 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b258:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800b25c:	4618      	mov	r0, r3
 800b25e:	3714      	adds	r7, #20
 800b260:	46bd      	mov	sp, r7
 800b262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b266:	4770      	bx	lr

0800b268 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b268:	b480      	push	{r7}
 800b26a:	b085      	sub	sp, #20
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	4603      	mov	r3, r0
 800b270:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b272:	2300      	movs	r3, #0
 800b274:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b276:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b27a:	2b84      	cmp	r3, #132	; 0x84
 800b27c:	d005      	beq.n	800b28a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b27e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	4413      	add	r3, r2
 800b286:	3303      	adds	r3, #3
 800b288:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b28a:	68fb      	ldr	r3, [r7, #12]
}
 800b28c:	4618      	mov	r0, r3
 800b28e:	3714      	adds	r7, #20
 800b290:	46bd      	mov	sp, r7
 800b292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b296:	4770      	bx	lr

0800b298 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800b298:	b480      	push	{r7}
 800b29a:	b083      	sub	sp, #12
 800b29c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b29e:	f3ef 8305 	mrs	r3, IPSR
 800b2a2:	607b      	str	r3, [r7, #4]
  return(result);
 800b2a4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	bf14      	ite	ne
 800b2aa:	2301      	movne	r3, #1
 800b2ac:	2300      	moveq	r3, #0
 800b2ae:	b2db      	uxtb	r3, r3
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	370c      	adds	r7, #12
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ba:	4770      	bx	lr

0800b2bc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b2c0:	f001 f9a8 	bl	800c614 <vTaskStartScheduler>
  
  return osOK;
 800b2c4:	2300      	movs	r3, #0
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	bd80      	pop	{r7, pc}

0800b2ca <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b2ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2cc:	b089      	sub	sp, #36	; 0x24
 800b2ce:	af04      	add	r7, sp, #16
 800b2d0:	6078      	str	r0, [r7, #4]
 800b2d2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	695b      	ldr	r3, [r3, #20]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d020      	beq.n	800b31e <osThreadCreate+0x54>
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	699b      	ldr	r3, [r3, #24]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d01c      	beq.n	800b31e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	685c      	ldr	r4, [r3, #4]
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681d      	ldr	r5, [r3, #0]
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	691e      	ldr	r6, [r3, #16]
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	f7ff ffb6 	bl	800b268 <makeFreeRtosPriority>
 800b2fc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	695b      	ldr	r3, [r3, #20]
 800b302:	687a      	ldr	r2, [r7, #4]
 800b304:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b306:	9202      	str	r2, [sp, #8]
 800b308:	9301      	str	r3, [sp, #4]
 800b30a:	9100      	str	r1, [sp, #0]
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	4632      	mov	r2, r6
 800b310:	4629      	mov	r1, r5
 800b312:	4620      	mov	r0, r4
 800b314:	f000 ffa0 	bl	800c258 <xTaskCreateStatic>
 800b318:	4603      	mov	r3, r0
 800b31a:	60fb      	str	r3, [r7, #12]
 800b31c:	e01c      	b.n	800b358 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	685c      	ldr	r4, [r3, #4]
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b32a:	b29e      	uxth	r6, r3
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b332:	4618      	mov	r0, r3
 800b334:	f7ff ff98 	bl	800b268 <makeFreeRtosPriority>
 800b338:	4602      	mov	r2, r0
 800b33a:	f107 030c 	add.w	r3, r7, #12
 800b33e:	9301      	str	r3, [sp, #4]
 800b340:	9200      	str	r2, [sp, #0]
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	4632      	mov	r2, r6
 800b346:	4629      	mov	r1, r5
 800b348:	4620      	mov	r0, r4
 800b34a:	f000 ffe2 	bl	800c312 <xTaskCreate>
 800b34e:	4603      	mov	r3, r0
 800b350:	2b01      	cmp	r3, #1
 800b352:	d001      	beq.n	800b358 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b354:	2300      	movs	r3, #0
 800b356:	e000      	b.n	800b35a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b358:	68fb      	ldr	r3, [r7, #12]
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	3714      	adds	r7, #20
 800b35e:	46bd      	mov	sp, r7
 800b360:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b362 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b362:	b580      	push	{r7, lr}
 800b364:	b084      	sub	sp, #16
 800b366:	af00      	add	r7, sp, #0
 800b368:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d001      	beq.n	800b378 <osDelay+0x16>
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	e000      	b.n	800b37a <osDelay+0x18>
 800b378:	2301      	movs	r3, #1
 800b37a:	4618      	mov	r0, r3
 800b37c:	f001 f916 	bl	800c5ac <vTaskDelay>
  
  return osOK;
 800b380:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b382:	4618      	mov	r0, r3
 800b384:	3710      	adds	r7, #16
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}
	...

0800b38c <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b086      	sub	sp, #24
 800b390:	af02      	add	r7, sp, #8
 800b392:	60f8      	str	r0, [r7, #12]
 800b394:	460b      	mov	r3, r1
 800b396:	607a      	str	r2, [r7, #4]
 800b398:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	685b      	ldr	r3, [r3, #4]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d013      	beq.n	800b3ca <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 800b3a2:	7afb      	ldrb	r3, [r7, #11]
 800b3a4:	2b01      	cmp	r3, #1
 800b3a6:	d101      	bne.n	800b3ac <osTimerCreate+0x20>
 800b3a8:	2101      	movs	r1, #1
 800b3aa:	e000      	b.n	800b3ae <osTimerCreate+0x22>
 800b3ac:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 800b3b2:	68fa      	ldr	r2, [r7, #12]
 800b3b4:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 800b3b6:	9201      	str	r2, [sp, #4]
 800b3b8:	9300      	str	r3, [sp, #0]
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	460a      	mov	r2, r1
 800b3be:	2101      	movs	r1, #1
 800b3c0:	480b      	ldr	r0, [pc, #44]	; (800b3f0 <osTimerCreate+0x64>)
 800b3c2:	f001 feee 	bl	800d1a2 <xTimerCreateStatic>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	e00e      	b.n	800b3e8 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 800b3ca:	7afb      	ldrb	r3, [r7, #11]
 800b3cc:	2b01      	cmp	r3, #1
 800b3ce:	d101      	bne.n	800b3d4 <osTimerCreate+0x48>
 800b3d0:	2201      	movs	r2, #1
 800b3d2:	e000      	b.n	800b3d6 <osTimerCreate+0x4a>
 800b3d4:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 800b3da:	9300      	str	r3, [sp, #0]
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2101      	movs	r1, #1
 800b3e0:	4803      	ldr	r0, [pc, #12]	; (800b3f0 <osTimerCreate+0x64>)
 800b3e2:	f001 febd 	bl	800d160 <xTimerCreate>
 800b3e6:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3710      	adds	r7, #16
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}
 800b3f0:	0800f1d8 	.word	0x0800f1d8

0800b3f4 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800b3f4:	b590      	push	{r4, r7, lr}
 800b3f6:	b085      	sub	sp, #20
 800b3f8:	af02      	add	r7, sp, #8
 800b3fa:	6078      	str	r0, [r7, #4]
 800b3fc:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	689b      	ldr	r3, [r3, #8]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d011      	beq.n	800b42a <osMessageCreate+0x36>
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	68db      	ldr	r3, [r3, #12]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d00d      	beq.n	800b42a <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	6818      	ldr	r0, [r3, #0]
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6859      	ldr	r1, [r3, #4]
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	689a      	ldr	r2, [r3, #8]
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	68db      	ldr	r3, [r3, #12]
 800b41e:	2400      	movs	r4, #0
 800b420:	9400      	str	r4, [sp, #0]
 800b422:	f000 f9df 	bl	800b7e4 <xQueueGenericCreateStatic>
 800b426:	4603      	mov	r3, r0
 800b428:	e008      	b.n	800b43c <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6818      	ldr	r0, [r3, #0]
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	685b      	ldr	r3, [r3, #4]
 800b432:	2200      	movs	r2, #0
 800b434:	4619      	mov	r1, r3
 800b436:	f000 fa4d 	bl	800b8d4 <xQueueGenericCreate>
 800b43a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800b43c:	4618      	mov	r0, r3
 800b43e:	370c      	adds	r7, #12
 800b440:	46bd      	mov	sp, r7
 800b442:	bd90      	pop	{r4, r7, pc}

0800b444 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b086      	sub	sp, #24
 800b448:	af00      	add	r7, sp, #0
 800b44a:	60f8      	str	r0, [r7, #12]
 800b44c:	60b9      	str	r1, [r7, #8]
 800b44e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800b450:	2300      	movs	r3, #0
 800b452:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800b458:	697b      	ldr	r3, [r7, #20]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d101      	bne.n	800b462 <osMessagePut+0x1e>
    ticks = 1;
 800b45e:	2301      	movs	r3, #1
 800b460:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800b462:	f7ff ff19 	bl	800b298 <inHandlerMode>
 800b466:	4603      	mov	r3, r0
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d018      	beq.n	800b49e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800b46c:	f107 0210 	add.w	r2, r7, #16
 800b470:	f107 0108 	add.w	r1, r7, #8
 800b474:	2300      	movs	r3, #0
 800b476:	68f8      	ldr	r0, [r7, #12]
 800b478:	f000 fb84 	bl	800bb84 <xQueueGenericSendFromISR>
 800b47c:	4603      	mov	r3, r0
 800b47e:	2b01      	cmp	r3, #1
 800b480:	d001      	beq.n	800b486 <osMessagePut+0x42>
      return osErrorOS;
 800b482:	23ff      	movs	r3, #255	; 0xff
 800b484:	e018      	b.n	800b4b8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b486:	693b      	ldr	r3, [r7, #16]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d014      	beq.n	800b4b6 <osMessagePut+0x72>
 800b48c:	4b0c      	ldr	r3, [pc, #48]	; (800b4c0 <osMessagePut+0x7c>)
 800b48e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b492:	601a      	str	r2, [r3, #0]
 800b494:	f3bf 8f4f 	dsb	sy
 800b498:	f3bf 8f6f 	isb	sy
 800b49c:	e00b      	b.n	800b4b6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800b49e:	f107 0108 	add.w	r1, r7, #8
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	697a      	ldr	r2, [r7, #20]
 800b4a6:	68f8      	ldr	r0, [r7, #12]
 800b4a8:	f000 fa6e 	bl	800b988 <xQueueGenericSend>
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	2b01      	cmp	r3, #1
 800b4b0:	d001      	beq.n	800b4b6 <osMessagePut+0x72>
      return osErrorOS;
 800b4b2:	23ff      	movs	r3, #255	; 0xff
 800b4b4:	e000      	b.n	800b4b8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800b4b6:	2300      	movs	r3, #0
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	3718      	adds	r7, #24
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}
 800b4c0:	e000ed04 	.word	0xe000ed04

0800b4c4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800b4c4:	b590      	push	{r4, r7, lr}
 800b4c6:	b08b      	sub	sp, #44	; 0x2c
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	60f8      	str	r0, [r7, #12]
 800b4cc:	60b9      	str	r1, [r7, #8]
 800b4ce:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800b4d0:	68bb      	ldr	r3, [r7, #8]
 800b4d2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d10a      	bne.n	800b4f4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800b4de:	2380      	movs	r3, #128	; 0x80
 800b4e0:	617b      	str	r3, [r7, #20]
    return event;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	461c      	mov	r4, r3
 800b4e6:	f107 0314 	add.w	r3, r7, #20
 800b4ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b4ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b4f2:	e054      	b.n	800b59e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b502:	d103      	bne.n	800b50c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800b504:	f04f 33ff 	mov.w	r3, #4294967295
 800b508:	627b      	str	r3, [r7, #36]	; 0x24
 800b50a:	e009      	b.n	800b520 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d006      	beq.n	800b520 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800b516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d101      	bne.n	800b520 <osMessageGet+0x5c>
      ticks = 1;
 800b51c:	2301      	movs	r3, #1
 800b51e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800b520:	f7ff feba 	bl	800b298 <inHandlerMode>
 800b524:	4603      	mov	r3, r0
 800b526:	2b00      	cmp	r3, #0
 800b528:	d01c      	beq.n	800b564 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800b52a:	f107 0220 	add.w	r2, r7, #32
 800b52e:	f107 0314 	add.w	r3, r7, #20
 800b532:	3304      	adds	r3, #4
 800b534:	4619      	mov	r1, r3
 800b536:	68b8      	ldr	r0, [r7, #8]
 800b538:	f000 fca0 	bl	800be7c <xQueueReceiveFromISR>
 800b53c:	4603      	mov	r3, r0
 800b53e:	2b01      	cmp	r3, #1
 800b540:	d102      	bne.n	800b548 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800b542:	2310      	movs	r3, #16
 800b544:	617b      	str	r3, [r7, #20]
 800b546:	e001      	b.n	800b54c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800b548:	2300      	movs	r3, #0
 800b54a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b54c:	6a3b      	ldr	r3, [r7, #32]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d01d      	beq.n	800b58e <osMessageGet+0xca>
 800b552:	4b15      	ldr	r3, [pc, #84]	; (800b5a8 <osMessageGet+0xe4>)
 800b554:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b558:	601a      	str	r2, [r3, #0]
 800b55a:	f3bf 8f4f 	dsb	sy
 800b55e:	f3bf 8f6f 	isb	sy
 800b562:	e014      	b.n	800b58e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800b564:	f107 0314 	add.w	r3, r7, #20
 800b568:	3304      	adds	r3, #4
 800b56a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b56c:	4619      	mov	r1, r3
 800b56e:	68b8      	ldr	r0, [r7, #8]
 800b570:	f000 fba4 	bl	800bcbc <xQueueReceive>
 800b574:	4603      	mov	r3, r0
 800b576:	2b01      	cmp	r3, #1
 800b578:	d102      	bne.n	800b580 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800b57a:	2310      	movs	r3, #16
 800b57c:	617b      	str	r3, [r7, #20]
 800b57e:	e006      	b.n	800b58e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800b580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b582:	2b00      	cmp	r3, #0
 800b584:	d101      	bne.n	800b58a <osMessageGet+0xc6>
 800b586:	2300      	movs	r3, #0
 800b588:	e000      	b.n	800b58c <osMessageGet+0xc8>
 800b58a:	2340      	movs	r3, #64	; 0x40
 800b58c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	461c      	mov	r4, r3
 800b592:	f107 0314 	add.w	r3, r7, #20
 800b596:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b59a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800b59e:	68f8      	ldr	r0, [r7, #12]
 800b5a0:	372c      	adds	r7, #44	; 0x2c
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bd90      	pop	{r4, r7, pc}
 800b5a6:	bf00      	nop
 800b5a8:	e000ed04 	.word	0xe000ed04

0800b5ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b5ac:	b480      	push	{r7}
 800b5ae:	b083      	sub	sp, #12
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f103 0208 	add.w	r2, r3, #8
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f04f 32ff 	mov.w	r2, #4294967295
 800b5c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	f103 0208 	add.w	r2, r3, #8
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f103 0208 	add.w	r2, r3, #8
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2200      	movs	r2, #0
 800b5de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b5e0:	bf00      	nop
 800b5e2:	370c      	adds	r7, #12
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ea:	4770      	bx	lr

0800b5ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b083      	sub	sp, #12
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b5fa:	bf00      	nop
 800b5fc:	370c      	adds	r7, #12
 800b5fe:	46bd      	mov	sp, r7
 800b600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b604:	4770      	bx	lr

0800b606 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b606:	b480      	push	{r7}
 800b608:	b085      	sub	sp, #20
 800b60a:	af00      	add	r7, sp, #0
 800b60c:	6078      	str	r0, [r7, #4]
 800b60e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	685b      	ldr	r3, [r3, #4]
 800b614:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b616:	683b      	ldr	r3, [r7, #0]
 800b618:	68fa      	ldr	r2, [r7, #12]
 800b61a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	689a      	ldr	r2, [r3, #8]
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	689b      	ldr	r3, [r3, #8]
 800b628:	683a      	ldr	r2, [r7, #0]
 800b62a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	683a      	ldr	r2, [r7, #0]
 800b630:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	687a      	ldr	r2, [r7, #4]
 800b636:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	1c5a      	adds	r2, r3, #1
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	601a      	str	r2, [r3, #0]
}
 800b642:	bf00      	nop
 800b644:	3714      	adds	r7, #20
 800b646:	46bd      	mov	sp, r7
 800b648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64c:	4770      	bx	lr

0800b64e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b64e:	b480      	push	{r7}
 800b650:	b085      	sub	sp, #20
 800b652:	af00      	add	r7, sp, #0
 800b654:	6078      	str	r0, [r7, #4]
 800b656:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b664:	d103      	bne.n	800b66e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	691b      	ldr	r3, [r3, #16]
 800b66a:	60fb      	str	r3, [r7, #12]
 800b66c:	e00c      	b.n	800b688 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	3308      	adds	r3, #8
 800b672:	60fb      	str	r3, [r7, #12]
 800b674:	e002      	b.n	800b67c <vListInsert+0x2e>
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	685b      	ldr	r3, [r3, #4]
 800b67a:	60fb      	str	r3, [r7, #12]
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	685b      	ldr	r3, [r3, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	68ba      	ldr	r2, [r7, #8]
 800b684:	429a      	cmp	r2, r3
 800b686:	d2f6      	bcs.n	800b676 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	685a      	ldr	r2, [r3, #4]
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	685b      	ldr	r3, [r3, #4]
 800b694:	683a      	ldr	r2, [r7, #0]
 800b696:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	68fa      	ldr	r2, [r7, #12]
 800b69c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	683a      	ldr	r2, [r7, #0]
 800b6a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	687a      	ldr	r2, [r7, #4]
 800b6a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	1c5a      	adds	r2, r3, #1
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	601a      	str	r2, [r3, #0]
}
 800b6b4:	bf00      	nop
 800b6b6:	3714      	adds	r7, #20
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6be:	4770      	bx	lr

0800b6c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b6c0:	b480      	push	{r7}
 800b6c2:	b085      	sub	sp, #20
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	691b      	ldr	r3, [r3, #16]
 800b6cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	685b      	ldr	r3, [r3, #4]
 800b6d2:	687a      	ldr	r2, [r7, #4]
 800b6d4:	6892      	ldr	r2, [r2, #8]
 800b6d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	689b      	ldr	r3, [r3, #8]
 800b6dc:	687a      	ldr	r2, [r7, #4]
 800b6de:	6852      	ldr	r2, [r2, #4]
 800b6e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	685b      	ldr	r3, [r3, #4]
 800b6e6:	687a      	ldr	r2, [r7, #4]
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	d103      	bne.n	800b6f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	689a      	ldr	r2, [r3, #8]
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	1e5a      	subs	r2, r3, #1
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	681b      	ldr	r3, [r3, #0]
}
 800b708:	4618      	mov	r0, r3
 800b70a:	3714      	adds	r7, #20
 800b70c:	46bd      	mov	sp, r7
 800b70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b712:	4770      	bx	lr

0800b714 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b084      	sub	sp, #16
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
 800b71c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d10a      	bne.n	800b73e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b72c:	f383 8811 	msr	BASEPRI, r3
 800b730:	f3bf 8f6f 	isb	sy
 800b734:	f3bf 8f4f 	dsb	sy
 800b738:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b73a:	bf00      	nop
 800b73c:	e7fe      	b.n	800b73c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b73e:	f002 f9c1 	bl	800dac4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	681a      	ldr	r2, [r3, #0]
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b74a:	68f9      	ldr	r1, [r7, #12]
 800b74c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b74e:	fb01 f303 	mul.w	r3, r1, r3
 800b752:	441a      	add	r2, r3
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	2200      	movs	r2, #0
 800b75c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	681a      	ldr	r2, [r3, #0]
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681a      	ldr	r2, [r3, #0]
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b76e:	3b01      	subs	r3, #1
 800b770:	68f9      	ldr	r1, [r7, #12]
 800b772:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b774:	fb01 f303 	mul.w	r3, r1, r3
 800b778:	441a      	add	r2, r3
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	22ff      	movs	r2, #255	; 0xff
 800b782:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	22ff      	movs	r2, #255	; 0xff
 800b78a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d114      	bne.n	800b7be <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	691b      	ldr	r3, [r3, #16]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d01a      	beq.n	800b7d2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	3310      	adds	r3, #16
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	f001 f9cb 	bl	800cb3c <xTaskRemoveFromEventList>
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d012      	beq.n	800b7d2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b7ac:	4b0c      	ldr	r3, [pc, #48]	; (800b7e0 <xQueueGenericReset+0xcc>)
 800b7ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7b2:	601a      	str	r2, [r3, #0]
 800b7b4:	f3bf 8f4f 	dsb	sy
 800b7b8:	f3bf 8f6f 	isb	sy
 800b7bc:	e009      	b.n	800b7d2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	3310      	adds	r3, #16
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f7ff fef2 	bl	800b5ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	3324      	adds	r3, #36	; 0x24
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f7ff feed 	bl	800b5ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b7d2:	f002 f9a7 	bl	800db24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b7d6:	2301      	movs	r3, #1
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	3710      	adds	r7, #16
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}
 800b7e0:	e000ed04 	.word	0xe000ed04

0800b7e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b08e      	sub	sp, #56	; 0x38
 800b7e8:	af02      	add	r7, sp, #8
 800b7ea:	60f8      	str	r0, [r7, #12]
 800b7ec:	60b9      	str	r1, [r7, #8]
 800b7ee:	607a      	str	r2, [r7, #4]
 800b7f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d10a      	bne.n	800b80e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b7f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7fc:	f383 8811 	msr	BASEPRI, r3
 800b800:	f3bf 8f6f 	isb	sy
 800b804:	f3bf 8f4f 	dsb	sy
 800b808:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b80a:	bf00      	nop
 800b80c:	e7fe      	b.n	800b80c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d10a      	bne.n	800b82a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b814:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b818:	f383 8811 	msr	BASEPRI, r3
 800b81c:	f3bf 8f6f 	isb	sy
 800b820:	f3bf 8f4f 	dsb	sy
 800b824:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b826:	bf00      	nop
 800b828:	e7fe      	b.n	800b828 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d002      	beq.n	800b836 <xQueueGenericCreateStatic+0x52>
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d001      	beq.n	800b83a <xQueueGenericCreateStatic+0x56>
 800b836:	2301      	movs	r3, #1
 800b838:	e000      	b.n	800b83c <xQueueGenericCreateStatic+0x58>
 800b83a:	2300      	movs	r3, #0
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d10a      	bne.n	800b856 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b840:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b844:	f383 8811 	msr	BASEPRI, r3
 800b848:	f3bf 8f6f 	isb	sy
 800b84c:	f3bf 8f4f 	dsb	sy
 800b850:	623b      	str	r3, [r7, #32]
}
 800b852:	bf00      	nop
 800b854:	e7fe      	b.n	800b854 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d102      	bne.n	800b862 <xQueueGenericCreateStatic+0x7e>
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d101      	bne.n	800b866 <xQueueGenericCreateStatic+0x82>
 800b862:	2301      	movs	r3, #1
 800b864:	e000      	b.n	800b868 <xQueueGenericCreateStatic+0x84>
 800b866:	2300      	movs	r3, #0
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d10a      	bne.n	800b882 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b86c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b870:	f383 8811 	msr	BASEPRI, r3
 800b874:	f3bf 8f6f 	isb	sy
 800b878:	f3bf 8f4f 	dsb	sy
 800b87c:	61fb      	str	r3, [r7, #28]
}
 800b87e:	bf00      	nop
 800b880:	e7fe      	b.n	800b880 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b882:	2348      	movs	r3, #72	; 0x48
 800b884:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	2b48      	cmp	r3, #72	; 0x48
 800b88a:	d00a      	beq.n	800b8a2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b890:	f383 8811 	msr	BASEPRI, r3
 800b894:	f3bf 8f6f 	isb	sy
 800b898:	f3bf 8f4f 	dsb	sy
 800b89c:	61bb      	str	r3, [r7, #24]
}
 800b89e:	bf00      	nop
 800b8a0:	e7fe      	b.n	800b8a0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b8a2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d00d      	beq.n	800b8ca <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b8ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8b0:	2201      	movs	r2, #1
 800b8b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b8b6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b8ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8bc:	9300      	str	r3, [sp, #0]
 800b8be:	4613      	mov	r3, r2
 800b8c0:	687a      	ldr	r2, [r7, #4]
 800b8c2:	68b9      	ldr	r1, [r7, #8]
 800b8c4:	68f8      	ldr	r0, [r7, #12]
 800b8c6:	f000 f83f 	bl	800b948 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b8ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	3730      	adds	r7, #48	; 0x30
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}

0800b8d4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b08a      	sub	sp, #40	; 0x28
 800b8d8:	af02      	add	r7, sp, #8
 800b8da:	60f8      	str	r0, [r7, #12]
 800b8dc:	60b9      	str	r1, [r7, #8]
 800b8de:	4613      	mov	r3, r2
 800b8e0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d10a      	bne.n	800b8fe <xQueueGenericCreate+0x2a>
	__asm volatile
 800b8e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ec:	f383 8811 	msr	BASEPRI, r3
 800b8f0:	f3bf 8f6f 	isb	sy
 800b8f4:	f3bf 8f4f 	dsb	sy
 800b8f8:	613b      	str	r3, [r7, #16]
}
 800b8fa:	bf00      	nop
 800b8fc:	e7fe      	b.n	800b8fc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	68ba      	ldr	r2, [r7, #8]
 800b902:	fb02 f303 	mul.w	r3, r2, r3
 800b906:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b908:	69fb      	ldr	r3, [r7, #28]
 800b90a:	3348      	adds	r3, #72	; 0x48
 800b90c:	4618      	mov	r0, r3
 800b90e:	f002 f9fb 	bl	800dd08 <pvPortMalloc>
 800b912:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b914:	69bb      	ldr	r3, [r7, #24]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d011      	beq.n	800b93e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b91a:	69bb      	ldr	r3, [r7, #24]
 800b91c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b91e:	697b      	ldr	r3, [r7, #20]
 800b920:	3348      	adds	r3, #72	; 0x48
 800b922:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b924:	69bb      	ldr	r3, [r7, #24]
 800b926:	2200      	movs	r2, #0
 800b928:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b92c:	79fa      	ldrb	r2, [r7, #7]
 800b92e:	69bb      	ldr	r3, [r7, #24]
 800b930:	9300      	str	r3, [sp, #0]
 800b932:	4613      	mov	r3, r2
 800b934:	697a      	ldr	r2, [r7, #20]
 800b936:	68b9      	ldr	r1, [r7, #8]
 800b938:	68f8      	ldr	r0, [r7, #12]
 800b93a:	f000 f805 	bl	800b948 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b93e:	69bb      	ldr	r3, [r7, #24]
	}
 800b940:	4618      	mov	r0, r3
 800b942:	3720      	adds	r7, #32
 800b944:	46bd      	mov	sp, r7
 800b946:	bd80      	pop	{r7, pc}

0800b948 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b084      	sub	sp, #16
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	60f8      	str	r0, [r7, #12]
 800b950:	60b9      	str	r1, [r7, #8]
 800b952:	607a      	str	r2, [r7, #4]
 800b954:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b956:	68bb      	ldr	r3, [r7, #8]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d103      	bne.n	800b964 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b95c:	69bb      	ldr	r3, [r7, #24]
 800b95e:	69ba      	ldr	r2, [r7, #24]
 800b960:	601a      	str	r2, [r3, #0]
 800b962:	e002      	b.n	800b96a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b964:	69bb      	ldr	r3, [r7, #24]
 800b966:	687a      	ldr	r2, [r7, #4]
 800b968:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b96a:	69bb      	ldr	r3, [r7, #24]
 800b96c:	68fa      	ldr	r2, [r7, #12]
 800b96e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b970:	69bb      	ldr	r3, [r7, #24]
 800b972:	68ba      	ldr	r2, [r7, #8]
 800b974:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b976:	2101      	movs	r1, #1
 800b978:	69b8      	ldr	r0, [r7, #24]
 800b97a:	f7ff fecb 	bl	800b714 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b97e:	bf00      	nop
 800b980:	3710      	adds	r7, #16
 800b982:	46bd      	mov	sp, r7
 800b984:	bd80      	pop	{r7, pc}
	...

0800b988 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b08e      	sub	sp, #56	; 0x38
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	60f8      	str	r0, [r7, #12]
 800b990:	60b9      	str	r1, [r7, #8]
 800b992:	607a      	str	r2, [r7, #4]
 800b994:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b996:	2300      	movs	r3, #0
 800b998:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d10a      	bne.n	800b9ba <xQueueGenericSend+0x32>
	__asm volatile
 800b9a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9a8:	f383 8811 	msr	BASEPRI, r3
 800b9ac:	f3bf 8f6f 	isb	sy
 800b9b0:	f3bf 8f4f 	dsb	sy
 800b9b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b9b6:	bf00      	nop
 800b9b8:	e7fe      	b.n	800b9b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d103      	bne.n	800b9c8 <xQueueGenericSend+0x40>
 800b9c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d101      	bne.n	800b9cc <xQueueGenericSend+0x44>
 800b9c8:	2301      	movs	r3, #1
 800b9ca:	e000      	b.n	800b9ce <xQueueGenericSend+0x46>
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d10a      	bne.n	800b9e8 <xQueueGenericSend+0x60>
	__asm volatile
 800b9d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9d6:	f383 8811 	msr	BASEPRI, r3
 800b9da:	f3bf 8f6f 	isb	sy
 800b9de:	f3bf 8f4f 	dsb	sy
 800b9e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b9e4:	bf00      	nop
 800b9e6:	e7fe      	b.n	800b9e6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	2b02      	cmp	r3, #2
 800b9ec:	d103      	bne.n	800b9f6 <xQueueGenericSend+0x6e>
 800b9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9f2:	2b01      	cmp	r3, #1
 800b9f4:	d101      	bne.n	800b9fa <xQueueGenericSend+0x72>
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	e000      	b.n	800b9fc <xQueueGenericSend+0x74>
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d10a      	bne.n	800ba16 <xQueueGenericSend+0x8e>
	__asm volatile
 800ba00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba04:	f383 8811 	msr	BASEPRI, r3
 800ba08:	f3bf 8f6f 	isb	sy
 800ba0c:	f3bf 8f4f 	dsb	sy
 800ba10:	623b      	str	r3, [r7, #32]
}
 800ba12:	bf00      	nop
 800ba14:	e7fe      	b.n	800ba14 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ba16:	f001 fa51 	bl	800cebc <xTaskGetSchedulerState>
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d102      	bne.n	800ba26 <xQueueGenericSend+0x9e>
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d101      	bne.n	800ba2a <xQueueGenericSend+0xa2>
 800ba26:	2301      	movs	r3, #1
 800ba28:	e000      	b.n	800ba2c <xQueueGenericSend+0xa4>
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d10a      	bne.n	800ba46 <xQueueGenericSend+0xbe>
	__asm volatile
 800ba30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba34:	f383 8811 	msr	BASEPRI, r3
 800ba38:	f3bf 8f6f 	isb	sy
 800ba3c:	f3bf 8f4f 	dsb	sy
 800ba40:	61fb      	str	r3, [r7, #28]
}
 800ba42:	bf00      	nop
 800ba44:	e7fe      	b.n	800ba44 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ba46:	f002 f83d 	bl	800dac4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ba4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba52:	429a      	cmp	r2, r3
 800ba54:	d302      	bcc.n	800ba5c <xQueueGenericSend+0xd4>
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	2b02      	cmp	r3, #2
 800ba5a:	d129      	bne.n	800bab0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ba5c:	683a      	ldr	r2, [r7, #0]
 800ba5e:	68b9      	ldr	r1, [r7, #8]
 800ba60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba62:	f000 fa8b 	bl	800bf7c <prvCopyDataToQueue>
 800ba66:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ba68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d010      	beq.n	800ba92 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ba70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba72:	3324      	adds	r3, #36	; 0x24
 800ba74:	4618      	mov	r0, r3
 800ba76:	f001 f861 	bl	800cb3c <xTaskRemoveFromEventList>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d013      	beq.n	800baa8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ba80:	4b3f      	ldr	r3, [pc, #252]	; (800bb80 <xQueueGenericSend+0x1f8>)
 800ba82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba86:	601a      	str	r2, [r3, #0]
 800ba88:	f3bf 8f4f 	dsb	sy
 800ba8c:	f3bf 8f6f 	isb	sy
 800ba90:	e00a      	b.n	800baa8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ba92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d007      	beq.n	800baa8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ba98:	4b39      	ldr	r3, [pc, #228]	; (800bb80 <xQueueGenericSend+0x1f8>)
 800ba9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba9e:	601a      	str	r2, [r3, #0]
 800baa0:	f3bf 8f4f 	dsb	sy
 800baa4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800baa8:	f002 f83c 	bl	800db24 <vPortExitCritical>
				return pdPASS;
 800baac:	2301      	movs	r3, #1
 800baae:	e063      	b.n	800bb78 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d103      	bne.n	800babe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bab6:	f002 f835 	bl	800db24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800baba:	2300      	movs	r3, #0
 800babc:	e05c      	b.n	800bb78 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800babe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d106      	bne.n	800bad2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bac4:	f107 0314 	add.w	r3, r7, #20
 800bac8:	4618      	mov	r0, r3
 800baca:	f001 f899 	bl	800cc00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bace:	2301      	movs	r3, #1
 800bad0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bad2:	f002 f827 	bl	800db24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bad6:	f000 fe0d 	bl	800c6f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bada:	f001 fff3 	bl	800dac4 <vPortEnterCritical>
 800bade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bae0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bae4:	b25b      	sxtb	r3, r3
 800bae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baea:	d103      	bne.n	800baf4 <xQueueGenericSend+0x16c>
 800baec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baee:	2200      	movs	r2, #0
 800baf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800baf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baf6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bafa:	b25b      	sxtb	r3, r3
 800bafc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb00:	d103      	bne.n	800bb0a <xQueueGenericSend+0x182>
 800bb02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb04:	2200      	movs	r2, #0
 800bb06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bb0a:	f002 f80b 	bl	800db24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bb0e:	1d3a      	adds	r2, r7, #4
 800bb10:	f107 0314 	add.w	r3, r7, #20
 800bb14:	4611      	mov	r1, r2
 800bb16:	4618      	mov	r0, r3
 800bb18:	f001 f888 	bl	800cc2c <xTaskCheckForTimeOut>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d124      	bne.n	800bb6c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bb22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb24:	f000 fb22 	bl	800c16c <prvIsQueueFull>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d018      	beq.n	800bb60 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bb2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb30:	3310      	adds	r3, #16
 800bb32:	687a      	ldr	r2, [r7, #4]
 800bb34:	4611      	mov	r1, r2
 800bb36:	4618      	mov	r0, r3
 800bb38:	f000 ffb0 	bl	800ca9c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bb3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb3e:	f000 faad 	bl	800c09c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bb42:	f000 fde5 	bl	800c710 <xTaskResumeAll>
 800bb46:	4603      	mov	r3, r0
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	f47f af7c 	bne.w	800ba46 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800bb4e:	4b0c      	ldr	r3, [pc, #48]	; (800bb80 <xQueueGenericSend+0x1f8>)
 800bb50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb54:	601a      	str	r2, [r3, #0]
 800bb56:	f3bf 8f4f 	dsb	sy
 800bb5a:	f3bf 8f6f 	isb	sy
 800bb5e:	e772      	b.n	800ba46 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bb60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb62:	f000 fa9b 	bl	800c09c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bb66:	f000 fdd3 	bl	800c710 <xTaskResumeAll>
 800bb6a:	e76c      	b.n	800ba46 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bb6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb6e:	f000 fa95 	bl	800c09c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bb72:	f000 fdcd 	bl	800c710 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bb76:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	3738      	adds	r7, #56	; 0x38
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}
 800bb80:	e000ed04 	.word	0xe000ed04

0800bb84 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b090      	sub	sp, #64	; 0x40
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	60f8      	str	r0, [r7, #12]
 800bb8c:	60b9      	str	r1, [r7, #8]
 800bb8e:	607a      	str	r2, [r7, #4]
 800bb90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800bb96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d10a      	bne.n	800bbb2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800bb9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bba0:	f383 8811 	msr	BASEPRI, r3
 800bba4:	f3bf 8f6f 	isb	sy
 800bba8:	f3bf 8f4f 	dsb	sy
 800bbac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bbae:	bf00      	nop
 800bbb0:	e7fe      	b.n	800bbb0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bbb2:	68bb      	ldr	r3, [r7, #8]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d103      	bne.n	800bbc0 <xQueueGenericSendFromISR+0x3c>
 800bbb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d101      	bne.n	800bbc4 <xQueueGenericSendFromISR+0x40>
 800bbc0:	2301      	movs	r3, #1
 800bbc2:	e000      	b.n	800bbc6 <xQueueGenericSendFromISR+0x42>
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d10a      	bne.n	800bbe0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800bbca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbce:	f383 8811 	msr	BASEPRI, r3
 800bbd2:	f3bf 8f6f 	isb	sy
 800bbd6:	f3bf 8f4f 	dsb	sy
 800bbda:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bbdc:	bf00      	nop
 800bbde:	e7fe      	b.n	800bbde <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	2b02      	cmp	r3, #2
 800bbe4:	d103      	bne.n	800bbee <xQueueGenericSendFromISR+0x6a>
 800bbe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbea:	2b01      	cmp	r3, #1
 800bbec:	d101      	bne.n	800bbf2 <xQueueGenericSendFromISR+0x6e>
 800bbee:	2301      	movs	r3, #1
 800bbf0:	e000      	b.n	800bbf4 <xQueueGenericSendFromISR+0x70>
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d10a      	bne.n	800bc0e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800bbf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbfc:	f383 8811 	msr	BASEPRI, r3
 800bc00:	f3bf 8f6f 	isb	sy
 800bc04:	f3bf 8f4f 	dsb	sy
 800bc08:	623b      	str	r3, [r7, #32]
}
 800bc0a:	bf00      	nop
 800bc0c:	e7fe      	b.n	800bc0c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bc0e:	f002 f83b 	bl	800dc88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bc12:	f3ef 8211 	mrs	r2, BASEPRI
 800bc16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc1a:	f383 8811 	msr	BASEPRI, r3
 800bc1e:	f3bf 8f6f 	isb	sy
 800bc22:	f3bf 8f4f 	dsb	sy
 800bc26:	61fa      	str	r2, [r7, #28]
 800bc28:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bc2a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bc2c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bc2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc36:	429a      	cmp	r2, r3
 800bc38:	d302      	bcc.n	800bc40 <xQueueGenericSendFromISR+0xbc>
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	2b02      	cmp	r3, #2
 800bc3e:	d12f      	bne.n	800bca0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bc40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bc4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc4e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bc50:	683a      	ldr	r2, [r7, #0]
 800bc52:	68b9      	ldr	r1, [r7, #8]
 800bc54:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bc56:	f000 f991 	bl	800bf7c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bc5a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800bc5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc62:	d112      	bne.n	800bc8a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bc64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d016      	beq.n	800bc9a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bc6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc6e:	3324      	adds	r3, #36	; 0x24
 800bc70:	4618      	mov	r0, r3
 800bc72:	f000 ff63 	bl	800cb3c <xTaskRemoveFromEventList>
 800bc76:	4603      	mov	r3, r0
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d00e      	beq.n	800bc9a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d00b      	beq.n	800bc9a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2201      	movs	r2, #1
 800bc86:	601a      	str	r2, [r3, #0]
 800bc88:	e007      	b.n	800bc9a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bc8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bc8e:	3301      	adds	r3, #1
 800bc90:	b2db      	uxtb	r3, r3
 800bc92:	b25a      	sxtb	r2, r3
 800bc94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800bc9e:	e001      	b.n	800bca4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bca0:	2300      	movs	r3, #0
 800bca2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bca6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bca8:	697b      	ldr	r3, [r7, #20]
 800bcaa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bcae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bcb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	3740      	adds	r7, #64	; 0x40
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bd80      	pop	{r7, pc}
	...

0800bcbc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b08c      	sub	sp, #48	; 0x30
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	60f8      	str	r0, [r7, #12]
 800bcc4:	60b9      	str	r1, [r7, #8]
 800bcc6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bcc8:	2300      	movs	r3, #0
 800bcca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bcd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d10a      	bne.n	800bcec <xQueueReceive+0x30>
	__asm volatile
 800bcd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcda:	f383 8811 	msr	BASEPRI, r3
 800bcde:	f3bf 8f6f 	isb	sy
 800bce2:	f3bf 8f4f 	dsb	sy
 800bce6:	623b      	str	r3, [r7, #32]
}
 800bce8:	bf00      	nop
 800bcea:	e7fe      	b.n	800bcea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bcec:	68bb      	ldr	r3, [r7, #8]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d103      	bne.n	800bcfa <xQueueReceive+0x3e>
 800bcf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d101      	bne.n	800bcfe <xQueueReceive+0x42>
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	e000      	b.n	800bd00 <xQueueReceive+0x44>
 800bcfe:	2300      	movs	r3, #0
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d10a      	bne.n	800bd1a <xQueueReceive+0x5e>
	__asm volatile
 800bd04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd08:	f383 8811 	msr	BASEPRI, r3
 800bd0c:	f3bf 8f6f 	isb	sy
 800bd10:	f3bf 8f4f 	dsb	sy
 800bd14:	61fb      	str	r3, [r7, #28]
}
 800bd16:	bf00      	nop
 800bd18:	e7fe      	b.n	800bd18 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bd1a:	f001 f8cf 	bl	800cebc <xTaskGetSchedulerState>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d102      	bne.n	800bd2a <xQueueReceive+0x6e>
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d101      	bne.n	800bd2e <xQueueReceive+0x72>
 800bd2a:	2301      	movs	r3, #1
 800bd2c:	e000      	b.n	800bd30 <xQueueReceive+0x74>
 800bd2e:	2300      	movs	r3, #0
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d10a      	bne.n	800bd4a <xQueueReceive+0x8e>
	__asm volatile
 800bd34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd38:	f383 8811 	msr	BASEPRI, r3
 800bd3c:	f3bf 8f6f 	isb	sy
 800bd40:	f3bf 8f4f 	dsb	sy
 800bd44:	61bb      	str	r3, [r7, #24]
}
 800bd46:	bf00      	nop
 800bd48:	e7fe      	b.n	800bd48 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bd4a:	f001 febb 	bl	800dac4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bd4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd52:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bd54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d01f      	beq.n	800bd9a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bd5a:	68b9      	ldr	r1, [r7, #8]
 800bd5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd5e:	f000 f977 	bl	800c050 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bd62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd64:	1e5a      	subs	r2, r3, #1
 800bd66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd68:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bd6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd6c:	691b      	ldr	r3, [r3, #16]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d00f      	beq.n	800bd92 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bd72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd74:	3310      	adds	r3, #16
 800bd76:	4618      	mov	r0, r3
 800bd78:	f000 fee0 	bl	800cb3c <xTaskRemoveFromEventList>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d007      	beq.n	800bd92 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bd82:	4b3d      	ldr	r3, [pc, #244]	; (800be78 <xQueueReceive+0x1bc>)
 800bd84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd88:	601a      	str	r2, [r3, #0]
 800bd8a:	f3bf 8f4f 	dsb	sy
 800bd8e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bd92:	f001 fec7 	bl	800db24 <vPortExitCritical>
				return pdPASS;
 800bd96:	2301      	movs	r3, #1
 800bd98:	e069      	b.n	800be6e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d103      	bne.n	800bda8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bda0:	f001 fec0 	bl	800db24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bda4:	2300      	movs	r3, #0
 800bda6:	e062      	b.n	800be6e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bda8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d106      	bne.n	800bdbc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bdae:	f107 0310 	add.w	r3, r7, #16
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f000 ff24 	bl	800cc00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bdb8:	2301      	movs	r3, #1
 800bdba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bdbc:	f001 feb2 	bl	800db24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bdc0:	f000 fc98 	bl	800c6f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bdc4:	f001 fe7e 	bl	800dac4 <vPortEnterCritical>
 800bdc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bdce:	b25b      	sxtb	r3, r3
 800bdd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdd4:	d103      	bne.n	800bdde <xQueueReceive+0x122>
 800bdd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdd8:	2200      	movs	r2, #0
 800bdda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bdde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bde0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bde4:	b25b      	sxtb	r3, r3
 800bde6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdea:	d103      	bne.n	800bdf4 <xQueueReceive+0x138>
 800bdec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdee:	2200      	movs	r2, #0
 800bdf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bdf4:	f001 fe96 	bl	800db24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bdf8:	1d3a      	adds	r2, r7, #4
 800bdfa:	f107 0310 	add.w	r3, r7, #16
 800bdfe:	4611      	mov	r1, r2
 800be00:	4618      	mov	r0, r3
 800be02:	f000 ff13 	bl	800cc2c <xTaskCheckForTimeOut>
 800be06:	4603      	mov	r3, r0
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d123      	bne.n	800be54 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800be0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be0e:	f000 f997 	bl	800c140 <prvIsQueueEmpty>
 800be12:	4603      	mov	r3, r0
 800be14:	2b00      	cmp	r3, #0
 800be16:	d017      	beq.n	800be48 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800be18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be1a:	3324      	adds	r3, #36	; 0x24
 800be1c:	687a      	ldr	r2, [r7, #4]
 800be1e:	4611      	mov	r1, r2
 800be20:	4618      	mov	r0, r3
 800be22:	f000 fe3b 	bl	800ca9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800be26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be28:	f000 f938 	bl	800c09c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800be2c:	f000 fc70 	bl	800c710 <xTaskResumeAll>
 800be30:	4603      	mov	r3, r0
 800be32:	2b00      	cmp	r3, #0
 800be34:	d189      	bne.n	800bd4a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800be36:	4b10      	ldr	r3, [pc, #64]	; (800be78 <xQueueReceive+0x1bc>)
 800be38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be3c:	601a      	str	r2, [r3, #0]
 800be3e:	f3bf 8f4f 	dsb	sy
 800be42:	f3bf 8f6f 	isb	sy
 800be46:	e780      	b.n	800bd4a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800be48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be4a:	f000 f927 	bl	800c09c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800be4e:	f000 fc5f 	bl	800c710 <xTaskResumeAll>
 800be52:	e77a      	b.n	800bd4a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800be54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be56:	f000 f921 	bl	800c09c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800be5a:	f000 fc59 	bl	800c710 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800be5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be60:	f000 f96e 	bl	800c140 <prvIsQueueEmpty>
 800be64:	4603      	mov	r3, r0
 800be66:	2b00      	cmp	r3, #0
 800be68:	f43f af6f 	beq.w	800bd4a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800be6c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800be6e:	4618      	mov	r0, r3
 800be70:	3730      	adds	r7, #48	; 0x30
 800be72:	46bd      	mov	sp, r7
 800be74:	bd80      	pop	{r7, pc}
 800be76:	bf00      	nop
 800be78:	e000ed04 	.word	0xe000ed04

0800be7c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b08e      	sub	sp, #56	; 0x38
 800be80:	af00      	add	r7, sp, #0
 800be82:	60f8      	str	r0, [r7, #12]
 800be84:	60b9      	str	r1, [r7, #8]
 800be86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800be8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d10a      	bne.n	800bea8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800be92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be96:	f383 8811 	msr	BASEPRI, r3
 800be9a:	f3bf 8f6f 	isb	sy
 800be9e:	f3bf 8f4f 	dsb	sy
 800bea2:	623b      	str	r3, [r7, #32]
}
 800bea4:	bf00      	nop
 800bea6:	e7fe      	b.n	800bea6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d103      	bne.n	800beb6 <xQueueReceiveFromISR+0x3a>
 800beae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d101      	bne.n	800beba <xQueueReceiveFromISR+0x3e>
 800beb6:	2301      	movs	r3, #1
 800beb8:	e000      	b.n	800bebc <xQueueReceiveFromISR+0x40>
 800beba:	2300      	movs	r3, #0
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d10a      	bne.n	800bed6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800bec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bec4:	f383 8811 	msr	BASEPRI, r3
 800bec8:	f3bf 8f6f 	isb	sy
 800becc:	f3bf 8f4f 	dsb	sy
 800bed0:	61fb      	str	r3, [r7, #28]
}
 800bed2:	bf00      	nop
 800bed4:	e7fe      	b.n	800bed4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bed6:	f001 fed7 	bl	800dc88 <vPortValidateInterruptPriority>
	__asm volatile
 800beda:	f3ef 8211 	mrs	r2, BASEPRI
 800bede:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bee2:	f383 8811 	msr	BASEPRI, r3
 800bee6:	f3bf 8f6f 	isb	sy
 800beea:	f3bf 8f4f 	dsb	sy
 800beee:	61ba      	str	r2, [r7, #24]
 800bef0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800bef2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bef4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800befa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800befc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d02f      	beq.n	800bf62 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800bf02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bf08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bf0c:	68b9      	ldr	r1, [r7, #8]
 800bf0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf10:	f000 f89e 	bl	800c050 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bf14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf16:	1e5a      	subs	r2, r3, #1
 800bf18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf1a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800bf1c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bf20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf24:	d112      	bne.n	800bf4c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bf26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf28:	691b      	ldr	r3, [r3, #16]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d016      	beq.n	800bf5c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf30:	3310      	adds	r3, #16
 800bf32:	4618      	mov	r0, r3
 800bf34:	f000 fe02 	bl	800cb3c <xTaskRemoveFromEventList>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d00e      	beq.n	800bf5c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d00b      	beq.n	800bf5c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2201      	movs	r2, #1
 800bf48:	601a      	str	r2, [r3, #0]
 800bf4a:	e007      	b.n	800bf5c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800bf4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf50:	3301      	adds	r3, #1
 800bf52:	b2db      	uxtb	r3, r3
 800bf54:	b25a      	sxtb	r2, r3
 800bf56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800bf5c:	2301      	movs	r3, #1
 800bf5e:	637b      	str	r3, [r7, #52]	; 0x34
 800bf60:	e001      	b.n	800bf66 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800bf62:	2300      	movs	r3, #0
 800bf64:	637b      	str	r3, [r7, #52]	; 0x34
 800bf66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf68:	613b      	str	r3, [r7, #16]
	__asm volatile
 800bf6a:	693b      	ldr	r3, [r7, #16]
 800bf6c:	f383 8811 	msr	BASEPRI, r3
}
 800bf70:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bf72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bf74:	4618      	mov	r0, r3
 800bf76:	3738      	adds	r7, #56	; 0x38
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	bd80      	pop	{r7, pc}

0800bf7c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b086      	sub	sp, #24
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	60f8      	str	r0, [r7, #12]
 800bf84:	60b9      	str	r1, [r7, #8]
 800bf86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bf88:	2300      	movs	r3, #0
 800bf8a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf90:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d10d      	bne.n	800bfb6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d14d      	bne.n	800c03e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	689b      	ldr	r3, [r3, #8]
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	f000 ffa6 	bl	800cef8 <xTaskPriorityDisinherit>
 800bfac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	609a      	str	r2, [r3, #8]
 800bfb4:	e043      	b.n	800c03e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d119      	bne.n	800bff0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	6858      	ldr	r0, [r3, #4]
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfc4:	461a      	mov	r2, r3
 800bfc6:	68b9      	ldr	r1, [r7, #8]
 800bfc8:	f002 fbc6 	bl	800e758 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	685a      	ldr	r2, [r3, #4]
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfd4:	441a      	add	r2, r3
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	685a      	ldr	r2, [r3, #4]
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	689b      	ldr	r3, [r3, #8]
 800bfe2:	429a      	cmp	r2, r3
 800bfe4:	d32b      	bcc.n	800c03e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	681a      	ldr	r2, [r3, #0]
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	605a      	str	r2, [r3, #4]
 800bfee:	e026      	b.n	800c03e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	68d8      	ldr	r0, [r3, #12]
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bff8:	461a      	mov	r2, r3
 800bffa:	68b9      	ldr	r1, [r7, #8]
 800bffc:	f002 fbac 	bl	800e758 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	68da      	ldr	r2, [r3, #12]
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c008:	425b      	negs	r3, r3
 800c00a:	441a      	add	r2, r3
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	68da      	ldr	r2, [r3, #12]
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	429a      	cmp	r2, r3
 800c01a:	d207      	bcs.n	800c02c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	689a      	ldr	r2, [r3, #8]
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c024:	425b      	negs	r3, r3
 800c026:	441a      	add	r2, r3
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2b02      	cmp	r3, #2
 800c030:	d105      	bne.n	800c03e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c032:	693b      	ldr	r3, [r7, #16]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d002      	beq.n	800c03e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c038:	693b      	ldr	r3, [r7, #16]
 800c03a:	3b01      	subs	r3, #1
 800c03c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c03e:	693b      	ldr	r3, [r7, #16]
 800c040:	1c5a      	adds	r2, r3, #1
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c046:	697b      	ldr	r3, [r7, #20]
}
 800c048:	4618      	mov	r0, r3
 800c04a:	3718      	adds	r7, #24
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}

0800c050 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b082      	sub	sp, #8
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
 800c058:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d018      	beq.n	800c094 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	68da      	ldr	r2, [r3, #12]
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c06a:	441a      	add	r2, r3
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	68da      	ldr	r2, [r3, #12]
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	689b      	ldr	r3, [r3, #8]
 800c078:	429a      	cmp	r2, r3
 800c07a:	d303      	bcc.n	800c084 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681a      	ldr	r2, [r3, #0]
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	68d9      	ldr	r1, [r3, #12]
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c08c:	461a      	mov	r2, r3
 800c08e:	6838      	ldr	r0, [r7, #0]
 800c090:	f002 fb62 	bl	800e758 <memcpy>
	}
}
 800c094:	bf00      	nop
 800c096:	3708      	adds	r7, #8
 800c098:	46bd      	mov	sp, r7
 800c09a:	bd80      	pop	{r7, pc}

0800c09c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b084      	sub	sp, #16
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c0a4:	f001 fd0e 	bl	800dac4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c0ae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c0b0:	e011      	b.n	800c0d6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d012      	beq.n	800c0e0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	3324      	adds	r3, #36	; 0x24
 800c0be:	4618      	mov	r0, r3
 800c0c0:	f000 fd3c 	bl	800cb3c <xTaskRemoveFromEventList>
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d001      	beq.n	800c0ce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c0ca:	f000 fe11 	bl	800ccf0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c0ce:	7bfb      	ldrb	r3, [r7, #15]
 800c0d0:	3b01      	subs	r3, #1
 800c0d2:	b2db      	uxtb	r3, r3
 800c0d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c0d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	dce9      	bgt.n	800c0b2 <prvUnlockQueue+0x16>
 800c0de:	e000      	b.n	800c0e2 <prvUnlockQueue+0x46>
					break;
 800c0e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	22ff      	movs	r2, #255	; 0xff
 800c0e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c0ea:	f001 fd1b 	bl	800db24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c0ee:	f001 fce9 	bl	800dac4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c0f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c0fa:	e011      	b.n	800c120 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	691b      	ldr	r3, [r3, #16]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d012      	beq.n	800c12a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	3310      	adds	r3, #16
 800c108:	4618      	mov	r0, r3
 800c10a:	f000 fd17 	bl	800cb3c <xTaskRemoveFromEventList>
 800c10e:	4603      	mov	r3, r0
 800c110:	2b00      	cmp	r3, #0
 800c112:	d001      	beq.n	800c118 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c114:	f000 fdec 	bl	800ccf0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c118:	7bbb      	ldrb	r3, [r7, #14]
 800c11a:	3b01      	subs	r3, #1
 800c11c:	b2db      	uxtb	r3, r3
 800c11e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c120:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c124:	2b00      	cmp	r3, #0
 800c126:	dce9      	bgt.n	800c0fc <prvUnlockQueue+0x60>
 800c128:	e000      	b.n	800c12c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c12a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	22ff      	movs	r2, #255	; 0xff
 800c130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c134:	f001 fcf6 	bl	800db24 <vPortExitCritical>
}
 800c138:	bf00      	nop
 800c13a:	3710      	adds	r7, #16
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}

0800c140 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b084      	sub	sp, #16
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c148:	f001 fcbc 	bl	800dac4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c150:	2b00      	cmp	r3, #0
 800c152:	d102      	bne.n	800c15a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c154:	2301      	movs	r3, #1
 800c156:	60fb      	str	r3, [r7, #12]
 800c158:	e001      	b.n	800c15e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c15a:	2300      	movs	r3, #0
 800c15c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c15e:	f001 fce1 	bl	800db24 <vPortExitCritical>

	return xReturn;
 800c162:	68fb      	ldr	r3, [r7, #12]
}
 800c164:	4618      	mov	r0, r3
 800c166:	3710      	adds	r7, #16
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd80      	pop	{r7, pc}

0800c16c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b084      	sub	sp, #16
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c174:	f001 fca6 	bl	800dac4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c180:	429a      	cmp	r2, r3
 800c182:	d102      	bne.n	800c18a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c184:	2301      	movs	r3, #1
 800c186:	60fb      	str	r3, [r7, #12]
 800c188:	e001      	b.n	800c18e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c18a:	2300      	movs	r3, #0
 800c18c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c18e:	f001 fcc9 	bl	800db24 <vPortExitCritical>

	return xReturn;
 800c192:	68fb      	ldr	r3, [r7, #12]
}
 800c194:	4618      	mov	r0, r3
 800c196:	3710      	adds	r7, #16
 800c198:	46bd      	mov	sp, r7
 800c19a:	bd80      	pop	{r7, pc}

0800c19c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c19c:	b480      	push	{r7}
 800c19e:	b085      	sub	sp, #20
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
 800c1a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	60fb      	str	r3, [r7, #12]
 800c1aa:	e014      	b.n	800c1d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c1ac:	4a0f      	ldr	r2, [pc, #60]	; (800c1ec <vQueueAddToRegistry+0x50>)
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d10b      	bne.n	800c1d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c1b8:	490c      	ldr	r1, [pc, #48]	; (800c1ec <vQueueAddToRegistry+0x50>)
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	683a      	ldr	r2, [r7, #0]
 800c1be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c1c2:	4a0a      	ldr	r2, [pc, #40]	; (800c1ec <vQueueAddToRegistry+0x50>)
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	00db      	lsls	r3, r3, #3
 800c1c8:	4413      	add	r3, r2
 800c1ca:	687a      	ldr	r2, [r7, #4]
 800c1cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c1ce:	e006      	b.n	800c1de <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	3301      	adds	r3, #1
 800c1d4:	60fb      	str	r3, [r7, #12]
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	2b07      	cmp	r3, #7
 800c1da:	d9e7      	bls.n	800c1ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c1dc:	bf00      	nop
 800c1de:	bf00      	nop
 800c1e0:	3714      	adds	r7, #20
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e8:	4770      	bx	lr
 800c1ea:	bf00      	nop
 800c1ec:	20004a88 	.word	0x20004a88

0800c1f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b086      	sub	sp, #24
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	60f8      	str	r0, [r7, #12]
 800c1f8:	60b9      	str	r1, [r7, #8]
 800c1fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c200:	f001 fc60 	bl	800dac4 <vPortEnterCritical>
 800c204:	697b      	ldr	r3, [r7, #20]
 800c206:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c20a:	b25b      	sxtb	r3, r3
 800c20c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c210:	d103      	bne.n	800c21a <vQueueWaitForMessageRestricted+0x2a>
 800c212:	697b      	ldr	r3, [r7, #20]
 800c214:	2200      	movs	r2, #0
 800c216:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c21a:	697b      	ldr	r3, [r7, #20]
 800c21c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c220:	b25b      	sxtb	r3, r3
 800c222:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c226:	d103      	bne.n	800c230 <vQueueWaitForMessageRestricted+0x40>
 800c228:	697b      	ldr	r3, [r7, #20]
 800c22a:	2200      	movs	r2, #0
 800c22c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c230:	f001 fc78 	bl	800db24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c234:	697b      	ldr	r3, [r7, #20]
 800c236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d106      	bne.n	800c24a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c23c:	697b      	ldr	r3, [r7, #20]
 800c23e:	3324      	adds	r3, #36	; 0x24
 800c240:	687a      	ldr	r2, [r7, #4]
 800c242:	68b9      	ldr	r1, [r7, #8]
 800c244:	4618      	mov	r0, r3
 800c246:	f000 fc4d 	bl	800cae4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c24a:	6978      	ldr	r0, [r7, #20]
 800c24c:	f7ff ff26 	bl	800c09c <prvUnlockQueue>
	}
 800c250:	bf00      	nop
 800c252:	3718      	adds	r7, #24
 800c254:	46bd      	mov	sp, r7
 800c256:	bd80      	pop	{r7, pc}

0800c258 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b08e      	sub	sp, #56	; 0x38
 800c25c:	af04      	add	r7, sp, #16
 800c25e:	60f8      	str	r0, [r7, #12]
 800c260:	60b9      	str	r1, [r7, #8]
 800c262:	607a      	str	r2, [r7, #4]
 800c264:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d10a      	bne.n	800c282 <xTaskCreateStatic+0x2a>
	__asm volatile
 800c26c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c270:	f383 8811 	msr	BASEPRI, r3
 800c274:	f3bf 8f6f 	isb	sy
 800c278:	f3bf 8f4f 	dsb	sy
 800c27c:	623b      	str	r3, [r7, #32]
}
 800c27e:	bf00      	nop
 800c280:	e7fe      	b.n	800c280 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c284:	2b00      	cmp	r3, #0
 800c286:	d10a      	bne.n	800c29e <xTaskCreateStatic+0x46>
	__asm volatile
 800c288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c28c:	f383 8811 	msr	BASEPRI, r3
 800c290:	f3bf 8f6f 	isb	sy
 800c294:	f3bf 8f4f 	dsb	sy
 800c298:	61fb      	str	r3, [r7, #28]
}
 800c29a:	bf00      	nop
 800c29c:	e7fe      	b.n	800c29c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c29e:	23b4      	movs	r3, #180	; 0xb4
 800c2a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c2a2:	693b      	ldr	r3, [r7, #16]
 800c2a4:	2bb4      	cmp	r3, #180	; 0xb4
 800c2a6:	d00a      	beq.n	800c2be <xTaskCreateStatic+0x66>
	__asm volatile
 800c2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ac:	f383 8811 	msr	BASEPRI, r3
 800c2b0:	f3bf 8f6f 	isb	sy
 800c2b4:	f3bf 8f4f 	dsb	sy
 800c2b8:	61bb      	str	r3, [r7, #24]
}
 800c2ba:	bf00      	nop
 800c2bc:	e7fe      	b.n	800c2bc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c2be:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d01e      	beq.n	800c304 <xTaskCreateStatic+0xac>
 800c2c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d01b      	beq.n	800c304 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c2cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c2d4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2d8:	2202      	movs	r2, #2
 800c2da:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c2de:	2300      	movs	r3, #0
 800c2e0:	9303      	str	r3, [sp, #12]
 800c2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2e4:	9302      	str	r3, [sp, #8]
 800c2e6:	f107 0314 	add.w	r3, r7, #20
 800c2ea:	9301      	str	r3, [sp, #4]
 800c2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ee:	9300      	str	r3, [sp, #0]
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	687a      	ldr	r2, [r7, #4]
 800c2f4:	68b9      	ldr	r1, [r7, #8]
 800c2f6:	68f8      	ldr	r0, [r7, #12]
 800c2f8:	f000 f850 	bl	800c39c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c2fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c2fe:	f000 f8eb 	bl	800c4d8 <prvAddNewTaskToReadyList>
 800c302:	e001      	b.n	800c308 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c304:	2300      	movs	r3, #0
 800c306:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c308:	697b      	ldr	r3, [r7, #20]
	}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3728      	adds	r7, #40	; 0x28
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}

0800c312 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c312:	b580      	push	{r7, lr}
 800c314:	b08c      	sub	sp, #48	; 0x30
 800c316:	af04      	add	r7, sp, #16
 800c318:	60f8      	str	r0, [r7, #12]
 800c31a:	60b9      	str	r1, [r7, #8]
 800c31c:	603b      	str	r3, [r7, #0]
 800c31e:	4613      	mov	r3, r2
 800c320:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c322:	88fb      	ldrh	r3, [r7, #6]
 800c324:	009b      	lsls	r3, r3, #2
 800c326:	4618      	mov	r0, r3
 800c328:	f001 fcee 	bl	800dd08 <pvPortMalloc>
 800c32c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c32e:	697b      	ldr	r3, [r7, #20]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d00e      	beq.n	800c352 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c334:	20b4      	movs	r0, #180	; 0xb4
 800c336:	f001 fce7 	bl	800dd08 <pvPortMalloc>
 800c33a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c33c:	69fb      	ldr	r3, [r7, #28]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d003      	beq.n	800c34a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c342:	69fb      	ldr	r3, [r7, #28]
 800c344:	697a      	ldr	r2, [r7, #20]
 800c346:	631a      	str	r2, [r3, #48]	; 0x30
 800c348:	e005      	b.n	800c356 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c34a:	6978      	ldr	r0, [r7, #20]
 800c34c:	f001 fda8 	bl	800dea0 <vPortFree>
 800c350:	e001      	b.n	800c356 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c352:	2300      	movs	r3, #0
 800c354:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c356:	69fb      	ldr	r3, [r7, #28]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d017      	beq.n	800c38c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c35c:	69fb      	ldr	r3, [r7, #28]
 800c35e:	2200      	movs	r2, #0
 800c360:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c364:	88fa      	ldrh	r2, [r7, #6]
 800c366:	2300      	movs	r3, #0
 800c368:	9303      	str	r3, [sp, #12]
 800c36a:	69fb      	ldr	r3, [r7, #28]
 800c36c:	9302      	str	r3, [sp, #8]
 800c36e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c370:	9301      	str	r3, [sp, #4]
 800c372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c374:	9300      	str	r3, [sp, #0]
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	68b9      	ldr	r1, [r7, #8]
 800c37a:	68f8      	ldr	r0, [r7, #12]
 800c37c:	f000 f80e 	bl	800c39c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c380:	69f8      	ldr	r0, [r7, #28]
 800c382:	f000 f8a9 	bl	800c4d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c386:	2301      	movs	r3, #1
 800c388:	61bb      	str	r3, [r7, #24]
 800c38a:	e002      	b.n	800c392 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c38c:	f04f 33ff 	mov.w	r3, #4294967295
 800c390:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c392:	69bb      	ldr	r3, [r7, #24]
	}
 800c394:	4618      	mov	r0, r3
 800c396:	3720      	adds	r7, #32
 800c398:	46bd      	mov	sp, r7
 800c39a:	bd80      	pop	{r7, pc}

0800c39c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b088      	sub	sp, #32
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	60f8      	str	r0, [r7, #12]
 800c3a4:	60b9      	str	r1, [r7, #8]
 800c3a6:	607a      	str	r2, [r7, #4]
 800c3a8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c3b4:	3b01      	subs	r3, #1
 800c3b6:	009b      	lsls	r3, r3, #2
 800c3b8:	4413      	add	r3, r2
 800c3ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c3bc:	69bb      	ldr	r3, [r7, #24]
 800c3be:	f023 0307 	bic.w	r3, r3, #7
 800c3c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c3c4:	69bb      	ldr	r3, [r7, #24]
 800c3c6:	f003 0307 	and.w	r3, r3, #7
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d00a      	beq.n	800c3e4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800c3ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3d2:	f383 8811 	msr	BASEPRI, r3
 800c3d6:	f3bf 8f6f 	isb	sy
 800c3da:	f3bf 8f4f 	dsb	sy
 800c3de:	617b      	str	r3, [r7, #20]
}
 800c3e0:	bf00      	nop
 800c3e2:	e7fe      	b.n	800c3e2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c3e4:	68bb      	ldr	r3, [r7, #8]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d01f      	beq.n	800c42a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	61fb      	str	r3, [r7, #28]
 800c3ee:	e012      	b.n	800c416 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c3f0:	68ba      	ldr	r2, [r7, #8]
 800c3f2:	69fb      	ldr	r3, [r7, #28]
 800c3f4:	4413      	add	r3, r2
 800c3f6:	7819      	ldrb	r1, [r3, #0]
 800c3f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3fa:	69fb      	ldr	r3, [r7, #28]
 800c3fc:	4413      	add	r3, r2
 800c3fe:	3334      	adds	r3, #52	; 0x34
 800c400:	460a      	mov	r2, r1
 800c402:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c404:	68ba      	ldr	r2, [r7, #8]
 800c406:	69fb      	ldr	r3, [r7, #28]
 800c408:	4413      	add	r3, r2
 800c40a:	781b      	ldrb	r3, [r3, #0]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d006      	beq.n	800c41e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c410:	69fb      	ldr	r3, [r7, #28]
 800c412:	3301      	adds	r3, #1
 800c414:	61fb      	str	r3, [r7, #28]
 800c416:	69fb      	ldr	r3, [r7, #28]
 800c418:	2b0f      	cmp	r3, #15
 800c41a:	d9e9      	bls.n	800c3f0 <prvInitialiseNewTask+0x54>
 800c41c:	e000      	b.n	800c420 <prvInitialiseNewTask+0x84>
			{
				break;
 800c41e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c422:	2200      	movs	r2, #0
 800c424:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c428:	e003      	b.n	800c432 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c42a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c42c:	2200      	movs	r2, #0
 800c42e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c434:	2b06      	cmp	r3, #6
 800c436:	d901      	bls.n	800c43c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c438:	2306      	movs	r3, #6
 800c43a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c43c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c43e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c440:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c444:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c446:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c44a:	2200      	movs	r2, #0
 800c44c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c450:	3304      	adds	r3, #4
 800c452:	4618      	mov	r0, r3
 800c454:	f7ff f8ca 	bl	800b5ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c45a:	3318      	adds	r3, #24
 800c45c:	4618      	mov	r0, r3
 800c45e:	f7ff f8c5 	bl	800b5ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c466:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c46a:	f1c3 0207 	rsb	r2, r3, #7
 800c46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c470:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c474:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c476:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c47a:	2200      	movs	r2, #0
 800c47c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c482:	2200      	movs	r2, #0
 800c484:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c48a:	334c      	adds	r3, #76	; 0x4c
 800c48c:	2260      	movs	r2, #96	; 0x60
 800c48e:	2100      	movs	r1, #0
 800c490:	4618      	mov	r0, r3
 800c492:	f002 f96f 	bl	800e774 <memset>
 800c496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c498:	4a0c      	ldr	r2, [pc, #48]	; (800c4cc <prvInitialiseNewTask+0x130>)
 800c49a:	651a      	str	r2, [r3, #80]	; 0x50
 800c49c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c49e:	4a0c      	ldr	r2, [pc, #48]	; (800c4d0 <prvInitialiseNewTask+0x134>)
 800c4a0:	655a      	str	r2, [r3, #84]	; 0x54
 800c4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4a4:	4a0b      	ldr	r2, [pc, #44]	; (800c4d4 <prvInitialiseNewTask+0x138>)
 800c4a6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c4a8:	683a      	ldr	r2, [r7, #0]
 800c4aa:	68f9      	ldr	r1, [r7, #12]
 800c4ac:	69b8      	ldr	r0, [r7, #24]
 800c4ae:	f001 f9db 	bl	800d868 <pxPortInitialiseStack>
 800c4b2:	4602      	mov	r2, r0
 800c4b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4b6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c4b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d002      	beq.n	800c4c4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4c2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c4c4:	bf00      	nop
 800c4c6:	3720      	adds	r7, #32
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}
 800c4cc:	0800f234 	.word	0x0800f234
 800c4d0:	0800f254 	.word	0x0800f254
 800c4d4:	0800f214 	.word	0x0800f214

0800c4d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b082      	sub	sp, #8
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c4e0:	f001 faf0 	bl	800dac4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c4e4:	4b2a      	ldr	r3, [pc, #168]	; (800c590 <prvAddNewTaskToReadyList+0xb8>)
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	3301      	adds	r3, #1
 800c4ea:	4a29      	ldr	r2, [pc, #164]	; (800c590 <prvAddNewTaskToReadyList+0xb8>)
 800c4ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c4ee:	4b29      	ldr	r3, [pc, #164]	; (800c594 <prvAddNewTaskToReadyList+0xbc>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d109      	bne.n	800c50a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c4f6:	4a27      	ldr	r2, [pc, #156]	; (800c594 <prvAddNewTaskToReadyList+0xbc>)
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c4fc:	4b24      	ldr	r3, [pc, #144]	; (800c590 <prvAddNewTaskToReadyList+0xb8>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	2b01      	cmp	r3, #1
 800c502:	d110      	bne.n	800c526 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c504:	f000 fc18 	bl	800cd38 <prvInitialiseTaskLists>
 800c508:	e00d      	b.n	800c526 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c50a:	4b23      	ldr	r3, [pc, #140]	; (800c598 <prvAddNewTaskToReadyList+0xc0>)
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d109      	bne.n	800c526 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c512:	4b20      	ldr	r3, [pc, #128]	; (800c594 <prvAddNewTaskToReadyList+0xbc>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c51c:	429a      	cmp	r2, r3
 800c51e:	d802      	bhi.n	800c526 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c520:	4a1c      	ldr	r2, [pc, #112]	; (800c594 <prvAddNewTaskToReadyList+0xbc>)
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c526:	4b1d      	ldr	r3, [pc, #116]	; (800c59c <prvAddNewTaskToReadyList+0xc4>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	3301      	adds	r3, #1
 800c52c:	4a1b      	ldr	r2, [pc, #108]	; (800c59c <prvAddNewTaskToReadyList+0xc4>)
 800c52e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c534:	2201      	movs	r2, #1
 800c536:	409a      	lsls	r2, r3
 800c538:	4b19      	ldr	r3, [pc, #100]	; (800c5a0 <prvAddNewTaskToReadyList+0xc8>)
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	4313      	orrs	r3, r2
 800c53e:	4a18      	ldr	r2, [pc, #96]	; (800c5a0 <prvAddNewTaskToReadyList+0xc8>)
 800c540:	6013      	str	r3, [r2, #0]
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c546:	4613      	mov	r3, r2
 800c548:	009b      	lsls	r3, r3, #2
 800c54a:	4413      	add	r3, r2
 800c54c:	009b      	lsls	r3, r3, #2
 800c54e:	4a15      	ldr	r2, [pc, #84]	; (800c5a4 <prvAddNewTaskToReadyList+0xcc>)
 800c550:	441a      	add	r2, r3
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	3304      	adds	r3, #4
 800c556:	4619      	mov	r1, r3
 800c558:	4610      	mov	r0, r2
 800c55a:	f7ff f854 	bl	800b606 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c55e:	f001 fae1 	bl	800db24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c562:	4b0d      	ldr	r3, [pc, #52]	; (800c598 <prvAddNewTaskToReadyList+0xc0>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d00e      	beq.n	800c588 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c56a:	4b0a      	ldr	r3, [pc, #40]	; (800c594 <prvAddNewTaskToReadyList+0xbc>)
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c574:	429a      	cmp	r2, r3
 800c576:	d207      	bcs.n	800c588 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c578:	4b0b      	ldr	r3, [pc, #44]	; (800c5a8 <prvAddNewTaskToReadyList+0xd0>)
 800c57a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c57e:	601a      	str	r2, [r3, #0]
 800c580:	f3bf 8f4f 	dsb	sy
 800c584:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c588:	bf00      	nop
 800c58a:	3708      	adds	r7, #8
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bd80      	pop	{r7, pc}
 800c590:	20000920 	.word	0x20000920
 800c594:	20000820 	.word	0x20000820
 800c598:	2000092c 	.word	0x2000092c
 800c59c:	2000093c 	.word	0x2000093c
 800c5a0:	20000928 	.word	0x20000928
 800c5a4:	20000824 	.word	0x20000824
 800c5a8:	e000ed04 	.word	0xe000ed04

0800c5ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b084      	sub	sp, #16
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d017      	beq.n	800c5ee <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c5be:	4b13      	ldr	r3, [pc, #76]	; (800c60c <vTaskDelay+0x60>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d00a      	beq.n	800c5dc <vTaskDelay+0x30>
	__asm volatile
 800c5c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ca:	f383 8811 	msr	BASEPRI, r3
 800c5ce:	f3bf 8f6f 	isb	sy
 800c5d2:	f3bf 8f4f 	dsb	sy
 800c5d6:	60bb      	str	r3, [r7, #8]
}
 800c5d8:	bf00      	nop
 800c5da:	e7fe      	b.n	800c5da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c5dc:	f000 f88a 	bl	800c6f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c5e0:	2100      	movs	r1, #0
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	f000 fd0e 	bl	800d004 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c5e8:	f000 f892 	bl	800c710 <xTaskResumeAll>
 800c5ec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d107      	bne.n	800c604 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c5f4:	4b06      	ldr	r3, [pc, #24]	; (800c610 <vTaskDelay+0x64>)
 800c5f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5fa:	601a      	str	r2, [r3, #0]
 800c5fc:	f3bf 8f4f 	dsb	sy
 800c600:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c604:	bf00      	nop
 800c606:	3710      	adds	r7, #16
 800c608:	46bd      	mov	sp, r7
 800c60a:	bd80      	pop	{r7, pc}
 800c60c:	20000948 	.word	0x20000948
 800c610:	e000ed04 	.word	0xe000ed04

0800c614 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b08a      	sub	sp, #40	; 0x28
 800c618:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c61a:	2300      	movs	r3, #0
 800c61c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c61e:	2300      	movs	r3, #0
 800c620:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c622:	463a      	mov	r2, r7
 800c624:	1d39      	adds	r1, r7, #4
 800c626:	f107 0308 	add.w	r3, r7, #8
 800c62a:	4618      	mov	r0, r3
 800c62c:	f7f4 faaa 	bl	8000b84 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c630:	6839      	ldr	r1, [r7, #0]
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	68ba      	ldr	r2, [r7, #8]
 800c636:	9202      	str	r2, [sp, #8]
 800c638:	9301      	str	r3, [sp, #4]
 800c63a:	2300      	movs	r3, #0
 800c63c:	9300      	str	r3, [sp, #0]
 800c63e:	2300      	movs	r3, #0
 800c640:	460a      	mov	r2, r1
 800c642:	4924      	ldr	r1, [pc, #144]	; (800c6d4 <vTaskStartScheduler+0xc0>)
 800c644:	4824      	ldr	r0, [pc, #144]	; (800c6d8 <vTaskStartScheduler+0xc4>)
 800c646:	f7ff fe07 	bl	800c258 <xTaskCreateStatic>
 800c64a:	4603      	mov	r3, r0
 800c64c:	4a23      	ldr	r2, [pc, #140]	; (800c6dc <vTaskStartScheduler+0xc8>)
 800c64e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c650:	4b22      	ldr	r3, [pc, #136]	; (800c6dc <vTaskStartScheduler+0xc8>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d002      	beq.n	800c65e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c658:	2301      	movs	r3, #1
 800c65a:	617b      	str	r3, [r7, #20]
 800c65c:	e001      	b.n	800c662 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c65e:	2300      	movs	r3, #0
 800c660:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c662:	697b      	ldr	r3, [r7, #20]
 800c664:	2b01      	cmp	r3, #1
 800c666:	d102      	bne.n	800c66e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c668:	f000 fd32 	bl	800d0d0 <xTimerCreateTimerTask>
 800c66c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c66e:	697b      	ldr	r3, [r7, #20]
 800c670:	2b01      	cmp	r3, #1
 800c672:	d11b      	bne.n	800c6ac <vTaskStartScheduler+0x98>
	__asm volatile
 800c674:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c678:	f383 8811 	msr	BASEPRI, r3
 800c67c:	f3bf 8f6f 	isb	sy
 800c680:	f3bf 8f4f 	dsb	sy
 800c684:	613b      	str	r3, [r7, #16]
}
 800c686:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c688:	4b15      	ldr	r3, [pc, #84]	; (800c6e0 <vTaskStartScheduler+0xcc>)
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	334c      	adds	r3, #76	; 0x4c
 800c68e:	4a15      	ldr	r2, [pc, #84]	; (800c6e4 <vTaskStartScheduler+0xd0>)
 800c690:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c692:	4b15      	ldr	r3, [pc, #84]	; (800c6e8 <vTaskStartScheduler+0xd4>)
 800c694:	f04f 32ff 	mov.w	r2, #4294967295
 800c698:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c69a:	4b14      	ldr	r3, [pc, #80]	; (800c6ec <vTaskStartScheduler+0xd8>)
 800c69c:	2201      	movs	r2, #1
 800c69e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c6a0:	4b13      	ldr	r3, [pc, #76]	; (800c6f0 <vTaskStartScheduler+0xdc>)
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c6a6:	f001 f96b 	bl	800d980 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c6aa:	e00e      	b.n	800c6ca <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c6ac:	697b      	ldr	r3, [r7, #20]
 800c6ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6b2:	d10a      	bne.n	800c6ca <vTaskStartScheduler+0xb6>
	__asm volatile
 800c6b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6b8:	f383 8811 	msr	BASEPRI, r3
 800c6bc:	f3bf 8f6f 	isb	sy
 800c6c0:	f3bf 8f4f 	dsb	sy
 800c6c4:	60fb      	str	r3, [r7, #12]
}
 800c6c6:	bf00      	nop
 800c6c8:	e7fe      	b.n	800c6c8 <vTaskStartScheduler+0xb4>
}
 800c6ca:	bf00      	nop
 800c6cc:	3718      	adds	r7, #24
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}
 800c6d2:	bf00      	nop
 800c6d4:	0800f1dc 	.word	0x0800f1dc
 800c6d8:	0800cd09 	.word	0x0800cd09
 800c6dc:	20000944 	.word	0x20000944
 800c6e0:	20000820 	.word	0x20000820
 800c6e4:	20000030 	.word	0x20000030
 800c6e8:	20000940 	.word	0x20000940
 800c6ec:	2000092c 	.word	0x2000092c
 800c6f0:	20000924 	.word	0x20000924

0800c6f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c6f4:	b480      	push	{r7}
 800c6f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c6f8:	4b04      	ldr	r3, [pc, #16]	; (800c70c <vTaskSuspendAll+0x18>)
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	3301      	adds	r3, #1
 800c6fe:	4a03      	ldr	r2, [pc, #12]	; (800c70c <vTaskSuspendAll+0x18>)
 800c700:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c702:	bf00      	nop
 800c704:	46bd      	mov	sp, r7
 800c706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70a:	4770      	bx	lr
 800c70c:	20000948 	.word	0x20000948

0800c710 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b084      	sub	sp, #16
 800c714:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c716:	2300      	movs	r3, #0
 800c718:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c71a:	2300      	movs	r3, #0
 800c71c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c71e:	4b41      	ldr	r3, [pc, #260]	; (800c824 <xTaskResumeAll+0x114>)
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d10a      	bne.n	800c73c <xTaskResumeAll+0x2c>
	__asm volatile
 800c726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c72a:	f383 8811 	msr	BASEPRI, r3
 800c72e:	f3bf 8f6f 	isb	sy
 800c732:	f3bf 8f4f 	dsb	sy
 800c736:	603b      	str	r3, [r7, #0]
}
 800c738:	bf00      	nop
 800c73a:	e7fe      	b.n	800c73a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c73c:	f001 f9c2 	bl	800dac4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c740:	4b38      	ldr	r3, [pc, #224]	; (800c824 <xTaskResumeAll+0x114>)
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	3b01      	subs	r3, #1
 800c746:	4a37      	ldr	r2, [pc, #220]	; (800c824 <xTaskResumeAll+0x114>)
 800c748:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c74a:	4b36      	ldr	r3, [pc, #216]	; (800c824 <xTaskResumeAll+0x114>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d161      	bne.n	800c816 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c752:	4b35      	ldr	r3, [pc, #212]	; (800c828 <xTaskResumeAll+0x118>)
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d05d      	beq.n	800c816 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c75a:	e02e      	b.n	800c7ba <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c75c:	4b33      	ldr	r3, [pc, #204]	; (800c82c <xTaskResumeAll+0x11c>)
 800c75e:	68db      	ldr	r3, [r3, #12]
 800c760:	68db      	ldr	r3, [r3, #12]
 800c762:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	3318      	adds	r3, #24
 800c768:	4618      	mov	r0, r3
 800c76a:	f7fe ffa9 	bl	800b6c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	3304      	adds	r3, #4
 800c772:	4618      	mov	r0, r3
 800c774:	f7fe ffa4 	bl	800b6c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c77c:	2201      	movs	r2, #1
 800c77e:	409a      	lsls	r2, r3
 800c780:	4b2b      	ldr	r3, [pc, #172]	; (800c830 <xTaskResumeAll+0x120>)
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	4313      	orrs	r3, r2
 800c786:	4a2a      	ldr	r2, [pc, #168]	; (800c830 <xTaskResumeAll+0x120>)
 800c788:	6013      	str	r3, [r2, #0]
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c78e:	4613      	mov	r3, r2
 800c790:	009b      	lsls	r3, r3, #2
 800c792:	4413      	add	r3, r2
 800c794:	009b      	lsls	r3, r3, #2
 800c796:	4a27      	ldr	r2, [pc, #156]	; (800c834 <xTaskResumeAll+0x124>)
 800c798:	441a      	add	r2, r3
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	3304      	adds	r3, #4
 800c79e:	4619      	mov	r1, r3
 800c7a0:	4610      	mov	r0, r2
 800c7a2:	f7fe ff30 	bl	800b606 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7aa:	4b23      	ldr	r3, [pc, #140]	; (800c838 <xTaskResumeAll+0x128>)
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7b0:	429a      	cmp	r2, r3
 800c7b2:	d302      	bcc.n	800c7ba <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800c7b4:	4b21      	ldr	r3, [pc, #132]	; (800c83c <xTaskResumeAll+0x12c>)
 800c7b6:	2201      	movs	r2, #1
 800c7b8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c7ba:	4b1c      	ldr	r3, [pc, #112]	; (800c82c <xTaskResumeAll+0x11c>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d1cc      	bne.n	800c75c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d001      	beq.n	800c7cc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c7c8:	f000 fb58 	bl	800ce7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c7cc:	4b1c      	ldr	r3, [pc, #112]	; (800c840 <xTaskResumeAll+0x130>)
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d010      	beq.n	800c7fa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c7d8:	f000 f846 	bl	800c868 <xTaskIncrementTick>
 800c7dc:	4603      	mov	r3, r0
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d002      	beq.n	800c7e8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800c7e2:	4b16      	ldr	r3, [pc, #88]	; (800c83c <xTaskResumeAll+0x12c>)
 800c7e4:	2201      	movs	r2, #1
 800c7e6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	3b01      	subs	r3, #1
 800c7ec:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d1f1      	bne.n	800c7d8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800c7f4:	4b12      	ldr	r3, [pc, #72]	; (800c840 <xTaskResumeAll+0x130>)
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c7fa:	4b10      	ldr	r3, [pc, #64]	; (800c83c <xTaskResumeAll+0x12c>)
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d009      	beq.n	800c816 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c802:	2301      	movs	r3, #1
 800c804:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c806:	4b0f      	ldr	r3, [pc, #60]	; (800c844 <xTaskResumeAll+0x134>)
 800c808:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c80c:	601a      	str	r2, [r3, #0]
 800c80e:	f3bf 8f4f 	dsb	sy
 800c812:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c816:	f001 f985 	bl	800db24 <vPortExitCritical>

	return xAlreadyYielded;
 800c81a:	68bb      	ldr	r3, [r7, #8]
}
 800c81c:	4618      	mov	r0, r3
 800c81e:	3710      	adds	r7, #16
 800c820:	46bd      	mov	sp, r7
 800c822:	bd80      	pop	{r7, pc}
 800c824:	20000948 	.word	0x20000948
 800c828:	20000920 	.word	0x20000920
 800c82c:	200008e0 	.word	0x200008e0
 800c830:	20000928 	.word	0x20000928
 800c834:	20000824 	.word	0x20000824
 800c838:	20000820 	.word	0x20000820
 800c83c:	20000934 	.word	0x20000934
 800c840:	20000930 	.word	0x20000930
 800c844:	e000ed04 	.word	0xe000ed04

0800c848 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c848:	b480      	push	{r7}
 800c84a:	b083      	sub	sp, #12
 800c84c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c84e:	4b05      	ldr	r3, [pc, #20]	; (800c864 <xTaskGetTickCount+0x1c>)
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c854:	687b      	ldr	r3, [r7, #4]
}
 800c856:	4618      	mov	r0, r3
 800c858:	370c      	adds	r7, #12
 800c85a:	46bd      	mov	sp, r7
 800c85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c860:	4770      	bx	lr
 800c862:	bf00      	nop
 800c864:	20000924 	.word	0x20000924

0800c868 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b086      	sub	sp, #24
 800c86c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c86e:	2300      	movs	r3, #0
 800c870:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c872:	4b4e      	ldr	r3, [pc, #312]	; (800c9ac <xTaskIncrementTick+0x144>)
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	2b00      	cmp	r3, #0
 800c878:	f040 808e 	bne.w	800c998 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c87c:	4b4c      	ldr	r3, [pc, #304]	; (800c9b0 <xTaskIncrementTick+0x148>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	3301      	adds	r3, #1
 800c882:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c884:	4a4a      	ldr	r2, [pc, #296]	; (800c9b0 <xTaskIncrementTick+0x148>)
 800c886:	693b      	ldr	r3, [r7, #16]
 800c888:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c88a:	693b      	ldr	r3, [r7, #16]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d120      	bne.n	800c8d2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c890:	4b48      	ldr	r3, [pc, #288]	; (800c9b4 <xTaskIncrementTick+0x14c>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d00a      	beq.n	800c8b0 <xTaskIncrementTick+0x48>
	__asm volatile
 800c89a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c89e:	f383 8811 	msr	BASEPRI, r3
 800c8a2:	f3bf 8f6f 	isb	sy
 800c8a6:	f3bf 8f4f 	dsb	sy
 800c8aa:	603b      	str	r3, [r7, #0]
}
 800c8ac:	bf00      	nop
 800c8ae:	e7fe      	b.n	800c8ae <xTaskIncrementTick+0x46>
 800c8b0:	4b40      	ldr	r3, [pc, #256]	; (800c9b4 <xTaskIncrementTick+0x14c>)
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	60fb      	str	r3, [r7, #12]
 800c8b6:	4b40      	ldr	r3, [pc, #256]	; (800c9b8 <xTaskIncrementTick+0x150>)
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	4a3e      	ldr	r2, [pc, #248]	; (800c9b4 <xTaskIncrementTick+0x14c>)
 800c8bc:	6013      	str	r3, [r2, #0]
 800c8be:	4a3e      	ldr	r2, [pc, #248]	; (800c9b8 <xTaskIncrementTick+0x150>)
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	6013      	str	r3, [r2, #0]
 800c8c4:	4b3d      	ldr	r3, [pc, #244]	; (800c9bc <xTaskIncrementTick+0x154>)
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	3301      	adds	r3, #1
 800c8ca:	4a3c      	ldr	r2, [pc, #240]	; (800c9bc <xTaskIncrementTick+0x154>)
 800c8cc:	6013      	str	r3, [r2, #0]
 800c8ce:	f000 fad5 	bl	800ce7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c8d2:	4b3b      	ldr	r3, [pc, #236]	; (800c9c0 <xTaskIncrementTick+0x158>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	693a      	ldr	r2, [r7, #16]
 800c8d8:	429a      	cmp	r2, r3
 800c8da:	d348      	bcc.n	800c96e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c8dc:	4b35      	ldr	r3, [pc, #212]	; (800c9b4 <xTaskIncrementTick+0x14c>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d104      	bne.n	800c8f0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c8e6:	4b36      	ldr	r3, [pc, #216]	; (800c9c0 <xTaskIncrementTick+0x158>)
 800c8e8:	f04f 32ff 	mov.w	r2, #4294967295
 800c8ec:	601a      	str	r2, [r3, #0]
					break;
 800c8ee:	e03e      	b.n	800c96e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c8f0:	4b30      	ldr	r3, [pc, #192]	; (800c9b4 <xTaskIncrementTick+0x14c>)
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	68db      	ldr	r3, [r3, #12]
 800c8f6:	68db      	ldr	r3, [r3, #12]
 800c8f8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c8fa:	68bb      	ldr	r3, [r7, #8]
 800c8fc:	685b      	ldr	r3, [r3, #4]
 800c8fe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c900:	693a      	ldr	r2, [r7, #16]
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	429a      	cmp	r2, r3
 800c906:	d203      	bcs.n	800c910 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c908:	4a2d      	ldr	r2, [pc, #180]	; (800c9c0 <xTaskIncrementTick+0x158>)
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c90e:	e02e      	b.n	800c96e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c910:	68bb      	ldr	r3, [r7, #8]
 800c912:	3304      	adds	r3, #4
 800c914:	4618      	mov	r0, r3
 800c916:	f7fe fed3 	bl	800b6c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c91a:	68bb      	ldr	r3, [r7, #8]
 800c91c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d004      	beq.n	800c92c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c922:	68bb      	ldr	r3, [r7, #8]
 800c924:	3318      	adds	r3, #24
 800c926:	4618      	mov	r0, r3
 800c928:	f7fe feca 	bl	800b6c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c930:	2201      	movs	r2, #1
 800c932:	409a      	lsls	r2, r3
 800c934:	4b23      	ldr	r3, [pc, #140]	; (800c9c4 <xTaskIncrementTick+0x15c>)
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	4313      	orrs	r3, r2
 800c93a:	4a22      	ldr	r2, [pc, #136]	; (800c9c4 <xTaskIncrementTick+0x15c>)
 800c93c:	6013      	str	r3, [r2, #0]
 800c93e:	68bb      	ldr	r3, [r7, #8]
 800c940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c942:	4613      	mov	r3, r2
 800c944:	009b      	lsls	r3, r3, #2
 800c946:	4413      	add	r3, r2
 800c948:	009b      	lsls	r3, r3, #2
 800c94a:	4a1f      	ldr	r2, [pc, #124]	; (800c9c8 <xTaskIncrementTick+0x160>)
 800c94c:	441a      	add	r2, r3
 800c94e:	68bb      	ldr	r3, [r7, #8]
 800c950:	3304      	adds	r3, #4
 800c952:	4619      	mov	r1, r3
 800c954:	4610      	mov	r0, r2
 800c956:	f7fe fe56 	bl	800b606 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c95a:	68bb      	ldr	r3, [r7, #8]
 800c95c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c95e:	4b1b      	ldr	r3, [pc, #108]	; (800c9cc <xTaskIncrementTick+0x164>)
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c964:	429a      	cmp	r2, r3
 800c966:	d3b9      	bcc.n	800c8dc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c968:	2301      	movs	r3, #1
 800c96a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c96c:	e7b6      	b.n	800c8dc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c96e:	4b17      	ldr	r3, [pc, #92]	; (800c9cc <xTaskIncrementTick+0x164>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c974:	4914      	ldr	r1, [pc, #80]	; (800c9c8 <xTaskIncrementTick+0x160>)
 800c976:	4613      	mov	r3, r2
 800c978:	009b      	lsls	r3, r3, #2
 800c97a:	4413      	add	r3, r2
 800c97c:	009b      	lsls	r3, r3, #2
 800c97e:	440b      	add	r3, r1
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	2b01      	cmp	r3, #1
 800c984:	d901      	bls.n	800c98a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800c986:	2301      	movs	r3, #1
 800c988:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c98a:	4b11      	ldr	r3, [pc, #68]	; (800c9d0 <xTaskIncrementTick+0x168>)
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d007      	beq.n	800c9a2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800c992:	2301      	movs	r3, #1
 800c994:	617b      	str	r3, [r7, #20]
 800c996:	e004      	b.n	800c9a2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c998:	4b0e      	ldr	r3, [pc, #56]	; (800c9d4 <xTaskIncrementTick+0x16c>)
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	3301      	adds	r3, #1
 800c99e:	4a0d      	ldr	r2, [pc, #52]	; (800c9d4 <xTaskIncrementTick+0x16c>)
 800c9a0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c9a2:	697b      	ldr	r3, [r7, #20]
}
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	3718      	adds	r7, #24
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	bd80      	pop	{r7, pc}
 800c9ac:	20000948 	.word	0x20000948
 800c9b0:	20000924 	.word	0x20000924
 800c9b4:	200008d8 	.word	0x200008d8
 800c9b8:	200008dc 	.word	0x200008dc
 800c9bc:	20000938 	.word	0x20000938
 800c9c0:	20000940 	.word	0x20000940
 800c9c4:	20000928 	.word	0x20000928
 800c9c8:	20000824 	.word	0x20000824
 800c9cc:	20000820 	.word	0x20000820
 800c9d0:	20000934 	.word	0x20000934
 800c9d4:	20000930 	.word	0x20000930

0800c9d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c9d8:	b480      	push	{r7}
 800c9da:	b087      	sub	sp, #28
 800c9dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c9de:	4b29      	ldr	r3, [pc, #164]	; (800ca84 <vTaskSwitchContext+0xac>)
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d003      	beq.n	800c9ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c9e6:	4b28      	ldr	r3, [pc, #160]	; (800ca88 <vTaskSwitchContext+0xb0>)
 800c9e8:	2201      	movs	r2, #1
 800c9ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c9ec:	e044      	b.n	800ca78 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800c9ee:	4b26      	ldr	r3, [pc, #152]	; (800ca88 <vTaskSwitchContext+0xb0>)
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9f4:	4b25      	ldr	r3, [pc, #148]	; (800ca8c <vTaskSwitchContext+0xb4>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	fab3 f383 	clz	r3, r3
 800ca00:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ca02:	7afb      	ldrb	r3, [r7, #11]
 800ca04:	f1c3 031f 	rsb	r3, r3, #31
 800ca08:	617b      	str	r3, [r7, #20]
 800ca0a:	4921      	ldr	r1, [pc, #132]	; (800ca90 <vTaskSwitchContext+0xb8>)
 800ca0c:	697a      	ldr	r2, [r7, #20]
 800ca0e:	4613      	mov	r3, r2
 800ca10:	009b      	lsls	r3, r3, #2
 800ca12:	4413      	add	r3, r2
 800ca14:	009b      	lsls	r3, r3, #2
 800ca16:	440b      	add	r3, r1
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d10a      	bne.n	800ca34 <vTaskSwitchContext+0x5c>
	__asm volatile
 800ca1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca22:	f383 8811 	msr	BASEPRI, r3
 800ca26:	f3bf 8f6f 	isb	sy
 800ca2a:	f3bf 8f4f 	dsb	sy
 800ca2e:	607b      	str	r3, [r7, #4]
}
 800ca30:	bf00      	nop
 800ca32:	e7fe      	b.n	800ca32 <vTaskSwitchContext+0x5a>
 800ca34:	697a      	ldr	r2, [r7, #20]
 800ca36:	4613      	mov	r3, r2
 800ca38:	009b      	lsls	r3, r3, #2
 800ca3a:	4413      	add	r3, r2
 800ca3c:	009b      	lsls	r3, r3, #2
 800ca3e:	4a14      	ldr	r2, [pc, #80]	; (800ca90 <vTaskSwitchContext+0xb8>)
 800ca40:	4413      	add	r3, r2
 800ca42:	613b      	str	r3, [r7, #16]
 800ca44:	693b      	ldr	r3, [r7, #16]
 800ca46:	685b      	ldr	r3, [r3, #4]
 800ca48:	685a      	ldr	r2, [r3, #4]
 800ca4a:	693b      	ldr	r3, [r7, #16]
 800ca4c:	605a      	str	r2, [r3, #4]
 800ca4e:	693b      	ldr	r3, [r7, #16]
 800ca50:	685a      	ldr	r2, [r3, #4]
 800ca52:	693b      	ldr	r3, [r7, #16]
 800ca54:	3308      	adds	r3, #8
 800ca56:	429a      	cmp	r2, r3
 800ca58:	d104      	bne.n	800ca64 <vTaskSwitchContext+0x8c>
 800ca5a:	693b      	ldr	r3, [r7, #16]
 800ca5c:	685b      	ldr	r3, [r3, #4]
 800ca5e:	685a      	ldr	r2, [r3, #4]
 800ca60:	693b      	ldr	r3, [r7, #16]
 800ca62:	605a      	str	r2, [r3, #4]
 800ca64:	693b      	ldr	r3, [r7, #16]
 800ca66:	685b      	ldr	r3, [r3, #4]
 800ca68:	68db      	ldr	r3, [r3, #12]
 800ca6a:	4a0a      	ldr	r2, [pc, #40]	; (800ca94 <vTaskSwitchContext+0xbc>)
 800ca6c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ca6e:	4b09      	ldr	r3, [pc, #36]	; (800ca94 <vTaskSwitchContext+0xbc>)
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	334c      	adds	r3, #76	; 0x4c
 800ca74:	4a08      	ldr	r2, [pc, #32]	; (800ca98 <vTaskSwitchContext+0xc0>)
 800ca76:	6013      	str	r3, [r2, #0]
}
 800ca78:	bf00      	nop
 800ca7a:	371c      	adds	r7, #28
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca82:	4770      	bx	lr
 800ca84:	20000948 	.word	0x20000948
 800ca88:	20000934 	.word	0x20000934
 800ca8c:	20000928 	.word	0x20000928
 800ca90:	20000824 	.word	0x20000824
 800ca94:	20000820 	.word	0x20000820
 800ca98:	20000030 	.word	0x20000030

0800ca9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b084      	sub	sp, #16
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
 800caa4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d10a      	bne.n	800cac2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800caac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cab0:	f383 8811 	msr	BASEPRI, r3
 800cab4:	f3bf 8f6f 	isb	sy
 800cab8:	f3bf 8f4f 	dsb	sy
 800cabc:	60fb      	str	r3, [r7, #12]
}
 800cabe:	bf00      	nop
 800cac0:	e7fe      	b.n	800cac0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cac2:	4b07      	ldr	r3, [pc, #28]	; (800cae0 <vTaskPlaceOnEventList+0x44>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	3318      	adds	r3, #24
 800cac8:	4619      	mov	r1, r3
 800caca:	6878      	ldr	r0, [r7, #4]
 800cacc:	f7fe fdbf 	bl	800b64e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cad0:	2101      	movs	r1, #1
 800cad2:	6838      	ldr	r0, [r7, #0]
 800cad4:	f000 fa96 	bl	800d004 <prvAddCurrentTaskToDelayedList>
}
 800cad8:	bf00      	nop
 800cada:	3710      	adds	r7, #16
 800cadc:	46bd      	mov	sp, r7
 800cade:	bd80      	pop	{r7, pc}
 800cae0:	20000820 	.word	0x20000820

0800cae4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b086      	sub	sp, #24
 800cae8:	af00      	add	r7, sp, #0
 800caea:	60f8      	str	r0, [r7, #12]
 800caec:	60b9      	str	r1, [r7, #8]
 800caee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d10a      	bne.n	800cb0c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800caf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cafa:	f383 8811 	msr	BASEPRI, r3
 800cafe:	f3bf 8f6f 	isb	sy
 800cb02:	f3bf 8f4f 	dsb	sy
 800cb06:	617b      	str	r3, [r7, #20]
}
 800cb08:	bf00      	nop
 800cb0a:	e7fe      	b.n	800cb0a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cb0c:	4b0a      	ldr	r3, [pc, #40]	; (800cb38 <vTaskPlaceOnEventListRestricted+0x54>)
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	3318      	adds	r3, #24
 800cb12:	4619      	mov	r1, r3
 800cb14:	68f8      	ldr	r0, [r7, #12]
 800cb16:	f7fe fd76 	bl	800b606 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d002      	beq.n	800cb26 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800cb20:	f04f 33ff 	mov.w	r3, #4294967295
 800cb24:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cb26:	6879      	ldr	r1, [r7, #4]
 800cb28:	68b8      	ldr	r0, [r7, #8]
 800cb2a:	f000 fa6b 	bl	800d004 <prvAddCurrentTaskToDelayedList>
	}
 800cb2e:	bf00      	nop
 800cb30:	3718      	adds	r7, #24
 800cb32:	46bd      	mov	sp, r7
 800cb34:	bd80      	pop	{r7, pc}
 800cb36:	bf00      	nop
 800cb38:	20000820 	.word	0x20000820

0800cb3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b086      	sub	sp, #24
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	68db      	ldr	r3, [r3, #12]
 800cb48:	68db      	ldr	r3, [r3, #12]
 800cb4a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cb4c:	693b      	ldr	r3, [r7, #16]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d10a      	bne.n	800cb68 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800cb52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb56:	f383 8811 	msr	BASEPRI, r3
 800cb5a:	f3bf 8f6f 	isb	sy
 800cb5e:	f3bf 8f4f 	dsb	sy
 800cb62:	60fb      	str	r3, [r7, #12]
}
 800cb64:	bf00      	nop
 800cb66:	e7fe      	b.n	800cb66 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cb68:	693b      	ldr	r3, [r7, #16]
 800cb6a:	3318      	adds	r3, #24
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	f7fe fda7 	bl	800b6c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb72:	4b1d      	ldr	r3, [pc, #116]	; (800cbe8 <xTaskRemoveFromEventList+0xac>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d11c      	bne.n	800cbb4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cb7a:	693b      	ldr	r3, [r7, #16]
 800cb7c:	3304      	adds	r3, #4
 800cb7e:	4618      	mov	r0, r3
 800cb80:	f7fe fd9e 	bl	800b6c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cb84:	693b      	ldr	r3, [r7, #16]
 800cb86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb88:	2201      	movs	r2, #1
 800cb8a:	409a      	lsls	r2, r3
 800cb8c:	4b17      	ldr	r3, [pc, #92]	; (800cbec <xTaskRemoveFromEventList+0xb0>)
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	4313      	orrs	r3, r2
 800cb92:	4a16      	ldr	r2, [pc, #88]	; (800cbec <xTaskRemoveFromEventList+0xb0>)
 800cb94:	6013      	str	r3, [r2, #0]
 800cb96:	693b      	ldr	r3, [r7, #16]
 800cb98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb9a:	4613      	mov	r3, r2
 800cb9c:	009b      	lsls	r3, r3, #2
 800cb9e:	4413      	add	r3, r2
 800cba0:	009b      	lsls	r3, r3, #2
 800cba2:	4a13      	ldr	r2, [pc, #76]	; (800cbf0 <xTaskRemoveFromEventList+0xb4>)
 800cba4:	441a      	add	r2, r3
 800cba6:	693b      	ldr	r3, [r7, #16]
 800cba8:	3304      	adds	r3, #4
 800cbaa:	4619      	mov	r1, r3
 800cbac:	4610      	mov	r0, r2
 800cbae:	f7fe fd2a 	bl	800b606 <vListInsertEnd>
 800cbb2:	e005      	b.n	800cbc0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cbb4:	693b      	ldr	r3, [r7, #16]
 800cbb6:	3318      	adds	r3, #24
 800cbb8:	4619      	mov	r1, r3
 800cbba:	480e      	ldr	r0, [pc, #56]	; (800cbf4 <xTaskRemoveFromEventList+0xb8>)
 800cbbc:	f7fe fd23 	bl	800b606 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cbc0:	693b      	ldr	r3, [r7, #16]
 800cbc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbc4:	4b0c      	ldr	r3, [pc, #48]	; (800cbf8 <xTaskRemoveFromEventList+0xbc>)
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d905      	bls.n	800cbda <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cbce:	2301      	movs	r3, #1
 800cbd0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cbd2:	4b0a      	ldr	r3, [pc, #40]	; (800cbfc <xTaskRemoveFromEventList+0xc0>)
 800cbd4:	2201      	movs	r2, #1
 800cbd6:	601a      	str	r2, [r3, #0]
 800cbd8:	e001      	b.n	800cbde <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800cbda:	2300      	movs	r3, #0
 800cbdc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cbde:	697b      	ldr	r3, [r7, #20]
}
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	3718      	adds	r7, #24
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bd80      	pop	{r7, pc}
 800cbe8:	20000948 	.word	0x20000948
 800cbec:	20000928 	.word	0x20000928
 800cbf0:	20000824 	.word	0x20000824
 800cbf4:	200008e0 	.word	0x200008e0
 800cbf8:	20000820 	.word	0x20000820
 800cbfc:	20000934 	.word	0x20000934

0800cc00 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cc00:	b480      	push	{r7}
 800cc02:	b083      	sub	sp, #12
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cc08:	4b06      	ldr	r3, [pc, #24]	; (800cc24 <vTaskInternalSetTimeOutState+0x24>)
 800cc0a:	681a      	ldr	r2, [r3, #0]
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cc10:	4b05      	ldr	r3, [pc, #20]	; (800cc28 <vTaskInternalSetTimeOutState+0x28>)
 800cc12:	681a      	ldr	r2, [r3, #0]
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	605a      	str	r2, [r3, #4]
}
 800cc18:	bf00      	nop
 800cc1a:	370c      	adds	r7, #12
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc22:	4770      	bx	lr
 800cc24:	20000938 	.word	0x20000938
 800cc28:	20000924 	.word	0x20000924

0800cc2c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b088      	sub	sp, #32
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
 800cc34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d10a      	bne.n	800cc52 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800cc3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc40:	f383 8811 	msr	BASEPRI, r3
 800cc44:	f3bf 8f6f 	isb	sy
 800cc48:	f3bf 8f4f 	dsb	sy
 800cc4c:	613b      	str	r3, [r7, #16]
}
 800cc4e:	bf00      	nop
 800cc50:	e7fe      	b.n	800cc50 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d10a      	bne.n	800cc6e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800cc58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc5c:	f383 8811 	msr	BASEPRI, r3
 800cc60:	f3bf 8f6f 	isb	sy
 800cc64:	f3bf 8f4f 	dsb	sy
 800cc68:	60fb      	str	r3, [r7, #12]
}
 800cc6a:	bf00      	nop
 800cc6c:	e7fe      	b.n	800cc6c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800cc6e:	f000 ff29 	bl	800dac4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cc72:	4b1d      	ldr	r3, [pc, #116]	; (800cce8 <xTaskCheckForTimeOut+0xbc>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	685b      	ldr	r3, [r3, #4]
 800cc7c:	69ba      	ldr	r2, [r7, #24]
 800cc7e:	1ad3      	subs	r3, r2, r3
 800cc80:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cc82:	683b      	ldr	r3, [r7, #0]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc8a:	d102      	bne.n	800cc92 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	61fb      	str	r3, [r7, #28]
 800cc90:	e023      	b.n	800ccda <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681a      	ldr	r2, [r3, #0]
 800cc96:	4b15      	ldr	r3, [pc, #84]	; (800ccec <xTaskCheckForTimeOut+0xc0>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	429a      	cmp	r2, r3
 800cc9c:	d007      	beq.n	800ccae <xTaskCheckForTimeOut+0x82>
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	685b      	ldr	r3, [r3, #4]
 800cca2:	69ba      	ldr	r2, [r7, #24]
 800cca4:	429a      	cmp	r2, r3
 800cca6:	d302      	bcc.n	800ccae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cca8:	2301      	movs	r3, #1
 800ccaa:	61fb      	str	r3, [r7, #28]
 800ccac:	e015      	b.n	800ccda <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ccae:	683b      	ldr	r3, [r7, #0]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	697a      	ldr	r2, [r7, #20]
 800ccb4:	429a      	cmp	r2, r3
 800ccb6:	d20b      	bcs.n	800ccd0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	681a      	ldr	r2, [r3, #0]
 800ccbc:	697b      	ldr	r3, [r7, #20]
 800ccbe:	1ad2      	subs	r2, r2, r3
 800ccc0:	683b      	ldr	r3, [r7, #0]
 800ccc2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ccc4:	6878      	ldr	r0, [r7, #4]
 800ccc6:	f7ff ff9b 	bl	800cc00 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ccca:	2300      	movs	r3, #0
 800cccc:	61fb      	str	r3, [r7, #28]
 800ccce:	e004      	b.n	800ccda <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ccd0:	683b      	ldr	r3, [r7, #0]
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ccd6:	2301      	movs	r3, #1
 800ccd8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ccda:	f000 ff23 	bl	800db24 <vPortExitCritical>

	return xReturn;
 800ccde:	69fb      	ldr	r3, [r7, #28]
}
 800cce0:	4618      	mov	r0, r3
 800cce2:	3720      	adds	r7, #32
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bd80      	pop	{r7, pc}
 800cce8:	20000924 	.word	0x20000924
 800ccec:	20000938 	.word	0x20000938

0800ccf0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ccf0:	b480      	push	{r7}
 800ccf2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ccf4:	4b03      	ldr	r3, [pc, #12]	; (800cd04 <vTaskMissedYield+0x14>)
 800ccf6:	2201      	movs	r2, #1
 800ccf8:	601a      	str	r2, [r3, #0]
}
 800ccfa:	bf00      	nop
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd02:	4770      	bx	lr
 800cd04:	20000934 	.word	0x20000934

0800cd08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b082      	sub	sp, #8
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cd10:	f000 f852 	bl	800cdb8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cd14:	4b06      	ldr	r3, [pc, #24]	; (800cd30 <prvIdleTask+0x28>)
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	2b01      	cmp	r3, #1
 800cd1a:	d9f9      	bls.n	800cd10 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cd1c:	4b05      	ldr	r3, [pc, #20]	; (800cd34 <prvIdleTask+0x2c>)
 800cd1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd22:	601a      	str	r2, [r3, #0]
 800cd24:	f3bf 8f4f 	dsb	sy
 800cd28:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cd2c:	e7f0      	b.n	800cd10 <prvIdleTask+0x8>
 800cd2e:	bf00      	nop
 800cd30:	20000824 	.word	0x20000824
 800cd34:	e000ed04 	.word	0xe000ed04

0800cd38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b082      	sub	sp, #8
 800cd3c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cd3e:	2300      	movs	r3, #0
 800cd40:	607b      	str	r3, [r7, #4]
 800cd42:	e00c      	b.n	800cd5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cd44:	687a      	ldr	r2, [r7, #4]
 800cd46:	4613      	mov	r3, r2
 800cd48:	009b      	lsls	r3, r3, #2
 800cd4a:	4413      	add	r3, r2
 800cd4c:	009b      	lsls	r3, r3, #2
 800cd4e:	4a12      	ldr	r2, [pc, #72]	; (800cd98 <prvInitialiseTaskLists+0x60>)
 800cd50:	4413      	add	r3, r2
 800cd52:	4618      	mov	r0, r3
 800cd54:	f7fe fc2a 	bl	800b5ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	3301      	adds	r3, #1
 800cd5c:	607b      	str	r3, [r7, #4]
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	2b06      	cmp	r3, #6
 800cd62:	d9ef      	bls.n	800cd44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cd64:	480d      	ldr	r0, [pc, #52]	; (800cd9c <prvInitialiseTaskLists+0x64>)
 800cd66:	f7fe fc21 	bl	800b5ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cd6a:	480d      	ldr	r0, [pc, #52]	; (800cda0 <prvInitialiseTaskLists+0x68>)
 800cd6c:	f7fe fc1e 	bl	800b5ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cd70:	480c      	ldr	r0, [pc, #48]	; (800cda4 <prvInitialiseTaskLists+0x6c>)
 800cd72:	f7fe fc1b 	bl	800b5ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cd76:	480c      	ldr	r0, [pc, #48]	; (800cda8 <prvInitialiseTaskLists+0x70>)
 800cd78:	f7fe fc18 	bl	800b5ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cd7c:	480b      	ldr	r0, [pc, #44]	; (800cdac <prvInitialiseTaskLists+0x74>)
 800cd7e:	f7fe fc15 	bl	800b5ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cd82:	4b0b      	ldr	r3, [pc, #44]	; (800cdb0 <prvInitialiseTaskLists+0x78>)
 800cd84:	4a05      	ldr	r2, [pc, #20]	; (800cd9c <prvInitialiseTaskLists+0x64>)
 800cd86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cd88:	4b0a      	ldr	r3, [pc, #40]	; (800cdb4 <prvInitialiseTaskLists+0x7c>)
 800cd8a:	4a05      	ldr	r2, [pc, #20]	; (800cda0 <prvInitialiseTaskLists+0x68>)
 800cd8c:	601a      	str	r2, [r3, #0]
}
 800cd8e:	bf00      	nop
 800cd90:	3708      	adds	r7, #8
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bd80      	pop	{r7, pc}
 800cd96:	bf00      	nop
 800cd98:	20000824 	.word	0x20000824
 800cd9c:	200008b0 	.word	0x200008b0
 800cda0:	200008c4 	.word	0x200008c4
 800cda4:	200008e0 	.word	0x200008e0
 800cda8:	200008f4 	.word	0x200008f4
 800cdac:	2000090c 	.word	0x2000090c
 800cdb0:	200008d8 	.word	0x200008d8
 800cdb4:	200008dc 	.word	0x200008dc

0800cdb8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b082      	sub	sp, #8
 800cdbc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cdbe:	e019      	b.n	800cdf4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cdc0:	f000 fe80 	bl	800dac4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cdc4:	4b10      	ldr	r3, [pc, #64]	; (800ce08 <prvCheckTasksWaitingTermination+0x50>)
 800cdc6:	68db      	ldr	r3, [r3, #12]
 800cdc8:	68db      	ldr	r3, [r3, #12]
 800cdca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	3304      	adds	r3, #4
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	f7fe fc75 	bl	800b6c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cdd6:	4b0d      	ldr	r3, [pc, #52]	; (800ce0c <prvCheckTasksWaitingTermination+0x54>)
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	3b01      	subs	r3, #1
 800cddc:	4a0b      	ldr	r2, [pc, #44]	; (800ce0c <prvCheckTasksWaitingTermination+0x54>)
 800cdde:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cde0:	4b0b      	ldr	r3, [pc, #44]	; (800ce10 <prvCheckTasksWaitingTermination+0x58>)
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	3b01      	subs	r3, #1
 800cde6:	4a0a      	ldr	r2, [pc, #40]	; (800ce10 <prvCheckTasksWaitingTermination+0x58>)
 800cde8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cdea:	f000 fe9b 	bl	800db24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cdee:	6878      	ldr	r0, [r7, #4]
 800cdf0:	f000 f810 	bl	800ce14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cdf4:	4b06      	ldr	r3, [pc, #24]	; (800ce10 <prvCheckTasksWaitingTermination+0x58>)
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d1e1      	bne.n	800cdc0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cdfc:	bf00      	nop
 800cdfe:	bf00      	nop
 800ce00:	3708      	adds	r7, #8
 800ce02:	46bd      	mov	sp, r7
 800ce04:	bd80      	pop	{r7, pc}
 800ce06:	bf00      	nop
 800ce08:	200008f4 	.word	0x200008f4
 800ce0c:	20000920 	.word	0x20000920
 800ce10:	20000908 	.word	0x20000908

0800ce14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b084      	sub	sp, #16
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	334c      	adds	r3, #76	; 0x4c
 800ce20:	4618      	mov	r0, r3
 800ce22:	f001 fd67 	bl	800e8f4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d108      	bne.n	800ce42 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce34:	4618      	mov	r0, r3
 800ce36:	f001 f833 	bl	800dea0 <vPortFree>
				vPortFree( pxTCB );
 800ce3a:	6878      	ldr	r0, [r7, #4]
 800ce3c:	f001 f830 	bl	800dea0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ce40:	e018      	b.n	800ce74 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800ce48:	2b01      	cmp	r3, #1
 800ce4a:	d103      	bne.n	800ce54 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ce4c:	6878      	ldr	r0, [r7, #4]
 800ce4e:	f001 f827 	bl	800dea0 <vPortFree>
	}
 800ce52:	e00f      	b.n	800ce74 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800ce5a:	2b02      	cmp	r3, #2
 800ce5c:	d00a      	beq.n	800ce74 <prvDeleteTCB+0x60>
	__asm volatile
 800ce5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce62:	f383 8811 	msr	BASEPRI, r3
 800ce66:	f3bf 8f6f 	isb	sy
 800ce6a:	f3bf 8f4f 	dsb	sy
 800ce6e:	60fb      	str	r3, [r7, #12]
}
 800ce70:	bf00      	nop
 800ce72:	e7fe      	b.n	800ce72 <prvDeleteTCB+0x5e>
	}
 800ce74:	bf00      	nop
 800ce76:	3710      	adds	r7, #16
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}

0800ce7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ce7c:	b480      	push	{r7}
 800ce7e:	b083      	sub	sp, #12
 800ce80:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ce82:	4b0c      	ldr	r3, [pc, #48]	; (800ceb4 <prvResetNextTaskUnblockTime+0x38>)
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d104      	bne.n	800ce96 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ce8c:	4b0a      	ldr	r3, [pc, #40]	; (800ceb8 <prvResetNextTaskUnblockTime+0x3c>)
 800ce8e:	f04f 32ff 	mov.w	r2, #4294967295
 800ce92:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ce94:	e008      	b.n	800cea8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce96:	4b07      	ldr	r3, [pc, #28]	; (800ceb4 <prvResetNextTaskUnblockTime+0x38>)
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	68db      	ldr	r3, [r3, #12]
 800ce9c:	68db      	ldr	r3, [r3, #12]
 800ce9e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	685b      	ldr	r3, [r3, #4]
 800cea4:	4a04      	ldr	r2, [pc, #16]	; (800ceb8 <prvResetNextTaskUnblockTime+0x3c>)
 800cea6:	6013      	str	r3, [r2, #0]
}
 800cea8:	bf00      	nop
 800ceaa:	370c      	adds	r7, #12
 800ceac:	46bd      	mov	sp, r7
 800ceae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb2:	4770      	bx	lr
 800ceb4:	200008d8 	.word	0x200008d8
 800ceb8:	20000940 	.word	0x20000940

0800cebc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cebc:	b480      	push	{r7}
 800cebe:	b083      	sub	sp, #12
 800cec0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cec2:	4b0b      	ldr	r3, [pc, #44]	; (800cef0 <xTaskGetSchedulerState+0x34>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d102      	bne.n	800ced0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ceca:	2301      	movs	r3, #1
 800cecc:	607b      	str	r3, [r7, #4]
 800cece:	e008      	b.n	800cee2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ced0:	4b08      	ldr	r3, [pc, #32]	; (800cef4 <xTaskGetSchedulerState+0x38>)
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d102      	bne.n	800cede <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ced8:	2302      	movs	r3, #2
 800ceda:	607b      	str	r3, [r7, #4]
 800cedc:	e001      	b.n	800cee2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cede:	2300      	movs	r3, #0
 800cee0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cee2:	687b      	ldr	r3, [r7, #4]
	}
 800cee4:	4618      	mov	r0, r3
 800cee6:	370c      	adds	r7, #12
 800cee8:	46bd      	mov	sp, r7
 800ceea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceee:	4770      	bx	lr
 800cef0:	2000092c 	.word	0x2000092c
 800cef4:	20000948 	.word	0x20000948

0800cef8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b086      	sub	sp, #24
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cf04:	2300      	movs	r3, #0
 800cf06:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d06e      	beq.n	800cfec <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cf0e:	4b3a      	ldr	r3, [pc, #232]	; (800cff8 <xTaskPriorityDisinherit+0x100>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	693a      	ldr	r2, [r7, #16]
 800cf14:	429a      	cmp	r2, r3
 800cf16:	d00a      	beq.n	800cf2e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800cf18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf1c:	f383 8811 	msr	BASEPRI, r3
 800cf20:	f3bf 8f6f 	isb	sy
 800cf24:	f3bf 8f4f 	dsb	sy
 800cf28:	60fb      	str	r3, [r7, #12]
}
 800cf2a:	bf00      	nop
 800cf2c:	e7fe      	b.n	800cf2c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cf2e:	693b      	ldr	r3, [r7, #16]
 800cf30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d10a      	bne.n	800cf4c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800cf36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf3a:	f383 8811 	msr	BASEPRI, r3
 800cf3e:	f3bf 8f6f 	isb	sy
 800cf42:	f3bf 8f4f 	dsb	sy
 800cf46:	60bb      	str	r3, [r7, #8]
}
 800cf48:	bf00      	nop
 800cf4a:	e7fe      	b.n	800cf4a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800cf4c:	693b      	ldr	r3, [r7, #16]
 800cf4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cf50:	1e5a      	subs	r2, r3, #1
 800cf52:	693b      	ldr	r3, [r7, #16]
 800cf54:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cf56:	693b      	ldr	r3, [r7, #16]
 800cf58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf5a:	693b      	ldr	r3, [r7, #16]
 800cf5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf5e:	429a      	cmp	r2, r3
 800cf60:	d044      	beq.n	800cfec <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cf62:	693b      	ldr	r3, [r7, #16]
 800cf64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d140      	bne.n	800cfec <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cf6a:	693b      	ldr	r3, [r7, #16]
 800cf6c:	3304      	adds	r3, #4
 800cf6e:	4618      	mov	r0, r3
 800cf70:	f7fe fba6 	bl	800b6c0 <uxListRemove>
 800cf74:	4603      	mov	r3, r0
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d115      	bne.n	800cfa6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800cf7a:	693b      	ldr	r3, [r7, #16]
 800cf7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf7e:	491f      	ldr	r1, [pc, #124]	; (800cffc <xTaskPriorityDisinherit+0x104>)
 800cf80:	4613      	mov	r3, r2
 800cf82:	009b      	lsls	r3, r3, #2
 800cf84:	4413      	add	r3, r2
 800cf86:	009b      	lsls	r3, r3, #2
 800cf88:	440b      	add	r3, r1
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d10a      	bne.n	800cfa6 <xTaskPriorityDisinherit+0xae>
 800cf90:	693b      	ldr	r3, [r7, #16]
 800cf92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf94:	2201      	movs	r2, #1
 800cf96:	fa02 f303 	lsl.w	r3, r2, r3
 800cf9a:	43da      	mvns	r2, r3
 800cf9c:	4b18      	ldr	r3, [pc, #96]	; (800d000 <xTaskPriorityDisinherit+0x108>)
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	4013      	ands	r3, r2
 800cfa2:	4a17      	ldr	r2, [pc, #92]	; (800d000 <xTaskPriorityDisinherit+0x108>)
 800cfa4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cfa6:	693b      	ldr	r3, [r7, #16]
 800cfa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cfaa:	693b      	ldr	r3, [r7, #16]
 800cfac:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cfae:	693b      	ldr	r3, [r7, #16]
 800cfb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfb2:	f1c3 0207 	rsb	r2, r3, #7
 800cfb6:	693b      	ldr	r3, [r7, #16]
 800cfb8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cfba:	693b      	ldr	r3, [r7, #16]
 800cfbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfbe:	2201      	movs	r2, #1
 800cfc0:	409a      	lsls	r2, r3
 800cfc2:	4b0f      	ldr	r3, [pc, #60]	; (800d000 <xTaskPriorityDisinherit+0x108>)
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	4313      	orrs	r3, r2
 800cfc8:	4a0d      	ldr	r2, [pc, #52]	; (800d000 <xTaskPriorityDisinherit+0x108>)
 800cfca:	6013      	str	r3, [r2, #0]
 800cfcc:	693b      	ldr	r3, [r7, #16]
 800cfce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfd0:	4613      	mov	r3, r2
 800cfd2:	009b      	lsls	r3, r3, #2
 800cfd4:	4413      	add	r3, r2
 800cfd6:	009b      	lsls	r3, r3, #2
 800cfd8:	4a08      	ldr	r2, [pc, #32]	; (800cffc <xTaskPriorityDisinherit+0x104>)
 800cfda:	441a      	add	r2, r3
 800cfdc:	693b      	ldr	r3, [r7, #16]
 800cfde:	3304      	adds	r3, #4
 800cfe0:	4619      	mov	r1, r3
 800cfe2:	4610      	mov	r0, r2
 800cfe4:	f7fe fb0f 	bl	800b606 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cfe8:	2301      	movs	r3, #1
 800cfea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cfec:	697b      	ldr	r3, [r7, #20]
	}
 800cfee:	4618      	mov	r0, r3
 800cff0:	3718      	adds	r7, #24
 800cff2:	46bd      	mov	sp, r7
 800cff4:	bd80      	pop	{r7, pc}
 800cff6:	bf00      	nop
 800cff8:	20000820 	.word	0x20000820
 800cffc:	20000824 	.word	0x20000824
 800d000:	20000928 	.word	0x20000928

0800d004 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b084      	sub	sp, #16
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
 800d00c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d00e:	4b29      	ldr	r3, [pc, #164]	; (800d0b4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d014:	4b28      	ldr	r3, [pc, #160]	; (800d0b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	3304      	adds	r3, #4
 800d01a:	4618      	mov	r0, r3
 800d01c:	f7fe fb50 	bl	800b6c0 <uxListRemove>
 800d020:	4603      	mov	r3, r0
 800d022:	2b00      	cmp	r3, #0
 800d024:	d10b      	bne.n	800d03e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d026:	4b24      	ldr	r3, [pc, #144]	; (800d0b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d02c:	2201      	movs	r2, #1
 800d02e:	fa02 f303 	lsl.w	r3, r2, r3
 800d032:	43da      	mvns	r2, r3
 800d034:	4b21      	ldr	r3, [pc, #132]	; (800d0bc <prvAddCurrentTaskToDelayedList+0xb8>)
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	4013      	ands	r3, r2
 800d03a:	4a20      	ldr	r2, [pc, #128]	; (800d0bc <prvAddCurrentTaskToDelayedList+0xb8>)
 800d03c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d044:	d10a      	bne.n	800d05c <prvAddCurrentTaskToDelayedList+0x58>
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d007      	beq.n	800d05c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d04c:	4b1a      	ldr	r3, [pc, #104]	; (800d0b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	3304      	adds	r3, #4
 800d052:	4619      	mov	r1, r3
 800d054:	481a      	ldr	r0, [pc, #104]	; (800d0c0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d056:	f7fe fad6 	bl	800b606 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d05a:	e026      	b.n	800d0aa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d05c:	68fa      	ldr	r2, [r7, #12]
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	4413      	add	r3, r2
 800d062:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d064:	4b14      	ldr	r3, [pc, #80]	; (800d0b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	68ba      	ldr	r2, [r7, #8]
 800d06a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d06c:	68ba      	ldr	r2, [r7, #8]
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	429a      	cmp	r2, r3
 800d072:	d209      	bcs.n	800d088 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d074:	4b13      	ldr	r3, [pc, #76]	; (800d0c4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d076:	681a      	ldr	r2, [r3, #0]
 800d078:	4b0f      	ldr	r3, [pc, #60]	; (800d0b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	3304      	adds	r3, #4
 800d07e:	4619      	mov	r1, r3
 800d080:	4610      	mov	r0, r2
 800d082:	f7fe fae4 	bl	800b64e <vListInsert>
}
 800d086:	e010      	b.n	800d0aa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d088:	4b0f      	ldr	r3, [pc, #60]	; (800d0c8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d08a:	681a      	ldr	r2, [r3, #0]
 800d08c:	4b0a      	ldr	r3, [pc, #40]	; (800d0b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	3304      	adds	r3, #4
 800d092:	4619      	mov	r1, r3
 800d094:	4610      	mov	r0, r2
 800d096:	f7fe fada 	bl	800b64e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d09a:	4b0c      	ldr	r3, [pc, #48]	; (800d0cc <prvAddCurrentTaskToDelayedList+0xc8>)
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	68ba      	ldr	r2, [r7, #8]
 800d0a0:	429a      	cmp	r2, r3
 800d0a2:	d202      	bcs.n	800d0aa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d0a4:	4a09      	ldr	r2, [pc, #36]	; (800d0cc <prvAddCurrentTaskToDelayedList+0xc8>)
 800d0a6:	68bb      	ldr	r3, [r7, #8]
 800d0a8:	6013      	str	r3, [r2, #0]
}
 800d0aa:	bf00      	nop
 800d0ac:	3710      	adds	r7, #16
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	bd80      	pop	{r7, pc}
 800d0b2:	bf00      	nop
 800d0b4:	20000924 	.word	0x20000924
 800d0b8:	20000820 	.word	0x20000820
 800d0bc:	20000928 	.word	0x20000928
 800d0c0:	2000090c 	.word	0x2000090c
 800d0c4:	200008dc 	.word	0x200008dc
 800d0c8:	200008d8 	.word	0x200008d8
 800d0cc:	20000940 	.word	0x20000940

0800d0d0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b08a      	sub	sp, #40	; 0x28
 800d0d4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d0da:	f000 fb85 	bl	800d7e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d0de:	4b1c      	ldr	r3, [pc, #112]	; (800d150 <xTimerCreateTimerTask+0x80>)
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d021      	beq.n	800d12a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d0ee:	1d3a      	adds	r2, r7, #4
 800d0f0:	f107 0108 	add.w	r1, r7, #8
 800d0f4:	f107 030c 	add.w	r3, r7, #12
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	f7f3 fd5d 	bl	8000bb8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d0fe:	6879      	ldr	r1, [r7, #4]
 800d100:	68bb      	ldr	r3, [r7, #8]
 800d102:	68fa      	ldr	r2, [r7, #12]
 800d104:	9202      	str	r2, [sp, #8]
 800d106:	9301      	str	r3, [sp, #4]
 800d108:	2302      	movs	r3, #2
 800d10a:	9300      	str	r3, [sp, #0]
 800d10c:	2300      	movs	r3, #0
 800d10e:	460a      	mov	r2, r1
 800d110:	4910      	ldr	r1, [pc, #64]	; (800d154 <xTimerCreateTimerTask+0x84>)
 800d112:	4811      	ldr	r0, [pc, #68]	; (800d158 <xTimerCreateTimerTask+0x88>)
 800d114:	f7ff f8a0 	bl	800c258 <xTaskCreateStatic>
 800d118:	4603      	mov	r3, r0
 800d11a:	4a10      	ldr	r2, [pc, #64]	; (800d15c <xTimerCreateTimerTask+0x8c>)
 800d11c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d11e:	4b0f      	ldr	r3, [pc, #60]	; (800d15c <xTimerCreateTimerTask+0x8c>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d001      	beq.n	800d12a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d126:	2301      	movs	r3, #1
 800d128:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d12a:	697b      	ldr	r3, [r7, #20]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d10a      	bne.n	800d146 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d134:	f383 8811 	msr	BASEPRI, r3
 800d138:	f3bf 8f6f 	isb	sy
 800d13c:	f3bf 8f4f 	dsb	sy
 800d140:	613b      	str	r3, [r7, #16]
}
 800d142:	bf00      	nop
 800d144:	e7fe      	b.n	800d144 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d146:	697b      	ldr	r3, [r7, #20]
}
 800d148:	4618      	mov	r0, r3
 800d14a:	3718      	adds	r7, #24
 800d14c:	46bd      	mov	sp, r7
 800d14e:	bd80      	pop	{r7, pc}
 800d150:	2000097c 	.word	0x2000097c
 800d154:	0800f1e4 	.word	0x0800f1e4
 800d158:	0800d3c9 	.word	0x0800d3c9
 800d15c:	20000980 	.word	0x20000980

0800d160 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800d160:	b580      	push	{r7, lr}
 800d162:	b088      	sub	sp, #32
 800d164:	af02      	add	r7, sp, #8
 800d166:	60f8      	str	r0, [r7, #12]
 800d168:	60b9      	str	r1, [r7, #8]
 800d16a:	607a      	str	r2, [r7, #4]
 800d16c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800d16e:	2028      	movs	r0, #40	; 0x28
 800d170:	f000 fdca 	bl	800dd08 <pvPortMalloc>
 800d174:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800d176:	697b      	ldr	r3, [r7, #20]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d00d      	beq.n	800d198 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800d17c:	697b      	ldr	r3, [r7, #20]
 800d17e:	2200      	movs	r2, #0
 800d180:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800d184:	697b      	ldr	r3, [r7, #20]
 800d186:	9301      	str	r3, [sp, #4]
 800d188:	6a3b      	ldr	r3, [r7, #32]
 800d18a:	9300      	str	r3, [sp, #0]
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	687a      	ldr	r2, [r7, #4]
 800d190:	68b9      	ldr	r1, [r7, #8]
 800d192:	68f8      	ldr	r0, [r7, #12]
 800d194:	f000 f843 	bl	800d21e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800d198:	697b      	ldr	r3, [r7, #20]
	}
 800d19a:	4618      	mov	r0, r3
 800d19c:	3718      	adds	r7, #24
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	bd80      	pop	{r7, pc}

0800d1a2 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800d1a2:	b580      	push	{r7, lr}
 800d1a4:	b08a      	sub	sp, #40	; 0x28
 800d1a6:	af02      	add	r7, sp, #8
 800d1a8:	60f8      	str	r0, [r7, #12]
 800d1aa:	60b9      	str	r1, [r7, #8]
 800d1ac:	607a      	str	r2, [r7, #4]
 800d1ae:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800d1b0:	2328      	movs	r3, #40	; 0x28
 800d1b2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800d1b4:	693b      	ldr	r3, [r7, #16]
 800d1b6:	2b28      	cmp	r3, #40	; 0x28
 800d1b8:	d00a      	beq.n	800d1d0 <xTimerCreateStatic+0x2e>
	__asm volatile
 800d1ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1be:	f383 8811 	msr	BASEPRI, r3
 800d1c2:	f3bf 8f6f 	isb	sy
 800d1c6:	f3bf 8f4f 	dsb	sy
 800d1ca:	61bb      	str	r3, [r7, #24]
}
 800d1cc:	bf00      	nop
 800d1ce:	e7fe      	b.n	800d1ce <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d1d0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800d1d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d10a      	bne.n	800d1ee <xTimerCreateStatic+0x4c>
	__asm volatile
 800d1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1dc:	f383 8811 	msr	BASEPRI, r3
 800d1e0:	f3bf 8f6f 	isb	sy
 800d1e4:	f3bf 8f4f 	dsb	sy
 800d1e8:	617b      	str	r3, [r7, #20]
}
 800d1ea:	bf00      	nop
 800d1ec:	e7fe      	b.n	800d1ec <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800d1ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1f0:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800d1f2:	69fb      	ldr	r3, [r7, #28]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d00d      	beq.n	800d214 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800d1f8:	69fb      	ldr	r3, [r7, #28]
 800d1fa:	2202      	movs	r2, #2
 800d1fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800d200:	69fb      	ldr	r3, [r7, #28]
 800d202:	9301      	str	r3, [sp, #4]
 800d204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d206:	9300      	str	r3, [sp, #0]
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	687a      	ldr	r2, [r7, #4]
 800d20c:	68b9      	ldr	r1, [r7, #8]
 800d20e:	68f8      	ldr	r0, [r7, #12]
 800d210:	f000 f805 	bl	800d21e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800d214:	69fb      	ldr	r3, [r7, #28]
	}
 800d216:	4618      	mov	r0, r3
 800d218:	3720      	adds	r7, #32
 800d21a:	46bd      	mov	sp, r7
 800d21c:	bd80      	pop	{r7, pc}

0800d21e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800d21e:	b580      	push	{r7, lr}
 800d220:	b086      	sub	sp, #24
 800d222:	af00      	add	r7, sp, #0
 800d224:	60f8      	str	r0, [r7, #12]
 800d226:	60b9      	str	r1, [r7, #8]
 800d228:	607a      	str	r2, [r7, #4]
 800d22a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800d22c:	68bb      	ldr	r3, [r7, #8]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d10a      	bne.n	800d248 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800d232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d236:	f383 8811 	msr	BASEPRI, r3
 800d23a:	f3bf 8f6f 	isb	sy
 800d23e:	f3bf 8f4f 	dsb	sy
 800d242:	617b      	str	r3, [r7, #20]
}
 800d244:	bf00      	nop
 800d246:	e7fe      	b.n	800d246 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800d248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d01e      	beq.n	800d28c <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800d24e:	f000 facb 	bl	800d7e8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800d252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d254:	68fa      	ldr	r2, [r7, #12]
 800d256:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800d258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d25a:	68ba      	ldr	r2, [r7, #8]
 800d25c:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800d25e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d260:	683a      	ldr	r2, [r7, #0]
 800d262:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800d264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d266:	6a3a      	ldr	r2, [r7, #32]
 800d268:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800d26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d26c:	3304      	adds	r3, #4
 800d26e:	4618      	mov	r0, r3
 800d270:	f7fe f9bc 	bl	800b5ec <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d008      	beq.n	800d28c <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800d27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d27c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d280:	f043 0304 	orr.w	r3, r3, #4
 800d284:	b2da      	uxtb	r2, r3
 800d286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d288:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800d28c:	bf00      	nop
 800d28e:	3718      	adds	r7, #24
 800d290:	46bd      	mov	sp, r7
 800d292:	bd80      	pop	{r7, pc}

0800d294 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b08a      	sub	sp, #40	; 0x28
 800d298:	af00      	add	r7, sp, #0
 800d29a:	60f8      	str	r0, [r7, #12]
 800d29c:	60b9      	str	r1, [r7, #8]
 800d29e:	607a      	str	r2, [r7, #4]
 800d2a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d10a      	bne.n	800d2c2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800d2ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2b0:	f383 8811 	msr	BASEPRI, r3
 800d2b4:	f3bf 8f6f 	isb	sy
 800d2b8:	f3bf 8f4f 	dsb	sy
 800d2bc:	623b      	str	r3, [r7, #32]
}
 800d2be:	bf00      	nop
 800d2c0:	e7fe      	b.n	800d2c0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d2c2:	4b1a      	ldr	r3, [pc, #104]	; (800d32c <xTimerGenericCommand+0x98>)
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d02a      	beq.n	800d320 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d2ca:	68bb      	ldr	r3, [r7, #8]
 800d2cc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d2d6:	68bb      	ldr	r3, [r7, #8]
 800d2d8:	2b05      	cmp	r3, #5
 800d2da:	dc18      	bgt.n	800d30e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d2dc:	f7ff fdee 	bl	800cebc <xTaskGetSchedulerState>
 800d2e0:	4603      	mov	r3, r0
 800d2e2:	2b02      	cmp	r3, #2
 800d2e4:	d109      	bne.n	800d2fa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d2e6:	4b11      	ldr	r3, [pc, #68]	; (800d32c <xTimerGenericCommand+0x98>)
 800d2e8:	6818      	ldr	r0, [r3, #0]
 800d2ea:	f107 0114 	add.w	r1, r7, #20
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2f2:	f7fe fb49 	bl	800b988 <xQueueGenericSend>
 800d2f6:	6278      	str	r0, [r7, #36]	; 0x24
 800d2f8:	e012      	b.n	800d320 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d2fa:	4b0c      	ldr	r3, [pc, #48]	; (800d32c <xTimerGenericCommand+0x98>)
 800d2fc:	6818      	ldr	r0, [r3, #0]
 800d2fe:	f107 0114 	add.w	r1, r7, #20
 800d302:	2300      	movs	r3, #0
 800d304:	2200      	movs	r2, #0
 800d306:	f7fe fb3f 	bl	800b988 <xQueueGenericSend>
 800d30a:	6278      	str	r0, [r7, #36]	; 0x24
 800d30c:	e008      	b.n	800d320 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d30e:	4b07      	ldr	r3, [pc, #28]	; (800d32c <xTimerGenericCommand+0x98>)
 800d310:	6818      	ldr	r0, [r3, #0]
 800d312:	f107 0114 	add.w	r1, r7, #20
 800d316:	2300      	movs	r3, #0
 800d318:	683a      	ldr	r2, [r7, #0]
 800d31a:	f7fe fc33 	bl	800bb84 <xQueueGenericSendFromISR>
 800d31e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d322:	4618      	mov	r0, r3
 800d324:	3728      	adds	r7, #40	; 0x28
 800d326:	46bd      	mov	sp, r7
 800d328:	bd80      	pop	{r7, pc}
 800d32a:	bf00      	nop
 800d32c:	2000097c 	.word	0x2000097c

0800d330 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b088      	sub	sp, #32
 800d334:	af02      	add	r7, sp, #8
 800d336:	6078      	str	r0, [r7, #4]
 800d338:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d33a:	4b22      	ldr	r3, [pc, #136]	; (800d3c4 <prvProcessExpiredTimer+0x94>)
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	68db      	ldr	r3, [r3, #12]
 800d340:	68db      	ldr	r3, [r3, #12]
 800d342:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d344:	697b      	ldr	r3, [r7, #20]
 800d346:	3304      	adds	r3, #4
 800d348:	4618      	mov	r0, r3
 800d34a:	f7fe f9b9 	bl	800b6c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d34e:	697b      	ldr	r3, [r7, #20]
 800d350:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d354:	f003 0304 	and.w	r3, r3, #4
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d022      	beq.n	800d3a2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d35c:	697b      	ldr	r3, [r7, #20]
 800d35e:	699a      	ldr	r2, [r3, #24]
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	18d1      	adds	r1, r2, r3
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	683a      	ldr	r2, [r7, #0]
 800d368:	6978      	ldr	r0, [r7, #20]
 800d36a:	f000 f8d1 	bl	800d510 <prvInsertTimerInActiveList>
 800d36e:	4603      	mov	r3, r0
 800d370:	2b00      	cmp	r3, #0
 800d372:	d01f      	beq.n	800d3b4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d374:	2300      	movs	r3, #0
 800d376:	9300      	str	r3, [sp, #0]
 800d378:	2300      	movs	r3, #0
 800d37a:	687a      	ldr	r2, [r7, #4]
 800d37c:	2100      	movs	r1, #0
 800d37e:	6978      	ldr	r0, [r7, #20]
 800d380:	f7ff ff88 	bl	800d294 <xTimerGenericCommand>
 800d384:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d386:	693b      	ldr	r3, [r7, #16]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d113      	bne.n	800d3b4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d38c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d390:	f383 8811 	msr	BASEPRI, r3
 800d394:	f3bf 8f6f 	isb	sy
 800d398:	f3bf 8f4f 	dsb	sy
 800d39c:	60fb      	str	r3, [r7, #12]
}
 800d39e:	bf00      	nop
 800d3a0:	e7fe      	b.n	800d3a0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d3a2:	697b      	ldr	r3, [r7, #20]
 800d3a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d3a8:	f023 0301 	bic.w	r3, r3, #1
 800d3ac:	b2da      	uxtb	r2, r3
 800d3ae:	697b      	ldr	r3, [r7, #20]
 800d3b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d3b4:	697b      	ldr	r3, [r7, #20]
 800d3b6:	6a1b      	ldr	r3, [r3, #32]
 800d3b8:	6978      	ldr	r0, [r7, #20]
 800d3ba:	4798      	blx	r3
}
 800d3bc:	bf00      	nop
 800d3be:	3718      	adds	r7, #24
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	bd80      	pop	{r7, pc}
 800d3c4:	20000974 	.word	0x20000974

0800d3c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b084      	sub	sp, #16
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d3d0:	f107 0308 	add.w	r3, r7, #8
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	f000 f857 	bl	800d488 <prvGetNextExpireTime>
 800d3da:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d3dc:	68bb      	ldr	r3, [r7, #8]
 800d3de:	4619      	mov	r1, r3
 800d3e0:	68f8      	ldr	r0, [r7, #12]
 800d3e2:	f000 f803 	bl	800d3ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d3e6:	f000 f8d5 	bl	800d594 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d3ea:	e7f1      	b.n	800d3d0 <prvTimerTask+0x8>

0800d3ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b084      	sub	sp, #16
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
 800d3f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d3f6:	f7ff f97d 	bl	800c6f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d3fa:	f107 0308 	add.w	r3, r7, #8
 800d3fe:	4618      	mov	r0, r3
 800d400:	f000 f866 	bl	800d4d0 <prvSampleTimeNow>
 800d404:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d406:	68bb      	ldr	r3, [r7, #8]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d130      	bne.n	800d46e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d40c:	683b      	ldr	r3, [r7, #0]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d10a      	bne.n	800d428 <prvProcessTimerOrBlockTask+0x3c>
 800d412:	687a      	ldr	r2, [r7, #4]
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	429a      	cmp	r2, r3
 800d418:	d806      	bhi.n	800d428 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d41a:	f7ff f979 	bl	800c710 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d41e:	68f9      	ldr	r1, [r7, #12]
 800d420:	6878      	ldr	r0, [r7, #4]
 800d422:	f7ff ff85 	bl	800d330 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d426:	e024      	b.n	800d472 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d428:	683b      	ldr	r3, [r7, #0]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d008      	beq.n	800d440 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d42e:	4b13      	ldr	r3, [pc, #76]	; (800d47c <prvProcessTimerOrBlockTask+0x90>)
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d101      	bne.n	800d43c <prvProcessTimerOrBlockTask+0x50>
 800d438:	2301      	movs	r3, #1
 800d43a:	e000      	b.n	800d43e <prvProcessTimerOrBlockTask+0x52>
 800d43c:	2300      	movs	r3, #0
 800d43e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d440:	4b0f      	ldr	r3, [pc, #60]	; (800d480 <prvProcessTimerOrBlockTask+0x94>)
 800d442:	6818      	ldr	r0, [r3, #0]
 800d444:	687a      	ldr	r2, [r7, #4]
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	1ad3      	subs	r3, r2, r3
 800d44a:	683a      	ldr	r2, [r7, #0]
 800d44c:	4619      	mov	r1, r3
 800d44e:	f7fe fecf 	bl	800c1f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d452:	f7ff f95d 	bl	800c710 <xTaskResumeAll>
 800d456:	4603      	mov	r3, r0
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d10a      	bne.n	800d472 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d45c:	4b09      	ldr	r3, [pc, #36]	; (800d484 <prvProcessTimerOrBlockTask+0x98>)
 800d45e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d462:	601a      	str	r2, [r3, #0]
 800d464:	f3bf 8f4f 	dsb	sy
 800d468:	f3bf 8f6f 	isb	sy
}
 800d46c:	e001      	b.n	800d472 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d46e:	f7ff f94f 	bl	800c710 <xTaskResumeAll>
}
 800d472:	bf00      	nop
 800d474:	3710      	adds	r7, #16
 800d476:	46bd      	mov	sp, r7
 800d478:	bd80      	pop	{r7, pc}
 800d47a:	bf00      	nop
 800d47c:	20000978 	.word	0x20000978
 800d480:	2000097c 	.word	0x2000097c
 800d484:	e000ed04 	.word	0xe000ed04

0800d488 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d488:	b480      	push	{r7}
 800d48a:	b085      	sub	sp, #20
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d490:	4b0e      	ldr	r3, [pc, #56]	; (800d4cc <prvGetNextExpireTime+0x44>)
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d101      	bne.n	800d49e <prvGetNextExpireTime+0x16>
 800d49a:	2201      	movs	r2, #1
 800d49c:	e000      	b.n	800d4a0 <prvGetNextExpireTime+0x18>
 800d49e:	2200      	movs	r2, #0
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d105      	bne.n	800d4b8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d4ac:	4b07      	ldr	r3, [pc, #28]	; (800d4cc <prvGetNextExpireTime+0x44>)
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	68db      	ldr	r3, [r3, #12]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	60fb      	str	r3, [r7, #12]
 800d4b6:	e001      	b.n	800d4bc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d4bc:	68fb      	ldr	r3, [r7, #12]
}
 800d4be:	4618      	mov	r0, r3
 800d4c0:	3714      	adds	r7, #20
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c8:	4770      	bx	lr
 800d4ca:	bf00      	nop
 800d4cc:	20000974 	.word	0x20000974

0800d4d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b084      	sub	sp, #16
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d4d8:	f7ff f9b6 	bl	800c848 <xTaskGetTickCount>
 800d4dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d4de:	4b0b      	ldr	r3, [pc, #44]	; (800d50c <prvSampleTimeNow+0x3c>)
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	68fa      	ldr	r2, [r7, #12]
 800d4e4:	429a      	cmp	r2, r3
 800d4e6:	d205      	bcs.n	800d4f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d4e8:	f000 f91a 	bl	800d720 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2201      	movs	r2, #1
 800d4f0:	601a      	str	r2, [r3, #0]
 800d4f2:	e002      	b.n	800d4fa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d4fa:	4a04      	ldr	r2, [pc, #16]	; (800d50c <prvSampleTimeNow+0x3c>)
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d500:	68fb      	ldr	r3, [r7, #12]
}
 800d502:	4618      	mov	r0, r3
 800d504:	3710      	adds	r7, #16
 800d506:	46bd      	mov	sp, r7
 800d508:	bd80      	pop	{r7, pc}
 800d50a:	bf00      	nop
 800d50c:	20000984 	.word	0x20000984

0800d510 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b086      	sub	sp, #24
 800d514:	af00      	add	r7, sp, #0
 800d516:	60f8      	str	r0, [r7, #12]
 800d518:	60b9      	str	r1, [r7, #8]
 800d51a:	607a      	str	r2, [r7, #4]
 800d51c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d51e:	2300      	movs	r3, #0
 800d520:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	68ba      	ldr	r2, [r7, #8]
 800d526:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	68fa      	ldr	r2, [r7, #12]
 800d52c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d52e:	68ba      	ldr	r2, [r7, #8]
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	429a      	cmp	r2, r3
 800d534:	d812      	bhi.n	800d55c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d536:	687a      	ldr	r2, [r7, #4]
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	1ad2      	subs	r2, r2, r3
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	699b      	ldr	r3, [r3, #24]
 800d540:	429a      	cmp	r2, r3
 800d542:	d302      	bcc.n	800d54a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d544:	2301      	movs	r3, #1
 800d546:	617b      	str	r3, [r7, #20]
 800d548:	e01b      	b.n	800d582 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d54a:	4b10      	ldr	r3, [pc, #64]	; (800d58c <prvInsertTimerInActiveList+0x7c>)
 800d54c:	681a      	ldr	r2, [r3, #0]
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	3304      	adds	r3, #4
 800d552:	4619      	mov	r1, r3
 800d554:	4610      	mov	r0, r2
 800d556:	f7fe f87a 	bl	800b64e <vListInsert>
 800d55a:	e012      	b.n	800d582 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d55c:	687a      	ldr	r2, [r7, #4]
 800d55e:	683b      	ldr	r3, [r7, #0]
 800d560:	429a      	cmp	r2, r3
 800d562:	d206      	bcs.n	800d572 <prvInsertTimerInActiveList+0x62>
 800d564:	68ba      	ldr	r2, [r7, #8]
 800d566:	683b      	ldr	r3, [r7, #0]
 800d568:	429a      	cmp	r2, r3
 800d56a:	d302      	bcc.n	800d572 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d56c:	2301      	movs	r3, #1
 800d56e:	617b      	str	r3, [r7, #20]
 800d570:	e007      	b.n	800d582 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d572:	4b07      	ldr	r3, [pc, #28]	; (800d590 <prvInsertTimerInActiveList+0x80>)
 800d574:	681a      	ldr	r2, [r3, #0]
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	3304      	adds	r3, #4
 800d57a:	4619      	mov	r1, r3
 800d57c:	4610      	mov	r0, r2
 800d57e:	f7fe f866 	bl	800b64e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d582:	697b      	ldr	r3, [r7, #20]
}
 800d584:	4618      	mov	r0, r3
 800d586:	3718      	adds	r7, #24
 800d588:	46bd      	mov	sp, r7
 800d58a:	bd80      	pop	{r7, pc}
 800d58c:	20000978 	.word	0x20000978
 800d590:	20000974 	.word	0x20000974

0800d594 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b08c      	sub	sp, #48	; 0x30
 800d598:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d59a:	e0ae      	b.n	800d6fa <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d59c:	68bb      	ldr	r3, [r7, #8]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	f2c0 80aa 	blt.w	800d6f8 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d5a4:	693b      	ldr	r3, [r7, #16]
 800d5a6:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5aa:	695b      	ldr	r3, [r3, #20]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d004      	beq.n	800d5ba <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5b2:	3304      	adds	r3, #4
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	f7fe f883 	bl	800b6c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d5ba:	1d3b      	adds	r3, r7, #4
 800d5bc:	4618      	mov	r0, r3
 800d5be:	f7ff ff87 	bl	800d4d0 <prvSampleTimeNow>
 800d5c2:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800d5c4:	68bb      	ldr	r3, [r7, #8]
 800d5c6:	2b09      	cmp	r3, #9
 800d5c8:	f200 8097 	bhi.w	800d6fa <prvProcessReceivedCommands+0x166>
 800d5cc:	a201      	add	r2, pc, #4	; (adr r2, 800d5d4 <prvProcessReceivedCommands+0x40>)
 800d5ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5d2:	bf00      	nop
 800d5d4:	0800d5fd 	.word	0x0800d5fd
 800d5d8:	0800d5fd 	.word	0x0800d5fd
 800d5dc:	0800d5fd 	.word	0x0800d5fd
 800d5e0:	0800d671 	.word	0x0800d671
 800d5e4:	0800d685 	.word	0x0800d685
 800d5e8:	0800d6cf 	.word	0x0800d6cf
 800d5ec:	0800d5fd 	.word	0x0800d5fd
 800d5f0:	0800d5fd 	.word	0x0800d5fd
 800d5f4:	0800d671 	.word	0x0800d671
 800d5f8:	0800d685 	.word	0x0800d685
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d602:	f043 0301 	orr.w	r3, r3, #1
 800d606:	b2da      	uxtb	r2, r3
 800d608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d60a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d60e:	68fa      	ldr	r2, [r7, #12]
 800d610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d612:	699b      	ldr	r3, [r3, #24]
 800d614:	18d1      	adds	r1, r2, r3
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	6a3a      	ldr	r2, [r7, #32]
 800d61a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d61c:	f7ff ff78 	bl	800d510 <prvInsertTimerInActiveList>
 800d620:	4603      	mov	r3, r0
 800d622:	2b00      	cmp	r3, #0
 800d624:	d069      	beq.n	800d6fa <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d628:	6a1b      	ldr	r3, [r3, #32]
 800d62a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d62c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d62e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d630:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d634:	f003 0304 	and.w	r3, r3, #4
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d05e      	beq.n	800d6fa <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d63c:	68fa      	ldr	r2, [r7, #12]
 800d63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d640:	699b      	ldr	r3, [r3, #24]
 800d642:	441a      	add	r2, r3
 800d644:	2300      	movs	r3, #0
 800d646:	9300      	str	r3, [sp, #0]
 800d648:	2300      	movs	r3, #0
 800d64a:	2100      	movs	r1, #0
 800d64c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d64e:	f7ff fe21 	bl	800d294 <xTimerGenericCommand>
 800d652:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800d654:	69fb      	ldr	r3, [r7, #28]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d14f      	bne.n	800d6fa <prvProcessReceivedCommands+0x166>
	__asm volatile
 800d65a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d65e:	f383 8811 	msr	BASEPRI, r3
 800d662:	f3bf 8f6f 	isb	sy
 800d666:	f3bf 8f4f 	dsb	sy
 800d66a:	61bb      	str	r3, [r7, #24]
}
 800d66c:	bf00      	nop
 800d66e:	e7fe      	b.n	800d66e <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d672:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d676:	f023 0301 	bic.w	r3, r3, #1
 800d67a:	b2da      	uxtb	r2, r3
 800d67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d67e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800d682:	e03a      	b.n	800d6fa <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d686:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d68a:	f043 0301 	orr.w	r3, r3, #1
 800d68e:	b2da      	uxtb	r2, r3
 800d690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d692:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d696:	68fa      	ldr	r2, [r7, #12]
 800d698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d69a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d69e:	699b      	ldr	r3, [r3, #24]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d10a      	bne.n	800d6ba <prvProcessReceivedCommands+0x126>
	__asm volatile
 800d6a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6a8:	f383 8811 	msr	BASEPRI, r3
 800d6ac:	f3bf 8f6f 	isb	sy
 800d6b0:	f3bf 8f4f 	dsb	sy
 800d6b4:	617b      	str	r3, [r7, #20]
}
 800d6b6:	bf00      	nop
 800d6b8:	e7fe      	b.n	800d6b8 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6bc:	699a      	ldr	r2, [r3, #24]
 800d6be:	6a3b      	ldr	r3, [r7, #32]
 800d6c0:	18d1      	adds	r1, r2, r3
 800d6c2:	6a3b      	ldr	r3, [r7, #32]
 800d6c4:	6a3a      	ldr	r2, [r7, #32]
 800d6c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d6c8:	f7ff ff22 	bl	800d510 <prvInsertTimerInActiveList>
					break;
 800d6cc:	e015      	b.n	800d6fa <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d6d4:	f003 0302 	and.w	r3, r3, #2
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d103      	bne.n	800d6e4 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 800d6dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d6de:	f000 fbdf 	bl	800dea0 <vPortFree>
 800d6e2:	e00a      	b.n	800d6fa <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d6ea:	f023 0301 	bic.w	r3, r3, #1
 800d6ee:	b2da      	uxtb	r2, r3
 800d6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d6f6:	e000      	b.n	800d6fa <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d6f8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d6fa:	4b08      	ldr	r3, [pc, #32]	; (800d71c <prvProcessReceivedCommands+0x188>)
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	f107 0108 	add.w	r1, r7, #8
 800d702:	2200      	movs	r2, #0
 800d704:	4618      	mov	r0, r3
 800d706:	f7fe fad9 	bl	800bcbc <xQueueReceive>
 800d70a:	4603      	mov	r3, r0
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	f47f af45 	bne.w	800d59c <prvProcessReceivedCommands+0x8>
	}
}
 800d712:	bf00      	nop
 800d714:	bf00      	nop
 800d716:	3728      	adds	r7, #40	; 0x28
 800d718:	46bd      	mov	sp, r7
 800d71a:	bd80      	pop	{r7, pc}
 800d71c:	2000097c 	.word	0x2000097c

0800d720 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b088      	sub	sp, #32
 800d724:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d726:	e048      	b.n	800d7ba <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d728:	4b2d      	ldr	r3, [pc, #180]	; (800d7e0 <prvSwitchTimerLists+0xc0>)
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	68db      	ldr	r3, [r3, #12]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d732:	4b2b      	ldr	r3, [pc, #172]	; (800d7e0 <prvSwitchTimerLists+0xc0>)
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	68db      	ldr	r3, [r3, #12]
 800d738:	68db      	ldr	r3, [r3, #12]
 800d73a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	3304      	adds	r3, #4
 800d740:	4618      	mov	r0, r3
 800d742:	f7fd ffbd 	bl	800b6c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	6a1b      	ldr	r3, [r3, #32]
 800d74a:	68f8      	ldr	r0, [r7, #12]
 800d74c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d754:	f003 0304 	and.w	r3, r3, #4
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d02e      	beq.n	800d7ba <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	699b      	ldr	r3, [r3, #24]
 800d760:	693a      	ldr	r2, [r7, #16]
 800d762:	4413      	add	r3, r2
 800d764:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d766:	68ba      	ldr	r2, [r7, #8]
 800d768:	693b      	ldr	r3, [r7, #16]
 800d76a:	429a      	cmp	r2, r3
 800d76c:	d90e      	bls.n	800d78c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	68ba      	ldr	r2, [r7, #8]
 800d772:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	68fa      	ldr	r2, [r7, #12]
 800d778:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d77a:	4b19      	ldr	r3, [pc, #100]	; (800d7e0 <prvSwitchTimerLists+0xc0>)
 800d77c:	681a      	ldr	r2, [r3, #0]
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	3304      	adds	r3, #4
 800d782:	4619      	mov	r1, r3
 800d784:	4610      	mov	r0, r2
 800d786:	f7fd ff62 	bl	800b64e <vListInsert>
 800d78a:	e016      	b.n	800d7ba <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d78c:	2300      	movs	r3, #0
 800d78e:	9300      	str	r3, [sp, #0]
 800d790:	2300      	movs	r3, #0
 800d792:	693a      	ldr	r2, [r7, #16]
 800d794:	2100      	movs	r1, #0
 800d796:	68f8      	ldr	r0, [r7, #12]
 800d798:	f7ff fd7c 	bl	800d294 <xTimerGenericCommand>
 800d79c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d10a      	bne.n	800d7ba <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d7a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7a8:	f383 8811 	msr	BASEPRI, r3
 800d7ac:	f3bf 8f6f 	isb	sy
 800d7b0:	f3bf 8f4f 	dsb	sy
 800d7b4:	603b      	str	r3, [r7, #0]
}
 800d7b6:	bf00      	nop
 800d7b8:	e7fe      	b.n	800d7b8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d7ba:	4b09      	ldr	r3, [pc, #36]	; (800d7e0 <prvSwitchTimerLists+0xc0>)
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d1b1      	bne.n	800d728 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d7c4:	4b06      	ldr	r3, [pc, #24]	; (800d7e0 <prvSwitchTimerLists+0xc0>)
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d7ca:	4b06      	ldr	r3, [pc, #24]	; (800d7e4 <prvSwitchTimerLists+0xc4>)
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	4a04      	ldr	r2, [pc, #16]	; (800d7e0 <prvSwitchTimerLists+0xc0>)
 800d7d0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d7d2:	4a04      	ldr	r2, [pc, #16]	; (800d7e4 <prvSwitchTimerLists+0xc4>)
 800d7d4:	697b      	ldr	r3, [r7, #20]
 800d7d6:	6013      	str	r3, [r2, #0]
}
 800d7d8:	bf00      	nop
 800d7da:	3718      	adds	r7, #24
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	bd80      	pop	{r7, pc}
 800d7e0:	20000974 	.word	0x20000974
 800d7e4:	20000978 	.word	0x20000978

0800d7e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b082      	sub	sp, #8
 800d7ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d7ee:	f000 f969 	bl	800dac4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d7f2:	4b15      	ldr	r3, [pc, #84]	; (800d848 <prvCheckForValidListAndQueue+0x60>)
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d120      	bne.n	800d83c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d7fa:	4814      	ldr	r0, [pc, #80]	; (800d84c <prvCheckForValidListAndQueue+0x64>)
 800d7fc:	f7fd fed6 	bl	800b5ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d800:	4813      	ldr	r0, [pc, #76]	; (800d850 <prvCheckForValidListAndQueue+0x68>)
 800d802:	f7fd fed3 	bl	800b5ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d806:	4b13      	ldr	r3, [pc, #76]	; (800d854 <prvCheckForValidListAndQueue+0x6c>)
 800d808:	4a10      	ldr	r2, [pc, #64]	; (800d84c <prvCheckForValidListAndQueue+0x64>)
 800d80a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d80c:	4b12      	ldr	r3, [pc, #72]	; (800d858 <prvCheckForValidListAndQueue+0x70>)
 800d80e:	4a10      	ldr	r2, [pc, #64]	; (800d850 <prvCheckForValidListAndQueue+0x68>)
 800d810:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d812:	2300      	movs	r3, #0
 800d814:	9300      	str	r3, [sp, #0]
 800d816:	4b11      	ldr	r3, [pc, #68]	; (800d85c <prvCheckForValidListAndQueue+0x74>)
 800d818:	4a11      	ldr	r2, [pc, #68]	; (800d860 <prvCheckForValidListAndQueue+0x78>)
 800d81a:	210c      	movs	r1, #12
 800d81c:	200a      	movs	r0, #10
 800d81e:	f7fd ffe1 	bl	800b7e4 <xQueueGenericCreateStatic>
 800d822:	4603      	mov	r3, r0
 800d824:	4a08      	ldr	r2, [pc, #32]	; (800d848 <prvCheckForValidListAndQueue+0x60>)
 800d826:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d828:	4b07      	ldr	r3, [pc, #28]	; (800d848 <prvCheckForValidListAndQueue+0x60>)
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d005      	beq.n	800d83c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d830:	4b05      	ldr	r3, [pc, #20]	; (800d848 <prvCheckForValidListAndQueue+0x60>)
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	490b      	ldr	r1, [pc, #44]	; (800d864 <prvCheckForValidListAndQueue+0x7c>)
 800d836:	4618      	mov	r0, r3
 800d838:	f7fe fcb0 	bl	800c19c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d83c:	f000 f972 	bl	800db24 <vPortExitCritical>
}
 800d840:	bf00      	nop
 800d842:	46bd      	mov	sp, r7
 800d844:	bd80      	pop	{r7, pc}
 800d846:	bf00      	nop
 800d848:	2000097c 	.word	0x2000097c
 800d84c:	2000094c 	.word	0x2000094c
 800d850:	20000960 	.word	0x20000960
 800d854:	20000974 	.word	0x20000974
 800d858:	20000978 	.word	0x20000978
 800d85c:	20000a00 	.word	0x20000a00
 800d860:	20000988 	.word	0x20000988
 800d864:	0800f1ec 	.word	0x0800f1ec

0800d868 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d868:	b480      	push	{r7}
 800d86a:	b085      	sub	sp, #20
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	60f8      	str	r0, [r7, #12]
 800d870:	60b9      	str	r1, [r7, #8]
 800d872:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	3b04      	subs	r3, #4
 800d878:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d880:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	3b04      	subs	r3, #4
 800d886:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d888:	68bb      	ldr	r3, [r7, #8]
 800d88a:	f023 0201 	bic.w	r2, r3, #1
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	3b04      	subs	r3, #4
 800d896:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d898:	4a0c      	ldr	r2, [pc, #48]	; (800d8cc <pxPortInitialiseStack+0x64>)
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	3b14      	subs	r3, #20
 800d8a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d8a4:	687a      	ldr	r2, [r7, #4]
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	3b04      	subs	r3, #4
 800d8ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	f06f 0202 	mvn.w	r2, #2
 800d8b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	3b20      	subs	r3, #32
 800d8bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d8be:	68fb      	ldr	r3, [r7, #12]
}
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	3714      	adds	r7, #20
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ca:	4770      	bx	lr
 800d8cc:	0800d8d1 	.word	0x0800d8d1

0800d8d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d8d0:	b480      	push	{r7}
 800d8d2:	b085      	sub	sp, #20
 800d8d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d8da:	4b12      	ldr	r3, [pc, #72]	; (800d924 <prvTaskExitError+0x54>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8e2:	d00a      	beq.n	800d8fa <prvTaskExitError+0x2a>
	__asm volatile
 800d8e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8e8:	f383 8811 	msr	BASEPRI, r3
 800d8ec:	f3bf 8f6f 	isb	sy
 800d8f0:	f3bf 8f4f 	dsb	sy
 800d8f4:	60fb      	str	r3, [r7, #12]
}
 800d8f6:	bf00      	nop
 800d8f8:	e7fe      	b.n	800d8f8 <prvTaskExitError+0x28>
	__asm volatile
 800d8fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8fe:	f383 8811 	msr	BASEPRI, r3
 800d902:	f3bf 8f6f 	isb	sy
 800d906:	f3bf 8f4f 	dsb	sy
 800d90a:	60bb      	str	r3, [r7, #8]
}
 800d90c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d90e:	bf00      	nop
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d0fc      	beq.n	800d910 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d916:	bf00      	nop
 800d918:	bf00      	nop
 800d91a:	3714      	adds	r7, #20
 800d91c:	46bd      	mov	sp, r7
 800d91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d922:	4770      	bx	lr
 800d924:	2000002c 	.word	0x2000002c
	...

0800d930 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d930:	4b07      	ldr	r3, [pc, #28]	; (800d950 <pxCurrentTCBConst2>)
 800d932:	6819      	ldr	r1, [r3, #0]
 800d934:	6808      	ldr	r0, [r1, #0]
 800d936:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d93a:	f380 8809 	msr	PSP, r0
 800d93e:	f3bf 8f6f 	isb	sy
 800d942:	f04f 0000 	mov.w	r0, #0
 800d946:	f380 8811 	msr	BASEPRI, r0
 800d94a:	4770      	bx	lr
 800d94c:	f3af 8000 	nop.w

0800d950 <pxCurrentTCBConst2>:
 800d950:	20000820 	.word	0x20000820
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d954:	bf00      	nop
 800d956:	bf00      	nop

0800d958 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d958:	4808      	ldr	r0, [pc, #32]	; (800d97c <prvPortStartFirstTask+0x24>)
 800d95a:	6800      	ldr	r0, [r0, #0]
 800d95c:	6800      	ldr	r0, [r0, #0]
 800d95e:	f380 8808 	msr	MSP, r0
 800d962:	f04f 0000 	mov.w	r0, #0
 800d966:	f380 8814 	msr	CONTROL, r0
 800d96a:	b662      	cpsie	i
 800d96c:	b661      	cpsie	f
 800d96e:	f3bf 8f4f 	dsb	sy
 800d972:	f3bf 8f6f 	isb	sy
 800d976:	df00      	svc	0
 800d978:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d97a:	bf00      	nop
 800d97c:	e000ed08 	.word	0xe000ed08

0800d980 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b086      	sub	sp, #24
 800d984:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d986:	4b46      	ldr	r3, [pc, #280]	; (800daa0 <xPortStartScheduler+0x120>)
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	4a46      	ldr	r2, [pc, #280]	; (800daa4 <xPortStartScheduler+0x124>)
 800d98c:	4293      	cmp	r3, r2
 800d98e:	d10a      	bne.n	800d9a6 <xPortStartScheduler+0x26>
	__asm volatile
 800d990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d994:	f383 8811 	msr	BASEPRI, r3
 800d998:	f3bf 8f6f 	isb	sy
 800d99c:	f3bf 8f4f 	dsb	sy
 800d9a0:	613b      	str	r3, [r7, #16]
}
 800d9a2:	bf00      	nop
 800d9a4:	e7fe      	b.n	800d9a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d9a6:	4b3e      	ldr	r3, [pc, #248]	; (800daa0 <xPortStartScheduler+0x120>)
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	4a3f      	ldr	r2, [pc, #252]	; (800daa8 <xPortStartScheduler+0x128>)
 800d9ac:	4293      	cmp	r3, r2
 800d9ae:	d10a      	bne.n	800d9c6 <xPortStartScheduler+0x46>
	__asm volatile
 800d9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9b4:	f383 8811 	msr	BASEPRI, r3
 800d9b8:	f3bf 8f6f 	isb	sy
 800d9bc:	f3bf 8f4f 	dsb	sy
 800d9c0:	60fb      	str	r3, [r7, #12]
}
 800d9c2:	bf00      	nop
 800d9c4:	e7fe      	b.n	800d9c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d9c6:	4b39      	ldr	r3, [pc, #228]	; (800daac <xPortStartScheduler+0x12c>)
 800d9c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d9ca:	697b      	ldr	r3, [r7, #20]
 800d9cc:	781b      	ldrb	r3, [r3, #0]
 800d9ce:	b2db      	uxtb	r3, r3
 800d9d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d9d2:	697b      	ldr	r3, [r7, #20]
 800d9d4:	22ff      	movs	r2, #255	; 0xff
 800d9d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d9d8:	697b      	ldr	r3, [r7, #20]
 800d9da:	781b      	ldrb	r3, [r3, #0]
 800d9dc:	b2db      	uxtb	r3, r3
 800d9de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d9e0:	78fb      	ldrb	r3, [r7, #3]
 800d9e2:	b2db      	uxtb	r3, r3
 800d9e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d9e8:	b2da      	uxtb	r2, r3
 800d9ea:	4b31      	ldr	r3, [pc, #196]	; (800dab0 <xPortStartScheduler+0x130>)
 800d9ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d9ee:	4b31      	ldr	r3, [pc, #196]	; (800dab4 <xPortStartScheduler+0x134>)
 800d9f0:	2207      	movs	r2, #7
 800d9f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d9f4:	e009      	b.n	800da0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d9f6:	4b2f      	ldr	r3, [pc, #188]	; (800dab4 <xPortStartScheduler+0x134>)
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	3b01      	subs	r3, #1
 800d9fc:	4a2d      	ldr	r2, [pc, #180]	; (800dab4 <xPortStartScheduler+0x134>)
 800d9fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800da00:	78fb      	ldrb	r3, [r7, #3]
 800da02:	b2db      	uxtb	r3, r3
 800da04:	005b      	lsls	r3, r3, #1
 800da06:	b2db      	uxtb	r3, r3
 800da08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800da0a:	78fb      	ldrb	r3, [r7, #3]
 800da0c:	b2db      	uxtb	r3, r3
 800da0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da12:	2b80      	cmp	r3, #128	; 0x80
 800da14:	d0ef      	beq.n	800d9f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800da16:	4b27      	ldr	r3, [pc, #156]	; (800dab4 <xPortStartScheduler+0x134>)
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	f1c3 0307 	rsb	r3, r3, #7
 800da1e:	2b04      	cmp	r3, #4
 800da20:	d00a      	beq.n	800da38 <xPortStartScheduler+0xb8>
	__asm volatile
 800da22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da26:	f383 8811 	msr	BASEPRI, r3
 800da2a:	f3bf 8f6f 	isb	sy
 800da2e:	f3bf 8f4f 	dsb	sy
 800da32:	60bb      	str	r3, [r7, #8]
}
 800da34:	bf00      	nop
 800da36:	e7fe      	b.n	800da36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800da38:	4b1e      	ldr	r3, [pc, #120]	; (800dab4 <xPortStartScheduler+0x134>)
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	021b      	lsls	r3, r3, #8
 800da3e:	4a1d      	ldr	r2, [pc, #116]	; (800dab4 <xPortStartScheduler+0x134>)
 800da40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800da42:	4b1c      	ldr	r3, [pc, #112]	; (800dab4 <xPortStartScheduler+0x134>)
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800da4a:	4a1a      	ldr	r2, [pc, #104]	; (800dab4 <xPortStartScheduler+0x134>)
 800da4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	b2da      	uxtb	r2, r3
 800da52:	697b      	ldr	r3, [r7, #20]
 800da54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800da56:	4b18      	ldr	r3, [pc, #96]	; (800dab8 <xPortStartScheduler+0x138>)
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	4a17      	ldr	r2, [pc, #92]	; (800dab8 <xPortStartScheduler+0x138>)
 800da5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800da60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800da62:	4b15      	ldr	r3, [pc, #84]	; (800dab8 <xPortStartScheduler+0x138>)
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	4a14      	ldr	r2, [pc, #80]	; (800dab8 <xPortStartScheduler+0x138>)
 800da68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800da6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800da6e:	f000 f8dd 	bl	800dc2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800da72:	4b12      	ldr	r3, [pc, #72]	; (800dabc <xPortStartScheduler+0x13c>)
 800da74:	2200      	movs	r2, #0
 800da76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800da78:	f000 f8fc 	bl	800dc74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800da7c:	4b10      	ldr	r3, [pc, #64]	; (800dac0 <xPortStartScheduler+0x140>)
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	4a0f      	ldr	r2, [pc, #60]	; (800dac0 <xPortStartScheduler+0x140>)
 800da82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800da86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800da88:	f7ff ff66 	bl	800d958 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800da8c:	f7fe ffa4 	bl	800c9d8 <vTaskSwitchContext>
	prvTaskExitError();
 800da90:	f7ff ff1e 	bl	800d8d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800da94:	2300      	movs	r3, #0
}
 800da96:	4618      	mov	r0, r3
 800da98:	3718      	adds	r7, #24
 800da9a:	46bd      	mov	sp, r7
 800da9c:	bd80      	pop	{r7, pc}
 800da9e:	bf00      	nop
 800daa0:	e000ed00 	.word	0xe000ed00
 800daa4:	410fc271 	.word	0x410fc271
 800daa8:	410fc270 	.word	0x410fc270
 800daac:	e000e400 	.word	0xe000e400
 800dab0:	20000a48 	.word	0x20000a48
 800dab4:	20000a4c 	.word	0x20000a4c
 800dab8:	e000ed20 	.word	0xe000ed20
 800dabc:	2000002c 	.word	0x2000002c
 800dac0:	e000ef34 	.word	0xe000ef34

0800dac4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800dac4:	b480      	push	{r7}
 800dac6:	b083      	sub	sp, #12
 800dac8:	af00      	add	r7, sp, #0
	__asm volatile
 800daca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dace:	f383 8811 	msr	BASEPRI, r3
 800dad2:	f3bf 8f6f 	isb	sy
 800dad6:	f3bf 8f4f 	dsb	sy
 800dada:	607b      	str	r3, [r7, #4]
}
 800dadc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800dade:	4b0f      	ldr	r3, [pc, #60]	; (800db1c <vPortEnterCritical+0x58>)
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	3301      	adds	r3, #1
 800dae4:	4a0d      	ldr	r2, [pc, #52]	; (800db1c <vPortEnterCritical+0x58>)
 800dae6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800dae8:	4b0c      	ldr	r3, [pc, #48]	; (800db1c <vPortEnterCritical+0x58>)
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	2b01      	cmp	r3, #1
 800daee:	d10f      	bne.n	800db10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800daf0:	4b0b      	ldr	r3, [pc, #44]	; (800db20 <vPortEnterCritical+0x5c>)
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	b2db      	uxtb	r3, r3
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d00a      	beq.n	800db10 <vPortEnterCritical+0x4c>
	__asm volatile
 800dafa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dafe:	f383 8811 	msr	BASEPRI, r3
 800db02:	f3bf 8f6f 	isb	sy
 800db06:	f3bf 8f4f 	dsb	sy
 800db0a:	603b      	str	r3, [r7, #0]
}
 800db0c:	bf00      	nop
 800db0e:	e7fe      	b.n	800db0e <vPortEnterCritical+0x4a>
	}
}
 800db10:	bf00      	nop
 800db12:	370c      	adds	r7, #12
 800db14:	46bd      	mov	sp, r7
 800db16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1a:	4770      	bx	lr
 800db1c:	2000002c 	.word	0x2000002c
 800db20:	e000ed04 	.word	0xe000ed04

0800db24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800db24:	b480      	push	{r7}
 800db26:	b083      	sub	sp, #12
 800db28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800db2a:	4b12      	ldr	r3, [pc, #72]	; (800db74 <vPortExitCritical+0x50>)
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d10a      	bne.n	800db48 <vPortExitCritical+0x24>
	__asm volatile
 800db32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db36:	f383 8811 	msr	BASEPRI, r3
 800db3a:	f3bf 8f6f 	isb	sy
 800db3e:	f3bf 8f4f 	dsb	sy
 800db42:	607b      	str	r3, [r7, #4]
}
 800db44:	bf00      	nop
 800db46:	e7fe      	b.n	800db46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800db48:	4b0a      	ldr	r3, [pc, #40]	; (800db74 <vPortExitCritical+0x50>)
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	3b01      	subs	r3, #1
 800db4e:	4a09      	ldr	r2, [pc, #36]	; (800db74 <vPortExitCritical+0x50>)
 800db50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800db52:	4b08      	ldr	r3, [pc, #32]	; (800db74 <vPortExitCritical+0x50>)
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d105      	bne.n	800db66 <vPortExitCritical+0x42>
 800db5a:	2300      	movs	r3, #0
 800db5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800db5e:	683b      	ldr	r3, [r7, #0]
 800db60:	f383 8811 	msr	BASEPRI, r3
}
 800db64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800db66:	bf00      	nop
 800db68:	370c      	adds	r7, #12
 800db6a:	46bd      	mov	sp, r7
 800db6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db70:	4770      	bx	lr
 800db72:	bf00      	nop
 800db74:	2000002c 	.word	0x2000002c
	...

0800db80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800db80:	f3ef 8009 	mrs	r0, PSP
 800db84:	f3bf 8f6f 	isb	sy
 800db88:	4b15      	ldr	r3, [pc, #84]	; (800dbe0 <pxCurrentTCBConst>)
 800db8a:	681a      	ldr	r2, [r3, #0]
 800db8c:	f01e 0f10 	tst.w	lr, #16
 800db90:	bf08      	it	eq
 800db92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800db96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db9a:	6010      	str	r0, [r2, #0]
 800db9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dba0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800dba4:	f380 8811 	msr	BASEPRI, r0
 800dba8:	f3bf 8f4f 	dsb	sy
 800dbac:	f3bf 8f6f 	isb	sy
 800dbb0:	f7fe ff12 	bl	800c9d8 <vTaskSwitchContext>
 800dbb4:	f04f 0000 	mov.w	r0, #0
 800dbb8:	f380 8811 	msr	BASEPRI, r0
 800dbbc:	bc09      	pop	{r0, r3}
 800dbbe:	6819      	ldr	r1, [r3, #0]
 800dbc0:	6808      	ldr	r0, [r1, #0]
 800dbc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbc6:	f01e 0f10 	tst.w	lr, #16
 800dbca:	bf08      	it	eq
 800dbcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dbd0:	f380 8809 	msr	PSP, r0
 800dbd4:	f3bf 8f6f 	isb	sy
 800dbd8:	4770      	bx	lr
 800dbda:	bf00      	nop
 800dbdc:	f3af 8000 	nop.w

0800dbe0 <pxCurrentTCBConst>:
 800dbe0:	20000820 	.word	0x20000820
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800dbe4:	bf00      	nop
 800dbe6:	bf00      	nop

0800dbe8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b082      	sub	sp, #8
 800dbec:	af00      	add	r7, sp, #0
	__asm volatile
 800dbee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbf2:	f383 8811 	msr	BASEPRI, r3
 800dbf6:	f3bf 8f6f 	isb	sy
 800dbfa:	f3bf 8f4f 	dsb	sy
 800dbfe:	607b      	str	r3, [r7, #4]
}
 800dc00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800dc02:	f7fe fe31 	bl	800c868 <xTaskIncrementTick>
 800dc06:	4603      	mov	r3, r0
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d003      	beq.n	800dc14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dc0c:	4b06      	ldr	r3, [pc, #24]	; (800dc28 <SysTick_Handler+0x40>)
 800dc0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc12:	601a      	str	r2, [r3, #0]
 800dc14:	2300      	movs	r3, #0
 800dc16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dc18:	683b      	ldr	r3, [r7, #0]
 800dc1a:	f383 8811 	msr	BASEPRI, r3
}
 800dc1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800dc20:	bf00      	nop
 800dc22:	3708      	adds	r7, #8
 800dc24:	46bd      	mov	sp, r7
 800dc26:	bd80      	pop	{r7, pc}
 800dc28:	e000ed04 	.word	0xe000ed04

0800dc2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800dc2c:	b480      	push	{r7}
 800dc2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800dc30:	4b0b      	ldr	r3, [pc, #44]	; (800dc60 <vPortSetupTimerInterrupt+0x34>)
 800dc32:	2200      	movs	r2, #0
 800dc34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800dc36:	4b0b      	ldr	r3, [pc, #44]	; (800dc64 <vPortSetupTimerInterrupt+0x38>)
 800dc38:	2200      	movs	r2, #0
 800dc3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800dc3c:	4b0a      	ldr	r3, [pc, #40]	; (800dc68 <vPortSetupTimerInterrupt+0x3c>)
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	4a0a      	ldr	r2, [pc, #40]	; (800dc6c <vPortSetupTimerInterrupt+0x40>)
 800dc42:	fba2 2303 	umull	r2, r3, r2, r3
 800dc46:	099b      	lsrs	r3, r3, #6
 800dc48:	4a09      	ldr	r2, [pc, #36]	; (800dc70 <vPortSetupTimerInterrupt+0x44>)
 800dc4a:	3b01      	subs	r3, #1
 800dc4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800dc4e:	4b04      	ldr	r3, [pc, #16]	; (800dc60 <vPortSetupTimerInterrupt+0x34>)
 800dc50:	2207      	movs	r2, #7
 800dc52:	601a      	str	r2, [r3, #0]
}
 800dc54:	bf00      	nop
 800dc56:	46bd      	mov	sp, r7
 800dc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5c:	4770      	bx	lr
 800dc5e:	bf00      	nop
 800dc60:	e000e010 	.word	0xe000e010
 800dc64:	e000e018 	.word	0xe000e018
 800dc68:	20000000 	.word	0x20000000
 800dc6c:	10624dd3 	.word	0x10624dd3
 800dc70:	e000e014 	.word	0xe000e014

0800dc74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800dc74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800dc84 <vPortEnableVFP+0x10>
 800dc78:	6801      	ldr	r1, [r0, #0]
 800dc7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800dc7e:	6001      	str	r1, [r0, #0]
 800dc80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800dc82:	bf00      	nop
 800dc84:	e000ed88 	.word	0xe000ed88

0800dc88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800dc88:	b480      	push	{r7}
 800dc8a:	b085      	sub	sp, #20
 800dc8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800dc8e:	f3ef 8305 	mrs	r3, IPSR
 800dc92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	2b0f      	cmp	r3, #15
 800dc98:	d914      	bls.n	800dcc4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800dc9a:	4a17      	ldr	r2, [pc, #92]	; (800dcf8 <vPortValidateInterruptPriority+0x70>)
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	4413      	add	r3, r2
 800dca0:	781b      	ldrb	r3, [r3, #0]
 800dca2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800dca4:	4b15      	ldr	r3, [pc, #84]	; (800dcfc <vPortValidateInterruptPriority+0x74>)
 800dca6:	781b      	ldrb	r3, [r3, #0]
 800dca8:	7afa      	ldrb	r2, [r7, #11]
 800dcaa:	429a      	cmp	r2, r3
 800dcac:	d20a      	bcs.n	800dcc4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800dcae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcb2:	f383 8811 	msr	BASEPRI, r3
 800dcb6:	f3bf 8f6f 	isb	sy
 800dcba:	f3bf 8f4f 	dsb	sy
 800dcbe:	607b      	str	r3, [r7, #4]
}
 800dcc0:	bf00      	nop
 800dcc2:	e7fe      	b.n	800dcc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800dcc4:	4b0e      	ldr	r3, [pc, #56]	; (800dd00 <vPortValidateInterruptPriority+0x78>)
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800dccc:	4b0d      	ldr	r3, [pc, #52]	; (800dd04 <vPortValidateInterruptPriority+0x7c>)
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	429a      	cmp	r2, r3
 800dcd2:	d90a      	bls.n	800dcea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800dcd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcd8:	f383 8811 	msr	BASEPRI, r3
 800dcdc:	f3bf 8f6f 	isb	sy
 800dce0:	f3bf 8f4f 	dsb	sy
 800dce4:	603b      	str	r3, [r7, #0]
}
 800dce6:	bf00      	nop
 800dce8:	e7fe      	b.n	800dce8 <vPortValidateInterruptPriority+0x60>
	}
 800dcea:	bf00      	nop
 800dcec:	3714      	adds	r7, #20
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf4:	4770      	bx	lr
 800dcf6:	bf00      	nop
 800dcf8:	e000e3f0 	.word	0xe000e3f0
 800dcfc:	20000a48 	.word	0x20000a48
 800dd00:	e000ed0c 	.word	0xe000ed0c
 800dd04:	20000a4c 	.word	0x20000a4c

0800dd08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b08a      	sub	sp, #40	; 0x28
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800dd10:	2300      	movs	r3, #0
 800dd12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800dd14:	f7fe fcee 	bl	800c6f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800dd18:	4b5b      	ldr	r3, [pc, #364]	; (800de88 <pvPortMalloc+0x180>)
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d101      	bne.n	800dd24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800dd20:	f000 f920 	bl	800df64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800dd24:	4b59      	ldr	r3, [pc, #356]	; (800de8c <pvPortMalloc+0x184>)
 800dd26:	681a      	ldr	r2, [r3, #0]
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	4013      	ands	r3, r2
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	f040 8093 	bne.w	800de58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d01d      	beq.n	800dd74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800dd38:	2208      	movs	r2, #8
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	4413      	add	r3, r2
 800dd3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	f003 0307 	and.w	r3, r3, #7
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d014      	beq.n	800dd74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	f023 0307 	bic.w	r3, r3, #7
 800dd50:	3308      	adds	r3, #8
 800dd52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	f003 0307 	and.w	r3, r3, #7
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d00a      	beq.n	800dd74 <pvPortMalloc+0x6c>
	__asm volatile
 800dd5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd62:	f383 8811 	msr	BASEPRI, r3
 800dd66:	f3bf 8f6f 	isb	sy
 800dd6a:	f3bf 8f4f 	dsb	sy
 800dd6e:	617b      	str	r3, [r7, #20]
}
 800dd70:	bf00      	nop
 800dd72:	e7fe      	b.n	800dd72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d06e      	beq.n	800de58 <pvPortMalloc+0x150>
 800dd7a:	4b45      	ldr	r3, [pc, #276]	; (800de90 <pvPortMalloc+0x188>)
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	687a      	ldr	r2, [r7, #4]
 800dd80:	429a      	cmp	r2, r3
 800dd82:	d869      	bhi.n	800de58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800dd84:	4b43      	ldr	r3, [pc, #268]	; (800de94 <pvPortMalloc+0x18c>)
 800dd86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800dd88:	4b42      	ldr	r3, [pc, #264]	; (800de94 <pvPortMalloc+0x18c>)
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dd8e:	e004      	b.n	800dd9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800dd90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800dd94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dd9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd9c:	685b      	ldr	r3, [r3, #4]
 800dd9e:	687a      	ldr	r2, [r7, #4]
 800dda0:	429a      	cmp	r2, r3
 800dda2:	d903      	bls.n	800ddac <pvPortMalloc+0xa4>
 800dda4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d1f1      	bne.n	800dd90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ddac:	4b36      	ldr	r3, [pc, #216]	; (800de88 <pvPortMalloc+0x180>)
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ddb2:	429a      	cmp	r2, r3
 800ddb4:	d050      	beq.n	800de58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ddb6:	6a3b      	ldr	r3, [r7, #32]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	2208      	movs	r2, #8
 800ddbc:	4413      	add	r3, r2
 800ddbe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ddc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddc2:	681a      	ldr	r2, [r3, #0]
 800ddc4:	6a3b      	ldr	r3, [r7, #32]
 800ddc6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ddc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddca:	685a      	ldr	r2, [r3, #4]
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	1ad2      	subs	r2, r2, r3
 800ddd0:	2308      	movs	r3, #8
 800ddd2:	005b      	lsls	r3, r3, #1
 800ddd4:	429a      	cmp	r2, r3
 800ddd6:	d91f      	bls.n	800de18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ddd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	4413      	add	r3, r2
 800ddde:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dde0:	69bb      	ldr	r3, [r7, #24]
 800dde2:	f003 0307 	and.w	r3, r3, #7
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d00a      	beq.n	800de00 <pvPortMalloc+0xf8>
	__asm volatile
 800ddea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddee:	f383 8811 	msr	BASEPRI, r3
 800ddf2:	f3bf 8f6f 	isb	sy
 800ddf6:	f3bf 8f4f 	dsb	sy
 800ddfa:	613b      	str	r3, [r7, #16]
}
 800ddfc:	bf00      	nop
 800ddfe:	e7fe      	b.n	800ddfe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800de00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de02:	685a      	ldr	r2, [r3, #4]
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	1ad2      	subs	r2, r2, r3
 800de08:	69bb      	ldr	r3, [r7, #24]
 800de0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800de0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de0e:	687a      	ldr	r2, [r7, #4]
 800de10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800de12:	69b8      	ldr	r0, [r7, #24]
 800de14:	f000 f908 	bl	800e028 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800de18:	4b1d      	ldr	r3, [pc, #116]	; (800de90 <pvPortMalloc+0x188>)
 800de1a:	681a      	ldr	r2, [r3, #0]
 800de1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de1e:	685b      	ldr	r3, [r3, #4]
 800de20:	1ad3      	subs	r3, r2, r3
 800de22:	4a1b      	ldr	r2, [pc, #108]	; (800de90 <pvPortMalloc+0x188>)
 800de24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800de26:	4b1a      	ldr	r3, [pc, #104]	; (800de90 <pvPortMalloc+0x188>)
 800de28:	681a      	ldr	r2, [r3, #0]
 800de2a:	4b1b      	ldr	r3, [pc, #108]	; (800de98 <pvPortMalloc+0x190>)
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	429a      	cmp	r2, r3
 800de30:	d203      	bcs.n	800de3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800de32:	4b17      	ldr	r3, [pc, #92]	; (800de90 <pvPortMalloc+0x188>)
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	4a18      	ldr	r2, [pc, #96]	; (800de98 <pvPortMalloc+0x190>)
 800de38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800de3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de3c:	685a      	ldr	r2, [r3, #4]
 800de3e:	4b13      	ldr	r3, [pc, #76]	; (800de8c <pvPortMalloc+0x184>)
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	431a      	orrs	r2, r3
 800de44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800de48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de4a:	2200      	movs	r2, #0
 800de4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800de4e:	4b13      	ldr	r3, [pc, #76]	; (800de9c <pvPortMalloc+0x194>)
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	3301      	adds	r3, #1
 800de54:	4a11      	ldr	r2, [pc, #68]	; (800de9c <pvPortMalloc+0x194>)
 800de56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800de58:	f7fe fc5a 	bl	800c710 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800de5c:	69fb      	ldr	r3, [r7, #28]
 800de5e:	f003 0307 	and.w	r3, r3, #7
 800de62:	2b00      	cmp	r3, #0
 800de64:	d00a      	beq.n	800de7c <pvPortMalloc+0x174>
	__asm volatile
 800de66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de6a:	f383 8811 	msr	BASEPRI, r3
 800de6e:	f3bf 8f6f 	isb	sy
 800de72:	f3bf 8f4f 	dsb	sy
 800de76:	60fb      	str	r3, [r7, #12]
}
 800de78:	bf00      	nop
 800de7a:	e7fe      	b.n	800de7a <pvPortMalloc+0x172>
	return pvReturn;
 800de7c:	69fb      	ldr	r3, [r7, #28]
}
 800de7e:	4618      	mov	r0, r3
 800de80:	3728      	adds	r7, #40	; 0x28
 800de82:	46bd      	mov	sp, r7
 800de84:	bd80      	pop	{r7, pc}
 800de86:	bf00      	nop
 800de88:	20004658 	.word	0x20004658
 800de8c:	2000466c 	.word	0x2000466c
 800de90:	2000465c 	.word	0x2000465c
 800de94:	20004650 	.word	0x20004650
 800de98:	20004660 	.word	0x20004660
 800de9c:	20004664 	.word	0x20004664

0800dea0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b086      	sub	sp, #24
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d04d      	beq.n	800df4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800deb2:	2308      	movs	r3, #8
 800deb4:	425b      	negs	r3, r3
 800deb6:	697a      	ldr	r2, [r7, #20]
 800deb8:	4413      	add	r3, r2
 800deba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800debc:	697b      	ldr	r3, [r7, #20]
 800debe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dec0:	693b      	ldr	r3, [r7, #16]
 800dec2:	685a      	ldr	r2, [r3, #4]
 800dec4:	4b24      	ldr	r3, [pc, #144]	; (800df58 <vPortFree+0xb8>)
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	4013      	ands	r3, r2
 800deca:	2b00      	cmp	r3, #0
 800decc:	d10a      	bne.n	800dee4 <vPortFree+0x44>
	__asm volatile
 800dece:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ded2:	f383 8811 	msr	BASEPRI, r3
 800ded6:	f3bf 8f6f 	isb	sy
 800deda:	f3bf 8f4f 	dsb	sy
 800dede:	60fb      	str	r3, [r7, #12]
}
 800dee0:	bf00      	nop
 800dee2:	e7fe      	b.n	800dee2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800dee4:	693b      	ldr	r3, [r7, #16]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d00a      	beq.n	800df02 <vPortFree+0x62>
	__asm volatile
 800deec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800def0:	f383 8811 	msr	BASEPRI, r3
 800def4:	f3bf 8f6f 	isb	sy
 800def8:	f3bf 8f4f 	dsb	sy
 800defc:	60bb      	str	r3, [r7, #8]
}
 800defe:	bf00      	nop
 800df00:	e7fe      	b.n	800df00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800df02:	693b      	ldr	r3, [r7, #16]
 800df04:	685a      	ldr	r2, [r3, #4]
 800df06:	4b14      	ldr	r3, [pc, #80]	; (800df58 <vPortFree+0xb8>)
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	4013      	ands	r3, r2
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d01e      	beq.n	800df4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800df10:	693b      	ldr	r3, [r7, #16]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d11a      	bne.n	800df4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800df18:	693b      	ldr	r3, [r7, #16]
 800df1a:	685a      	ldr	r2, [r3, #4]
 800df1c:	4b0e      	ldr	r3, [pc, #56]	; (800df58 <vPortFree+0xb8>)
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	43db      	mvns	r3, r3
 800df22:	401a      	ands	r2, r3
 800df24:	693b      	ldr	r3, [r7, #16]
 800df26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800df28:	f7fe fbe4 	bl	800c6f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800df2c:	693b      	ldr	r3, [r7, #16]
 800df2e:	685a      	ldr	r2, [r3, #4]
 800df30:	4b0a      	ldr	r3, [pc, #40]	; (800df5c <vPortFree+0xbc>)
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	4413      	add	r3, r2
 800df36:	4a09      	ldr	r2, [pc, #36]	; (800df5c <vPortFree+0xbc>)
 800df38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800df3a:	6938      	ldr	r0, [r7, #16]
 800df3c:	f000 f874 	bl	800e028 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800df40:	4b07      	ldr	r3, [pc, #28]	; (800df60 <vPortFree+0xc0>)
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	3301      	adds	r3, #1
 800df46:	4a06      	ldr	r2, [pc, #24]	; (800df60 <vPortFree+0xc0>)
 800df48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800df4a:	f7fe fbe1 	bl	800c710 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800df4e:	bf00      	nop
 800df50:	3718      	adds	r7, #24
 800df52:	46bd      	mov	sp, r7
 800df54:	bd80      	pop	{r7, pc}
 800df56:	bf00      	nop
 800df58:	2000466c 	.word	0x2000466c
 800df5c:	2000465c 	.word	0x2000465c
 800df60:	20004668 	.word	0x20004668

0800df64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800df64:	b480      	push	{r7}
 800df66:	b085      	sub	sp, #20
 800df68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800df6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800df6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800df70:	4b27      	ldr	r3, [pc, #156]	; (800e010 <prvHeapInit+0xac>)
 800df72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	f003 0307 	and.w	r3, r3, #7
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d00c      	beq.n	800df98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	3307      	adds	r3, #7
 800df82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	f023 0307 	bic.w	r3, r3, #7
 800df8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800df8c:	68ba      	ldr	r2, [r7, #8]
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	1ad3      	subs	r3, r2, r3
 800df92:	4a1f      	ldr	r2, [pc, #124]	; (800e010 <prvHeapInit+0xac>)
 800df94:	4413      	add	r3, r2
 800df96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800df9c:	4a1d      	ldr	r2, [pc, #116]	; (800e014 <prvHeapInit+0xb0>)
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dfa2:	4b1c      	ldr	r3, [pc, #112]	; (800e014 <prvHeapInit+0xb0>)
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	68ba      	ldr	r2, [r7, #8]
 800dfac:	4413      	add	r3, r2
 800dfae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dfb0:	2208      	movs	r2, #8
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	1a9b      	subs	r3, r3, r2
 800dfb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	f023 0307 	bic.w	r3, r3, #7
 800dfbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	4a15      	ldr	r2, [pc, #84]	; (800e018 <prvHeapInit+0xb4>)
 800dfc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dfc6:	4b14      	ldr	r3, [pc, #80]	; (800e018 <prvHeapInit+0xb4>)
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	2200      	movs	r2, #0
 800dfcc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800dfce:	4b12      	ldr	r3, [pc, #72]	; (800e018 <prvHeapInit+0xb4>)
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dfda:	683b      	ldr	r3, [r7, #0]
 800dfdc:	68fa      	ldr	r2, [r7, #12]
 800dfde:	1ad2      	subs	r2, r2, r3
 800dfe0:	683b      	ldr	r3, [r7, #0]
 800dfe2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dfe4:	4b0c      	ldr	r3, [pc, #48]	; (800e018 <prvHeapInit+0xb4>)
 800dfe6:	681a      	ldr	r2, [r3, #0]
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dfec:	683b      	ldr	r3, [r7, #0]
 800dfee:	685b      	ldr	r3, [r3, #4]
 800dff0:	4a0a      	ldr	r2, [pc, #40]	; (800e01c <prvHeapInit+0xb8>)
 800dff2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dff4:	683b      	ldr	r3, [r7, #0]
 800dff6:	685b      	ldr	r3, [r3, #4]
 800dff8:	4a09      	ldr	r2, [pc, #36]	; (800e020 <prvHeapInit+0xbc>)
 800dffa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dffc:	4b09      	ldr	r3, [pc, #36]	; (800e024 <prvHeapInit+0xc0>)
 800dffe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e002:	601a      	str	r2, [r3, #0]
}
 800e004:	bf00      	nop
 800e006:	3714      	adds	r7, #20
 800e008:	46bd      	mov	sp, r7
 800e00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00e:	4770      	bx	lr
 800e010:	20000a50 	.word	0x20000a50
 800e014:	20004650 	.word	0x20004650
 800e018:	20004658 	.word	0x20004658
 800e01c:	20004660 	.word	0x20004660
 800e020:	2000465c 	.word	0x2000465c
 800e024:	2000466c 	.word	0x2000466c

0800e028 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e028:	b480      	push	{r7}
 800e02a:	b085      	sub	sp, #20
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e030:	4b28      	ldr	r3, [pc, #160]	; (800e0d4 <prvInsertBlockIntoFreeList+0xac>)
 800e032:	60fb      	str	r3, [r7, #12]
 800e034:	e002      	b.n	800e03c <prvInsertBlockIntoFreeList+0x14>
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	60fb      	str	r3, [r7, #12]
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	687a      	ldr	r2, [r7, #4]
 800e042:	429a      	cmp	r2, r3
 800e044:	d8f7      	bhi.n	800e036 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	685b      	ldr	r3, [r3, #4]
 800e04e:	68ba      	ldr	r2, [r7, #8]
 800e050:	4413      	add	r3, r2
 800e052:	687a      	ldr	r2, [r7, #4]
 800e054:	429a      	cmp	r2, r3
 800e056:	d108      	bne.n	800e06a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	685a      	ldr	r2, [r3, #4]
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	685b      	ldr	r3, [r3, #4]
 800e060:	441a      	add	r2, r3
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	685b      	ldr	r3, [r3, #4]
 800e072:	68ba      	ldr	r2, [r7, #8]
 800e074:	441a      	add	r2, r3
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	429a      	cmp	r2, r3
 800e07c:	d118      	bne.n	800e0b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	681a      	ldr	r2, [r3, #0]
 800e082:	4b15      	ldr	r3, [pc, #84]	; (800e0d8 <prvInsertBlockIntoFreeList+0xb0>)
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	429a      	cmp	r2, r3
 800e088:	d00d      	beq.n	800e0a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	685a      	ldr	r2, [r3, #4]
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	685b      	ldr	r3, [r3, #4]
 800e094:	441a      	add	r2, r3
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	681a      	ldr	r2, [r3, #0]
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	601a      	str	r2, [r3, #0]
 800e0a4:	e008      	b.n	800e0b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e0a6:	4b0c      	ldr	r3, [pc, #48]	; (800e0d8 <prvInsertBlockIntoFreeList+0xb0>)
 800e0a8:	681a      	ldr	r2, [r3, #0]
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	601a      	str	r2, [r3, #0]
 800e0ae:	e003      	b.n	800e0b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	681a      	ldr	r2, [r3, #0]
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e0b8:	68fa      	ldr	r2, [r7, #12]
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	429a      	cmp	r2, r3
 800e0be:	d002      	beq.n	800e0c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	687a      	ldr	r2, [r7, #4]
 800e0c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e0c6:	bf00      	nop
 800e0c8:	3714      	adds	r7, #20
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d0:	4770      	bx	lr
 800e0d2:	bf00      	nop
 800e0d4:	20004650 	.word	0x20004650
 800e0d8:	20004658 	.word	0x20004658

0800e0dc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800e0e0:	2201      	movs	r2, #1
 800e0e2:	490e      	ldr	r1, [pc, #56]	; (800e11c <MX_USB_HOST_Init+0x40>)
 800e0e4:	480e      	ldr	r0, [pc, #56]	; (800e120 <MX_USB_HOST_Init+0x44>)
 800e0e6:	f7fb fb33 	bl	8009750 <USBH_Init>
 800e0ea:	4603      	mov	r3, r0
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d001      	beq.n	800e0f4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800e0f0:	f7f3 fb7a 	bl	80017e8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800e0f4:	490b      	ldr	r1, [pc, #44]	; (800e124 <MX_USB_HOST_Init+0x48>)
 800e0f6:	480a      	ldr	r0, [pc, #40]	; (800e120 <MX_USB_HOST_Init+0x44>)
 800e0f8:	f7fb fbe0 	bl	80098bc <USBH_RegisterClass>
 800e0fc:	4603      	mov	r3, r0
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d001      	beq.n	800e106 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800e102:	f7f3 fb71 	bl	80017e8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800e106:	4806      	ldr	r0, [pc, #24]	; (800e120 <MX_USB_HOST_Init+0x44>)
 800e108:	f7fb fc64 	bl	80099d4 <USBH_Start>
 800e10c:	4603      	mov	r3, r0
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d001      	beq.n	800e116 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800e112:	f7f3 fb69 	bl	80017e8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800e116:	bf00      	nop
 800e118:	bd80      	pop	{r7, pc}
 800e11a:	bf00      	nop
 800e11c:	0800e129 	.word	0x0800e129
 800e120:	20004ac8 	.word	0x20004ac8
 800e124:	2000000c 	.word	0x2000000c

0800e128 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800e128:	b480      	push	{r7}
 800e12a:	b083      	sub	sp, #12
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	6078      	str	r0, [r7, #4]
 800e130:	460b      	mov	r3, r1
 800e132:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800e134:	78fb      	ldrb	r3, [r7, #3]
 800e136:	3b01      	subs	r3, #1
 800e138:	2b04      	cmp	r3, #4
 800e13a:	d819      	bhi.n	800e170 <USBH_UserProcess+0x48>
 800e13c:	a201      	add	r2, pc, #4	; (adr r2, 800e144 <USBH_UserProcess+0x1c>)
 800e13e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e142:	bf00      	nop
 800e144:	0800e171 	.word	0x0800e171
 800e148:	0800e161 	.word	0x0800e161
 800e14c:	0800e171 	.word	0x0800e171
 800e150:	0800e169 	.word	0x0800e169
 800e154:	0800e159 	.word	0x0800e159
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800e158:	4b09      	ldr	r3, [pc, #36]	; (800e180 <USBH_UserProcess+0x58>)
 800e15a:	2203      	movs	r2, #3
 800e15c:	701a      	strb	r2, [r3, #0]
  break;
 800e15e:	e008      	b.n	800e172 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800e160:	4b07      	ldr	r3, [pc, #28]	; (800e180 <USBH_UserProcess+0x58>)
 800e162:	2202      	movs	r2, #2
 800e164:	701a      	strb	r2, [r3, #0]
  break;
 800e166:	e004      	b.n	800e172 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800e168:	4b05      	ldr	r3, [pc, #20]	; (800e180 <USBH_UserProcess+0x58>)
 800e16a:	2201      	movs	r2, #1
 800e16c:	701a      	strb	r2, [r3, #0]
  break;
 800e16e:	e000      	b.n	800e172 <USBH_UserProcess+0x4a>

  default:
  break;
 800e170:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800e172:	bf00      	nop
 800e174:	370c      	adds	r7, #12
 800e176:	46bd      	mov	sp, r7
 800e178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17c:	4770      	bx	lr
 800e17e:	bf00      	nop
 800e180:	20004670 	.word	0x20004670

0800e184 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800e184:	b580      	push	{r7, lr}
 800e186:	b08a      	sub	sp, #40	; 0x28
 800e188:	af00      	add	r7, sp, #0
 800e18a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e18c:	f107 0314 	add.w	r3, r7, #20
 800e190:	2200      	movs	r2, #0
 800e192:	601a      	str	r2, [r3, #0]
 800e194:	605a      	str	r2, [r3, #4]
 800e196:	609a      	str	r2, [r3, #8]
 800e198:	60da      	str	r2, [r3, #12]
 800e19a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e1a4:	d147      	bne.n	800e236 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	613b      	str	r3, [r7, #16]
 800e1aa:	4b25      	ldr	r3, [pc, #148]	; (800e240 <HAL_HCD_MspInit+0xbc>)
 800e1ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1ae:	4a24      	ldr	r2, [pc, #144]	; (800e240 <HAL_HCD_MspInit+0xbc>)
 800e1b0:	f043 0301 	orr.w	r3, r3, #1
 800e1b4:	6313      	str	r3, [r2, #48]	; 0x30
 800e1b6:	4b22      	ldr	r3, [pc, #136]	; (800e240 <HAL_HCD_MspInit+0xbc>)
 800e1b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1ba:	f003 0301 	and.w	r3, r3, #1
 800e1be:	613b      	str	r3, [r7, #16]
 800e1c0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800e1c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e1c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800e1d0:	f107 0314 	add.w	r3, r7, #20
 800e1d4:	4619      	mov	r1, r3
 800e1d6:	481b      	ldr	r0, [pc, #108]	; (800e244 <HAL_HCD_MspInit+0xc0>)
 800e1d8:	f7f5 fdce 	bl	8003d78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800e1dc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800e1e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e1e2:	2302      	movs	r3, #2
 800e1e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e1ee:	230a      	movs	r3, #10
 800e1f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e1f2:	f107 0314 	add.w	r3, r7, #20
 800e1f6:	4619      	mov	r1, r3
 800e1f8:	4812      	ldr	r0, [pc, #72]	; (800e244 <HAL_HCD_MspInit+0xc0>)
 800e1fa:	f7f5 fdbd 	bl	8003d78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e1fe:	4b10      	ldr	r3, [pc, #64]	; (800e240 <HAL_HCD_MspInit+0xbc>)
 800e200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e202:	4a0f      	ldr	r2, [pc, #60]	; (800e240 <HAL_HCD_MspInit+0xbc>)
 800e204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e208:	6353      	str	r3, [r2, #52]	; 0x34
 800e20a:	2300      	movs	r3, #0
 800e20c:	60fb      	str	r3, [r7, #12]
 800e20e:	4b0c      	ldr	r3, [pc, #48]	; (800e240 <HAL_HCD_MspInit+0xbc>)
 800e210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e212:	4a0b      	ldr	r2, [pc, #44]	; (800e240 <HAL_HCD_MspInit+0xbc>)
 800e214:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e218:	6453      	str	r3, [r2, #68]	; 0x44
 800e21a:	4b09      	ldr	r3, [pc, #36]	; (800e240 <HAL_HCD_MspInit+0xbc>)
 800e21c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e21e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e222:	60fb      	str	r3, [r7, #12]
 800e224:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800e226:	2200      	movs	r2, #0
 800e228:	2105      	movs	r1, #5
 800e22a:	2043      	movs	r0, #67	; 0x43
 800e22c:	f7f5 fa0a 	bl	8003644 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e230:	2043      	movs	r0, #67	; 0x43
 800e232:	f7f5 fa23 	bl	800367c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e236:	bf00      	nop
 800e238:	3728      	adds	r7, #40	; 0x28
 800e23a:	46bd      	mov	sp, r7
 800e23c:	bd80      	pop	{r7, pc}
 800e23e:	bf00      	nop
 800e240:	40023800 	.word	0x40023800
 800e244:	40020000 	.word	0x40020000

0800e248 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800e248:	b580      	push	{r7, lr}
 800e24a:	b082      	sub	sp, #8
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e256:	4618      	mov	r0, r3
 800e258:	f7fc f869 	bl	800a32e <USBH_LL_IncTimer>
}
 800e25c:	bf00      	nop
 800e25e:	3708      	adds	r7, #8
 800e260:	46bd      	mov	sp, r7
 800e262:	bd80      	pop	{r7, pc}

0800e264 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e264:	b580      	push	{r7, lr}
 800e266:	b082      	sub	sp, #8
 800e268:	af00      	add	r7, sp, #0
 800e26a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e272:	4618      	mov	r0, r3
 800e274:	f7fc f8ad 	bl	800a3d2 <USBH_LL_Connect>
}
 800e278:	bf00      	nop
 800e27a:	3708      	adds	r7, #8
 800e27c:	46bd      	mov	sp, r7
 800e27e:	bd80      	pop	{r7, pc}

0800e280 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b082      	sub	sp, #8
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e28e:	4618      	mov	r0, r3
 800e290:	f7fc f8c2 	bl	800a418 <USBH_LL_Disconnect>
}
 800e294:	bf00      	nop
 800e296:	3708      	adds	r7, #8
 800e298:	46bd      	mov	sp, r7
 800e29a:	bd80      	pop	{r7, pc}

0800e29c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b082      	sub	sp, #8
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	6078      	str	r0, [r7, #4]
 800e2a4:	460b      	mov	r3, r1
 800e2a6:	70fb      	strb	r3, [r7, #3]
 800e2a8:	4613      	mov	r3, r2
 800e2aa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	f7fc f8f7 	bl	800a4a6 <USBH_LL_NotifyURBChange>
#endif
}
 800e2b8:	bf00      	nop
 800e2ba:	3708      	adds	r7, #8
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	bd80      	pop	{r7, pc}

0800e2c0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	b082      	sub	sp, #8
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	f7fc f857 	bl	800a382 <USBH_LL_PortEnabled>
}
 800e2d4:	bf00      	nop
 800e2d6:	3708      	adds	r7, #8
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	bd80      	pop	{r7, pc}

0800e2dc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b082      	sub	sp, #8
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	f7fc f863 	bl	800a3b6 <USBH_LL_PortDisabled>
}
 800e2f0:	bf00      	nop
 800e2f2:	3708      	adds	r7, #8
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	bd80      	pop	{r7, pc}

0800e2f8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b082      	sub	sp, #8
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e306:	2b01      	cmp	r3, #1
 800e308:	d12a      	bne.n	800e360 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800e30a:	4a18      	ldr	r2, [pc, #96]	; (800e36c <USBH_LL_Init+0x74>)
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	4a15      	ldr	r2, [pc, #84]	; (800e36c <USBH_LL_Init+0x74>)
 800e316:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e31a:	4b14      	ldr	r3, [pc, #80]	; (800e36c <USBH_LL_Init+0x74>)
 800e31c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e320:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800e322:	4b12      	ldr	r3, [pc, #72]	; (800e36c <USBH_LL_Init+0x74>)
 800e324:	2208      	movs	r2, #8
 800e326:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800e328:	4b10      	ldr	r3, [pc, #64]	; (800e36c <USBH_LL_Init+0x74>)
 800e32a:	2201      	movs	r2, #1
 800e32c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e32e:	4b0f      	ldr	r3, [pc, #60]	; (800e36c <USBH_LL_Init+0x74>)
 800e330:	2200      	movs	r2, #0
 800e332:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800e334:	4b0d      	ldr	r3, [pc, #52]	; (800e36c <USBH_LL_Init+0x74>)
 800e336:	2202      	movs	r2, #2
 800e338:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e33a:	4b0c      	ldr	r3, [pc, #48]	; (800e36c <USBH_LL_Init+0x74>)
 800e33c:	2200      	movs	r2, #0
 800e33e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800e340:	480a      	ldr	r0, [pc, #40]	; (800e36c <USBH_LL_Init+0x74>)
 800e342:	f7f5 ff00 	bl	8004146 <HAL_HCD_Init>
 800e346:	4603      	mov	r3, r0
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d001      	beq.n	800e350 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800e34c:	f7f3 fa4c 	bl	80017e8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800e350:	4806      	ldr	r0, [pc, #24]	; (800e36c <USBH_LL_Init+0x74>)
 800e352:	f7f6 fae4 	bl	800491e <HAL_HCD_GetCurrentFrame>
 800e356:	4603      	mov	r3, r0
 800e358:	4619      	mov	r1, r3
 800e35a:	6878      	ldr	r0, [r7, #4]
 800e35c:	f7fb ffd8 	bl	800a310 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800e360:	2300      	movs	r3, #0
}
 800e362:	4618      	mov	r0, r3
 800e364:	3708      	adds	r7, #8
 800e366:	46bd      	mov	sp, r7
 800e368:	bd80      	pop	{r7, pc}
 800e36a:	bf00      	nop
 800e36c:	20004eac 	.word	0x20004eac

0800e370 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800e370:	b580      	push	{r7, lr}
 800e372:	b084      	sub	sp, #16
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e378:	2300      	movs	r3, #0
 800e37a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e37c:	2300      	movs	r3, #0
 800e37e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e386:	4618      	mov	r0, r3
 800e388:	f7f6 fa53 	bl	8004832 <HAL_HCD_Start>
 800e38c:	4603      	mov	r3, r0
 800e38e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e390:	7bfb      	ldrb	r3, [r7, #15]
 800e392:	4618      	mov	r0, r3
 800e394:	f000 f95c 	bl	800e650 <USBH_Get_USB_Status>
 800e398:	4603      	mov	r3, r0
 800e39a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e39c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e39e:	4618      	mov	r0, r3
 800e3a0:	3710      	adds	r7, #16
 800e3a2:	46bd      	mov	sp, r7
 800e3a4:	bd80      	pop	{r7, pc}

0800e3a6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800e3a6:	b580      	push	{r7, lr}
 800e3a8:	b084      	sub	sp, #16
 800e3aa:	af00      	add	r7, sp, #0
 800e3ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e3bc:	4618      	mov	r0, r3
 800e3be:	f7f6 fa5b 	bl	8004878 <HAL_HCD_Stop>
 800e3c2:	4603      	mov	r3, r0
 800e3c4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e3c6:	7bfb      	ldrb	r3, [r7, #15]
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	f000 f941 	bl	800e650 <USBH_Get_USB_Status>
 800e3ce:	4603      	mov	r3, r0
 800e3d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e3d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	3710      	adds	r7, #16
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	bd80      	pop	{r7, pc}

0800e3dc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b084      	sub	sp, #16
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800e3e4:	2301      	movs	r3, #1
 800e3e6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	f7f6 faa3 	bl	800493a <HAL_HCD_GetCurrentSpeed>
 800e3f4:	4603      	mov	r3, r0
 800e3f6:	2b02      	cmp	r3, #2
 800e3f8:	d00c      	beq.n	800e414 <USBH_LL_GetSpeed+0x38>
 800e3fa:	2b02      	cmp	r3, #2
 800e3fc:	d80d      	bhi.n	800e41a <USBH_LL_GetSpeed+0x3e>
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d002      	beq.n	800e408 <USBH_LL_GetSpeed+0x2c>
 800e402:	2b01      	cmp	r3, #1
 800e404:	d003      	beq.n	800e40e <USBH_LL_GetSpeed+0x32>
 800e406:	e008      	b.n	800e41a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800e408:	2300      	movs	r3, #0
 800e40a:	73fb      	strb	r3, [r7, #15]
    break;
 800e40c:	e008      	b.n	800e420 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800e40e:	2301      	movs	r3, #1
 800e410:	73fb      	strb	r3, [r7, #15]
    break;
 800e412:	e005      	b.n	800e420 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800e414:	2302      	movs	r3, #2
 800e416:	73fb      	strb	r3, [r7, #15]
    break;
 800e418:	e002      	b.n	800e420 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800e41a:	2301      	movs	r3, #1
 800e41c:	73fb      	strb	r3, [r7, #15]
    break;
 800e41e:	bf00      	nop
  }
  return  speed;
 800e420:	7bfb      	ldrb	r3, [r7, #15]
}
 800e422:	4618      	mov	r0, r3
 800e424:	3710      	adds	r7, #16
 800e426:	46bd      	mov	sp, r7
 800e428:	bd80      	pop	{r7, pc}

0800e42a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800e42a:	b580      	push	{r7, lr}
 800e42c:	b084      	sub	sp, #16
 800e42e:	af00      	add	r7, sp, #0
 800e430:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e432:	2300      	movs	r3, #0
 800e434:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e436:	2300      	movs	r3, #0
 800e438:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e440:	4618      	mov	r0, r3
 800e442:	f7f6 fa36 	bl	80048b2 <HAL_HCD_ResetPort>
 800e446:	4603      	mov	r3, r0
 800e448:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e44a:	7bfb      	ldrb	r3, [r7, #15]
 800e44c:	4618      	mov	r0, r3
 800e44e:	f000 f8ff 	bl	800e650 <USBH_Get_USB_Status>
 800e452:	4603      	mov	r3, r0
 800e454:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e456:	7bbb      	ldrb	r3, [r7, #14]
}
 800e458:	4618      	mov	r0, r3
 800e45a:	3710      	adds	r7, #16
 800e45c:	46bd      	mov	sp, r7
 800e45e:	bd80      	pop	{r7, pc}

0800e460 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e460:	b580      	push	{r7, lr}
 800e462:	b082      	sub	sp, #8
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
 800e468:	460b      	mov	r3, r1
 800e46a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e472:	78fa      	ldrb	r2, [r7, #3]
 800e474:	4611      	mov	r1, r2
 800e476:	4618      	mov	r0, r3
 800e478:	f7f6 fa3d 	bl	80048f6 <HAL_HCD_HC_GetXferCount>
 800e47c:	4603      	mov	r3, r0
}
 800e47e:	4618      	mov	r0, r3
 800e480:	3708      	adds	r7, #8
 800e482:	46bd      	mov	sp, r7
 800e484:	bd80      	pop	{r7, pc}

0800e486 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e486:	b590      	push	{r4, r7, lr}
 800e488:	b089      	sub	sp, #36	; 0x24
 800e48a:	af04      	add	r7, sp, #16
 800e48c:	6078      	str	r0, [r7, #4]
 800e48e:	4608      	mov	r0, r1
 800e490:	4611      	mov	r1, r2
 800e492:	461a      	mov	r2, r3
 800e494:	4603      	mov	r3, r0
 800e496:	70fb      	strb	r3, [r7, #3]
 800e498:	460b      	mov	r3, r1
 800e49a:	70bb      	strb	r3, [r7, #2]
 800e49c:	4613      	mov	r3, r2
 800e49e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e4ae:	787c      	ldrb	r4, [r7, #1]
 800e4b0:	78ba      	ldrb	r2, [r7, #2]
 800e4b2:	78f9      	ldrb	r1, [r7, #3]
 800e4b4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e4b6:	9302      	str	r3, [sp, #8]
 800e4b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e4bc:	9301      	str	r3, [sp, #4]
 800e4be:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e4c2:	9300      	str	r3, [sp, #0]
 800e4c4:	4623      	mov	r3, r4
 800e4c6:	f7f5 fea0 	bl	800420a <HAL_HCD_HC_Init>
 800e4ca:	4603      	mov	r3, r0
 800e4cc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800e4ce:	7bfb      	ldrb	r3, [r7, #15]
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	f000 f8bd 	bl	800e650 <USBH_Get_USB_Status>
 800e4d6:	4603      	mov	r3, r0
 800e4d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e4da:	7bbb      	ldrb	r3, [r7, #14]
}
 800e4dc:	4618      	mov	r0, r3
 800e4de:	3714      	adds	r7, #20
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	bd90      	pop	{r4, r7, pc}

0800e4e4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b084      	sub	sp, #16
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
 800e4ec:	460b      	mov	r3, r1
 800e4ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e4fe:	78fa      	ldrb	r2, [r7, #3]
 800e500:	4611      	mov	r1, r2
 800e502:	4618      	mov	r0, r3
 800e504:	f7f5 ff10 	bl	8004328 <HAL_HCD_HC_Halt>
 800e508:	4603      	mov	r3, r0
 800e50a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e50c:	7bfb      	ldrb	r3, [r7, #15]
 800e50e:	4618      	mov	r0, r3
 800e510:	f000 f89e 	bl	800e650 <USBH_Get_USB_Status>
 800e514:	4603      	mov	r3, r0
 800e516:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e518:	7bbb      	ldrb	r3, [r7, #14]
}
 800e51a:	4618      	mov	r0, r3
 800e51c:	3710      	adds	r7, #16
 800e51e:	46bd      	mov	sp, r7
 800e520:	bd80      	pop	{r7, pc}

0800e522 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800e522:	b590      	push	{r4, r7, lr}
 800e524:	b089      	sub	sp, #36	; 0x24
 800e526:	af04      	add	r7, sp, #16
 800e528:	6078      	str	r0, [r7, #4]
 800e52a:	4608      	mov	r0, r1
 800e52c:	4611      	mov	r1, r2
 800e52e:	461a      	mov	r2, r3
 800e530:	4603      	mov	r3, r0
 800e532:	70fb      	strb	r3, [r7, #3]
 800e534:	460b      	mov	r3, r1
 800e536:	70bb      	strb	r3, [r7, #2]
 800e538:	4613      	mov	r3, r2
 800e53a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e53c:	2300      	movs	r3, #0
 800e53e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e540:	2300      	movs	r3, #0
 800e542:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e54a:	787c      	ldrb	r4, [r7, #1]
 800e54c:	78ba      	ldrb	r2, [r7, #2]
 800e54e:	78f9      	ldrb	r1, [r7, #3]
 800e550:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e554:	9303      	str	r3, [sp, #12]
 800e556:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e558:	9302      	str	r3, [sp, #8]
 800e55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e55c:	9301      	str	r3, [sp, #4]
 800e55e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e562:	9300      	str	r3, [sp, #0]
 800e564:	4623      	mov	r3, r4
 800e566:	f7f5 ff03 	bl	8004370 <HAL_HCD_HC_SubmitRequest>
 800e56a:	4603      	mov	r3, r0
 800e56c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800e56e:	7bfb      	ldrb	r3, [r7, #15]
 800e570:	4618      	mov	r0, r3
 800e572:	f000 f86d 	bl	800e650 <USBH_Get_USB_Status>
 800e576:	4603      	mov	r3, r0
 800e578:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e57a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e57c:	4618      	mov	r0, r3
 800e57e:	3714      	adds	r7, #20
 800e580:	46bd      	mov	sp, r7
 800e582:	bd90      	pop	{r4, r7, pc}

0800e584 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e584:	b580      	push	{r7, lr}
 800e586:	b082      	sub	sp, #8
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]
 800e58c:	460b      	mov	r3, r1
 800e58e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e596:	78fa      	ldrb	r2, [r7, #3]
 800e598:	4611      	mov	r1, r2
 800e59a:	4618      	mov	r0, r3
 800e59c:	f7f6 f997 	bl	80048ce <HAL_HCD_HC_GetURBState>
 800e5a0:	4603      	mov	r3, r0
}
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	3708      	adds	r7, #8
 800e5a6:	46bd      	mov	sp, r7
 800e5a8:	bd80      	pop	{r7, pc}

0800e5aa <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800e5aa:	b580      	push	{r7, lr}
 800e5ac:	b082      	sub	sp, #8
 800e5ae:	af00      	add	r7, sp, #0
 800e5b0:	6078      	str	r0, [r7, #4]
 800e5b2:	460b      	mov	r3, r1
 800e5b4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e5bc:	2b01      	cmp	r3, #1
 800e5be:	d103      	bne.n	800e5c8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800e5c0:	78fb      	ldrb	r3, [r7, #3]
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	f000 f870 	bl	800e6a8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800e5c8:	20c8      	movs	r0, #200	; 0xc8
 800e5ca:	f7f3 fdc5 	bl	8002158 <HAL_Delay>
  return USBH_OK;
 800e5ce:	2300      	movs	r3, #0
}
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	3708      	adds	r7, #8
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	bd80      	pop	{r7, pc}

0800e5d8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800e5d8:	b480      	push	{r7}
 800e5da:	b085      	sub	sp, #20
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
 800e5e0:	460b      	mov	r3, r1
 800e5e2:	70fb      	strb	r3, [r7, #3]
 800e5e4:	4613      	mov	r3, r2
 800e5e6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e5ee:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800e5f0:	78fb      	ldrb	r3, [r7, #3]
 800e5f2:	68fa      	ldr	r2, [r7, #12]
 800e5f4:	212c      	movs	r1, #44	; 0x2c
 800e5f6:	fb01 f303 	mul.w	r3, r1, r3
 800e5fa:	4413      	add	r3, r2
 800e5fc:	333b      	adds	r3, #59	; 0x3b
 800e5fe:	781b      	ldrb	r3, [r3, #0]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d009      	beq.n	800e618 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800e604:	78fb      	ldrb	r3, [r7, #3]
 800e606:	68fa      	ldr	r2, [r7, #12]
 800e608:	212c      	movs	r1, #44	; 0x2c
 800e60a:	fb01 f303 	mul.w	r3, r1, r3
 800e60e:	4413      	add	r3, r2
 800e610:	3354      	adds	r3, #84	; 0x54
 800e612:	78ba      	ldrb	r2, [r7, #2]
 800e614:	701a      	strb	r2, [r3, #0]
 800e616:	e008      	b.n	800e62a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800e618:	78fb      	ldrb	r3, [r7, #3]
 800e61a:	68fa      	ldr	r2, [r7, #12]
 800e61c:	212c      	movs	r1, #44	; 0x2c
 800e61e:	fb01 f303 	mul.w	r3, r1, r3
 800e622:	4413      	add	r3, r2
 800e624:	3355      	adds	r3, #85	; 0x55
 800e626:	78ba      	ldrb	r2, [r7, #2]
 800e628:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800e62a:	2300      	movs	r3, #0
}
 800e62c:	4618      	mov	r0, r3
 800e62e:	3714      	adds	r7, #20
 800e630:	46bd      	mov	sp, r7
 800e632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e636:	4770      	bx	lr

0800e638 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800e638:	b580      	push	{r7, lr}
 800e63a:	b082      	sub	sp, #8
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800e640:	6878      	ldr	r0, [r7, #4]
 800e642:	f7f3 fd89 	bl	8002158 <HAL_Delay>
}
 800e646:	bf00      	nop
 800e648:	3708      	adds	r7, #8
 800e64a:	46bd      	mov	sp, r7
 800e64c:	bd80      	pop	{r7, pc}
	...

0800e650 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e650:	b480      	push	{r7}
 800e652:	b085      	sub	sp, #20
 800e654:	af00      	add	r7, sp, #0
 800e656:	4603      	mov	r3, r0
 800e658:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e65a:	2300      	movs	r3, #0
 800e65c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e65e:	79fb      	ldrb	r3, [r7, #7]
 800e660:	2b03      	cmp	r3, #3
 800e662:	d817      	bhi.n	800e694 <USBH_Get_USB_Status+0x44>
 800e664:	a201      	add	r2, pc, #4	; (adr r2, 800e66c <USBH_Get_USB_Status+0x1c>)
 800e666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e66a:	bf00      	nop
 800e66c:	0800e67d 	.word	0x0800e67d
 800e670:	0800e683 	.word	0x0800e683
 800e674:	0800e689 	.word	0x0800e689
 800e678:	0800e68f 	.word	0x0800e68f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800e67c:	2300      	movs	r3, #0
 800e67e:	73fb      	strb	r3, [r7, #15]
    break;
 800e680:	e00b      	b.n	800e69a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800e682:	2302      	movs	r3, #2
 800e684:	73fb      	strb	r3, [r7, #15]
    break;
 800e686:	e008      	b.n	800e69a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800e688:	2301      	movs	r3, #1
 800e68a:	73fb      	strb	r3, [r7, #15]
    break;
 800e68c:	e005      	b.n	800e69a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800e68e:	2302      	movs	r3, #2
 800e690:	73fb      	strb	r3, [r7, #15]
    break;
 800e692:	e002      	b.n	800e69a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800e694:	2302      	movs	r3, #2
 800e696:	73fb      	strb	r3, [r7, #15]
    break;
 800e698:	bf00      	nop
  }
  return usb_status;
 800e69a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e69c:	4618      	mov	r0, r3
 800e69e:	3714      	adds	r7, #20
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a6:	4770      	bx	lr

0800e6a8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b084      	sub	sp, #16
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	4603      	mov	r3, r0
 800e6b0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800e6b2:	79fb      	ldrb	r3, [r7, #7]
 800e6b4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800e6b6:	79fb      	ldrb	r3, [r7, #7]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d102      	bne.n	800e6c2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800e6bc:	2301      	movs	r3, #1
 800e6be:	73fb      	strb	r3, [r7, #15]
 800e6c0:	e001      	b.n	800e6c6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800e6c6:	7bfb      	ldrb	r3, [r7, #15]
 800e6c8:	461a      	mov	r2, r3
 800e6ca:	2101      	movs	r1, #1
 800e6cc:	4803      	ldr	r0, [pc, #12]	; (800e6dc <MX_DriverVbusFS+0x34>)
 800e6ce:	f7f5 fd07 	bl	80040e0 <HAL_GPIO_WritePin>
}
 800e6d2:	bf00      	nop
 800e6d4:	3710      	adds	r7, #16
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	bd80      	pop	{r7, pc}
 800e6da:	bf00      	nop
 800e6dc:	40020800 	.word	0x40020800

0800e6e0 <__errno>:
 800e6e0:	4b01      	ldr	r3, [pc, #4]	; (800e6e8 <__errno+0x8>)
 800e6e2:	6818      	ldr	r0, [r3, #0]
 800e6e4:	4770      	bx	lr
 800e6e6:	bf00      	nop
 800e6e8:	20000030 	.word	0x20000030

0800e6ec <__libc_init_array>:
 800e6ec:	b570      	push	{r4, r5, r6, lr}
 800e6ee:	4d0d      	ldr	r5, [pc, #52]	; (800e724 <__libc_init_array+0x38>)
 800e6f0:	4c0d      	ldr	r4, [pc, #52]	; (800e728 <__libc_init_array+0x3c>)
 800e6f2:	1b64      	subs	r4, r4, r5
 800e6f4:	10a4      	asrs	r4, r4, #2
 800e6f6:	2600      	movs	r6, #0
 800e6f8:	42a6      	cmp	r6, r4
 800e6fa:	d109      	bne.n	800e710 <__libc_init_array+0x24>
 800e6fc:	4d0b      	ldr	r5, [pc, #44]	; (800e72c <__libc_init_array+0x40>)
 800e6fe:	4c0c      	ldr	r4, [pc, #48]	; (800e730 <__libc_init_array+0x44>)
 800e700:	f000 fcc8 	bl	800f094 <_init>
 800e704:	1b64      	subs	r4, r4, r5
 800e706:	10a4      	asrs	r4, r4, #2
 800e708:	2600      	movs	r6, #0
 800e70a:	42a6      	cmp	r6, r4
 800e70c:	d105      	bne.n	800e71a <__libc_init_array+0x2e>
 800e70e:	bd70      	pop	{r4, r5, r6, pc}
 800e710:	f855 3b04 	ldr.w	r3, [r5], #4
 800e714:	4798      	blx	r3
 800e716:	3601      	adds	r6, #1
 800e718:	e7ee      	b.n	800e6f8 <__libc_init_array+0xc>
 800e71a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e71e:	4798      	blx	r3
 800e720:	3601      	adds	r6, #1
 800e722:	e7f2      	b.n	800e70a <__libc_init_array+0x1e>
 800e724:	0800f2b0 	.word	0x0800f2b0
 800e728:	0800f2b0 	.word	0x0800f2b0
 800e72c:	0800f2b0 	.word	0x0800f2b0
 800e730:	0800f2b4 	.word	0x0800f2b4

0800e734 <__retarget_lock_acquire_recursive>:
 800e734:	4770      	bx	lr

0800e736 <__retarget_lock_release_recursive>:
 800e736:	4770      	bx	lr

0800e738 <malloc>:
 800e738:	4b02      	ldr	r3, [pc, #8]	; (800e744 <malloc+0xc>)
 800e73a:	4601      	mov	r1, r0
 800e73c:	6818      	ldr	r0, [r3, #0]
 800e73e:	f000 b871 	b.w	800e824 <_malloc_r>
 800e742:	bf00      	nop
 800e744:	20000030 	.word	0x20000030

0800e748 <free>:
 800e748:	4b02      	ldr	r3, [pc, #8]	; (800e754 <free+0xc>)
 800e74a:	4601      	mov	r1, r0
 800e74c:	6818      	ldr	r0, [r3, #0]
 800e74e:	f000 b819 	b.w	800e784 <_free_r>
 800e752:	bf00      	nop
 800e754:	20000030 	.word	0x20000030

0800e758 <memcpy>:
 800e758:	440a      	add	r2, r1
 800e75a:	4291      	cmp	r1, r2
 800e75c:	f100 33ff 	add.w	r3, r0, #4294967295
 800e760:	d100      	bne.n	800e764 <memcpy+0xc>
 800e762:	4770      	bx	lr
 800e764:	b510      	push	{r4, lr}
 800e766:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e76a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e76e:	4291      	cmp	r1, r2
 800e770:	d1f9      	bne.n	800e766 <memcpy+0xe>
 800e772:	bd10      	pop	{r4, pc}

0800e774 <memset>:
 800e774:	4402      	add	r2, r0
 800e776:	4603      	mov	r3, r0
 800e778:	4293      	cmp	r3, r2
 800e77a:	d100      	bne.n	800e77e <memset+0xa>
 800e77c:	4770      	bx	lr
 800e77e:	f803 1b01 	strb.w	r1, [r3], #1
 800e782:	e7f9      	b.n	800e778 <memset+0x4>

0800e784 <_free_r>:
 800e784:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e786:	2900      	cmp	r1, #0
 800e788:	d048      	beq.n	800e81c <_free_r+0x98>
 800e78a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e78e:	9001      	str	r0, [sp, #4]
 800e790:	2b00      	cmp	r3, #0
 800e792:	f1a1 0404 	sub.w	r4, r1, #4
 800e796:	bfb8      	it	lt
 800e798:	18e4      	addlt	r4, r4, r3
 800e79a:	f000 f937 	bl	800ea0c <__malloc_lock>
 800e79e:	4a20      	ldr	r2, [pc, #128]	; (800e820 <_free_r+0x9c>)
 800e7a0:	9801      	ldr	r0, [sp, #4]
 800e7a2:	6813      	ldr	r3, [r2, #0]
 800e7a4:	4615      	mov	r5, r2
 800e7a6:	b933      	cbnz	r3, 800e7b6 <_free_r+0x32>
 800e7a8:	6063      	str	r3, [r4, #4]
 800e7aa:	6014      	str	r4, [r2, #0]
 800e7ac:	b003      	add	sp, #12
 800e7ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e7b2:	f000 b931 	b.w	800ea18 <__malloc_unlock>
 800e7b6:	42a3      	cmp	r3, r4
 800e7b8:	d90b      	bls.n	800e7d2 <_free_r+0x4e>
 800e7ba:	6821      	ldr	r1, [r4, #0]
 800e7bc:	1862      	adds	r2, r4, r1
 800e7be:	4293      	cmp	r3, r2
 800e7c0:	bf04      	itt	eq
 800e7c2:	681a      	ldreq	r2, [r3, #0]
 800e7c4:	685b      	ldreq	r3, [r3, #4]
 800e7c6:	6063      	str	r3, [r4, #4]
 800e7c8:	bf04      	itt	eq
 800e7ca:	1852      	addeq	r2, r2, r1
 800e7cc:	6022      	streq	r2, [r4, #0]
 800e7ce:	602c      	str	r4, [r5, #0]
 800e7d0:	e7ec      	b.n	800e7ac <_free_r+0x28>
 800e7d2:	461a      	mov	r2, r3
 800e7d4:	685b      	ldr	r3, [r3, #4]
 800e7d6:	b10b      	cbz	r3, 800e7dc <_free_r+0x58>
 800e7d8:	42a3      	cmp	r3, r4
 800e7da:	d9fa      	bls.n	800e7d2 <_free_r+0x4e>
 800e7dc:	6811      	ldr	r1, [r2, #0]
 800e7de:	1855      	adds	r5, r2, r1
 800e7e0:	42a5      	cmp	r5, r4
 800e7e2:	d10b      	bne.n	800e7fc <_free_r+0x78>
 800e7e4:	6824      	ldr	r4, [r4, #0]
 800e7e6:	4421      	add	r1, r4
 800e7e8:	1854      	adds	r4, r2, r1
 800e7ea:	42a3      	cmp	r3, r4
 800e7ec:	6011      	str	r1, [r2, #0]
 800e7ee:	d1dd      	bne.n	800e7ac <_free_r+0x28>
 800e7f0:	681c      	ldr	r4, [r3, #0]
 800e7f2:	685b      	ldr	r3, [r3, #4]
 800e7f4:	6053      	str	r3, [r2, #4]
 800e7f6:	4421      	add	r1, r4
 800e7f8:	6011      	str	r1, [r2, #0]
 800e7fa:	e7d7      	b.n	800e7ac <_free_r+0x28>
 800e7fc:	d902      	bls.n	800e804 <_free_r+0x80>
 800e7fe:	230c      	movs	r3, #12
 800e800:	6003      	str	r3, [r0, #0]
 800e802:	e7d3      	b.n	800e7ac <_free_r+0x28>
 800e804:	6825      	ldr	r5, [r4, #0]
 800e806:	1961      	adds	r1, r4, r5
 800e808:	428b      	cmp	r3, r1
 800e80a:	bf04      	itt	eq
 800e80c:	6819      	ldreq	r1, [r3, #0]
 800e80e:	685b      	ldreq	r3, [r3, #4]
 800e810:	6063      	str	r3, [r4, #4]
 800e812:	bf04      	itt	eq
 800e814:	1949      	addeq	r1, r1, r5
 800e816:	6021      	streq	r1, [r4, #0]
 800e818:	6054      	str	r4, [r2, #4]
 800e81a:	e7c7      	b.n	800e7ac <_free_r+0x28>
 800e81c:	b003      	add	sp, #12
 800e81e:	bd30      	pop	{r4, r5, pc}
 800e820:	20004674 	.word	0x20004674

0800e824 <_malloc_r>:
 800e824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e826:	1ccd      	adds	r5, r1, #3
 800e828:	f025 0503 	bic.w	r5, r5, #3
 800e82c:	3508      	adds	r5, #8
 800e82e:	2d0c      	cmp	r5, #12
 800e830:	bf38      	it	cc
 800e832:	250c      	movcc	r5, #12
 800e834:	2d00      	cmp	r5, #0
 800e836:	4606      	mov	r6, r0
 800e838:	db01      	blt.n	800e83e <_malloc_r+0x1a>
 800e83a:	42a9      	cmp	r1, r5
 800e83c:	d903      	bls.n	800e846 <_malloc_r+0x22>
 800e83e:	230c      	movs	r3, #12
 800e840:	6033      	str	r3, [r6, #0]
 800e842:	2000      	movs	r0, #0
 800e844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e846:	f000 f8e1 	bl	800ea0c <__malloc_lock>
 800e84a:	4921      	ldr	r1, [pc, #132]	; (800e8d0 <_malloc_r+0xac>)
 800e84c:	680a      	ldr	r2, [r1, #0]
 800e84e:	4614      	mov	r4, r2
 800e850:	b99c      	cbnz	r4, 800e87a <_malloc_r+0x56>
 800e852:	4f20      	ldr	r7, [pc, #128]	; (800e8d4 <_malloc_r+0xb0>)
 800e854:	683b      	ldr	r3, [r7, #0]
 800e856:	b923      	cbnz	r3, 800e862 <_malloc_r+0x3e>
 800e858:	4621      	mov	r1, r4
 800e85a:	4630      	mov	r0, r6
 800e85c:	f000 f8a6 	bl	800e9ac <_sbrk_r>
 800e860:	6038      	str	r0, [r7, #0]
 800e862:	4629      	mov	r1, r5
 800e864:	4630      	mov	r0, r6
 800e866:	f000 f8a1 	bl	800e9ac <_sbrk_r>
 800e86a:	1c43      	adds	r3, r0, #1
 800e86c:	d123      	bne.n	800e8b6 <_malloc_r+0x92>
 800e86e:	230c      	movs	r3, #12
 800e870:	6033      	str	r3, [r6, #0]
 800e872:	4630      	mov	r0, r6
 800e874:	f000 f8d0 	bl	800ea18 <__malloc_unlock>
 800e878:	e7e3      	b.n	800e842 <_malloc_r+0x1e>
 800e87a:	6823      	ldr	r3, [r4, #0]
 800e87c:	1b5b      	subs	r3, r3, r5
 800e87e:	d417      	bmi.n	800e8b0 <_malloc_r+0x8c>
 800e880:	2b0b      	cmp	r3, #11
 800e882:	d903      	bls.n	800e88c <_malloc_r+0x68>
 800e884:	6023      	str	r3, [r4, #0]
 800e886:	441c      	add	r4, r3
 800e888:	6025      	str	r5, [r4, #0]
 800e88a:	e004      	b.n	800e896 <_malloc_r+0x72>
 800e88c:	6863      	ldr	r3, [r4, #4]
 800e88e:	42a2      	cmp	r2, r4
 800e890:	bf0c      	ite	eq
 800e892:	600b      	streq	r3, [r1, #0]
 800e894:	6053      	strne	r3, [r2, #4]
 800e896:	4630      	mov	r0, r6
 800e898:	f000 f8be 	bl	800ea18 <__malloc_unlock>
 800e89c:	f104 000b 	add.w	r0, r4, #11
 800e8a0:	1d23      	adds	r3, r4, #4
 800e8a2:	f020 0007 	bic.w	r0, r0, #7
 800e8a6:	1ac2      	subs	r2, r0, r3
 800e8a8:	d0cc      	beq.n	800e844 <_malloc_r+0x20>
 800e8aa:	1a1b      	subs	r3, r3, r0
 800e8ac:	50a3      	str	r3, [r4, r2]
 800e8ae:	e7c9      	b.n	800e844 <_malloc_r+0x20>
 800e8b0:	4622      	mov	r2, r4
 800e8b2:	6864      	ldr	r4, [r4, #4]
 800e8b4:	e7cc      	b.n	800e850 <_malloc_r+0x2c>
 800e8b6:	1cc4      	adds	r4, r0, #3
 800e8b8:	f024 0403 	bic.w	r4, r4, #3
 800e8bc:	42a0      	cmp	r0, r4
 800e8be:	d0e3      	beq.n	800e888 <_malloc_r+0x64>
 800e8c0:	1a21      	subs	r1, r4, r0
 800e8c2:	4630      	mov	r0, r6
 800e8c4:	f000 f872 	bl	800e9ac <_sbrk_r>
 800e8c8:	3001      	adds	r0, #1
 800e8ca:	d1dd      	bne.n	800e888 <_malloc_r+0x64>
 800e8cc:	e7cf      	b.n	800e86e <_malloc_r+0x4a>
 800e8ce:	bf00      	nop
 800e8d0:	20004674 	.word	0x20004674
 800e8d4:	20004678 	.word	0x20004678

0800e8d8 <cleanup_glue>:
 800e8d8:	b538      	push	{r3, r4, r5, lr}
 800e8da:	460c      	mov	r4, r1
 800e8dc:	6809      	ldr	r1, [r1, #0]
 800e8de:	4605      	mov	r5, r0
 800e8e0:	b109      	cbz	r1, 800e8e6 <cleanup_glue+0xe>
 800e8e2:	f7ff fff9 	bl	800e8d8 <cleanup_glue>
 800e8e6:	4621      	mov	r1, r4
 800e8e8:	4628      	mov	r0, r5
 800e8ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e8ee:	f7ff bf49 	b.w	800e784 <_free_r>
	...

0800e8f4 <_reclaim_reent>:
 800e8f4:	4b2c      	ldr	r3, [pc, #176]	; (800e9a8 <_reclaim_reent+0xb4>)
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	4283      	cmp	r3, r0
 800e8fa:	b570      	push	{r4, r5, r6, lr}
 800e8fc:	4604      	mov	r4, r0
 800e8fe:	d051      	beq.n	800e9a4 <_reclaim_reent+0xb0>
 800e900:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e902:	b143      	cbz	r3, 800e916 <_reclaim_reent+0x22>
 800e904:	68db      	ldr	r3, [r3, #12]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d14a      	bne.n	800e9a0 <_reclaim_reent+0xac>
 800e90a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e90c:	6819      	ldr	r1, [r3, #0]
 800e90e:	b111      	cbz	r1, 800e916 <_reclaim_reent+0x22>
 800e910:	4620      	mov	r0, r4
 800e912:	f7ff ff37 	bl	800e784 <_free_r>
 800e916:	6961      	ldr	r1, [r4, #20]
 800e918:	b111      	cbz	r1, 800e920 <_reclaim_reent+0x2c>
 800e91a:	4620      	mov	r0, r4
 800e91c:	f7ff ff32 	bl	800e784 <_free_r>
 800e920:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e922:	b111      	cbz	r1, 800e92a <_reclaim_reent+0x36>
 800e924:	4620      	mov	r0, r4
 800e926:	f7ff ff2d 	bl	800e784 <_free_r>
 800e92a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e92c:	b111      	cbz	r1, 800e934 <_reclaim_reent+0x40>
 800e92e:	4620      	mov	r0, r4
 800e930:	f7ff ff28 	bl	800e784 <_free_r>
 800e934:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800e936:	b111      	cbz	r1, 800e93e <_reclaim_reent+0x4a>
 800e938:	4620      	mov	r0, r4
 800e93a:	f7ff ff23 	bl	800e784 <_free_r>
 800e93e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800e940:	b111      	cbz	r1, 800e948 <_reclaim_reent+0x54>
 800e942:	4620      	mov	r0, r4
 800e944:	f7ff ff1e 	bl	800e784 <_free_r>
 800e948:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800e94a:	b111      	cbz	r1, 800e952 <_reclaim_reent+0x5e>
 800e94c:	4620      	mov	r0, r4
 800e94e:	f7ff ff19 	bl	800e784 <_free_r>
 800e952:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800e954:	b111      	cbz	r1, 800e95c <_reclaim_reent+0x68>
 800e956:	4620      	mov	r0, r4
 800e958:	f7ff ff14 	bl	800e784 <_free_r>
 800e95c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e95e:	b111      	cbz	r1, 800e966 <_reclaim_reent+0x72>
 800e960:	4620      	mov	r0, r4
 800e962:	f7ff ff0f 	bl	800e784 <_free_r>
 800e966:	69a3      	ldr	r3, [r4, #24]
 800e968:	b1e3      	cbz	r3, 800e9a4 <_reclaim_reent+0xb0>
 800e96a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e96c:	4620      	mov	r0, r4
 800e96e:	4798      	blx	r3
 800e970:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e972:	b1b9      	cbz	r1, 800e9a4 <_reclaim_reent+0xb0>
 800e974:	4620      	mov	r0, r4
 800e976:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e97a:	f7ff bfad 	b.w	800e8d8 <cleanup_glue>
 800e97e:	5949      	ldr	r1, [r1, r5]
 800e980:	b941      	cbnz	r1, 800e994 <_reclaim_reent+0xa0>
 800e982:	3504      	adds	r5, #4
 800e984:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e986:	2d80      	cmp	r5, #128	; 0x80
 800e988:	68d9      	ldr	r1, [r3, #12]
 800e98a:	d1f8      	bne.n	800e97e <_reclaim_reent+0x8a>
 800e98c:	4620      	mov	r0, r4
 800e98e:	f7ff fef9 	bl	800e784 <_free_r>
 800e992:	e7ba      	b.n	800e90a <_reclaim_reent+0x16>
 800e994:	680e      	ldr	r6, [r1, #0]
 800e996:	4620      	mov	r0, r4
 800e998:	f7ff fef4 	bl	800e784 <_free_r>
 800e99c:	4631      	mov	r1, r6
 800e99e:	e7ef      	b.n	800e980 <_reclaim_reent+0x8c>
 800e9a0:	2500      	movs	r5, #0
 800e9a2:	e7ef      	b.n	800e984 <_reclaim_reent+0x90>
 800e9a4:	bd70      	pop	{r4, r5, r6, pc}
 800e9a6:	bf00      	nop
 800e9a8:	20000030 	.word	0x20000030

0800e9ac <_sbrk_r>:
 800e9ac:	b538      	push	{r3, r4, r5, lr}
 800e9ae:	4d06      	ldr	r5, [pc, #24]	; (800e9c8 <_sbrk_r+0x1c>)
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	4604      	mov	r4, r0
 800e9b4:	4608      	mov	r0, r1
 800e9b6:	602b      	str	r3, [r5, #0]
 800e9b8:	f7f3 fb1a 	bl	8001ff0 <_sbrk>
 800e9bc:	1c43      	adds	r3, r0, #1
 800e9be:	d102      	bne.n	800e9c6 <_sbrk_r+0x1a>
 800e9c0:	682b      	ldr	r3, [r5, #0]
 800e9c2:	b103      	cbz	r3, 800e9c6 <_sbrk_r+0x1a>
 800e9c4:	6023      	str	r3, [r4, #0]
 800e9c6:	bd38      	pop	{r3, r4, r5, pc}
 800e9c8:	200051bc 	.word	0x200051bc

0800e9cc <siprintf>:
 800e9cc:	b40e      	push	{r1, r2, r3}
 800e9ce:	b500      	push	{lr}
 800e9d0:	b09c      	sub	sp, #112	; 0x70
 800e9d2:	ab1d      	add	r3, sp, #116	; 0x74
 800e9d4:	9002      	str	r0, [sp, #8]
 800e9d6:	9006      	str	r0, [sp, #24]
 800e9d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e9dc:	4809      	ldr	r0, [pc, #36]	; (800ea04 <siprintf+0x38>)
 800e9de:	9107      	str	r1, [sp, #28]
 800e9e0:	9104      	str	r1, [sp, #16]
 800e9e2:	4909      	ldr	r1, [pc, #36]	; (800ea08 <siprintf+0x3c>)
 800e9e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9e8:	9105      	str	r1, [sp, #20]
 800e9ea:	6800      	ldr	r0, [r0, #0]
 800e9ec:	9301      	str	r3, [sp, #4]
 800e9ee:	a902      	add	r1, sp, #8
 800e9f0:	f000 f874 	bl	800eadc <_svfiprintf_r>
 800e9f4:	9b02      	ldr	r3, [sp, #8]
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	701a      	strb	r2, [r3, #0]
 800e9fa:	b01c      	add	sp, #112	; 0x70
 800e9fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800ea00:	b003      	add	sp, #12
 800ea02:	4770      	bx	lr
 800ea04:	20000030 	.word	0x20000030
 800ea08:	ffff0208 	.word	0xffff0208

0800ea0c <__malloc_lock>:
 800ea0c:	4801      	ldr	r0, [pc, #4]	; (800ea14 <__malloc_lock+0x8>)
 800ea0e:	f7ff be91 	b.w	800e734 <__retarget_lock_acquire_recursive>
 800ea12:	bf00      	nop
 800ea14:	200051b4 	.word	0x200051b4

0800ea18 <__malloc_unlock>:
 800ea18:	4801      	ldr	r0, [pc, #4]	; (800ea20 <__malloc_unlock+0x8>)
 800ea1a:	f7ff be8c 	b.w	800e736 <__retarget_lock_release_recursive>
 800ea1e:	bf00      	nop
 800ea20:	200051b4 	.word	0x200051b4

0800ea24 <__ssputs_r>:
 800ea24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea28:	688e      	ldr	r6, [r1, #8]
 800ea2a:	429e      	cmp	r6, r3
 800ea2c:	4682      	mov	sl, r0
 800ea2e:	460c      	mov	r4, r1
 800ea30:	4690      	mov	r8, r2
 800ea32:	461f      	mov	r7, r3
 800ea34:	d838      	bhi.n	800eaa8 <__ssputs_r+0x84>
 800ea36:	898a      	ldrh	r2, [r1, #12]
 800ea38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ea3c:	d032      	beq.n	800eaa4 <__ssputs_r+0x80>
 800ea3e:	6825      	ldr	r5, [r4, #0]
 800ea40:	6909      	ldr	r1, [r1, #16]
 800ea42:	eba5 0901 	sub.w	r9, r5, r1
 800ea46:	6965      	ldr	r5, [r4, #20]
 800ea48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ea4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ea50:	3301      	adds	r3, #1
 800ea52:	444b      	add	r3, r9
 800ea54:	106d      	asrs	r5, r5, #1
 800ea56:	429d      	cmp	r5, r3
 800ea58:	bf38      	it	cc
 800ea5a:	461d      	movcc	r5, r3
 800ea5c:	0553      	lsls	r3, r2, #21
 800ea5e:	d531      	bpl.n	800eac4 <__ssputs_r+0xa0>
 800ea60:	4629      	mov	r1, r5
 800ea62:	f7ff fedf 	bl	800e824 <_malloc_r>
 800ea66:	4606      	mov	r6, r0
 800ea68:	b950      	cbnz	r0, 800ea80 <__ssputs_r+0x5c>
 800ea6a:	230c      	movs	r3, #12
 800ea6c:	f8ca 3000 	str.w	r3, [sl]
 800ea70:	89a3      	ldrh	r3, [r4, #12]
 800ea72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea76:	81a3      	strh	r3, [r4, #12]
 800ea78:	f04f 30ff 	mov.w	r0, #4294967295
 800ea7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea80:	6921      	ldr	r1, [r4, #16]
 800ea82:	464a      	mov	r2, r9
 800ea84:	f7ff fe68 	bl	800e758 <memcpy>
 800ea88:	89a3      	ldrh	r3, [r4, #12]
 800ea8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ea8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea92:	81a3      	strh	r3, [r4, #12]
 800ea94:	6126      	str	r6, [r4, #16]
 800ea96:	6165      	str	r5, [r4, #20]
 800ea98:	444e      	add	r6, r9
 800ea9a:	eba5 0509 	sub.w	r5, r5, r9
 800ea9e:	6026      	str	r6, [r4, #0]
 800eaa0:	60a5      	str	r5, [r4, #8]
 800eaa2:	463e      	mov	r6, r7
 800eaa4:	42be      	cmp	r6, r7
 800eaa6:	d900      	bls.n	800eaaa <__ssputs_r+0x86>
 800eaa8:	463e      	mov	r6, r7
 800eaaa:	4632      	mov	r2, r6
 800eaac:	6820      	ldr	r0, [r4, #0]
 800eaae:	4641      	mov	r1, r8
 800eab0:	f000 faa8 	bl	800f004 <memmove>
 800eab4:	68a3      	ldr	r3, [r4, #8]
 800eab6:	6822      	ldr	r2, [r4, #0]
 800eab8:	1b9b      	subs	r3, r3, r6
 800eaba:	4432      	add	r2, r6
 800eabc:	60a3      	str	r3, [r4, #8]
 800eabe:	6022      	str	r2, [r4, #0]
 800eac0:	2000      	movs	r0, #0
 800eac2:	e7db      	b.n	800ea7c <__ssputs_r+0x58>
 800eac4:	462a      	mov	r2, r5
 800eac6:	f000 fab7 	bl	800f038 <_realloc_r>
 800eaca:	4606      	mov	r6, r0
 800eacc:	2800      	cmp	r0, #0
 800eace:	d1e1      	bne.n	800ea94 <__ssputs_r+0x70>
 800ead0:	6921      	ldr	r1, [r4, #16]
 800ead2:	4650      	mov	r0, sl
 800ead4:	f7ff fe56 	bl	800e784 <_free_r>
 800ead8:	e7c7      	b.n	800ea6a <__ssputs_r+0x46>
	...

0800eadc <_svfiprintf_r>:
 800eadc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eae0:	4698      	mov	r8, r3
 800eae2:	898b      	ldrh	r3, [r1, #12]
 800eae4:	061b      	lsls	r3, r3, #24
 800eae6:	b09d      	sub	sp, #116	; 0x74
 800eae8:	4607      	mov	r7, r0
 800eaea:	460d      	mov	r5, r1
 800eaec:	4614      	mov	r4, r2
 800eaee:	d50e      	bpl.n	800eb0e <_svfiprintf_r+0x32>
 800eaf0:	690b      	ldr	r3, [r1, #16]
 800eaf2:	b963      	cbnz	r3, 800eb0e <_svfiprintf_r+0x32>
 800eaf4:	2140      	movs	r1, #64	; 0x40
 800eaf6:	f7ff fe95 	bl	800e824 <_malloc_r>
 800eafa:	6028      	str	r0, [r5, #0]
 800eafc:	6128      	str	r0, [r5, #16]
 800eafe:	b920      	cbnz	r0, 800eb0a <_svfiprintf_r+0x2e>
 800eb00:	230c      	movs	r3, #12
 800eb02:	603b      	str	r3, [r7, #0]
 800eb04:	f04f 30ff 	mov.w	r0, #4294967295
 800eb08:	e0d1      	b.n	800ecae <_svfiprintf_r+0x1d2>
 800eb0a:	2340      	movs	r3, #64	; 0x40
 800eb0c:	616b      	str	r3, [r5, #20]
 800eb0e:	2300      	movs	r3, #0
 800eb10:	9309      	str	r3, [sp, #36]	; 0x24
 800eb12:	2320      	movs	r3, #32
 800eb14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eb18:	f8cd 800c 	str.w	r8, [sp, #12]
 800eb1c:	2330      	movs	r3, #48	; 0x30
 800eb1e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ecc8 <_svfiprintf_r+0x1ec>
 800eb22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eb26:	f04f 0901 	mov.w	r9, #1
 800eb2a:	4623      	mov	r3, r4
 800eb2c:	469a      	mov	sl, r3
 800eb2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eb32:	b10a      	cbz	r2, 800eb38 <_svfiprintf_r+0x5c>
 800eb34:	2a25      	cmp	r2, #37	; 0x25
 800eb36:	d1f9      	bne.n	800eb2c <_svfiprintf_r+0x50>
 800eb38:	ebba 0b04 	subs.w	fp, sl, r4
 800eb3c:	d00b      	beq.n	800eb56 <_svfiprintf_r+0x7a>
 800eb3e:	465b      	mov	r3, fp
 800eb40:	4622      	mov	r2, r4
 800eb42:	4629      	mov	r1, r5
 800eb44:	4638      	mov	r0, r7
 800eb46:	f7ff ff6d 	bl	800ea24 <__ssputs_r>
 800eb4a:	3001      	adds	r0, #1
 800eb4c:	f000 80aa 	beq.w	800eca4 <_svfiprintf_r+0x1c8>
 800eb50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eb52:	445a      	add	r2, fp
 800eb54:	9209      	str	r2, [sp, #36]	; 0x24
 800eb56:	f89a 3000 	ldrb.w	r3, [sl]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	f000 80a2 	beq.w	800eca4 <_svfiprintf_r+0x1c8>
 800eb60:	2300      	movs	r3, #0
 800eb62:	f04f 32ff 	mov.w	r2, #4294967295
 800eb66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eb6a:	f10a 0a01 	add.w	sl, sl, #1
 800eb6e:	9304      	str	r3, [sp, #16]
 800eb70:	9307      	str	r3, [sp, #28]
 800eb72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eb76:	931a      	str	r3, [sp, #104]	; 0x68
 800eb78:	4654      	mov	r4, sl
 800eb7a:	2205      	movs	r2, #5
 800eb7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb80:	4851      	ldr	r0, [pc, #324]	; (800ecc8 <_svfiprintf_r+0x1ec>)
 800eb82:	f7f1 fb2d 	bl	80001e0 <memchr>
 800eb86:	9a04      	ldr	r2, [sp, #16]
 800eb88:	b9d8      	cbnz	r0, 800ebc2 <_svfiprintf_r+0xe6>
 800eb8a:	06d0      	lsls	r0, r2, #27
 800eb8c:	bf44      	itt	mi
 800eb8e:	2320      	movmi	r3, #32
 800eb90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb94:	0711      	lsls	r1, r2, #28
 800eb96:	bf44      	itt	mi
 800eb98:	232b      	movmi	r3, #43	; 0x2b
 800eb9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb9e:	f89a 3000 	ldrb.w	r3, [sl]
 800eba2:	2b2a      	cmp	r3, #42	; 0x2a
 800eba4:	d015      	beq.n	800ebd2 <_svfiprintf_r+0xf6>
 800eba6:	9a07      	ldr	r2, [sp, #28]
 800eba8:	4654      	mov	r4, sl
 800ebaa:	2000      	movs	r0, #0
 800ebac:	f04f 0c0a 	mov.w	ip, #10
 800ebb0:	4621      	mov	r1, r4
 800ebb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ebb6:	3b30      	subs	r3, #48	; 0x30
 800ebb8:	2b09      	cmp	r3, #9
 800ebba:	d94e      	bls.n	800ec5a <_svfiprintf_r+0x17e>
 800ebbc:	b1b0      	cbz	r0, 800ebec <_svfiprintf_r+0x110>
 800ebbe:	9207      	str	r2, [sp, #28]
 800ebc0:	e014      	b.n	800ebec <_svfiprintf_r+0x110>
 800ebc2:	eba0 0308 	sub.w	r3, r0, r8
 800ebc6:	fa09 f303 	lsl.w	r3, r9, r3
 800ebca:	4313      	orrs	r3, r2
 800ebcc:	9304      	str	r3, [sp, #16]
 800ebce:	46a2      	mov	sl, r4
 800ebd0:	e7d2      	b.n	800eb78 <_svfiprintf_r+0x9c>
 800ebd2:	9b03      	ldr	r3, [sp, #12]
 800ebd4:	1d19      	adds	r1, r3, #4
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	9103      	str	r1, [sp, #12]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	bfbb      	ittet	lt
 800ebde:	425b      	neglt	r3, r3
 800ebe0:	f042 0202 	orrlt.w	r2, r2, #2
 800ebe4:	9307      	strge	r3, [sp, #28]
 800ebe6:	9307      	strlt	r3, [sp, #28]
 800ebe8:	bfb8      	it	lt
 800ebea:	9204      	strlt	r2, [sp, #16]
 800ebec:	7823      	ldrb	r3, [r4, #0]
 800ebee:	2b2e      	cmp	r3, #46	; 0x2e
 800ebf0:	d10c      	bne.n	800ec0c <_svfiprintf_r+0x130>
 800ebf2:	7863      	ldrb	r3, [r4, #1]
 800ebf4:	2b2a      	cmp	r3, #42	; 0x2a
 800ebf6:	d135      	bne.n	800ec64 <_svfiprintf_r+0x188>
 800ebf8:	9b03      	ldr	r3, [sp, #12]
 800ebfa:	1d1a      	adds	r2, r3, #4
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	9203      	str	r2, [sp, #12]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	bfb8      	it	lt
 800ec04:	f04f 33ff 	movlt.w	r3, #4294967295
 800ec08:	3402      	adds	r4, #2
 800ec0a:	9305      	str	r3, [sp, #20]
 800ec0c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ecd8 <_svfiprintf_r+0x1fc>
 800ec10:	7821      	ldrb	r1, [r4, #0]
 800ec12:	2203      	movs	r2, #3
 800ec14:	4650      	mov	r0, sl
 800ec16:	f7f1 fae3 	bl	80001e0 <memchr>
 800ec1a:	b140      	cbz	r0, 800ec2e <_svfiprintf_r+0x152>
 800ec1c:	2340      	movs	r3, #64	; 0x40
 800ec1e:	eba0 000a 	sub.w	r0, r0, sl
 800ec22:	fa03 f000 	lsl.w	r0, r3, r0
 800ec26:	9b04      	ldr	r3, [sp, #16]
 800ec28:	4303      	orrs	r3, r0
 800ec2a:	3401      	adds	r4, #1
 800ec2c:	9304      	str	r3, [sp, #16]
 800ec2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec32:	4826      	ldr	r0, [pc, #152]	; (800eccc <_svfiprintf_r+0x1f0>)
 800ec34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ec38:	2206      	movs	r2, #6
 800ec3a:	f7f1 fad1 	bl	80001e0 <memchr>
 800ec3e:	2800      	cmp	r0, #0
 800ec40:	d038      	beq.n	800ecb4 <_svfiprintf_r+0x1d8>
 800ec42:	4b23      	ldr	r3, [pc, #140]	; (800ecd0 <_svfiprintf_r+0x1f4>)
 800ec44:	bb1b      	cbnz	r3, 800ec8e <_svfiprintf_r+0x1b2>
 800ec46:	9b03      	ldr	r3, [sp, #12]
 800ec48:	3307      	adds	r3, #7
 800ec4a:	f023 0307 	bic.w	r3, r3, #7
 800ec4e:	3308      	adds	r3, #8
 800ec50:	9303      	str	r3, [sp, #12]
 800ec52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec54:	4433      	add	r3, r6
 800ec56:	9309      	str	r3, [sp, #36]	; 0x24
 800ec58:	e767      	b.n	800eb2a <_svfiprintf_r+0x4e>
 800ec5a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ec5e:	460c      	mov	r4, r1
 800ec60:	2001      	movs	r0, #1
 800ec62:	e7a5      	b.n	800ebb0 <_svfiprintf_r+0xd4>
 800ec64:	2300      	movs	r3, #0
 800ec66:	3401      	adds	r4, #1
 800ec68:	9305      	str	r3, [sp, #20]
 800ec6a:	4619      	mov	r1, r3
 800ec6c:	f04f 0c0a 	mov.w	ip, #10
 800ec70:	4620      	mov	r0, r4
 800ec72:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec76:	3a30      	subs	r2, #48	; 0x30
 800ec78:	2a09      	cmp	r2, #9
 800ec7a:	d903      	bls.n	800ec84 <_svfiprintf_r+0x1a8>
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d0c5      	beq.n	800ec0c <_svfiprintf_r+0x130>
 800ec80:	9105      	str	r1, [sp, #20]
 800ec82:	e7c3      	b.n	800ec0c <_svfiprintf_r+0x130>
 800ec84:	fb0c 2101 	mla	r1, ip, r1, r2
 800ec88:	4604      	mov	r4, r0
 800ec8a:	2301      	movs	r3, #1
 800ec8c:	e7f0      	b.n	800ec70 <_svfiprintf_r+0x194>
 800ec8e:	ab03      	add	r3, sp, #12
 800ec90:	9300      	str	r3, [sp, #0]
 800ec92:	462a      	mov	r2, r5
 800ec94:	4b0f      	ldr	r3, [pc, #60]	; (800ecd4 <_svfiprintf_r+0x1f8>)
 800ec96:	a904      	add	r1, sp, #16
 800ec98:	4638      	mov	r0, r7
 800ec9a:	f3af 8000 	nop.w
 800ec9e:	1c42      	adds	r2, r0, #1
 800eca0:	4606      	mov	r6, r0
 800eca2:	d1d6      	bne.n	800ec52 <_svfiprintf_r+0x176>
 800eca4:	89ab      	ldrh	r3, [r5, #12]
 800eca6:	065b      	lsls	r3, r3, #25
 800eca8:	f53f af2c 	bmi.w	800eb04 <_svfiprintf_r+0x28>
 800ecac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ecae:	b01d      	add	sp, #116	; 0x74
 800ecb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecb4:	ab03      	add	r3, sp, #12
 800ecb6:	9300      	str	r3, [sp, #0]
 800ecb8:	462a      	mov	r2, r5
 800ecba:	4b06      	ldr	r3, [pc, #24]	; (800ecd4 <_svfiprintf_r+0x1f8>)
 800ecbc:	a904      	add	r1, sp, #16
 800ecbe:	4638      	mov	r0, r7
 800ecc0:	f000 f87a 	bl	800edb8 <_printf_i>
 800ecc4:	e7eb      	b.n	800ec9e <_svfiprintf_r+0x1c2>
 800ecc6:	bf00      	nop
 800ecc8:	0800f274 	.word	0x0800f274
 800eccc:	0800f27e 	.word	0x0800f27e
 800ecd0:	00000000 	.word	0x00000000
 800ecd4:	0800ea25 	.word	0x0800ea25
 800ecd8:	0800f27a 	.word	0x0800f27a

0800ecdc <_printf_common>:
 800ecdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ece0:	4616      	mov	r6, r2
 800ece2:	4699      	mov	r9, r3
 800ece4:	688a      	ldr	r2, [r1, #8]
 800ece6:	690b      	ldr	r3, [r1, #16]
 800ece8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ecec:	4293      	cmp	r3, r2
 800ecee:	bfb8      	it	lt
 800ecf0:	4613      	movlt	r3, r2
 800ecf2:	6033      	str	r3, [r6, #0]
 800ecf4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ecf8:	4607      	mov	r7, r0
 800ecfa:	460c      	mov	r4, r1
 800ecfc:	b10a      	cbz	r2, 800ed02 <_printf_common+0x26>
 800ecfe:	3301      	adds	r3, #1
 800ed00:	6033      	str	r3, [r6, #0]
 800ed02:	6823      	ldr	r3, [r4, #0]
 800ed04:	0699      	lsls	r1, r3, #26
 800ed06:	bf42      	ittt	mi
 800ed08:	6833      	ldrmi	r3, [r6, #0]
 800ed0a:	3302      	addmi	r3, #2
 800ed0c:	6033      	strmi	r3, [r6, #0]
 800ed0e:	6825      	ldr	r5, [r4, #0]
 800ed10:	f015 0506 	ands.w	r5, r5, #6
 800ed14:	d106      	bne.n	800ed24 <_printf_common+0x48>
 800ed16:	f104 0a19 	add.w	sl, r4, #25
 800ed1a:	68e3      	ldr	r3, [r4, #12]
 800ed1c:	6832      	ldr	r2, [r6, #0]
 800ed1e:	1a9b      	subs	r3, r3, r2
 800ed20:	42ab      	cmp	r3, r5
 800ed22:	dc26      	bgt.n	800ed72 <_printf_common+0x96>
 800ed24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ed28:	1e13      	subs	r3, r2, #0
 800ed2a:	6822      	ldr	r2, [r4, #0]
 800ed2c:	bf18      	it	ne
 800ed2e:	2301      	movne	r3, #1
 800ed30:	0692      	lsls	r2, r2, #26
 800ed32:	d42b      	bmi.n	800ed8c <_printf_common+0xb0>
 800ed34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ed38:	4649      	mov	r1, r9
 800ed3a:	4638      	mov	r0, r7
 800ed3c:	47c0      	blx	r8
 800ed3e:	3001      	adds	r0, #1
 800ed40:	d01e      	beq.n	800ed80 <_printf_common+0xa4>
 800ed42:	6823      	ldr	r3, [r4, #0]
 800ed44:	68e5      	ldr	r5, [r4, #12]
 800ed46:	6832      	ldr	r2, [r6, #0]
 800ed48:	f003 0306 	and.w	r3, r3, #6
 800ed4c:	2b04      	cmp	r3, #4
 800ed4e:	bf08      	it	eq
 800ed50:	1aad      	subeq	r5, r5, r2
 800ed52:	68a3      	ldr	r3, [r4, #8]
 800ed54:	6922      	ldr	r2, [r4, #16]
 800ed56:	bf0c      	ite	eq
 800ed58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ed5c:	2500      	movne	r5, #0
 800ed5e:	4293      	cmp	r3, r2
 800ed60:	bfc4      	itt	gt
 800ed62:	1a9b      	subgt	r3, r3, r2
 800ed64:	18ed      	addgt	r5, r5, r3
 800ed66:	2600      	movs	r6, #0
 800ed68:	341a      	adds	r4, #26
 800ed6a:	42b5      	cmp	r5, r6
 800ed6c:	d11a      	bne.n	800eda4 <_printf_common+0xc8>
 800ed6e:	2000      	movs	r0, #0
 800ed70:	e008      	b.n	800ed84 <_printf_common+0xa8>
 800ed72:	2301      	movs	r3, #1
 800ed74:	4652      	mov	r2, sl
 800ed76:	4649      	mov	r1, r9
 800ed78:	4638      	mov	r0, r7
 800ed7a:	47c0      	blx	r8
 800ed7c:	3001      	adds	r0, #1
 800ed7e:	d103      	bne.n	800ed88 <_printf_common+0xac>
 800ed80:	f04f 30ff 	mov.w	r0, #4294967295
 800ed84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed88:	3501      	adds	r5, #1
 800ed8a:	e7c6      	b.n	800ed1a <_printf_common+0x3e>
 800ed8c:	18e1      	adds	r1, r4, r3
 800ed8e:	1c5a      	adds	r2, r3, #1
 800ed90:	2030      	movs	r0, #48	; 0x30
 800ed92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ed96:	4422      	add	r2, r4
 800ed98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ed9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800eda0:	3302      	adds	r3, #2
 800eda2:	e7c7      	b.n	800ed34 <_printf_common+0x58>
 800eda4:	2301      	movs	r3, #1
 800eda6:	4622      	mov	r2, r4
 800eda8:	4649      	mov	r1, r9
 800edaa:	4638      	mov	r0, r7
 800edac:	47c0      	blx	r8
 800edae:	3001      	adds	r0, #1
 800edb0:	d0e6      	beq.n	800ed80 <_printf_common+0xa4>
 800edb2:	3601      	adds	r6, #1
 800edb4:	e7d9      	b.n	800ed6a <_printf_common+0x8e>
	...

0800edb8 <_printf_i>:
 800edb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800edbc:	460c      	mov	r4, r1
 800edbe:	4691      	mov	r9, r2
 800edc0:	7e27      	ldrb	r7, [r4, #24]
 800edc2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800edc4:	2f78      	cmp	r7, #120	; 0x78
 800edc6:	4680      	mov	r8, r0
 800edc8:	469a      	mov	sl, r3
 800edca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800edce:	d807      	bhi.n	800ede0 <_printf_i+0x28>
 800edd0:	2f62      	cmp	r7, #98	; 0x62
 800edd2:	d80a      	bhi.n	800edea <_printf_i+0x32>
 800edd4:	2f00      	cmp	r7, #0
 800edd6:	f000 80d8 	beq.w	800ef8a <_printf_i+0x1d2>
 800edda:	2f58      	cmp	r7, #88	; 0x58
 800eddc:	f000 80a3 	beq.w	800ef26 <_printf_i+0x16e>
 800ede0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ede4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ede8:	e03a      	b.n	800ee60 <_printf_i+0xa8>
 800edea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800edee:	2b15      	cmp	r3, #21
 800edf0:	d8f6      	bhi.n	800ede0 <_printf_i+0x28>
 800edf2:	a001      	add	r0, pc, #4	; (adr r0, 800edf8 <_printf_i+0x40>)
 800edf4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800edf8:	0800ee51 	.word	0x0800ee51
 800edfc:	0800ee65 	.word	0x0800ee65
 800ee00:	0800ede1 	.word	0x0800ede1
 800ee04:	0800ede1 	.word	0x0800ede1
 800ee08:	0800ede1 	.word	0x0800ede1
 800ee0c:	0800ede1 	.word	0x0800ede1
 800ee10:	0800ee65 	.word	0x0800ee65
 800ee14:	0800ede1 	.word	0x0800ede1
 800ee18:	0800ede1 	.word	0x0800ede1
 800ee1c:	0800ede1 	.word	0x0800ede1
 800ee20:	0800ede1 	.word	0x0800ede1
 800ee24:	0800ef71 	.word	0x0800ef71
 800ee28:	0800ee95 	.word	0x0800ee95
 800ee2c:	0800ef53 	.word	0x0800ef53
 800ee30:	0800ede1 	.word	0x0800ede1
 800ee34:	0800ede1 	.word	0x0800ede1
 800ee38:	0800ef93 	.word	0x0800ef93
 800ee3c:	0800ede1 	.word	0x0800ede1
 800ee40:	0800ee95 	.word	0x0800ee95
 800ee44:	0800ede1 	.word	0x0800ede1
 800ee48:	0800ede1 	.word	0x0800ede1
 800ee4c:	0800ef5b 	.word	0x0800ef5b
 800ee50:	680b      	ldr	r3, [r1, #0]
 800ee52:	1d1a      	adds	r2, r3, #4
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	600a      	str	r2, [r1, #0]
 800ee58:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ee5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ee60:	2301      	movs	r3, #1
 800ee62:	e0a3      	b.n	800efac <_printf_i+0x1f4>
 800ee64:	6825      	ldr	r5, [r4, #0]
 800ee66:	6808      	ldr	r0, [r1, #0]
 800ee68:	062e      	lsls	r6, r5, #24
 800ee6a:	f100 0304 	add.w	r3, r0, #4
 800ee6e:	d50a      	bpl.n	800ee86 <_printf_i+0xce>
 800ee70:	6805      	ldr	r5, [r0, #0]
 800ee72:	600b      	str	r3, [r1, #0]
 800ee74:	2d00      	cmp	r5, #0
 800ee76:	da03      	bge.n	800ee80 <_printf_i+0xc8>
 800ee78:	232d      	movs	r3, #45	; 0x2d
 800ee7a:	426d      	negs	r5, r5
 800ee7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ee80:	485e      	ldr	r0, [pc, #376]	; (800effc <_printf_i+0x244>)
 800ee82:	230a      	movs	r3, #10
 800ee84:	e019      	b.n	800eeba <_printf_i+0x102>
 800ee86:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ee8a:	6805      	ldr	r5, [r0, #0]
 800ee8c:	600b      	str	r3, [r1, #0]
 800ee8e:	bf18      	it	ne
 800ee90:	b22d      	sxthne	r5, r5
 800ee92:	e7ef      	b.n	800ee74 <_printf_i+0xbc>
 800ee94:	680b      	ldr	r3, [r1, #0]
 800ee96:	6825      	ldr	r5, [r4, #0]
 800ee98:	1d18      	adds	r0, r3, #4
 800ee9a:	6008      	str	r0, [r1, #0]
 800ee9c:	0628      	lsls	r0, r5, #24
 800ee9e:	d501      	bpl.n	800eea4 <_printf_i+0xec>
 800eea0:	681d      	ldr	r5, [r3, #0]
 800eea2:	e002      	b.n	800eeaa <_printf_i+0xf2>
 800eea4:	0669      	lsls	r1, r5, #25
 800eea6:	d5fb      	bpl.n	800eea0 <_printf_i+0xe8>
 800eea8:	881d      	ldrh	r5, [r3, #0]
 800eeaa:	4854      	ldr	r0, [pc, #336]	; (800effc <_printf_i+0x244>)
 800eeac:	2f6f      	cmp	r7, #111	; 0x6f
 800eeae:	bf0c      	ite	eq
 800eeb0:	2308      	moveq	r3, #8
 800eeb2:	230a      	movne	r3, #10
 800eeb4:	2100      	movs	r1, #0
 800eeb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800eeba:	6866      	ldr	r6, [r4, #4]
 800eebc:	60a6      	str	r6, [r4, #8]
 800eebe:	2e00      	cmp	r6, #0
 800eec0:	bfa2      	ittt	ge
 800eec2:	6821      	ldrge	r1, [r4, #0]
 800eec4:	f021 0104 	bicge.w	r1, r1, #4
 800eec8:	6021      	strge	r1, [r4, #0]
 800eeca:	b90d      	cbnz	r5, 800eed0 <_printf_i+0x118>
 800eecc:	2e00      	cmp	r6, #0
 800eece:	d04d      	beq.n	800ef6c <_printf_i+0x1b4>
 800eed0:	4616      	mov	r6, r2
 800eed2:	fbb5 f1f3 	udiv	r1, r5, r3
 800eed6:	fb03 5711 	mls	r7, r3, r1, r5
 800eeda:	5dc7      	ldrb	r7, [r0, r7]
 800eedc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800eee0:	462f      	mov	r7, r5
 800eee2:	42bb      	cmp	r3, r7
 800eee4:	460d      	mov	r5, r1
 800eee6:	d9f4      	bls.n	800eed2 <_printf_i+0x11a>
 800eee8:	2b08      	cmp	r3, #8
 800eeea:	d10b      	bne.n	800ef04 <_printf_i+0x14c>
 800eeec:	6823      	ldr	r3, [r4, #0]
 800eeee:	07df      	lsls	r7, r3, #31
 800eef0:	d508      	bpl.n	800ef04 <_printf_i+0x14c>
 800eef2:	6923      	ldr	r3, [r4, #16]
 800eef4:	6861      	ldr	r1, [r4, #4]
 800eef6:	4299      	cmp	r1, r3
 800eef8:	bfde      	ittt	le
 800eefa:	2330      	movle	r3, #48	; 0x30
 800eefc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ef00:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ef04:	1b92      	subs	r2, r2, r6
 800ef06:	6122      	str	r2, [r4, #16]
 800ef08:	f8cd a000 	str.w	sl, [sp]
 800ef0c:	464b      	mov	r3, r9
 800ef0e:	aa03      	add	r2, sp, #12
 800ef10:	4621      	mov	r1, r4
 800ef12:	4640      	mov	r0, r8
 800ef14:	f7ff fee2 	bl	800ecdc <_printf_common>
 800ef18:	3001      	adds	r0, #1
 800ef1a:	d14c      	bne.n	800efb6 <_printf_i+0x1fe>
 800ef1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ef20:	b004      	add	sp, #16
 800ef22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef26:	4835      	ldr	r0, [pc, #212]	; (800effc <_printf_i+0x244>)
 800ef28:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ef2c:	6823      	ldr	r3, [r4, #0]
 800ef2e:	680e      	ldr	r6, [r1, #0]
 800ef30:	061f      	lsls	r7, r3, #24
 800ef32:	f856 5b04 	ldr.w	r5, [r6], #4
 800ef36:	600e      	str	r6, [r1, #0]
 800ef38:	d514      	bpl.n	800ef64 <_printf_i+0x1ac>
 800ef3a:	07d9      	lsls	r1, r3, #31
 800ef3c:	bf44      	itt	mi
 800ef3e:	f043 0320 	orrmi.w	r3, r3, #32
 800ef42:	6023      	strmi	r3, [r4, #0]
 800ef44:	b91d      	cbnz	r5, 800ef4e <_printf_i+0x196>
 800ef46:	6823      	ldr	r3, [r4, #0]
 800ef48:	f023 0320 	bic.w	r3, r3, #32
 800ef4c:	6023      	str	r3, [r4, #0]
 800ef4e:	2310      	movs	r3, #16
 800ef50:	e7b0      	b.n	800eeb4 <_printf_i+0xfc>
 800ef52:	6823      	ldr	r3, [r4, #0]
 800ef54:	f043 0320 	orr.w	r3, r3, #32
 800ef58:	6023      	str	r3, [r4, #0]
 800ef5a:	2378      	movs	r3, #120	; 0x78
 800ef5c:	4828      	ldr	r0, [pc, #160]	; (800f000 <_printf_i+0x248>)
 800ef5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ef62:	e7e3      	b.n	800ef2c <_printf_i+0x174>
 800ef64:	065e      	lsls	r6, r3, #25
 800ef66:	bf48      	it	mi
 800ef68:	b2ad      	uxthmi	r5, r5
 800ef6a:	e7e6      	b.n	800ef3a <_printf_i+0x182>
 800ef6c:	4616      	mov	r6, r2
 800ef6e:	e7bb      	b.n	800eee8 <_printf_i+0x130>
 800ef70:	680b      	ldr	r3, [r1, #0]
 800ef72:	6826      	ldr	r6, [r4, #0]
 800ef74:	6960      	ldr	r0, [r4, #20]
 800ef76:	1d1d      	adds	r5, r3, #4
 800ef78:	600d      	str	r5, [r1, #0]
 800ef7a:	0635      	lsls	r5, r6, #24
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	d501      	bpl.n	800ef84 <_printf_i+0x1cc>
 800ef80:	6018      	str	r0, [r3, #0]
 800ef82:	e002      	b.n	800ef8a <_printf_i+0x1d2>
 800ef84:	0671      	lsls	r1, r6, #25
 800ef86:	d5fb      	bpl.n	800ef80 <_printf_i+0x1c8>
 800ef88:	8018      	strh	r0, [r3, #0]
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	6123      	str	r3, [r4, #16]
 800ef8e:	4616      	mov	r6, r2
 800ef90:	e7ba      	b.n	800ef08 <_printf_i+0x150>
 800ef92:	680b      	ldr	r3, [r1, #0]
 800ef94:	1d1a      	adds	r2, r3, #4
 800ef96:	600a      	str	r2, [r1, #0]
 800ef98:	681e      	ldr	r6, [r3, #0]
 800ef9a:	6862      	ldr	r2, [r4, #4]
 800ef9c:	2100      	movs	r1, #0
 800ef9e:	4630      	mov	r0, r6
 800efa0:	f7f1 f91e 	bl	80001e0 <memchr>
 800efa4:	b108      	cbz	r0, 800efaa <_printf_i+0x1f2>
 800efa6:	1b80      	subs	r0, r0, r6
 800efa8:	6060      	str	r0, [r4, #4]
 800efaa:	6863      	ldr	r3, [r4, #4]
 800efac:	6123      	str	r3, [r4, #16]
 800efae:	2300      	movs	r3, #0
 800efb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800efb4:	e7a8      	b.n	800ef08 <_printf_i+0x150>
 800efb6:	6923      	ldr	r3, [r4, #16]
 800efb8:	4632      	mov	r2, r6
 800efba:	4649      	mov	r1, r9
 800efbc:	4640      	mov	r0, r8
 800efbe:	47d0      	blx	sl
 800efc0:	3001      	adds	r0, #1
 800efc2:	d0ab      	beq.n	800ef1c <_printf_i+0x164>
 800efc4:	6823      	ldr	r3, [r4, #0]
 800efc6:	079b      	lsls	r3, r3, #30
 800efc8:	d413      	bmi.n	800eff2 <_printf_i+0x23a>
 800efca:	68e0      	ldr	r0, [r4, #12]
 800efcc:	9b03      	ldr	r3, [sp, #12]
 800efce:	4298      	cmp	r0, r3
 800efd0:	bfb8      	it	lt
 800efd2:	4618      	movlt	r0, r3
 800efd4:	e7a4      	b.n	800ef20 <_printf_i+0x168>
 800efd6:	2301      	movs	r3, #1
 800efd8:	4632      	mov	r2, r6
 800efda:	4649      	mov	r1, r9
 800efdc:	4640      	mov	r0, r8
 800efde:	47d0      	blx	sl
 800efe0:	3001      	adds	r0, #1
 800efe2:	d09b      	beq.n	800ef1c <_printf_i+0x164>
 800efe4:	3501      	adds	r5, #1
 800efe6:	68e3      	ldr	r3, [r4, #12]
 800efe8:	9903      	ldr	r1, [sp, #12]
 800efea:	1a5b      	subs	r3, r3, r1
 800efec:	42ab      	cmp	r3, r5
 800efee:	dcf2      	bgt.n	800efd6 <_printf_i+0x21e>
 800eff0:	e7eb      	b.n	800efca <_printf_i+0x212>
 800eff2:	2500      	movs	r5, #0
 800eff4:	f104 0619 	add.w	r6, r4, #25
 800eff8:	e7f5      	b.n	800efe6 <_printf_i+0x22e>
 800effa:	bf00      	nop
 800effc:	0800f285 	.word	0x0800f285
 800f000:	0800f296 	.word	0x0800f296

0800f004 <memmove>:
 800f004:	4288      	cmp	r0, r1
 800f006:	b510      	push	{r4, lr}
 800f008:	eb01 0402 	add.w	r4, r1, r2
 800f00c:	d902      	bls.n	800f014 <memmove+0x10>
 800f00e:	4284      	cmp	r4, r0
 800f010:	4623      	mov	r3, r4
 800f012:	d807      	bhi.n	800f024 <memmove+0x20>
 800f014:	1e43      	subs	r3, r0, #1
 800f016:	42a1      	cmp	r1, r4
 800f018:	d008      	beq.n	800f02c <memmove+0x28>
 800f01a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f01e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f022:	e7f8      	b.n	800f016 <memmove+0x12>
 800f024:	4402      	add	r2, r0
 800f026:	4601      	mov	r1, r0
 800f028:	428a      	cmp	r2, r1
 800f02a:	d100      	bne.n	800f02e <memmove+0x2a>
 800f02c:	bd10      	pop	{r4, pc}
 800f02e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f032:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f036:	e7f7      	b.n	800f028 <memmove+0x24>

0800f038 <_realloc_r>:
 800f038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f03a:	4607      	mov	r7, r0
 800f03c:	4614      	mov	r4, r2
 800f03e:	460e      	mov	r6, r1
 800f040:	b921      	cbnz	r1, 800f04c <_realloc_r+0x14>
 800f042:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f046:	4611      	mov	r1, r2
 800f048:	f7ff bbec 	b.w	800e824 <_malloc_r>
 800f04c:	b922      	cbnz	r2, 800f058 <_realloc_r+0x20>
 800f04e:	f7ff fb99 	bl	800e784 <_free_r>
 800f052:	4625      	mov	r5, r4
 800f054:	4628      	mov	r0, r5
 800f056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f058:	f000 f814 	bl	800f084 <_malloc_usable_size_r>
 800f05c:	42a0      	cmp	r0, r4
 800f05e:	d20f      	bcs.n	800f080 <_realloc_r+0x48>
 800f060:	4621      	mov	r1, r4
 800f062:	4638      	mov	r0, r7
 800f064:	f7ff fbde 	bl	800e824 <_malloc_r>
 800f068:	4605      	mov	r5, r0
 800f06a:	2800      	cmp	r0, #0
 800f06c:	d0f2      	beq.n	800f054 <_realloc_r+0x1c>
 800f06e:	4631      	mov	r1, r6
 800f070:	4622      	mov	r2, r4
 800f072:	f7ff fb71 	bl	800e758 <memcpy>
 800f076:	4631      	mov	r1, r6
 800f078:	4638      	mov	r0, r7
 800f07a:	f7ff fb83 	bl	800e784 <_free_r>
 800f07e:	e7e9      	b.n	800f054 <_realloc_r+0x1c>
 800f080:	4635      	mov	r5, r6
 800f082:	e7e7      	b.n	800f054 <_realloc_r+0x1c>

0800f084 <_malloc_usable_size_r>:
 800f084:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f088:	1f18      	subs	r0, r3, #4
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	bfbc      	itt	lt
 800f08e:	580b      	ldrlt	r3, [r1, r0]
 800f090:	18c0      	addlt	r0, r0, r3
 800f092:	4770      	bx	lr

0800f094 <_init>:
 800f094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f096:	bf00      	nop
 800f098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f09a:	bc08      	pop	{r3}
 800f09c:	469e      	mov	lr, r3
 800f09e:	4770      	bx	lr

0800f0a0 <_fini>:
 800f0a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0a2:	bf00      	nop
 800f0a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f0a6:	bc08      	pop	{r3}
 800f0a8:	469e      	mov	lr, r3
 800f0aa:	4770      	bx	lr
