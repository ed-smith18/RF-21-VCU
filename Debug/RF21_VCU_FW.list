
RF21_VCU_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d9ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  0800db3c  0800db3c  0001db3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dccc  0800dccc  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800dccc  0800dccc  0001dccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dcd4  0800dcd4  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dcd4  0800dcd4  0001dcd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dcd8  0800dcd8  0001dcd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800dcdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          00004ae4  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004b78  20004b78  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00031c1a  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000060c2  00000000  00000000  00051cde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002180  00000000  00000000  00057da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001f70  00000000  00000000  00059f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a09b  00000000  00000000  0005be90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002b02a  00000000  00000000  00085f2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee788  00000000  00000000  000b0f55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0019f6dd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009480  00000000  00000000  0019f730  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800db24 	.word	0x0800db24

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800db24 	.word	0x0800db24

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295
 800089c:	f04f 30ff 	movne.w	r0, #4294967295
 80008a0:	f000 b96e 	b.w	8000b80 <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9d08      	ldr	r5, [sp, #32]
 80008c2:	4604      	mov	r4, r0
 80008c4:	468c      	mov	ip, r1
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	f040 8083 	bne.w	80009d2 <__udivmoddi4+0x116>
 80008cc:	428a      	cmp	r2, r1
 80008ce:	4617      	mov	r7, r2
 80008d0:	d947      	bls.n	8000962 <__udivmoddi4+0xa6>
 80008d2:	fab2 f282 	clz	r2, r2
 80008d6:	b142      	cbz	r2, 80008ea <__udivmoddi4+0x2e>
 80008d8:	f1c2 0020 	rsb	r0, r2, #32
 80008dc:	fa24 f000 	lsr.w	r0, r4, r0
 80008e0:	4091      	lsls	r1, r2
 80008e2:	4097      	lsls	r7, r2
 80008e4:	ea40 0c01 	orr.w	ip, r0, r1
 80008e8:	4094      	lsls	r4, r2
 80008ea:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008ee:	0c23      	lsrs	r3, r4, #16
 80008f0:	fbbc f6f8 	udiv	r6, ip, r8
 80008f4:	fa1f fe87 	uxth.w	lr, r7
 80008f8:	fb08 c116 	mls	r1, r8, r6, ip
 80008fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000900:	fb06 f10e 	mul.w	r1, r6, lr
 8000904:	4299      	cmp	r1, r3
 8000906:	d909      	bls.n	800091c <__udivmoddi4+0x60>
 8000908:	18fb      	adds	r3, r7, r3
 800090a:	f106 30ff 	add.w	r0, r6, #4294967295
 800090e:	f080 8119 	bcs.w	8000b44 <__udivmoddi4+0x288>
 8000912:	4299      	cmp	r1, r3
 8000914:	f240 8116 	bls.w	8000b44 <__udivmoddi4+0x288>
 8000918:	3e02      	subs	r6, #2
 800091a:	443b      	add	r3, r7
 800091c:	1a5b      	subs	r3, r3, r1
 800091e:	b2a4      	uxth	r4, r4
 8000920:	fbb3 f0f8 	udiv	r0, r3, r8
 8000924:	fb08 3310 	mls	r3, r8, r0, r3
 8000928:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800092c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000930:	45a6      	cmp	lr, r4
 8000932:	d909      	bls.n	8000948 <__udivmoddi4+0x8c>
 8000934:	193c      	adds	r4, r7, r4
 8000936:	f100 33ff 	add.w	r3, r0, #4294967295
 800093a:	f080 8105 	bcs.w	8000b48 <__udivmoddi4+0x28c>
 800093e:	45a6      	cmp	lr, r4
 8000940:	f240 8102 	bls.w	8000b48 <__udivmoddi4+0x28c>
 8000944:	3802      	subs	r0, #2
 8000946:	443c      	add	r4, r7
 8000948:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800094c:	eba4 040e 	sub.w	r4, r4, lr
 8000950:	2600      	movs	r6, #0
 8000952:	b11d      	cbz	r5, 800095c <__udivmoddi4+0xa0>
 8000954:	40d4      	lsrs	r4, r2
 8000956:	2300      	movs	r3, #0
 8000958:	e9c5 4300 	strd	r4, r3, [r5]
 800095c:	4631      	mov	r1, r6
 800095e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000962:	b902      	cbnz	r2, 8000966 <__udivmoddi4+0xaa>
 8000964:	deff      	udf	#255	; 0xff
 8000966:	fab2 f282 	clz	r2, r2
 800096a:	2a00      	cmp	r2, #0
 800096c:	d150      	bne.n	8000a10 <__udivmoddi4+0x154>
 800096e:	1bcb      	subs	r3, r1, r7
 8000970:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000974:	fa1f f887 	uxth.w	r8, r7
 8000978:	2601      	movs	r6, #1
 800097a:	fbb3 fcfe 	udiv	ip, r3, lr
 800097e:	0c21      	lsrs	r1, r4, #16
 8000980:	fb0e 331c 	mls	r3, lr, ip, r3
 8000984:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000988:	fb08 f30c 	mul.w	r3, r8, ip
 800098c:	428b      	cmp	r3, r1
 800098e:	d907      	bls.n	80009a0 <__udivmoddi4+0xe4>
 8000990:	1879      	adds	r1, r7, r1
 8000992:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000996:	d202      	bcs.n	800099e <__udivmoddi4+0xe2>
 8000998:	428b      	cmp	r3, r1
 800099a:	f200 80e9 	bhi.w	8000b70 <__udivmoddi4+0x2b4>
 800099e:	4684      	mov	ip, r0
 80009a0:	1ac9      	subs	r1, r1, r3
 80009a2:	b2a3      	uxth	r3, r4
 80009a4:	fbb1 f0fe 	udiv	r0, r1, lr
 80009a8:	fb0e 1110 	mls	r1, lr, r0, r1
 80009ac:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80009b0:	fb08 f800 	mul.w	r8, r8, r0
 80009b4:	45a0      	cmp	r8, r4
 80009b6:	d907      	bls.n	80009c8 <__udivmoddi4+0x10c>
 80009b8:	193c      	adds	r4, r7, r4
 80009ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80009be:	d202      	bcs.n	80009c6 <__udivmoddi4+0x10a>
 80009c0:	45a0      	cmp	r8, r4
 80009c2:	f200 80d9 	bhi.w	8000b78 <__udivmoddi4+0x2bc>
 80009c6:	4618      	mov	r0, r3
 80009c8:	eba4 0408 	sub.w	r4, r4, r8
 80009cc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80009d0:	e7bf      	b.n	8000952 <__udivmoddi4+0x96>
 80009d2:	428b      	cmp	r3, r1
 80009d4:	d909      	bls.n	80009ea <__udivmoddi4+0x12e>
 80009d6:	2d00      	cmp	r5, #0
 80009d8:	f000 80b1 	beq.w	8000b3e <__udivmoddi4+0x282>
 80009dc:	2600      	movs	r6, #0
 80009de:	e9c5 0100 	strd	r0, r1, [r5]
 80009e2:	4630      	mov	r0, r6
 80009e4:	4631      	mov	r1, r6
 80009e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ea:	fab3 f683 	clz	r6, r3
 80009ee:	2e00      	cmp	r6, #0
 80009f0:	d14a      	bne.n	8000a88 <__udivmoddi4+0x1cc>
 80009f2:	428b      	cmp	r3, r1
 80009f4:	d302      	bcc.n	80009fc <__udivmoddi4+0x140>
 80009f6:	4282      	cmp	r2, r0
 80009f8:	f200 80b8 	bhi.w	8000b6c <__udivmoddi4+0x2b0>
 80009fc:	1a84      	subs	r4, r0, r2
 80009fe:	eb61 0103 	sbc.w	r1, r1, r3
 8000a02:	2001      	movs	r0, #1
 8000a04:	468c      	mov	ip, r1
 8000a06:	2d00      	cmp	r5, #0
 8000a08:	d0a8      	beq.n	800095c <__udivmoddi4+0xa0>
 8000a0a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a0e:	e7a5      	b.n	800095c <__udivmoddi4+0xa0>
 8000a10:	f1c2 0320 	rsb	r3, r2, #32
 8000a14:	fa20 f603 	lsr.w	r6, r0, r3
 8000a18:	4097      	lsls	r7, r2
 8000a1a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a1e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a22:	40d9      	lsrs	r1, r3
 8000a24:	4330      	orrs	r0, r6
 8000a26:	0c03      	lsrs	r3, r0, #16
 8000a28:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a2c:	fa1f f887 	uxth.w	r8, r7
 8000a30:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a38:	fb06 f108 	mul.w	r1, r6, r8
 8000a3c:	4299      	cmp	r1, r3
 8000a3e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a42:	d909      	bls.n	8000a58 <__udivmoddi4+0x19c>
 8000a44:	18fb      	adds	r3, r7, r3
 8000a46:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a4a:	f080 808d 	bcs.w	8000b68 <__udivmoddi4+0x2ac>
 8000a4e:	4299      	cmp	r1, r3
 8000a50:	f240 808a 	bls.w	8000b68 <__udivmoddi4+0x2ac>
 8000a54:	3e02      	subs	r6, #2
 8000a56:	443b      	add	r3, r7
 8000a58:	1a5b      	subs	r3, r3, r1
 8000a5a:	b281      	uxth	r1, r0
 8000a5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a68:	fb00 f308 	mul.w	r3, r0, r8
 8000a6c:	428b      	cmp	r3, r1
 8000a6e:	d907      	bls.n	8000a80 <__udivmoddi4+0x1c4>
 8000a70:	1879      	adds	r1, r7, r1
 8000a72:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a76:	d273      	bcs.n	8000b60 <__udivmoddi4+0x2a4>
 8000a78:	428b      	cmp	r3, r1
 8000a7a:	d971      	bls.n	8000b60 <__udivmoddi4+0x2a4>
 8000a7c:	3802      	subs	r0, #2
 8000a7e:	4439      	add	r1, r7
 8000a80:	1acb      	subs	r3, r1, r3
 8000a82:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a86:	e778      	b.n	800097a <__udivmoddi4+0xbe>
 8000a88:	f1c6 0c20 	rsb	ip, r6, #32
 8000a8c:	fa03 f406 	lsl.w	r4, r3, r6
 8000a90:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a94:	431c      	orrs	r4, r3
 8000a96:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000a9e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000aa2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000aa6:	431f      	orrs	r7, r3
 8000aa8:	0c3b      	lsrs	r3, r7, #16
 8000aaa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000aae:	fa1f f884 	uxth.w	r8, r4
 8000ab2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ab6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000aba:	fb09 fa08 	mul.w	sl, r9, r8
 8000abe:	458a      	cmp	sl, r1
 8000ac0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ac4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ac8:	d908      	bls.n	8000adc <__udivmoddi4+0x220>
 8000aca:	1861      	adds	r1, r4, r1
 8000acc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ad0:	d248      	bcs.n	8000b64 <__udivmoddi4+0x2a8>
 8000ad2:	458a      	cmp	sl, r1
 8000ad4:	d946      	bls.n	8000b64 <__udivmoddi4+0x2a8>
 8000ad6:	f1a9 0902 	sub.w	r9, r9, #2
 8000ada:	4421      	add	r1, r4
 8000adc:	eba1 010a 	sub.w	r1, r1, sl
 8000ae0:	b2bf      	uxth	r7, r7
 8000ae2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ae6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000aea:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000aee:	fb00 f808 	mul.w	r8, r0, r8
 8000af2:	45b8      	cmp	r8, r7
 8000af4:	d907      	bls.n	8000b06 <__udivmoddi4+0x24a>
 8000af6:	19e7      	adds	r7, r4, r7
 8000af8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000afc:	d22e      	bcs.n	8000b5c <__udivmoddi4+0x2a0>
 8000afe:	45b8      	cmp	r8, r7
 8000b00:	d92c      	bls.n	8000b5c <__udivmoddi4+0x2a0>
 8000b02:	3802      	subs	r0, #2
 8000b04:	4427      	add	r7, r4
 8000b06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b0a:	eba7 0708 	sub.w	r7, r7, r8
 8000b0e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b12:	454f      	cmp	r7, r9
 8000b14:	46c6      	mov	lr, r8
 8000b16:	4649      	mov	r1, r9
 8000b18:	d31a      	bcc.n	8000b50 <__udivmoddi4+0x294>
 8000b1a:	d017      	beq.n	8000b4c <__udivmoddi4+0x290>
 8000b1c:	b15d      	cbz	r5, 8000b36 <__udivmoddi4+0x27a>
 8000b1e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b22:	eb67 0701 	sbc.w	r7, r7, r1
 8000b26:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b2a:	40f2      	lsrs	r2, r6
 8000b2c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b30:	40f7      	lsrs	r7, r6
 8000b32:	e9c5 2700 	strd	r2, r7, [r5]
 8000b36:	2600      	movs	r6, #0
 8000b38:	4631      	mov	r1, r6
 8000b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3e:	462e      	mov	r6, r5
 8000b40:	4628      	mov	r0, r5
 8000b42:	e70b      	b.n	800095c <__udivmoddi4+0xa0>
 8000b44:	4606      	mov	r6, r0
 8000b46:	e6e9      	b.n	800091c <__udivmoddi4+0x60>
 8000b48:	4618      	mov	r0, r3
 8000b4a:	e6fd      	b.n	8000948 <__udivmoddi4+0x8c>
 8000b4c:	4543      	cmp	r3, r8
 8000b4e:	d2e5      	bcs.n	8000b1c <__udivmoddi4+0x260>
 8000b50:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b54:	eb69 0104 	sbc.w	r1, r9, r4
 8000b58:	3801      	subs	r0, #1
 8000b5a:	e7df      	b.n	8000b1c <__udivmoddi4+0x260>
 8000b5c:	4608      	mov	r0, r1
 8000b5e:	e7d2      	b.n	8000b06 <__udivmoddi4+0x24a>
 8000b60:	4660      	mov	r0, ip
 8000b62:	e78d      	b.n	8000a80 <__udivmoddi4+0x1c4>
 8000b64:	4681      	mov	r9, r0
 8000b66:	e7b9      	b.n	8000adc <__udivmoddi4+0x220>
 8000b68:	4666      	mov	r6, ip
 8000b6a:	e775      	b.n	8000a58 <__udivmoddi4+0x19c>
 8000b6c:	4630      	mov	r0, r6
 8000b6e:	e74a      	b.n	8000a06 <__udivmoddi4+0x14a>
 8000b70:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b74:	4439      	add	r1, r7
 8000b76:	e713      	b.n	80009a0 <__udivmoddi4+0xe4>
 8000b78:	3802      	subs	r0, #2
 8000b7a:	443c      	add	r4, r7
 8000b7c:	e724      	b.n	80009c8 <__udivmoddi4+0x10c>
 8000b7e:	bf00      	nop

08000b80 <__aeabi_idiv0>:
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop

08000b84 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	4a07      	ldr	r2, [pc, #28]	; (8000bb0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b94:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	4a06      	ldr	r2, [pc, #24]	; (8000bb4 <vApplicationGetIdleTaskMemory+0x30>)
 8000b9a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2280      	movs	r2, #128	; 0x80
 8000ba0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000ba2:	bf00      	nop
 8000ba4:	3714      	adds	r7, #20
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	200000b0 	.word	0x200000b0
 8000bb4:	20000164 	.word	0x20000164

08000bb8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000bb8:	b5b0      	push	{r4, r5, r7, lr}
 8000bba:	b08e      	sub	sp, #56	; 0x38
 8000bbc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000bbe:	f001 f8fb 	bl	8001db8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000bc2:	f000 f843 	bl	8000c4c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000bc6:	f000 fac5 	bl	8001154 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000bca:	f000 f9d5 	bl	8000f78 <MX_I2C1_Init>
	MX_I2S3_Init();
 8000bce:	f000 fa01 	bl	8000fd4 <MX_I2S3_Init>
	MX_SPI1_Init();
 8000bd2:	f000 fa2f 	bl	8001034 <MX_SPI1_Init>
	MX_DMA_Init();
 8000bd6:	f000 fa8d 	bl	80010f4 <MX_DMA_Init>
	MX_ADC1_Init();
 8000bda:	f000 f8a1 	bl	8000d20 <MX_ADC1_Init>
	MX_USART2_UART_Init();
 8000bde:	f000 fa5f 	bl	80010a0 <MX_USART2_UART_Init>
	MX_ADC2_Init();
 8000be2:	f000 f8ef 	bl	8000dc4 <MX_ADC2_Init>
	MX_ADC3_Init();
 8000be6:	f000 f93f 	bl	8000e68 <MX_ADC3_Init>
	MX_CAN1_Init();
 8000bea:	f000 f98f 	bl	8000f0c <MX_CAN1_Init>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of ledTask */
	osThreadDef(ledTask, startLEDTask, osPriorityNormal, 0, 128);
 8000bee:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <main+0x84>)
 8000bf0:	f107 041c 	add.w	r4, r7, #28
 8000bf4:	461d      	mov	r5, r3
 8000bf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bfa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bfe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	ledTaskHandle = osThreadCreate(osThread(ledTask), NULL);
 8000c02:	f107 031c 	add.w	r3, r7, #28
 8000c06:	2100      	movs	r1, #0
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f009 fd46 	bl	800a69a <osThreadCreate>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	4a0b      	ldr	r2, [pc, #44]	; (8000c40 <main+0x88>)
 8000c12:	6013      	str	r3, [r2, #0]

	/* definition and creation of uartTask */
	osThreadDef(uartTask, startUART_Task, osPriorityNormal, 0, 256);
 8000c14:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <main+0x8c>)
 8000c16:	463c      	mov	r4, r7
 8000c18:	461d      	mov	r5, r3
 8000c1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c1e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	uartTaskHandle = osThreadCreate(osThread(uartTask), NULL);
 8000c26:	463b      	mov	r3, r7
 8000c28:	2100      	movs	r1, #0
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f009 fd35 	bl	800a69a <osThreadCreate>
 8000c30:	4603      	mov	r3, r0
 8000c32:	4a05      	ldr	r2, [pc, #20]	; (8000c48 <main+0x90>)
 8000c34:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000c36:	f009 fd29 	bl	800a68c <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000c3a:	e7fe      	b.n	8000c3a <main+0x82>
 8000c3c:	0800db50 	.word	0x0800db50
 8000c40:	20004164 	.word	0x20004164
 8000c44:	0800db6c 	.word	0x0800db6c
 8000c48:	200041c8 	.word	0x200041c8

08000c4c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b094      	sub	sp, #80	; 0x50
 8000c50:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000c52:	f107 0320 	add.w	r3, r7, #32
 8000c56:	2230      	movs	r2, #48	; 0x30
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f00c fad2 	bl	800d204 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000c60:	f107 030c 	add.w	r3, r7, #12
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000c70:	2300      	movs	r3, #0
 8000c72:	60bb      	str	r3, [r7, #8]
 8000c74:	4b28      	ldr	r3, [pc, #160]	; (8000d18 <SystemClock_Config+0xcc>)
 8000c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c78:	4a27      	ldr	r2, [pc, #156]	; (8000d18 <SystemClock_Config+0xcc>)
 8000c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c80:	4b25      	ldr	r3, [pc, #148]	; (8000d18 <SystemClock_Config+0xcc>)
 8000c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c88:	60bb      	str	r3, [r7, #8]
 8000c8a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	4b22      	ldr	r3, [pc, #136]	; (8000d1c <SystemClock_Config+0xd0>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a21      	ldr	r2, [pc, #132]	; (8000d1c <SystemClock_Config+0xd0>)
 8000c96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c9a:	6013      	str	r3, [r2, #0]
 8000c9c:	4b1f      	ldr	r3, [pc, #124]	; (8000d1c <SystemClock_Config+0xd0>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ca4:	607b      	str	r3, [r7, #4]
 8000ca6:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cb0:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cb6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cba:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000cbc:	2308      	movs	r3, #8
 8000cbe:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000cc0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000cc4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000cca:	2307      	movs	r3, #7
 8000ccc:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000cce:	f107 0320 	add.w	r3, r7, #32
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f004 ff74 	bl	8005bc0 <HAL_RCC_OscConfig>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <SystemClock_Config+0x96>
		Error_Handler();
 8000cde:	f000 fbf5 	bl	80014cc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000ce2:	230f      	movs	r3, #15
 8000ce4:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cf2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cf8:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000cfa:	f107 030c 	add.w	r3, r7, #12
 8000cfe:	2105      	movs	r1, #5
 8000d00:	4618      	mov	r0, r3
 8000d02:	f005 f9d5 	bl	80060b0 <HAL_RCC_ClockConfig>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <SystemClock_Config+0xc4>
		Error_Handler();
 8000d0c:	f000 fbde 	bl	80014cc <Error_Handler>
	}
}
 8000d10:	bf00      	nop
 8000d12:	3750      	adds	r7, #80	; 0x50
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	40007000 	.word	0x40007000

08000d20 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000d26:	463b      	mov	r3, r7
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000d32:	4b21      	ldr	r3, [pc, #132]	; (8000db8 <MX_ADC1_Init+0x98>)
 8000d34:	4a21      	ldr	r2, [pc, #132]	; (8000dbc <MX_ADC1_Init+0x9c>)
 8000d36:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d38:	4b1f      	ldr	r3, [pc, #124]	; (8000db8 <MX_ADC1_Init+0x98>)
 8000d3a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d3e:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d40:	4b1d      	ldr	r3, [pc, #116]	; (8000db8 <MX_ADC1_Init+0x98>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8000d46:	4b1c      	ldr	r3, [pc, #112]	; (8000db8 <MX_ADC1_Init+0x98>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000d4c:	4b1a      	ldr	r3, [pc, #104]	; (8000db8 <MX_ADC1_Init+0x98>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d52:	4b19      	ldr	r3, [pc, #100]	; (8000db8 <MX_ADC1_Init+0x98>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d5a:	4b17      	ldr	r3, [pc, #92]	; (8000db8 <MX_ADC1_Init+0x98>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d60:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <MX_ADC1_Init+0x98>)
 8000d62:	4a17      	ldr	r2, [pc, #92]	; (8000dc0 <MX_ADC1_Init+0xa0>)
 8000d64:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d66:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <MX_ADC1_Init+0x98>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8000d6c:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <MX_ADC1_Init+0x98>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8000d72:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <MX_ADC1_Init+0x98>)
 8000d74:	2201      	movs	r2, #1
 8000d76:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d7a:	4b0f      	ldr	r3, [pc, #60]	; (8000db8 <MX_ADC1_Init+0x98>)
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000d80:	480d      	ldr	r0, [pc, #52]	; (8000db8 <MX_ADC1_Init+0x98>)
 8000d82:	f001 f87f 	bl	8001e84 <HAL_ADC_Init>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_ADC1_Init+0x70>
		Error_Handler();
 8000d8c:	f000 fb9e 	bl	80014cc <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8000d90:	2301      	movs	r3, #1
 8000d92:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000d94:	2301      	movs	r3, #1
 8000d96:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000d9c:	463b      	mov	r3, r7
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4805      	ldr	r0, [pc, #20]	; (8000db8 <MX_ADC1_Init+0x98>)
 8000da2:	f001 f8b3 	bl	8001f0c <HAL_ADC_ConfigChannel>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_ADC1_Init+0x90>
		Error_Handler();
 8000dac:	f000 fb8e 	bl	80014cc <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000db0:	bf00      	nop
 8000db2:	3710      	adds	r7, #16
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	200041cc 	.word	0x200041cc
 8000dbc:	40012000 	.word	0x40012000
 8000dc0:	0f000001 	.word	0x0f000001

08000dc4 <MX_ADC2_Init>:
/**
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void) {
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000dca:	463b      	mov	r3, r7
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC2_Init 1 */

	/* USER CODE END ADC2_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc2.Instance = ADC2;
 8000dd6:	4b21      	ldr	r3, [pc, #132]	; (8000e5c <MX_ADC2_Init+0x98>)
 8000dd8:	4a21      	ldr	r2, [pc, #132]	; (8000e60 <MX_ADC2_Init+0x9c>)
 8000dda:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ddc:	4b1f      	ldr	r3, [pc, #124]	; (8000e5c <MX_ADC2_Init+0x98>)
 8000dde:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000de2:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000de4:	4b1d      	ldr	r3, [pc, #116]	; (8000e5c <MX_ADC2_Init+0x98>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
	hadc2.Init.ScanConvMode = DISABLE;
 8000dea:	4b1c      	ldr	r3, [pc, #112]	; (8000e5c <MX_ADC2_Init+0x98>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	611a      	str	r2, [r3, #16]
	hadc2.Init.ContinuousConvMode = ENABLE;
 8000df0:	4b1a      	ldr	r3, [pc, #104]	; (8000e5c <MX_ADC2_Init+0x98>)
 8000df2:	2201      	movs	r2, #1
 8000df4:	761a      	strb	r2, [r3, #24]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000df6:	4b19      	ldr	r3, [pc, #100]	; (8000e5c <MX_ADC2_Init+0x98>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dfe:	4b17      	ldr	r3, [pc, #92]	; (8000e5c <MX_ADC2_Init+0x98>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e04:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <MX_ADC2_Init+0x98>)
 8000e06:	4a17      	ldr	r2, [pc, #92]	; (8000e64 <MX_ADC2_Init+0xa0>)
 8000e08:	629a      	str	r2, [r3, #40]	; 0x28
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e0a:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <MX_ADC2_Init+0x98>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	60da      	str	r2, [r3, #12]
	hadc2.Init.NbrOfConversion = 1;
 8000e10:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <MX_ADC2_Init+0x98>)
 8000e12:	2201      	movs	r2, #1
 8000e14:	61da      	str	r2, [r3, #28]
	hadc2.Init.DMAContinuousRequests = ENABLE;
 8000e16:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <MX_ADC2_Init+0x98>)
 8000e18:	2201      	movs	r2, #1
 8000e1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e1e:	4b0f      	ldr	r3, [pc, #60]	; (8000e5c <MX_ADC2_Init+0x98>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 8000e24:	480d      	ldr	r0, [pc, #52]	; (8000e5c <MX_ADC2_Init+0x98>)
 8000e26:	f001 f82d 	bl	8001e84 <HAL_ADC_Init>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_ADC2_Init+0x70>
		Error_Handler();
 8000e30:	f000 fb4c 	bl	80014cc <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8000e34:	2303      	movs	r3, #3
 8000e36:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8000e40:	463b      	mov	r3, r7
 8000e42:	4619      	mov	r1, r3
 8000e44:	4805      	ldr	r0, [pc, #20]	; (8000e5c <MX_ADC2_Init+0x98>)
 8000e46:	f001 f861 	bl	8001f0c <HAL_ADC_ConfigChannel>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_ADC2_Init+0x90>
		Error_Handler();
 8000e50:	f000 fb3c 	bl	80014cc <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 8000e54:	bf00      	nop
 8000e56:	3710      	adds	r7, #16
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	200040c8 	.word	0x200040c8
 8000e60:	40012100 	.word	0x40012100
 8000e64:	0f000001 	.word	0x0f000001

08000e68 <MX_ADC3_Init>:
/**
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000e6e:	463b      	mov	r3, r7
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC3_Init 1 */

	/* USER CODE END ADC3_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc3.Instance = ADC3;
 8000e7a:	4b21      	ldr	r3, [pc, #132]	; (8000f00 <MX_ADC3_Init+0x98>)
 8000e7c:	4a21      	ldr	r2, [pc, #132]	; (8000f04 <MX_ADC3_Init+0x9c>)
 8000e7e:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e80:	4b1f      	ldr	r3, [pc, #124]	; (8000f00 <MX_ADC3_Init+0x98>)
 8000e82:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e86:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000e88:	4b1d      	ldr	r3, [pc, #116]	; (8000f00 <MX_ADC3_Init+0x98>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = DISABLE;
 8000e8e:	4b1c      	ldr	r3, [pc, #112]	; (8000f00 <MX_ADC3_Init+0x98>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = ENABLE;
 8000e94:	4b1a      	ldr	r3, [pc, #104]	; (8000f00 <MX_ADC3_Init+0x98>)
 8000e96:	2201      	movs	r2, #1
 8000e98:	761a      	strb	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000e9a:	4b19      	ldr	r3, [pc, #100]	; (8000f00 <MX_ADC3_Init+0x98>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ea2:	4b17      	ldr	r3, [pc, #92]	; (8000f00 <MX_ADC3_Init+0x98>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ea8:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <MX_ADC3_Init+0x98>)
 8000eaa:	4a17      	ldr	r2, [pc, #92]	; (8000f08 <MX_ADC3_Init+0xa0>)
 8000eac:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eae:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <MX_ADC3_Init+0x98>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 8000eb4:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <MX_ADC3_Init+0x98>)
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = ENABLE;
 8000eba:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <MX_ADC3_Init+0x98>)
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ec2:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <MX_ADC3_Init+0x98>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 8000ec8:	480d      	ldr	r0, [pc, #52]	; (8000f00 <MX_ADC3_Init+0x98>)
 8000eca:	f000 ffdb 	bl	8001e84 <HAL_ADC_Init>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_ADC3_Init+0x70>
		Error_Handler();
 8000ed4:	f000 fafa 	bl	80014cc <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_12;
 8000ed8:	230c      	movs	r3, #12
 8000eda:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000edc:	2301      	movs	r3, #1
 8000ede:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8000ee4:	463b      	mov	r3, r7
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4805      	ldr	r0, [pc, #20]	; (8000f00 <MX_ADC3_Init+0x98>)
 8000eea:	f001 f80f 	bl	8001f0c <HAL_ADC_ConfigChannel>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_ADC3_Init+0x90>
		Error_Handler();
 8000ef4:	f000 faea 	bl	80014cc <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 8000ef8:	bf00      	nop
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20004214 	.word	0x20004214
 8000f04:	40012200 	.word	0x40012200
 8000f08:	0f000001 	.word	0x0f000001

08000f0c <MX_CAN1_Init>:
/**
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void) {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 8000f10:	4b17      	ldr	r3, [pc, #92]	; (8000f70 <MX_CAN1_Init+0x64>)
 8000f12:	4a18      	ldr	r2, [pc, #96]	; (8000f74 <MX_CAN1_Init+0x68>)
 8000f14:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 14;
 8000f16:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <MX_CAN1_Init+0x64>)
 8000f18:	220e      	movs	r2, #14
 8000f1a:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000f1c:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <MX_CAN1_Init+0x64>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f22:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <MX_CAN1_Init+0x64>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000f28:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <MX_CAN1_Init+0x64>)
 8000f2a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f2e:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000f30:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <MX_CAN1_Init+0x64>)
 8000f32:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000f36:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8000f38:	4b0d      	ldr	r3, [pc, #52]	; (8000f70 <MX_CAN1_Init+0x64>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <MX_CAN1_Init+0x64>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8000f44:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <MX_CAN1_Init+0x64>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8000f4a:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <MX_CAN1_Init+0x64>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000f50:	4b07      	ldr	r3, [pc, #28]	; (8000f70 <MX_CAN1_Init+0x64>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8000f56:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <MX_CAN1_Init+0x64>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 8000f5c:	4804      	ldr	r0, [pc, #16]	; (8000f70 <MX_CAN1_Init+0x64>)
 8000f5e:	f001 f9f3 	bl	8002348 <HAL_CAN_Init>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_CAN1_Init+0x60>
		Error_Handler();
 8000f68:	f000 fab0 	bl	80014cc <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	/* USER CODE END CAN1_Init 2 */

}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	200043bc 	.word	0x200043bc
 8000f74:	40006400 	.word	0x40006400

08000f78 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000f7c:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <MX_I2C1_Init+0x50>)
 8000f7e:	4a13      	ldr	r2, [pc, #76]	; (8000fcc <MX_I2C1_Init+0x54>)
 8000f80:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000f82:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <MX_I2C1_Init+0x50>)
 8000f84:	4a12      	ldr	r2, [pc, #72]	; (8000fd0 <MX_I2C1_Init+0x58>)
 8000f86:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f88:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <MX_I2C1_Init+0x50>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <MX_I2C1_Init+0x50>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f94:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <MX_I2C1_Init+0x50>)
 8000f96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f9a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f9c:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <MX_I2C1_Init+0x50>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000fa2:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <MX_I2C1_Init+0x50>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fa8:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <MX_I2C1_Init+0x50>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <MX_I2C1_Init+0x50>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000fb4:	4804      	ldr	r0, [pc, #16]	; (8000fc8 <MX_I2C1_Init+0x50>)
 8000fb6:	f004 f81f 	bl	8004ff8 <HAL_I2C_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000fc0:	f000 fa84 	bl	80014cc <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20004110 	.word	0x20004110
 8000fcc:	40005400 	.word	0x40005400
 8000fd0:	000186a0 	.word	0x000186a0

08000fd4 <MX_I2S3_Init>:
/**
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S3_Init(void) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
	/* USER CODE END I2S3_Init 0 */

	/* USER CODE BEGIN I2S3_Init 1 */

	/* USER CODE END I2S3_Init 1 */
	hi2s3.Instance = SPI3;
 8000fd8:	4b13      	ldr	r3, [pc, #76]	; (8001028 <MX_I2S3_Init+0x54>)
 8000fda:	4a14      	ldr	r2, [pc, #80]	; (800102c <MX_I2S3_Init+0x58>)
 8000fdc:	601a      	str	r2, [r3, #0]
	hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000fde:	4b12      	ldr	r3, [pc, #72]	; (8001028 <MX_I2S3_Init+0x54>)
 8000fe0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fe4:	605a      	str	r2, [r3, #4]
	hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000fe6:	4b10      	ldr	r3, [pc, #64]	; (8001028 <MX_I2S3_Init+0x54>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
	hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000fec:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <MX_I2S3_Init+0x54>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	60da      	str	r2, [r3, #12]
	hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000ff2:	4b0d      	ldr	r3, [pc, #52]	; (8001028 <MX_I2S3_Init+0x54>)
 8000ff4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ff8:	611a      	str	r2, [r3, #16]
	hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000ffa:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <MX_I2S3_Init+0x54>)
 8000ffc:	4a0c      	ldr	r2, [pc, #48]	; (8001030 <MX_I2S3_Init+0x5c>)
 8000ffe:	615a      	str	r2, [r3, #20]
	hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001000:	4b09      	ldr	r3, [pc, #36]	; (8001028 <MX_I2S3_Init+0x54>)
 8001002:	2200      	movs	r2, #0
 8001004:	619a      	str	r2, [r3, #24]
	hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001006:	4b08      	ldr	r3, [pc, #32]	; (8001028 <MX_I2S3_Init+0x54>)
 8001008:	2200      	movs	r2, #0
 800100a:	61da      	str	r2, [r3, #28]
	hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800100c:	4b06      	ldr	r3, [pc, #24]	; (8001028 <MX_I2S3_Init+0x54>)
 800100e:	2200      	movs	r2, #0
 8001010:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s3) != HAL_OK) {
 8001012:	4805      	ldr	r0, [pc, #20]	; (8001028 <MX_I2S3_Init+0x54>)
 8001014:	f004 f934 	bl	8005280 <HAL_I2S_Init>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_I2S3_Init+0x4e>
		Error_Handler();
 800101e:	f000 fa55 	bl	80014cc <Error_Handler>
	}
	/* USER CODE BEGIN I2S3_Init 2 */

	/* USER CODE END I2S3_Init 2 */

}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	200043ec 	.word	0x200043ec
 800102c:	40003c00 	.word	0x40003c00
 8001030:	00017700 	.word	0x00017700

08001034 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001038:	4b17      	ldr	r3, [pc, #92]	; (8001098 <MX_SPI1_Init+0x64>)
 800103a:	4a18      	ldr	r2, [pc, #96]	; (800109c <MX_SPI1_Init+0x68>)
 800103c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800103e:	4b16      	ldr	r3, [pc, #88]	; (8001098 <MX_SPI1_Init+0x64>)
 8001040:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001044:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001046:	4b14      	ldr	r3, [pc, #80]	; (8001098 <MX_SPI1_Init+0x64>)
 8001048:	2200      	movs	r2, #0
 800104a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800104c:	4b12      	ldr	r3, [pc, #72]	; (8001098 <MX_SPI1_Init+0x64>)
 800104e:	2200      	movs	r2, #0
 8001050:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001052:	4b11      	ldr	r3, [pc, #68]	; (8001098 <MX_SPI1_Init+0x64>)
 8001054:	2200      	movs	r2, #0
 8001056:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001058:	4b0f      	ldr	r3, [pc, #60]	; (8001098 <MX_SPI1_Init+0x64>)
 800105a:	2200      	movs	r2, #0
 800105c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800105e:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <MX_SPI1_Init+0x64>)
 8001060:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001064:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001066:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <MX_SPI1_Init+0x64>)
 8001068:	2200      	movs	r2, #0
 800106a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800106c:	4b0a      	ldr	r3, [pc, #40]	; (8001098 <MX_SPI1_Init+0x64>)
 800106e:	2200      	movs	r2, #0
 8001070:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001072:	4b09      	ldr	r3, [pc, #36]	; (8001098 <MX_SPI1_Init+0x64>)
 8001074:	2200      	movs	r2, #0
 8001076:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001078:	4b07      	ldr	r3, [pc, #28]	; (8001098 <MX_SPI1_Init+0x64>)
 800107a:	2200      	movs	r2, #0
 800107c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <MX_SPI1_Init+0x64>)
 8001080:	220a      	movs	r2, #10
 8001082:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001084:	4804      	ldr	r0, [pc, #16]	; (8001098 <MX_SPI1_Init+0x64>)
 8001086:	f005 fb81 	bl	800678c <HAL_SPI_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_SPI1_Init+0x60>
		Error_Handler();
 8001090:	f000 fa1c 	bl	80014cc <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}
 8001098:	200042c0 	.word	0x200042c0
 800109c:	40013000 	.word	0x40013000

080010a0 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80010a4:	4b11      	ldr	r3, [pc, #68]	; (80010ec <MX_USART2_UART_Init+0x4c>)
 80010a6:	4a12      	ldr	r2, [pc, #72]	; (80010f0 <MX_USART2_UART_Init+0x50>)
 80010a8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 256000;
 80010aa:	4b10      	ldr	r3, [pc, #64]	; (80010ec <MX_USART2_UART_Init+0x4c>)
 80010ac:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
 80010b0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010b2:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <MX_USART2_UART_Init+0x4c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80010b8:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <MX_USART2_UART_Init+0x4c>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80010be:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <MX_USART2_UART_Init+0x4c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80010c4:	4b09      	ldr	r3, [pc, #36]	; (80010ec <MX_USART2_UART_Init+0x4c>)
 80010c6:	220c      	movs	r2, #12
 80010c8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ca:	4b08      	ldr	r3, [pc, #32]	; (80010ec <MX_USART2_UART_Init+0x4c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <MX_USART2_UART_Init+0x4c>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80010d6:	4805      	ldr	r0, [pc, #20]	; (80010ec <MX_USART2_UART_Init+0x4c>)
 80010d8:	f005 fe8e 	bl	8006df8 <HAL_UART_Init>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80010e2:	f000 f9f3 	bl	80014cc <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20004318 	.word	0x20004318
 80010f0:	40004400 	.word	0x40004400

080010f4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	607b      	str	r3, [r7, #4]
 80010fe:	4b14      	ldr	r3, [pc, #80]	; (8001150 <MX_DMA_Init+0x5c>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a13      	ldr	r2, [pc, #76]	; (8001150 <MX_DMA_Init+0x5c>)
 8001104:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b11      	ldr	r3, [pc, #68]	; (8001150 <MX_DMA_Init+0x5c>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001116:	2200      	movs	r2, #0
 8001118:	2105      	movs	r1, #5
 800111a:	2038      	movs	r0, #56	; 0x38
 800111c:	f001 fd00 	bl	8002b20 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001120:	2038      	movs	r0, #56	; 0x38
 8001122:	f001 fd19 	bl	8002b58 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001126:	2200      	movs	r2, #0
 8001128:	2105      	movs	r1, #5
 800112a:	2039      	movs	r0, #57	; 0x39
 800112c:	f001 fcf8 	bl	8002b20 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001130:	2039      	movs	r0, #57	; 0x39
 8001132:	f001 fd11 	bl	8002b58 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	2105      	movs	r1, #5
 800113a:	203a      	movs	r0, #58	; 0x3a
 800113c:	f001 fcf0 	bl	8002b20 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001140:	203a      	movs	r0, #58	; 0x3a
 8001142:	f001 fd09 	bl	8002b58 <HAL_NVIC_EnableIRQ>

}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40023800 	.word	0x40023800

08001154 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b08c      	sub	sp, #48	; 0x30
 8001158:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800115a:	f107 031c 	add.w	r3, r7, #28
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	60da      	str	r2, [r3, #12]
 8001168:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	61bb      	str	r3, [r7, #24]
 800116e:	4b78      	ldr	r3, [pc, #480]	; (8001350 <MX_GPIO_Init+0x1fc>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a77      	ldr	r2, [pc, #476]	; (8001350 <MX_GPIO_Init+0x1fc>)
 8001174:	f043 0310 	orr.w	r3, r3, #16
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b75      	ldr	r3, [pc, #468]	; (8001350 <MX_GPIO_Init+0x1fc>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0310 	and.w	r3, r3, #16
 8001182:	61bb      	str	r3, [r7, #24]
 8001184:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]
 800118a:	4b71      	ldr	r3, [pc, #452]	; (8001350 <MX_GPIO_Init+0x1fc>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	4a70      	ldr	r2, [pc, #448]	; (8001350 <MX_GPIO_Init+0x1fc>)
 8001190:	f043 0304 	orr.w	r3, r3, #4
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
 8001196:	4b6e      	ldr	r3, [pc, #440]	; (8001350 <MX_GPIO_Init+0x1fc>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	f003 0304 	and.w	r3, r3, #4
 800119e:	617b      	str	r3, [r7, #20]
 80011a0:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	613b      	str	r3, [r7, #16]
 80011a6:	4b6a      	ldr	r3, [pc, #424]	; (8001350 <MX_GPIO_Init+0x1fc>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a69      	ldr	r2, [pc, #420]	; (8001350 <MX_GPIO_Init+0x1fc>)
 80011ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b67      	ldr	r3, [pc, #412]	; (8001350 <MX_GPIO_Init+0x1fc>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ba:	613b      	str	r3, [r7, #16]
 80011bc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	4b63      	ldr	r3, [pc, #396]	; (8001350 <MX_GPIO_Init+0x1fc>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	4a62      	ldr	r2, [pc, #392]	; (8001350 <MX_GPIO_Init+0x1fc>)
 80011c8:	f043 0301 	orr.w	r3, r3, #1
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
 80011ce:	4b60      	ldr	r3, [pc, #384]	; (8001350 <MX_GPIO_Init+0x1fc>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	4b5c      	ldr	r3, [pc, #368]	; (8001350 <MX_GPIO_Init+0x1fc>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	4a5b      	ldr	r2, [pc, #364]	; (8001350 <MX_GPIO_Init+0x1fc>)
 80011e4:	f043 0302 	orr.w	r3, r3, #2
 80011e8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ea:	4b59      	ldr	r3, [pc, #356]	; (8001350 <MX_GPIO_Init+0x1fc>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	607b      	str	r3, [r7, #4]
 80011fa:	4b55      	ldr	r3, [pc, #340]	; (8001350 <MX_GPIO_Init+0x1fc>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	4a54      	ldr	r2, [pc, #336]	; (8001350 <MX_GPIO_Init+0x1fc>)
 8001200:	f043 0308 	orr.w	r3, r3, #8
 8001204:	6313      	str	r3, [r2, #48]	; 0x30
 8001206:	4b52      	ldr	r3, [pc, #328]	; (8001350 <MX_GPIO_Init+0x1fc>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	f003 0308 	and.w	r3, r3, #8
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8001212:	2200      	movs	r2, #0
 8001214:	2108      	movs	r1, #8
 8001216:	484f      	ldr	r0, [pc, #316]	; (8001354 <MX_GPIO_Init+0x200>)
 8001218:	f002 f94a 	bl	80034b0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 800121c:	2201      	movs	r2, #1
 800121e:	2101      	movs	r1, #1
 8001220:	484d      	ldr	r0, [pc, #308]	; (8001358 <MX_GPIO_Init+0x204>)
 8001222:	f002 f945 	bl	80034b0 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8001226:	2200      	movs	r2, #0
 8001228:	f24f 0110 	movw	r1, #61456	; 0xf010
 800122c:	484b      	ldr	r0, [pc, #300]	; (800135c <MX_GPIO_Init+0x208>)
 800122e:	f002 f93f 	bl	80034b0 <HAL_GPIO_WritePin>
			LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : PE3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001232:	2308      	movs	r3, #8
 8001234:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001236:	2301      	movs	r3, #1
 8001238:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123e:	2300      	movs	r3, #0
 8001240:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001242:	f107 031c 	add.w	r3, r7, #28
 8001246:	4619      	mov	r1, r3
 8001248:	4842      	ldr	r0, [pc, #264]	; (8001354 <MX_GPIO_Init+0x200>)
 800124a:	f001 ff7d 	bl	8003148 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800124e:	2301      	movs	r3, #1
 8001250:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001252:	2301      	movs	r3, #1
 8001254:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125a:	2300      	movs	r3, #0
 800125c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800125e:	f107 031c 	add.w	r3, r7, #28
 8001262:	4619      	mov	r1, r3
 8001264:	483c      	ldr	r0, [pc, #240]	; (8001358 <MX_GPIO_Init+0x204>)
 8001266:	f001 ff6f 	bl	8003148 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 800126a:	2302      	movs	r3, #2
 800126c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800126e:	2300      	movs	r3, #0
 8001270:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001276:	f107 031c 	add.w	r3, r7, #28
 800127a:	4619      	mov	r1, r3
 800127c:	4836      	ldr	r0, [pc, #216]	; (8001358 <MX_GPIO_Init+0x204>)
 800127e:	f001 ff63 	bl	8003148 <HAL_GPIO_Init>

	/*Configure GPIO pin : PDM_OUT_Pin */
	GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001282:	2308      	movs	r3, #8
 8001284:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001286:	2302      	movs	r3, #2
 8001288:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128e:	2300      	movs	r3, #0
 8001290:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001292:	2305      	movs	r3, #5
 8001294:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001296:	f107 031c 	add.w	r3, r7, #28
 800129a:	4619      	mov	r1, r3
 800129c:	482e      	ldr	r0, [pc, #184]	; (8001358 <MX_GPIO_Init+0x204>)
 800129e:	f001 ff53 	bl	8003148 <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80012a2:	2301      	movs	r3, #1
 80012a4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012a6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80012aa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012b0:	f107 031c 	add.w	r3, r7, #28
 80012b4:	4619      	mov	r1, r3
 80012b6:	482a      	ldr	r0, [pc, #168]	; (8001360 <MX_GPIO_Init+0x20c>)
 80012b8:	f001 ff46 	bl	8003148 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012bc:	2304      	movs	r3, #4
 80012be:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c0:	2300      	movs	r3, #0
 80012c2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c8:	f107 031c 	add.w	r3, r7, #28
 80012cc:	4619      	mov	r1, r3
 80012ce:	4825      	ldr	r0, [pc, #148]	; (8001364 <MX_GPIO_Init+0x210>)
 80012d0:	f001 ff3a 	bl	8003148 <HAL_GPIO_Init>

	/*Configure GPIO pin : CLK_IN_Pin */
	GPIO_InitStruct.Pin = CLK_IN_Pin;
 80012d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012d8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012da:	2302      	movs	r3, #2
 80012dc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e2:	2300      	movs	r3, #0
 80012e4:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012e6:	2305      	movs	r3, #5
 80012e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80012ea:	f107 031c 	add.w	r3, r7, #28
 80012ee:	4619      	mov	r1, r3
 80012f0:	481c      	ldr	r0, [pc, #112]	; (8001364 <MX_GPIO_Init+0x210>)
 80012f2:	f001 ff29 	bl	8003148 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
	 Audio_RST_Pin */
	GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 80012f6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80012fa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fc:	2301      	movs	r3, #1
 80012fe:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001304:	2300      	movs	r3, #0
 8001306:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001308:	f107 031c 	add.w	r3, r7, #28
 800130c:	4619      	mov	r1, r3
 800130e:	4813      	ldr	r0, [pc, #76]	; (800135c <MX_GPIO_Init+0x208>)
 8001310:	f001 ff1a 	bl	8003148 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001314:	2320      	movs	r3, #32
 8001316:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001318:	2300      	movs	r3, #0
 800131a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001320:	f107 031c 	add.w	r3, r7, #28
 8001324:	4619      	mov	r1, r3
 8001326:	480d      	ldr	r0, [pc, #52]	; (800135c <MX_GPIO_Init+0x208>)
 8001328:	f001 ff0e 	bl	8003148 <HAL_GPIO_Init>

	/*Configure GPIO pin : MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800132c:	2302      	movs	r3, #2
 800132e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001330:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001334:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800133a:	f107 031c 	add.w	r3, r7, #28
 800133e:	4619      	mov	r1, r3
 8001340:	4804      	ldr	r0, [pc, #16]	; (8001354 <MX_GPIO_Init+0x200>)
 8001342:	f001 ff01 	bl	8003148 <HAL_GPIO_Init>

}
 8001346:	bf00      	nop
 8001348:	3730      	adds	r7, #48	; 0x30
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40023800 	.word	0x40023800
 8001354:	40021000 	.word	0x40021000
 8001358:	40020800 	.word	0x40020800
 800135c:	40020c00 	.word	0x40020c00
 8001360:	40020000 	.word	0x40020000
 8001364:	40020400 	.word	0x40020400

08001368 <startLEDTask>:
 * @brief  Function implementing the ledTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_startLEDTask */
void startLEDTask(void const *argument) {
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
	/* init code for USB_HOST */
	MX_USB_HOST_Init();
 8001370:	f00b fbfc 	bl	800cb6c <MX_USB_HOST_Init>
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 8001374:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001378:	4803      	ldr	r0, [pc, #12]	; (8001388 <startLEDTask+0x20>)
 800137a:	f002 f8b2 	bl	80034e2 <HAL_GPIO_TogglePin>
		osDelay(1000);
 800137e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001382:	f009 f9d6 	bl	800a732 <osDelay>
		HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 8001386:	e7f5      	b.n	8001374 <startLEDTask+0xc>
 8001388:	40020c00 	.word	0x40020c00
 800138c:	00000000 	.word	0x00000000

08001390 <startUART_Task>:
 * @brief Function implementing the uartTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startUART_Task */
void startUART_Task(void const *argument) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b0ca      	sub	sp, #296	; 0x128
 8001394:	af02      	add	r7, sp, #8
 8001396:	1d3b      	adds	r3, r7, #4
 8001398:	6018      	str	r0, [r3, #0]
	/* USER CODE BEGIN startUART_Task */
	char startBtn[16] = "";
 800139a:	2300      	movs	r3, #0
 800139c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80013a0:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
	char msg[256];
	uint32_t APPS1_PP;
	uint32_t APPS2_PP;
	/* Infinite loop */
	for (;;) {
		if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)) {
 80013ac:	2102      	movs	r1, #2
 80013ae:	4838      	ldr	r0, [pc, #224]	; (8001490 <startUART_Task+0x100>)
 80013b0:	f002 f866 	bl	8003480 <HAL_GPIO_ReadPin>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d107      	bne.n	80013ca <startUART_Task+0x3a>
			strcpy(startBtn, "Pressed");
 80013ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80013be:	4a35      	ldr	r2, [pc, #212]	; (8001494 <startUART_Task+0x104>)
 80013c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013c4:	e883 0003 	stmia.w	r3, {r0, r1}
 80013c8:	e005      	b.n	80013d6 <startUART_Task+0x46>
		} else {
			strcpy(startBtn, "Not Pressed");
 80013ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80013ce:	4a32      	ldr	r2, [pc, #200]	; (8001498 <startUART_Task+0x108>)
 80013d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80013d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}

		APPS1_PP = 0.0833 * appsVal[0];
 80013d6:	4b31      	ldr	r3, [pc, #196]	; (800149c <startUART_Task+0x10c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff f9bc 	bl	8000758 <__aeabi_ui2d>
 80013e0:	a325      	add	r3, pc, #148	; (adr r3, 8001478 <startUART_Task+0xe8>)
 80013e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e6:	f7fe ff4b 	bl	8000280 <__aeabi_dmul>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	4610      	mov	r0, r2
 80013f0:	4619      	mov	r1, r3
 80013f2:	f7ff fa2b 	bl	800084c <__aeabi_d2uiz>
 80013f6:	4603      	mov	r3, r0
 80013f8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
		APPS2_PP = -0.03339 * appsVal[1] + 136.7;
 80013fc:	4b27      	ldr	r3, [pc, #156]	; (800149c <startUART_Task+0x10c>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff f9a9 	bl	8000758 <__aeabi_ui2d>
 8001406:	a31e      	add	r3, pc, #120	; (adr r3, 8001480 <startUART_Task+0xf0>)
 8001408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140c:	f7fe ff38 	bl	8000280 <__aeabi_dmul>
 8001410:	4602      	mov	r2, r0
 8001412:	460b      	mov	r3, r1
 8001414:	4610      	mov	r0, r2
 8001416:	4619      	mov	r1, r3
 8001418:	a31b      	add	r3, pc, #108	; (adr r3, 8001488 <startUART_Task+0xf8>)
 800141a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141e:	f7ff f85f 	bl	80004e0 <__adddf3>
 8001422:	4602      	mov	r2, r0
 8001424:	460b      	mov	r3, r1
 8001426:	4610      	mov	r0, r2
 8001428:	4619      	mov	r1, r3
 800142a:	f7ff fa0f 	bl	800084c <__aeabi_d2uiz>
 800142e:	4603      	mov	r3, r0
 8001430:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

		sprintf(msg,
 8001434:	4b19      	ldr	r3, [pc, #100]	; (800149c <startUART_Task+0x10c>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	4b18      	ldr	r3, [pc, #96]	; (800149c <startUART_Task+0x10c>)
 800143a:	6859      	ldr	r1, [r3, #4]
 800143c:	f107 0008 	add.w	r0, r7, #8
 8001440:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001444:	9301      	str	r3, [sp, #4]
 8001446:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800144a:	9300      	str	r3, [sp, #0]
 800144c:	460b      	mov	r3, r1
 800144e:	4914      	ldr	r1, [pc, #80]	; (80014a0 <startUART_Task+0x110>)
 8001450:	f00c f804 	bl	800d45c <siprintf>
				"APPS_1 = %lu \t APPS_2 = %lu \t PP1 = %lu \t PP2 = %lu\r\n",
				appsVal[0], appsVal[1], APPS1_PP, APPS2_PP);
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8001454:	f107 0308 	add.w	r3, r7, #8
 8001458:	4618      	mov	r0, r3
 800145a:	f7fe feb9 	bl	80001d0 <strlen>
 800145e:	4603      	mov	r3, r0
 8001460:	b29a      	uxth	r2, r3
 8001462:	f107 0108 	add.w	r1, r7, #8
 8001466:	f04f 33ff 	mov.w	r3, #4294967295
 800146a:	480e      	ldr	r0, [pc, #56]	; (80014a4 <startUART_Task+0x114>)
 800146c:	f005 fd11 	bl	8006e92 <HAL_UART_Transmit>
		osDelay(100);
 8001470:	2064      	movs	r0, #100	; 0x64
 8001472:	f009 f95e 	bl	800a732 <osDelay>
		if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)) {
 8001476:	e799      	b.n	80013ac <startUART_Task+0x1c>
 8001478:	17c1bda5 	.word	0x17c1bda5
 800147c:	3fb55326 	.word	0x3fb55326
 8001480:	7c06e19c 	.word	0x7c06e19c
 8001484:	bfa1187e 	.word	0xbfa1187e
 8001488:	66666666 	.word	0x66666666
 800148c:	40611666 	.word	0x40611666
 8001490:	40020800 	.word	0x40020800
 8001494:	0800db88 	.word	0x0800db88
 8001498:	0800db90 	.word	0x0800db90
 800149c:	200043e4 	.word	0x200043e4
 80014a0:	0800db9c 	.word	0x0800db9c
 80014a4:	20004318 	.word	0x20004318

080014a8 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a04      	ldr	r2, [pc, #16]	; (80014c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d101      	bne.n	80014be <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80014ba:	f000 fc9f 	bl	8001dfc <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40010000 	.word	0x40010000

080014cc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d0:	b672      	cpsid	i
}
 80014d2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80014d4:	e7fe      	b.n	80014d4 <Error_Handler+0x8>
	...

080014d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	607b      	str	r3, [r7, #4]
 80014e2:	4b12      	ldr	r3, [pc, #72]	; (800152c <HAL_MspInit+0x54>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e6:	4a11      	ldr	r2, [pc, #68]	; (800152c <HAL_MspInit+0x54>)
 80014e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ec:	6453      	str	r3, [r2, #68]	; 0x44
 80014ee:	4b0f      	ldr	r3, [pc, #60]	; (800152c <HAL_MspInit+0x54>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014f6:	607b      	str	r3, [r7, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	603b      	str	r3, [r7, #0]
 80014fe:	4b0b      	ldr	r3, [pc, #44]	; (800152c <HAL_MspInit+0x54>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	4a0a      	ldr	r2, [pc, #40]	; (800152c <HAL_MspInit+0x54>)
 8001504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001508:	6413      	str	r3, [r2, #64]	; 0x40
 800150a:	4b08      	ldr	r3, [pc, #32]	; (800152c <HAL_MspInit+0x54>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001512:	603b      	str	r3, [r7, #0]
 8001514:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001516:	2200      	movs	r2, #0
 8001518:	210f      	movs	r1, #15
 800151a:	f06f 0001 	mvn.w	r0, #1
 800151e:	f001 faff 	bl	8002b20 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40023800 	.word	0x40023800

08001530 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08e      	sub	sp, #56	; 0x38
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001538:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a9b      	ldr	r2, [pc, #620]	; (80017bc <HAL_ADC_MspInit+0x28c>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d161      	bne.n	8001616 <HAL_ADC_MspInit+0xe6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	623b      	str	r3, [r7, #32]
 8001556:	4b9a      	ldr	r3, [pc, #616]	; (80017c0 <HAL_ADC_MspInit+0x290>)
 8001558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155a:	4a99      	ldr	r2, [pc, #612]	; (80017c0 <HAL_ADC_MspInit+0x290>)
 800155c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001560:	6453      	str	r3, [r2, #68]	; 0x44
 8001562:	4b97      	ldr	r3, [pc, #604]	; (80017c0 <HAL_ADC_MspInit+0x290>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800156a:	623b      	str	r3, [r7, #32]
 800156c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
 8001572:	4b93      	ldr	r3, [pc, #588]	; (80017c0 <HAL_ADC_MspInit+0x290>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	4a92      	ldr	r2, [pc, #584]	; (80017c0 <HAL_ADC_MspInit+0x290>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6313      	str	r3, [r2, #48]	; 0x30
 800157e:	4b90      	ldr	r3, [pc, #576]	; (80017c0 <HAL_ADC_MspInit+0x290>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	61fb      	str	r3, [r7, #28]
 8001588:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800158a:	2302      	movs	r3, #2
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800158e:	2303      	movs	r3, #3
 8001590:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001596:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800159a:	4619      	mov	r1, r3
 800159c:	4889      	ldr	r0, [pc, #548]	; (80017c4 <HAL_ADC_MspInit+0x294>)
 800159e:	f001 fdd3 	bl	8003148 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80015a2:	4b89      	ldr	r3, [pc, #548]	; (80017c8 <HAL_ADC_MspInit+0x298>)
 80015a4:	4a89      	ldr	r2, [pc, #548]	; (80017cc <HAL_ADC_MspInit+0x29c>)
 80015a6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80015a8:	4b87      	ldr	r3, [pc, #540]	; (80017c8 <HAL_ADC_MspInit+0x298>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015ae:	4b86      	ldr	r3, [pc, #536]	; (80017c8 <HAL_ADC_MspInit+0x298>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015b4:	4b84      	ldr	r3, [pc, #528]	; (80017c8 <HAL_ADC_MspInit+0x298>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015ba:	4b83      	ldr	r3, [pc, #524]	; (80017c8 <HAL_ADC_MspInit+0x298>)
 80015bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015c0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015c2:	4b81      	ldr	r3, [pc, #516]	; (80017c8 <HAL_ADC_MspInit+0x298>)
 80015c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015c8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015ca:	4b7f      	ldr	r3, [pc, #508]	; (80017c8 <HAL_ADC_MspInit+0x298>)
 80015cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015d0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80015d2:	4b7d      	ldr	r3, [pc, #500]	; (80017c8 <HAL_ADC_MspInit+0x298>)
 80015d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015d8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80015da:	4b7b      	ldr	r3, [pc, #492]	; (80017c8 <HAL_ADC_MspInit+0x298>)
 80015dc:	2200      	movs	r2, #0
 80015de:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80015e0:	4b79      	ldr	r3, [pc, #484]	; (80017c8 <HAL_ADC_MspInit+0x298>)
 80015e2:	2204      	movs	r2, #4
 80015e4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80015e6:	4b78      	ldr	r3, [pc, #480]	; (80017c8 <HAL_ADC_MspInit+0x298>)
 80015e8:	2203      	movs	r2, #3
 80015ea:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 80015ec:	4b76      	ldr	r3, [pc, #472]	; (80017c8 <HAL_ADC_MspInit+0x298>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80015f2:	4b75      	ldr	r3, [pc, #468]	; (80017c8 <HAL_ADC_MspInit+0x298>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80015f8:	4873      	ldr	r0, [pc, #460]	; (80017c8 <HAL_ADC_MspInit+0x298>)
 80015fa:	f001 fabb 	bl	8002b74 <HAL_DMA_Init>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <HAL_ADC_MspInit+0xd8>
    {
      Error_Handler();
 8001604:	f7ff ff62 	bl	80014cc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4a6f      	ldr	r2, [pc, #444]	; (80017c8 <HAL_ADC_MspInit+0x298>)
 800160c:	639a      	str	r2, [r3, #56]	; 0x38
 800160e:	4a6e      	ldr	r2, [pc, #440]	; (80017c8 <HAL_ADC_MspInit+0x298>)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001614:	e0ce      	b.n	80017b4 <HAL_ADC_MspInit+0x284>
  else if(hadc->Instance==ADC2)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a6d      	ldr	r2, [pc, #436]	; (80017d0 <HAL_ADC_MspInit+0x2a0>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d162      	bne.n	80016e6 <HAL_ADC_MspInit+0x1b6>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001620:	2300      	movs	r3, #0
 8001622:	61bb      	str	r3, [r7, #24]
 8001624:	4b66      	ldr	r3, [pc, #408]	; (80017c0 <HAL_ADC_MspInit+0x290>)
 8001626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001628:	4a65      	ldr	r2, [pc, #404]	; (80017c0 <HAL_ADC_MspInit+0x290>)
 800162a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800162e:	6453      	str	r3, [r2, #68]	; 0x44
 8001630:	4b63      	ldr	r3, [pc, #396]	; (80017c0 <HAL_ADC_MspInit+0x290>)
 8001632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001634:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001638:	61bb      	str	r3, [r7, #24]
 800163a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]
 8001640:	4b5f      	ldr	r3, [pc, #380]	; (80017c0 <HAL_ADC_MspInit+0x290>)
 8001642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001644:	4a5e      	ldr	r2, [pc, #376]	; (80017c0 <HAL_ADC_MspInit+0x290>)
 8001646:	f043 0301 	orr.w	r3, r3, #1
 800164a:	6313      	str	r3, [r2, #48]	; 0x30
 800164c:	4b5c      	ldr	r3, [pc, #368]	; (80017c0 <HAL_ADC_MspInit+0x290>)
 800164e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	617b      	str	r3, [r7, #20]
 8001656:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001658:	2308      	movs	r3, #8
 800165a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800165c:	2303      	movs	r3, #3
 800165e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001664:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001668:	4619      	mov	r1, r3
 800166a:	4856      	ldr	r0, [pc, #344]	; (80017c4 <HAL_ADC_MspInit+0x294>)
 800166c:	f001 fd6c 	bl	8003148 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8001670:	4b58      	ldr	r3, [pc, #352]	; (80017d4 <HAL_ADC_MspInit+0x2a4>)
 8001672:	4a59      	ldr	r2, [pc, #356]	; (80017d8 <HAL_ADC_MspInit+0x2a8>)
 8001674:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8001676:	4b57      	ldr	r3, [pc, #348]	; (80017d4 <HAL_ADC_MspInit+0x2a4>)
 8001678:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800167c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800167e:	4b55      	ldr	r3, [pc, #340]	; (80017d4 <HAL_ADC_MspInit+0x2a4>)
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001684:	4b53      	ldr	r3, [pc, #332]	; (80017d4 <HAL_ADC_MspInit+0x2a4>)
 8001686:	2200      	movs	r2, #0
 8001688:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800168a:	4b52      	ldr	r3, [pc, #328]	; (80017d4 <HAL_ADC_MspInit+0x2a4>)
 800168c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001690:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001692:	4b50      	ldr	r3, [pc, #320]	; (80017d4 <HAL_ADC_MspInit+0x2a4>)
 8001694:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001698:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800169a:	4b4e      	ldr	r3, [pc, #312]	; (80017d4 <HAL_ADC_MspInit+0x2a4>)
 800169c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016a0:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80016a2:	4b4c      	ldr	r3, [pc, #304]	; (80017d4 <HAL_ADC_MspInit+0x2a4>)
 80016a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016a8:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80016aa:	4b4a      	ldr	r3, [pc, #296]	; (80017d4 <HAL_ADC_MspInit+0x2a4>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80016b0:	4b48      	ldr	r3, [pc, #288]	; (80017d4 <HAL_ADC_MspInit+0x2a4>)
 80016b2:	2204      	movs	r2, #4
 80016b4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80016b6:	4b47      	ldr	r3, [pc, #284]	; (80017d4 <HAL_ADC_MspInit+0x2a4>)
 80016b8:	2203      	movs	r2, #3
 80016ba:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc2.Init.MemBurst = DMA_MBURST_SINGLE;
 80016bc:	4b45      	ldr	r3, [pc, #276]	; (80017d4 <HAL_ADC_MspInit+0x2a4>)
 80016be:	2200      	movs	r2, #0
 80016c0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80016c2:	4b44      	ldr	r3, [pc, #272]	; (80017d4 <HAL_ADC_MspInit+0x2a4>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80016c8:	4842      	ldr	r0, [pc, #264]	; (80017d4 <HAL_ADC_MspInit+0x2a4>)
 80016ca:	f001 fa53 	bl	8002b74 <HAL_DMA_Init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <HAL_ADC_MspInit+0x1a8>
      Error_Handler();
 80016d4:	f7ff fefa 	bl	80014cc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4a3e      	ldr	r2, [pc, #248]	; (80017d4 <HAL_ADC_MspInit+0x2a4>)
 80016dc:	639a      	str	r2, [r3, #56]	; 0x38
 80016de:	4a3d      	ldr	r2, [pc, #244]	; (80017d4 <HAL_ADC_MspInit+0x2a4>)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6393      	str	r3, [r2, #56]	; 0x38
}
 80016e4:	e066      	b.n	80017b4 <HAL_ADC_MspInit+0x284>
  else if(hadc->Instance==ADC3)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a3c      	ldr	r2, [pc, #240]	; (80017dc <HAL_ADC_MspInit+0x2ac>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d161      	bne.n	80017b4 <HAL_ADC_MspInit+0x284>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80016f0:	2300      	movs	r3, #0
 80016f2:	613b      	str	r3, [r7, #16]
 80016f4:	4b32      	ldr	r3, [pc, #200]	; (80017c0 <HAL_ADC_MspInit+0x290>)
 80016f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f8:	4a31      	ldr	r2, [pc, #196]	; (80017c0 <HAL_ADC_MspInit+0x290>)
 80016fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016fe:	6453      	str	r3, [r2, #68]	; 0x44
 8001700:	4b2f      	ldr	r3, [pc, #188]	; (80017c0 <HAL_ADC_MspInit+0x290>)
 8001702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001708:	613b      	str	r3, [r7, #16]
 800170a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800170c:	2300      	movs	r3, #0
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	4b2b      	ldr	r3, [pc, #172]	; (80017c0 <HAL_ADC_MspInit+0x290>)
 8001712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001714:	4a2a      	ldr	r2, [pc, #168]	; (80017c0 <HAL_ADC_MspInit+0x290>)
 8001716:	f043 0304 	orr.w	r3, r3, #4
 800171a:	6313      	str	r3, [r2, #48]	; 0x30
 800171c:	4b28      	ldr	r3, [pc, #160]	; (80017c0 <HAL_ADC_MspInit+0x290>)
 800171e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001720:	f003 0304 	and.w	r3, r3, #4
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001728:	2304      	movs	r3, #4
 800172a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800172c:	2303      	movs	r3, #3
 800172e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001734:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001738:	4619      	mov	r1, r3
 800173a:	4829      	ldr	r0, [pc, #164]	; (80017e0 <HAL_ADC_MspInit+0x2b0>)
 800173c:	f001 fd04 	bl	8003148 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8001740:	4b28      	ldr	r3, [pc, #160]	; (80017e4 <HAL_ADC_MspInit+0x2b4>)
 8001742:	4a29      	ldr	r2, [pc, #164]	; (80017e8 <HAL_ADC_MspInit+0x2b8>)
 8001744:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8001746:	4b27      	ldr	r3, [pc, #156]	; (80017e4 <HAL_ADC_MspInit+0x2b4>)
 8001748:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800174c:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800174e:	4b25      	ldr	r3, [pc, #148]	; (80017e4 <HAL_ADC_MspInit+0x2b4>)
 8001750:	2200      	movs	r2, #0
 8001752:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001754:	4b23      	ldr	r3, [pc, #140]	; (80017e4 <HAL_ADC_MspInit+0x2b4>)
 8001756:	2200      	movs	r2, #0
 8001758:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800175a:	4b22      	ldr	r3, [pc, #136]	; (80017e4 <HAL_ADC_MspInit+0x2b4>)
 800175c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001760:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001762:	4b20      	ldr	r3, [pc, #128]	; (80017e4 <HAL_ADC_MspInit+0x2b4>)
 8001764:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001768:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800176a:	4b1e      	ldr	r3, [pc, #120]	; (80017e4 <HAL_ADC_MspInit+0x2b4>)
 800176c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001770:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001772:	4b1c      	ldr	r3, [pc, #112]	; (80017e4 <HAL_ADC_MspInit+0x2b4>)
 8001774:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001778:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800177a:	4b1a      	ldr	r3, [pc, #104]	; (80017e4 <HAL_ADC_MspInit+0x2b4>)
 800177c:	2200      	movs	r2, #0
 800177e:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001780:	4b18      	ldr	r3, [pc, #96]	; (80017e4 <HAL_ADC_MspInit+0x2b4>)
 8001782:	2204      	movs	r2, #4
 8001784:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001786:	4b17      	ldr	r3, [pc, #92]	; (80017e4 <HAL_ADC_MspInit+0x2b4>)
 8001788:	2203      	movs	r2, #3
 800178a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc3.Init.MemBurst = DMA_MBURST_SINGLE;
 800178c:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <HAL_ADC_MspInit+0x2b4>)
 800178e:	2200      	movs	r2, #0
 8001790:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001792:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <HAL_ADC_MspInit+0x2b4>)
 8001794:	2200      	movs	r2, #0
 8001796:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001798:	4812      	ldr	r0, [pc, #72]	; (80017e4 <HAL_ADC_MspInit+0x2b4>)
 800179a:	f001 f9eb 	bl	8002b74 <HAL_DMA_Init>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <HAL_ADC_MspInit+0x278>
      Error_Handler();
 80017a4:	f7ff fe92 	bl	80014cc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a0e      	ldr	r2, [pc, #56]	; (80017e4 <HAL_ADC_MspInit+0x2b4>)
 80017ac:	639a      	str	r2, [r3, #56]	; 0x38
 80017ae:	4a0d      	ldr	r2, [pc, #52]	; (80017e4 <HAL_ADC_MspInit+0x2b4>)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6393      	str	r3, [r2, #56]	; 0x38
}
 80017b4:	bf00      	nop
 80017b6:	3738      	adds	r7, #56	; 0x38
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40012000 	.word	0x40012000
 80017c0:	40023800 	.word	0x40023800
 80017c4:	40020000 	.word	0x40020000
 80017c8:	2000425c 	.word	0x2000425c
 80017cc:	40026410 	.word	0x40026410
 80017d0:	40012100 	.word	0x40012100
 80017d4:	2000435c 	.word	0x2000435c
 80017d8:	40026440 	.word	0x40026440
 80017dc:	40012200 	.word	0x40012200
 80017e0:	40020800 	.word	0x40020800
 80017e4:	20004168 	.word	0x20004168
 80017e8:	40026428 	.word	0x40026428

080017ec <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b08a      	sub	sp, #40	; 0x28
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f4:	f107 0314 	add.w	r3, r7, #20
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]
 8001802:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a1d      	ldr	r2, [pc, #116]	; (8001880 <HAL_CAN_MspInit+0x94>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d133      	bne.n	8001876 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	613b      	str	r3, [r7, #16]
 8001812:	4b1c      	ldr	r3, [pc, #112]	; (8001884 <HAL_CAN_MspInit+0x98>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	4a1b      	ldr	r2, [pc, #108]	; (8001884 <HAL_CAN_MspInit+0x98>)
 8001818:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800181c:	6413      	str	r3, [r2, #64]	; 0x40
 800181e:	4b19      	ldr	r3, [pc, #100]	; (8001884 <HAL_CAN_MspInit+0x98>)
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001826:	613b      	str	r3, [r7, #16]
 8001828:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	4b15      	ldr	r3, [pc, #84]	; (8001884 <HAL_CAN_MspInit+0x98>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	4a14      	ldr	r2, [pc, #80]	; (8001884 <HAL_CAN_MspInit+0x98>)
 8001834:	f043 0308 	orr.w	r3, r3, #8
 8001838:	6313      	str	r3, [r2, #48]	; 0x30
 800183a:	4b12      	ldr	r3, [pc, #72]	; (8001884 <HAL_CAN_MspInit+0x98>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	f003 0308 	and.w	r3, r3, #8
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001846:	2303      	movs	r3, #3
 8001848:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184a:	2302      	movs	r3, #2
 800184c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001852:	2303      	movs	r3, #3
 8001854:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001856:	2309      	movs	r3, #9
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800185a:	f107 0314 	add.w	r3, r7, #20
 800185e:	4619      	mov	r1, r3
 8001860:	4809      	ldr	r0, [pc, #36]	; (8001888 <HAL_CAN_MspInit+0x9c>)
 8001862:	f001 fc71 	bl	8003148 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001866:	2200      	movs	r2, #0
 8001868:	2105      	movs	r1, #5
 800186a:	2014      	movs	r0, #20
 800186c:	f001 f958 	bl	8002b20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001870:	2014      	movs	r0, #20
 8001872:	f001 f971 	bl	8002b58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001876:	bf00      	nop
 8001878:	3728      	adds	r7, #40	; 0x28
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40006400 	.word	0x40006400
 8001884:	40023800 	.word	0x40023800
 8001888:	40020c00 	.word	0x40020c00

0800188c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b08a      	sub	sp, #40	; 0x28
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001894:	f107 0314 	add.w	r3, r7, #20
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
 80018a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a19      	ldr	r2, [pc, #100]	; (8001910 <HAL_I2C_MspInit+0x84>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d12c      	bne.n	8001908 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	613b      	str	r3, [r7, #16]
 80018b2:	4b18      	ldr	r3, [pc, #96]	; (8001914 <HAL_I2C_MspInit+0x88>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	4a17      	ldr	r2, [pc, #92]	; (8001914 <HAL_I2C_MspInit+0x88>)
 80018b8:	f043 0302 	orr.w	r3, r3, #2
 80018bc:	6313      	str	r3, [r2, #48]	; 0x30
 80018be:	4b15      	ldr	r3, [pc, #84]	; (8001914 <HAL_I2C_MspInit+0x88>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	613b      	str	r3, [r7, #16]
 80018c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80018ca:	f44f 7310 	mov.w	r3, #576	; 0x240
 80018ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018d0:	2312      	movs	r3, #18
 80018d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018d4:	2301      	movs	r3, #1
 80018d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d8:	2300      	movs	r3, #0
 80018da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018dc:	2304      	movs	r3, #4
 80018de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e0:	f107 0314 	add.w	r3, r7, #20
 80018e4:	4619      	mov	r1, r3
 80018e6:	480c      	ldr	r0, [pc, #48]	; (8001918 <HAL_I2C_MspInit+0x8c>)
 80018e8:	f001 fc2e 	bl	8003148 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018ec:	2300      	movs	r3, #0
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	4b08      	ldr	r3, [pc, #32]	; (8001914 <HAL_I2C_MspInit+0x88>)
 80018f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f4:	4a07      	ldr	r2, [pc, #28]	; (8001914 <HAL_I2C_MspInit+0x88>)
 80018f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018fa:	6413      	str	r3, [r2, #64]	; 0x40
 80018fc:	4b05      	ldr	r3, [pc, #20]	; (8001914 <HAL_I2C_MspInit+0x88>)
 80018fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001900:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001908:	bf00      	nop
 800190a:	3728      	adds	r7, #40	; 0x28
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40005400 	.word	0x40005400
 8001914:	40023800 	.word	0x40023800
 8001918:	40020400 	.word	0x40020400

0800191c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08e      	sub	sp, #56	; 0x38
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a31      	ldr	r2, [pc, #196]	; (8001a0c <HAL_I2S_MspInit+0xf0>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d15a      	bne.n	8001a02 <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800194c:	2301      	movs	r3, #1
 800194e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001950:	23c0      	movs	r3, #192	; 0xc0
 8001952:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001954:	2302      	movs	r3, #2
 8001956:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001958:	f107 0314 	add.w	r3, r7, #20
 800195c:	4618      	mov	r0, r3
 800195e:	f004 fdd5 	bl	800650c <HAL_RCCEx_PeriphCLKConfig>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001968:	f7ff fdb0 	bl	80014cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800196c:	2300      	movs	r3, #0
 800196e:	613b      	str	r3, [r7, #16]
 8001970:	4b27      	ldr	r3, [pc, #156]	; (8001a10 <HAL_I2S_MspInit+0xf4>)
 8001972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001974:	4a26      	ldr	r2, [pc, #152]	; (8001a10 <HAL_I2S_MspInit+0xf4>)
 8001976:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800197a:	6413      	str	r3, [r2, #64]	; 0x40
 800197c:	4b24      	ldr	r3, [pc, #144]	; (8001a10 <HAL_I2S_MspInit+0xf4>)
 800197e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001980:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001984:	613b      	str	r3, [r7, #16]
 8001986:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001988:	2300      	movs	r3, #0
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	4b20      	ldr	r3, [pc, #128]	; (8001a10 <HAL_I2S_MspInit+0xf4>)
 800198e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001990:	4a1f      	ldr	r2, [pc, #124]	; (8001a10 <HAL_I2S_MspInit+0xf4>)
 8001992:	f043 0301 	orr.w	r3, r3, #1
 8001996:	6313      	str	r3, [r2, #48]	; 0x30
 8001998:	4b1d      	ldr	r3, [pc, #116]	; (8001a10 <HAL_I2S_MspInit+0xf4>)
 800199a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019a4:	2300      	movs	r3, #0
 80019a6:	60bb      	str	r3, [r7, #8]
 80019a8:	4b19      	ldr	r3, [pc, #100]	; (8001a10 <HAL_I2S_MspInit+0xf4>)
 80019aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ac:	4a18      	ldr	r2, [pc, #96]	; (8001a10 <HAL_I2S_MspInit+0xf4>)
 80019ae:	f043 0304 	orr.w	r3, r3, #4
 80019b2:	6313      	str	r3, [r2, #48]	; 0x30
 80019b4:	4b16      	ldr	r3, [pc, #88]	; (8001a10 <HAL_I2S_MspInit+0xf4>)
 80019b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b8:	f003 0304 	and.w	r3, r3, #4
 80019bc:	60bb      	str	r3, [r7, #8]
 80019be:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80019c0:	2310      	movs	r3, #16
 80019c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c4:	2302      	movs	r3, #2
 80019c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019cc:	2300      	movs	r3, #0
 80019ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80019d0:	2306      	movs	r3, #6
 80019d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80019d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019d8:	4619      	mov	r1, r3
 80019da:	480e      	ldr	r0, [pc, #56]	; (8001a14 <HAL_I2S_MspInit+0xf8>)
 80019dc:	f001 fbb4 	bl	8003148 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80019e0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e6:	2302      	movs	r3, #2
 80019e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ee:	2300      	movs	r3, #0
 80019f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80019f2:	2306      	movs	r3, #6
 80019f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019fa:	4619      	mov	r1, r3
 80019fc:	4806      	ldr	r0, [pc, #24]	; (8001a18 <HAL_I2S_MspInit+0xfc>)
 80019fe:	f001 fba3 	bl	8003148 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001a02:	bf00      	nop
 8001a04:	3738      	adds	r7, #56	; 0x38
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40003c00 	.word	0x40003c00
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40020000 	.word	0x40020000
 8001a18:	40020800 	.word	0x40020800

08001a1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b08a      	sub	sp, #40	; 0x28
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a24:	f107 0314 	add.w	r3, r7, #20
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	60da      	str	r2, [r3, #12]
 8001a32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a19      	ldr	r2, [pc, #100]	; (8001aa0 <HAL_SPI_MspInit+0x84>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d12b      	bne.n	8001a96 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	613b      	str	r3, [r7, #16]
 8001a42:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <HAL_SPI_MspInit+0x88>)
 8001a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a46:	4a17      	ldr	r2, [pc, #92]	; (8001aa4 <HAL_SPI_MspInit+0x88>)
 8001a48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a4e:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <HAL_SPI_MspInit+0x88>)
 8001a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a56:	613b      	str	r3, [r7, #16]
 8001a58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <HAL_SPI_MspInit+0x88>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	4a10      	ldr	r2, [pc, #64]	; (8001aa4 <HAL_SPI_MspInit+0x88>)
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <HAL_SPI_MspInit+0x88>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001a76:	23e0      	movs	r3, #224	; 0xe0
 8001a78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a82:	2300      	movs	r3, #0
 8001a84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a86:	2305      	movs	r3, #5
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8a:	f107 0314 	add.w	r3, r7, #20
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4805      	ldr	r0, [pc, #20]	; (8001aa8 <HAL_SPI_MspInit+0x8c>)
 8001a92:	f001 fb59 	bl	8003148 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a96:	bf00      	nop
 8001a98:	3728      	adds	r7, #40	; 0x28
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40013000 	.word	0x40013000
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	40020000 	.word	0x40020000

08001aac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08a      	sub	sp, #40	; 0x28
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab4:	f107 0314 	add.w	r3, r7, #20
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
 8001ac2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a28      	ldr	r2, [pc, #160]	; (8001b6c <HAL_UART_MspInit+0xc0>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d149      	bne.n	8001b62 <HAL_UART_MspInit+0xb6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	613b      	str	r3, [r7, #16]
 8001ad2:	4b27      	ldr	r3, [pc, #156]	; (8001b70 <HAL_UART_MspInit+0xc4>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	4a26      	ldr	r2, [pc, #152]	; (8001b70 <HAL_UART_MspInit+0xc4>)
 8001ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001adc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ade:	4b24      	ldr	r3, [pc, #144]	; (8001b70 <HAL_UART_MspInit+0xc4>)
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae6:	613b      	str	r3, [r7, #16]
 8001ae8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	4b20      	ldr	r3, [pc, #128]	; (8001b70 <HAL_UART_MspInit+0xc4>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	4a1f      	ldr	r2, [pc, #124]	; (8001b70 <HAL_UART_MspInit+0xc4>)
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	6313      	str	r3, [r2, #48]	; 0x30
 8001afa:	4b1d      	ldr	r3, [pc, #116]	; (8001b70 <HAL_UART_MspInit+0xc4>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	60bb      	str	r3, [r7, #8]
 8001b0a:	4b19      	ldr	r3, [pc, #100]	; (8001b70 <HAL_UART_MspInit+0xc4>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	4a18      	ldr	r2, [pc, #96]	; (8001b70 <HAL_UART_MspInit+0xc4>)
 8001b10:	f043 0308 	orr.w	r3, r3, #8
 8001b14:	6313      	str	r3, [r2, #48]	; 0x30
 8001b16:	4b16      	ldr	r3, [pc, #88]	; (8001b70 <HAL_UART_MspInit+0xc4>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	f003 0308 	and.w	r3, r3, #8
 8001b1e:	60bb      	str	r3, [r7, #8]
 8001b20:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b22:	2304      	movs	r3, #4
 8001b24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b26:	2302      	movs	r3, #2
 8001b28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b32:	2307      	movs	r3, #7
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b36:	f107 0314 	add.w	r3, r7, #20
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	480d      	ldr	r0, [pc, #52]	; (8001b74 <HAL_UART_MspInit+0xc8>)
 8001b3e:	f001 fb03 	bl	8003148 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b42:	2340      	movs	r3, #64	; 0x40
 8001b44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b46:	2302      	movs	r3, #2
 8001b48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b52:	2307      	movs	r3, #7
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b56:	f107 0314 	add.w	r3, r7, #20
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4806      	ldr	r0, [pc, #24]	; (8001b78 <HAL_UART_MspInit+0xcc>)
 8001b5e:	f001 faf3 	bl	8003148 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b62:	bf00      	nop
 8001b64:	3728      	adds	r7, #40	; 0x28
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40004400 	.word	0x40004400
 8001b70:	40023800 	.word	0x40023800
 8001b74:	40020000 	.word	0x40020000
 8001b78:	40020c00 	.word	0x40020c00

08001b7c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b08c      	sub	sp, #48	; 0x30
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	2019      	movs	r0, #25
 8001b92:	f000 ffc5 	bl	8002b20 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001b96:	2019      	movs	r0, #25
 8001b98:	f000 ffde 	bl	8002b58 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	4b1f      	ldr	r3, [pc, #124]	; (8001c20 <HAL_InitTick+0xa4>)
 8001ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba4:	4a1e      	ldr	r2, [pc, #120]	; (8001c20 <HAL_InitTick+0xa4>)
 8001ba6:	f043 0301 	orr.w	r3, r3, #1
 8001baa:	6453      	str	r3, [r2, #68]	; 0x44
 8001bac:	4b1c      	ldr	r3, [pc, #112]	; (8001c20 <HAL_InitTick+0xa4>)
 8001bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001bb8:	f107 0210 	add.w	r2, r7, #16
 8001bbc:	f107 0314 	add.w	r3, r7, #20
 8001bc0:	4611      	mov	r1, r2
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f004 fc70 	bl	80064a8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001bc8:	f004 fc5a 	bl	8006480 <HAL_RCC_GetPCLK2Freq>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd4:	4a13      	ldr	r2, [pc, #76]	; (8001c24 <HAL_InitTick+0xa8>)
 8001bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bda:	0c9b      	lsrs	r3, r3, #18
 8001bdc:	3b01      	subs	r3, #1
 8001bde:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001be0:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <HAL_InitTick+0xac>)
 8001be2:	4a12      	ldr	r2, [pc, #72]	; (8001c2c <HAL_InitTick+0xb0>)
 8001be4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001be6:	4b10      	ldr	r3, [pc, #64]	; (8001c28 <HAL_InitTick+0xac>)
 8001be8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bec:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001bee:	4a0e      	ldr	r2, [pc, #56]	; (8001c28 <HAL_InitTick+0xac>)
 8001bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bf2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001bf4:	4b0c      	ldr	r3, [pc, #48]	; (8001c28 <HAL_InitTick+0xac>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bfa:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <HAL_InitTick+0xac>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001c00:	4809      	ldr	r0, [pc, #36]	; (8001c28 <HAL_InitTick+0xac>)
 8001c02:	f004 fe4c 	bl	800689e <HAL_TIM_Base_Init>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d104      	bne.n	8001c16 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001c0c:	4806      	ldr	r0, [pc, #24]	; (8001c28 <HAL_InitTick+0xac>)
 8001c0e:	f004 fe9f 	bl	8006950 <HAL_TIM_Base_Start_IT>
 8001c12:	4603      	mov	r3, r0
 8001c14:	e000      	b.n	8001c18 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3730      	adds	r7, #48	; 0x30
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40023800 	.word	0x40023800
 8001c24:	431bde83 	.word	0x431bde83
 8001c28:	20004434 	.word	0x20004434
 8001c2c:	40010000 	.word	0x40010000

08001c30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c34:	e7fe      	b.n	8001c34 <NMI_Handler+0x4>

08001c36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c36:	b480      	push	{r7}
 8001c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c3a:	e7fe      	b.n	8001c3a <HardFault_Handler+0x4>

08001c3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c40:	e7fe      	b.n	8001c40 <MemManage_Handler+0x4>

08001c42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c42:	b480      	push	{r7}
 8001c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c46:	e7fe      	b.n	8001c46 <BusFault_Handler+0x4>

08001c48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c4c:	e7fe      	b.n	8001c4c <UsageFault_Handler+0x4>

08001c4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c52:	bf00      	nop
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001c60:	4802      	ldr	r0, [pc, #8]	; (8001c6c <CAN1_RX0_IRQHandler+0x10>)
 8001c62:	f000 fc6c 	bl	800253e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	200043bc 	.word	0x200043bc

08001c70 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c74:	4802      	ldr	r0, [pc, #8]	; (8001c80 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001c76:	f004 fedb 	bl	8006a30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20004434 	.word	0x20004434

08001c84 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c88:	4802      	ldr	r0, [pc, #8]	; (8001c94 <DMA2_Stream0_IRQHandler+0x10>)
 8001c8a:	f001 f821 	bl	8002cd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	2000425c 	.word	0x2000425c

08001c98 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001c9c:	4802      	ldr	r0, [pc, #8]	; (8001ca8 <DMA2_Stream1_IRQHandler+0x10>)
 8001c9e:	f001 f817 	bl	8002cd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20004168 	.word	0x20004168

08001cac <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001cb0:	4802      	ldr	r0, [pc, #8]	; (8001cbc <DMA2_Stream2_IRQHandler+0x10>)
 8001cb2:	f001 f80d 	bl	8002cd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	2000435c 	.word	0x2000435c

08001cc0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001cc4:	4802      	ldr	r0, [pc, #8]	; (8001cd0 <OTG_FS_IRQHandler+0x10>)
 8001cc6:	f001 fe91 	bl	80039ec <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20004864 	.word	0x20004864

08001cd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cdc:	4a14      	ldr	r2, [pc, #80]	; (8001d30 <_sbrk+0x5c>)
 8001cde:	4b15      	ldr	r3, [pc, #84]	; (8001d34 <_sbrk+0x60>)
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ce8:	4b13      	ldr	r3, [pc, #76]	; (8001d38 <_sbrk+0x64>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d102      	bne.n	8001cf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cf0:	4b11      	ldr	r3, [pc, #68]	; (8001d38 <_sbrk+0x64>)
 8001cf2:	4a12      	ldr	r2, [pc, #72]	; (8001d3c <_sbrk+0x68>)
 8001cf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cf6:	4b10      	ldr	r3, [pc, #64]	; (8001d38 <_sbrk+0x64>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d207      	bcs.n	8001d14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d04:	f00b fa34 	bl	800d170 <__errno>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	220c      	movs	r2, #12
 8001d0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d12:	e009      	b.n	8001d28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d14:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <_sbrk+0x64>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d1a:	4b07      	ldr	r3, [pc, #28]	; (8001d38 <_sbrk+0x64>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4413      	add	r3, r2
 8001d22:	4a05      	ldr	r2, [pc, #20]	; (8001d38 <_sbrk+0x64>)
 8001d24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d26:	68fb      	ldr	r3, [r7, #12]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3718      	adds	r7, #24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	20020000 	.word	0x20020000
 8001d34:	00000400 	.word	0x00000400
 8001d38:	20000364 	.word	0x20000364
 8001d3c:	20004b78 	.word	0x20004b78

08001d40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d44:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <SystemInit+0x20>)
 8001d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d4a:	4a05      	ldr	r2, [pc, #20]	; (8001d60 <SystemInit+0x20>)
 8001d4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	e000ed00 	.word	0xe000ed00

08001d64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d68:	480d      	ldr	r0, [pc, #52]	; (8001da0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d6a:	490e      	ldr	r1, [pc, #56]	; (8001da4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d6c:	4a0e      	ldr	r2, [pc, #56]	; (8001da8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d70:	e002      	b.n	8001d78 <LoopCopyDataInit>

08001d72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d76:	3304      	adds	r3, #4

08001d78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d7c:	d3f9      	bcc.n	8001d72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d7e:	4a0b      	ldr	r2, [pc, #44]	; (8001dac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d80:	4c0b      	ldr	r4, [pc, #44]	; (8001db0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d84:	e001      	b.n	8001d8a <LoopFillZerobss>

08001d86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d88:	3204      	adds	r2, #4

08001d8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d8c:	d3fb      	bcc.n	8001d86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d8e:	f7ff ffd7 	bl	8001d40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d92:	f00b f9f3 	bl	800d17c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d96:	f7fe ff0f 	bl	8000bb8 <main>
  bx  lr    
 8001d9a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001da0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001da4:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001da8:	0800dcdc 	.word	0x0800dcdc
  ldr r2, =_sbss
 8001dac:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001db0:	20004b78 	.word	0x20004b78

08001db4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001db4:	e7fe      	b.n	8001db4 <ADC_IRQHandler>
	...

08001db8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dbc:	4b0e      	ldr	r3, [pc, #56]	; (8001df8 <HAL_Init+0x40>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a0d      	ldr	r2, [pc, #52]	; (8001df8 <HAL_Init+0x40>)
 8001dc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dc8:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <HAL_Init+0x40>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a0a      	ldr	r2, [pc, #40]	; (8001df8 <HAL_Init+0x40>)
 8001dce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dd4:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <HAL_Init+0x40>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a07      	ldr	r2, [pc, #28]	; (8001df8 <HAL_Init+0x40>)
 8001dda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001de0:	2003      	movs	r0, #3
 8001de2:	f000 fe92 	bl	8002b0a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001de6:	200f      	movs	r0, #15
 8001de8:	f7ff fec8 	bl	8001b7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dec:	f7ff fb74 	bl	80014d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40023c00 	.word	0x40023c00

08001dfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e00:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <HAL_IncTick+0x20>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	461a      	mov	r2, r3
 8001e06:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <HAL_IncTick+0x24>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	4a04      	ldr	r2, [pc, #16]	; (8001e20 <HAL_IncTick+0x24>)
 8001e0e:	6013      	str	r3, [r2, #0]
}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	20000008 	.word	0x20000008
 8001e20:	2000447c 	.word	0x2000447c

08001e24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return uwTick;
 8001e28:	4b03      	ldr	r3, [pc, #12]	; (8001e38 <HAL_GetTick+0x14>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	2000447c 	.word	0x2000447c

08001e3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e44:	f7ff ffee 	bl	8001e24 <HAL_GetTick>
 8001e48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e54:	d005      	beq.n	8001e62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e56:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <HAL_Delay+0x44>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	4413      	add	r3, r2
 8001e60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e62:	bf00      	nop
 8001e64:	f7ff ffde 	bl	8001e24 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d8f7      	bhi.n	8001e64 <HAL_Delay+0x28>
  {
  }
}
 8001e74:	bf00      	nop
 8001e76:	bf00      	nop
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000008 	.word	0x20000008

08001e84 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e033      	b.n	8001f02 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d109      	bne.n	8001eb6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f7ff fb44 	bl	8001530 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	f003 0310 	and.w	r3, r3, #16
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d118      	bne.n	8001ef4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001eca:	f023 0302 	bic.w	r3, r3, #2
 8001ece:	f043 0202 	orr.w	r2, r3, #2
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f93a 	bl	8002150 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	f023 0303 	bic.w	r3, r3, #3
 8001eea:	f043 0201 	orr.w	r2, r3, #1
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	641a      	str	r2, [r3, #64]	; 0x40
 8001ef2:	e001      	b.n	8001ef8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
	...

08001f0c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f16:	2300      	movs	r3, #0
 8001f18:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d101      	bne.n	8001f28 <HAL_ADC_ConfigChannel+0x1c>
 8001f24:	2302      	movs	r3, #2
 8001f26:	e105      	b.n	8002134 <HAL_ADC_ConfigChannel+0x228>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2b09      	cmp	r3, #9
 8001f36:	d925      	bls.n	8001f84 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68d9      	ldr	r1, [r3, #12]
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	461a      	mov	r2, r3
 8001f46:	4613      	mov	r3, r2
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	4413      	add	r3, r2
 8001f4c:	3b1e      	subs	r3, #30
 8001f4e:	2207      	movs	r2, #7
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	43da      	mvns	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	400a      	ands	r2, r1
 8001f5c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68d9      	ldr	r1, [r3, #12]
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	4618      	mov	r0, r3
 8001f70:	4603      	mov	r3, r0
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	4403      	add	r3, r0
 8001f76:	3b1e      	subs	r3, #30
 8001f78:	409a      	lsls	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	60da      	str	r2, [r3, #12]
 8001f82:	e022      	b.n	8001fca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6919      	ldr	r1, [r3, #16]
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	461a      	mov	r2, r3
 8001f92:	4613      	mov	r3, r2
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	4413      	add	r3, r2
 8001f98:	2207      	movs	r2, #7
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43da      	mvns	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	400a      	ands	r2, r1
 8001fa6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6919      	ldr	r1, [r3, #16]
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	689a      	ldr	r2, [r3, #8]
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	4618      	mov	r0, r3
 8001fba:	4603      	mov	r3, r0
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	4403      	add	r3, r0
 8001fc0:	409a      	lsls	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	2b06      	cmp	r3, #6
 8001fd0:	d824      	bhi.n	800201c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685a      	ldr	r2, [r3, #4]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4413      	add	r3, r2
 8001fe2:	3b05      	subs	r3, #5
 8001fe4:	221f      	movs	r2, #31
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	43da      	mvns	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	400a      	ands	r2, r1
 8001ff2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	4618      	mov	r0, r3
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685a      	ldr	r2, [r3, #4]
 8002006:	4613      	mov	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4413      	add	r3, r2
 800200c:	3b05      	subs	r3, #5
 800200e:	fa00 f203 	lsl.w	r2, r0, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	430a      	orrs	r2, r1
 8002018:	635a      	str	r2, [r3, #52]	; 0x34
 800201a:	e04c      	b.n	80020b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	2b0c      	cmp	r3, #12
 8002022:	d824      	bhi.n	800206e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685a      	ldr	r2, [r3, #4]
 800202e:	4613      	mov	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	4413      	add	r3, r2
 8002034:	3b23      	subs	r3, #35	; 0x23
 8002036:	221f      	movs	r2, #31
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	43da      	mvns	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	400a      	ands	r2, r1
 8002044:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	b29b      	uxth	r3, r3
 8002052:	4618      	mov	r0, r3
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	4613      	mov	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4413      	add	r3, r2
 800205e:	3b23      	subs	r3, #35	; 0x23
 8002060:	fa00 f203 	lsl.w	r2, r0, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	430a      	orrs	r2, r1
 800206a:	631a      	str	r2, [r3, #48]	; 0x30
 800206c:	e023      	b.n	80020b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685a      	ldr	r2, [r3, #4]
 8002078:	4613      	mov	r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	4413      	add	r3, r2
 800207e:	3b41      	subs	r3, #65	; 0x41
 8002080:	221f      	movs	r2, #31
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	43da      	mvns	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	400a      	ands	r2, r1
 800208e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	b29b      	uxth	r3, r3
 800209c:	4618      	mov	r0, r3
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	4613      	mov	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	4413      	add	r3, r2
 80020a8:	3b41      	subs	r3, #65	; 0x41
 80020aa:	fa00 f203 	lsl.w	r2, r0, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	430a      	orrs	r2, r1
 80020b4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020b6:	4b22      	ldr	r3, [pc, #136]	; (8002140 <HAL_ADC_ConfigChannel+0x234>)
 80020b8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a21      	ldr	r2, [pc, #132]	; (8002144 <HAL_ADC_ConfigChannel+0x238>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d109      	bne.n	80020d8 <HAL_ADC_ConfigChannel+0x1cc>
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2b12      	cmp	r3, #18
 80020ca:	d105      	bne.n	80020d8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a19      	ldr	r2, [pc, #100]	; (8002144 <HAL_ADC_ConfigChannel+0x238>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d123      	bne.n	800212a <HAL_ADC_ConfigChannel+0x21e>
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2b10      	cmp	r3, #16
 80020e8:	d003      	beq.n	80020f2 <HAL_ADC_ConfigChannel+0x1e6>
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2b11      	cmp	r3, #17
 80020f0:	d11b      	bne.n	800212a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2b10      	cmp	r3, #16
 8002104:	d111      	bne.n	800212a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002106:	4b10      	ldr	r3, [pc, #64]	; (8002148 <HAL_ADC_ConfigChannel+0x23c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a10      	ldr	r2, [pc, #64]	; (800214c <HAL_ADC_ConfigChannel+0x240>)
 800210c:	fba2 2303 	umull	r2, r3, r2, r3
 8002110:	0c9a      	lsrs	r2, r3, #18
 8002112:	4613      	mov	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	4413      	add	r3, r2
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800211c:	e002      	b.n	8002124 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	3b01      	subs	r3, #1
 8002122:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1f9      	bne.n	800211e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	3714      	adds	r7, #20
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	40012300 	.word	0x40012300
 8002144:	40012000 	.word	0x40012000
 8002148:	20000000 	.word	0x20000000
 800214c:	431bde83 	.word	0x431bde83

08002150 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002158:	4b79      	ldr	r3, [pc, #484]	; (8002340 <ADC_Init+0x1f0>)
 800215a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	431a      	orrs	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	685a      	ldr	r2, [r3, #4]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002184:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	6859      	ldr	r1, [r3, #4]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	021a      	lsls	r2, r3, #8
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	430a      	orrs	r2, r1
 8002198:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80021a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	6859      	ldr	r1, [r3, #4]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	430a      	orrs	r2, r1
 80021ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	689a      	ldr	r2, [r3, #8]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6899      	ldr	r1, [r3, #8]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	68da      	ldr	r2, [r3, #12]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	430a      	orrs	r2, r1
 80021dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e2:	4a58      	ldr	r2, [pc, #352]	; (8002344 <ADC_Init+0x1f4>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d022      	beq.n	800222e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	689a      	ldr	r2, [r3, #8]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6899      	ldr	r1, [r3, #8]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	430a      	orrs	r2, r1
 8002208:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002218:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6899      	ldr	r1, [r3, #8]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	430a      	orrs	r2, r1
 800222a:	609a      	str	r2, [r3, #8]
 800222c:	e00f      	b.n	800224e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800223c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	689a      	ldr	r2, [r3, #8]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800224c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f022 0202 	bic.w	r2, r2, #2
 800225c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6899      	ldr	r1, [r3, #8]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	7e1b      	ldrb	r3, [r3, #24]
 8002268:	005a      	lsls	r2, r3, #1
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	430a      	orrs	r2, r1
 8002270:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d01b      	beq.n	80022b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800228a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	685a      	ldr	r2, [r3, #4]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800229a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	6859      	ldr	r1, [r3, #4]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a6:	3b01      	subs	r3, #1
 80022a8:	035a      	lsls	r2, r3, #13
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	430a      	orrs	r2, r1
 80022b0:	605a      	str	r2, [r3, #4]
 80022b2:	e007      	b.n	80022c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	685a      	ldr	r2, [r3, #4]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80022d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	3b01      	subs	r3, #1
 80022e0:	051a      	lsls	r2, r3, #20
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80022f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6899      	ldr	r1, [r3, #8]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002306:	025a      	lsls	r2, r3, #9
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	430a      	orrs	r2, r1
 800230e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	689a      	ldr	r2, [r3, #8]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800231e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6899      	ldr	r1, [r3, #8]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	029a      	lsls	r2, r3, #10
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	430a      	orrs	r2, r1
 8002332:	609a      	str	r2, [r3, #8]
}
 8002334:	bf00      	nop
 8002336:	3714      	adds	r7, #20
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	40012300 	.word	0x40012300
 8002344:	0f000001 	.word	0x0f000001

08002348 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e0ed      	b.n	8002536 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d102      	bne.n	800236c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f7ff fa40 	bl	80017ec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f042 0201 	orr.w	r2, r2, #1
 800237a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800237c:	f7ff fd52 	bl	8001e24 <HAL_GetTick>
 8002380:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002382:	e012      	b.n	80023aa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002384:	f7ff fd4e 	bl	8001e24 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b0a      	cmp	r3, #10
 8002390:	d90b      	bls.n	80023aa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002396:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2205      	movs	r2, #5
 80023a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e0c5      	b.n	8002536 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0e5      	beq.n	8002384 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 0202 	bic.w	r2, r2, #2
 80023c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023c8:	f7ff fd2c 	bl	8001e24 <HAL_GetTick>
 80023cc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80023ce:	e012      	b.n	80023f6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023d0:	f7ff fd28 	bl	8001e24 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b0a      	cmp	r3, #10
 80023dc:	d90b      	bls.n	80023f6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2205      	movs	r2, #5
 80023ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e09f      	b.n	8002536 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1e5      	bne.n	80023d0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	7e1b      	ldrb	r3, [r3, #24]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d108      	bne.n	800241e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	e007      	b.n	800242e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800242c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	7e5b      	ldrb	r3, [r3, #25]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d108      	bne.n	8002448 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	e007      	b.n	8002458 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002456:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	7e9b      	ldrb	r3, [r3, #26]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d108      	bne.n	8002472 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f042 0220 	orr.w	r2, r2, #32
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	e007      	b.n	8002482 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 0220 	bic.w	r2, r2, #32
 8002480:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	7edb      	ldrb	r3, [r3, #27]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d108      	bne.n	800249c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 0210 	bic.w	r2, r2, #16
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	e007      	b.n	80024ac <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 0210 	orr.w	r2, r2, #16
 80024aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	7f1b      	ldrb	r3, [r3, #28]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d108      	bne.n	80024c6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f042 0208 	orr.w	r2, r2, #8
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	e007      	b.n	80024d6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 0208 	bic.w	r2, r2, #8
 80024d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	7f5b      	ldrb	r3, [r3, #29]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d108      	bne.n	80024f0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f042 0204 	orr.w	r2, r2, #4
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	e007      	b.n	8002500 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f022 0204 	bic.w	r2, r2, #4
 80024fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	431a      	orrs	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	431a      	orrs	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	695b      	ldr	r3, [r3, #20]
 8002514:	ea42 0103 	orr.w	r1, r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	1e5a      	subs	r2, r3, #1
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	430a      	orrs	r2, r1
 8002524:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b08a      	sub	sp, #40	; 0x28
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002546:	2300      	movs	r3, #0
 8002548:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	695b      	ldr	r3, [r3, #20]
 8002550:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800257a:	6a3b      	ldr	r3, [r7, #32]
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	2b00      	cmp	r3, #0
 8002582:	d07c      	beq.n	800267e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b00      	cmp	r3, #0
 800258c:	d023      	beq.n	80025d6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2201      	movs	r2, #1
 8002594:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d003      	beq.n	80025a8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f000 f983 	bl	80028ac <HAL_CAN_TxMailbox0CompleteCallback>
 80025a6:	e016      	b.n	80025d6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	f003 0304 	and.w	r3, r3, #4
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d004      	beq.n	80025bc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80025b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025b8:	627b      	str	r3, [r7, #36]	; 0x24
 80025ba:	e00c      	b.n	80025d6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	f003 0308 	and.w	r3, r3, #8
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d004      	beq.n	80025d0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025cc:	627b      	str	r3, [r7, #36]	; 0x24
 80025ce:	e002      	b.n	80025d6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f000 f989 	bl	80028e8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d024      	beq.n	800262a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025e8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d003      	beq.n	80025fc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 f963 	bl	80028c0 <HAL_CAN_TxMailbox1CompleteCallback>
 80025fa:	e016      	b.n	800262a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002602:	2b00      	cmp	r3, #0
 8002604:	d004      	beq.n	8002610 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002608:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800260c:	627b      	str	r3, [r7, #36]	; 0x24
 800260e:	e00c      	b.n	800262a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002616:	2b00      	cmp	r3, #0
 8002618:	d004      	beq.n	8002624 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002620:	627b      	str	r3, [r7, #36]	; 0x24
 8002622:	e002      	b.n	800262a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 f969 	bl	80028fc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d024      	beq.n	800267e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800263c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d003      	beq.n	8002650 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f000 f943 	bl	80028d4 <HAL_CAN_TxMailbox2CompleteCallback>
 800264e:	e016      	b.n	800267e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d004      	beq.n	8002664 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002660:	627b      	str	r3, [r7, #36]	; 0x24
 8002662:	e00c      	b.n	800267e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d004      	beq.n	8002678 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002674:	627b      	str	r3, [r7, #36]	; 0x24
 8002676:	e002      	b.n	800267e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f000 f949 	bl	8002910 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800267e:	6a3b      	ldr	r3, [r7, #32]
 8002680:	f003 0308 	and.w	r3, r3, #8
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00c      	beq.n	80026a2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	f003 0310 	and.w	r3, r3, #16
 800268e:	2b00      	cmp	r3, #0
 8002690:	d007      	beq.n	80026a2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002698:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2210      	movs	r2, #16
 80026a0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80026a2:	6a3b      	ldr	r3, [r7, #32]
 80026a4:	f003 0304 	and.w	r3, r3, #4
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00b      	beq.n	80026c4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	f003 0308 	and.w	r3, r3, #8
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d006      	beq.n	80026c4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2208      	movs	r2, #8
 80026bc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 f93a 	bl	8002938 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80026c4:	6a3b      	ldr	r3, [r7, #32]
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d009      	beq.n	80026e2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	f003 0303 	and.w	r3, r3, #3
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d002      	beq.n	80026e2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f000 f921 	bl	8002924 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80026e2:	6a3b      	ldr	r3, [r7, #32]
 80026e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00c      	beq.n	8002706 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	f003 0310 	and.w	r3, r3, #16
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d007      	beq.n	8002706 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80026f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026fc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2210      	movs	r2, #16
 8002704:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002706:	6a3b      	ldr	r3, [r7, #32]
 8002708:	f003 0320 	and.w	r3, r3, #32
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00b      	beq.n	8002728 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	2b00      	cmp	r3, #0
 8002718:	d006      	beq.n	8002728 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2208      	movs	r2, #8
 8002720:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 f91c 	bl	8002960 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002728:	6a3b      	ldr	r3, [r7, #32]
 800272a:	f003 0310 	and.w	r3, r3, #16
 800272e:	2b00      	cmp	r3, #0
 8002730:	d009      	beq.n	8002746 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	f003 0303 	and.w	r3, r3, #3
 800273c:	2b00      	cmp	r3, #0
 800273e:	d002      	beq.n	8002746 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f000 f903 	bl	800294c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002746:	6a3b      	ldr	r3, [r7, #32]
 8002748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00b      	beq.n	8002768 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	f003 0310 	and.w	r3, r3, #16
 8002756:	2b00      	cmp	r3, #0
 8002758:	d006      	beq.n	8002768 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2210      	movs	r2, #16
 8002760:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 f906 	bl	8002974 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002768:	6a3b      	ldr	r3, [r7, #32]
 800276a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00b      	beq.n	800278a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	f003 0308 	and.w	r3, r3, #8
 8002778:	2b00      	cmp	r3, #0
 800277a:	d006      	beq.n	800278a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2208      	movs	r2, #8
 8002782:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f000 f8ff 	bl	8002988 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800278a:	6a3b      	ldr	r3, [r7, #32]
 800278c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d07b      	beq.n	800288c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	f003 0304 	and.w	r3, r3, #4
 800279a:	2b00      	cmp	r3, #0
 800279c:	d072      	beq.n	8002884 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800279e:	6a3b      	ldr	r3, [r7, #32]
 80027a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d008      	beq.n	80027ba <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d003      	beq.n	80027ba <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80027b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b4:	f043 0301 	orr.w	r3, r3, #1
 80027b8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80027ba:	6a3b      	ldr	r3, [r7, #32]
 80027bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d008      	beq.n	80027d6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80027ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d0:	f043 0302 	orr.w	r3, r3, #2
 80027d4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80027d6:	6a3b      	ldr	r3, [r7, #32]
 80027d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d008      	beq.n	80027f2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80027ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ec:	f043 0304 	orr.w	r3, r3, #4
 80027f0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80027f2:	6a3b      	ldr	r3, [r7, #32]
 80027f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d043      	beq.n	8002884 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002802:	2b00      	cmp	r3, #0
 8002804:	d03e      	beq.n	8002884 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800280c:	2b60      	cmp	r3, #96	; 0x60
 800280e:	d02b      	beq.n	8002868 <HAL_CAN_IRQHandler+0x32a>
 8002810:	2b60      	cmp	r3, #96	; 0x60
 8002812:	d82e      	bhi.n	8002872 <HAL_CAN_IRQHandler+0x334>
 8002814:	2b50      	cmp	r3, #80	; 0x50
 8002816:	d022      	beq.n	800285e <HAL_CAN_IRQHandler+0x320>
 8002818:	2b50      	cmp	r3, #80	; 0x50
 800281a:	d82a      	bhi.n	8002872 <HAL_CAN_IRQHandler+0x334>
 800281c:	2b40      	cmp	r3, #64	; 0x40
 800281e:	d019      	beq.n	8002854 <HAL_CAN_IRQHandler+0x316>
 8002820:	2b40      	cmp	r3, #64	; 0x40
 8002822:	d826      	bhi.n	8002872 <HAL_CAN_IRQHandler+0x334>
 8002824:	2b30      	cmp	r3, #48	; 0x30
 8002826:	d010      	beq.n	800284a <HAL_CAN_IRQHandler+0x30c>
 8002828:	2b30      	cmp	r3, #48	; 0x30
 800282a:	d822      	bhi.n	8002872 <HAL_CAN_IRQHandler+0x334>
 800282c:	2b10      	cmp	r3, #16
 800282e:	d002      	beq.n	8002836 <HAL_CAN_IRQHandler+0x2f8>
 8002830:	2b20      	cmp	r3, #32
 8002832:	d005      	beq.n	8002840 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002834:	e01d      	b.n	8002872 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	f043 0308 	orr.w	r3, r3, #8
 800283c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800283e:	e019      	b.n	8002874 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	f043 0310 	orr.w	r3, r3, #16
 8002846:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002848:	e014      	b.n	8002874 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	f043 0320 	orr.w	r3, r3, #32
 8002850:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002852:	e00f      	b.n	8002874 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800285a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800285c:	e00a      	b.n	8002874 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002864:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002866:	e005      	b.n	8002874 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800286e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002870:	e000      	b.n	8002874 <HAL_CAN_IRQHandler+0x336>
            break;
 8002872:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	699a      	ldr	r2, [r3, #24]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002882:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2204      	movs	r2, #4
 800288a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288e:	2b00      	cmp	r3, #0
 8002890:	d008      	beq.n	80028a4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002898:	431a      	orrs	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 f87c 	bl	800299c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80028a4:	bf00      	nop
 80028a6:	3728      	adds	r7, #40	; 0x28
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f003 0307 	and.w	r3, r3, #7
 80029be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029c0:	4b0c      	ldr	r3, [pc, #48]	; (80029f4 <__NVIC_SetPriorityGrouping+0x44>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029c6:	68ba      	ldr	r2, [r7, #8]
 80029c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029cc:	4013      	ands	r3, r2
 80029ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029e2:	4a04      	ldr	r2, [pc, #16]	; (80029f4 <__NVIC_SetPriorityGrouping+0x44>)
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	60d3      	str	r3, [r2, #12]
}
 80029e8:	bf00      	nop
 80029ea:	3714      	adds	r7, #20
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	e000ed00 	.word	0xe000ed00

080029f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029fc:	4b04      	ldr	r3, [pc, #16]	; (8002a10 <__NVIC_GetPriorityGrouping+0x18>)
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	0a1b      	lsrs	r3, r3, #8
 8002a02:	f003 0307 	and.w	r3, r3, #7
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr
 8002a10:	e000ed00 	.word	0xe000ed00

08002a14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	db0b      	blt.n	8002a3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a26:	79fb      	ldrb	r3, [r7, #7]
 8002a28:	f003 021f 	and.w	r2, r3, #31
 8002a2c:	4907      	ldr	r1, [pc, #28]	; (8002a4c <__NVIC_EnableIRQ+0x38>)
 8002a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a32:	095b      	lsrs	r3, r3, #5
 8002a34:	2001      	movs	r0, #1
 8002a36:	fa00 f202 	lsl.w	r2, r0, r2
 8002a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a3e:	bf00      	nop
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	e000e100 	.word	0xe000e100

08002a50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	4603      	mov	r3, r0
 8002a58:	6039      	str	r1, [r7, #0]
 8002a5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	db0a      	blt.n	8002a7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	b2da      	uxtb	r2, r3
 8002a68:	490c      	ldr	r1, [pc, #48]	; (8002a9c <__NVIC_SetPriority+0x4c>)
 8002a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6e:	0112      	lsls	r2, r2, #4
 8002a70:	b2d2      	uxtb	r2, r2
 8002a72:	440b      	add	r3, r1
 8002a74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a78:	e00a      	b.n	8002a90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	b2da      	uxtb	r2, r3
 8002a7e:	4908      	ldr	r1, [pc, #32]	; (8002aa0 <__NVIC_SetPriority+0x50>)
 8002a80:	79fb      	ldrb	r3, [r7, #7]
 8002a82:	f003 030f 	and.w	r3, r3, #15
 8002a86:	3b04      	subs	r3, #4
 8002a88:	0112      	lsls	r2, r2, #4
 8002a8a:	b2d2      	uxtb	r2, r2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	761a      	strb	r2, [r3, #24]
}
 8002a90:	bf00      	nop
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	e000e100 	.word	0xe000e100
 8002aa0:	e000ed00 	.word	0xe000ed00

08002aa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b089      	sub	sp, #36	; 0x24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f003 0307 	and.w	r3, r3, #7
 8002ab6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	f1c3 0307 	rsb	r3, r3, #7
 8002abe:	2b04      	cmp	r3, #4
 8002ac0:	bf28      	it	cs
 8002ac2:	2304      	movcs	r3, #4
 8002ac4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	3304      	adds	r3, #4
 8002aca:	2b06      	cmp	r3, #6
 8002acc:	d902      	bls.n	8002ad4 <NVIC_EncodePriority+0x30>
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	3b03      	subs	r3, #3
 8002ad2:	e000      	b.n	8002ad6 <NVIC_EncodePriority+0x32>
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	43da      	mvns	r2, r3
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	401a      	ands	r2, r3
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002aec:	f04f 31ff 	mov.w	r1, #4294967295
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	fa01 f303 	lsl.w	r3, r1, r3
 8002af6:	43d9      	mvns	r1, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002afc:	4313      	orrs	r3, r2
         );
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3724      	adds	r7, #36	; 0x24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr

08002b0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b082      	sub	sp, #8
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f7ff ff4c 	bl	80029b0 <__NVIC_SetPriorityGrouping>
}
 8002b18:	bf00      	nop
 8002b1a:	3708      	adds	r7, #8
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	4603      	mov	r3, r0
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
 8002b2c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b32:	f7ff ff61 	bl	80029f8 <__NVIC_GetPriorityGrouping>
 8002b36:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	68b9      	ldr	r1, [r7, #8]
 8002b3c:	6978      	ldr	r0, [r7, #20]
 8002b3e:	f7ff ffb1 	bl	8002aa4 <NVIC_EncodePriority>
 8002b42:	4602      	mov	r2, r0
 8002b44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b48:	4611      	mov	r1, r2
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7ff ff80 	bl	8002a50 <__NVIC_SetPriority>
}
 8002b50:	bf00      	nop
 8002b52:	3718      	adds	r7, #24
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4603      	mov	r3, r0
 8002b60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7ff ff54 	bl	8002a14 <__NVIC_EnableIRQ>
}
 8002b6c:	bf00      	nop
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b80:	f7ff f950 	bl	8001e24 <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d101      	bne.n	8002b90 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e099      	b.n	8002cc4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2202      	movs	r2, #2
 8002b94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 0201 	bic.w	r2, r2, #1
 8002bae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bb0:	e00f      	b.n	8002bd2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bb2:	f7ff f937 	bl	8001e24 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b05      	cmp	r3, #5
 8002bbe:	d908      	bls.n	8002bd2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2220      	movs	r2, #32
 8002bc4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2203      	movs	r2, #3
 8002bca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e078      	b.n	8002cc4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0301 	and.w	r3, r3, #1
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d1e8      	bne.n	8002bb2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	4b38      	ldr	r3, [pc, #224]	; (8002ccc <HAL_DMA_Init+0x158>)
 8002bec:	4013      	ands	r3, r2
 8002bee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685a      	ldr	r2, [r3, #4]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a1b      	ldr	r3, [r3, #32]
 8002c1c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c28:	2b04      	cmp	r3, #4
 8002c2a:	d107      	bne.n	8002c3c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c34:	4313      	orrs	r3, r2
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	697a      	ldr	r2, [r7, #20]
 8002c42:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	f023 0307 	bic.w	r3, r3, #7
 8002c52:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c62:	2b04      	cmp	r3, #4
 8002c64:	d117      	bne.n	8002c96 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00e      	beq.n	8002c96 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f000 f9e9 	bl	8003050 <DMA_CheckFifoParam>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d008      	beq.n	8002c96 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2240      	movs	r2, #64	; 0x40
 8002c88:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002c92:	2301      	movs	r3, #1
 8002c94:	e016      	b.n	8002cc4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	697a      	ldr	r2, [r7, #20]
 8002c9c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 f9a0 	bl	8002fe4 <DMA_CalcBaseAndBitshift>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cac:	223f      	movs	r2, #63	; 0x3f
 8002cae:	409a      	lsls	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3718      	adds	r7, #24
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	f010803f 	.word	0xf010803f

08002cd0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002cdc:	4b92      	ldr	r3, [pc, #584]	; (8002f28 <HAL_DMA_IRQHandler+0x258>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a92      	ldr	r2, [pc, #584]	; (8002f2c <HAL_DMA_IRQHandler+0x25c>)
 8002ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce6:	0a9b      	lsrs	r3, r3, #10
 8002ce8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cfa:	2208      	movs	r2, #8
 8002cfc:	409a      	lsls	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	4013      	ands	r3, r2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d01a      	beq.n	8002d3c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d013      	beq.n	8002d3c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f022 0204 	bic.w	r2, r2, #4
 8002d22:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d28:	2208      	movs	r2, #8
 8002d2a:	409a      	lsls	r2, r3
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d34:	f043 0201 	orr.w	r2, r3, #1
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d40:	2201      	movs	r2, #1
 8002d42:	409a      	lsls	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	4013      	ands	r3, r2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d012      	beq.n	8002d72 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00b      	beq.n	8002d72 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d5e:	2201      	movs	r2, #1
 8002d60:	409a      	lsls	r2, r3
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6a:	f043 0202 	orr.w	r2, r3, #2
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d76:	2204      	movs	r2, #4
 8002d78:	409a      	lsls	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d012      	beq.n	8002da8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00b      	beq.n	8002da8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d94:	2204      	movs	r2, #4
 8002d96:	409a      	lsls	r2, r3
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da0:	f043 0204 	orr.w	r2, r3, #4
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dac:	2210      	movs	r2, #16
 8002dae:	409a      	lsls	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	4013      	ands	r3, r2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d043      	beq.n	8002e40 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0308 	and.w	r3, r3, #8
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d03c      	beq.n	8002e40 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dca:	2210      	movs	r2, #16
 8002dcc:	409a      	lsls	r2, r3
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d018      	beq.n	8002e12 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d108      	bne.n	8002e00 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d024      	beq.n	8002e40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	4798      	blx	r3
 8002dfe:	e01f      	b.n	8002e40 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d01b      	beq.n	8002e40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	4798      	blx	r3
 8002e10:	e016      	b.n	8002e40 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d107      	bne.n	8002e30 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f022 0208 	bic.w	r2, r2, #8
 8002e2e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d003      	beq.n	8002e40 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e44:	2220      	movs	r2, #32
 8002e46:	409a      	lsls	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f000 808e 	beq.w	8002f6e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0310 	and.w	r3, r3, #16
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f000 8086 	beq.w	8002f6e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e66:	2220      	movs	r2, #32
 8002e68:	409a      	lsls	r2, r3
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b05      	cmp	r3, #5
 8002e78:	d136      	bne.n	8002ee8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 0216 	bic.w	r2, r2, #22
 8002e88:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	695a      	ldr	r2, [r3, #20]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e98:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d103      	bne.n	8002eaa <HAL_DMA_IRQHandler+0x1da>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d007      	beq.n	8002eba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 0208 	bic.w	r2, r2, #8
 8002eb8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ebe:	223f      	movs	r2, #63	; 0x3f
 8002ec0:	409a      	lsls	r2, r3
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d07d      	beq.n	8002fda <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	4798      	blx	r3
        }
        return;
 8002ee6:	e078      	b.n	8002fda <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d01c      	beq.n	8002f30 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d108      	bne.n	8002f16 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d030      	beq.n	8002f6e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	4798      	blx	r3
 8002f14:	e02b      	b.n	8002f6e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d027      	beq.n	8002f6e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	4798      	blx	r3
 8002f26:	e022      	b.n	8002f6e <HAL_DMA_IRQHandler+0x29e>
 8002f28:	20000000 	.word	0x20000000
 8002f2c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d10f      	bne.n	8002f5e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 0210 	bic.w	r2, r2, #16
 8002f4c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d003      	beq.n	8002f6e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d032      	beq.n	8002fdc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d022      	beq.n	8002fc8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2205      	movs	r2, #5
 8002f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 0201 	bic.w	r2, r2, #1
 8002f98:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	60bb      	str	r3, [r7, #8]
 8002fa0:	697a      	ldr	r2, [r7, #20]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d307      	bcc.n	8002fb6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0301 	and.w	r3, r3, #1
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1f2      	bne.n	8002f9a <HAL_DMA_IRQHandler+0x2ca>
 8002fb4:	e000      	b.n	8002fb8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002fb6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d005      	beq.n	8002fdc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	4798      	blx	r3
 8002fd8:	e000      	b.n	8002fdc <HAL_DMA_IRQHandler+0x30c>
        return;
 8002fda:	bf00      	nop
    }
  }
}
 8002fdc:	3718      	adds	r7, #24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop

08002fe4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	3b10      	subs	r3, #16
 8002ff4:	4a14      	ldr	r2, [pc, #80]	; (8003048 <DMA_CalcBaseAndBitshift+0x64>)
 8002ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffa:	091b      	lsrs	r3, r3, #4
 8002ffc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ffe:	4a13      	ldr	r2, [pc, #76]	; (800304c <DMA_CalcBaseAndBitshift+0x68>)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	4413      	add	r3, r2
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	461a      	mov	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2b03      	cmp	r3, #3
 8003010:	d909      	bls.n	8003026 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800301a:	f023 0303 	bic.w	r3, r3, #3
 800301e:	1d1a      	adds	r2, r3, #4
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	659a      	str	r2, [r3, #88]	; 0x58
 8003024:	e007      	b.n	8003036 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800302e:	f023 0303 	bic.w	r3, r3, #3
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800303a:	4618      	mov	r0, r3
 800303c:	3714      	adds	r7, #20
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	aaaaaaab 	.word	0xaaaaaaab
 800304c:	0800dc30 	.word	0x0800dc30

08003050 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003058:	2300      	movs	r3, #0
 800305a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003060:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d11f      	bne.n	80030aa <DMA_CheckFifoParam+0x5a>
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	2b03      	cmp	r3, #3
 800306e:	d856      	bhi.n	800311e <DMA_CheckFifoParam+0xce>
 8003070:	a201      	add	r2, pc, #4	; (adr r2, 8003078 <DMA_CheckFifoParam+0x28>)
 8003072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003076:	bf00      	nop
 8003078:	08003089 	.word	0x08003089
 800307c:	0800309b 	.word	0x0800309b
 8003080:	08003089 	.word	0x08003089
 8003084:	0800311f 	.word	0x0800311f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d046      	beq.n	8003122 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003098:	e043      	b.n	8003122 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030a2:	d140      	bne.n	8003126 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030a8:	e03d      	b.n	8003126 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030b2:	d121      	bne.n	80030f8 <DMA_CheckFifoParam+0xa8>
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	2b03      	cmp	r3, #3
 80030b8:	d837      	bhi.n	800312a <DMA_CheckFifoParam+0xda>
 80030ba:	a201      	add	r2, pc, #4	; (adr r2, 80030c0 <DMA_CheckFifoParam+0x70>)
 80030bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c0:	080030d1 	.word	0x080030d1
 80030c4:	080030d7 	.word	0x080030d7
 80030c8:	080030d1 	.word	0x080030d1
 80030cc:	080030e9 	.word	0x080030e9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	73fb      	strb	r3, [r7, #15]
      break;
 80030d4:	e030      	b.n	8003138 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d025      	beq.n	800312e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030e6:	e022      	b.n	800312e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030f0:	d11f      	bne.n	8003132 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80030f6:	e01c      	b.n	8003132 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d903      	bls.n	8003106 <DMA_CheckFifoParam+0xb6>
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2b03      	cmp	r3, #3
 8003102:	d003      	beq.n	800310c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003104:	e018      	b.n	8003138 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	73fb      	strb	r3, [r7, #15]
      break;
 800310a:	e015      	b.n	8003138 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003110:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00e      	beq.n	8003136 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	73fb      	strb	r3, [r7, #15]
      break;
 800311c:	e00b      	b.n	8003136 <DMA_CheckFifoParam+0xe6>
      break;
 800311e:	bf00      	nop
 8003120:	e00a      	b.n	8003138 <DMA_CheckFifoParam+0xe8>
      break;
 8003122:	bf00      	nop
 8003124:	e008      	b.n	8003138 <DMA_CheckFifoParam+0xe8>
      break;
 8003126:	bf00      	nop
 8003128:	e006      	b.n	8003138 <DMA_CheckFifoParam+0xe8>
      break;
 800312a:	bf00      	nop
 800312c:	e004      	b.n	8003138 <DMA_CheckFifoParam+0xe8>
      break;
 800312e:	bf00      	nop
 8003130:	e002      	b.n	8003138 <DMA_CheckFifoParam+0xe8>
      break;   
 8003132:	bf00      	nop
 8003134:	e000      	b.n	8003138 <DMA_CheckFifoParam+0xe8>
      break;
 8003136:	bf00      	nop
    }
  } 
  
  return status; 
 8003138:	7bfb      	ldrb	r3, [r7, #15]
}
 800313a:	4618      	mov	r0, r3
 800313c:	3714      	adds	r7, #20
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop

08003148 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003148:	b480      	push	{r7}
 800314a:	b089      	sub	sp, #36	; 0x24
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003152:	2300      	movs	r3, #0
 8003154:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003156:	2300      	movs	r3, #0
 8003158:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800315a:	2300      	movs	r3, #0
 800315c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800315e:	2300      	movs	r3, #0
 8003160:	61fb      	str	r3, [r7, #28]
 8003162:	e16b      	b.n	800343c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003164:	2201      	movs	r2, #1
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	fa02 f303 	lsl.w	r3, r2, r3
 800316c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	4013      	ands	r3, r2
 8003176:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	429a      	cmp	r2, r3
 800317e:	f040 815a 	bne.w	8003436 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f003 0303 	and.w	r3, r3, #3
 800318a:	2b01      	cmp	r3, #1
 800318c:	d005      	beq.n	800319a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003196:	2b02      	cmp	r3, #2
 8003198:	d130      	bne.n	80031fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	2203      	movs	r2, #3
 80031a6:	fa02 f303 	lsl.w	r3, r2, r3
 80031aa:	43db      	mvns	r3, r3
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	4013      	ands	r3, r2
 80031b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	68da      	ldr	r2, [r3, #12]
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	fa02 f303 	lsl.w	r3, r2, r3
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031d0:	2201      	movs	r2, #1
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	43db      	mvns	r3, r3
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	4013      	ands	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	091b      	lsrs	r3, r3, #4
 80031e6:	f003 0201 	and.w	r2, r3, #1
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f003 0303 	and.w	r3, r3, #3
 8003204:	2b03      	cmp	r3, #3
 8003206:	d017      	beq.n	8003238 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	2203      	movs	r2, #3
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	43db      	mvns	r3, r3
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	4013      	ands	r3, r2
 800321e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	fa02 f303 	lsl.w	r3, r2, r3
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	4313      	orrs	r3, r2
 8003230:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f003 0303 	and.w	r3, r3, #3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d123      	bne.n	800328c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	08da      	lsrs	r2, r3, #3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	3208      	adds	r2, #8
 800324c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003250:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	220f      	movs	r2, #15
 800325c:	fa02 f303 	lsl.w	r3, r2, r3
 8003260:	43db      	mvns	r3, r3
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	4013      	ands	r3, r2
 8003266:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	691a      	ldr	r2, [r3, #16]
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	f003 0307 	and.w	r3, r3, #7
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	4313      	orrs	r3, r2
 800327c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	08da      	lsrs	r2, r3, #3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	3208      	adds	r2, #8
 8003286:	69b9      	ldr	r1, [r7, #24]
 8003288:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	2203      	movs	r2, #3
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	43db      	mvns	r3, r3
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	4013      	ands	r3, r2
 80032a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f003 0203 	and.w	r2, r3, #3
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f000 80b4 	beq.w	8003436 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ce:	2300      	movs	r3, #0
 80032d0:	60fb      	str	r3, [r7, #12]
 80032d2:	4b60      	ldr	r3, [pc, #384]	; (8003454 <HAL_GPIO_Init+0x30c>)
 80032d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d6:	4a5f      	ldr	r2, [pc, #380]	; (8003454 <HAL_GPIO_Init+0x30c>)
 80032d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032dc:	6453      	str	r3, [r2, #68]	; 0x44
 80032de:	4b5d      	ldr	r3, [pc, #372]	; (8003454 <HAL_GPIO_Init+0x30c>)
 80032e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032ea:	4a5b      	ldr	r2, [pc, #364]	; (8003458 <HAL_GPIO_Init+0x310>)
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	089b      	lsrs	r3, r3, #2
 80032f0:	3302      	adds	r3, #2
 80032f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	f003 0303 	and.w	r3, r3, #3
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	220f      	movs	r2, #15
 8003302:	fa02 f303 	lsl.w	r3, r2, r3
 8003306:	43db      	mvns	r3, r3
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	4013      	ands	r3, r2
 800330c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a52      	ldr	r2, [pc, #328]	; (800345c <HAL_GPIO_Init+0x314>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d02b      	beq.n	800336e <HAL_GPIO_Init+0x226>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a51      	ldr	r2, [pc, #324]	; (8003460 <HAL_GPIO_Init+0x318>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d025      	beq.n	800336a <HAL_GPIO_Init+0x222>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a50      	ldr	r2, [pc, #320]	; (8003464 <HAL_GPIO_Init+0x31c>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d01f      	beq.n	8003366 <HAL_GPIO_Init+0x21e>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a4f      	ldr	r2, [pc, #316]	; (8003468 <HAL_GPIO_Init+0x320>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d019      	beq.n	8003362 <HAL_GPIO_Init+0x21a>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a4e      	ldr	r2, [pc, #312]	; (800346c <HAL_GPIO_Init+0x324>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d013      	beq.n	800335e <HAL_GPIO_Init+0x216>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a4d      	ldr	r2, [pc, #308]	; (8003470 <HAL_GPIO_Init+0x328>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d00d      	beq.n	800335a <HAL_GPIO_Init+0x212>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a4c      	ldr	r2, [pc, #304]	; (8003474 <HAL_GPIO_Init+0x32c>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d007      	beq.n	8003356 <HAL_GPIO_Init+0x20e>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a4b      	ldr	r2, [pc, #300]	; (8003478 <HAL_GPIO_Init+0x330>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d101      	bne.n	8003352 <HAL_GPIO_Init+0x20a>
 800334e:	2307      	movs	r3, #7
 8003350:	e00e      	b.n	8003370 <HAL_GPIO_Init+0x228>
 8003352:	2308      	movs	r3, #8
 8003354:	e00c      	b.n	8003370 <HAL_GPIO_Init+0x228>
 8003356:	2306      	movs	r3, #6
 8003358:	e00a      	b.n	8003370 <HAL_GPIO_Init+0x228>
 800335a:	2305      	movs	r3, #5
 800335c:	e008      	b.n	8003370 <HAL_GPIO_Init+0x228>
 800335e:	2304      	movs	r3, #4
 8003360:	e006      	b.n	8003370 <HAL_GPIO_Init+0x228>
 8003362:	2303      	movs	r3, #3
 8003364:	e004      	b.n	8003370 <HAL_GPIO_Init+0x228>
 8003366:	2302      	movs	r3, #2
 8003368:	e002      	b.n	8003370 <HAL_GPIO_Init+0x228>
 800336a:	2301      	movs	r3, #1
 800336c:	e000      	b.n	8003370 <HAL_GPIO_Init+0x228>
 800336e:	2300      	movs	r3, #0
 8003370:	69fa      	ldr	r2, [r7, #28]
 8003372:	f002 0203 	and.w	r2, r2, #3
 8003376:	0092      	lsls	r2, r2, #2
 8003378:	4093      	lsls	r3, r2
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	4313      	orrs	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003380:	4935      	ldr	r1, [pc, #212]	; (8003458 <HAL_GPIO_Init+0x310>)
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	089b      	lsrs	r3, r3, #2
 8003386:	3302      	adds	r3, #2
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800338e:	4b3b      	ldr	r3, [pc, #236]	; (800347c <HAL_GPIO_Init+0x334>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	43db      	mvns	r3, r3
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	4013      	ands	r3, r2
 800339c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d003      	beq.n	80033b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033b2:	4a32      	ldr	r2, [pc, #200]	; (800347c <HAL_GPIO_Init+0x334>)
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80033b8:	4b30      	ldr	r3, [pc, #192]	; (800347c <HAL_GPIO_Init+0x334>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	43db      	mvns	r3, r3
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	4013      	ands	r3, r2
 80033c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d003      	beq.n	80033dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	4313      	orrs	r3, r2
 80033da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033dc:	4a27      	ldr	r2, [pc, #156]	; (800347c <HAL_GPIO_Init+0x334>)
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033e2:	4b26      	ldr	r3, [pc, #152]	; (800347c <HAL_GPIO_Init+0x334>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	43db      	mvns	r3, r3
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	4013      	ands	r3, r2
 80033f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d003      	beq.n	8003406 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	4313      	orrs	r3, r2
 8003404:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003406:	4a1d      	ldr	r2, [pc, #116]	; (800347c <HAL_GPIO_Init+0x334>)
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800340c:	4b1b      	ldr	r3, [pc, #108]	; (800347c <HAL_GPIO_Init+0x334>)
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	43db      	mvns	r3, r3
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	4013      	ands	r3, r2
 800341a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d003      	beq.n	8003430 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	4313      	orrs	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003430:	4a12      	ldr	r2, [pc, #72]	; (800347c <HAL_GPIO_Init+0x334>)
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	3301      	adds	r3, #1
 800343a:	61fb      	str	r3, [r7, #28]
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	2b0f      	cmp	r3, #15
 8003440:	f67f ae90 	bls.w	8003164 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003444:	bf00      	nop
 8003446:	bf00      	nop
 8003448:	3724      	adds	r7, #36	; 0x24
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	40023800 	.word	0x40023800
 8003458:	40013800 	.word	0x40013800
 800345c:	40020000 	.word	0x40020000
 8003460:	40020400 	.word	0x40020400
 8003464:	40020800 	.word	0x40020800
 8003468:	40020c00 	.word	0x40020c00
 800346c:	40021000 	.word	0x40021000
 8003470:	40021400 	.word	0x40021400
 8003474:	40021800 	.word	0x40021800
 8003478:	40021c00 	.word	0x40021c00
 800347c:	40013c00 	.word	0x40013c00

08003480 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	460b      	mov	r3, r1
 800348a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	691a      	ldr	r2, [r3, #16]
 8003490:	887b      	ldrh	r3, [r7, #2]
 8003492:	4013      	ands	r3, r2
 8003494:	2b00      	cmp	r3, #0
 8003496:	d002      	beq.n	800349e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003498:	2301      	movs	r3, #1
 800349a:	73fb      	strb	r3, [r7, #15]
 800349c:	e001      	b.n	80034a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800349e:	2300      	movs	r3, #0
 80034a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3714      	adds	r7, #20
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	460b      	mov	r3, r1
 80034ba:	807b      	strh	r3, [r7, #2]
 80034bc:	4613      	mov	r3, r2
 80034be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034c0:	787b      	ldrb	r3, [r7, #1]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d003      	beq.n	80034ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034c6:	887a      	ldrh	r2, [r7, #2]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034cc:	e003      	b.n	80034d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034ce:	887b      	ldrh	r3, [r7, #2]
 80034d0:	041a      	lsls	r2, r3, #16
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	619a      	str	r2, [r3, #24]
}
 80034d6:	bf00      	nop
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr

080034e2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034e2:	b480      	push	{r7}
 80034e4:	b085      	sub	sp, #20
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
 80034ea:	460b      	mov	r3, r1
 80034ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80034f4:	887a      	ldrh	r2, [r7, #2]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	4013      	ands	r3, r2
 80034fa:	041a      	lsls	r2, r3, #16
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	43d9      	mvns	r1, r3
 8003500:	887b      	ldrh	r3, [r7, #2]
 8003502:	400b      	ands	r3, r1
 8003504:	431a      	orrs	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	619a      	str	r2, [r3, #24]
}
 800350a:	bf00      	nop
 800350c:	3714      	adds	r7, #20
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr

08003516 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003516:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003518:	b08f      	sub	sp, #60	; 0x3c
 800351a:	af0a      	add	r7, sp, #40	; 0x28
 800351c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e054      	b.n	80035d2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d106      	bne.n	8003548 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f009 fb66 	bl	800cc14 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2203      	movs	r2, #3
 800354c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003558:	2b00      	cmp	r3, #0
 800355a:	d102      	bne.n	8003562 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f003 ffce 	bl	8007508 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	603b      	str	r3, [r7, #0]
 8003572:	687e      	ldr	r6, [r7, #4]
 8003574:	466d      	mov	r5, sp
 8003576:	f106 0410 	add.w	r4, r6, #16
 800357a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800357c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800357e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003580:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003582:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003586:	e885 0003 	stmia.w	r5, {r0, r1}
 800358a:	1d33      	adds	r3, r6, #4
 800358c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800358e:	6838      	ldr	r0, [r7, #0]
 8003590:	f003 ff48 	bl	8007424 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2101      	movs	r1, #1
 800359a:	4618      	mov	r0, r3
 800359c:	f003 ffc5 	bl	800752a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	603b      	str	r3, [r7, #0]
 80035a6:	687e      	ldr	r6, [r7, #4]
 80035a8:	466d      	mov	r5, sp
 80035aa:	f106 0410 	add.w	r4, r6, #16
 80035ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80035ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80035be:	1d33      	adds	r3, r6, #4
 80035c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035c2:	6838      	ldr	r0, [r7, #0]
 80035c4:	f004 f92c 	bl	8007820 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3714      	adds	r7, #20
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080035da <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80035da:	b590      	push	{r4, r7, lr}
 80035dc:	b089      	sub	sp, #36	; 0x24
 80035de:	af04      	add	r7, sp, #16
 80035e0:	6078      	str	r0, [r7, #4]
 80035e2:	4608      	mov	r0, r1
 80035e4:	4611      	mov	r1, r2
 80035e6:	461a      	mov	r2, r3
 80035e8:	4603      	mov	r3, r0
 80035ea:	70fb      	strb	r3, [r7, #3]
 80035ec:	460b      	mov	r3, r1
 80035ee:	70bb      	strb	r3, [r7, #2]
 80035f0:	4613      	mov	r3, r2
 80035f2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d101      	bne.n	8003602 <HAL_HCD_HC_Init+0x28>
 80035fe:	2302      	movs	r3, #2
 8003600:	e076      	b.n	80036f0 <HAL_HCD_HC_Init+0x116>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800360a:	78fb      	ldrb	r3, [r7, #3]
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	212c      	movs	r1, #44	; 0x2c
 8003610:	fb01 f303 	mul.w	r3, r1, r3
 8003614:	4413      	add	r3, r2
 8003616:	333d      	adds	r3, #61	; 0x3d
 8003618:	2200      	movs	r2, #0
 800361a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800361c:	78fb      	ldrb	r3, [r7, #3]
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	212c      	movs	r1, #44	; 0x2c
 8003622:	fb01 f303 	mul.w	r3, r1, r3
 8003626:	4413      	add	r3, r2
 8003628:	3338      	adds	r3, #56	; 0x38
 800362a:	787a      	ldrb	r2, [r7, #1]
 800362c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800362e:	78fb      	ldrb	r3, [r7, #3]
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	212c      	movs	r1, #44	; 0x2c
 8003634:	fb01 f303 	mul.w	r3, r1, r3
 8003638:	4413      	add	r3, r2
 800363a:	3340      	adds	r3, #64	; 0x40
 800363c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800363e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003640:	78fb      	ldrb	r3, [r7, #3]
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	212c      	movs	r1, #44	; 0x2c
 8003646:	fb01 f303 	mul.w	r3, r1, r3
 800364a:	4413      	add	r3, r2
 800364c:	3339      	adds	r3, #57	; 0x39
 800364e:	78fa      	ldrb	r2, [r7, #3]
 8003650:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003652:	78fb      	ldrb	r3, [r7, #3]
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	212c      	movs	r1, #44	; 0x2c
 8003658:	fb01 f303 	mul.w	r3, r1, r3
 800365c:	4413      	add	r3, r2
 800365e:	333f      	adds	r3, #63	; 0x3f
 8003660:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003664:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003666:	78fb      	ldrb	r3, [r7, #3]
 8003668:	78ba      	ldrb	r2, [r7, #2]
 800366a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800366e:	b2d0      	uxtb	r0, r2
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	212c      	movs	r1, #44	; 0x2c
 8003674:	fb01 f303 	mul.w	r3, r1, r3
 8003678:	4413      	add	r3, r2
 800367a:	333a      	adds	r3, #58	; 0x3a
 800367c:	4602      	mov	r2, r0
 800367e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003680:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003684:	2b00      	cmp	r3, #0
 8003686:	da09      	bge.n	800369c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003688:	78fb      	ldrb	r3, [r7, #3]
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	212c      	movs	r1, #44	; 0x2c
 800368e:	fb01 f303 	mul.w	r3, r1, r3
 8003692:	4413      	add	r3, r2
 8003694:	333b      	adds	r3, #59	; 0x3b
 8003696:	2201      	movs	r2, #1
 8003698:	701a      	strb	r2, [r3, #0]
 800369a:	e008      	b.n	80036ae <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800369c:	78fb      	ldrb	r3, [r7, #3]
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	212c      	movs	r1, #44	; 0x2c
 80036a2:	fb01 f303 	mul.w	r3, r1, r3
 80036a6:	4413      	add	r3, r2
 80036a8:	333b      	adds	r3, #59	; 0x3b
 80036aa:	2200      	movs	r2, #0
 80036ac:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80036ae:	78fb      	ldrb	r3, [r7, #3]
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	212c      	movs	r1, #44	; 0x2c
 80036b4:	fb01 f303 	mul.w	r3, r1, r3
 80036b8:	4413      	add	r3, r2
 80036ba:	333c      	adds	r3, #60	; 0x3c
 80036bc:	f897 2020 	ldrb.w	r2, [r7, #32]
 80036c0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6818      	ldr	r0, [r3, #0]
 80036c6:	787c      	ldrb	r4, [r7, #1]
 80036c8:	78ba      	ldrb	r2, [r7, #2]
 80036ca:	78f9      	ldrb	r1, [r7, #3]
 80036cc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80036ce:	9302      	str	r3, [sp, #8]
 80036d0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80036d4:	9301      	str	r3, [sp, #4]
 80036d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80036da:	9300      	str	r3, [sp, #0]
 80036dc:	4623      	mov	r3, r4
 80036de:	f004 fa19 	bl	8007b14 <USB_HC_Init>
 80036e2:	4603      	mov	r3, r0
 80036e4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80036ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3714      	adds	r7, #20
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd90      	pop	{r4, r7, pc}

080036f8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	460b      	mov	r3, r1
 8003702:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003704:	2300      	movs	r3, #0
 8003706:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800370e:	2b01      	cmp	r3, #1
 8003710:	d101      	bne.n	8003716 <HAL_HCD_HC_Halt+0x1e>
 8003712:	2302      	movs	r3, #2
 8003714:	e00f      	b.n	8003736 <HAL_HCD_HC_Halt+0x3e>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	78fa      	ldrb	r2, [r7, #3]
 8003724:	4611      	mov	r1, r2
 8003726:	4618      	mov	r0, r3
 8003728:	f004 fc55 	bl	8007fd6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003734:	7bfb      	ldrb	r3, [r7, #15]
}
 8003736:	4618      	mov	r0, r3
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
	...

08003740 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	4608      	mov	r0, r1
 800374a:	4611      	mov	r1, r2
 800374c:	461a      	mov	r2, r3
 800374e:	4603      	mov	r3, r0
 8003750:	70fb      	strb	r3, [r7, #3]
 8003752:	460b      	mov	r3, r1
 8003754:	70bb      	strb	r3, [r7, #2]
 8003756:	4613      	mov	r3, r2
 8003758:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800375a:	78fb      	ldrb	r3, [r7, #3]
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	212c      	movs	r1, #44	; 0x2c
 8003760:	fb01 f303 	mul.w	r3, r1, r3
 8003764:	4413      	add	r3, r2
 8003766:	333b      	adds	r3, #59	; 0x3b
 8003768:	78ba      	ldrb	r2, [r7, #2]
 800376a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800376c:	78fb      	ldrb	r3, [r7, #3]
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	212c      	movs	r1, #44	; 0x2c
 8003772:	fb01 f303 	mul.w	r3, r1, r3
 8003776:	4413      	add	r3, r2
 8003778:	333f      	adds	r3, #63	; 0x3f
 800377a:	787a      	ldrb	r2, [r7, #1]
 800377c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800377e:	7c3b      	ldrb	r3, [r7, #16]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d112      	bne.n	80037aa <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003784:	78fb      	ldrb	r3, [r7, #3]
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	212c      	movs	r1, #44	; 0x2c
 800378a:	fb01 f303 	mul.w	r3, r1, r3
 800378e:	4413      	add	r3, r2
 8003790:	3342      	adds	r3, #66	; 0x42
 8003792:	2203      	movs	r2, #3
 8003794:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003796:	78fb      	ldrb	r3, [r7, #3]
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	212c      	movs	r1, #44	; 0x2c
 800379c:	fb01 f303 	mul.w	r3, r1, r3
 80037a0:	4413      	add	r3, r2
 80037a2:	333d      	adds	r3, #61	; 0x3d
 80037a4:	7f3a      	ldrb	r2, [r7, #28]
 80037a6:	701a      	strb	r2, [r3, #0]
 80037a8:	e008      	b.n	80037bc <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80037aa:	78fb      	ldrb	r3, [r7, #3]
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	212c      	movs	r1, #44	; 0x2c
 80037b0:	fb01 f303 	mul.w	r3, r1, r3
 80037b4:	4413      	add	r3, r2
 80037b6:	3342      	adds	r3, #66	; 0x42
 80037b8:	2202      	movs	r2, #2
 80037ba:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80037bc:	787b      	ldrb	r3, [r7, #1]
 80037be:	2b03      	cmp	r3, #3
 80037c0:	f200 80c6 	bhi.w	8003950 <HAL_HCD_HC_SubmitRequest+0x210>
 80037c4:	a201      	add	r2, pc, #4	; (adr r2, 80037cc <HAL_HCD_HC_SubmitRequest+0x8c>)
 80037c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ca:	bf00      	nop
 80037cc:	080037dd 	.word	0x080037dd
 80037d0:	0800393d 	.word	0x0800393d
 80037d4:	08003841 	.word	0x08003841
 80037d8:	080038bf 	.word	0x080038bf
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80037dc:	7c3b      	ldrb	r3, [r7, #16]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	f040 80b8 	bne.w	8003954 <HAL_HCD_HC_SubmitRequest+0x214>
 80037e4:	78bb      	ldrb	r3, [r7, #2]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f040 80b4 	bne.w	8003954 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80037ec:	8b3b      	ldrh	r3, [r7, #24]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d108      	bne.n	8003804 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80037f2:	78fb      	ldrb	r3, [r7, #3]
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	212c      	movs	r1, #44	; 0x2c
 80037f8:	fb01 f303 	mul.w	r3, r1, r3
 80037fc:	4413      	add	r3, r2
 80037fe:	3355      	adds	r3, #85	; 0x55
 8003800:	2201      	movs	r2, #1
 8003802:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003804:	78fb      	ldrb	r3, [r7, #3]
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	212c      	movs	r1, #44	; 0x2c
 800380a:	fb01 f303 	mul.w	r3, r1, r3
 800380e:	4413      	add	r3, r2
 8003810:	3355      	adds	r3, #85	; 0x55
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d109      	bne.n	800382c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003818:	78fb      	ldrb	r3, [r7, #3]
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	212c      	movs	r1, #44	; 0x2c
 800381e:	fb01 f303 	mul.w	r3, r1, r3
 8003822:	4413      	add	r3, r2
 8003824:	3342      	adds	r3, #66	; 0x42
 8003826:	2200      	movs	r2, #0
 8003828:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800382a:	e093      	b.n	8003954 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800382c:	78fb      	ldrb	r3, [r7, #3]
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	212c      	movs	r1, #44	; 0x2c
 8003832:	fb01 f303 	mul.w	r3, r1, r3
 8003836:	4413      	add	r3, r2
 8003838:	3342      	adds	r3, #66	; 0x42
 800383a:	2202      	movs	r2, #2
 800383c:	701a      	strb	r2, [r3, #0]
      break;
 800383e:	e089      	b.n	8003954 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003840:	78bb      	ldrb	r3, [r7, #2]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d11d      	bne.n	8003882 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003846:	78fb      	ldrb	r3, [r7, #3]
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	212c      	movs	r1, #44	; 0x2c
 800384c:	fb01 f303 	mul.w	r3, r1, r3
 8003850:	4413      	add	r3, r2
 8003852:	3355      	adds	r3, #85	; 0x55
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d109      	bne.n	800386e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800385a:	78fb      	ldrb	r3, [r7, #3]
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	212c      	movs	r1, #44	; 0x2c
 8003860:	fb01 f303 	mul.w	r3, r1, r3
 8003864:	4413      	add	r3, r2
 8003866:	3342      	adds	r3, #66	; 0x42
 8003868:	2200      	movs	r2, #0
 800386a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800386c:	e073      	b.n	8003956 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800386e:	78fb      	ldrb	r3, [r7, #3]
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	212c      	movs	r1, #44	; 0x2c
 8003874:	fb01 f303 	mul.w	r3, r1, r3
 8003878:	4413      	add	r3, r2
 800387a:	3342      	adds	r3, #66	; 0x42
 800387c:	2202      	movs	r2, #2
 800387e:	701a      	strb	r2, [r3, #0]
      break;
 8003880:	e069      	b.n	8003956 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003882:	78fb      	ldrb	r3, [r7, #3]
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	212c      	movs	r1, #44	; 0x2c
 8003888:	fb01 f303 	mul.w	r3, r1, r3
 800388c:	4413      	add	r3, r2
 800388e:	3354      	adds	r3, #84	; 0x54
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d109      	bne.n	80038aa <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003896:	78fb      	ldrb	r3, [r7, #3]
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	212c      	movs	r1, #44	; 0x2c
 800389c:	fb01 f303 	mul.w	r3, r1, r3
 80038a0:	4413      	add	r3, r2
 80038a2:	3342      	adds	r3, #66	; 0x42
 80038a4:	2200      	movs	r2, #0
 80038a6:	701a      	strb	r2, [r3, #0]
      break;
 80038a8:	e055      	b.n	8003956 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80038aa:	78fb      	ldrb	r3, [r7, #3]
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	212c      	movs	r1, #44	; 0x2c
 80038b0:	fb01 f303 	mul.w	r3, r1, r3
 80038b4:	4413      	add	r3, r2
 80038b6:	3342      	adds	r3, #66	; 0x42
 80038b8:	2202      	movs	r2, #2
 80038ba:	701a      	strb	r2, [r3, #0]
      break;
 80038bc:	e04b      	b.n	8003956 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80038be:	78bb      	ldrb	r3, [r7, #2]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d11d      	bne.n	8003900 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80038c4:	78fb      	ldrb	r3, [r7, #3]
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	212c      	movs	r1, #44	; 0x2c
 80038ca:	fb01 f303 	mul.w	r3, r1, r3
 80038ce:	4413      	add	r3, r2
 80038d0:	3355      	adds	r3, #85	; 0x55
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d109      	bne.n	80038ec <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80038d8:	78fb      	ldrb	r3, [r7, #3]
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	212c      	movs	r1, #44	; 0x2c
 80038de:	fb01 f303 	mul.w	r3, r1, r3
 80038e2:	4413      	add	r3, r2
 80038e4:	3342      	adds	r3, #66	; 0x42
 80038e6:	2200      	movs	r2, #0
 80038e8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80038ea:	e034      	b.n	8003956 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80038ec:	78fb      	ldrb	r3, [r7, #3]
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	212c      	movs	r1, #44	; 0x2c
 80038f2:	fb01 f303 	mul.w	r3, r1, r3
 80038f6:	4413      	add	r3, r2
 80038f8:	3342      	adds	r3, #66	; 0x42
 80038fa:	2202      	movs	r2, #2
 80038fc:	701a      	strb	r2, [r3, #0]
      break;
 80038fe:	e02a      	b.n	8003956 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003900:	78fb      	ldrb	r3, [r7, #3]
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	212c      	movs	r1, #44	; 0x2c
 8003906:	fb01 f303 	mul.w	r3, r1, r3
 800390a:	4413      	add	r3, r2
 800390c:	3354      	adds	r3, #84	; 0x54
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d109      	bne.n	8003928 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003914:	78fb      	ldrb	r3, [r7, #3]
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	212c      	movs	r1, #44	; 0x2c
 800391a:	fb01 f303 	mul.w	r3, r1, r3
 800391e:	4413      	add	r3, r2
 8003920:	3342      	adds	r3, #66	; 0x42
 8003922:	2200      	movs	r2, #0
 8003924:	701a      	strb	r2, [r3, #0]
      break;
 8003926:	e016      	b.n	8003956 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003928:	78fb      	ldrb	r3, [r7, #3]
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	212c      	movs	r1, #44	; 0x2c
 800392e:	fb01 f303 	mul.w	r3, r1, r3
 8003932:	4413      	add	r3, r2
 8003934:	3342      	adds	r3, #66	; 0x42
 8003936:	2202      	movs	r2, #2
 8003938:	701a      	strb	r2, [r3, #0]
      break;
 800393a:	e00c      	b.n	8003956 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800393c:	78fb      	ldrb	r3, [r7, #3]
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	212c      	movs	r1, #44	; 0x2c
 8003942:	fb01 f303 	mul.w	r3, r1, r3
 8003946:	4413      	add	r3, r2
 8003948:	3342      	adds	r3, #66	; 0x42
 800394a:	2200      	movs	r2, #0
 800394c:	701a      	strb	r2, [r3, #0]
      break;
 800394e:	e002      	b.n	8003956 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003950:	bf00      	nop
 8003952:	e000      	b.n	8003956 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003954:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003956:	78fb      	ldrb	r3, [r7, #3]
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	212c      	movs	r1, #44	; 0x2c
 800395c:	fb01 f303 	mul.w	r3, r1, r3
 8003960:	4413      	add	r3, r2
 8003962:	3344      	adds	r3, #68	; 0x44
 8003964:	697a      	ldr	r2, [r7, #20]
 8003966:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003968:	78fb      	ldrb	r3, [r7, #3]
 800396a:	8b3a      	ldrh	r2, [r7, #24]
 800396c:	6879      	ldr	r1, [r7, #4]
 800396e:	202c      	movs	r0, #44	; 0x2c
 8003970:	fb00 f303 	mul.w	r3, r0, r3
 8003974:	440b      	add	r3, r1
 8003976:	334c      	adds	r3, #76	; 0x4c
 8003978:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800397a:	78fb      	ldrb	r3, [r7, #3]
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	212c      	movs	r1, #44	; 0x2c
 8003980:	fb01 f303 	mul.w	r3, r1, r3
 8003984:	4413      	add	r3, r2
 8003986:	3360      	adds	r3, #96	; 0x60
 8003988:	2200      	movs	r2, #0
 800398a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800398c:	78fb      	ldrb	r3, [r7, #3]
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	212c      	movs	r1, #44	; 0x2c
 8003992:	fb01 f303 	mul.w	r3, r1, r3
 8003996:	4413      	add	r3, r2
 8003998:	3350      	adds	r3, #80	; 0x50
 800399a:	2200      	movs	r2, #0
 800399c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800399e:	78fb      	ldrb	r3, [r7, #3]
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	212c      	movs	r1, #44	; 0x2c
 80039a4:	fb01 f303 	mul.w	r3, r1, r3
 80039a8:	4413      	add	r3, r2
 80039aa:	3339      	adds	r3, #57	; 0x39
 80039ac:	78fa      	ldrb	r2, [r7, #3]
 80039ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80039b0:	78fb      	ldrb	r3, [r7, #3]
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	212c      	movs	r1, #44	; 0x2c
 80039b6:	fb01 f303 	mul.w	r3, r1, r3
 80039ba:	4413      	add	r3, r2
 80039bc:	3361      	adds	r3, #97	; 0x61
 80039be:	2200      	movs	r2, #0
 80039c0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6818      	ldr	r0, [r3, #0]
 80039c6:	78fb      	ldrb	r3, [r7, #3]
 80039c8:	222c      	movs	r2, #44	; 0x2c
 80039ca:	fb02 f303 	mul.w	r3, r2, r3
 80039ce:	3338      	adds	r3, #56	; 0x38
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	18d1      	adds	r1, r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	461a      	mov	r2, r3
 80039dc:	f004 f9a8 	bl	8007d30 <USB_HC_StartXfer>
 80039e0:	4603      	mov	r3, r0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3708      	adds	r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop

080039ec <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f003 fecb 	bl	800779e <USB_GetMode>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	f040 80f6 	bne.w	8003bfc <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f003 feaf 	bl	8007778 <USB_ReadInterrupts>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	f000 80ec 	beq.w	8003bfa <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f003 fea6 	bl	8007778 <USB_ReadInterrupts>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a36:	d104      	bne.n	8003a42 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003a40:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f003 fe96 	bl	8007778 <USB_ReadInterrupts>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a56:	d104      	bne.n	8003a62 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003a60:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f003 fe86 	bl	8007778 <USB_ReadInterrupts>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a76:	d104      	bne.n	8003a82 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003a80:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f003 fe76 	bl	8007778 <USB_ReadInterrupts>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d103      	bne.n	8003a9e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f003 fe68 	bl	8007778 <USB_ReadInterrupts>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003aae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ab2:	d11c      	bne.n	8003aee <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003abc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10f      	bne.n	8003aee <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003ace:	2110      	movs	r1, #16
 8003ad0:	6938      	ldr	r0, [r7, #16]
 8003ad2:	f003 fd77 	bl	80075c4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003ad6:	6938      	ldr	r0, [r7, #16]
 8003ad8:	f003 fd98 	bl	800760c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2101      	movs	r1, #1
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f003 ff50 	bl	8007988 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f009 f911 	bl	800cd10 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f003 fe40 	bl	8007778 <USB_ReadInterrupts>
 8003af8:	4603      	mov	r3, r0
 8003afa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003afe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b02:	d102      	bne.n	8003b0a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f001 fa03 	bl	8004f10 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f003 fe32 	bl	8007778 <USB_ReadInterrupts>
 8003b14:	4603      	mov	r3, r0
 8003b16:	f003 0308 	and.w	r3, r3, #8
 8003b1a:	2b08      	cmp	r3, #8
 8003b1c:	d106      	bne.n	8003b2c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f009 f8da 	bl	800ccd8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2208      	movs	r2, #8
 8003b2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f003 fe21 	bl	8007778 <USB_ReadInterrupts>
 8003b36:	4603      	mov	r3, r0
 8003b38:	f003 0310 	and.w	r3, r3, #16
 8003b3c:	2b10      	cmp	r3, #16
 8003b3e:	d101      	bne.n	8003b44 <HAL_HCD_IRQHandler+0x158>
 8003b40:	2301      	movs	r3, #1
 8003b42:	e000      	b.n	8003b46 <HAL_HCD_IRQHandler+0x15a>
 8003b44:	2300      	movs	r3, #0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d012      	beq.n	8003b70 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	699a      	ldr	r2, [r3, #24]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f022 0210 	bic.w	r2, r2, #16
 8003b58:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f001 f906 	bl	8004d6c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	699a      	ldr	r2, [r3, #24]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f042 0210 	orr.w	r2, r2, #16
 8003b6e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4618      	mov	r0, r3
 8003b76:	f003 fdff 	bl	8007778 <USB_ReadInterrupts>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b84:	d13a      	bne.n	8003bfc <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f004 fa12 	bl	8007fb4 <USB_HC_ReadInterrupt>
 8003b90:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003b92:	2300      	movs	r3, #0
 8003b94:	617b      	str	r3, [r7, #20]
 8003b96:	e025      	b.n	8003be4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	f003 030f 	and.w	r3, r3, #15
 8003b9e:	68ba      	ldr	r2, [r7, #8]
 8003ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d018      	beq.n	8003bde <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	015a      	lsls	r2, r3, #5
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bc2:	d106      	bne.n	8003bd2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	4619      	mov	r1, r3
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 f8ab 	bl	8003d26 <HCD_HC_IN_IRQHandler>
 8003bd0:	e005      	b.n	8003bde <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 fcc6 	bl	800456a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	3301      	adds	r3, #1
 8003be2:	617b      	str	r3, [r7, #20]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d3d4      	bcc.n	8003b98 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bf6:	615a      	str	r2, [r3, #20]
 8003bf8:	e000      	b.n	8003bfc <HAL_HCD_IRQHandler+0x210>
      return;
 8003bfa:	bf00      	nop
    }
  }
}
 8003bfc:	3718      	adds	r7, #24
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b082      	sub	sp, #8
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d101      	bne.n	8003c18 <HAL_HCD_Start+0x16>
 8003c14:	2302      	movs	r3, #2
 8003c16:	e013      	b.n	8003c40 <HAL_HCD_Start+0x3e>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2101      	movs	r1, #1
 8003c26:	4618      	mov	r0, r3
 8003c28:	f003 ff12 	bl	8007a50 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f003 fc58 	bl	80074e6 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3708      	adds	r7, #8
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d101      	bne.n	8003c5e <HAL_HCD_Stop+0x16>
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	e00d      	b.n	8003c7a <HAL_HCD_Stop+0x32>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f004 fb0c 	bl	8008288 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3708      	adds	r7, #8
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003c82:	b580      	push	{r7, lr}
 8003c84:	b082      	sub	sp, #8
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f003 feb4 	bl	80079fc <USB_ResetPort>
 8003c94:	4603      	mov	r3, r0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3708      	adds	r7, #8
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b083      	sub	sp, #12
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003caa:	78fb      	ldrb	r3, [r7, #3]
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	212c      	movs	r1, #44	; 0x2c
 8003cb0:	fb01 f303 	mul.w	r3, r1, r3
 8003cb4:	4413      	add	r3, r2
 8003cb6:	3360      	adds	r3, #96	; 0x60
 8003cb8:	781b      	ldrb	r3, [r3, #0]
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b083      	sub	sp, #12
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
 8003cce:	460b      	mov	r3, r1
 8003cd0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003cd2:	78fb      	ldrb	r3, [r7, #3]
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	212c      	movs	r1, #44	; 0x2c
 8003cd8:	fb01 f303 	mul.w	r3, r1, r3
 8003cdc:	4413      	add	r3, r2
 8003cde:	3350      	adds	r3, #80	; 0x50
 8003ce0:	681b      	ldr	r3, [r3, #0]
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b082      	sub	sp, #8
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f003 fef8 	bl	8007af0 <USB_GetCurrentFrame>
 8003d00:	4603      	mov	r3, r0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3708      	adds	r7, #8
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b082      	sub	sp, #8
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4618      	mov	r0, r3
 8003d18:	f003 fed3 	bl	8007ac2 <USB_GetHostSpeed>
 8003d1c:	4603      	mov	r3, r0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b086      	sub	sp, #24
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
 8003d2e:	460b      	mov	r3, r1
 8003d30:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003d3c:	78fb      	ldrb	r3, [r7, #3]
 8003d3e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	015a      	lsls	r2, r3, #5
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	4413      	add	r3, r2
 8003d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f003 0304 	and.w	r3, r3, #4
 8003d52:	2b04      	cmp	r3, #4
 8003d54:	d119      	bne.n	8003d8a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	015a      	lsls	r2, r3, #5
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d62:	461a      	mov	r2, r3
 8003d64:	2304      	movs	r3, #4
 8003d66:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	015a      	lsls	r2, r3, #5
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	4413      	add	r3, r2
 8003d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	0151      	lsls	r1, r2, #5
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	440a      	add	r2, r1
 8003d7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d82:	f043 0302 	orr.w	r3, r3, #2
 8003d86:	60d3      	str	r3, [r2, #12]
 8003d88:	e101      	b.n	8003f8e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	015a      	lsls	r2, r3, #5
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	4413      	add	r3, r2
 8003d92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003da0:	d12b      	bne.n	8003dfa <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	015a      	lsls	r2, r3, #5
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	4413      	add	r3, r2
 8003daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dae:	461a      	mov	r2, r3
 8003db0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003db4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	212c      	movs	r1, #44	; 0x2c
 8003dbc:	fb01 f303 	mul.w	r3, r1, r3
 8003dc0:	4413      	add	r3, r2
 8003dc2:	3361      	adds	r3, #97	; 0x61
 8003dc4:	2207      	movs	r2, #7
 8003dc6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	015a      	lsls	r2, r3, #5
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	4413      	add	r3, r2
 8003dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	0151      	lsls	r1, r2, #5
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	440a      	add	r2, r1
 8003dde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003de2:	f043 0302 	orr.w	r3, r3, #2
 8003de6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	b2d2      	uxtb	r2, r2
 8003df0:	4611      	mov	r1, r2
 8003df2:	4618      	mov	r0, r3
 8003df4:	f004 f8ef 	bl	8007fd6 <USB_HC_Halt>
 8003df8:	e0c9      	b.n	8003f8e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	015a      	lsls	r2, r3, #5
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	4413      	add	r3, r2
 8003e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f003 0320 	and.w	r3, r3, #32
 8003e0c:	2b20      	cmp	r3, #32
 8003e0e:	d109      	bne.n	8003e24 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	015a      	lsls	r2, r3, #5
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	4413      	add	r3, r2
 8003e18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	2320      	movs	r3, #32
 8003e20:	6093      	str	r3, [r2, #8]
 8003e22:	e0b4      	b.n	8003f8e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	015a      	lsls	r2, r3, #5
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f003 0308 	and.w	r3, r3, #8
 8003e36:	2b08      	cmp	r3, #8
 8003e38:	d133      	bne.n	8003ea2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	015a      	lsls	r2, r3, #5
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	4413      	add	r3, r2
 8003e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	0151      	lsls	r1, r2, #5
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	440a      	add	r2, r1
 8003e50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e54:	f043 0302 	orr.w	r3, r3, #2
 8003e58:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	212c      	movs	r1, #44	; 0x2c
 8003e60:	fb01 f303 	mul.w	r3, r1, r3
 8003e64:	4413      	add	r3, r2
 8003e66:	3361      	adds	r3, #97	; 0x61
 8003e68:	2205      	movs	r2, #5
 8003e6a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	015a      	lsls	r2, r3, #5
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	4413      	add	r3, r2
 8003e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e78:	461a      	mov	r2, r3
 8003e7a:	2310      	movs	r3, #16
 8003e7c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	015a      	lsls	r2, r3, #5
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	4413      	add	r3, r2
 8003e86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	2308      	movs	r3, #8
 8003e8e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	b2d2      	uxtb	r2, r2
 8003e98:	4611      	mov	r1, r2
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f004 f89b 	bl	8007fd6 <USB_HC_Halt>
 8003ea0:	e075      	b.n	8003f8e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	015a      	lsls	r2, r3, #5
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eb8:	d134      	bne.n	8003f24 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	015a      	lsls	r2, r3, #5
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	0151      	lsls	r1, r2, #5
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	440a      	add	r2, r1
 8003ed0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ed4:	f043 0302 	orr.w	r3, r3, #2
 8003ed8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	212c      	movs	r1, #44	; 0x2c
 8003ee0:	fb01 f303 	mul.w	r3, r1, r3
 8003ee4:	4413      	add	r3, r2
 8003ee6:	3361      	adds	r3, #97	; 0x61
 8003ee8:	2208      	movs	r2, #8
 8003eea:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	015a      	lsls	r2, r3, #5
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ef8:	461a      	mov	r2, r3
 8003efa:	2310      	movs	r3, #16
 8003efc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	015a      	lsls	r2, r3, #5
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	4413      	add	r3, r2
 8003f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f10:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	b2d2      	uxtb	r2, r2
 8003f1a:	4611      	mov	r1, r2
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f004 f85a 	bl	8007fd6 <USB_HC_Halt>
 8003f22:	e034      	b.n	8003f8e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	015a      	lsls	r2, r3, #5
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f36:	2b80      	cmp	r3, #128	; 0x80
 8003f38:	d129      	bne.n	8003f8e <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	015a      	lsls	r2, r3, #5
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	4413      	add	r3, r2
 8003f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	0151      	lsls	r1, r2, #5
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	440a      	add	r2, r1
 8003f50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f54:	f043 0302 	orr.w	r3, r3, #2
 8003f58:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	212c      	movs	r1, #44	; 0x2c
 8003f60:	fb01 f303 	mul.w	r3, r1, r3
 8003f64:	4413      	add	r3, r2
 8003f66:	3361      	adds	r3, #97	; 0x61
 8003f68:	2206      	movs	r2, #6
 8003f6a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	b2d2      	uxtb	r2, r2
 8003f74:	4611      	mov	r1, r2
 8003f76:	4618      	mov	r0, r3
 8003f78:	f004 f82d 	bl	8007fd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	015a      	lsls	r2, r3, #5
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	4413      	add	r3, r2
 8003f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f88:	461a      	mov	r2, r3
 8003f8a:	2380      	movs	r3, #128	; 0x80
 8003f8c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	015a      	lsls	r2, r3, #5
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	4413      	add	r3, r2
 8003f96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fa4:	d122      	bne.n	8003fec <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	015a      	lsls	r2, r3, #5
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	4413      	add	r3, r2
 8003fae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	0151      	lsls	r1, r2, #5
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	440a      	add	r2, r1
 8003fbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fc0:	f043 0302 	orr.w	r3, r3, #2
 8003fc4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	b2d2      	uxtb	r2, r2
 8003fce:	4611      	mov	r1, r2
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f004 f800 	bl	8007fd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	015a      	lsls	r2, r3, #5
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	4413      	add	r3, r2
 8003fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fe8:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003fea:	e2ba      	b.n	8004562 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	015a      	lsls	r2, r3, #5
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	f040 811b 	bne.w	800423a <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d019      	beq.n	8004040 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	212c      	movs	r1, #44	; 0x2c
 8004012:	fb01 f303 	mul.w	r3, r1, r3
 8004016:	4413      	add	r3, r2
 8004018:	3348      	adds	r3, #72	; 0x48
 800401a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	0159      	lsls	r1, r3, #5
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	440b      	add	r3, r1
 8004024:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800402e:	1ad2      	subs	r2, r2, r3
 8004030:	6879      	ldr	r1, [r7, #4]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	202c      	movs	r0, #44	; 0x2c
 8004036:	fb00 f303 	mul.w	r3, r0, r3
 800403a:	440b      	add	r3, r1
 800403c:	3350      	adds	r3, #80	; 0x50
 800403e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	212c      	movs	r1, #44	; 0x2c
 8004046:	fb01 f303 	mul.w	r3, r1, r3
 800404a:	4413      	add	r3, r2
 800404c:	3361      	adds	r3, #97	; 0x61
 800404e:	2201      	movs	r2, #1
 8004050:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	212c      	movs	r1, #44	; 0x2c
 8004058:	fb01 f303 	mul.w	r3, r1, r3
 800405c:	4413      	add	r3, r2
 800405e:	335c      	adds	r3, #92	; 0x5c
 8004060:	2200      	movs	r2, #0
 8004062:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	015a      	lsls	r2, r3, #5
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	4413      	add	r3, r2
 800406c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004070:	461a      	mov	r2, r3
 8004072:	2301      	movs	r3, #1
 8004074:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	212c      	movs	r1, #44	; 0x2c
 800407c:	fb01 f303 	mul.w	r3, r1, r3
 8004080:	4413      	add	r3, r2
 8004082:	333f      	adds	r3, #63	; 0x3f
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d009      	beq.n	800409e <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	212c      	movs	r1, #44	; 0x2c
 8004090:	fb01 f303 	mul.w	r3, r1, r3
 8004094:	4413      	add	r3, r2
 8004096:	333f      	adds	r3, #63	; 0x3f
 8004098:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800409a:	2b02      	cmp	r3, #2
 800409c:	d121      	bne.n	80040e2 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	015a      	lsls	r2, r3, #5
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	4413      	add	r3, r2
 80040a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	0151      	lsls	r1, r2, #5
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	440a      	add	r2, r1
 80040b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040b8:	f043 0302 	orr.w	r3, r3, #2
 80040bc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	b2d2      	uxtb	r2, r2
 80040c6:	4611      	mov	r1, r2
 80040c8:	4618      	mov	r0, r3
 80040ca:	f003 ff84 	bl	8007fd6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	015a      	lsls	r2, r3, #5
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	4413      	add	r3, r2
 80040d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040da:	461a      	mov	r2, r3
 80040dc:	2310      	movs	r3, #16
 80040de:	6093      	str	r3, [r2, #8]
 80040e0:	e066      	b.n	80041b0 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	212c      	movs	r1, #44	; 0x2c
 80040e8:	fb01 f303 	mul.w	r3, r1, r3
 80040ec:	4413      	add	r3, r2
 80040ee:	333f      	adds	r3, #63	; 0x3f
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	2b03      	cmp	r3, #3
 80040f4:	d127      	bne.n	8004146 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	015a      	lsls	r2, r3, #5
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	4413      	add	r3, r2
 80040fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	0151      	lsls	r1, r2, #5
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	440a      	add	r2, r1
 800410c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004110:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004114:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	212c      	movs	r1, #44	; 0x2c
 800411c:	fb01 f303 	mul.w	r3, r1, r3
 8004120:	4413      	add	r3, r2
 8004122:	3360      	adds	r3, #96	; 0x60
 8004124:	2201      	movs	r2, #1
 8004126:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	b2d9      	uxtb	r1, r3
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	202c      	movs	r0, #44	; 0x2c
 8004132:	fb00 f303 	mul.w	r3, r0, r3
 8004136:	4413      	add	r3, r2
 8004138:	3360      	adds	r3, #96	; 0x60
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	461a      	mov	r2, r3
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f008 fdf4 	bl	800cd2c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004144:	e034      	b.n	80041b0 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	212c      	movs	r1, #44	; 0x2c
 800414c:	fb01 f303 	mul.w	r3, r1, r3
 8004150:	4413      	add	r3, r2
 8004152:	333f      	adds	r3, #63	; 0x3f
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d12a      	bne.n	80041b0 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	212c      	movs	r1, #44	; 0x2c
 8004160:	fb01 f303 	mul.w	r3, r1, r3
 8004164:	4413      	add	r3, r2
 8004166:	3360      	adds	r3, #96	; 0x60
 8004168:	2201      	movs	r2, #1
 800416a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	212c      	movs	r1, #44	; 0x2c
 8004172:	fb01 f303 	mul.w	r3, r1, r3
 8004176:	4413      	add	r3, r2
 8004178:	3354      	adds	r3, #84	; 0x54
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	f083 0301 	eor.w	r3, r3, #1
 8004180:	b2d8      	uxtb	r0, r3
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	212c      	movs	r1, #44	; 0x2c
 8004188:	fb01 f303 	mul.w	r3, r1, r3
 800418c:	4413      	add	r3, r2
 800418e:	3354      	adds	r3, #84	; 0x54
 8004190:	4602      	mov	r2, r0
 8004192:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	b2d9      	uxtb	r1, r3
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	202c      	movs	r0, #44	; 0x2c
 800419e:	fb00 f303 	mul.w	r3, r0, r3
 80041a2:	4413      	add	r3, r2
 80041a4:	3360      	adds	r3, #96	; 0x60
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	461a      	mov	r2, r3
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f008 fdbe 	bl	800cd2c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d12b      	bne.n	8004210 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	212c      	movs	r1, #44	; 0x2c
 80041be:	fb01 f303 	mul.w	r3, r1, r3
 80041c2:	4413      	add	r3, r2
 80041c4:	3348      	adds	r3, #72	; 0x48
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	6879      	ldr	r1, [r7, #4]
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	202c      	movs	r0, #44	; 0x2c
 80041ce:	fb00 f202 	mul.w	r2, r0, r2
 80041d2:	440a      	add	r2, r1
 80041d4:	3240      	adds	r2, #64	; 0x40
 80041d6:	8812      	ldrh	r2, [r2, #0]
 80041d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f000 81be 	beq.w	8004562 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	212c      	movs	r1, #44	; 0x2c
 80041ec:	fb01 f303 	mul.w	r3, r1, r3
 80041f0:	4413      	add	r3, r2
 80041f2:	3354      	adds	r3, #84	; 0x54
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	f083 0301 	eor.w	r3, r3, #1
 80041fa:	b2d8      	uxtb	r0, r3
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	212c      	movs	r1, #44	; 0x2c
 8004202:	fb01 f303 	mul.w	r3, r1, r3
 8004206:	4413      	add	r3, r2
 8004208:	3354      	adds	r3, #84	; 0x54
 800420a:	4602      	mov	r2, r0
 800420c:	701a      	strb	r2, [r3, #0]
}
 800420e:	e1a8      	b.n	8004562 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	212c      	movs	r1, #44	; 0x2c
 8004216:	fb01 f303 	mul.w	r3, r1, r3
 800421a:	4413      	add	r3, r2
 800421c:	3354      	adds	r3, #84	; 0x54
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	f083 0301 	eor.w	r3, r3, #1
 8004224:	b2d8      	uxtb	r0, r3
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	212c      	movs	r1, #44	; 0x2c
 800422c:	fb01 f303 	mul.w	r3, r1, r3
 8004230:	4413      	add	r3, r2
 8004232:	3354      	adds	r3, #84	; 0x54
 8004234:	4602      	mov	r2, r0
 8004236:	701a      	strb	r2, [r3, #0]
}
 8004238:	e193      	b.n	8004562 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	015a      	lsls	r2, r3, #5
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	4413      	add	r3, r2
 8004242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f003 0302 	and.w	r3, r3, #2
 800424c:	2b02      	cmp	r3, #2
 800424e:	f040 8106 	bne.w	800445e <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	015a      	lsls	r2, r3, #5
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	4413      	add	r3, r2
 800425a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	0151      	lsls	r1, r2, #5
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	440a      	add	r2, r1
 8004268:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800426c:	f023 0302 	bic.w	r3, r3, #2
 8004270:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	212c      	movs	r1, #44	; 0x2c
 8004278:	fb01 f303 	mul.w	r3, r1, r3
 800427c:	4413      	add	r3, r2
 800427e:	3361      	adds	r3, #97	; 0x61
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	2b01      	cmp	r3, #1
 8004284:	d109      	bne.n	800429a <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	212c      	movs	r1, #44	; 0x2c
 800428c:	fb01 f303 	mul.w	r3, r1, r3
 8004290:	4413      	add	r3, r2
 8004292:	3360      	adds	r3, #96	; 0x60
 8004294:	2201      	movs	r2, #1
 8004296:	701a      	strb	r2, [r3, #0]
 8004298:	e0c9      	b.n	800442e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	212c      	movs	r1, #44	; 0x2c
 80042a0:	fb01 f303 	mul.w	r3, r1, r3
 80042a4:	4413      	add	r3, r2
 80042a6:	3361      	adds	r3, #97	; 0x61
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	2b05      	cmp	r3, #5
 80042ac:	d109      	bne.n	80042c2 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	212c      	movs	r1, #44	; 0x2c
 80042b4:	fb01 f303 	mul.w	r3, r1, r3
 80042b8:	4413      	add	r3, r2
 80042ba:	3360      	adds	r3, #96	; 0x60
 80042bc:	2205      	movs	r2, #5
 80042be:	701a      	strb	r2, [r3, #0]
 80042c0:	e0b5      	b.n	800442e <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	212c      	movs	r1, #44	; 0x2c
 80042c8:	fb01 f303 	mul.w	r3, r1, r3
 80042cc:	4413      	add	r3, r2
 80042ce:	3361      	adds	r3, #97	; 0x61
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	2b06      	cmp	r3, #6
 80042d4:	d009      	beq.n	80042ea <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	212c      	movs	r1, #44	; 0x2c
 80042dc:	fb01 f303 	mul.w	r3, r1, r3
 80042e0:	4413      	add	r3, r2
 80042e2:	3361      	adds	r3, #97	; 0x61
 80042e4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80042e6:	2b08      	cmp	r3, #8
 80042e8:	d150      	bne.n	800438c <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	212c      	movs	r1, #44	; 0x2c
 80042f0:	fb01 f303 	mul.w	r3, r1, r3
 80042f4:	4413      	add	r3, r2
 80042f6:	335c      	adds	r3, #92	; 0x5c
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	1c5a      	adds	r2, r3, #1
 80042fc:	6879      	ldr	r1, [r7, #4]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	202c      	movs	r0, #44	; 0x2c
 8004302:	fb00 f303 	mul.w	r3, r0, r3
 8004306:	440b      	add	r3, r1
 8004308:	335c      	adds	r3, #92	; 0x5c
 800430a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	212c      	movs	r1, #44	; 0x2c
 8004312:	fb01 f303 	mul.w	r3, r1, r3
 8004316:	4413      	add	r3, r2
 8004318:	335c      	adds	r3, #92	; 0x5c
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2b02      	cmp	r3, #2
 800431e:	d912      	bls.n	8004346 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	212c      	movs	r1, #44	; 0x2c
 8004326:	fb01 f303 	mul.w	r3, r1, r3
 800432a:	4413      	add	r3, r2
 800432c:	335c      	adds	r3, #92	; 0x5c
 800432e:	2200      	movs	r2, #0
 8004330:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	212c      	movs	r1, #44	; 0x2c
 8004338:	fb01 f303 	mul.w	r3, r1, r3
 800433c:	4413      	add	r3, r2
 800433e:	3360      	adds	r3, #96	; 0x60
 8004340:	2204      	movs	r2, #4
 8004342:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004344:	e073      	b.n	800442e <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	212c      	movs	r1, #44	; 0x2c
 800434c:	fb01 f303 	mul.w	r3, r1, r3
 8004350:	4413      	add	r3, r2
 8004352:	3360      	adds	r3, #96	; 0x60
 8004354:	2202      	movs	r2, #2
 8004356:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	015a      	lsls	r2, r3, #5
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	4413      	add	r3, r2
 8004360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800436e:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004376:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	015a      	lsls	r2, r3, #5
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	4413      	add	r3, r2
 8004380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004384:	461a      	mov	r2, r3
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800438a:	e050      	b.n	800442e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	212c      	movs	r1, #44	; 0x2c
 8004392:	fb01 f303 	mul.w	r3, r1, r3
 8004396:	4413      	add	r3, r2
 8004398:	3361      	adds	r3, #97	; 0x61
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	2b03      	cmp	r3, #3
 800439e:	d122      	bne.n	80043e6 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	212c      	movs	r1, #44	; 0x2c
 80043a6:	fb01 f303 	mul.w	r3, r1, r3
 80043aa:	4413      	add	r3, r2
 80043ac:	3360      	adds	r3, #96	; 0x60
 80043ae:	2202      	movs	r2, #2
 80043b0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	015a      	lsls	r2, r3, #5
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	4413      	add	r3, r2
 80043ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80043c8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80043d0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	015a      	lsls	r2, r3, #5
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	4413      	add	r3, r2
 80043da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043de:	461a      	mov	r2, r3
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	6013      	str	r3, [r2, #0]
 80043e4:	e023      	b.n	800442e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	212c      	movs	r1, #44	; 0x2c
 80043ec:	fb01 f303 	mul.w	r3, r1, r3
 80043f0:	4413      	add	r3, r2
 80043f2:	3361      	adds	r3, #97	; 0x61
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	2b07      	cmp	r3, #7
 80043f8:	d119      	bne.n	800442e <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	212c      	movs	r1, #44	; 0x2c
 8004400:	fb01 f303 	mul.w	r3, r1, r3
 8004404:	4413      	add	r3, r2
 8004406:	335c      	adds	r3, #92	; 0x5c
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	1c5a      	adds	r2, r3, #1
 800440c:	6879      	ldr	r1, [r7, #4]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	202c      	movs	r0, #44	; 0x2c
 8004412:	fb00 f303 	mul.w	r3, r0, r3
 8004416:	440b      	add	r3, r1
 8004418:	335c      	adds	r3, #92	; 0x5c
 800441a:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	212c      	movs	r1, #44	; 0x2c
 8004422:	fb01 f303 	mul.w	r3, r1, r3
 8004426:	4413      	add	r3, r2
 8004428:	3360      	adds	r3, #96	; 0x60
 800442a:	2204      	movs	r2, #4
 800442c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	015a      	lsls	r2, r3, #5
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	4413      	add	r3, r2
 8004436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800443a:	461a      	mov	r2, r3
 800443c:	2302      	movs	r3, #2
 800443e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	b2d9      	uxtb	r1, r3
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	202c      	movs	r0, #44	; 0x2c
 800444a:	fb00 f303 	mul.w	r3, r0, r3
 800444e:	4413      	add	r3, r2
 8004450:	3360      	adds	r3, #96	; 0x60
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	461a      	mov	r2, r3
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f008 fc68 	bl	800cd2c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800445c:	e081      	b.n	8004562 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	015a      	lsls	r2, r3, #5
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	4413      	add	r3, r2
 8004466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f003 0310 	and.w	r3, r3, #16
 8004470:	2b10      	cmp	r3, #16
 8004472:	d176      	bne.n	8004562 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	212c      	movs	r1, #44	; 0x2c
 800447a:	fb01 f303 	mul.w	r3, r1, r3
 800447e:	4413      	add	r3, r2
 8004480:	333f      	adds	r3, #63	; 0x3f
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	2b03      	cmp	r3, #3
 8004486:	d121      	bne.n	80044cc <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	212c      	movs	r1, #44	; 0x2c
 800448e:	fb01 f303 	mul.w	r3, r1, r3
 8004492:	4413      	add	r3, r2
 8004494:	335c      	adds	r3, #92	; 0x5c
 8004496:	2200      	movs	r2, #0
 8004498:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	015a      	lsls	r2, r3, #5
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	4413      	add	r3, r2
 80044a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	0151      	lsls	r1, r2, #5
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	440a      	add	r2, r1
 80044b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044b4:	f043 0302 	orr.w	r3, r3, #2
 80044b8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	b2d2      	uxtb	r2, r2
 80044c2:	4611      	mov	r1, r2
 80044c4:	4618      	mov	r0, r3
 80044c6:	f003 fd86 	bl	8007fd6 <USB_HC_Halt>
 80044ca:	e041      	b.n	8004550 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	212c      	movs	r1, #44	; 0x2c
 80044d2:	fb01 f303 	mul.w	r3, r1, r3
 80044d6:	4413      	add	r3, r2
 80044d8:	333f      	adds	r3, #63	; 0x3f
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d009      	beq.n	80044f4 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	212c      	movs	r1, #44	; 0x2c
 80044e6:	fb01 f303 	mul.w	r3, r1, r3
 80044ea:	4413      	add	r3, r2
 80044ec:	333f      	adds	r3, #63	; 0x3f
 80044ee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d12d      	bne.n	8004550 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	212c      	movs	r1, #44	; 0x2c
 80044fa:	fb01 f303 	mul.w	r3, r1, r3
 80044fe:	4413      	add	r3, r2
 8004500:	335c      	adds	r3, #92	; 0x5c
 8004502:	2200      	movs	r2, #0
 8004504:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d120      	bne.n	8004550 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	212c      	movs	r1, #44	; 0x2c
 8004514:	fb01 f303 	mul.w	r3, r1, r3
 8004518:	4413      	add	r3, r2
 800451a:	3361      	adds	r3, #97	; 0x61
 800451c:	2203      	movs	r2, #3
 800451e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	015a      	lsls	r2, r3, #5
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	4413      	add	r3, r2
 8004528:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	0151      	lsls	r1, r2, #5
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	440a      	add	r2, r1
 8004536:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800453a:	f043 0302 	orr.w	r3, r3, #2
 800453e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	b2d2      	uxtb	r2, r2
 8004548:	4611      	mov	r1, r2
 800454a:	4618      	mov	r0, r3
 800454c:	f003 fd43 	bl	8007fd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	015a      	lsls	r2, r3, #5
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	4413      	add	r3, r2
 8004558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800455c:	461a      	mov	r2, r3
 800455e:	2310      	movs	r3, #16
 8004560:	6093      	str	r3, [r2, #8]
}
 8004562:	bf00      	nop
 8004564:	3718      	adds	r7, #24
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800456a:	b580      	push	{r7, lr}
 800456c:	b088      	sub	sp, #32
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
 8004572:	460b      	mov	r3, r1
 8004574:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004580:	78fb      	ldrb	r3, [r7, #3]
 8004582:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	015a      	lsls	r2, r3, #5
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	4413      	add	r3, r2
 800458c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f003 0304 	and.w	r3, r3, #4
 8004596:	2b04      	cmp	r3, #4
 8004598:	d119      	bne.n	80045ce <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	015a      	lsls	r2, r3, #5
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	4413      	add	r3, r2
 80045a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045a6:	461a      	mov	r2, r3
 80045a8:	2304      	movs	r3, #4
 80045aa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	015a      	lsls	r2, r3, #5
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	4413      	add	r3, r2
 80045b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	0151      	lsls	r1, r2, #5
 80045be:	69ba      	ldr	r2, [r7, #24]
 80045c0:	440a      	add	r2, r1
 80045c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045c6:	f043 0302 	orr.w	r3, r3, #2
 80045ca:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80045cc:	e3ca      	b.n	8004d64 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	015a      	lsls	r2, r3, #5
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	4413      	add	r3, r2
 80045d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f003 0320 	and.w	r3, r3, #32
 80045e0:	2b20      	cmp	r3, #32
 80045e2:	d13e      	bne.n	8004662 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	015a      	lsls	r2, r3, #5
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	4413      	add	r3, r2
 80045ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045f0:	461a      	mov	r2, r3
 80045f2:	2320      	movs	r3, #32
 80045f4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	212c      	movs	r1, #44	; 0x2c
 80045fc:	fb01 f303 	mul.w	r3, r1, r3
 8004600:	4413      	add	r3, r2
 8004602:	333d      	adds	r3, #61	; 0x3d
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	2b01      	cmp	r3, #1
 8004608:	f040 83ac 	bne.w	8004d64 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	212c      	movs	r1, #44	; 0x2c
 8004612:	fb01 f303 	mul.w	r3, r1, r3
 8004616:	4413      	add	r3, r2
 8004618:	333d      	adds	r3, #61	; 0x3d
 800461a:	2200      	movs	r2, #0
 800461c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	212c      	movs	r1, #44	; 0x2c
 8004624:	fb01 f303 	mul.w	r3, r1, r3
 8004628:	4413      	add	r3, r2
 800462a:	3360      	adds	r3, #96	; 0x60
 800462c:	2202      	movs	r2, #2
 800462e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	015a      	lsls	r2, r3, #5
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	4413      	add	r3, r2
 8004638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	697a      	ldr	r2, [r7, #20]
 8004640:	0151      	lsls	r1, r2, #5
 8004642:	69ba      	ldr	r2, [r7, #24]
 8004644:	440a      	add	r2, r1
 8004646:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800464a:	f043 0302 	orr.w	r3, r3, #2
 800464e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	b2d2      	uxtb	r2, r2
 8004658:	4611      	mov	r1, r2
 800465a:	4618      	mov	r0, r3
 800465c:	f003 fcbb 	bl	8007fd6 <USB_HC_Halt>
}
 8004660:	e380      	b.n	8004d64 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	015a      	lsls	r2, r3, #5
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	4413      	add	r3, r2
 800466a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004678:	d122      	bne.n	80046c0 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	015a      	lsls	r2, r3, #5
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	4413      	add	r3, r2
 8004682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	697a      	ldr	r2, [r7, #20]
 800468a:	0151      	lsls	r1, r2, #5
 800468c:	69ba      	ldr	r2, [r7, #24]
 800468e:	440a      	add	r2, r1
 8004690:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004694:	f043 0302 	orr.w	r3, r3, #2
 8004698:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	b2d2      	uxtb	r2, r2
 80046a2:	4611      	mov	r1, r2
 80046a4:	4618      	mov	r0, r3
 80046a6:	f003 fc96 	bl	8007fd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	015a      	lsls	r2, r3, #5
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	4413      	add	r3, r2
 80046b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046b6:	461a      	mov	r2, r3
 80046b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046bc:	6093      	str	r3, [r2, #8]
}
 80046be:	e351      	b.n	8004d64 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	015a      	lsls	r2, r3, #5
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	4413      	add	r3, r2
 80046c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d150      	bne.n	8004778 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	212c      	movs	r1, #44	; 0x2c
 80046dc:	fb01 f303 	mul.w	r3, r1, r3
 80046e0:	4413      	add	r3, r2
 80046e2:	335c      	adds	r3, #92	; 0x5c
 80046e4:	2200      	movs	r2, #0
 80046e6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	015a      	lsls	r2, r3, #5
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	4413      	add	r3, r2
 80046f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fa:	2b40      	cmp	r3, #64	; 0x40
 80046fc:	d111      	bne.n	8004722 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	212c      	movs	r1, #44	; 0x2c
 8004704:	fb01 f303 	mul.w	r3, r1, r3
 8004708:	4413      	add	r3, r2
 800470a:	333d      	adds	r3, #61	; 0x3d
 800470c:	2201      	movs	r2, #1
 800470e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	015a      	lsls	r2, r3, #5
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	4413      	add	r3, r2
 8004718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800471c:	461a      	mov	r2, r3
 800471e:	2340      	movs	r3, #64	; 0x40
 8004720:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	015a      	lsls	r2, r3, #5
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	4413      	add	r3, r2
 800472a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	0151      	lsls	r1, r2, #5
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	440a      	add	r2, r1
 8004738:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800473c:	f043 0302 	orr.w	r3, r3, #2
 8004740:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	b2d2      	uxtb	r2, r2
 800474a:	4611      	mov	r1, r2
 800474c:	4618      	mov	r0, r3
 800474e:	f003 fc42 	bl	8007fd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	015a      	lsls	r2, r3, #5
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	4413      	add	r3, r2
 800475a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800475e:	461a      	mov	r2, r3
 8004760:	2301      	movs	r3, #1
 8004762:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	212c      	movs	r1, #44	; 0x2c
 800476a:	fb01 f303 	mul.w	r3, r1, r3
 800476e:	4413      	add	r3, r2
 8004770:	3361      	adds	r3, #97	; 0x61
 8004772:	2201      	movs	r2, #1
 8004774:	701a      	strb	r2, [r3, #0]
}
 8004776:	e2f5      	b.n	8004d64 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	015a      	lsls	r2, r3, #5
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	4413      	add	r3, r2
 8004780:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800478a:	2b40      	cmp	r3, #64	; 0x40
 800478c:	d13c      	bne.n	8004808 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	212c      	movs	r1, #44	; 0x2c
 8004794:	fb01 f303 	mul.w	r3, r1, r3
 8004798:	4413      	add	r3, r2
 800479a:	3361      	adds	r3, #97	; 0x61
 800479c:	2204      	movs	r2, #4
 800479e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	212c      	movs	r1, #44	; 0x2c
 80047a6:	fb01 f303 	mul.w	r3, r1, r3
 80047aa:	4413      	add	r3, r2
 80047ac:	333d      	adds	r3, #61	; 0x3d
 80047ae:	2201      	movs	r2, #1
 80047b0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	212c      	movs	r1, #44	; 0x2c
 80047b8:	fb01 f303 	mul.w	r3, r1, r3
 80047bc:	4413      	add	r3, r2
 80047be:	335c      	adds	r3, #92	; 0x5c
 80047c0:	2200      	movs	r2, #0
 80047c2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	015a      	lsls	r2, r3, #5
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	4413      	add	r3, r2
 80047cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	697a      	ldr	r2, [r7, #20]
 80047d4:	0151      	lsls	r1, r2, #5
 80047d6:	69ba      	ldr	r2, [r7, #24]
 80047d8:	440a      	add	r2, r1
 80047da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047de:	f043 0302 	orr.w	r3, r3, #2
 80047e2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	697a      	ldr	r2, [r7, #20]
 80047ea:	b2d2      	uxtb	r2, r2
 80047ec:	4611      	mov	r1, r2
 80047ee:	4618      	mov	r0, r3
 80047f0:	f003 fbf1 	bl	8007fd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	015a      	lsls	r2, r3, #5
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	4413      	add	r3, r2
 80047fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004800:	461a      	mov	r2, r3
 8004802:	2340      	movs	r3, #64	; 0x40
 8004804:	6093      	str	r3, [r2, #8]
}
 8004806:	e2ad      	b.n	8004d64 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	015a      	lsls	r2, r3, #5
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	4413      	add	r3, r2
 8004810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f003 0308 	and.w	r3, r3, #8
 800481a:	2b08      	cmp	r3, #8
 800481c:	d12a      	bne.n	8004874 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	015a      	lsls	r2, r3, #5
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	4413      	add	r3, r2
 8004826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800482a:	461a      	mov	r2, r3
 800482c:	2308      	movs	r3, #8
 800482e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	015a      	lsls	r2, r3, #5
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	4413      	add	r3, r2
 8004838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	697a      	ldr	r2, [r7, #20]
 8004840:	0151      	lsls	r1, r2, #5
 8004842:	69ba      	ldr	r2, [r7, #24]
 8004844:	440a      	add	r2, r1
 8004846:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800484a:	f043 0302 	orr.w	r3, r3, #2
 800484e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	697a      	ldr	r2, [r7, #20]
 8004856:	b2d2      	uxtb	r2, r2
 8004858:	4611      	mov	r1, r2
 800485a:	4618      	mov	r0, r3
 800485c:	f003 fbbb 	bl	8007fd6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	212c      	movs	r1, #44	; 0x2c
 8004866:	fb01 f303 	mul.w	r3, r1, r3
 800486a:	4413      	add	r3, r2
 800486c:	3361      	adds	r3, #97	; 0x61
 800486e:	2205      	movs	r2, #5
 8004870:	701a      	strb	r2, [r3, #0]
}
 8004872:	e277      	b.n	8004d64 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	015a      	lsls	r2, r3, #5
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	4413      	add	r3, r2
 800487c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f003 0310 	and.w	r3, r3, #16
 8004886:	2b10      	cmp	r3, #16
 8004888:	d150      	bne.n	800492c <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	212c      	movs	r1, #44	; 0x2c
 8004890:	fb01 f303 	mul.w	r3, r1, r3
 8004894:	4413      	add	r3, r2
 8004896:	335c      	adds	r3, #92	; 0x5c
 8004898:	2200      	movs	r2, #0
 800489a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	212c      	movs	r1, #44	; 0x2c
 80048a2:	fb01 f303 	mul.w	r3, r1, r3
 80048a6:	4413      	add	r3, r2
 80048a8:	3361      	adds	r3, #97	; 0x61
 80048aa:	2203      	movs	r2, #3
 80048ac:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	212c      	movs	r1, #44	; 0x2c
 80048b4:	fb01 f303 	mul.w	r3, r1, r3
 80048b8:	4413      	add	r3, r2
 80048ba:	333d      	adds	r3, #61	; 0x3d
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d112      	bne.n	80048e8 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	212c      	movs	r1, #44	; 0x2c
 80048c8:	fb01 f303 	mul.w	r3, r1, r3
 80048cc:	4413      	add	r3, r2
 80048ce:	333c      	adds	r3, #60	; 0x3c
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d108      	bne.n	80048e8 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	212c      	movs	r1, #44	; 0x2c
 80048dc:	fb01 f303 	mul.w	r3, r1, r3
 80048e0:	4413      	add	r3, r2
 80048e2:	333d      	adds	r3, #61	; 0x3d
 80048e4:	2201      	movs	r2, #1
 80048e6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	015a      	lsls	r2, r3, #5
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	4413      	add	r3, r2
 80048f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	697a      	ldr	r2, [r7, #20]
 80048f8:	0151      	lsls	r1, r2, #5
 80048fa:	69ba      	ldr	r2, [r7, #24]
 80048fc:	440a      	add	r2, r1
 80048fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004902:	f043 0302 	orr.w	r3, r3, #2
 8004906:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	697a      	ldr	r2, [r7, #20]
 800490e:	b2d2      	uxtb	r2, r2
 8004910:	4611      	mov	r1, r2
 8004912:	4618      	mov	r0, r3
 8004914:	f003 fb5f 	bl	8007fd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	015a      	lsls	r2, r3, #5
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	4413      	add	r3, r2
 8004920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004924:	461a      	mov	r2, r3
 8004926:	2310      	movs	r3, #16
 8004928:	6093      	str	r3, [r2, #8]
}
 800492a:	e21b      	b.n	8004d64 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	015a      	lsls	r2, r3, #5
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	4413      	add	r3, r2
 8004934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800493e:	2b80      	cmp	r3, #128	; 0x80
 8004940:	d174      	bne.n	8004a2c <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d121      	bne.n	800498e <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	212c      	movs	r1, #44	; 0x2c
 8004950:	fb01 f303 	mul.w	r3, r1, r3
 8004954:	4413      	add	r3, r2
 8004956:	3361      	adds	r3, #97	; 0x61
 8004958:	2206      	movs	r2, #6
 800495a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	015a      	lsls	r2, r3, #5
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	4413      	add	r3, r2
 8004964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	0151      	lsls	r1, r2, #5
 800496e:	69ba      	ldr	r2, [r7, #24]
 8004970:	440a      	add	r2, r1
 8004972:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004976:	f043 0302 	orr.w	r3, r3, #2
 800497a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	b2d2      	uxtb	r2, r2
 8004984:	4611      	mov	r1, r2
 8004986:	4618      	mov	r0, r3
 8004988:	f003 fb25 	bl	8007fd6 <USB_HC_Halt>
 800498c:	e044      	b.n	8004a18 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	212c      	movs	r1, #44	; 0x2c
 8004994:	fb01 f303 	mul.w	r3, r1, r3
 8004998:	4413      	add	r3, r2
 800499a:	335c      	adds	r3, #92	; 0x5c
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	1c5a      	adds	r2, r3, #1
 80049a0:	6879      	ldr	r1, [r7, #4]
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	202c      	movs	r0, #44	; 0x2c
 80049a6:	fb00 f303 	mul.w	r3, r0, r3
 80049aa:	440b      	add	r3, r1
 80049ac:	335c      	adds	r3, #92	; 0x5c
 80049ae:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	212c      	movs	r1, #44	; 0x2c
 80049b6:	fb01 f303 	mul.w	r3, r1, r3
 80049ba:	4413      	add	r3, r2
 80049bc:	335c      	adds	r3, #92	; 0x5c
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d920      	bls.n	8004a06 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	212c      	movs	r1, #44	; 0x2c
 80049ca:	fb01 f303 	mul.w	r3, r1, r3
 80049ce:	4413      	add	r3, r2
 80049d0:	335c      	adds	r3, #92	; 0x5c
 80049d2:	2200      	movs	r2, #0
 80049d4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	212c      	movs	r1, #44	; 0x2c
 80049dc:	fb01 f303 	mul.w	r3, r1, r3
 80049e0:	4413      	add	r3, r2
 80049e2:	3360      	adds	r3, #96	; 0x60
 80049e4:	2204      	movs	r2, #4
 80049e6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	b2d9      	uxtb	r1, r3
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	202c      	movs	r0, #44	; 0x2c
 80049f2:	fb00 f303 	mul.w	r3, r0, r3
 80049f6:	4413      	add	r3, r2
 80049f8:	3360      	adds	r3, #96	; 0x60
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	461a      	mov	r2, r3
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f008 f994 	bl	800cd2c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004a04:	e008      	b.n	8004a18 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	212c      	movs	r1, #44	; 0x2c
 8004a0c:	fb01 f303 	mul.w	r3, r1, r3
 8004a10:	4413      	add	r3, r2
 8004a12:	3360      	adds	r3, #96	; 0x60
 8004a14:	2202      	movs	r2, #2
 8004a16:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	015a      	lsls	r2, r3, #5
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	4413      	add	r3, r2
 8004a20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a24:	461a      	mov	r2, r3
 8004a26:	2380      	movs	r3, #128	; 0x80
 8004a28:	6093      	str	r3, [r2, #8]
}
 8004a2a:	e19b      	b.n	8004d64 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	015a      	lsls	r2, r3, #5
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	4413      	add	r3, r2
 8004a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a42:	d134      	bne.n	8004aae <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	015a      	lsls	r2, r3, #5
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	697a      	ldr	r2, [r7, #20]
 8004a54:	0151      	lsls	r1, r2, #5
 8004a56:	69ba      	ldr	r2, [r7, #24]
 8004a58:	440a      	add	r2, r1
 8004a5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a5e:	f043 0302 	orr.w	r3, r3, #2
 8004a62:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	697a      	ldr	r2, [r7, #20]
 8004a6a:	b2d2      	uxtb	r2, r2
 8004a6c:	4611      	mov	r1, r2
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f003 fab1 	bl	8007fd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	015a      	lsls	r2, r3, #5
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a80:	461a      	mov	r2, r3
 8004a82:	2310      	movs	r3, #16
 8004a84:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	015a      	lsls	r2, r3, #5
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a92:	461a      	mov	r2, r3
 8004a94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a98:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	212c      	movs	r1, #44	; 0x2c
 8004aa0:	fb01 f303 	mul.w	r3, r1, r3
 8004aa4:	4413      	add	r3, r2
 8004aa6:	3361      	adds	r3, #97	; 0x61
 8004aa8:	2208      	movs	r2, #8
 8004aaa:	701a      	strb	r2, [r3, #0]
}
 8004aac:	e15a      	b.n	8004d64 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	015a      	lsls	r2, r3, #5
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f003 0302 	and.w	r3, r3, #2
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	f040 814f 	bne.w	8004d64 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	015a      	lsls	r2, r3, #5
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	4413      	add	r3, r2
 8004ace:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	697a      	ldr	r2, [r7, #20]
 8004ad6:	0151      	lsls	r1, r2, #5
 8004ad8:	69ba      	ldr	r2, [r7, #24]
 8004ada:	440a      	add	r2, r1
 8004adc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ae0:	f023 0302 	bic.w	r3, r3, #2
 8004ae4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	212c      	movs	r1, #44	; 0x2c
 8004aec:	fb01 f303 	mul.w	r3, r1, r3
 8004af0:	4413      	add	r3, r2
 8004af2:	3361      	adds	r3, #97	; 0x61
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d17d      	bne.n	8004bf6 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	212c      	movs	r1, #44	; 0x2c
 8004b00:	fb01 f303 	mul.w	r3, r1, r3
 8004b04:	4413      	add	r3, r2
 8004b06:	3360      	adds	r3, #96	; 0x60
 8004b08:	2201      	movs	r2, #1
 8004b0a:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	212c      	movs	r1, #44	; 0x2c
 8004b12:	fb01 f303 	mul.w	r3, r1, r3
 8004b16:	4413      	add	r3, r2
 8004b18:	333f      	adds	r3, #63	; 0x3f
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d00a      	beq.n	8004b36 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	212c      	movs	r1, #44	; 0x2c
 8004b26:	fb01 f303 	mul.w	r3, r1, r3
 8004b2a:	4413      	add	r3, r2
 8004b2c:	333f      	adds	r3, #63	; 0x3f
 8004b2e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004b30:	2b03      	cmp	r3, #3
 8004b32:	f040 8100 	bne.w	8004d36 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d113      	bne.n	8004b66 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	212c      	movs	r1, #44	; 0x2c
 8004b44:	fb01 f303 	mul.w	r3, r1, r3
 8004b48:	4413      	add	r3, r2
 8004b4a:	3355      	adds	r3, #85	; 0x55
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	f083 0301 	eor.w	r3, r3, #1
 8004b52:	b2d8      	uxtb	r0, r3
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	212c      	movs	r1, #44	; 0x2c
 8004b5a:	fb01 f303 	mul.w	r3, r1, r3
 8004b5e:	4413      	add	r3, r2
 8004b60:	3355      	adds	r3, #85	; 0x55
 8004b62:	4602      	mov	r2, r0
 8004b64:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	f040 80e3 	bne.w	8004d36 <HCD_HC_OUT_IRQHandler+0x7cc>
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	212c      	movs	r1, #44	; 0x2c
 8004b76:	fb01 f303 	mul.w	r3, r1, r3
 8004b7a:	4413      	add	r3, r2
 8004b7c:	334c      	adds	r3, #76	; 0x4c
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f000 80d8 	beq.w	8004d36 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	212c      	movs	r1, #44	; 0x2c
 8004b8c:	fb01 f303 	mul.w	r3, r1, r3
 8004b90:	4413      	add	r3, r2
 8004b92:	334c      	adds	r3, #76	; 0x4c
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	6879      	ldr	r1, [r7, #4]
 8004b98:	697a      	ldr	r2, [r7, #20]
 8004b9a:	202c      	movs	r0, #44	; 0x2c
 8004b9c:	fb00 f202 	mul.w	r2, r0, r2
 8004ba0:	440a      	add	r2, r1
 8004ba2:	3240      	adds	r2, #64	; 0x40
 8004ba4:	8812      	ldrh	r2, [r2, #0]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	6879      	ldr	r1, [r7, #4]
 8004bac:	697a      	ldr	r2, [r7, #20]
 8004bae:	202c      	movs	r0, #44	; 0x2c
 8004bb0:	fb00 f202 	mul.w	r2, r0, r2
 8004bb4:	440a      	add	r2, r1
 8004bb6:	3240      	adds	r2, #64	; 0x40
 8004bb8:	8812      	ldrh	r2, [r2, #0]
 8004bba:	fbb3 f3f2 	udiv	r3, r3, r2
 8004bbe:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	f000 80b5 	beq.w	8004d36 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	212c      	movs	r1, #44	; 0x2c
 8004bd2:	fb01 f303 	mul.w	r3, r1, r3
 8004bd6:	4413      	add	r3, r2
 8004bd8:	3355      	adds	r3, #85	; 0x55
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	f083 0301 	eor.w	r3, r3, #1
 8004be0:	b2d8      	uxtb	r0, r3
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	212c      	movs	r1, #44	; 0x2c
 8004be8:	fb01 f303 	mul.w	r3, r1, r3
 8004bec:	4413      	add	r3, r2
 8004bee:	3355      	adds	r3, #85	; 0x55
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	701a      	strb	r2, [r3, #0]
 8004bf4:	e09f      	b.n	8004d36 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	212c      	movs	r1, #44	; 0x2c
 8004bfc:	fb01 f303 	mul.w	r3, r1, r3
 8004c00:	4413      	add	r3, r2
 8004c02:	3361      	adds	r3, #97	; 0x61
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	2b03      	cmp	r3, #3
 8004c08:	d109      	bne.n	8004c1e <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	212c      	movs	r1, #44	; 0x2c
 8004c10:	fb01 f303 	mul.w	r3, r1, r3
 8004c14:	4413      	add	r3, r2
 8004c16:	3360      	adds	r3, #96	; 0x60
 8004c18:	2202      	movs	r2, #2
 8004c1a:	701a      	strb	r2, [r3, #0]
 8004c1c:	e08b      	b.n	8004d36 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	212c      	movs	r1, #44	; 0x2c
 8004c24:	fb01 f303 	mul.w	r3, r1, r3
 8004c28:	4413      	add	r3, r2
 8004c2a:	3361      	adds	r3, #97	; 0x61
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	2b04      	cmp	r3, #4
 8004c30:	d109      	bne.n	8004c46 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	212c      	movs	r1, #44	; 0x2c
 8004c38:	fb01 f303 	mul.w	r3, r1, r3
 8004c3c:	4413      	add	r3, r2
 8004c3e:	3360      	adds	r3, #96	; 0x60
 8004c40:	2202      	movs	r2, #2
 8004c42:	701a      	strb	r2, [r3, #0]
 8004c44:	e077      	b.n	8004d36 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	212c      	movs	r1, #44	; 0x2c
 8004c4c:	fb01 f303 	mul.w	r3, r1, r3
 8004c50:	4413      	add	r3, r2
 8004c52:	3361      	adds	r3, #97	; 0x61
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	2b05      	cmp	r3, #5
 8004c58:	d109      	bne.n	8004c6e <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	212c      	movs	r1, #44	; 0x2c
 8004c60:	fb01 f303 	mul.w	r3, r1, r3
 8004c64:	4413      	add	r3, r2
 8004c66:	3360      	adds	r3, #96	; 0x60
 8004c68:	2205      	movs	r2, #5
 8004c6a:	701a      	strb	r2, [r3, #0]
 8004c6c:	e063      	b.n	8004d36 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	212c      	movs	r1, #44	; 0x2c
 8004c74:	fb01 f303 	mul.w	r3, r1, r3
 8004c78:	4413      	add	r3, r2
 8004c7a:	3361      	adds	r3, #97	; 0x61
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	2b06      	cmp	r3, #6
 8004c80:	d009      	beq.n	8004c96 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	212c      	movs	r1, #44	; 0x2c
 8004c88:	fb01 f303 	mul.w	r3, r1, r3
 8004c8c:	4413      	add	r3, r2
 8004c8e:	3361      	adds	r3, #97	; 0x61
 8004c90:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004c92:	2b08      	cmp	r3, #8
 8004c94:	d14f      	bne.n	8004d36 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	212c      	movs	r1, #44	; 0x2c
 8004c9c:	fb01 f303 	mul.w	r3, r1, r3
 8004ca0:	4413      	add	r3, r2
 8004ca2:	335c      	adds	r3, #92	; 0x5c
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	1c5a      	adds	r2, r3, #1
 8004ca8:	6879      	ldr	r1, [r7, #4]
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	202c      	movs	r0, #44	; 0x2c
 8004cae:	fb00 f303 	mul.w	r3, r0, r3
 8004cb2:	440b      	add	r3, r1
 8004cb4:	335c      	adds	r3, #92	; 0x5c
 8004cb6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	212c      	movs	r1, #44	; 0x2c
 8004cbe:	fb01 f303 	mul.w	r3, r1, r3
 8004cc2:	4413      	add	r3, r2
 8004cc4:	335c      	adds	r3, #92	; 0x5c
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d912      	bls.n	8004cf2 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	212c      	movs	r1, #44	; 0x2c
 8004cd2:	fb01 f303 	mul.w	r3, r1, r3
 8004cd6:	4413      	add	r3, r2
 8004cd8:	335c      	adds	r3, #92	; 0x5c
 8004cda:	2200      	movs	r2, #0
 8004cdc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	212c      	movs	r1, #44	; 0x2c
 8004ce4:	fb01 f303 	mul.w	r3, r1, r3
 8004ce8:	4413      	add	r3, r2
 8004cea:	3360      	adds	r3, #96	; 0x60
 8004cec:	2204      	movs	r2, #4
 8004cee:	701a      	strb	r2, [r3, #0]
 8004cf0:	e021      	b.n	8004d36 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	212c      	movs	r1, #44	; 0x2c
 8004cf8:	fb01 f303 	mul.w	r3, r1, r3
 8004cfc:	4413      	add	r3, r2
 8004cfe:	3360      	adds	r3, #96	; 0x60
 8004d00:	2202      	movs	r2, #2
 8004d02:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	015a      	lsls	r2, r3, #5
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d1a:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d22:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	015a      	lsls	r2, r3, #5
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d30:	461a      	mov	r2, r3
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	015a      	lsls	r2, r3, #5
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d42:	461a      	mov	r2, r3
 8004d44:	2302      	movs	r3, #2
 8004d46:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	b2d9      	uxtb	r1, r3
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	202c      	movs	r0, #44	; 0x2c
 8004d52:	fb00 f303 	mul.w	r3, r0, r3
 8004d56:	4413      	add	r3, r2
 8004d58:	3360      	adds	r3, #96	; 0x60
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f007 ffe4 	bl	800cd2c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004d64:	bf00      	nop
 8004d66:	3720      	adds	r7, #32
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b08a      	sub	sp, #40	; 0x28
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7c:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	6a1b      	ldr	r3, [r3, #32]
 8004d84:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	f003 030f 	and.w	r3, r3, #15
 8004d8c:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	0c5b      	lsrs	r3, r3, #17
 8004d92:	f003 030f 	and.w	r3, r3, #15
 8004d96:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	091b      	lsrs	r3, r3, #4
 8004d9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004da0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d004      	beq.n	8004db2 <HCD_RXQLVL_IRQHandler+0x46>
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	2b05      	cmp	r3, #5
 8004dac:	f000 80a9 	beq.w	8004f02 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004db0:	e0aa      	b.n	8004f08 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f000 80a6 	beq.w	8004f06 <HCD_RXQLVL_IRQHandler+0x19a>
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	212c      	movs	r1, #44	; 0x2c
 8004dc0:	fb01 f303 	mul.w	r3, r1, r3
 8004dc4:	4413      	add	r3, r2
 8004dc6:	3344      	adds	r3, #68	; 0x44
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	f000 809b 	beq.w	8004f06 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	212c      	movs	r1, #44	; 0x2c
 8004dd6:	fb01 f303 	mul.w	r3, r1, r3
 8004dda:	4413      	add	r3, r2
 8004ddc:	3350      	adds	r3, #80	; 0x50
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	441a      	add	r2, r3
 8004de4:	6879      	ldr	r1, [r7, #4]
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	202c      	movs	r0, #44	; 0x2c
 8004dea:	fb00 f303 	mul.w	r3, r0, r3
 8004dee:	440b      	add	r3, r1
 8004df0:	334c      	adds	r3, #76	; 0x4c
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d87a      	bhi.n	8004eee <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6818      	ldr	r0, [r3, #0]
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	212c      	movs	r1, #44	; 0x2c
 8004e02:	fb01 f303 	mul.w	r3, r1, r3
 8004e06:	4413      	add	r3, r2
 8004e08:	3344      	adds	r3, #68	; 0x44
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	b292      	uxth	r2, r2
 8004e10:	4619      	mov	r1, r3
 8004e12:	f002 fc59 	bl	80076c8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	212c      	movs	r1, #44	; 0x2c
 8004e1c:	fb01 f303 	mul.w	r3, r1, r3
 8004e20:	4413      	add	r3, r2
 8004e22:	3344      	adds	r3, #68	; 0x44
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	441a      	add	r2, r3
 8004e2a:	6879      	ldr	r1, [r7, #4]
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	202c      	movs	r0, #44	; 0x2c
 8004e30:	fb00 f303 	mul.w	r3, r0, r3
 8004e34:	440b      	add	r3, r1
 8004e36:	3344      	adds	r3, #68	; 0x44
 8004e38:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	212c      	movs	r1, #44	; 0x2c
 8004e40:	fb01 f303 	mul.w	r3, r1, r3
 8004e44:	4413      	add	r3, r2
 8004e46:	3350      	adds	r3, #80	; 0x50
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	441a      	add	r2, r3
 8004e4e:	6879      	ldr	r1, [r7, #4]
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	202c      	movs	r0, #44	; 0x2c
 8004e54:	fb00 f303 	mul.w	r3, r0, r3
 8004e58:	440b      	add	r3, r1
 8004e5a:	3350      	adds	r3, #80	; 0x50
 8004e5c:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	015a      	lsls	r2, r3, #5
 8004e62:	6a3b      	ldr	r3, [r7, #32]
 8004e64:	4413      	add	r3, r2
 8004e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	0cdb      	lsrs	r3, r3, #19
 8004e6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e72:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	212c      	movs	r1, #44	; 0x2c
 8004e7a:	fb01 f303 	mul.w	r3, r1, r3
 8004e7e:	4413      	add	r3, r2
 8004e80:	3340      	adds	r3, #64	; 0x40
 8004e82:	881b      	ldrh	r3, [r3, #0]
 8004e84:	461a      	mov	r2, r3
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d13c      	bne.n	8004f06 <HCD_RXQLVL_IRQHandler+0x19a>
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d039      	beq.n	8004f06 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	015a      	lsls	r2, r3, #5
 8004e96:	6a3b      	ldr	r3, [r7, #32]
 8004e98:	4413      	add	r3, r2
 8004e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ea8:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004eb0:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	015a      	lsls	r2, r3, #5
 8004eb6:	6a3b      	ldr	r3, [r7, #32]
 8004eb8:	4413      	add	r3, r2
 8004eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	212c      	movs	r1, #44	; 0x2c
 8004eca:	fb01 f303 	mul.w	r3, r1, r3
 8004ece:	4413      	add	r3, r2
 8004ed0:	3354      	adds	r3, #84	; 0x54
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	f083 0301 	eor.w	r3, r3, #1
 8004ed8:	b2d8      	uxtb	r0, r3
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	212c      	movs	r1, #44	; 0x2c
 8004ee0:	fb01 f303 	mul.w	r3, r1, r3
 8004ee4:	4413      	add	r3, r2
 8004ee6:	3354      	adds	r3, #84	; 0x54
 8004ee8:	4602      	mov	r2, r0
 8004eea:	701a      	strb	r2, [r3, #0]
      break;
 8004eec:	e00b      	b.n	8004f06 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	212c      	movs	r1, #44	; 0x2c
 8004ef4:	fb01 f303 	mul.w	r3, r1, r3
 8004ef8:	4413      	add	r3, r2
 8004efa:	3360      	adds	r3, #96	; 0x60
 8004efc:	2204      	movs	r2, #4
 8004efe:	701a      	strb	r2, [r3, #0]
      break;
 8004f00:	e001      	b.n	8004f06 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004f02:	bf00      	nop
 8004f04:	e000      	b.n	8004f08 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004f06:	bf00      	nop
  }
}
 8004f08:	bf00      	nop
 8004f0a:	3728      	adds	r7, #40	; 0x28
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b086      	sub	sp, #24
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004f3c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f003 0302 	and.w	r3, r3, #2
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d10b      	bne.n	8004f60 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d102      	bne.n	8004f58 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f007 fece 	bl	800ccf4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	f043 0302 	orr.w	r3, r3, #2
 8004f5e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f003 0308 	and.w	r3, r3, #8
 8004f66:	2b08      	cmp	r3, #8
 8004f68:	d132      	bne.n	8004fd0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	f043 0308 	orr.w	r3, r3, #8
 8004f70:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f003 0304 	and.w	r3, r3, #4
 8004f78:	2b04      	cmp	r3, #4
 8004f7a:	d126      	bne.n	8004fca <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d113      	bne.n	8004fac <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004f8a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f8e:	d106      	bne.n	8004f9e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2102      	movs	r1, #2
 8004f96:	4618      	mov	r0, r3
 8004f98:	f002 fcf6 	bl	8007988 <USB_InitFSLSPClkSel>
 8004f9c:	e011      	b.n	8004fc2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2101      	movs	r1, #1
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f002 fcef 	bl	8007988 <USB_InitFSLSPClkSel>
 8004faa:	e00a      	b.n	8004fc2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d106      	bne.n	8004fc2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fba:	461a      	mov	r2, r3
 8004fbc:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004fc0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f007 fec4 	bl	800cd50 <HAL_HCD_PortEnabled_Callback>
 8004fc8:	e002      	b.n	8004fd0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f007 fece 	bl	800cd6c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f003 0320 	and.w	r3, r3, #32
 8004fd6:	2b20      	cmp	r3, #32
 8004fd8:	d103      	bne.n	8004fe2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	f043 0320 	orr.w	r3, r3, #32
 8004fe0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004fe8:	461a      	mov	r2, r3
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	6013      	str	r3, [r2, #0]
}
 8004fee:	bf00      	nop
 8004ff0:	3718      	adds	r7, #24
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
	...

08004ff8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d101      	bne.n	800500a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e12b      	b.n	8005262 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b00      	cmp	r3, #0
 8005014:	d106      	bne.n	8005024 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f7fc fc34 	bl	800188c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2224      	movs	r2, #36	; 0x24
 8005028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f022 0201 	bic.w	r2, r2, #1
 800503a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800504a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800505a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800505c:	f001 f9fc 	bl	8006458 <HAL_RCC_GetPCLK1Freq>
 8005060:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	4a81      	ldr	r2, [pc, #516]	; (800526c <HAL_I2C_Init+0x274>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d807      	bhi.n	800507c <HAL_I2C_Init+0x84>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	4a80      	ldr	r2, [pc, #512]	; (8005270 <HAL_I2C_Init+0x278>)
 8005070:	4293      	cmp	r3, r2
 8005072:	bf94      	ite	ls
 8005074:	2301      	movls	r3, #1
 8005076:	2300      	movhi	r3, #0
 8005078:	b2db      	uxtb	r3, r3
 800507a:	e006      	b.n	800508a <HAL_I2C_Init+0x92>
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	4a7d      	ldr	r2, [pc, #500]	; (8005274 <HAL_I2C_Init+0x27c>)
 8005080:	4293      	cmp	r3, r2
 8005082:	bf94      	ite	ls
 8005084:	2301      	movls	r3, #1
 8005086:	2300      	movhi	r3, #0
 8005088:	b2db      	uxtb	r3, r3
 800508a:	2b00      	cmp	r3, #0
 800508c:	d001      	beq.n	8005092 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e0e7      	b.n	8005262 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	4a78      	ldr	r2, [pc, #480]	; (8005278 <HAL_I2C_Init+0x280>)
 8005096:	fba2 2303 	umull	r2, r3, r2, r3
 800509a:	0c9b      	lsrs	r3, r3, #18
 800509c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68ba      	ldr	r2, [r7, #8]
 80050ae:	430a      	orrs	r2, r1
 80050b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	6a1b      	ldr	r3, [r3, #32]
 80050b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	4a6a      	ldr	r2, [pc, #424]	; (800526c <HAL_I2C_Init+0x274>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d802      	bhi.n	80050cc <HAL_I2C_Init+0xd4>
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	3301      	adds	r3, #1
 80050ca:	e009      	b.n	80050e0 <HAL_I2C_Init+0xe8>
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80050d2:	fb02 f303 	mul.w	r3, r2, r3
 80050d6:	4a69      	ldr	r2, [pc, #420]	; (800527c <HAL_I2C_Init+0x284>)
 80050d8:	fba2 2303 	umull	r2, r3, r2, r3
 80050dc:	099b      	lsrs	r3, r3, #6
 80050de:	3301      	adds	r3, #1
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	6812      	ldr	r2, [r2, #0]
 80050e4:	430b      	orrs	r3, r1
 80050e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	69db      	ldr	r3, [r3, #28]
 80050ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80050f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	495c      	ldr	r1, [pc, #368]	; (800526c <HAL_I2C_Init+0x274>)
 80050fc:	428b      	cmp	r3, r1
 80050fe:	d819      	bhi.n	8005134 <HAL_I2C_Init+0x13c>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	1e59      	subs	r1, r3, #1
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	005b      	lsls	r3, r3, #1
 800510a:	fbb1 f3f3 	udiv	r3, r1, r3
 800510e:	1c59      	adds	r1, r3, #1
 8005110:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005114:	400b      	ands	r3, r1
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00a      	beq.n	8005130 <HAL_I2C_Init+0x138>
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	1e59      	subs	r1, r3, #1
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	005b      	lsls	r3, r3, #1
 8005124:	fbb1 f3f3 	udiv	r3, r1, r3
 8005128:	3301      	adds	r3, #1
 800512a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800512e:	e051      	b.n	80051d4 <HAL_I2C_Init+0x1dc>
 8005130:	2304      	movs	r3, #4
 8005132:	e04f      	b.n	80051d4 <HAL_I2C_Init+0x1dc>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d111      	bne.n	8005160 <HAL_I2C_Init+0x168>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	1e58      	subs	r0, r3, #1
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6859      	ldr	r1, [r3, #4]
 8005144:	460b      	mov	r3, r1
 8005146:	005b      	lsls	r3, r3, #1
 8005148:	440b      	add	r3, r1
 800514a:	fbb0 f3f3 	udiv	r3, r0, r3
 800514e:	3301      	adds	r3, #1
 8005150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005154:	2b00      	cmp	r3, #0
 8005156:	bf0c      	ite	eq
 8005158:	2301      	moveq	r3, #1
 800515a:	2300      	movne	r3, #0
 800515c:	b2db      	uxtb	r3, r3
 800515e:	e012      	b.n	8005186 <HAL_I2C_Init+0x18e>
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	1e58      	subs	r0, r3, #1
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6859      	ldr	r1, [r3, #4]
 8005168:	460b      	mov	r3, r1
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	440b      	add	r3, r1
 800516e:	0099      	lsls	r1, r3, #2
 8005170:	440b      	add	r3, r1
 8005172:	fbb0 f3f3 	udiv	r3, r0, r3
 8005176:	3301      	adds	r3, #1
 8005178:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800517c:	2b00      	cmp	r3, #0
 800517e:	bf0c      	ite	eq
 8005180:	2301      	moveq	r3, #1
 8005182:	2300      	movne	r3, #0
 8005184:	b2db      	uxtb	r3, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <HAL_I2C_Init+0x196>
 800518a:	2301      	movs	r3, #1
 800518c:	e022      	b.n	80051d4 <HAL_I2C_Init+0x1dc>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d10e      	bne.n	80051b4 <HAL_I2C_Init+0x1bc>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	1e58      	subs	r0, r3, #1
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6859      	ldr	r1, [r3, #4]
 800519e:	460b      	mov	r3, r1
 80051a0:	005b      	lsls	r3, r3, #1
 80051a2:	440b      	add	r3, r1
 80051a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80051a8:	3301      	adds	r3, #1
 80051aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051b2:	e00f      	b.n	80051d4 <HAL_I2C_Init+0x1dc>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	1e58      	subs	r0, r3, #1
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6859      	ldr	r1, [r3, #4]
 80051bc:	460b      	mov	r3, r1
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	440b      	add	r3, r1
 80051c2:	0099      	lsls	r1, r3, #2
 80051c4:	440b      	add	r3, r1
 80051c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80051ca:	3301      	adds	r3, #1
 80051cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051d4:	6879      	ldr	r1, [r7, #4]
 80051d6:	6809      	ldr	r1, [r1, #0]
 80051d8:	4313      	orrs	r3, r2
 80051da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	69da      	ldr	r2, [r3, #28]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a1b      	ldr	r3, [r3, #32]
 80051ee:	431a      	orrs	r2, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	430a      	orrs	r2, r1
 80051f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005202:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	6911      	ldr	r1, [r2, #16]
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	68d2      	ldr	r2, [r2, #12]
 800520e:	4311      	orrs	r1, r2
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	6812      	ldr	r2, [r2, #0]
 8005214:	430b      	orrs	r3, r1
 8005216:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	695a      	ldr	r2, [r3, #20]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	431a      	orrs	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	430a      	orrs	r2, r1
 8005232:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f042 0201 	orr.w	r2, r2, #1
 8005242:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2220      	movs	r2, #32
 800524e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	000186a0 	.word	0x000186a0
 8005270:	001e847f 	.word	0x001e847f
 8005274:	003d08ff 	.word	0x003d08ff
 8005278:	431bde83 	.word	0x431bde83
 800527c:	10624dd3 	.word	0x10624dd3

08005280 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b088      	sub	sp, #32
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d101      	bne.n	8005292 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e128      	b.n	80054e4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b00      	cmp	r3, #0
 800529c:	d109      	bne.n	80052b2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a90      	ldr	r2, [pc, #576]	; (80054ec <HAL_I2S_Init+0x26c>)
 80052aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f7fc fb35 	bl	800191c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2202      	movs	r2, #2
 80052b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	69db      	ldr	r3, [r3, #28]
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	6812      	ldr	r2, [r2, #0]
 80052c4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80052c8:	f023 030f 	bic.w	r3, r3, #15
 80052cc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2202      	movs	r2, #2
 80052d4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d060      	beq.n	80053a0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d102      	bne.n	80052ec <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80052e6:	2310      	movs	r3, #16
 80052e8:	617b      	str	r3, [r7, #20]
 80052ea:	e001      	b.n	80052f0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80052ec:	2320      	movs	r3, #32
 80052ee:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	2b20      	cmp	r3, #32
 80052f6:	d802      	bhi.n	80052fe <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	005b      	lsls	r3, r3, #1
 80052fc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80052fe:	2001      	movs	r0, #1
 8005300:	f001 f9e6 	bl	80066d0 <HAL_RCCEx_GetPeriphCLKFreq>
 8005304:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800530e:	d125      	bne.n	800535c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d010      	beq.n	800533a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005322:	4613      	mov	r3, r2
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	4413      	add	r3, r2
 8005328:	005b      	lsls	r3, r3, #1
 800532a:	461a      	mov	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	695b      	ldr	r3, [r3, #20]
 8005330:	fbb2 f3f3 	udiv	r3, r2, r3
 8005334:	3305      	adds	r3, #5
 8005336:	613b      	str	r3, [r7, #16]
 8005338:	e01f      	b.n	800537a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	00db      	lsls	r3, r3, #3
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	fbb2 f2f3 	udiv	r2, r2, r3
 8005344:	4613      	mov	r3, r2
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	4413      	add	r3, r2
 800534a:	005b      	lsls	r3, r3, #1
 800534c:	461a      	mov	r2, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	fbb2 f3f3 	udiv	r3, r2, r3
 8005356:	3305      	adds	r3, #5
 8005358:	613b      	str	r3, [r7, #16]
 800535a:	e00e      	b.n	800537a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	fbb2 f2f3 	udiv	r2, r2, r3
 8005364:	4613      	mov	r3, r2
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	4413      	add	r3, r2
 800536a:	005b      	lsls	r3, r3, #1
 800536c:	461a      	mov	r2, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	fbb2 f3f3 	udiv	r3, r2, r3
 8005376:	3305      	adds	r3, #5
 8005378:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	4a5c      	ldr	r2, [pc, #368]	; (80054f0 <HAL_I2S_Init+0x270>)
 800537e:	fba2 2303 	umull	r2, r3, r2, r3
 8005382:	08db      	lsrs	r3, r3, #3
 8005384:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	f003 0301 	and.w	r3, r3, #1
 800538c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	085b      	lsrs	r3, r3, #1
 8005396:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	021b      	lsls	r3, r3, #8
 800539c:	61bb      	str	r3, [r7, #24]
 800539e:	e003      	b.n	80053a8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80053a0:	2302      	movs	r3, #2
 80053a2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80053a4:	2300      	movs	r3, #0
 80053a6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d902      	bls.n	80053b4 <HAL_I2S_Init+0x134>
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	2bff      	cmp	r3, #255	; 0xff
 80053b2:	d907      	bls.n	80053c4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053b8:	f043 0210 	orr.w	r2, r3, #16
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e08f      	b.n	80054e4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	691a      	ldr	r2, [r3, #16]
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	ea42 0103 	orr.w	r1, r2, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	69fa      	ldr	r2, [r7, #28]
 80053d4:	430a      	orrs	r2, r1
 80053d6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	69db      	ldr	r3, [r3, #28]
 80053de:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80053e2:	f023 030f 	bic.w	r3, r3, #15
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	6851      	ldr	r1, [r2, #4]
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	6892      	ldr	r2, [r2, #8]
 80053ee:	4311      	orrs	r1, r2
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	68d2      	ldr	r2, [r2, #12]
 80053f4:	4311      	orrs	r1, r2
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	6992      	ldr	r2, [r2, #24]
 80053fa:	430a      	orrs	r2, r1
 80053fc:	431a      	orrs	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005406:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a1b      	ldr	r3, [r3, #32]
 800540c:	2b01      	cmp	r3, #1
 800540e:	d161      	bne.n	80054d4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a38      	ldr	r2, [pc, #224]	; (80054f4 <HAL_I2S_Init+0x274>)
 8005414:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a37      	ldr	r2, [pc, #220]	; (80054f8 <HAL_I2S_Init+0x278>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d101      	bne.n	8005424 <HAL_I2S_Init+0x1a4>
 8005420:	4b36      	ldr	r3, [pc, #216]	; (80054fc <HAL_I2S_Init+0x27c>)
 8005422:	e001      	b.n	8005428 <HAL_I2S_Init+0x1a8>
 8005424:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005428:	69db      	ldr	r3, [r3, #28]
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	6812      	ldr	r2, [r2, #0]
 800542e:	4932      	ldr	r1, [pc, #200]	; (80054f8 <HAL_I2S_Init+0x278>)
 8005430:	428a      	cmp	r2, r1
 8005432:	d101      	bne.n	8005438 <HAL_I2S_Init+0x1b8>
 8005434:	4a31      	ldr	r2, [pc, #196]	; (80054fc <HAL_I2S_Init+0x27c>)
 8005436:	e001      	b.n	800543c <HAL_I2S_Init+0x1bc>
 8005438:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800543c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005440:	f023 030f 	bic.w	r3, r3, #15
 8005444:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a2b      	ldr	r2, [pc, #172]	; (80054f8 <HAL_I2S_Init+0x278>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d101      	bne.n	8005454 <HAL_I2S_Init+0x1d4>
 8005450:	4b2a      	ldr	r3, [pc, #168]	; (80054fc <HAL_I2S_Init+0x27c>)
 8005452:	e001      	b.n	8005458 <HAL_I2S_Init+0x1d8>
 8005454:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005458:	2202      	movs	r2, #2
 800545a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a25      	ldr	r2, [pc, #148]	; (80054f8 <HAL_I2S_Init+0x278>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d101      	bne.n	800546a <HAL_I2S_Init+0x1ea>
 8005466:	4b25      	ldr	r3, [pc, #148]	; (80054fc <HAL_I2S_Init+0x27c>)
 8005468:	e001      	b.n	800546e <HAL_I2S_Init+0x1ee>
 800546a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800546e:	69db      	ldr	r3, [r3, #28]
 8005470:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800547a:	d003      	beq.n	8005484 <HAL_I2S_Init+0x204>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d103      	bne.n	800548c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005484:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005488:	613b      	str	r3, [r7, #16]
 800548a:	e001      	b.n	8005490 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800548c:	2300      	movs	r3, #0
 800548e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800549a:	4313      	orrs	r3, r2
 800549c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80054a4:	4313      	orrs	r3, r2
 80054a6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	699b      	ldr	r3, [r3, #24]
 80054ac:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80054ae:	4313      	orrs	r3, r2
 80054b0:	b29a      	uxth	r2, r3
 80054b2:	897b      	ldrh	r3, [r7, #10]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80054bc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a0d      	ldr	r2, [pc, #52]	; (80054f8 <HAL_I2S_Init+0x278>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d101      	bne.n	80054cc <HAL_I2S_Init+0x24c>
 80054c8:	4b0c      	ldr	r3, [pc, #48]	; (80054fc <HAL_I2S_Init+0x27c>)
 80054ca:	e001      	b.n	80054d0 <HAL_I2S_Init+0x250>
 80054cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80054d0:	897a      	ldrh	r2, [r7, #10]
 80054d2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80054e2:	2300      	movs	r3, #0
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3720      	adds	r7, #32
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	080055f7 	.word	0x080055f7
 80054f0:	cccccccd 	.word	0xcccccccd
 80054f4:	0800570d 	.word	0x0800570d
 80054f8:	40003800 	.word	0x40003800
 80054fc:	40003400 	.word	0x40003400

08005500 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005508:	bf00      	nop
 800550a:	370c      	adds	r7, #12
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005530:	bf00      	nop
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005548:	881a      	ldrh	r2, [r3, #0]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005554:	1c9a      	adds	r2, r3, #2
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800555e:	b29b      	uxth	r3, r3
 8005560:	3b01      	subs	r3, #1
 8005562:	b29a      	uxth	r2, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800556c:	b29b      	uxth	r3, r3
 800556e:	2b00      	cmp	r3, #0
 8005570:	d10e      	bne.n	8005590 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	685a      	ldr	r2, [r3, #4]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005580:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2201      	movs	r2, #1
 8005586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f7ff ffb8 	bl	8005500 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005590:	bf00      	nop
 8005592:	3708      	adds	r7, #8
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68da      	ldr	r2, [r3, #12]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055aa:	b292      	uxth	r2, r2
 80055ac:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b2:	1c9a      	adds	r2, r3, #2
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80055bc:	b29b      	uxth	r3, r3
 80055be:	3b01      	subs	r3, #1
 80055c0:	b29a      	uxth	r2, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d10e      	bne.n	80055ee <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	685a      	ldr	r2, [r3, #4]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80055de:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f7ff ff93 	bl	8005514 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80055ee:	bf00      	nop
 80055f0:	3708      	adds	r7, #8
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80055f6:	b580      	push	{r7, lr}
 80055f8:	b086      	sub	sp, #24
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800560c:	b2db      	uxtb	r3, r3
 800560e:	2b04      	cmp	r3, #4
 8005610:	d13a      	bne.n	8005688 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	f003 0301 	and.w	r3, r3, #1
 8005618:	2b01      	cmp	r3, #1
 800561a:	d109      	bne.n	8005630 <I2S_IRQHandler+0x3a>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005626:	2b40      	cmp	r3, #64	; 0x40
 8005628:	d102      	bne.n	8005630 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f7ff ffb4 	bl	8005598 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005636:	2b40      	cmp	r3, #64	; 0x40
 8005638:	d126      	bne.n	8005688 <I2S_IRQHandler+0x92>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	f003 0320 	and.w	r3, r3, #32
 8005644:	2b20      	cmp	r3, #32
 8005646:	d11f      	bne.n	8005688 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	685a      	ldr	r2, [r3, #4]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005656:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005658:	2300      	movs	r3, #0
 800565a:	613b      	str	r3, [r7, #16]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	613b      	str	r3, [r7, #16]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	613b      	str	r3, [r7, #16]
 800566c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2201      	movs	r2, #1
 8005672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800567a:	f043 0202 	orr.w	r2, r3, #2
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f7ff ff50 	bl	8005528 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800568e:	b2db      	uxtb	r3, r3
 8005690:	2b03      	cmp	r3, #3
 8005692:	d136      	bne.n	8005702 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	f003 0302 	and.w	r3, r3, #2
 800569a:	2b02      	cmp	r3, #2
 800569c:	d109      	bne.n	80056b2 <I2S_IRQHandler+0xbc>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056a8:	2b80      	cmp	r3, #128	; 0x80
 80056aa:	d102      	bne.n	80056b2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f7ff ff45 	bl	800553c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	f003 0308 	and.w	r3, r3, #8
 80056b8:	2b08      	cmp	r3, #8
 80056ba:	d122      	bne.n	8005702 <I2S_IRQHandler+0x10c>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	f003 0320 	and.w	r3, r3, #32
 80056c6:	2b20      	cmp	r3, #32
 80056c8:	d11b      	bne.n	8005702 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	685a      	ldr	r2, [r3, #4]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80056d8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80056da:	2300      	movs	r3, #0
 80056dc:	60fb      	str	r3, [r7, #12]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	60fb      	str	r3, [r7, #12]
 80056e6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056f4:	f043 0204 	orr.w	r2, r3, #4
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f7ff ff13 	bl	8005528 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005702:	bf00      	nop
 8005704:	3718      	adds	r7, #24
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
	...

0800570c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b088      	sub	sp, #32
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4aa2      	ldr	r2, [pc, #648]	; (80059ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d101      	bne.n	800572a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005726:	4ba2      	ldr	r3, [pc, #648]	; (80059b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005728:	e001      	b.n	800572e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800572a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a9b      	ldr	r2, [pc, #620]	; (80059ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d101      	bne.n	8005748 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005744:	4b9a      	ldr	r3, [pc, #616]	; (80059b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005746:	e001      	b.n	800574c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005748:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005758:	d004      	beq.n	8005764 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	f040 8099 	bne.w	8005896 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	f003 0302 	and.w	r3, r3, #2
 800576a:	2b02      	cmp	r3, #2
 800576c:	d107      	bne.n	800577e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005774:	2b00      	cmp	r3, #0
 8005776:	d002      	beq.n	800577e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 f925 	bl	80059c8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	f003 0301 	and.w	r3, r3, #1
 8005784:	2b01      	cmp	r3, #1
 8005786:	d107      	bne.n	8005798 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800578e:	2b00      	cmp	r3, #0
 8005790:	d002      	beq.n	8005798 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 f9c8 	bl	8005b28 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800579e:	2b40      	cmp	r3, #64	; 0x40
 80057a0:	d13a      	bne.n	8005818 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	f003 0320 	and.w	r3, r3, #32
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d035      	beq.n	8005818 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a7e      	ldr	r2, [pc, #504]	; (80059ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d101      	bne.n	80057ba <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80057b6:	4b7e      	ldr	r3, [pc, #504]	; (80059b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80057b8:	e001      	b.n	80057be <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80057ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80057be:	685a      	ldr	r2, [r3, #4]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4979      	ldr	r1, [pc, #484]	; (80059ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80057c6:	428b      	cmp	r3, r1
 80057c8:	d101      	bne.n	80057ce <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80057ca:	4b79      	ldr	r3, [pc, #484]	; (80059b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80057cc:	e001      	b.n	80057d2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80057ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80057d2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80057d6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	685a      	ldr	r2, [r3, #4]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80057e6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80057e8:	2300      	movs	r3, #0
 80057ea:	60fb      	str	r3, [r7, #12]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	60fb      	str	r3, [r7, #12]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	60fb      	str	r3, [r7, #12]
 80057fc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800580a:	f043 0202 	orr.w	r2, r3, #2
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f7ff fe88 	bl	8005528 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	f003 0308 	and.w	r3, r3, #8
 800581e:	2b08      	cmp	r3, #8
 8005820:	f040 80be 	bne.w	80059a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	f003 0320 	and.w	r3, r3, #32
 800582a:	2b00      	cmp	r3, #0
 800582c:	f000 80b8 	beq.w	80059a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	685a      	ldr	r2, [r3, #4]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800583e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a59      	ldr	r2, [pc, #356]	; (80059ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d101      	bne.n	800584e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800584a:	4b59      	ldr	r3, [pc, #356]	; (80059b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800584c:	e001      	b.n	8005852 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800584e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005852:	685a      	ldr	r2, [r3, #4]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4954      	ldr	r1, [pc, #336]	; (80059ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800585a:	428b      	cmp	r3, r1
 800585c:	d101      	bne.n	8005862 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800585e:	4b54      	ldr	r3, [pc, #336]	; (80059b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005860:	e001      	b.n	8005866 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005862:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005866:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800586a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800586c:	2300      	movs	r3, #0
 800586e:	60bb      	str	r3, [r7, #8]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	60bb      	str	r3, [r7, #8]
 8005878:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2201      	movs	r2, #1
 800587e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005886:	f043 0204 	orr.w	r2, r3, #4
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f7ff fe4a 	bl	8005528 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005894:	e084      	b.n	80059a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	f003 0302 	and.w	r3, r3, #2
 800589c:	2b02      	cmp	r3, #2
 800589e:	d107      	bne.n	80058b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d002      	beq.n	80058b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 f8be 	bl	8005a2c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	f003 0301 	and.w	r3, r3, #1
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d107      	bne.n	80058ca <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d002      	beq.n	80058ca <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 f8fd 	bl	8005ac4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d0:	2b40      	cmp	r3, #64	; 0x40
 80058d2:	d12f      	bne.n	8005934 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	f003 0320 	and.w	r3, r3, #32
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d02a      	beq.n	8005934 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	685a      	ldr	r2, [r3, #4]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80058ec:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a2e      	ldr	r2, [pc, #184]	; (80059ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d101      	bne.n	80058fc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80058f8:	4b2d      	ldr	r3, [pc, #180]	; (80059b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80058fa:	e001      	b.n	8005900 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80058fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005900:	685a      	ldr	r2, [r3, #4]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4929      	ldr	r1, [pc, #164]	; (80059ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005908:	428b      	cmp	r3, r1
 800590a:	d101      	bne.n	8005910 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800590c:	4b28      	ldr	r3, [pc, #160]	; (80059b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800590e:	e001      	b.n	8005914 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005910:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005914:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005918:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005926:	f043 0202 	orr.w	r2, r3, #2
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f7ff fdfa 	bl	8005528 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	f003 0308 	and.w	r3, r3, #8
 800593a:	2b08      	cmp	r3, #8
 800593c:	d131      	bne.n	80059a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	f003 0320 	and.w	r3, r3, #32
 8005944:	2b00      	cmp	r3, #0
 8005946:	d02c      	beq.n	80059a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a17      	ldr	r2, [pc, #92]	; (80059ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d101      	bne.n	8005956 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005952:	4b17      	ldr	r3, [pc, #92]	; (80059b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005954:	e001      	b.n	800595a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005956:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800595a:	685a      	ldr	r2, [r3, #4]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4912      	ldr	r1, [pc, #72]	; (80059ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005962:	428b      	cmp	r3, r1
 8005964:	d101      	bne.n	800596a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8005966:	4b12      	ldr	r3, [pc, #72]	; (80059b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005968:	e001      	b.n	800596e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800596a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800596e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005972:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	685a      	ldr	r2, [r3, #4]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005982:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005990:	f043 0204 	orr.w	r2, r3, #4
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f7ff fdc5 	bl	8005528 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800599e:	e000      	b.n	80059a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80059a0:	bf00      	nop
}
 80059a2:	bf00      	nop
 80059a4:	3720      	adds	r7, #32
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	40003800 	.word	0x40003800
 80059b0:	40003400 	.word	0x40003400

080059b4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80059bc:	bf00      	nop
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d4:	1c99      	adds	r1, r3, #2
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	6251      	str	r1, [r2, #36]	; 0x24
 80059da:	881a      	ldrh	r2, [r3, #0]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	3b01      	subs	r3, #1
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d113      	bne.n	8005a22 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	685a      	ldr	r2, [r3, #4]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005a08:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d106      	bne.n	8005a22 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f7ff ffc9 	bl	80059b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005a22:	bf00      	nop
 8005a24:	3708      	adds	r7, #8
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
	...

08005a2c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a38:	1c99      	adds	r1, r3, #2
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	6251      	str	r1, [r2, #36]	; 0x24
 8005a3e:	8819      	ldrh	r1, [r3, #0]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a1d      	ldr	r2, [pc, #116]	; (8005abc <I2SEx_TxISR_I2SExt+0x90>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d101      	bne.n	8005a4e <I2SEx_TxISR_I2SExt+0x22>
 8005a4a:	4b1d      	ldr	r3, [pc, #116]	; (8005ac0 <I2SEx_TxISR_I2SExt+0x94>)
 8005a4c:	e001      	b.n	8005a52 <I2SEx_TxISR_I2SExt+0x26>
 8005a4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a52:	460a      	mov	r2, r1
 8005a54:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	3b01      	subs	r3, #1
 8005a5e:	b29a      	uxth	r2, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d121      	bne.n	8005ab2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a12      	ldr	r2, [pc, #72]	; (8005abc <I2SEx_TxISR_I2SExt+0x90>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d101      	bne.n	8005a7c <I2SEx_TxISR_I2SExt+0x50>
 8005a78:	4b11      	ldr	r3, [pc, #68]	; (8005ac0 <I2SEx_TxISR_I2SExt+0x94>)
 8005a7a:	e001      	b.n	8005a80 <I2SEx_TxISR_I2SExt+0x54>
 8005a7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a80:	685a      	ldr	r2, [r3, #4]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	490d      	ldr	r1, [pc, #52]	; (8005abc <I2SEx_TxISR_I2SExt+0x90>)
 8005a88:	428b      	cmp	r3, r1
 8005a8a:	d101      	bne.n	8005a90 <I2SEx_TxISR_I2SExt+0x64>
 8005a8c:	4b0c      	ldr	r3, [pc, #48]	; (8005ac0 <I2SEx_TxISR_I2SExt+0x94>)
 8005a8e:	e001      	b.n	8005a94 <I2SEx_TxISR_I2SExt+0x68>
 8005a90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a94:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005a98:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d106      	bne.n	8005ab2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f7ff ff81 	bl	80059b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005ab2:	bf00      	nop
 8005ab4:	3708      	adds	r7, #8
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	40003800 	.word	0x40003800
 8005ac0:	40003400 	.word	0x40003400

08005ac4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68d8      	ldr	r0, [r3, #12]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad6:	1c99      	adds	r1, r3, #2
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005adc:	b282      	uxth	r2, r0
 8005ade:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	3b01      	subs	r3, #1
 8005ae8:	b29a      	uxth	r2, r3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d113      	bne.n	8005b20 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	685a      	ldr	r2, [r3, #4]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005b06:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d106      	bne.n	8005b20 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2201      	movs	r2, #1
 8005b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f7ff ff4a 	bl	80059b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005b20:	bf00      	nop
 8005b22:	3708      	adds	r7, #8
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a20      	ldr	r2, [pc, #128]	; (8005bb8 <I2SEx_RxISR_I2SExt+0x90>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d101      	bne.n	8005b3e <I2SEx_RxISR_I2SExt+0x16>
 8005b3a:	4b20      	ldr	r3, [pc, #128]	; (8005bbc <I2SEx_RxISR_I2SExt+0x94>)
 8005b3c:	e001      	b.n	8005b42 <I2SEx_RxISR_I2SExt+0x1a>
 8005b3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b42:	68d8      	ldr	r0, [r3, #12]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b48:	1c99      	adds	r1, r3, #2
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005b4e:	b282      	uxth	r2, r0
 8005b50:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	3b01      	subs	r3, #1
 8005b5a:	b29a      	uxth	r2, r3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d121      	bne.n	8005bae <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a12      	ldr	r2, [pc, #72]	; (8005bb8 <I2SEx_RxISR_I2SExt+0x90>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d101      	bne.n	8005b78 <I2SEx_RxISR_I2SExt+0x50>
 8005b74:	4b11      	ldr	r3, [pc, #68]	; (8005bbc <I2SEx_RxISR_I2SExt+0x94>)
 8005b76:	e001      	b.n	8005b7c <I2SEx_RxISR_I2SExt+0x54>
 8005b78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b7c:	685a      	ldr	r2, [r3, #4]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	490d      	ldr	r1, [pc, #52]	; (8005bb8 <I2SEx_RxISR_I2SExt+0x90>)
 8005b84:	428b      	cmp	r3, r1
 8005b86:	d101      	bne.n	8005b8c <I2SEx_RxISR_I2SExt+0x64>
 8005b88:	4b0c      	ldr	r3, [pc, #48]	; (8005bbc <I2SEx_RxISR_I2SExt+0x94>)
 8005b8a:	e001      	b.n	8005b90 <I2SEx_RxISR_I2SExt+0x68>
 8005b8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b90:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005b94:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d106      	bne.n	8005bae <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f7ff ff03 	bl	80059b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005bae:	bf00      	nop
 8005bb0:	3708      	adds	r7, #8
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	40003800 	.word	0x40003800
 8005bbc:	40003400 	.word	0x40003400

08005bc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b086      	sub	sp, #24
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d101      	bne.n	8005bd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e264      	b.n	800609c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 0301 	and.w	r3, r3, #1
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d075      	beq.n	8005cca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005bde:	4ba3      	ldr	r3, [pc, #652]	; (8005e6c <HAL_RCC_OscConfig+0x2ac>)
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	f003 030c 	and.w	r3, r3, #12
 8005be6:	2b04      	cmp	r3, #4
 8005be8:	d00c      	beq.n	8005c04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bea:	4ba0      	ldr	r3, [pc, #640]	; (8005e6c <HAL_RCC_OscConfig+0x2ac>)
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005bf2:	2b08      	cmp	r3, #8
 8005bf4:	d112      	bne.n	8005c1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bf6:	4b9d      	ldr	r3, [pc, #628]	; (8005e6c <HAL_RCC_OscConfig+0x2ac>)
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c02:	d10b      	bne.n	8005c1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c04:	4b99      	ldr	r3, [pc, #612]	; (8005e6c <HAL_RCC_OscConfig+0x2ac>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d05b      	beq.n	8005cc8 <HAL_RCC_OscConfig+0x108>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d157      	bne.n	8005cc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e23f      	b.n	800609c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c24:	d106      	bne.n	8005c34 <HAL_RCC_OscConfig+0x74>
 8005c26:	4b91      	ldr	r3, [pc, #580]	; (8005e6c <HAL_RCC_OscConfig+0x2ac>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a90      	ldr	r2, [pc, #576]	; (8005e6c <HAL_RCC_OscConfig+0x2ac>)
 8005c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c30:	6013      	str	r3, [r2, #0]
 8005c32:	e01d      	b.n	8005c70 <HAL_RCC_OscConfig+0xb0>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c3c:	d10c      	bne.n	8005c58 <HAL_RCC_OscConfig+0x98>
 8005c3e:	4b8b      	ldr	r3, [pc, #556]	; (8005e6c <HAL_RCC_OscConfig+0x2ac>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a8a      	ldr	r2, [pc, #552]	; (8005e6c <HAL_RCC_OscConfig+0x2ac>)
 8005c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c48:	6013      	str	r3, [r2, #0]
 8005c4a:	4b88      	ldr	r3, [pc, #544]	; (8005e6c <HAL_RCC_OscConfig+0x2ac>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a87      	ldr	r2, [pc, #540]	; (8005e6c <HAL_RCC_OscConfig+0x2ac>)
 8005c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c54:	6013      	str	r3, [r2, #0]
 8005c56:	e00b      	b.n	8005c70 <HAL_RCC_OscConfig+0xb0>
 8005c58:	4b84      	ldr	r3, [pc, #528]	; (8005e6c <HAL_RCC_OscConfig+0x2ac>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a83      	ldr	r2, [pc, #524]	; (8005e6c <HAL_RCC_OscConfig+0x2ac>)
 8005c5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c62:	6013      	str	r3, [r2, #0]
 8005c64:	4b81      	ldr	r3, [pc, #516]	; (8005e6c <HAL_RCC_OscConfig+0x2ac>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a80      	ldr	r2, [pc, #512]	; (8005e6c <HAL_RCC_OscConfig+0x2ac>)
 8005c6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d013      	beq.n	8005ca0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c78:	f7fc f8d4 	bl	8001e24 <HAL_GetTick>
 8005c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c7e:	e008      	b.n	8005c92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c80:	f7fc f8d0 	bl	8001e24 <HAL_GetTick>
 8005c84:	4602      	mov	r2, r0
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	2b64      	cmp	r3, #100	; 0x64
 8005c8c:	d901      	bls.n	8005c92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e204      	b.n	800609c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c92:	4b76      	ldr	r3, [pc, #472]	; (8005e6c <HAL_RCC_OscConfig+0x2ac>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d0f0      	beq.n	8005c80 <HAL_RCC_OscConfig+0xc0>
 8005c9e:	e014      	b.n	8005cca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ca0:	f7fc f8c0 	bl	8001e24 <HAL_GetTick>
 8005ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ca6:	e008      	b.n	8005cba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ca8:	f7fc f8bc 	bl	8001e24 <HAL_GetTick>
 8005cac:	4602      	mov	r2, r0
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	2b64      	cmp	r3, #100	; 0x64
 8005cb4:	d901      	bls.n	8005cba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e1f0      	b.n	800609c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cba:	4b6c      	ldr	r3, [pc, #432]	; (8005e6c <HAL_RCC_OscConfig+0x2ac>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d1f0      	bne.n	8005ca8 <HAL_RCC_OscConfig+0xe8>
 8005cc6:	e000      	b.n	8005cca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 0302 	and.w	r3, r3, #2
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d063      	beq.n	8005d9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005cd6:	4b65      	ldr	r3, [pc, #404]	; (8005e6c <HAL_RCC_OscConfig+0x2ac>)
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	f003 030c 	and.w	r3, r3, #12
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00b      	beq.n	8005cfa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ce2:	4b62      	ldr	r3, [pc, #392]	; (8005e6c <HAL_RCC_OscConfig+0x2ac>)
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005cea:	2b08      	cmp	r3, #8
 8005cec:	d11c      	bne.n	8005d28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005cee:	4b5f      	ldr	r3, [pc, #380]	; (8005e6c <HAL_RCC_OscConfig+0x2ac>)
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d116      	bne.n	8005d28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cfa:	4b5c      	ldr	r3, [pc, #368]	; (8005e6c <HAL_RCC_OscConfig+0x2ac>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0302 	and.w	r3, r3, #2
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d005      	beq.n	8005d12 <HAL_RCC_OscConfig+0x152>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d001      	beq.n	8005d12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e1c4      	b.n	800609c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d12:	4b56      	ldr	r3, [pc, #344]	; (8005e6c <HAL_RCC_OscConfig+0x2ac>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	00db      	lsls	r3, r3, #3
 8005d20:	4952      	ldr	r1, [pc, #328]	; (8005e6c <HAL_RCC_OscConfig+0x2ac>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d26:	e03a      	b.n	8005d9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d020      	beq.n	8005d72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d30:	4b4f      	ldr	r3, [pc, #316]	; (8005e70 <HAL_RCC_OscConfig+0x2b0>)
 8005d32:	2201      	movs	r2, #1
 8005d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d36:	f7fc f875 	bl	8001e24 <HAL_GetTick>
 8005d3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d3c:	e008      	b.n	8005d50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d3e:	f7fc f871 	bl	8001e24 <HAL_GetTick>
 8005d42:	4602      	mov	r2, r0
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	2b02      	cmp	r3, #2
 8005d4a:	d901      	bls.n	8005d50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	e1a5      	b.n	800609c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d50:	4b46      	ldr	r3, [pc, #280]	; (8005e6c <HAL_RCC_OscConfig+0x2ac>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 0302 	and.w	r3, r3, #2
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d0f0      	beq.n	8005d3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d5c:	4b43      	ldr	r3, [pc, #268]	; (8005e6c <HAL_RCC_OscConfig+0x2ac>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	00db      	lsls	r3, r3, #3
 8005d6a:	4940      	ldr	r1, [pc, #256]	; (8005e6c <HAL_RCC_OscConfig+0x2ac>)
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	600b      	str	r3, [r1, #0]
 8005d70:	e015      	b.n	8005d9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d72:	4b3f      	ldr	r3, [pc, #252]	; (8005e70 <HAL_RCC_OscConfig+0x2b0>)
 8005d74:	2200      	movs	r2, #0
 8005d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d78:	f7fc f854 	bl	8001e24 <HAL_GetTick>
 8005d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d7e:	e008      	b.n	8005d92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d80:	f7fc f850 	bl	8001e24 <HAL_GetTick>
 8005d84:	4602      	mov	r2, r0
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	2b02      	cmp	r3, #2
 8005d8c:	d901      	bls.n	8005d92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005d8e:	2303      	movs	r3, #3
 8005d90:	e184      	b.n	800609c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d92:	4b36      	ldr	r3, [pc, #216]	; (8005e6c <HAL_RCC_OscConfig+0x2ac>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 0302 	and.w	r3, r3, #2
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1f0      	bne.n	8005d80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0308 	and.w	r3, r3, #8
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d030      	beq.n	8005e0c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	695b      	ldr	r3, [r3, #20]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d016      	beq.n	8005de0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005db2:	4b30      	ldr	r3, [pc, #192]	; (8005e74 <HAL_RCC_OscConfig+0x2b4>)
 8005db4:	2201      	movs	r2, #1
 8005db6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005db8:	f7fc f834 	bl	8001e24 <HAL_GetTick>
 8005dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dbe:	e008      	b.n	8005dd2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005dc0:	f7fc f830 	bl	8001e24 <HAL_GetTick>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	2b02      	cmp	r3, #2
 8005dcc:	d901      	bls.n	8005dd2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	e164      	b.n	800609c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dd2:	4b26      	ldr	r3, [pc, #152]	; (8005e6c <HAL_RCC_OscConfig+0x2ac>)
 8005dd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dd6:	f003 0302 	and.w	r3, r3, #2
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d0f0      	beq.n	8005dc0 <HAL_RCC_OscConfig+0x200>
 8005dde:	e015      	b.n	8005e0c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005de0:	4b24      	ldr	r3, [pc, #144]	; (8005e74 <HAL_RCC_OscConfig+0x2b4>)
 8005de2:	2200      	movs	r2, #0
 8005de4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005de6:	f7fc f81d 	bl	8001e24 <HAL_GetTick>
 8005dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005dec:	e008      	b.n	8005e00 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005dee:	f7fc f819 	bl	8001e24 <HAL_GetTick>
 8005df2:	4602      	mov	r2, r0
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d901      	bls.n	8005e00 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	e14d      	b.n	800609c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e00:	4b1a      	ldr	r3, [pc, #104]	; (8005e6c <HAL_RCC_OscConfig+0x2ac>)
 8005e02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e04:	f003 0302 	and.w	r3, r3, #2
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d1f0      	bne.n	8005dee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0304 	and.w	r3, r3, #4
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f000 80a0 	beq.w	8005f5a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e1e:	4b13      	ldr	r3, [pc, #76]	; (8005e6c <HAL_RCC_OscConfig+0x2ac>)
 8005e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d10f      	bne.n	8005e4a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	60bb      	str	r3, [r7, #8]
 8005e2e:	4b0f      	ldr	r3, [pc, #60]	; (8005e6c <HAL_RCC_OscConfig+0x2ac>)
 8005e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e32:	4a0e      	ldr	r2, [pc, #56]	; (8005e6c <HAL_RCC_OscConfig+0x2ac>)
 8005e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e38:	6413      	str	r3, [r2, #64]	; 0x40
 8005e3a:	4b0c      	ldr	r3, [pc, #48]	; (8005e6c <HAL_RCC_OscConfig+0x2ac>)
 8005e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e42:	60bb      	str	r3, [r7, #8]
 8005e44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e46:	2301      	movs	r3, #1
 8005e48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e4a:	4b0b      	ldr	r3, [pc, #44]	; (8005e78 <HAL_RCC_OscConfig+0x2b8>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d121      	bne.n	8005e9a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e56:	4b08      	ldr	r3, [pc, #32]	; (8005e78 <HAL_RCC_OscConfig+0x2b8>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a07      	ldr	r2, [pc, #28]	; (8005e78 <HAL_RCC_OscConfig+0x2b8>)
 8005e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e62:	f7fb ffdf 	bl	8001e24 <HAL_GetTick>
 8005e66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e68:	e011      	b.n	8005e8e <HAL_RCC_OscConfig+0x2ce>
 8005e6a:	bf00      	nop
 8005e6c:	40023800 	.word	0x40023800
 8005e70:	42470000 	.word	0x42470000
 8005e74:	42470e80 	.word	0x42470e80
 8005e78:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e7c:	f7fb ffd2 	bl	8001e24 <HAL_GetTick>
 8005e80:	4602      	mov	r2, r0
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	d901      	bls.n	8005e8e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	e106      	b.n	800609c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e8e:	4b85      	ldr	r3, [pc, #532]	; (80060a4 <HAL_RCC_OscConfig+0x4e4>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d0f0      	beq.n	8005e7c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d106      	bne.n	8005eb0 <HAL_RCC_OscConfig+0x2f0>
 8005ea2:	4b81      	ldr	r3, [pc, #516]	; (80060a8 <HAL_RCC_OscConfig+0x4e8>)
 8005ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ea6:	4a80      	ldr	r2, [pc, #512]	; (80060a8 <HAL_RCC_OscConfig+0x4e8>)
 8005ea8:	f043 0301 	orr.w	r3, r3, #1
 8005eac:	6713      	str	r3, [r2, #112]	; 0x70
 8005eae:	e01c      	b.n	8005eea <HAL_RCC_OscConfig+0x32a>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	2b05      	cmp	r3, #5
 8005eb6:	d10c      	bne.n	8005ed2 <HAL_RCC_OscConfig+0x312>
 8005eb8:	4b7b      	ldr	r3, [pc, #492]	; (80060a8 <HAL_RCC_OscConfig+0x4e8>)
 8005eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ebc:	4a7a      	ldr	r2, [pc, #488]	; (80060a8 <HAL_RCC_OscConfig+0x4e8>)
 8005ebe:	f043 0304 	orr.w	r3, r3, #4
 8005ec2:	6713      	str	r3, [r2, #112]	; 0x70
 8005ec4:	4b78      	ldr	r3, [pc, #480]	; (80060a8 <HAL_RCC_OscConfig+0x4e8>)
 8005ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ec8:	4a77      	ldr	r2, [pc, #476]	; (80060a8 <HAL_RCC_OscConfig+0x4e8>)
 8005eca:	f043 0301 	orr.w	r3, r3, #1
 8005ece:	6713      	str	r3, [r2, #112]	; 0x70
 8005ed0:	e00b      	b.n	8005eea <HAL_RCC_OscConfig+0x32a>
 8005ed2:	4b75      	ldr	r3, [pc, #468]	; (80060a8 <HAL_RCC_OscConfig+0x4e8>)
 8005ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ed6:	4a74      	ldr	r2, [pc, #464]	; (80060a8 <HAL_RCC_OscConfig+0x4e8>)
 8005ed8:	f023 0301 	bic.w	r3, r3, #1
 8005edc:	6713      	str	r3, [r2, #112]	; 0x70
 8005ede:	4b72      	ldr	r3, [pc, #456]	; (80060a8 <HAL_RCC_OscConfig+0x4e8>)
 8005ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ee2:	4a71      	ldr	r2, [pc, #452]	; (80060a8 <HAL_RCC_OscConfig+0x4e8>)
 8005ee4:	f023 0304 	bic.w	r3, r3, #4
 8005ee8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d015      	beq.n	8005f1e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ef2:	f7fb ff97 	bl	8001e24 <HAL_GetTick>
 8005ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ef8:	e00a      	b.n	8005f10 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005efa:	f7fb ff93 	bl	8001e24 <HAL_GetTick>
 8005efe:	4602      	mov	r2, r0
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d901      	bls.n	8005f10 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	e0c5      	b.n	800609c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f10:	4b65      	ldr	r3, [pc, #404]	; (80060a8 <HAL_RCC_OscConfig+0x4e8>)
 8005f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f14:	f003 0302 	and.w	r3, r3, #2
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d0ee      	beq.n	8005efa <HAL_RCC_OscConfig+0x33a>
 8005f1c:	e014      	b.n	8005f48 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f1e:	f7fb ff81 	bl	8001e24 <HAL_GetTick>
 8005f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f24:	e00a      	b.n	8005f3c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f26:	f7fb ff7d 	bl	8001e24 <HAL_GetTick>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d901      	bls.n	8005f3c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	e0af      	b.n	800609c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f3c:	4b5a      	ldr	r3, [pc, #360]	; (80060a8 <HAL_RCC_OscConfig+0x4e8>)
 8005f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f40:	f003 0302 	and.w	r3, r3, #2
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d1ee      	bne.n	8005f26 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f48:	7dfb      	ldrb	r3, [r7, #23]
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d105      	bne.n	8005f5a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f4e:	4b56      	ldr	r3, [pc, #344]	; (80060a8 <HAL_RCC_OscConfig+0x4e8>)
 8005f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f52:	4a55      	ldr	r2, [pc, #340]	; (80060a8 <HAL_RCC_OscConfig+0x4e8>)
 8005f54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f58:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	699b      	ldr	r3, [r3, #24]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	f000 809b 	beq.w	800609a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f64:	4b50      	ldr	r3, [pc, #320]	; (80060a8 <HAL_RCC_OscConfig+0x4e8>)
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	f003 030c 	and.w	r3, r3, #12
 8005f6c:	2b08      	cmp	r3, #8
 8005f6e:	d05c      	beq.n	800602a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	699b      	ldr	r3, [r3, #24]
 8005f74:	2b02      	cmp	r3, #2
 8005f76:	d141      	bne.n	8005ffc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f78:	4b4c      	ldr	r3, [pc, #304]	; (80060ac <HAL_RCC_OscConfig+0x4ec>)
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f7e:	f7fb ff51 	bl	8001e24 <HAL_GetTick>
 8005f82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f84:	e008      	b.n	8005f98 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f86:	f7fb ff4d 	bl	8001e24 <HAL_GetTick>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	d901      	bls.n	8005f98 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005f94:	2303      	movs	r3, #3
 8005f96:	e081      	b.n	800609c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f98:	4b43      	ldr	r3, [pc, #268]	; (80060a8 <HAL_RCC_OscConfig+0x4e8>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d1f0      	bne.n	8005f86 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	69da      	ldr	r2, [r3, #28]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6a1b      	ldr	r3, [r3, #32]
 8005fac:	431a      	orrs	r2, r3
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb2:	019b      	lsls	r3, r3, #6
 8005fb4:	431a      	orrs	r2, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fba:	085b      	lsrs	r3, r3, #1
 8005fbc:	3b01      	subs	r3, #1
 8005fbe:	041b      	lsls	r3, r3, #16
 8005fc0:	431a      	orrs	r2, r3
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc6:	061b      	lsls	r3, r3, #24
 8005fc8:	4937      	ldr	r1, [pc, #220]	; (80060a8 <HAL_RCC_OscConfig+0x4e8>)
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005fce:	4b37      	ldr	r3, [pc, #220]	; (80060ac <HAL_RCC_OscConfig+0x4ec>)
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fd4:	f7fb ff26 	bl	8001e24 <HAL_GetTick>
 8005fd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fda:	e008      	b.n	8005fee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fdc:	f7fb ff22 	bl	8001e24 <HAL_GetTick>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	1ad3      	subs	r3, r2, r3
 8005fe6:	2b02      	cmp	r3, #2
 8005fe8:	d901      	bls.n	8005fee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005fea:	2303      	movs	r3, #3
 8005fec:	e056      	b.n	800609c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fee:	4b2e      	ldr	r3, [pc, #184]	; (80060a8 <HAL_RCC_OscConfig+0x4e8>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d0f0      	beq.n	8005fdc <HAL_RCC_OscConfig+0x41c>
 8005ffa:	e04e      	b.n	800609a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ffc:	4b2b      	ldr	r3, [pc, #172]	; (80060ac <HAL_RCC_OscConfig+0x4ec>)
 8005ffe:	2200      	movs	r2, #0
 8006000:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006002:	f7fb ff0f 	bl	8001e24 <HAL_GetTick>
 8006006:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006008:	e008      	b.n	800601c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800600a:	f7fb ff0b 	bl	8001e24 <HAL_GetTick>
 800600e:	4602      	mov	r2, r0
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	1ad3      	subs	r3, r2, r3
 8006014:	2b02      	cmp	r3, #2
 8006016:	d901      	bls.n	800601c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006018:	2303      	movs	r3, #3
 800601a:	e03f      	b.n	800609c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800601c:	4b22      	ldr	r3, [pc, #136]	; (80060a8 <HAL_RCC_OscConfig+0x4e8>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006024:	2b00      	cmp	r3, #0
 8006026:	d1f0      	bne.n	800600a <HAL_RCC_OscConfig+0x44a>
 8006028:	e037      	b.n	800609a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	699b      	ldr	r3, [r3, #24]
 800602e:	2b01      	cmp	r3, #1
 8006030:	d101      	bne.n	8006036 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e032      	b.n	800609c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006036:	4b1c      	ldr	r3, [pc, #112]	; (80060a8 <HAL_RCC_OscConfig+0x4e8>)
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	699b      	ldr	r3, [r3, #24]
 8006040:	2b01      	cmp	r3, #1
 8006042:	d028      	beq.n	8006096 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800604e:	429a      	cmp	r2, r3
 8006050:	d121      	bne.n	8006096 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800605c:	429a      	cmp	r2, r3
 800605e:	d11a      	bne.n	8006096 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006066:	4013      	ands	r3, r2
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800606c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800606e:	4293      	cmp	r3, r2
 8006070:	d111      	bne.n	8006096 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800607c:	085b      	lsrs	r3, r3, #1
 800607e:	3b01      	subs	r3, #1
 8006080:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006082:	429a      	cmp	r2, r3
 8006084:	d107      	bne.n	8006096 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006090:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006092:	429a      	cmp	r2, r3
 8006094:	d001      	beq.n	800609a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e000      	b.n	800609c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800609a:	2300      	movs	r3, #0
}
 800609c:	4618      	mov	r0, r3
 800609e:	3718      	adds	r7, #24
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	40007000 	.word	0x40007000
 80060a8:	40023800 	.word	0x40023800
 80060ac:	42470060 	.word	0x42470060

080060b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d101      	bne.n	80060c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	e0cc      	b.n	800625e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80060c4:	4b68      	ldr	r3, [pc, #416]	; (8006268 <HAL_RCC_ClockConfig+0x1b8>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 0307 	and.w	r3, r3, #7
 80060cc:	683a      	ldr	r2, [r7, #0]
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d90c      	bls.n	80060ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060d2:	4b65      	ldr	r3, [pc, #404]	; (8006268 <HAL_RCC_ClockConfig+0x1b8>)
 80060d4:	683a      	ldr	r2, [r7, #0]
 80060d6:	b2d2      	uxtb	r2, r2
 80060d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060da:	4b63      	ldr	r3, [pc, #396]	; (8006268 <HAL_RCC_ClockConfig+0x1b8>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0307 	and.w	r3, r3, #7
 80060e2:	683a      	ldr	r2, [r7, #0]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d001      	beq.n	80060ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e0b8      	b.n	800625e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 0302 	and.w	r3, r3, #2
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d020      	beq.n	800613a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 0304 	and.w	r3, r3, #4
 8006100:	2b00      	cmp	r3, #0
 8006102:	d005      	beq.n	8006110 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006104:	4b59      	ldr	r3, [pc, #356]	; (800626c <HAL_RCC_ClockConfig+0x1bc>)
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	4a58      	ldr	r2, [pc, #352]	; (800626c <HAL_RCC_ClockConfig+0x1bc>)
 800610a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800610e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 0308 	and.w	r3, r3, #8
 8006118:	2b00      	cmp	r3, #0
 800611a:	d005      	beq.n	8006128 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800611c:	4b53      	ldr	r3, [pc, #332]	; (800626c <HAL_RCC_ClockConfig+0x1bc>)
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	4a52      	ldr	r2, [pc, #328]	; (800626c <HAL_RCC_ClockConfig+0x1bc>)
 8006122:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006126:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006128:	4b50      	ldr	r3, [pc, #320]	; (800626c <HAL_RCC_ClockConfig+0x1bc>)
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	494d      	ldr	r1, [pc, #308]	; (800626c <HAL_RCC_ClockConfig+0x1bc>)
 8006136:	4313      	orrs	r3, r2
 8006138:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 0301 	and.w	r3, r3, #1
 8006142:	2b00      	cmp	r3, #0
 8006144:	d044      	beq.n	80061d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	2b01      	cmp	r3, #1
 800614c:	d107      	bne.n	800615e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800614e:	4b47      	ldr	r3, [pc, #284]	; (800626c <HAL_RCC_ClockConfig+0x1bc>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006156:	2b00      	cmp	r3, #0
 8006158:	d119      	bne.n	800618e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e07f      	b.n	800625e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	2b02      	cmp	r3, #2
 8006164:	d003      	beq.n	800616e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800616a:	2b03      	cmp	r3, #3
 800616c:	d107      	bne.n	800617e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800616e:	4b3f      	ldr	r3, [pc, #252]	; (800626c <HAL_RCC_ClockConfig+0x1bc>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006176:	2b00      	cmp	r3, #0
 8006178:	d109      	bne.n	800618e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e06f      	b.n	800625e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800617e:	4b3b      	ldr	r3, [pc, #236]	; (800626c <HAL_RCC_ClockConfig+0x1bc>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 0302 	and.w	r3, r3, #2
 8006186:	2b00      	cmp	r3, #0
 8006188:	d101      	bne.n	800618e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	e067      	b.n	800625e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800618e:	4b37      	ldr	r3, [pc, #220]	; (800626c <HAL_RCC_ClockConfig+0x1bc>)
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	f023 0203 	bic.w	r2, r3, #3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	4934      	ldr	r1, [pc, #208]	; (800626c <HAL_RCC_ClockConfig+0x1bc>)
 800619c:	4313      	orrs	r3, r2
 800619e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80061a0:	f7fb fe40 	bl	8001e24 <HAL_GetTick>
 80061a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061a6:	e00a      	b.n	80061be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061a8:	f7fb fe3c 	bl	8001e24 <HAL_GetTick>
 80061ac:	4602      	mov	r2, r0
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d901      	bls.n	80061be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	e04f      	b.n	800625e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061be:	4b2b      	ldr	r3, [pc, #172]	; (800626c <HAL_RCC_ClockConfig+0x1bc>)
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	f003 020c 	and.w	r2, r3, #12
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d1eb      	bne.n	80061a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80061d0:	4b25      	ldr	r3, [pc, #148]	; (8006268 <HAL_RCC_ClockConfig+0x1b8>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0307 	and.w	r3, r3, #7
 80061d8:	683a      	ldr	r2, [r7, #0]
 80061da:	429a      	cmp	r2, r3
 80061dc:	d20c      	bcs.n	80061f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061de:	4b22      	ldr	r3, [pc, #136]	; (8006268 <HAL_RCC_ClockConfig+0x1b8>)
 80061e0:	683a      	ldr	r2, [r7, #0]
 80061e2:	b2d2      	uxtb	r2, r2
 80061e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061e6:	4b20      	ldr	r3, [pc, #128]	; (8006268 <HAL_RCC_ClockConfig+0x1b8>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 0307 	and.w	r3, r3, #7
 80061ee:	683a      	ldr	r2, [r7, #0]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d001      	beq.n	80061f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e032      	b.n	800625e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f003 0304 	and.w	r3, r3, #4
 8006200:	2b00      	cmp	r3, #0
 8006202:	d008      	beq.n	8006216 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006204:	4b19      	ldr	r3, [pc, #100]	; (800626c <HAL_RCC_ClockConfig+0x1bc>)
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	4916      	ldr	r1, [pc, #88]	; (800626c <HAL_RCC_ClockConfig+0x1bc>)
 8006212:	4313      	orrs	r3, r2
 8006214:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f003 0308 	and.w	r3, r3, #8
 800621e:	2b00      	cmp	r3, #0
 8006220:	d009      	beq.n	8006236 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006222:	4b12      	ldr	r3, [pc, #72]	; (800626c <HAL_RCC_ClockConfig+0x1bc>)
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	00db      	lsls	r3, r3, #3
 8006230:	490e      	ldr	r1, [pc, #56]	; (800626c <HAL_RCC_ClockConfig+0x1bc>)
 8006232:	4313      	orrs	r3, r2
 8006234:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006236:	f000 f821 	bl	800627c <HAL_RCC_GetSysClockFreq>
 800623a:	4602      	mov	r2, r0
 800623c:	4b0b      	ldr	r3, [pc, #44]	; (800626c <HAL_RCC_ClockConfig+0x1bc>)
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	091b      	lsrs	r3, r3, #4
 8006242:	f003 030f 	and.w	r3, r3, #15
 8006246:	490a      	ldr	r1, [pc, #40]	; (8006270 <HAL_RCC_ClockConfig+0x1c0>)
 8006248:	5ccb      	ldrb	r3, [r1, r3]
 800624a:	fa22 f303 	lsr.w	r3, r2, r3
 800624e:	4a09      	ldr	r2, [pc, #36]	; (8006274 <HAL_RCC_ClockConfig+0x1c4>)
 8006250:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006252:	4b09      	ldr	r3, [pc, #36]	; (8006278 <HAL_RCC_ClockConfig+0x1c8>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4618      	mov	r0, r3
 8006258:	f7fb fc90 	bl	8001b7c <HAL_InitTick>

  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3710      	adds	r7, #16
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop
 8006268:	40023c00 	.word	0x40023c00
 800626c:	40023800 	.word	0x40023800
 8006270:	0800dc18 	.word	0x0800dc18
 8006274:	20000000 	.word	0x20000000
 8006278:	20000004 	.word	0x20000004

0800627c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800627c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006280:	b084      	sub	sp, #16
 8006282:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006284:	2300      	movs	r3, #0
 8006286:	607b      	str	r3, [r7, #4]
 8006288:	2300      	movs	r3, #0
 800628a:	60fb      	str	r3, [r7, #12]
 800628c:	2300      	movs	r3, #0
 800628e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006290:	2300      	movs	r3, #0
 8006292:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006294:	4b67      	ldr	r3, [pc, #412]	; (8006434 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	f003 030c 	and.w	r3, r3, #12
 800629c:	2b08      	cmp	r3, #8
 800629e:	d00d      	beq.n	80062bc <HAL_RCC_GetSysClockFreq+0x40>
 80062a0:	2b08      	cmp	r3, #8
 80062a2:	f200 80bd 	bhi.w	8006420 <HAL_RCC_GetSysClockFreq+0x1a4>
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d002      	beq.n	80062b0 <HAL_RCC_GetSysClockFreq+0x34>
 80062aa:	2b04      	cmp	r3, #4
 80062ac:	d003      	beq.n	80062b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80062ae:	e0b7      	b.n	8006420 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80062b0:	4b61      	ldr	r3, [pc, #388]	; (8006438 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80062b2:	60bb      	str	r3, [r7, #8]
       break;
 80062b4:	e0b7      	b.n	8006426 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80062b6:	4b61      	ldr	r3, [pc, #388]	; (800643c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80062b8:	60bb      	str	r3, [r7, #8]
      break;
 80062ba:	e0b4      	b.n	8006426 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80062bc:	4b5d      	ldr	r3, [pc, #372]	; (8006434 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062c4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80062c6:	4b5b      	ldr	r3, [pc, #364]	; (8006434 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d04d      	beq.n	800636e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062d2:	4b58      	ldr	r3, [pc, #352]	; (8006434 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	099b      	lsrs	r3, r3, #6
 80062d8:	461a      	mov	r2, r3
 80062da:	f04f 0300 	mov.w	r3, #0
 80062de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80062e2:	f04f 0100 	mov.w	r1, #0
 80062e6:	ea02 0800 	and.w	r8, r2, r0
 80062ea:	ea03 0901 	and.w	r9, r3, r1
 80062ee:	4640      	mov	r0, r8
 80062f0:	4649      	mov	r1, r9
 80062f2:	f04f 0200 	mov.w	r2, #0
 80062f6:	f04f 0300 	mov.w	r3, #0
 80062fa:	014b      	lsls	r3, r1, #5
 80062fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006300:	0142      	lsls	r2, r0, #5
 8006302:	4610      	mov	r0, r2
 8006304:	4619      	mov	r1, r3
 8006306:	ebb0 0008 	subs.w	r0, r0, r8
 800630a:	eb61 0109 	sbc.w	r1, r1, r9
 800630e:	f04f 0200 	mov.w	r2, #0
 8006312:	f04f 0300 	mov.w	r3, #0
 8006316:	018b      	lsls	r3, r1, #6
 8006318:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800631c:	0182      	lsls	r2, r0, #6
 800631e:	1a12      	subs	r2, r2, r0
 8006320:	eb63 0301 	sbc.w	r3, r3, r1
 8006324:	f04f 0000 	mov.w	r0, #0
 8006328:	f04f 0100 	mov.w	r1, #0
 800632c:	00d9      	lsls	r1, r3, #3
 800632e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006332:	00d0      	lsls	r0, r2, #3
 8006334:	4602      	mov	r2, r0
 8006336:	460b      	mov	r3, r1
 8006338:	eb12 0208 	adds.w	r2, r2, r8
 800633c:	eb43 0309 	adc.w	r3, r3, r9
 8006340:	f04f 0000 	mov.w	r0, #0
 8006344:	f04f 0100 	mov.w	r1, #0
 8006348:	0259      	lsls	r1, r3, #9
 800634a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800634e:	0250      	lsls	r0, r2, #9
 8006350:	4602      	mov	r2, r0
 8006352:	460b      	mov	r3, r1
 8006354:	4610      	mov	r0, r2
 8006356:	4619      	mov	r1, r3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	461a      	mov	r2, r3
 800635c:	f04f 0300 	mov.w	r3, #0
 8006360:	f7fa fa94 	bl	800088c <__aeabi_uldivmod>
 8006364:	4602      	mov	r2, r0
 8006366:	460b      	mov	r3, r1
 8006368:	4613      	mov	r3, r2
 800636a:	60fb      	str	r3, [r7, #12]
 800636c:	e04a      	b.n	8006404 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800636e:	4b31      	ldr	r3, [pc, #196]	; (8006434 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	099b      	lsrs	r3, r3, #6
 8006374:	461a      	mov	r2, r3
 8006376:	f04f 0300 	mov.w	r3, #0
 800637a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800637e:	f04f 0100 	mov.w	r1, #0
 8006382:	ea02 0400 	and.w	r4, r2, r0
 8006386:	ea03 0501 	and.w	r5, r3, r1
 800638a:	4620      	mov	r0, r4
 800638c:	4629      	mov	r1, r5
 800638e:	f04f 0200 	mov.w	r2, #0
 8006392:	f04f 0300 	mov.w	r3, #0
 8006396:	014b      	lsls	r3, r1, #5
 8006398:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800639c:	0142      	lsls	r2, r0, #5
 800639e:	4610      	mov	r0, r2
 80063a0:	4619      	mov	r1, r3
 80063a2:	1b00      	subs	r0, r0, r4
 80063a4:	eb61 0105 	sbc.w	r1, r1, r5
 80063a8:	f04f 0200 	mov.w	r2, #0
 80063ac:	f04f 0300 	mov.w	r3, #0
 80063b0:	018b      	lsls	r3, r1, #6
 80063b2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80063b6:	0182      	lsls	r2, r0, #6
 80063b8:	1a12      	subs	r2, r2, r0
 80063ba:	eb63 0301 	sbc.w	r3, r3, r1
 80063be:	f04f 0000 	mov.w	r0, #0
 80063c2:	f04f 0100 	mov.w	r1, #0
 80063c6:	00d9      	lsls	r1, r3, #3
 80063c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80063cc:	00d0      	lsls	r0, r2, #3
 80063ce:	4602      	mov	r2, r0
 80063d0:	460b      	mov	r3, r1
 80063d2:	1912      	adds	r2, r2, r4
 80063d4:	eb45 0303 	adc.w	r3, r5, r3
 80063d8:	f04f 0000 	mov.w	r0, #0
 80063dc:	f04f 0100 	mov.w	r1, #0
 80063e0:	0299      	lsls	r1, r3, #10
 80063e2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80063e6:	0290      	lsls	r0, r2, #10
 80063e8:	4602      	mov	r2, r0
 80063ea:	460b      	mov	r3, r1
 80063ec:	4610      	mov	r0, r2
 80063ee:	4619      	mov	r1, r3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	461a      	mov	r2, r3
 80063f4:	f04f 0300 	mov.w	r3, #0
 80063f8:	f7fa fa48 	bl	800088c <__aeabi_uldivmod>
 80063fc:	4602      	mov	r2, r0
 80063fe:	460b      	mov	r3, r1
 8006400:	4613      	mov	r3, r2
 8006402:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006404:	4b0b      	ldr	r3, [pc, #44]	; (8006434 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	0c1b      	lsrs	r3, r3, #16
 800640a:	f003 0303 	and.w	r3, r3, #3
 800640e:	3301      	adds	r3, #1
 8006410:	005b      	lsls	r3, r3, #1
 8006412:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006414:	68fa      	ldr	r2, [r7, #12]
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	fbb2 f3f3 	udiv	r3, r2, r3
 800641c:	60bb      	str	r3, [r7, #8]
      break;
 800641e:	e002      	b.n	8006426 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006420:	4b05      	ldr	r3, [pc, #20]	; (8006438 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006422:	60bb      	str	r3, [r7, #8]
      break;
 8006424:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006426:	68bb      	ldr	r3, [r7, #8]
}
 8006428:	4618      	mov	r0, r3
 800642a:	3710      	adds	r7, #16
 800642c:	46bd      	mov	sp, r7
 800642e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006432:	bf00      	nop
 8006434:	40023800 	.word	0x40023800
 8006438:	00f42400 	.word	0x00f42400
 800643c:	007a1200 	.word	0x007a1200

08006440 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006440:	b480      	push	{r7}
 8006442:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006444:	4b03      	ldr	r3, [pc, #12]	; (8006454 <HAL_RCC_GetHCLKFreq+0x14>)
 8006446:	681b      	ldr	r3, [r3, #0]
}
 8006448:	4618      	mov	r0, r3
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr
 8006452:	bf00      	nop
 8006454:	20000000 	.word	0x20000000

08006458 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800645c:	f7ff fff0 	bl	8006440 <HAL_RCC_GetHCLKFreq>
 8006460:	4602      	mov	r2, r0
 8006462:	4b05      	ldr	r3, [pc, #20]	; (8006478 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	0a9b      	lsrs	r3, r3, #10
 8006468:	f003 0307 	and.w	r3, r3, #7
 800646c:	4903      	ldr	r1, [pc, #12]	; (800647c <HAL_RCC_GetPCLK1Freq+0x24>)
 800646e:	5ccb      	ldrb	r3, [r1, r3]
 8006470:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006474:	4618      	mov	r0, r3
 8006476:	bd80      	pop	{r7, pc}
 8006478:	40023800 	.word	0x40023800
 800647c:	0800dc28 	.word	0x0800dc28

08006480 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006484:	f7ff ffdc 	bl	8006440 <HAL_RCC_GetHCLKFreq>
 8006488:	4602      	mov	r2, r0
 800648a:	4b05      	ldr	r3, [pc, #20]	; (80064a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	0b5b      	lsrs	r3, r3, #13
 8006490:	f003 0307 	and.w	r3, r3, #7
 8006494:	4903      	ldr	r1, [pc, #12]	; (80064a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006496:	5ccb      	ldrb	r3, [r1, r3]
 8006498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800649c:	4618      	mov	r0, r3
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	40023800 	.word	0x40023800
 80064a4:	0800dc28 	.word	0x0800dc28

080064a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	220f      	movs	r2, #15
 80064b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80064b8:	4b12      	ldr	r3, [pc, #72]	; (8006504 <HAL_RCC_GetClockConfig+0x5c>)
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	f003 0203 	and.w	r2, r3, #3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80064c4:	4b0f      	ldr	r3, [pc, #60]	; (8006504 <HAL_RCC_GetClockConfig+0x5c>)
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80064d0:	4b0c      	ldr	r3, [pc, #48]	; (8006504 <HAL_RCC_GetClockConfig+0x5c>)
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80064dc:	4b09      	ldr	r3, [pc, #36]	; (8006504 <HAL_RCC_GetClockConfig+0x5c>)
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	08db      	lsrs	r3, r3, #3
 80064e2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80064ea:	4b07      	ldr	r3, [pc, #28]	; (8006508 <HAL_RCC_GetClockConfig+0x60>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 0207 	and.w	r2, r3, #7
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	601a      	str	r2, [r3, #0]
}
 80064f6:	bf00      	nop
 80064f8:	370c      	adds	r7, #12
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	40023800 	.word	0x40023800
 8006508:	40023c00 	.word	0x40023c00

0800650c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b086      	sub	sp, #24
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006514:	2300      	movs	r3, #0
 8006516:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006518:	2300      	movs	r3, #0
 800651a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0301 	and.w	r3, r3, #1
 8006524:	2b00      	cmp	r3, #0
 8006526:	d105      	bne.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006530:	2b00      	cmp	r3, #0
 8006532:	d035      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006534:	4b62      	ldr	r3, [pc, #392]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006536:	2200      	movs	r2, #0
 8006538:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800653a:	f7fb fc73 	bl	8001e24 <HAL_GetTick>
 800653e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006540:	e008      	b.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006542:	f7fb fc6f 	bl	8001e24 <HAL_GetTick>
 8006546:	4602      	mov	r2, r0
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	2b02      	cmp	r3, #2
 800654e:	d901      	bls.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006550:	2303      	movs	r3, #3
 8006552:	e0b0      	b.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006554:	4b5b      	ldr	r3, [pc, #364]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800655c:	2b00      	cmp	r3, #0
 800655e:	d1f0      	bne.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	019a      	lsls	r2, r3, #6
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	071b      	lsls	r3, r3, #28
 800656c:	4955      	ldr	r1, [pc, #340]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800656e:	4313      	orrs	r3, r2
 8006570:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006574:	4b52      	ldr	r3, [pc, #328]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006576:	2201      	movs	r2, #1
 8006578:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800657a:	f7fb fc53 	bl	8001e24 <HAL_GetTick>
 800657e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006580:	e008      	b.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006582:	f7fb fc4f 	bl	8001e24 <HAL_GetTick>
 8006586:	4602      	mov	r2, r0
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	1ad3      	subs	r3, r2, r3
 800658c:	2b02      	cmp	r3, #2
 800658e:	d901      	bls.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006590:	2303      	movs	r3, #3
 8006592:	e090      	b.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006594:	4b4b      	ldr	r3, [pc, #300]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800659c:	2b00      	cmp	r3, #0
 800659e:	d0f0      	beq.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 0302 	and.w	r3, r3, #2
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	f000 8083 	beq.w	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80065ae:	2300      	movs	r3, #0
 80065b0:	60fb      	str	r3, [r7, #12]
 80065b2:	4b44      	ldr	r3, [pc, #272]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b6:	4a43      	ldr	r2, [pc, #268]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065bc:	6413      	str	r3, [r2, #64]	; 0x40
 80065be:	4b41      	ldr	r3, [pc, #260]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065c6:	60fb      	str	r3, [r7, #12]
 80065c8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80065ca:	4b3f      	ldr	r3, [pc, #252]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a3e      	ldr	r2, [pc, #248]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80065d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065d4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80065d6:	f7fb fc25 	bl	8001e24 <HAL_GetTick>
 80065da:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80065dc:	e008      	b.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80065de:	f7fb fc21 	bl	8001e24 <HAL_GetTick>
 80065e2:	4602      	mov	r2, r0
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	1ad3      	subs	r3, r2, r3
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	d901      	bls.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80065ec:	2303      	movs	r3, #3
 80065ee:	e062      	b.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80065f0:	4b35      	ldr	r3, [pc, #212]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d0f0      	beq.n	80065de <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80065fc:	4b31      	ldr	r3, [pc, #196]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006600:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006604:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d02f      	beq.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006614:	693a      	ldr	r2, [r7, #16]
 8006616:	429a      	cmp	r2, r3
 8006618:	d028      	beq.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800661a:	4b2a      	ldr	r3, [pc, #168]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800661c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800661e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006622:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006624:	4b29      	ldr	r3, [pc, #164]	; (80066cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006626:	2201      	movs	r2, #1
 8006628:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800662a:	4b28      	ldr	r3, [pc, #160]	; (80066cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800662c:	2200      	movs	r2, #0
 800662e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006630:	4a24      	ldr	r2, [pc, #144]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006636:	4b23      	ldr	r3, [pc, #140]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800663a:	f003 0301 	and.w	r3, r3, #1
 800663e:	2b01      	cmp	r3, #1
 8006640:	d114      	bne.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006642:	f7fb fbef 	bl	8001e24 <HAL_GetTick>
 8006646:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006648:	e00a      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800664a:	f7fb fbeb 	bl	8001e24 <HAL_GetTick>
 800664e:	4602      	mov	r2, r0
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	1ad3      	subs	r3, r2, r3
 8006654:	f241 3288 	movw	r2, #5000	; 0x1388
 8006658:	4293      	cmp	r3, r2
 800665a:	d901      	bls.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800665c:	2303      	movs	r3, #3
 800665e:	e02a      	b.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006660:	4b18      	ldr	r3, [pc, #96]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006664:	f003 0302 	and.w	r3, r3, #2
 8006668:	2b00      	cmp	r3, #0
 800666a:	d0ee      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006674:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006678:	d10d      	bne.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800667a:	4b12      	ldr	r3, [pc, #72]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800668a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800668e:	490d      	ldr	r1, [pc, #52]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006690:	4313      	orrs	r3, r2
 8006692:	608b      	str	r3, [r1, #8]
 8006694:	e005      	b.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006696:	4b0b      	ldr	r3, [pc, #44]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	4a0a      	ldr	r2, [pc, #40]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800669c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80066a0:	6093      	str	r3, [r2, #8]
 80066a2:	4b08      	ldr	r3, [pc, #32]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80066a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066ae:	4905      	ldr	r1, [pc, #20]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80066b0:	4313      	orrs	r3, r2
 80066b2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80066b4:	2300      	movs	r3, #0
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3718      	adds	r7, #24
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	42470068 	.word	0x42470068
 80066c4:	40023800 	.word	0x40023800
 80066c8:	40007000 	.word	0x40007000
 80066cc:	42470e40 	.word	0x42470e40

080066d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b087      	sub	sp, #28
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80066d8:	2300      	movs	r3, #0
 80066da:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80066dc:	2300      	movs	r3, #0
 80066de:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80066e0:	2300      	movs	r3, #0
 80066e2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80066e4:	2300      	movs	r3, #0
 80066e6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d13e      	bne.n	800676c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80066ee:	4b23      	ldr	r3, [pc, #140]	; (800677c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80066f6:	60fb      	str	r3, [r7, #12]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d005      	beq.n	800670a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2b01      	cmp	r3, #1
 8006702:	d12f      	bne.n	8006764 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006704:	4b1e      	ldr	r3, [pc, #120]	; (8006780 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006706:	617b      	str	r3, [r7, #20]
          break;
 8006708:	e02f      	b.n	800676a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800670a:	4b1c      	ldr	r3, [pc, #112]	; (800677c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006712:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006716:	d108      	bne.n	800672a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006718:	4b18      	ldr	r3, [pc, #96]	; (800677c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006720:	4a18      	ldr	r2, [pc, #96]	; (8006784 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006722:	fbb2 f3f3 	udiv	r3, r2, r3
 8006726:	613b      	str	r3, [r7, #16]
 8006728:	e007      	b.n	800673a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800672a:	4b14      	ldr	r3, [pc, #80]	; (800677c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006732:	4a15      	ldr	r2, [pc, #84]	; (8006788 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006734:	fbb2 f3f3 	udiv	r3, r2, r3
 8006738:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800673a:	4b10      	ldr	r3, [pc, #64]	; (800677c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800673c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006740:	099b      	lsrs	r3, r3, #6
 8006742:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	fb02 f303 	mul.w	r3, r2, r3
 800674c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800674e:	4b0b      	ldr	r3, [pc, #44]	; (800677c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006750:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006754:	0f1b      	lsrs	r3, r3, #28
 8006756:	f003 0307 	and.w	r3, r3, #7
 800675a:	68ba      	ldr	r2, [r7, #8]
 800675c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006760:	617b      	str	r3, [r7, #20]
          break;
 8006762:	e002      	b.n	800676a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006764:	2300      	movs	r3, #0
 8006766:	617b      	str	r3, [r7, #20]
          break;
 8006768:	bf00      	nop
        }
      }
      break;
 800676a:	bf00      	nop
    }
  }
  return frequency;
 800676c:	697b      	ldr	r3, [r7, #20]
}
 800676e:	4618      	mov	r0, r3
 8006770:	371c      	adds	r7, #28
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr
 800677a:	bf00      	nop
 800677c:	40023800 	.word	0x40023800
 8006780:	00bb8000 	.word	0x00bb8000
 8006784:	007a1200 	.word	0x007a1200
 8006788:	00f42400 	.word	0x00f42400

0800678c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b082      	sub	sp, #8
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d101      	bne.n	800679e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e07b      	b.n	8006896 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d108      	bne.n	80067b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067ae:	d009      	beq.n	80067c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	61da      	str	r2, [r3, #28]
 80067b6:	e005      	b.n	80067c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d106      	bne.n	80067e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f7fb f91c 	bl	8001a1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2202      	movs	r2, #2
 80067e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067fa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800680c:	431a      	orrs	r2, r3
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006816:	431a      	orrs	r2, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	691b      	ldr	r3, [r3, #16]
 800681c:	f003 0302 	and.w	r3, r3, #2
 8006820:	431a      	orrs	r2, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	695b      	ldr	r3, [r3, #20]
 8006826:	f003 0301 	and.w	r3, r3, #1
 800682a:	431a      	orrs	r2, r3
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	699b      	ldr	r3, [r3, #24]
 8006830:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006834:	431a      	orrs	r2, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	69db      	ldr	r3, [r3, #28]
 800683a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800683e:	431a      	orrs	r2, r3
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6a1b      	ldr	r3, [r3, #32]
 8006844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006848:	ea42 0103 	orr.w	r1, r2, r3
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006850:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	430a      	orrs	r2, r1
 800685a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	699b      	ldr	r3, [r3, #24]
 8006860:	0c1b      	lsrs	r3, r3, #16
 8006862:	f003 0104 	and.w	r1, r3, #4
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686a:	f003 0210 	and.w	r2, r3, #16
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	430a      	orrs	r2, r1
 8006874:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	69da      	ldr	r2, [r3, #28]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006884:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	3708      	adds	r7, #8
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}

0800689e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800689e:	b580      	push	{r7, lr}
 80068a0:	b082      	sub	sp, #8
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d101      	bne.n	80068b0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e041      	b.n	8006934 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d106      	bne.n	80068ca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 f839 	bl	800693c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2202      	movs	r2, #2
 80068ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	3304      	adds	r3, #4
 80068da:	4619      	mov	r1, r3
 80068dc:	4610      	mov	r0, r2
 80068de:	f000 f9d7 	bl	8006c90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2201      	movs	r2, #1
 80068e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2201      	movs	r2, #1
 80068ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2201      	movs	r2, #1
 80068f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2201      	movs	r2, #1
 80068fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2201      	movs	r2, #1
 8006906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2201      	movs	r2, #1
 800690e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2201      	movs	r2, #1
 8006916:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2201      	movs	r2, #1
 800691e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2201      	movs	r2, #1
 8006926:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2201      	movs	r2, #1
 800692e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006932:	2300      	movs	r3, #0
}
 8006934:	4618      	mov	r0, r3
 8006936:	3708      	adds	r7, #8
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006944:	bf00      	nop
 8006946:	370c      	adds	r7, #12
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006950:	b480      	push	{r7}
 8006952:	b085      	sub	sp, #20
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800695e:	b2db      	uxtb	r3, r3
 8006960:	2b01      	cmp	r3, #1
 8006962:	d001      	beq.n	8006968 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	e04e      	b.n	8006a06 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2202      	movs	r2, #2
 800696c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	68da      	ldr	r2, [r3, #12]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f042 0201 	orr.w	r2, r2, #1
 800697e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a23      	ldr	r2, [pc, #140]	; (8006a14 <HAL_TIM_Base_Start_IT+0xc4>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d022      	beq.n	80069d0 <HAL_TIM_Base_Start_IT+0x80>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006992:	d01d      	beq.n	80069d0 <HAL_TIM_Base_Start_IT+0x80>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a1f      	ldr	r2, [pc, #124]	; (8006a18 <HAL_TIM_Base_Start_IT+0xc8>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d018      	beq.n	80069d0 <HAL_TIM_Base_Start_IT+0x80>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a1e      	ldr	r2, [pc, #120]	; (8006a1c <HAL_TIM_Base_Start_IT+0xcc>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d013      	beq.n	80069d0 <HAL_TIM_Base_Start_IT+0x80>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a1c      	ldr	r2, [pc, #112]	; (8006a20 <HAL_TIM_Base_Start_IT+0xd0>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d00e      	beq.n	80069d0 <HAL_TIM_Base_Start_IT+0x80>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a1b      	ldr	r2, [pc, #108]	; (8006a24 <HAL_TIM_Base_Start_IT+0xd4>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d009      	beq.n	80069d0 <HAL_TIM_Base_Start_IT+0x80>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a19      	ldr	r2, [pc, #100]	; (8006a28 <HAL_TIM_Base_Start_IT+0xd8>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d004      	beq.n	80069d0 <HAL_TIM_Base_Start_IT+0x80>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a18      	ldr	r2, [pc, #96]	; (8006a2c <HAL_TIM_Base_Start_IT+0xdc>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d111      	bne.n	80069f4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	f003 0307 	and.w	r3, r3, #7
 80069da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2b06      	cmp	r3, #6
 80069e0:	d010      	beq.n	8006a04 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f042 0201 	orr.w	r2, r2, #1
 80069f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069f2:	e007      	b.n	8006a04 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f042 0201 	orr.w	r2, r2, #1
 8006a02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3714      	adds	r7, #20
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr
 8006a12:	bf00      	nop
 8006a14:	40010000 	.word	0x40010000
 8006a18:	40000400 	.word	0x40000400
 8006a1c:	40000800 	.word	0x40000800
 8006a20:	40000c00 	.word	0x40000c00
 8006a24:	40010400 	.word	0x40010400
 8006a28:	40014000 	.word	0x40014000
 8006a2c:	40001800 	.word	0x40001800

08006a30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b082      	sub	sp, #8
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	f003 0302 	and.w	r3, r3, #2
 8006a42:	2b02      	cmp	r3, #2
 8006a44:	d122      	bne.n	8006a8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	f003 0302 	and.w	r3, r3, #2
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d11b      	bne.n	8006a8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f06f 0202 	mvn.w	r2, #2
 8006a5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2201      	movs	r2, #1
 8006a62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	699b      	ldr	r3, [r3, #24]
 8006a6a:	f003 0303 	and.w	r3, r3, #3
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d003      	beq.n	8006a7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 f8ee 	bl	8006c54 <HAL_TIM_IC_CaptureCallback>
 8006a78:	e005      	b.n	8006a86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 f8e0 	bl	8006c40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 f8f1 	bl	8006c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	691b      	ldr	r3, [r3, #16]
 8006a92:	f003 0304 	and.w	r3, r3, #4
 8006a96:	2b04      	cmp	r3, #4
 8006a98:	d122      	bne.n	8006ae0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	f003 0304 	and.w	r3, r3, #4
 8006aa4:	2b04      	cmp	r3, #4
 8006aa6:	d11b      	bne.n	8006ae0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f06f 0204 	mvn.w	r2, #4
 8006ab0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2202      	movs	r2, #2
 8006ab6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	699b      	ldr	r3, [r3, #24]
 8006abe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d003      	beq.n	8006ace <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 f8c4 	bl	8006c54 <HAL_TIM_IC_CaptureCallback>
 8006acc:	e005      	b.n	8006ada <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 f8b6 	bl	8006c40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 f8c7 	bl	8006c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	f003 0308 	and.w	r3, r3, #8
 8006aea:	2b08      	cmp	r3, #8
 8006aec:	d122      	bne.n	8006b34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	68db      	ldr	r3, [r3, #12]
 8006af4:	f003 0308 	and.w	r3, r3, #8
 8006af8:	2b08      	cmp	r3, #8
 8006afa:	d11b      	bne.n	8006b34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f06f 0208 	mvn.w	r2, #8
 8006b04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2204      	movs	r2, #4
 8006b0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	69db      	ldr	r3, [r3, #28]
 8006b12:	f003 0303 	and.w	r3, r3, #3
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d003      	beq.n	8006b22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 f89a 	bl	8006c54 <HAL_TIM_IC_CaptureCallback>
 8006b20:	e005      	b.n	8006b2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 f88c 	bl	8006c40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 f89d 	bl	8006c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	f003 0310 	and.w	r3, r3, #16
 8006b3e:	2b10      	cmp	r3, #16
 8006b40:	d122      	bne.n	8006b88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	f003 0310 	and.w	r3, r3, #16
 8006b4c:	2b10      	cmp	r3, #16
 8006b4e:	d11b      	bne.n	8006b88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f06f 0210 	mvn.w	r2, #16
 8006b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2208      	movs	r2, #8
 8006b5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	69db      	ldr	r3, [r3, #28]
 8006b66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d003      	beq.n	8006b76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 f870 	bl	8006c54 <HAL_TIM_IC_CaptureCallback>
 8006b74:	e005      	b.n	8006b82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 f862 	bl	8006c40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 f873 	bl	8006c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	f003 0301 	and.w	r3, r3, #1
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d10e      	bne.n	8006bb4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	f003 0301 	and.w	r3, r3, #1
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d107      	bne.n	8006bb4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f06f 0201 	mvn.w	r2, #1
 8006bac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f7fa fc7a 	bl	80014a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bbe:	2b80      	cmp	r3, #128	; 0x80
 8006bc0:	d10e      	bne.n	8006be0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bcc:	2b80      	cmp	r3, #128	; 0x80
 8006bce:	d107      	bne.n	8006be0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 f902 	bl	8006de4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	691b      	ldr	r3, [r3, #16]
 8006be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bea:	2b40      	cmp	r3, #64	; 0x40
 8006bec:	d10e      	bne.n	8006c0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bf8:	2b40      	cmp	r3, #64	; 0x40
 8006bfa:	d107      	bne.n	8006c0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 f838 	bl	8006c7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	691b      	ldr	r3, [r3, #16]
 8006c12:	f003 0320 	and.w	r3, r3, #32
 8006c16:	2b20      	cmp	r3, #32
 8006c18:	d10e      	bne.n	8006c38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	f003 0320 	and.w	r3, r3, #32
 8006c24:	2b20      	cmp	r3, #32
 8006c26:	d107      	bne.n	8006c38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f06f 0220 	mvn.w	r2, #32
 8006c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 f8cc 	bl	8006dd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c38:	bf00      	nop
 8006c3a:	3708      	adds	r7, #8
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c48:	bf00      	nop
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c5c:	bf00      	nop
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c70:	bf00      	nop
 8006c72:	370c      	adds	r7, #12
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c84:	bf00      	nop
 8006c86:	370c      	adds	r7, #12
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr

08006c90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b085      	sub	sp, #20
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a40      	ldr	r2, [pc, #256]	; (8006da4 <TIM_Base_SetConfig+0x114>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d013      	beq.n	8006cd0 <TIM_Base_SetConfig+0x40>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cae:	d00f      	beq.n	8006cd0 <TIM_Base_SetConfig+0x40>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a3d      	ldr	r2, [pc, #244]	; (8006da8 <TIM_Base_SetConfig+0x118>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d00b      	beq.n	8006cd0 <TIM_Base_SetConfig+0x40>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4a3c      	ldr	r2, [pc, #240]	; (8006dac <TIM_Base_SetConfig+0x11c>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d007      	beq.n	8006cd0 <TIM_Base_SetConfig+0x40>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a3b      	ldr	r2, [pc, #236]	; (8006db0 <TIM_Base_SetConfig+0x120>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d003      	beq.n	8006cd0 <TIM_Base_SetConfig+0x40>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4a3a      	ldr	r2, [pc, #232]	; (8006db4 <TIM_Base_SetConfig+0x124>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d108      	bne.n	8006ce2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a2f      	ldr	r2, [pc, #188]	; (8006da4 <TIM_Base_SetConfig+0x114>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d02b      	beq.n	8006d42 <TIM_Base_SetConfig+0xb2>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cf0:	d027      	beq.n	8006d42 <TIM_Base_SetConfig+0xb2>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a2c      	ldr	r2, [pc, #176]	; (8006da8 <TIM_Base_SetConfig+0x118>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d023      	beq.n	8006d42 <TIM_Base_SetConfig+0xb2>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a2b      	ldr	r2, [pc, #172]	; (8006dac <TIM_Base_SetConfig+0x11c>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d01f      	beq.n	8006d42 <TIM_Base_SetConfig+0xb2>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a2a      	ldr	r2, [pc, #168]	; (8006db0 <TIM_Base_SetConfig+0x120>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d01b      	beq.n	8006d42 <TIM_Base_SetConfig+0xb2>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a29      	ldr	r2, [pc, #164]	; (8006db4 <TIM_Base_SetConfig+0x124>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d017      	beq.n	8006d42 <TIM_Base_SetConfig+0xb2>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a28      	ldr	r2, [pc, #160]	; (8006db8 <TIM_Base_SetConfig+0x128>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d013      	beq.n	8006d42 <TIM_Base_SetConfig+0xb2>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a27      	ldr	r2, [pc, #156]	; (8006dbc <TIM_Base_SetConfig+0x12c>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d00f      	beq.n	8006d42 <TIM_Base_SetConfig+0xb2>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a26      	ldr	r2, [pc, #152]	; (8006dc0 <TIM_Base_SetConfig+0x130>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d00b      	beq.n	8006d42 <TIM_Base_SetConfig+0xb2>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4a25      	ldr	r2, [pc, #148]	; (8006dc4 <TIM_Base_SetConfig+0x134>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d007      	beq.n	8006d42 <TIM_Base_SetConfig+0xb2>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4a24      	ldr	r2, [pc, #144]	; (8006dc8 <TIM_Base_SetConfig+0x138>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d003      	beq.n	8006d42 <TIM_Base_SetConfig+0xb2>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4a23      	ldr	r2, [pc, #140]	; (8006dcc <TIM_Base_SetConfig+0x13c>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d108      	bne.n	8006d54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	4313      	orrs	r3, r2
 8006d52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	695b      	ldr	r3, [r3, #20]
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	68fa      	ldr	r2, [r7, #12]
 8006d66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	689a      	ldr	r2, [r3, #8]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4a0a      	ldr	r2, [pc, #40]	; (8006da4 <TIM_Base_SetConfig+0x114>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d003      	beq.n	8006d88 <TIM_Base_SetConfig+0xf8>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4a0c      	ldr	r2, [pc, #48]	; (8006db4 <TIM_Base_SetConfig+0x124>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d103      	bne.n	8006d90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	691a      	ldr	r2, [r3, #16]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2201      	movs	r2, #1
 8006d94:	615a      	str	r2, [r3, #20]
}
 8006d96:	bf00      	nop
 8006d98:	3714      	adds	r7, #20
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr
 8006da2:	bf00      	nop
 8006da4:	40010000 	.word	0x40010000
 8006da8:	40000400 	.word	0x40000400
 8006dac:	40000800 	.word	0x40000800
 8006db0:	40000c00 	.word	0x40000c00
 8006db4:	40010400 	.word	0x40010400
 8006db8:	40014000 	.word	0x40014000
 8006dbc:	40014400 	.word	0x40014400
 8006dc0:	40014800 	.word	0x40014800
 8006dc4:	40001800 	.word	0x40001800
 8006dc8:	40001c00 	.word	0x40001c00
 8006dcc:	40002000 	.word	0x40002000

08006dd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006dd8:	bf00      	nop
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006dec:	bf00      	nop
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b082      	sub	sp, #8
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d101      	bne.n	8006e0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	e03f      	b.n	8006e8a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d106      	bne.n	8006e24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f7fa fe44 	bl	8001aac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2224      	movs	r2, #36	; 0x24
 8006e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	68da      	ldr	r2, [r3, #12]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 f929 	bl	8007094 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	691a      	ldr	r2, [r3, #16]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	695a      	ldr	r2, [r3, #20]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006e60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	68da      	ldr	r2, [r3, #12]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2220      	movs	r2, #32
 8006e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2220      	movs	r2, #32
 8006e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006e88:	2300      	movs	r3, #0
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3708      	adds	r7, #8
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}

08006e92 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e92:	b580      	push	{r7, lr}
 8006e94:	b08a      	sub	sp, #40	; 0x28
 8006e96:	af02      	add	r7, sp, #8
 8006e98:	60f8      	str	r0, [r7, #12]
 8006e9a:	60b9      	str	r1, [r7, #8]
 8006e9c:	603b      	str	r3, [r7, #0]
 8006e9e:	4613      	mov	r3, r2
 8006ea0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	2b20      	cmp	r3, #32
 8006eb0:	d17c      	bne.n	8006fac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d002      	beq.n	8006ebe <HAL_UART_Transmit+0x2c>
 8006eb8:	88fb      	ldrh	r3, [r7, #6]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d101      	bne.n	8006ec2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e075      	b.n	8006fae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d101      	bne.n	8006ed0 <HAL_UART_Transmit+0x3e>
 8006ecc:	2302      	movs	r3, #2
 8006ece:	e06e      	b.n	8006fae <HAL_UART_Transmit+0x11c>
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2200      	movs	r2, #0
 8006edc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2221      	movs	r2, #33	; 0x21
 8006ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ee6:	f7fa ff9d 	bl	8001e24 <HAL_GetTick>
 8006eea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	88fa      	ldrh	r2, [r7, #6]
 8006ef0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	88fa      	ldrh	r2, [r7, #6]
 8006ef6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f00:	d108      	bne.n	8006f14 <HAL_UART_Transmit+0x82>
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	691b      	ldr	r3, [r3, #16]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d104      	bne.n	8006f14 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	61bb      	str	r3, [r7, #24]
 8006f12:	e003      	b.n	8006f1c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006f24:	e02a      	b.n	8006f7c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	9300      	str	r3, [sp, #0]
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	2180      	movs	r1, #128	; 0x80
 8006f30:	68f8      	ldr	r0, [r7, #12]
 8006f32:	f000 f840 	bl	8006fb6 <UART_WaitOnFlagUntilTimeout>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d001      	beq.n	8006f40 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006f3c:	2303      	movs	r3, #3
 8006f3e:	e036      	b.n	8006fae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d10b      	bne.n	8006f5e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	881b      	ldrh	r3, [r3, #0]
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	3302      	adds	r3, #2
 8006f5a:	61bb      	str	r3, [r7, #24]
 8006f5c:	e007      	b.n	8006f6e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f5e:	69fb      	ldr	r3, [r7, #28]
 8006f60:	781a      	ldrb	r2, [r3, #0]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	3b01      	subs	r3, #1
 8006f76:	b29a      	uxth	r2, r3
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d1cf      	bne.n	8006f26 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	9300      	str	r3, [sp, #0]
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	2140      	movs	r1, #64	; 0x40
 8006f90:	68f8      	ldr	r0, [r7, #12]
 8006f92:	f000 f810 	bl	8006fb6 <UART_WaitOnFlagUntilTimeout>
 8006f96:	4603      	mov	r3, r0
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d001      	beq.n	8006fa0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006f9c:	2303      	movs	r3, #3
 8006f9e:	e006      	b.n	8006fae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2220      	movs	r2, #32
 8006fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	e000      	b.n	8006fae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006fac:	2302      	movs	r3, #2
  }
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3720      	adds	r7, #32
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}

08006fb6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006fb6:	b580      	push	{r7, lr}
 8006fb8:	b090      	sub	sp, #64	; 0x40
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	60f8      	str	r0, [r7, #12]
 8006fbe:	60b9      	str	r1, [r7, #8]
 8006fc0:	603b      	str	r3, [r7, #0]
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fc6:	e050      	b.n	800706a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fce:	d04c      	beq.n	800706a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006fd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d007      	beq.n	8006fe6 <UART_WaitOnFlagUntilTimeout+0x30>
 8006fd6:	f7fa ff25 	bl	8001e24 <HAL_GetTick>
 8006fda:	4602      	mov	r2, r0
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	1ad3      	subs	r3, r2, r3
 8006fe0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d241      	bcs.n	800706a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	330c      	adds	r3, #12
 8006fec:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff0:	e853 3f00 	ldrex	r3, [r3]
 8006ff4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	330c      	adds	r3, #12
 8007004:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007006:	637a      	str	r2, [r7, #52]	; 0x34
 8007008:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800700c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800700e:	e841 2300 	strex	r3, r2, [r1]
 8007012:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007016:	2b00      	cmp	r3, #0
 8007018:	d1e5      	bne.n	8006fe6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	3314      	adds	r3, #20
 8007020:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	e853 3f00 	ldrex	r3, [r3]
 8007028:	613b      	str	r3, [r7, #16]
   return(result);
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	f023 0301 	bic.w	r3, r3, #1
 8007030:	63bb      	str	r3, [r7, #56]	; 0x38
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	3314      	adds	r3, #20
 8007038:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800703a:	623a      	str	r2, [r7, #32]
 800703c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703e:	69f9      	ldr	r1, [r7, #28]
 8007040:	6a3a      	ldr	r2, [r7, #32]
 8007042:	e841 2300 	strex	r3, r2, [r1]
 8007046:	61bb      	str	r3, [r7, #24]
   return(result);
 8007048:	69bb      	ldr	r3, [r7, #24]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d1e5      	bne.n	800701a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2220      	movs	r2, #32
 8007052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2220      	movs	r2, #32
 800705a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2200      	movs	r2, #0
 8007062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007066:	2303      	movs	r3, #3
 8007068:	e00f      	b.n	800708a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	4013      	ands	r3, r2
 8007074:	68ba      	ldr	r2, [r7, #8]
 8007076:	429a      	cmp	r2, r3
 8007078:	bf0c      	ite	eq
 800707a:	2301      	moveq	r3, #1
 800707c:	2300      	movne	r3, #0
 800707e:	b2db      	uxtb	r3, r3
 8007080:	461a      	mov	r2, r3
 8007082:	79fb      	ldrb	r3, [r7, #7]
 8007084:	429a      	cmp	r2, r3
 8007086:	d09f      	beq.n	8006fc8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007088:	2300      	movs	r3, #0
}
 800708a:	4618      	mov	r0, r3
 800708c:	3740      	adds	r7, #64	; 0x40
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
	...

08007094 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007098:	b09f      	sub	sp, #124	; 0x7c
 800709a:	af00      	add	r7, sp, #0
 800709c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800709e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	691b      	ldr	r3, [r3, #16]
 80070a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80070a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070aa:	68d9      	ldr	r1, [r3, #12]
 80070ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	ea40 0301 	orr.w	r3, r0, r1
 80070b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80070b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070b8:	689a      	ldr	r2, [r3, #8]
 80070ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	431a      	orrs	r2, r3
 80070c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070c2:	695b      	ldr	r3, [r3, #20]
 80070c4:	431a      	orrs	r2, r3
 80070c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070c8:	69db      	ldr	r3, [r3, #28]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80070ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80070d8:	f021 010c 	bic.w	r1, r1, #12
 80070dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80070e2:	430b      	orrs	r3, r1
 80070e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80070e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	695b      	ldr	r3, [r3, #20]
 80070ec:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80070f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070f2:	6999      	ldr	r1, [r3, #24]
 80070f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	ea40 0301 	orr.w	r3, r0, r1
 80070fc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80070fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	4bc5      	ldr	r3, [pc, #788]	; (8007418 <UART_SetConfig+0x384>)
 8007104:	429a      	cmp	r2, r3
 8007106:	d004      	beq.n	8007112 <UART_SetConfig+0x7e>
 8007108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	4bc3      	ldr	r3, [pc, #780]	; (800741c <UART_SetConfig+0x388>)
 800710e:	429a      	cmp	r2, r3
 8007110:	d103      	bne.n	800711a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007112:	f7ff f9b5 	bl	8006480 <HAL_RCC_GetPCLK2Freq>
 8007116:	6778      	str	r0, [r7, #116]	; 0x74
 8007118:	e002      	b.n	8007120 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800711a:	f7ff f99d 	bl	8006458 <HAL_RCC_GetPCLK1Freq>
 800711e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007120:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007122:	69db      	ldr	r3, [r3, #28]
 8007124:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007128:	f040 80b6 	bne.w	8007298 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800712c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800712e:	461c      	mov	r4, r3
 8007130:	f04f 0500 	mov.w	r5, #0
 8007134:	4622      	mov	r2, r4
 8007136:	462b      	mov	r3, r5
 8007138:	1891      	adds	r1, r2, r2
 800713a:	6439      	str	r1, [r7, #64]	; 0x40
 800713c:	415b      	adcs	r3, r3
 800713e:	647b      	str	r3, [r7, #68]	; 0x44
 8007140:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007144:	1912      	adds	r2, r2, r4
 8007146:	eb45 0303 	adc.w	r3, r5, r3
 800714a:	f04f 0000 	mov.w	r0, #0
 800714e:	f04f 0100 	mov.w	r1, #0
 8007152:	00d9      	lsls	r1, r3, #3
 8007154:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007158:	00d0      	lsls	r0, r2, #3
 800715a:	4602      	mov	r2, r0
 800715c:	460b      	mov	r3, r1
 800715e:	1911      	adds	r1, r2, r4
 8007160:	6639      	str	r1, [r7, #96]	; 0x60
 8007162:	416b      	adcs	r3, r5
 8007164:	667b      	str	r3, [r7, #100]	; 0x64
 8007166:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	461a      	mov	r2, r3
 800716c:	f04f 0300 	mov.w	r3, #0
 8007170:	1891      	adds	r1, r2, r2
 8007172:	63b9      	str	r1, [r7, #56]	; 0x38
 8007174:	415b      	adcs	r3, r3
 8007176:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007178:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800717c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007180:	f7f9 fb84 	bl	800088c <__aeabi_uldivmod>
 8007184:	4602      	mov	r2, r0
 8007186:	460b      	mov	r3, r1
 8007188:	4ba5      	ldr	r3, [pc, #660]	; (8007420 <UART_SetConfig+0x38c>)
 800718a:	fba3 2302 	umull	r2, r3, r3, r2
 800718e:	095b      	lsrs	r3, r3, #5
 8007190:	011e      	lsls	r6, r3, #4
 8007192:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007194:	461c      	mov	r4, r3
 8007196:	f04f 0500 	mov.w	r5, #0
 800719a:	4622      	mov	r2, r4
 800719c:	462b      	mov	r3, r5
 800719e:	1891      	adds	r1, r2, r2
 80071a0:	6339      	str	r1, [r7, #48]	; 0x30
 80071a2:	415b      	adcs	r3, r3
 80071a4:	637b      	str	r3, [r7, #52]	; 0x34
 80071a6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80071aa:	1912      	adds	r2, r2, r4
 80071ac:	eb45 0303 	adc.w	r3, r5, r3
 80071b0:	f04f 0000 	mov.w	r0, #0
 80071b4:	f04f 0100 	mov.w	r1, #0
 80071b8:	00d9      	lsls	r1, r3, #3
 80071ba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80071be:	00d0      	lsls	r0, r2, #3
 80071c0:	4602      	mov	r2, r0
 80071c2:	460b      	mov	r3, r1
 80071c4:	1911      	adds	r1, r2, r4
 80071c6:	65b9      	str	r1, [r7, #88]	; 0x58
 80071c8:	416b      	adcs	r3, r5
 80071ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	461a      	mov	r2, r3
 80071d2:	f04f 0300 	mov.w	r3, #0
 80071d6:	1891      	adds	r1, r2, r2
 80071d8:	62b9      	str	r1, [r7, #40]	; 0x28
 80071da:	415b      	adcs	r3, r3
 80071dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80071e2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80071e6:	f7f9 fb51 	bl	800088c <__aeabi_uldivmod>
 80071ea:	4602      	mov	r2, r0
 80071ec:	460b      	mov	r3, r1
 80071ee:	4b8c      	ldr	r3, [pc, #560]	; (8007420 <UART_SetConfig+0x38c>)
 80071f0:	fba3 1302 	umull	r1, r3, r3, r2
 80071f4:	095b      	lsrs	r3, r3, #5
 80071f6:	2164      	movs	r1, #100	; 0x64
 80071f8:	fb01 f303 	mul.w	r3, r1, r3
 80071fc:	1ad3      	subs	r3, r2, r3
 80071fe:	00db      	lsls	r3, r3, #3
 8007200:	3332      	adds	r3, #50	; 0x32
 8007202:	4a87      	ldr	r2, [pc, #540]	; (8007420 <UART_SetConfig+0x38c>)
 8007204:	fba2 2303 	umull	r2, r3, r2, r3
 8007208:	095b      	lsrs	r3, r3, #5
 800720a:	005b      	lsls	r3, r3, #1
 800720c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007210:	441e      	add	r6, r3
 8007212:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007214:	4618      	mov	r0, r3
 8007216:	f04f 0100 	mov.w	r1, #0
 800721a:	4602      	mov	r2, r0
 800721c:	460b      	mov	r3, r1
 800721e:	1894      	adds	r4, r2, r2
 8007220:	623c      	str	r4, [r7, #32]
 8007222:	415b      	adcs	r3, r3
 8007224:	627b      	str	r3, [r7, #36]	; 0x24
 8007226:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800722a:	1812      	adds	r2, r2, r0
 800722c:	eb41 0303 	adc.w	r3, r1, r3
 8007230:	f04f 0400 	mov.w	r4, #0
 8007234:	f04f 0500 	mov.w	r5, #0
 8007238:	00dd      	lsls	r5, r3, #3
 800723a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800723e:	00d4      	lsls	r4, r2, #3
 8007240:	4622      	mov	r2, r4
 8007242:	462b      	mov	r3, r5
 8007244:	1814      	adds	r4, r2, r0
 8007246:	653c      	str	r4, [r7, #80]	; 0x50
 8007248:	414b      	adcs	r3, r1
 800724a:	657b      	str	r3, [r7, #84]	; 0x54
 800724c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	461a      	mov	r2, r3
 8007252:	f04f 0300 	mov.w	r3, #0
 8007256:	1891      	adds	r1, r2, r2
 8007258:	61b9      	str	r1, [r7, #24]
 800725a:	415b      	adcs	r3, r3
 800725c:	61fb      	str	r3, [r7, #28]
 800725e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007262:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007266:	f7f9 fb11 	bl	800088c <__aeabi_uldivmod>
 800726a:	4602      	mov	r2, r0
 800726c:	460b      	mov	r3, r1
 800726e:	4b6c      	ldr	r3, [pc, #432]	; (8007420 <UART_SetConfig+0x38c>)
 8007270:	fba3 1302 	umull	r1, r3, r3, r2
 8007274:	095b      	lsrs	r3, r3, #5
 8007276:	2164      	movs	r1, #100	; 0x64
 8007278:	fb01 f303 	mul.w	r3, r1, r3
 800727c:	1ad3      	subs	r3, r2, r3
 800727e:	00db      	lsls	r3, r3, #3
 8007280:	3332      	adds	r3, #50	; 0x32
 8007282:	4a67      	ldr	r2, [pc, #412]	; (8007420 <UART_SetConfig+0x38c>)
 8007284:	fba2 2303 	umull	r2, r3, r2, r3
 8007288:	095b      	lsrs	r3, r3, #5
 800728a:	f003 0207 	and.w	r2, r3, #7
 800728e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4432      	add	r2, r6
 8007294:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007296:	e0b9      	b.n	800740c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007298:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800729a:	461c      	mov	r4, r3
 800729c:	f04f 0500 	mov.w	r5, #0
 80072a0:	4622      	mov	r2, r4
 80072a2:	462b      	mov	r3, r5
 80072a4:	1891      	adds	r1, r2, r2
 80072a6:	6139      	str	r1, [r7, #16]
 80072a8:	415b      	adcs	r3, r3
 80072aa:	617b      	str	r3, [r7, #20]
 80072ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80072b0:	1912      	adds	r2, r2, r4
 80072b2:	eb45 0303 	adc.w	r3, r5, r3
 80072b6:	f04f 0000 	mov.w	r0, #0
 80072ba:	f04f 0100 	mov.w	r1, #0
 80072be:	00d9      	lsls	r1, r3, #3
 80072c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80072c4:	00d0      	lsls	r0, r2, #3
 80072c6:	4602      	mov	r2, r0
 80072c8:	460b      	mov	r3, r1
 80072ca:	eb12 0804 	adds.w	r8, r2, r4
 80072ce:	eb43 0905 	adc.w	r9, r3, r5
 80072d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	4618      	mov	r0, r3
 80072d8:	f04f 0100 	mov.w	r1, #0
 80072dc:	f04f 0200 	mov.w	r2, #0
 80072e0:	f04f 0300 	mov.w	r3, #0
 80072e4:	008b      	lsls	r3, r1, #2
 80072e6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80072ea:	0082      	lsls	r2, r0, #2
 80072ec:	4640      	mov	r0, r8
 80072ee:	4649      	mov	r1, r9
 80072f0:	f7f9 facc 	bl	800088c <__aeabi_uldivmod>
 80072f4:	4602      	mov	r2, r0
 80072f6:	460b      	mov	r3, r1
 80072f8:	4b49      	ldr	r3, [pc, #292]	; (8007420 <UART_SetConfig+0x38c>)
 80072fa:	fba3 2302 	umull	r2, r3, r3, r2
 80072fe:	095b      	lsrs	r3, r3, #5
 8007300:	011e      	lsls	r6, r3, #4
 8007302:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007304:	4618      	mov	r0, r3
 8007306:	f04f 0100 	mov.w	r1, #0
 800730a:	4602      	mov	r2, r0
 800730c:	460b      	mov	r3, r1
 800730e:	1894      	adds	r4, r2, r2
 8007310:	60bc      	str	r4, [r7, #8]
 8007312:	415b      	adcs	r3, r3
 8007314:	60fb      	str	r3, [r7, #12]
 8007316:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800731a:	1812      	adds	r2, r2, r0
 800731c:	eb41 0303 	adc.w	r3, r1, r3
 8007320:	f04f 0400 	mov.w	r4, #0
 8007324:	f04f 0500 	mov.w	r5, #0
 8007328:	00dd      	lsls	r5, r3, #3
 800732a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800732e:	00d4      	lsls	r4, r2, #3
 8007330:	4622      	mov	r2, r4
 8007332:	462b      	mov	r3, r5
 8007334:	1814      	adds	r4, r2, r0
 8007336:	64bc      	str	r4, [r7, #72]	; 0x48
 8007338:	414b      	adcs	r3, r1
 800733a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800733c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	4618      	mov	r0, r3
 8007342:	f04f 0100 	mov.w	r1, #0
 8007346:	f04f 0200 	mov.w	r2, #0
 800734a:	f04f 0300 	mov.w	r3, #0
 800734e:	008b      	lsls	r3, r1, #2
 8007350:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007354:	0082      	lsls	r2, r0, #2
 8007356:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800735a:	f7f9 fa97 	bl	800088c <__aeabi_uldivmod>
 800735e:	4602      	mov	r2, r0
 8007360:	460b      	mov	r3, r1
 8007362:	4b2f      	ldr	r3, [pc, #188]	; (8007420 <UART_SetConfig+0x38c>)
 8007364:	fba3 1302 	umull	r1, r3, r3, r2
 8007368:	095b      	lsrs	r3, r3, #5
 800736a:	2164      	movs	r1, #100	; 0x64
 800736c:	fb01 f303 	mul.w	r3, r1, r3
 8007370:	1ad3      	subs	r3, r2, r3
 8007372:	011b      	lsls	r3, r3, #4
 8007374:	3332      	adds	r3, #50	; 0x32
 8007376:	4a2a      	ldr	r2, [pc, #168]	; (8007420 <UART_SetConfig+0x38c>)
 8007378:	fba2 2303 	umull	r2, r3, r2, r3
 800737c:	095b      	lsrs	r3, r3, #5
 800737e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007382:	441e      	add	r6, r3
 8007384:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007386:	4618      	mov	r0, r3
 8007388:	f04f 0100 	mov.w	r1, #0
 800738c:	4602      	mov	r2, r0
 800738e:	460b      	mov	r3, r1
 8007390:	1894      	adds	r4, r2, r2
 8007392:	603c      	str	r4, [r7, #0]
 8007394:	415b      	adcs	r3, r3
 8007396:	607b      	str	r3, [r7, #4]
 8007398:	e9d7 2300 	ldrd	r2, r3, [r7]
 800739c:	1812      	adds	r2, r2, r0
 800739e:	eb41 0303 	adc.w	r3, r1, r3
 80073a2:	f04f 0400 	mov.w	r4, #0
 80073a6:	f04f 0500 	mov.w	r5, #0
 80073aa:	00dd      	lsls	r5, r3, #3
 80073ac:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80073b0:	00d4      	lsls	r4, r2, #3
 80073b2:	4622      	mov	r2, r4
 80073b4:	462b      	mov	r3, r5
 80073b6:	eb12 0a00 	adds.w	sl, r2, r0
 80073ba:	eb43 0b01 	adc.w	fp, r3, r1
 80073be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	4618      	mov	r0, r3
 80073c4:	f04f 0100 	mov.w	r1, #0
 80073c8:	f04f 0200 	mov.w	r2, #0
 80073cc:	f04f 0300 	mov.w	r3, #0
 80073d0:	008b      	lsls	r3, r1, #2
 80073d2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80073d6:	0082      	lsls	r2, r0, #2
 80073d8:	4650      	mov	r0, sl
 80073da:	4659      	mov	r1, fp
 80073dc:	f7f9 fa56 	bl	800088c <__aeabi_uldivmod>
 80073e0:	4602      	mov	r2, r0
 80073e2:	460b      	mov	r3, r1
 80073e4:	4b0e      	ldr	r3, [pc, #56]	; (8007420 <UART_SetConfig+0x38c>)
 80073e6:	fba3 1302 	umull	r1, r3, r3, r2
 80073ea:	095b      	lsrs	r3, r3, #5
 80073ec:	2164      	movs	r1, #100	; 0x64
 80073ee:	fb01 f303 	mul.w	r3, r1, r3
 80073f2:	1ad3      	subs	r3, r2, r3
 80073f4:	011b      	lsls	r3, r3, #4
 80073f6:	3332      	adds	r3, #50	; 0x32
 80073f8:	4a09      	ldr	r2, [pc, #36]	; (8007420 <UART_SetConfig+0x38c>)
 80073fa:	fba2 2303 	umull	r2, r3, r2, r3
 80073fe:	095b      	lsrs	r3, r3, #5
 8007400:	f003 020f 	and.w	r2, r3, #15
 8007404:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4432      	add	r2, r6
 800740a:	609a      	str	r2, [r3, #8]
}
 800740c:	bf00      	nop
 800740e:	377c      	adds	r7, #124	; 0x7c
 8007410:	46bd      	mov	sp, r7
 8007412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007416:	bf00      	nop
 8007418:	40011000 	.word	0x40011000
 800741c:	40011400 	.word	0x40011400
 8007420:	51eb851f 	.word	0x51eb851f

08007424 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007424:	b084      	sub	sp, #16
 8007426:	b580      	push	{r7, lr}
 8007428:	b084      	sub	sp, #16
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
 800742e:	f107 001c 	add.w	r0, r7, #28
 8007432:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007438:	2b01      	cmp	r3, #1
 800743a:	d122      	bne.n	8007482 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007440:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	68db      	ldr	r3, [r3, #12]
 800744c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007450:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007466:	2b01      	cmp	r3, #1
 8007468:	d105      	bne.n	8007476 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 f9a0 	bl	80077bc <USB_CoreReset>
 800747c:	4603      	mov	r3, r0
 800747e:	73fb      	strb	r3, [r7, #15]
 8007480:	e01a      	b.n	80074b8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	68db      	ldr	r3, [r3, #12]
 8007486:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 f994 	bl	80077bc <USB_CoreReset>
 8007494:	4603      	mov	r3, r0
 8007496:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007498:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800749a:	2b00      	cmp	r3, #0
 800749c:	d106      	bne.n	80074ac <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	639a      	str	r2, [r3, #56]	; 0x38
 80074aa:	e005      	b.n	80074b8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80074b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d10b      	bne.n	80074d6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	f043 0206 	orr.w	r2, r3, #6
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	f043 0220 	orr.w	r2, r3, #32
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80074d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3710      	adds	r7, #16
 80074dc:	46bd      	mov	sp, r7
 80074de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80074e2:	b004      	add	sp, #16
 80074e4:	4770      	bx	lr

080074e6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80074e6:	b480      	push	{r7}
 80074e8:	b083      	sub	sp, #12
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	f043 0201 	orr.w	r2, r3, #1
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	370c      	adds	r7, #12
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr

08007508 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	f023 0201 	bic.w	r2, r3, #1
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800751c:	2300      	movs	r3, #0
}
 800751e:	4618      	mov	r0, r3
 8007520:	370c      	adds	r7, #12
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr

0800752a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800752a:	b580      	push	{r7, lr}
 800752c:	b084      	sub	sp, #16
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
 8007532:	460b      	mov	r3, r1
 8007534:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007536:	2300      	movs	r3, #0
 8007538:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	68db      	ldr	r3, [r3, #12]
 800753e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007546:	78fb      	ldrb	r3, [r7, #3]
 8007548:	2b01      	cmp	r3, #1
 800754a:	d115      	bne.n	8007578 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007558:	2001      	movs	r0, #1
 800755a:	f7fa fc6f 	bl	8001e3c <HAL_Delay>
      ms++;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	3301      	adds	r3, #1
 8007562:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 f91a 	bl	800779e <USB_GetMode>
 800756a:	4603      	mov	r3, r0
 800756c:	2b01      	cmp	r3, #1
 800756e:	d01e      	beq.n	80075ae <USB_SetCurrentMode+0x84>
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2b31      	cmp	r3, #49	; 0x31
 8007574:	d9f0      	bls.n	8007558 <USB_SetCurrentMode+0x2e>
 8007576:	e01a      	b.n	80075ae <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007578:	78fb      	ldrb	r3, [r7, #3]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d115      	bne.n	80075aa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	68db      	ldr	r3, [r3, #12]
 8007582:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800758a:	2001      	movs	r0, #1
 800758c:	f7fa fc56 	bl	8001e3c <HAL_Delay>
      ms++;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	3301      	adds	r3, #1
 8007594:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 f901 	bl	800779e <USB_GetMode>
 800759c:	4603      	mov	r3, r0
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d005      	beq.n	80075ae <USB_SetCurrentMode+0x84>
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2b31      	cmp	r3, #49	; 0x31
 80075a6:	d9f0      	bls.n	800758a <USB_SetCurrentMode+0x60>
 80075a8:	e001      	b.n	80075ae <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	e005      	b.n	80075ba <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2b32      	cmp	r3, #50	; 0x32
 80075b2:	d101      	bne.n	80075b8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	e000      	b.n	80075ba <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3710      	adds	r7, #16
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
	...

080075c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b085      	sub	sp, #20
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80075ce:	2300      	movs	r3, #0
 80075d0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	019b      	lsls	r3, r3, #6
 80075d6:	f043 0220 	orr.w	r2, r3, #32
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	3301      	adds	r3, #1
 80075e2:	60fb      	str	r3, [r7, #12]
 80075e4:	4a08      	ldr	r2, [pc, #32]	; (8007608 <USB_FlushTxFifo+0x44>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d901      	bls.n	80075ee <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80075ea:	2303      	movs	r3, #3
 80075ec:	e006      	b.n	80075fc <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	691b      	ldr	r3, [r3, #16]
 80075f2:	f003 0320 	and.w	r3, r3, #32
 80075f6:	2b20      	cmp	r3, #32
 80075f8:	d0f1      	beq.n	80075de <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3714      	adds	r7, #20
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr
 8007608:	00030d40 	.word	0x00030d40

0800760c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800760c:	b480      	push	{r7}
 800760e:	b085      	sub	sp, #20
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007614:	2300      	movs	r3, #0
 8007616:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2210      	movs	r2, #16
 800761c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	3301      	adds	r3, #1
 8007622:	60fb      	str	r3, [r7, #12]
 8007624:	4a08      	ldr	r2, [pc, #32]	; (8007648 <USB_FlushRxFifo+0x3c>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d901      	bls.n	800762e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800762a:	2303      	movs	r3, #3
 800762c:	e006      	b.n	800763c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	691b      	ldr	r3, [r3, #16]
 8007632:	f003 0310 	and.w	r3, r3, #16
 8007636:	2b10      	cmp	r3, #16
 8007638:	d0f1      	beq.n	800761e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800763a:	2300      	movs	r3, #0
}
 800763c:	4618      	mov	r0, r3
 800763e:	3714      	adds	r7, #20
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr
 8007648:	00030d40 	.word	0x00030d40

0800764c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800764c:	b480      	push	{r7}
 800764e:	b089      	sub	sp, #36	; 0x24
 8007650:	af00      	add	r7, sp, #0
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	4611      	mov	r1, r2
 8007658:	461a      	mov	r2, r3
 800765a:	460b      	mov	r3, r1
 800765c:	71fb      	strb	r3, [r7, #7]
 800765e:	4613      	mov	r3, r2
 8007660:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800766a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800766e:	2b00      	cmp	r3, #0
 8007670:	d123      	bne.n	80076ba <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007672:	88bb      	ldrh	r3, [r7, #4]
 8007674:	3303      	adds	r3, #3
 8007676:	089b      	lsrs	r3, r3, #2
 8007678:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800767a:	2300      	movs	r3, #0
 800767c:	61bb      	str	r3, [r7, #24]
 800767e:	e018      	b.n	80076b2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007680:	79fb      	ldrb	r3, [r7, #7]
 8007682:	031a      	lsls	r2, r3, #12
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	4413      	add	r3, r2
 8007688:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800768c:	461a      	mov	r2, r3
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	3301      	adds	r3, #1
 8007698:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800769a:	69fb      	ldr	r3, [r7, #28]
 800769c:	3301      	adds	r3, #1
 800769e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	3301      	adds	r3, #1
 80076a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80076a6:	69fb      	ldr	r3, [r7, #28]
 80076a8:	3301      	adds	r3, #1
 80076aa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80076ac:	69bb      	ldr	r3, [r7, #24]
 80076ae:	3301      	adds	r3, #1
 80076b0:	61bb      	str	r3, [r7, #24]
 80076b2:	69ba      	ldr	r2, [r7, #24]
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d3e2      	bcc.n	8007680 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80076ba:	2300      	movs	r3, #0
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3724      	adds	r7, #36	; 0x24
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr

080076c8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b08b      	sub	sp, #44	; 0x2c
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	60f8      	str	r0, [r7, #12]
 80076d0:	60b9      	str	r1, [r7, #8]
 80076d2:	4613      	mov	r3, r2
 80076d4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80076de:	88fb      	ldrh	r3, [r7, #6]
 80076e0:	089b      	lsrs	r3, r3, #2
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80076e6:	88fb      	ldrh	r3, [r7, #6]
 80076e8:	f003 0303 	and.w	r3, r3, #3
 80076ec:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80076ee:	2300      	movs	r3, #0
 80076f0:	623b      	str	r3, [r7, #32]
 80076f2:	e014      	b.n	800771e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80076f4:	69bb      	ldr	r3, [r7, #24]
 80076f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fe:	601a      	str	r2, [r3, #0]
    pDest++;
 8007700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007702:	3301      	adds	r3, #1
 8007704:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007708:	3301      	adds	r3, #1
 800770a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800770c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770e:	3301      	adds	r3, #1
 8007710:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007714:	3301      	adds	r3, #1
 8007716:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007718:	6a3b      	ldr	r3, [r7, #32]
 800771a:	3301      	adds	r3, #1
 800771c:	623b      	str	r3, [r7, #32]
 800771e:	6a3a      	ldr	r2, [r7, #32]
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	429a      	cmp	r2, r3
 8007724:	d3e6      	bcc.n	80076f4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007726:	8bfb      	ldrh	r3, [r7, #30]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d01e      	beq.n	800776a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800772c:	2300      	movs	r3, #0
 800772e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007730:	69bb      	ldr	r3, [r7, #24]
 8007732:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007736:	461a      	mov	r2, r3
 8007738:	f107 0310 	add.w	r3, r7, #16
 800773c:	6812      	ldr	r2, [r2, #0]
 800773e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007740:	693a      	ldr	r2, [r7, #16]
 8007742:	6a3b      	ldr	r3, [r7, #32]
 8007744:	b2db      	uxtb	r3, r3
 8007746:	00db      	lsls	r3, r3, #3
 8007748:	fa22 f303 	lsr.w	r3, r2, r3
 800774c:	b2da      	uxtb	r2, r3
 800774e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007750:	701a      	strb	r2, [r3, #0]
      i++;
 8007752:	6a3b      	ldr	r3, [r7, #32]
 8007754:	3301      	adds	r3, #1
 8007756:	623b      	str	r3, [r7, #32]
      pDest++;
 8007758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775a:	3301      	adds	r3, #1
 800775c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800775e:	8bfb      	ldrh	r3, [r7, #30]
 8007760:	3b01      	subs	r3, #1
 8007762:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007764:	8bfb      	ldrh	r3, [r7, #30]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d1ea      	bne.n	8007740 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800776a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800776c:	4618      	mov	r0, r3
 800776e:	372c      	adds	r7, #44	; 0x2c
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr

08007778 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007778:	b480      	push	{r7}
 800777a:	b085      	sub	sp, #20
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	695b      	ldr	r3, [r3, #20]
 8007784:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	699b      	ldr	r3, [r3, #24]
 800778a:	68fa      	ldr	r2, [r7, #12]
 800778c:	4013      	ands	r3, r2
 800778e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007790:	68fb      	ldr	r3, [r7, #12]
}
 8007792:	4618      	mov	r0, r3
 8007794:	3714      	adds	r7, #20
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr

0800779e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800779e:	b480      	push	{r7}
 80077a0:	b083      	sub	sp, #12
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	695b      	ldr	r3, [r3, #20]
 80077aa:	f003 0301 	and.w	r3, r3, #1
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	370c      	adds	r7, #12
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr
	...

080077bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80077bc:	b480      	push	{r7}
 80077be:	b085      	sub	sp, #20
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80077c4:	2300      	movs	r3, #0
 80077c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	3301      	adds	r3, #1
 80077cc:	60fb      	str	r3, [r7, #12]
 80077ce:	4a13      	ldr	r2, [pc, #76]	; (800781c <USB_CoreReset+0x60>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d901      	bls.n	80077d8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80077d4:	2303      	movs	r3, #3
 80077d6:	e01a      	b.n	800780e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	691b      	ldr	r3, [r3, #16]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	daf3      	bge.n	80077c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80077e0:	2300      	movs	r3, #0
 80077e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	691b      	ldr	r3, [r3, #16]
 80077e8:	f043 0201 	orr.w	r2, r3, #1
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	3301      	adds	r3, #1
 80077f4:	60fb      	str	r3, [r7, #12]
 80077f6:	4a09      	ldr	r2, [pc, #36]	; (800781c <USB_CoreReset+0x60>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d901      	bls.n	8007800 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80077fc:	2303      	movs	r3, #3
 80077fe:	e006      	b.n	800780e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	691b      	ldr	r3, [r3, #16]
 8007804:	f003 0301 	and.w	r3, r3, #1
 8007808:	2b01      	cmp	r3, #1
 800780a:	d0f1      	beq.n	80077f0 <USB_CoreReset+0x34>

  return HAL_OK;
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	3714      	adds	r7, #20
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr
 800781a:	bf00      	nop
 800781c:	00030d40 	.word	0x00030d40

08007820 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007820:	b084      	sub	sp, #16
 8007822:	b580      	push	{r7, lr}
 8007824:	b084      	sub	sp, #16
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
 800782a:	f107 001c 	add.w	r0, r7, #28
 800782e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800783c:	461a      	mov	r2, r3
 800783e:	2300      	movs	r3, #0
 8007840:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007846:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007852:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800785e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800786a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800786e:	2b00      	cmp	r3, #0
 8007870:	d018      	beq.n	80078a4 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007874:	2b01      	cmp	r3, #1
 8007876:	d10a      	bne.n	800788e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	68ba      	ldr	r2, [r7, #8]
 8007882:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007886:	f043 0304 	orr.w	r3, r3, #4
 800788a:	6013      	str	r3, [r2, #0]
 800788c:	e014      	b.n	80078b8 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	68ba      	ldr	r2, [r7, #8]
 8007898:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800789c:	f023 0304 	bic.w	r3, r3, #4
 80078a0:	6013      	str	r3, [r2, #0]
 80078a2:	e009      	b.n	80078b8 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	68ba      	ldr	r2, [r7, #8]
 80078ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80078b2:	f023 0304 	bic.w	r3, r3, #4
 80078b6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80078b8:	2110      	movs	r1, #16
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f7ff fe82 	bl	80075c4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f7ff fea3 	bl	800760c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80078c6:	2300      	movs	r3, #0
 80078c8:	60fb      	str	r3, [r7, #12]
 80078ca:	e015      	b.n	80078f8 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	015a      	lsls	r2, r3, #5
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	4413      	add	r3, r2
 80078d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078d8:	461a      	mov	r2, r3
 80078da:	f04f 33ff 	mov.w	r3, #4294967295
 80078de:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	015a      	lsls	r2, r3, #5
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	4413      	add	r3, r2
 80078e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078ec:	461a      	mov	r2, r3
 80078ee:	2300      	movs	r3, #0
 80078f0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	3301      	adds	r3, #1
 80078f6:	60fb      	str	r3, [r7, #12]
 80078f8:	6a3b      	ldr	r3, [r7, #32]
 80078fa:	68fa      	ldr	r2, [r7, #12]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d3e5      	bcc.n	80078cc <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2200      	movs	r2, #0
 8007904:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f04f 32ff 	mov.w	r2, #4294967295
 800790c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007916:	2b00      	cmp	r3, #0
 8007918:	d00b      	beq.n	8007932 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007920:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	4a13      	ldr	r2, [pc, #76]	; (8007974 <USB_HostInit+0x154>)
 8007926:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	4a13      	ldr	r2, [pc, #76]	; (8007978 <USB_HostInit+0x158>)
 800792c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007930:	e009      	b.n	8007946 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2280      	movs	r2, #128	; 0x80
 8007936:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	4a10      	ldr	r2, [pc, #64]	; (800797c <USB_HostInit+0x15c>)
 800793c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	4a0f      	ldr	r2, [pc, #60]	; (8007980 <USB_HostInit+0x160>)
 8007942:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007948:	2b00      	cmp	r3, #0
 800794a:	d105      	bne.n	8007958 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	699b      	ldr	r3, [r3, #24]
 8007950:	f043 0210 	orr.w	r2, r3, #16
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	699a      	ldr	r2, [r3, #24]
 800795c:	4b09      	ldr	r3, [pc, #36]	; (8007984 <USB_HostInit+0x164>)
 800795e:	4313      	orrs	r3, r2
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8007964:	2300      	movs	r3, #0
}
 8007966:	4618      	mov	r0, r3
 8007968:	3710      	adds	r7, #16
 800796a:	46bd      	mov	sp, r7
 800796c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007970:	b004      	add	sp, #16
 8007972:	4770      	bx	lr
 8007974:	01000200 	.word	0x01000200
 8007978:	00e00300 	.word	0x00e00300
 800797c:	00600080 	.word	0x00600080
 8007980:	004000e0 	.word	0x004000e0
 8007984:	a3200008 	.word	0xa3200008

08007988 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007988:	b480      	push	{r7}
 800798a:	b085      	sub	sp, #20
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	460b      	mov	r3, r1
 8007992:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	68fa      	ldr	r2, [r7, #12]
 80079a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80079a6:	f023 0303 	bic.w	r3, r3, #3
 80079aa:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	78fb      	ldrb	r3, [r7, #3]
 80079b6:	f003 0303 	and.w	r3, r3, #3
 80079ba:	68f9      	ldr	r1, [r7, #12]
 80079bc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80079c0:	4313      	orrs	r3, r2
 80079c2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80079c4:	78fb      	ldrb	r3, [r7, #3]
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d107      	bne.n	80079da <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80079d0:	461a      	mov	r2, r3
 80079d2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80079d6:	6053      	str	r3, [r2, #4]
 80079d8:	e009      	b.n	80079ee <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80079da:	78fb      	ldrb	r3, [r7, #3]
 80079dc:	2b02      	cmp	r3, #2
 80079de:	d106      	bne.n	80079ee <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80079e6:	461a      	mov	r2, r3
 80079e8:	f241 7370 	movw	r3, #6000	; 0x1770
 80079ec:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3714      	adds	r7, #20
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr

080079fc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b084      	sub	sp, #16
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007a1c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	68fa      	ldr	r2, [r7, #12]
 8007a22:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a2a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007a2c:	2064      	movs	r0, #100	; 0x64
 8007a2e:	f7fa fa05 	bl	8001e3c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	68fa      	ldr	r2, [r7, #12]
 8007a36:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007a3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a3e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007a40:	200a      	movs	r0, #10
 8007a42:	f7fa f9fb 	bl	8001e3c <HAL_Delay>

  return HAL_OK;
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3710      	adds	r7, #16
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b085      	sub	sp, #20
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	460b      	mov	r3, r1
 8007a5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007a60:	2300      	movs	r3, #0
 8007a62:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007a74:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d109      	bne.n	8007a94 <USB_DriveVbus+0x44>
 8007a80:	78fb      	ldrb	r3, [r7, #3]
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	d106      	bne.n	8007a94 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	68fa      	ldr	r2, [r7, #12]
 8007a8a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007a8e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007a92:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a9e:	d109      	bne.n	8007ab4 <USB_DriveVbus+0x64>
 8007aa0:	78fb      	ldrb	r3, [r7, #3]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d106      	bne.n	8007ab4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	68fa      	ldr	r2, [r7, #12]
 8007aaa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007aae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ab2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007ab4:	2300      	movs	r3, #0
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3714      	adds	r7, #20
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr

08007ac2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007ac2:	b480      	push	{r7}
 8007ac4:	b085      	sub	sp, #20
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	0c5b      	lsrs	r3, r3, #17
 8007ae0:	f003 0303 	and.w	r3, r3, #3
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3714      	adds	r7, #20
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr

08007af0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b085      	sub	sp, #20
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	b29b      	uxth	r3, r3
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3714      	adds	r7, #20
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr
	...

08007b14 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b088      	sub	sp, #32
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	4608      	mov	r0, r1
 8007b1e:	4611      	mov	r1, r2
 8007b20:	461a      	mov	r2, r3
 8007b22:	4603      	mov	r3, r0
 8007b24:	70fb      	strb	r3, [r7, #3]
 8007b26:	460b      	mov	r3, r1
 8007b28:	70bb      	strb	r3, [r7, #2]
 8007b2a:	4613      	mov	r3, r2
 8007b2c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007b36:	78fb      	ldrb	r3, [r7, #3]
 8007b38:	015a      	lsls	r2, r3, #5
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	4413      	add	r3, r2
 8007b3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b42:	461a      	mov	r2, r3
 8007b44:	f04f 33ff 	mov.w	r3, #4294967295
 8007b48:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007b4a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007b4e:	2b03      	cmp	r3, #3
 8007b50:	d87e      	bhi.n	8007c50 <USB_HC_Init+0x13c>
 8007b52:	a201      	add	r2, pc, #4	; (adr r2, 8007b58 <USB_HC_Init+0x44>)
 8007b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b58:	08007b69 	.word	0x08007b69
 8007b5c:	08007c13 	.word	0x08007c13
 8007b60:	08007b69 	.word	0x08007b69
 8007b64:	08007bd5 	.word	0x08007bd5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007b68:	78fb      	ldrb	r3, [r7, #3]
 8007b6a:	015a      	lsls	r2, r3, #5
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	4413      	add	r3, r2
 8007b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b74:	461a      	mov	r2, r3
 8007b76:	f240 439d 	movw	r3, #1181	; 0x49d
 8007b7a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007b7c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	da10      	bge.n	8007ba6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007b84:	78fb      	ldrb	r3, [r7, #3]
 8007b86:	015a      	lsls	r2, r3, #5
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	4413      	add	r3, r2
 8007b8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	78fa      	ldrb	r2, [r7, #3]
 8007b94:	0151      	lsls	r1, r2, #5
 8007b96:	693a      	ldr	r2, [r7, #16]
 8007b98:	440a      	add	r2, r1
 8007b9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ba2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007ba4:	e057      	b.n	8007c56 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d051      	beq.n	8007c56 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007bb2:	78fb      	ldrb	r3, [r7, #3]
 8007bb4:	015a      	lsls	r2, r3, #5
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	4413      	add	r3, r2
 8007bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bbe:	68db      	ldr	r3, [r3, #12]
 8007bc0:	78fa      	ldrb	r2, [r7, #3]
 8007bc2:	0151      	lsls	r1, r2, #5
 8007bc4:	693a      	ldr	r2, [r7, #16]
 8007bc6:	440a      	add	r2, r1
 8007bc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007bcc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007bd0:	60d3      	str	r3, [r2, #12]
      break;
 8007bd2:	e040      	b.n	8007c56 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007bd4:	78fb      	ldrb	r3, [r7, #3]
 8007bd6:	015a      	lsls	r2, r3, #5
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	4413      	add	r3, r2
 8007bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007be0:	461a      	mov	r2, r3
 8007be2:	f240 639d 	movw	r3, #1693	; 0x69d
 8007be6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007be8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	da34      	bge.n	8007c5a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007bf0:	78fb      	ldrb	r3, [r7, #3]
 8007bf2:	015a      	lsls	r2, r3, #5
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	4413      	add	r3, r2
 8007bf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	78fa      	ldrb	r2, [r7, #3]
 8007c00:	0151      	lsls	r1, r2, #5
 8007c02:	693a      	ldr	r2, [r7, #16]
 8007c04:	440a      	add	r2, r1
 8007c06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c0e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007c10:	e023      	b.n	8007c5a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007c12:	78fb      	ldrb	r3, [r7, #3]
 8007c14:	015a      	lsls	r2, r3, #5
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	4413      	add	r3, r2
 8007c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c1e:	461a      	mov	r2, r3
 8007c20:	f240 2325 	movw	r3, #549	; 0x225
 8007c24:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007c26:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	da17      	bge.n	8007c5e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007c2e:	78fb      	ldrb	r3, [r7, #3]
 8007c30:	015a      	lsls	r2, r3, #5
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	4413      	add	r3, r2
 8007c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c3a:	68db      	ldr	r3, [r3, #12]
 8007c3c:	78fa      	ldrb	r2, [r7, #3]
 8007c3e:	0151      	lsls	r1, r2, #5
 8007c40:	693a      	ldr	r2, [r7, #16]
 8007c42:	440a      	add	r2, r1
 8007c44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c48:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007c4c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007c4e:	e006      	b.n	8007c5e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007c50:	2301      	movs	r3, #1
 8007c52:	77fb      	strb	r3, [r7, #31]
      break;
 8007c54:	e004      	b.n	8007c60 <USB_HC_Init+0x14c>
      break;
 8007c56:	bf00      	nop
 8007c58:	e002      	b.n	8007c60 <USB_HC_Init+0x14c>
      break;
 8007c5a:	bf00      	nop
 8007c5c:	e000      	b.n	8007c60 <USB_HC_Init+0x14c>
      break;
 8007c5e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c66:	699a      	ldr	r2, [r3, #24]
 8007c68:	78fb      	ldrb	r3, [r7, #3]
 8007c6a:	f003 030f 	and.w	r3, r3, #15
 8007c6e:	2101      	movs	r1, #1
 8007c70:	fa01 f303 	lsl.w	r3, r1, r3
 8007c74:	6939      	ldr	r1, [r7, #16]
 8007c76:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	699b      	ldr	r3, [r3, #24]
 8007c82:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007c8a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	da03      	bge.n	8007c9a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007c92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c96:	61bb      	str	r3, [r7, #24]
 8007c98:	e001      	b.n	8007c9e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f7ff ff0f 	bl	8007ac2 <USB_GetHostSpeed>
 8007ca4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007ca6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007caa:	2b02      	cmp	r3, #2
 8007cac:	d106      	bne.n	8007cbc <USB_HC_Init+0x1a8>
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2b02      	cmp	r3, #2
 8007cb2:	d003      	beq.n	8007cbc <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007cb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007cb8:	617b      	str	r3, [r7, #20]
 8007cba:	e001      	b.n	8007cc0 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007cc0:	787b      	ldrb	r3, [r7, #1]
 8007cc2:	059b      	lsls	r3, r3, #22
 8007cc4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007cc8:	78bb      	ldrb	r3, [r7, #2]
 8007cca:	02db      	lsls	r3, r3, #11
 8007ccc:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007cd0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007cd2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007cd6:	049b      	lsls	r3, r3, #18
 8007cd8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007cdc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007cde:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007ce0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007ce4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007ce6:	69bb      	ldr	r3, [r7, #24]
 8007ce8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007cea:	78fb      	ldrb	r3, [r7, #3]
 8007cec:	0159      	lsls	r1, r3, #5
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	440b      	add	r3, r1
 8007cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cf6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007cfc:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8007cfe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007d02:	2b03      	cmp	r3, #3
 8007d04:	d10f      	bne.n	8007d26 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8007d06:	78fb      	ldrb	r3, [r7, #3]
 8007d08:	015a      	lsls	r2, r3, #5
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	4413      	add	r3, r2
 8007d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	78fa      	ldrb	r2, [r7, #3]
 8007d16:	0151      	lsls	r1, r2, #5
 8007d18:	693a      	ldr	r2, [r7, #16]
 8007d1a:	440a      	add	r2, r1
 8007d1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007d24:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007d26:	7ffb      	ldrb	r3, [r7, #31]
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3720      	adds	r7, #32
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b08c      	sub	sp, #48	; 0x30
 8007d34:	af02      	add	r7, sp, #8
 8007d36:	60f8      	str	r0, [r7, #12]
 8007d38:	60b9      	str	r1, [r7, #8]
 8007d3a:	4613      	mov	r3, r2
 8007d3c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	785b      	ldrb	r3, [r3, #1]
 8007d46:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007d48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d4c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d02d      	beq.n	8007db6 <USB_HC_StartXfer+0x86>
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	791b      	ldrb	r3, [r3, #4]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d129      	bne.n	8007db6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007d62:	79fb      	ldrb	r3, [r7, #7]
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d117      	bne.n	8007d98 <USB_HC_StartXfer+0x68>
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	79db      	ldrb	r3, [r3, #7]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d003      	beq.n	8007d78 <USB_HC_StartXfer+0x48>
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	79db      	ldrb	r3, [r3, #7]
 8007d74:	2b02      	cmp	r3, #2
 8007d76:	d10f      	bne.n	8007d98 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007d78:	69fb      	ldr	r3, [r7, #28]
 8007d7a:	015a      	lsls	r2, r3, #5
 8007d7c:	6a3b      	ldr	r3, [r7, #32]
 8007d7e:	4413      	add	r3, r2
 8007d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d84:	68db      	ldr	r3, [r3, #12]
 8007d86:	69fa      	ldr	r2, [r7, #28]
 8007d88:	0151      	lsls	r1, r2, #5
 8007d8a:	6a3a      	ldr	r2, [r7, #32]
 8007d8c:	440a      	add	r2, r1
 8007d8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d96:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007d98:	79fb      	ldrb	r3, [r7, #7]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d10b      	bne.n	8007db6 <USB_HC_StartXfer+0x86>
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	795b      	ldrb	r3, [r3, #5]
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	d107      	bne.n	8007db6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	785b      	ldrb	r3, [r3, #1]
 8007daa:	4619      	mov	r1, r3
 8007dac:	68f8      	ldr	r0, [r7, #12]
 8007dae:	f000 fa2f 	bl	8008210 <USB_DoPing>
      return HAL_OK;
 8007db2:	2300      	movs	r3, #0
 8007db4:	e0f8      	b.n	8007fa8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	695b      	ldr	r3, [r3, #20]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d018      	beq.n	8007df0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	695b      	ldr	r3, [r3, #20]
 8007dc2:	68ba      	ldr	r2, [r7, #8]
 8007dc4:	8912      	ldrh	r2, [r2, #8]
 8007dc6:	4413      	add	r3, r2
 8007dc8:	3b01      	subs	r3, #1
 8007dca:	68ba      	ldr	r2, [r7, #8]
 8007dcc:	8912      	ldrh	r2, [r2, #8]
 8007dce:	fbb3 f3f2 	udiv	r3, r3, r2
 8007dd2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007dd4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007dd6:	8b7b      	ldrh	r3, [r7, #26]
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d90b      	bls.n	8007df4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007ddc:	8b7b      	ldrh	r3, [r7, #26]
 8007dde:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007de0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007de2:	68ba      	ldr	r2, [r7, #8]
 8007de4:	8912      	ldrh	r2, [r2, #8]
 8007de6:	fb02 f203 	mul.w	r2, r2, r3
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	611a      	str	r2, [r3, #16]
 8007dee:	e001      	b.n	8007df4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007df0:	2301      	movs	r3, #1
 8007df2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	78db      	ldrb	r3, [r3, #3]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d007      	beq.n	8007e0c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007dfc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007dfe:	68ba      	ldr	r2, [r7, #8]
 8007e00:	8912      	ldrh	r2, [r2, #8]
 8007e02:	fb02 f203 	mul.w	r2, r2, r3
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	611a      	str	r2, [r3, #16]
 8007e0a:	e003      	b.n	8007e14 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	695a      	ldr	r2, [r3, #20]
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	691b      	ldr	r3, [r3, #16]
 8007e18:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007e1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007e1e:	04d9      	lsls	r1, r3, #19
 8007e20:	4b63      	ldr	r3, [pc, #396]	; (8007fb0 <USB_HC_StartXfer+0x280>)
 8007e22:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007e24:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	7a9b      	ldrb	r3, [r3, #10]
 8007e2a:	075b      	lsls	r3, r3, #29
 8007e2c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007e30:	69f9      	ldr	r1, [r7, #28]
 8007e32:	0148      	lsls	r0, r1, #5
 8007e34:	6a39      	ldr	r1, [r7, #32]
 8007e36:	4401      	add	r1, r0
 8007e38:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007e3c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007e3e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007e40:	79fb      	ldrb	r3, [r7, #7]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d009      	beq.n	8007e5a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	68d9      	ldr	r1, [r3, #12]
 8007e4a:	69fb      	ldr	r3, [r7, #28]
 8007e4c:	015a      	lsls	r2, r3, #5
 8007e4e:	6a3b      	ldr	r3, [r7, #32]
 8007e50:	4413      	add	r3, r2
 8007e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e56:	460a      	mov	r2, r1
 8007e58:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007e5a:	6a3b      	ldr	r3, [r7, #32]
 8007e5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	f003 0301 	and.w	r3, r3, #1
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	bf0c      	ite	eq
 8007e6a:	2301      	moveq	r3, #1
 8007e6c:	2300      	movne	r3, #0
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007e72:	69fb      	ldr	r3, [r7, #28]
 8007e74:	015a      	lsls	r2, r3, #5
 8007e76:	6a3b      	ldr	r3, [r7, #32]
 8007e78:	4413      	add	r3, r2
 8007e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	69fa      	ldr	r2, [r7, #28]
 8007e82:	0151      	lsls	r1, r2, #5
 8007e84:	6a3a      	ldr	r2, [r7, #32]
 8007e86:	440a      	add	r2, r1
 8007e88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e8c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007e90:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007e92:	69fb      	ldr	r3, [r7, #28]
 8007e94:	015a      	lsls	r2, r3, #5
 8007e96:	6a3b      	ldr	r3, [r7, #32]
 8007e98:	4413      	add	r3, r2
 8007e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e9e:	681a      	ldr	r2, [r3, #0]
 8007ea0:	7e7b      	ldrb	r3, [r7, #25]
 8007ea2:	075b      	lsls	r3, r3, #29
 8007ea4:	69f9      	ldr	r1, [r7, #28]
 8007ea6:	0148      	lsls	r0, r1, #5
 8007ea8:	6a39      	ldr	r1, [r7, #32]
 8007eaa:	4401      	add	r1, r0
 8007eac:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007eb4:	69fb      	ldr	r3, [r7, #28]
 8007eb6:	015a      	lsls	r2, r3, #5
 8007eb8:	6a3b      	ldr	r3, [r7, #32]
 8007eba:	4413      	add	r3, r2
 8007ebc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007eca:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	78db      	ldrb	r3, [r3, #3]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d004      	beq.n	8007ede <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007eda:	613b      	str	r3, [r7, #16]
 8007edc:	e003      	b.n	8007ee6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007ee4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007eec:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007eee:	69fb      	ldr	r3, [r7, #28]
 8007ef0:	015a      	lsls	r2, r3, #5
 8007ef2:	6a3b      	ldr	r3, [r7, #32]
 8007ef4:	4413      	add	r3, r2
 8007ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007efa:	461a      	mov	r2, r3
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007f00:	79fb      	ldrb	r3, [r7, #7]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d001      	beq.n	8007f0a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007f06:	2300      	movs	r3, #0
 8007f08:	e04e      	b.n	8007fa8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	78db      	ldrb	r3, [r3, #3]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d149      	bne.n	8007fa6 <USB_HC_StartXfer+0x276>
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	695b      	ldr	r3, [r3, #20]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d045      	beq.n	8007fa6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	79db      	ldrb	r3, [r3, #7]
 8007f1e:	2b03      	cmp	r3, #3
 8007f20:	d830      	bhi.n	8007f84 <USB_HC_StartXfer+0x254>
 8007f22:	a201      	add	r2, pc, #4	; (adr r2, 8007f28 <USB_HC_StartXfer+0x1f8>)
 8007f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f28:	08007f39 	.word	0x08007f39
 8007f2c:	08007f5d 	.word	0x08007f5d
 8007f30:	08007f39 	.word	0x08007f39
 8007f34:	08007f5d 	.word	0x08007f5d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	695b      	ldr	r3, [r3, #20]
 8007f3c:	3303      	adds	r3, #3
 8007f3e:	089b      	lsrs	r3, r3, #2
 8007f40:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007f42:	8afa      	ldrh	r2, [r7, #22]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d91c      	bls.n	8007f88 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	699b      	ldr	r3, [r3, #24]
 8007f52:	f043 0220 	orr.w	r2, r3, #32
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	619a      	str	r2, [r3, #24]
        }
        break;
 8007f5a:	e015      	b.n	8007f88 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	695b      	ldr	r3, [r3, #20]
 8007f60:	3303      	adds	r3, #3
 8007f62:	089b      	lsrs	r3, r3, #2
 8007f64:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007f66:	8afa      	ldrh	r2, [r7, #22]
 8007f68:	6a3b      	ldr	r3, [r7, #32]
 8007f6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f6e:	691b      	ldr	r3, [r3, #16]
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d90a      	bls.n	8007f8c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	699b      	ldr	r3, [r3, #24]
 8007f7a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	619a      	str	r2, [r3, #24]
        }
        break;
 8007f82:	e003      	b.n	8007f8c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007f84:	bf00      	nop
 8007f86:	e002      	b.n	8007f8e <USB_HC_StartXfer+0x25e>
        break;
 8007f88:	bf00      	nop
 8007f8a:	e000      	b.n	8007f8e <USB_HC_StartXfer+0x25e>
        break;
 8007f8c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	68d9      	ldr	r1, [r3, #12]
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	785a      	ldrb	r2, [r3, #1]
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	695b      	ldr	r3, [r3, #20]
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	2000      	movs	r0, #0
 8007f9e:	9000      	str	r0, [sp, #0]
 8007fa0:	68f8      	ldr	r0, [r7, #12]
 8007fa2:	f7ff fb53 	bl	800764c <USB_WritePacket>
  }

  return HAL_OK;
 8007fa6:	2300      	movs	r3, #0
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3728      	adds	r7, #40	; 0x28
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}
 8007fb0:	1ff80000 	.word	0x1ff80000

08007fb4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b085      	sub	sp, #20
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007fc6:	695b      	ldr	r3, [r3, #20]
 8007fc8:	b29b      	uxth	r3, r3
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3714      	adds	r7, #20
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr

08007fd6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007fd6:	b480      	push	{r7}
 8007fd8:	b089      	sub	sp, #36	; 0x24
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
 8007fde:	460b      	mov	r3, r1
 8007fe0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8007fe6:	78fb      	ldrb	r3, [r7, #3]
 8007fe8:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8007fea:	2300      	movs	r3, #0
 8007fec:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	015a      	lsls	r2, r3, #5
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	4413      	add	r3, r2
 8007ff6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	0c9b      	lsrs	r3, r3, #18
 8007ffe:	f003 0303 	and.w	r3, r3, #3
 8008002:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	015a      	lsls	r2, r3, #5
 8008008:	69bb      	ldr	r3, [r7, #24]
 800800a:	4413      	add	r3, r2
 800800c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	0fdb      	lsrs	r3, r3, #31
 8008014:	f003 0301 	and.w	r3, r3, #1
 8008018:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	689b      	ldr	r3, [r3, #8]
 800801e:	f003 0320 	and.w	r3, r3, #32
 8008022:	2b20      	cmp	r3, #32
 8008024:	d104      	bne.n	8008030 <USB_HC_Halt+0x5a>
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d101      	bne.n	8008030 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800802c:	2300      	movs	r3, #0
 800802e:	e0e8      	b.n	8008202 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d002      	beq.n	800803c <USB_HC_Halt+0x66>
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	2b02      	cmp	r3, #2
 800803a:	d173      	bne.n	8008124 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	015a      	lsls	r2, r3, #5
 8008040:	69bb      	ldr	r3, [r7, #24]
 8008042:	4413      	add	r3, r2
 8008044:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	697a      	ldr	r2, [r7, #20]
 800804c:	0151      	lsls	r1, r2, #5
 800804e:	69ba      	ldr	r2, [r7, #24]
 8008050:	440a      	add	r2, r1
 8008052:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008056:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800805a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	f003 0320 	and.w	r3, r3, #32
 8008064:	2b00      	cmp	r3, #0
 8008066:	f040 80cb 	bne.w	8008200 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800806e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008072:	2b00      	cmp	r3, #0
 8008074:	d143      	bne.n	80080fe <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	015a      	lsls	r2, r3, #5
 800807a:	69bb      	ldr	r3, [r7, #24]
 800807c:	4413      	add	r3, r2
 800807e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	697a      	ldr	r2, [r7, #20]
 8008086:	0151      	lsls	r1, r2, #5
 8008088:	69ba      	ldr	r2, [r7, #24]
 800808a:	440a      	add	r2, r1
 800808c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008090:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008094:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	015a      	lsls	r2, r3, #5
 800809a:	69bb      	ldr	r3, [r7, #24]
 800809c:	4413      	add	r3, r2
 800809e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	697a      	ldr	r2, [r7, #20]
 80080a6:	0151      	lsls	r1, r2, #5
 80080a8:	69ba      	ldr	r2, [r7, #24]
 80080aa:	440a      	add	r2, r1
 80080ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80080b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80080b4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	015a      	lsls	r2, r3, #5
 80080ba:	69bb      	ldr	r3, [r7, #24]
 80080bc:	4413      	add	r3, r2
 80080be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	697a      	ldr	r2, [r7, #20]
 80080c6:	0151      	lsls	r1, r2, #5
 80080c8:	69ba      	ldr	r2, [r7, #24]
 80080ca:	440a      	add	r2, r1
 80080cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80080d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80080d4:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80080d6:	69fb      	ldr	r3, [r7, #28]
 80080d8:	3301      	adds	r3, #1
 80080da:	61fb      	str	r3, [r7, #28]
 80080dc:	69fb      	ldr	r3, [r7, #28]
 80080de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80080e2:	d81d      	bhi.n	8008120 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	015a      	lsls	r2, r3, #5
 80080e8:	69bb      	ldr	r3, [r7, #24]
 80080ea:	4413      	add	r3, r2
 80080ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80080f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080fa:	d0ec      	beq.n	80080d6 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80080fc:	e080      	b.n	8008200 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	015a      	lsls	r2, r3, #5
 8008102:	69bb      	ldr	r3, [r7, #24]
 8008104:	4413      	add	r3, r2
 8008106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	697a      	ldr	r2, [r7, #20]
 800810e:	0151      	lsls	r1, r2, #5
 8008110:	69ba      	ldr	r2, [r7, #24]
 8008112:	440a      	add	r2, r1
 8008114:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008118:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800811c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800811e:	e06f      	b.n	8008200 <USB_HC_Halt+0x22a>
            break;
 8008120:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008122:	e06d      	b.n	8008200 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	015a      	lsls	r2, r3, #5
 8008128:	69bb      	ldr	r3, [r7, #24]
 800812a:	4413      	add	r3, r2
 800812c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	697a      	ldr	r2, [r7, #20]
 8008134:	0151      	lsls	r1, r2, #5
 8008136:	69ba      	ldr	r2, [r7, #24]
 8008138:	440a      	add	r2, r1
 800813a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800813e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008142:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008144:	69bb      	ldr	r3, [r7, #24]
 8008146:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800814a:	691b      	ldr	r3, [r3, #16]
 800814c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008150:	2b00      	cmp	r3, #0
 8008152:	d143      	bne.n	80081dc <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	015a      	lsls	r2, r3, #5
 8008158:	69bb      	ldr	r3, [r7, #24]
 800815a:	4413      	add	r3, r2
 800815c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	697a      	ldr	r2, [r7, #20]
 8008164:	0151      	lsls	r1, r2, #5
 8008166:	69ba      	ldr	r2, [r7, #24]
 8008168:	440a      	add	r2, r1
 800816a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800816e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008172:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	015a      	lsls	r2, r3, #5
 8008178:	69bb      	ldr	r3, [r7, #24]
 800817a:	4413      	add	r3, r2
 800817c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	697a      	ldr	r2, [r7, #20]
 8008184:	0151      	lsls	r1, r2, #5
 8008186:	69ba      	ldr	r2, [r7, #24]
 8008188:	440a      	add	r2, r1
 800818a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800818e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008192:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	015a      	lsls	r2, r3, #5
 8008198:	69bb      	ldr	r3, [r7, #24]
 800819a:	4413      	add	r3, r2
 800819c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	697a      	ldr	r2, [r7, #20]
 80081a4:	0151      	lsls	r1, r2, #5
 80081a6:	69ba      	ldr	r2, [r7, #24]
 80081a8:	440a      	add	r2, r1
 80081aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80081ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80081b2:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80081b4:	69fb      	ldr	r3, [r7, #28]
 80081b6:	3301      	adds	r3, #1
 80081b8:	61fb      	str	r3, [r7, #28]
 80081ba:	69fb      	ldr	r3, [r7, #28]
 80081bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80081c0:	d81d      	bhi.n	80081fe <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	015a      	lsls	r2, r3, #5
 80081c6:	69bb      	ldr	r3, [r7, #24]
 80081c8:	4413      	add	r3, r2
 80081ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081d8:	d0ec      	beq.n	80081b4 <USB_HC_Halt+0x1de>
 80081da:	e011      	b.n	8008200 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	015a      	lsls	r2, r3, #5
 80081e0:	69bb      	ldr	r3, [r7, #24]
 80081e2:	4413      	add	r3, r2
 80081e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	697a      	ldr	r2, [r7, #20]
 80081ec:	0151      	lsls	r1, r2, #5
 80081ee:	69ba      	ldr	r2, [r7, #24]
 80081f0:	440a      	add	r2, r1
 80081f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80081f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80081fa:	6013      	str	r3, [r2, #0]
 80081fc:	e000      	b.n	8008200 <USB_HC_Halt+0x22a>
          break;
 80081fe:	bf00      	nop
    }
  }

  return HAL_OK;
 8008200:	2300      	movs	r3, #0
}
 8008202:	4618      	mov	r0, r3
 8008204:	3724      	adds	r7, #36	; 0x24
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr
	...

08008210 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008210:	b480      	push	{r7}
 8008212:	b087      	sub	sp, #28
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	460b      	mov	r3, r1
 800821a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008220:	78fb      	ldrb	r3, [r7, #3]
 8008222:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008224:	2301      	movs	r3, #1
 8008226:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	04da      	lsls	r2, r3, #19
 800822c:	4b15      	ldr	r3, [pc, #84]	; (8008284 <USB_DoPing+0x74>)
 800822e:	4013      	ands	r3, r2
 8008230:	693a      	ldr	r2, [r7, #16]
 8008232:	0151      	lsls	r1, r2, #5
 8008234:	697a      	ldr	r2, [r7, #20]
 8008236:	440a      	add	r2, r1
 8008238:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800823c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008240:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	015a      	lsls	r2, r3, #5
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	4413      	add	r3, r2
 800824a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008258:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008260:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	015a      	lsls	r2, r3, #5
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	4413      	add	r3, r2
 800826a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800826e:	461a      	mov	r2, r3
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008274:	2300      	movs	r3, #0
}
 8008276:	4618      	mov	r0, r3
 8008278:	371c      	adds	r7, #28
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr
 8008282:	bf00      	nop
 8008284:	1ff80000 	.word	0x1ff80000

08008288 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b086      	sub	sp, #24
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008294:	2300      	movs	r3, #0
 8008296:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f7ff f935 	bl	8007508 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800829e:	2110      	movs	r1, #16
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f7ff f98f 	bl	80075c4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f7ff f9b0 	bl	800760c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80082ac:	2300      	movs	r3, #0
 80082ae:	613b      	str	r3, [r7, #16]
 80082b0:	e01f      	b.n	80082f2 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	015a      	lsls	r2, r3, #5
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	4413      	add	r3, r2
 80082ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80082c8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80082d0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80082d8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	015a      	lsls	r2, r3, #5
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	4413      	add	r3, r2
 80082e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082e6:	461a      	mov	r2, r3
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	3301      	adds	r3, #1
 80082f0:	613b      	str	r3, [r7, #16]
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	2b0f      	cmp	r3, #15
 80082f6:	d9dc      	bls.n	80082b2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80082f8:	2300      	movs	r3, #0
 80082fa:	613b      	str	r3, [r7, #16]
 80082fc:	e034      	b.n	8008368 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	015a      	lsls	r2, r3, #5
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	4413      	add	r3, r2
 8008306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008314:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800831c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008324:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	015a      	lsls	r2, r3, #5
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	4413      	add	r3, r2
 800832e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008332:	461a      	mov	r2, r3
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	3301      	adds	r3, #1
 800833c:	617b      	str	r3, [r7, #20]
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008344:	d80c      	bhi.n	8008360 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	015a      	lsls	r2, r3, #5
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	4413      	add	r3, r2
 800834e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008358:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800835c:	d0ec      	beq.n	8008338 <USB_StopHost+0xb0>
 800835e:	e000      	b.n	8008362 <USB_StopHost+0xda>
        break;
 8008360:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	3301      	adds	r3, #1
 8008366:	613b      	str	r3, [r7, #16]
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	2b0f      	cmp	r3, #15
 800836c:	d9c7      	bls.n	80082fe <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008374:	461a      	mov	r2, r3
 8008376:	f04f 33ff 	mov.w	r3, #4294967295
 800837a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f04f 32ff 	mov.w	r2, #4294967295
 8008382:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f7ff f8ae 	bl	80074e6 <USB_EnableGlobalInt>

  return HAL_OK;
 800838a:	2300      	movs	r3, #0
}
 800838c:	4618      	mov	r0, r3
 800838e:	3718      	adds	r7, #24
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}

08008394 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008394:	b590      	push	{r4, r7, lr}
 8008396:	b089      	sub	sp, #36	; 0x24
 8008398:	af04      	add	r7, sp, #16
 800839a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800839c:	2301      	movs	r3, #1
 800839e:	2202      	movs	r2, #2
 80083a0:	2102      	movs	r1, #2
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 fcb8 	bl	8008d18 <USBH_FindInterface>
 80083a8:	4603      	mov	r3, r0
 80083aa:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80083ac:	7bfb      	ldrb	r3, [r7, #15]
 80083ae:	2bff      	cmp	r3, #255	; 0xff
 80083b0:	d002      	beq.n	80083b8 <USBH_CDC_InterfaceInit+0x24>
 80083b2:	7bfb      	ldrb	r3, [r7, #15]
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d901      	bls.n	80083bc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80083b8:	2302      	movs	r3, #2
 80083ba:	e13d      	b.n	8008638 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80083bc:	7bfb      	ldrb	r3, [r7, #15]
 80083be:	4619      	mov	r1, r3
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f000 fc8d 	bl	8008ce0 <USBH_SelectInterface>
 80083c6:	4603      	mov	r3, r0
 80083c8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80083ca:	7bbb      	ldrb	r3, [r7, #14]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d001      	beq.n	80083d4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80083d0:	2302      	movs	r3, #2
 80083d2:	e131      	b.n	8008638 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80083da:	2050      	movs	r0, #80	; 0x50
 80083dc:	f004 fef4 	bl	800d1c8 <malloc>
 80083e0:	4603      	mov	r3, r0
 80083e2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80083ea:	69db      	ldr	r3, [r3, #28]
 80083ec:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d101      	bne.n	80083f8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80083f4:	2302      	movs	r3, #2
 80083f6:	e11f      	b.n	8008638 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80083f8:	2250      	movs	r2, #80	; 0x50
 80083fa:	2100      	movs	r1, #0
 80083fc:	68b8      	ldr	r0, [r7, #8]
 80083fe:	f004 ff01 	bl	800d204 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008402:	7bfb      	ldrb	r3, [r7, #15]
 8008404:	687a      	ldr	r2, [r7, #4]
 8008406:	211a      	movs	r1, #26
 8008408:	fb01 f303 	mul.w	r3, r1, r3
 800840c:	4413      	add	r3, r2
 800840e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	b25b      	sxtb	r3, r3
 8008416:	2b00      	cmp	r3, #0
 8008418:	da15      	bge.n	8008446 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800841a:	7bfb      	ldrb	r3, [r7, #15]
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	211a      	movs	r1, #26
 8008420:	fb01 f303 	mul.w	r3, r1, r3
 8008424:	4413      	add	r3, r2
 8008426:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800842a:	781a      	ldrb	r2, [r3, #0]
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008430:	7bfb      	ldrb	r3, [r7, #15]
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	211a      	movs	r1, #26
 8008436:	fb01 f303 	mul.w	r3, r1, r3
 800843a:	4413      	add	r3, r2
 800843c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008440:	881a      	ldrh	r2, [r3, #0]
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	785b      	ldrb	r3, [r3, #1]
 800844a:	4619      	mov	r1, r3
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f002 f890 	bl	800a572 <USBH_AllocPipe>
 8008452:	4603      	mov	r3, r0
 8008454:	461a      	mov	r2, r3
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	7819      	ldrb	r1, [r3, #0]
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	7858      	ldrb	r0, [r3, #1]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800846e:	68ba      	ldr	r2, [r7, #8]
 8008470:	8952      	ldrh	r2, [r2, #10]
 8008472:	9202      	str	r2, [sp, #8]
 8008474:	2203      	movs	r2, #3
 8008476:	9201      	str	r2, [sp, #4]
 8008478:	9300      	str	r3, [sp, #0]
 800847a:	4623      	mov	r3, r4
 800847c:	4602      	mov	r2, r0
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f002 f848 	bl	800a514 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	2200      	movs	r2, #0
 800848a:	4619      	mov	r1, r3
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f004 fdeb 	bl	800d068 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008492:	2300      	movs	r3, #0
 8008494:	2200      	movs	r2, #0
 8008496:	210a      	movs	r1, #10
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f000 fc3d 	bl	8008d18 <USBH_FindInterface>
 800849e:	4603      	mov	r3, r0
 80084a0:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80084a2:	7bfb      	ldrb	r3, [r7, #15]
 80084a4:	2bff      	cmp	r3, #255	; 0xff
 80084a6:	d002      	beq.n	80084ae <USBH_CDC_InterfaceInit+0x11a>
 80084a8:	7bfb      	ldrb	r3, [r7, #15]
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d901      	bls.n	80084b2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80084ae:	2302      	movs	r3, #2
 80084b0:	e0c2      	b.n	8008638 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80084b2:	7bfb      	ldrb	r3, [r7, #15]
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	211a      	movs	r1, #26
 80084b8:	fb01 f303 	mul.w	r3, r1, r3
 80084bc:	4413      	add	r3, r2
 80084be:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	b25b      	sxtb	r3, r3
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	da16      	bge.n	80084f8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80084ca:	7bfb      	ldrb	r3, [r7, #15]
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	211a      	movs	r1, #26
 80084d0:	fb01 f303 	mul.w	r3, r1, r3
 80084d4:	4413      	add	r3, r2
 80084d6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80084da:	781a      	ldrb	r2, [r3, #0]
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80084e0:	7bfb      	ldrb	r3, [r7, #15]
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	211a      	movs	r1, #26
 80084e6:	fb01 f303 	mul.w	r3, r1, r3
 80084ea:	4413      	add	r3, r2
 80084ec:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80084f0:	881a      	ldrh	r2, [r3, #0]
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	835a      	strh	r2, [r3, #26]
 80084f6:	e015      	b.n	8008524 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80084f8:	7bfb      	ldrb	r3, [r7, #15]
 80084fa:	687a      	ldr	r2, [r7, #4]
 80084fc:	211a      	movs	r1, #26
 80084fe:	fb01 f303 	mul.w	r3, r1, r3
 8008502:	4413      	add	r3, r2
 8008504:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008508:	781a      	ldrb	r2, [r3, #0]
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800850e:	7bfb      	ldrb	r3, [r7, #15]
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	211a      	movs	r1, #26
 8008514:	fb01 f303 	mul.w	r3, r1, r3
 8008518:	4413      	add	r3, r2
 800851a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800851e:	881a      	ldrh	r2, [r3, #0]
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8008524:	7bfb      	ldrb	r3, [r7, #15]
 8008526:	687a      	ldr	r2, [r7, #4]
 8008528:	211a      	movs	r1, #26
 800852a:	fb01 f303 	mul.w	r3, r1, r3
 800852e:	4413      	add	r3, r2
 8008530:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	b25b      	sxtb	r3, r3
 8008538:	2b00      	cmp	r3, #0
 800853a:	da16      	bge.n	800856a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800853c:	7bfb      	ldrb	r3, [r7, #15]
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	211a      	movs	r1, #26
 8008542:	fb01 f303 	mul.w	r3, r1, r3
 8008546:	4413      	add	r3, r2
 8008548:	f203 3356 	addw	r3, r3, #854	; 0x356
 800854c:	781a      	ldrb	r2, [r3, #0]
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008552:	7bfb      	ldrb	r3, [r7, #15]
 8008554:	687a      	ldr	r2, [r7, #4]
 8008556:	211a      	movs	r1, #26
 8008558:	fb01 f303 	mul.w	r3, r1, r3
 800855c:	4413      	add	r3, r2
 800855e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008562:	881a      	ldrh	r2, [r3, #0]
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	835a      	strh	r2, [r3, #26]
 8008568:	e015      	b.n	8008596 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800856a:	7bfb      	ldrb	r3, [r7, #15]
 800856c:	687a      	ldr	r2, [r7, #4]
 800856e:	211a      	movs	r1, #26
 8008570:	fb01 f303 	mul.w	r3, r1, r3
 8008574:	4413      	add	r3, r2
 8008576:	f203 3356 	addw	r3, r3, #854	; 0x356
 800857a:	781a      	ldrb	r2, [r3, #0]
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008580:	7bfb      	ldrb	r3, [r7, #15]
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	211a      	movs	r1, #26
 8008586:	fb01 f303 	mul.w	r3, r1, r3
 800858a:	4413      	add	r3, r2
 800858c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008590:	881a      	ldrh	r2, [r3, #0]
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	7b9b      	ldrb	r3, [r3, #14]
 800859a:	4619      	mov	r1, r3
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f001 ffe8 	bl	800a572 <USBH_AllocPipe>
 80085a2:	4603      	mov	r3, r0
 80085a4:	461a      	mov	r2, r3
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	7bdb      	ldrb	r3, [r3, #15]
 80085ae:	4619      	mov	r1, r3
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f001 ffde 	bl	800a572 <USBH_AllocPipe>
 80085b6:	4603      	mov	r3, r0
 80085b8:	461a      	mov	r2, r3
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	7b59      	ldrb	r1, [r3, #13]
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	7b98      	ldrb	r0, [r3, #14]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80085d2:	68ba      	ldr	r2, [r7, #8]
 80085d4:	8b12      	ldrh	r2, [r2, #24]
 80085d6:	9202      	str	r2, [sp, #8]
 80085d8:	2202      	movs	r2, #2
 80085da:	9201      	str	r2, [sp, #4]
 80085dc:	9300      	str	r3, [sp, #0]
 80085de:	4623      	mov	r3, r4
 80085e0:	4602      	mov	r2, r0
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f001 ff96 	bl	800a514 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	7b19      	ldrb	r1, [r3, #12]
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	7bd8      	ldrb	r0, [r3, #15]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80085fc:	68ba      	ldr	r2, [r7, #8]
 80085fe:	8b52      	ldrh	r2, [r2, #26]
 8008600:	9202      	str	r2, [sp, #8]
 8008602:	2202      	movs	r2, #2
 8008604:	9201      	str	r2, [sp, #4]
 8008606:	9300      	str	r3, [sp, #0]
 8008608:	4623      	mov	r3, r4
 800860a:	4602      	mov	r2, r0
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f001 ff81 	bl	800a514 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	2200      	movs	r2, #0
 8008616:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	7b5b      	ldrb	r3, [r3, #13]
 800861e:	2200      	movs	r2, #0
 8008620:	4619      	mov	r1, r3
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f004 fd20 	bl	800d068 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	7b1b      	ldrb	r3, [r3, #12]
 800862c:	2200      	movs	r2, #0
 800862e:	4619      	mov	r1, r3
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f004 fd19 	bl	800d068 <USBH_LL_SetToggle>

  return USBH_OK;
 8008636:	2300      	movs	r3, #0
}
 8008638:	4618      	mov	r0, r3
 800863a:	3714      	adds	r7, #20
 800863c:	46bd      	mov	sp, r7
 800863e:	bd90      	pop	{r4, r7, pc}

08008640 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b084      	sub	sp, #16
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800864e:	69db      	ldr	r3, [r3, #28]
 8008650:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d00e      	beq.n	8008678 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	4619      	mov	r1, r3
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f001 ff76 	bl	800a552 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	4619      	mov	r1, r3
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f001 ffa1 	bl	800a5b4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2200      	movs	r2, #0
 8008676:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	7b1b      	ldrb	r3, [r3, #12]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d00e      	beq.n	800869e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	7b1b      	ldrb	r3, [r3, #12]
 8008684:	4619      	mov	r1, r3
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f001 ff63 	bl	800a552 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	7b1b      	ldrb	r3, [r3, #12]
 8008690:	4619      	mov	r1, r3
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f001 ff8e 	bl	800a5b4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2200      	movs	r2, #0
 800869c:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	7b5b      	ldrb	r3, [r3, #13]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d00e      	beq.n	80086c4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	7b5b      	ldrb	r3, [r3, #13]
 80086aa:	4619      	mov	r1, r3
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f001 ff50 	bl	800a552 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	7b5b      	ldrb	r3, [r3, #13]
 80086b6:	4619      	mov	r1, r3
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f001 ff7b 	bl	800a5b4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2200      	movs	r2, #0
 80086c2:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80086ca:	69db      	ldr	r3, [r3, #28]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d00b      	beq.n	80086e8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80086d6:	69db      	ldr	r3, [r3, #28]
 80086d8:	4618      	mov	r0, r3
 80086da:	f004 fd7d 	bl	800d1d8 <free>
    phost->pActiveClass->pData = 0U;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80086e4:	2200      	movs	r2, #0
 80086e6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80086e8:	2300      	movs	r3, #0
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3710      	adds	r7, #16
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}

080086f2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80086f2:	b580      	push	{r7, lr}
 80086f4:	b084      	sub	sp, #16
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008700:	69db      	ldr	r3, [r3, #28]
 8008702:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	3340      	adds	r3, #64	; 0x40
 8008708:	4619      	mov	r1, r3
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 f8b1 	bl	8008872 <GetLineCoding>
 8008710:	4603      	mov	r3, r0
 8008712:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008714:	7afb      	ldrb	r3, [r7, #11]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d105      	bne.n	8008726 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008720:	2102      	movs	r1, #2
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008726:	7afb      	ldrb	r3, [r7, #11]
}
 8008728:	4618      	mov	r0, r3
 800872a:	3710      	adds	r7, #16
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b084      	sub	sp, #16
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008738:	2301      	movs	r3, #1
 800873a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800873c:	2300      	movs	r3, #0
 800873e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008746:	69db      	ldr	r3, [r3, #28]
 8008748:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008750:	2b04      	cmp	r3, #4
 8008752:	d877      	bhi.n	8008844 <USBH_CDC_Process+0x114>
 8008754:	a201      	add	r2, pc, #4	; (adr r2, 800875c <USBH_CDC_Process+0x2c>)
 8008756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800875a:	bf00      	nop
 800875c:	08008771 	.word	0x08008771
 8008760:	08008777 	.word	0x08008777
 8008764:	080087a7 	.word	0x080087a7
 8008768:	0800881b 	.word	0x0800881b
 800876c:	08008829 	.word	0x08008829
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008770:	2300      	movs	r3, #0
 8008772:	73fb      	strb	r3, [r7, #15]
      break;
 8008774:	e06d      	b.n	8008852 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800877a:	4619      	mov	r1, r3
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f000 f897 	bl	80088b0 <SetLineCoding>
 8008782:	4603      	mov	r3, r0
 8008784:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008786:	7bbb      	ldrb	r3, [r7, #14]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d104      	bne.n	8008796 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	2202      	movs	r2, #2
 8008790:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008794:	e058      	b.n	8008848 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008796:	7bbb      	ldrb	r3, [r7, #14]
 8008798:	2b01      	cmp	r3, #1
 800879a:	d055      	beq.n	8008848 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	2204      	movs	r2, #4
 80087a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80087a4:	e050      	b.n	8008848 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	3340      	adds	r3, #64	; 0x40
 80087aa:	4619      	mov	r1, r3
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 f860 	bl	8008872 <GetLineCoding>
 80087b2:	4603      	mov	r3, r0
 80087b4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80087b6:	7bbb      	ldrb	r3, [r7, #14]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d126      	bne.n	800880a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	2200      	movs	r2, #0
 80087c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087ce:	791b      	ldrb	r3, [r3, #4]
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d13b      	bne.n	800884c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087de:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d133      	bne.n	800884c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087ee:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d12b      	bne.n	800884c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087fc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80087fe:	429a      	cmp	r2, r3
 8008800:	d124      	bne.n	800884c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 f982 	bl	8008b0c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008808:	e020      	b.n	800884c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800880a:	7bbb      	ldrb	r3, [r7, #14]
 800880c:	2b01      	cmp	r3, #1
 800880e:	d01d      	beq.n	800884c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	2204      	movs	r2, #4
 8008814:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008818:	e018      	b.n	800884c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 f867 	bl	80088ee <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f000 f8f6 	bl	8008a12 <CDC_ProcessReception>
      break;
 8008826:	e014      	b.n	8008852 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008828:	2100      	movs	r1, #0
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f001 f951 	bl	8009ad2 <USBH_ClrFeature>
 8008830:	4603      	mov	r3, r0
 8008832:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008834:	7bbb      	ldrb	r3, [r7, #14]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d10a      	bne.n	8008850 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	2200      	movs	r2, #0
 800883e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8008842:	e005      	b.n	8008850 <USBH_CDC_Process+0x120>

    default:
      break;
 8008844:	bf00      	nop
 8008846:	e004      	b.n	8008852 <USBH_CDC_Process+0x122>
      break;
 8008848:	bf00      	nop
 800884a:	e002      	b.n	8008852 <USBH_CDC_Process+0x122>
      break;
 800884c:	bf00      	nop
 800884e:	e000      	b.n	8008852 <USBH_CDC_Process+0x122>
      break;
 8008850:	bf00      	nop

  }

  return status;
 8008852:	7bfb      	ldrb	r3, [r7, #15]
}
 8008854:	4618      	mov	r0, r3
 8008856:	3710      	adds	r7, #16
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800885c:	b480      	push	{r7}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008864:	2300      	movs	r3, #0
}
 8008866:	4618      	mov	r0, r3
 8008868:	370c      	adds	r7, #12
 800886a:	46bd      	mov	sp, r7
 800886c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008870:	4770      	bx	lr

08008872 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008872:	b580      	push	{r7, lr}
 8008874:	b082      	sub	sp, #8
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
 800887a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	22a1      	movs	r2, #161	; 0xa1
 8008880:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2221      	movs	r2, #33	; 0x21
 8008886:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2200      	movs	r2, #0
 8008892:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2207      	movs	r2, #7
 8008898:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	2207      	movs	r2, #7
 800889e:	4619      	mov	r1, r3
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f001 faf6 	bl	8009e92 <USBH_CtlReq>
 80088a6:	4603      	mov	r3, r0
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3708      	adds	r7, #8
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b082      	sub	sp, #8
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2221      	movs	r2, #33	; 0x21
 80088be:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2220      	movs	r2, #32
 80088c4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2200      	movs	r2, #0
 80088ca:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2200      	movs	r2, #0
 80088d0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2207      	movs	r2, #7
 80088d6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	2207      	movs	r2, #7
 80088dc:	4619      	mov	r1, r3
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f001 fad7 	bl	8009e92 <USBH_CtlReq>
 80088e4:	4603      	mov	r3, r0
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3708      	adds	r7, #8
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}

080088ee <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80088ee:	b580      	push	{r7, lr}
 80088f0:	b086      	sub	sp, #24
 80088f2:	af02      	add	r7, sp, #8
 80088f4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80088fc:	69db      	ldr	r3, [r3, #28]
 80088fe:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008900:	2300      	movs	r3, #0
 8008902:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800890a:	2b01      	cmp	r3, #1
 800890c:	d002      	beq.n	8008914 <CDC_ProcessTransmission+0x26>
 800890e:	2b02      	cmp	r3, #2
 8008910:	d023      	beq.n	800895a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008912:	e07a      	b.n	8008a0a <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008918:	68fa      	ldr	r2, [r7, #12]
 800891a:	8b12      	ldrh	r2, [r2, #24]
 800891c:	4293      	cmp	r3, r2
 800891e:	d90b      	bls.n	8008938 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	69d9      	ldr	r1, [r3, #28]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	8b1a      	ldrh	r2, [r3, #24]
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	7b5b      	ldrb	r3, [r3, #13]
 800892c:	2001      	movs	r0, #1
 800892e:	9000      	str	r0, [sp, #0]
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f001 fdac 	bl	800a48e <USBH_BulkSendData>
 8008936:	e00b      	b.n	8008950 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8008940:	b29a      	uxth	r2, r3
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	7b5b      	ldrb	r3, [r3, #13]
 8008946:	2001      	movs	r0, #1
 8008948:	9000      	str	r0, [sp, #0]
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f001 fd9f 	bl	800a48e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2202      	movs	r2, #2
 8008954:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008958:	e057      	b.n	8008a0a <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	7b5b      	ldrb	r3, [r3, #13]
 800895e:	4619      	mov	r1, r3
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f004 fb57 	bl	800d014 <USBH_LL_GetURBState>
 8008966:	4603      	mov	r3, r0
 8008968:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800896a:	7afb      	ldrb	r3, [r7, #11]
 800896c:	2b01      	cmp	r3, #1
 800896e:	d136      	bne.n	80089de <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008974:	68fa      	ldr	r2, [r7, #12]
 8008976:	8b12      	ldrh	r2, [r2, #24]
 8008978:	4293      	cmp	r3, r2
 800897a:	d90e      	bls.n	800899a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008980:	68fa      	ldr	r2, [r7, #12]
 8008982:	8b12      	ldrh	r2, [r2, #24]
 8008984:	1a9a      	subs	r2, r3, r2
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	69db      	ldr	r3, [r3, #28]
 800898e:	68fa      	ldr	r2, [r7, #12]
 8008990:	8b12      	ldrh	r2, [r2, #24]
 8008992:	441a      	add	r2, r3
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	61da      	str	r2, [r3, #28]
 8008998:	e002      	b.n	80089a0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2200      	movs	r2, #0
 800899e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d004      	beq.n	80089b2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2201      	movs	r2, #1
 80089ac:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 80089b0:	e006      	b.n	80089c0 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2200      	movs	r2, #0
 80089b6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 f892 	bl	8008ae4 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2204      	movs	r2, #4
 80089c4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80089d4:	2200      	movs	r2, #0
 80089d6:	4619      	mov	r1, r3
 80089d8:	f001 fee8 	bl	800a7ac <osMessagePut>
      break;
 80089dc:	e014      	b.n	8008a08 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 80089de:	7afb      	ldrb	r3, [r7, #11]
 80089e0:	2b02      	cmp	r3, #2
 80089e2:	d111      	bne.n	8008a08 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2201      	movs	r2, #1
 80089e8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2204      	movs	r2, #4
 80089f0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008a00:	2200      	movs	r2, #0
 8008a02:	4619      	mov	r1, r3
 8008a04:	f001 fed2 	bl	800a7ac <osMessagePut>
      break;
 8008a08:	bf00      	nop
  }
}
 8008a0a:	bf00      	nop
 8008a0c:	3710      	adds	r7, #16
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}

08008a12 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008a12:	b580      	push	{r7, lr}
 8008a14:	b086      	sub	sp, #24
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a20:	69db      	ldr	r3, [r3, #28]
 8008a22:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008a24:	2300      	movs	r3, #0
 8008a26:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8008a2e:	2b03      	cmp	r3, #3
 8008a30:	d002      	beq.n	8008a38 <CDC_ProcessReception+0x26>
 8008a32:	2b04      	cmp	r3, #4
 8008a34:	d00e      	beq.n	8008a54 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008a36:	e051      	b.n	8008adc <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	6a19      	ldr	r1, [r3, #32]
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	8b5a      	ldrh	r2, [r3, #26]
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	7b1b      	ldrb	r3, [r3, #12]
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f001 fd47 	bl	800a4d8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	2204      	movs	r2, #4
 8008a4e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008a52:	e043      	b.n	8008adc <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	7b1b      	ldrb	r3, [r3, #12]
 8008a58:	4619      	mov	r1, r3
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f004 fada 	bl	800d014 <USBH_LL_GetURBState>
 8008a60:	4603      	mov	r3, r0
 8008a62:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008a64:	7cfb      	ldrb	r3, [r7, #19]
 8008a66:	2b01      	cmp	r3, #1
 8008a68:	d137      	bne.n	8008ada <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	7b1b      	ldrb	r3, [r3, #12]
 8008a6e:	4619      	mov	r1, r3
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f004 fa3d 	bl	800cef0 <USBH_LL_GetLastXferSize>
 8008a76:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a7c:	68fa      	ldr	r2, [r7, #12]
 8008a7e:	429a      	cmp	r2, r3
 8008a80:	d016      	beq.n	8008ab0 <CDC_ProcessReception+0x9e>
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	8b5b      	ldrh	r3, [r3, #26]
 8008a86:	461a      	mov	r2, r3
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d910      	bls.n	8008ab0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	1ad2      	subs	r2, r2, r3
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	6a1a      	ldr	r2, [r3, #32]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	441a      	add	r2, r3
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	2203      	movs	r2, #3
 8008aaa:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8008aae:	e006      	b.n	8008abe <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f000 f81d 	bl	8008af8 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2204      	movs	r2, #4
 8008ac2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	4619      	mov	r1, r3
 8008ad6:	f001 fe69 	bl	800a7ac <osMessagePut>
      break;
 8008ada:	bf00      	nop
  }
}
 8008adc:	bf00      	nop
 8008ade:	3718      	adds	r7, #24
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b083      	sub	sp, #12
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008aec:	bf00      	nop
 8008aee:	370c      	adds	r7, #12
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr

08008af8 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b083      	sub	sp, #12
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008b00:	bf00      	nop
 8008b02:	370c      	adds	r7, #12
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr

08008b0c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b083      	sub	sp, #12
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008b14:	bf00      	nop
 8008b16:	370c      	adds	r7, #12
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1e:	4770      	bx	lr

08008b20 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8008b20:	b5b0      	push	{r4, r5, r7, lr}
 8008b22:	b090      	sub	sp, #64	; 0x40
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	60f8      	str	r0, [r7, #12]
 8008b28:	60b9      	str	r1, [r7, #8]
 8008b2a:	4613      	mov	r3, r2
 8008b2c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d101      	bne.n	8008b38 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008b34:	2302      	movs	r3, #2
 8008b36:	e04d      	b.n	8008bd4 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	79fa      	ldrb	r2, [r7, #7]
 8008b3c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2200      	movs	r2, #0
 8008b44:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8008b50:	68f8      	ldr	r0, [r7, #12]
 8008b52:	f000 f847 	bl	8008be4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2200      	movs	r2, #0
 8008b62:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2200      	movs	r2, #0
 8008b72:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d003      	beq.n	8008b84 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	68ba      	ldr	r2, [r7, #8]
 8008b80:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8008b84:	4b15      	ldr	r3, [pc, #84]	; (8008bdc <USBH_Init+0xbc>)
 8008b86:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8008b8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008b8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8008b90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008b94:	2100      	movs	r1, #0
 8008b96:	4618      	mov	r0, r3
 8008b98:	f001 fddf 	bl	800a75a <osMessageCreate>
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8008ba4:	4b0e      	ldr	r3, [pc, #56]	; (8008be0 <USBH_Init+0xc0>)
 8008ba6:	f107 0414 	add.w	r4, r7, #20
 8008baa:	461d      	mov	r5, r3
 8008bac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008bae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008bb0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008bb4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8008bb8:	f107 0314 	add.w	r3, r7, #20
 8008bbc:	68f9      	ldr	r1, [r7, #12]
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f001 fd6b 	bl	800a69a <osThreadCreate>
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8008bcc:	68f8      	ldr	r0, [r7, #12]
 8008bce:	f004 f8db 	bl	800cd88 <USBH_LL_Init>

  return USBH_OK;
 8008bd2:	2300      	movs	r3, #0
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3740      	adds	r7, #64	; 0x40
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bdb0      	pop	{r4, r5, r7, pc}
 8008bdc:	0800dbe4 	.word	0x0800dbe4
 8008be0:	0800dbf4 	.word	0x0800dbf4

08008be4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b085      	sub	sp, #20
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008bec:	2300      	movs	r3, #0
 8008bee:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	60fb      	str	r3, [r7, #12]
 8008bf4:	e009      	b.n	8008c0a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008bf6:	687a      	ldr	r2, [r7, #4]
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	33e0      	adds	r3, #224	; 0xe0
 8008bfc:	009b      	lsls	r3, r3, #2
 8008bfe:	4413      	add	r3, r2
 8008c00:	2200      	movs	r2, #0
 8008c02:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	3301      	adds	r3, #1
 8008c08:	60fb      	str	r3, [r7, #12]
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2b0e      	cmp	r3, #14
 8008c0e:	d9f2      	bls.n	8008bf6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008c10:	2300      	movs	r3, #0
 8008c12:	60fb      	str	r3, [r7, #12]
 8008c14:	e009      	b.n	8008c2a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008c16:	687a      	ldr	r2, [r7, #4]
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	4413      	add	r3, r2
 8008c1c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008c20:	2200      	movs	r2, #0
 8008c22:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	3301      	adds	r3, #1
 8008c28:	60fb      	str	r3, [r7, #12]
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c30:	d3f1      	bcc.n	8008c16 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2200      	movs	r2, #0
 8008c36:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2201      	movs	r2, #1
 8008c42:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2200      	movs	r2, #0
 8008c48:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2201      	movs	r2, #1
 8008c50:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2240      	movs	r2, #64	; 0x40
 8008c56:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2200      	movs	r2, #0
 8008c62:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2201      	movs	r2, #1
 8008c6a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2200      	movs	r2, #0
 8008c72:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8008c7e:	2300      	movs	r3, #0
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3714      	adds	r7, #20
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr

08008c8c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b085      	sub	sp, #20
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
 8008c94:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008c96:	2300      	movs	r3, #0
 8008c98:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d016      	beq.n	8008cce <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d10e      	bne.n	8008cc8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008cb0:	1c59      	adds	r1, r3, #1
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008cb8:	687a      	ldr	r2, [r7, #4]
 8008cba:	33de      	adds	r3, #222	; 0xde
 8008cbc:	6839      	ldr	r1, [r7, #0]
 8008cbe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	73fb      	strb	r3, [r7, #15]
 8008cc6:	e004      	b.n	8008cd2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008cc8:	2302      	movs	r3, #2
 8008cca:	73fb      	strb	r3, [r7, #15]
 8008ccc:	e001      	b.n	8008cd2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008cce:	2302      	movs	r3, #2
 8008cd0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3714      	adds	r7, #20
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr

08008ce0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b085      	sub	sp, #20
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	460b      	mov	r3, r1
 8008cea:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008cec:	2300      	movs	r3, #0
 8008cee:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8008cf6:	78fa      	ldrb	r2, [r7, #3]
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d204      	bcs.n	8008d06 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	78fa      	ldrb	r2, [r7, #3]
 8008d00:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8008d04:	e001      	b.n	8008d0a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008d06:	2302      	movs	r3, #2
 8008d08:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3714      	adds	r7, #20
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr

08008d18 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b087      	sub	sp, #28
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	4608      	mov	r0, r1
 8008d22:	4611      	mov	r1, r2
 8008d24:	461a      	mov	r2, r3
 8008d26:	4603      	mov	r3, r0
 8008d28:	70fb      	strb	r3, [r7, #3]
 8008d2a:	460b      	mov	r3, r1
 8008d2c:	70bb      	strb	r3, [r7, #2]
 8008d2e:	4613      	mov	r3, r2
 8008d30:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008d32:	2300      	movs	r3, #0
 8008d34:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8008d36:	2300      	movs	r3, #0
 8008d38:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008d40:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008d42:	e025      	b.n	8008d90 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008d44:	7dfb      	ldrb	r3, [r7, #23]
 8008d46:	221a      	movs	r2, #26
 8008d48:	fb02 f303 	mul.w	r3, r2, r3
 8008d4c:	3308      	adds	r3, #8
 8008d4e:	68fa      	ldr	r2, [r7, #12]
 8008d50:	4413      	add	r3, r2
 8008d52:	3302      	adds	r3, #2
 8008d54:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	795b      	ldrb	r3, [r3, #5]
 8008d5a:	78fa      	ldrb	r2, [r7, #3]
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	d002      	beq.n	8008d66 <USBH_FindInterface+0x4e>
 8008d60:	78fb      	ldrb	r3, [r7, #3]
 8008d62:	2bff      	cmp	r3, #255	; 0xff
 8008d64:	d111      	bne.n	8008d8a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008d6a:	78ba      	ldrb	r2, [r7, #2]
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d002      	beq.n	8008d76 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008d70:	78bb      	ldrb	r3, [r7, #2]
 8008d72:	2bff      	cmp	r3, #255	; 0xff
 8008d74:	d109      	bne.n	8008d8a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008d7a:	787a      	ldrb	r2, [r7, #1]
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d002      	beq.n	8008d86 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008d80:	787b      	ldrb	r3, [r7, #1]
 8008d82:	2bff      	cmp	r3, #255	; 0xff
 8008d84:	d101      	bne.n	8008d8a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008d86:	7dfb      	ldrb	r3, [r7, #23]
 8008d88:	e006      	b.n	8008d98 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008d8a:	7dfb      	ldrb	r3, [r7, #23]
 8008d8c:	3301      	adds	r3, #1
 8008d8e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008d90:	7dfb      	ldrb	r3, [r7, #23]
 8008d92:	2b01      	cmp	r3, #1
 8008d94:	d9d6      	bls.n	8008d44 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008d96:	23ff      	movs	r3, #255	; 0xff
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	371c      	adds	r7, #28
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b082      	sub	sp, #8
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f004 f827 	bl	800ce00 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8008db2:	2101      	movs	r1, #1
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f004 f940 	bl	800d03a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008dba:	2300      	movs	r3, #0
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3708      	adds	r7, #8
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}

08008dc4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b088      	sub	sp, #32
 8008dc8:	af04      	add	r7, sp, #16
 8008dca:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008dcc:	2302      	movs	r3, #2
 8008dce:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8008dda:	b2db      	uxtb	r3, r3
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	d102      	bne.n	8008de6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2203      	movs	r2, #3
 8008de4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	781b      	ldrb	r3, [r3, #0]
 8008dea:	b2db      	uxtb	r3, r3
 8008dec:	2b0b      	cmp	r3, #11
 8008dee:	f200 823c 	bhi.w	800926a <USBH_Process+0x4a6>
 8008df2:	a201      	add	r2, pc, #4	; (adr r2, 8008df8 <USBH_Process+0x34>)
 8008df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008df8:	08008e29 	.word	0x08008e29
 8008dfc:	08008e77 	.word	0x08008e77
 8008e00:	08008efb 	.word	0x08008efb
 8008e04:	080091e9 	.word	0x080091e9
 8008e08:	0800926b 	.word	0x0800926b
 8008e0c:	08008fbb 	.word	0x08008fbb
 8008e10:	08009173 	.word	0x08009173
 8008e14:	0800900d 	.word	0x0800900d
 8008e18:	08009049 	.word	0x08009049
 8008e1c:	08009083 	.word	0x08009083
 8008e20:	080090cb 	.word	0x080090cb
 8008e24:	080091d1 	.word	0x080091d1
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008e2e:	b2db      	uxtb	r3, r3
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	f000 821c 	beq.w	800926e <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2201      	movs	r2, #1
 8008e3a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008e3c:	20c8      	movs	r0, #200	; 0xc8
 8008e3e:	f004 f943 	bl	800d0c8 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f004 f839 	bl	800ceba <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2200      	movs	r2, #0
 8008e54:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	4619      	mov	r1, r3
 8008e70:	f001 fc9c 	bl	800a7ac <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008e74:	e1fb      	b.n	800926e <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d107      	bne.n	8008e90 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2200      	movs	r2, #0
 8008e84:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2202      	movs	r2, #2
 8008e8c:	701a      	strb	r2, [r3, #0]
 8008e8e:	e025      	b.n	8008edc <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008e96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e9a:	d914      	bls.n	8008ec6 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	b2da      	uxtb	r2, r3
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008eb2:	2b03      	cmp	r3, #3
 8008eb4:	d903      	bls.n	8008ebe <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	220d      	movs	r2, #13
 8008eba:	701a      	strb	r2, [r3, #0]
 8008ebc:	e00e      	b.n	8008edc <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	701a      	strb	r2, [r3, #0]
 8008ec4:	e00a      	b.n	8008edc <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008ecc:	f103 020a 	add.w	r2, r3, #10
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8008ed6:	200a      	movs	r0, #10
 8008ed8:	f004 f8f6 	bl	800d0c8 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2201      	movs	r2, #1
 8008ee0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	f001 fc5a 	bl	800a7ac <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008ef8:	e1c0      	b.n	800927c <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d005      	beq.n	8008f10 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008f0a:	2104      	movs	r1, #4
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008f10:	2064      	movs	r0, #100	; 0x64
 8008f12:	f004 f8d9 	bl	800d0c8 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f003 ffa8 	bl	800ce6c <USBH_LL_GetSpeed>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	461a      	mov	r2, r3
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2205      	movs	r2, #5
 8008f2a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008f2c:	2100      	movs	r1, #0
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f001 fb1f 	bl	800a572 <USBH_AllocPipe>
 8008f34:	4603      	mov	r3, r0
 8008f36:	461a      	mov	r2, r3
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008f3c:	2180      	movs	r1, #128	; 0x80
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f001 fb17 	bl	800a572 <USBH_AllocPipe>
 8008f44:	4603      	mov	r3, r0
 8008f46:	461a      	mov	r2, r3
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	7919      	ldrb	r1, [r3, #4]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008f5c:	687a      	ldr	r2, [r7, #4]
 8008f5e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008f60:	b292      	uxth	r2, r2
 8008f62:	9202      	str	r2, [sp, #8]
 8008f64:	2200      	movs	r2, #0
 8008f66:	9201      	str	r2, [sp, #4]
 8008f68:	9300      	str	r3, [sp, #0]
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	2280      	movs	r2, #128	; 0x80
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f001 fad0 	bl	800a514 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	7959      	ldrb	r1, [r3, #5]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008f84:	687a      	ldr	r2, [r7, #4]
 8008f86:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008f88:	b292      	uxth	r2, r2
 8008f8a:	9202      	str	r2, [sp, #8]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	9201      	str	r2, [sp, #4]
 8008f90:	9300      	str	r3, [sp, #0]
 8008f92:	4603      	mov	r3, r0
 8008f94:	2200      	movs	r2, #0
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f001 fabc 	bl	800a514 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	4619      	mov	r1, r3
 8008fb4:	f001 fbfa 	bl	800a7ac <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008fb8:	e160      	b.n	800927c <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f000 f964 	bl	8009288 <USBH_HandleEnum>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008fc4:	7bbb      	ldrb	r3, [r7, #14]
 8008fc6:	b2db      	uxtb	r3, r3
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	f040 8152 	bne.w	8009272 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008fdc:	2b01      	cmp	r3, #1
 8008fde:	d103      	bne.n	8008fe8 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2208      	movs	r2, #8
 8008fe4:	701a      	strb	r2, [r3, #0]
 8008fe6:	e002      	b.n	8008fee <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2207      	movs	r2, #7
 8008fec:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2205      	movs	r2, #5
 8008ff2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009002:	2200      	movs	r2, #0
 8009004:	4619      	mov	r1, r3
 8009006:	f001 fbd1 	bl	800a7ac <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800900a:	e132      	b.n	8009272 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009012:	2b00      	cmp	r3, #0
 8009014:	f000 812f 	beq.w	8009276 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800901e:	2101      	movs	r1, #1
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2208      	movs	r2, #8
 8009028:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2205      	movs	r2, #5
 800902e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800903e:	2200      	movs	r2, #0
 8009040:	4619      	mov	r1, r3
 8009042:	f001 fbb3 	bl	800a7ac <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8009046:	e116      	b.n	8009276 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800904e:	b29b      	uxth	r3, r3
 8009050:	4619      	mov	r1, r3
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 fcf6 	bl	8009a44 <USBH_SetCfg>
 8009058:	4603      	mov	r3, r0
 800905a:	2b00      	cmp	r3, #0
 800905c:	d102      	bne.n	8009064 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2209      	movs	r2, #9
 8009062:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2201      	movs	r2, #1
 8009068:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009078:	2200      	movs	r2, #0
 800907a:	4619      	mov	r1, r3
 800907c:	f001 fb96 	bl	800a7ac <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009080:	e0fc      	b.n	800927c <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8009088:	f003 0320 	and.w	r3, r3, #32
 800908c:	2b00      	cmp	r3, #0
 800908e:	d00a      	beq.n	80090a6 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8009090:	2101      	movs	r1, #1
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 fcf9 	bl	8009a8a <USBH_SetFeature>
 8009098:	4603      	mov	r3, r0
 800909a:	2b00      	cmp	r3, #0
 800909c:	d106      	bne.n	80090ac <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	220a      	movs	r2, #10
 80090a2:	701a      	strb	r2, [r3, #0]
 80090a4:	e002      	b.n	80090ac <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	220a      	movs	r2, #10
 80090aa:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2201      	movs	r2, #1
 80090b0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80090c0:	2200      	movs	r2, #0
 80090c2:	4619      	mov	r1, r3
 80090c4:	f001 fb72 	bl	800a7ac <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80090c8:	e0d8      	b.n	800927c <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d03f      	beq.n	8009154 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2200      	movs	r2, #0
 80090d8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80090dc:	2300      	movs	r3, #0
 80090de:	73fb      	strb	r3, [r7, #15]
 80090e0:	e016      	b.n	8009110 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80090e2:	7bfa      	ldrb	r2, [r7, #15]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	32de      	adds	r2, #222	; 0xde
 80090e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090ec:	791a      	ldrb	r2, [r3, #4]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d108      	bne.n	800910a <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 80090f8:	7bfa      	ldrb	r2, [r7, #15]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	32de      	adds	r2, #222	; 0xde
 80090fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8009108:	e005      	b.n	8009116 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800910a:	7bfb      	ldrb	r3, [r7, #15]
 800910c:	3301      	adds	r3, #1
 800910e:	73fb      	strb	r3, [r7, #15]
 8009110:	7bfb      	ldrb	r3, [r7, #15]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d0e5      	beq.n	80090e2 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800911c:	2b00      	cmp	r3, #0
 800911e:	d016      	beq.n	800914e <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009126:	689b      	ldr	r3, [r3, #8]
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	4798      	blx	r3
 800912c:	4603      	mov	r3, r0
 800912e:	2b00      	cmp	r3, #0
 8009130:	d109      	bne.n	8009146 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2206      	movs	r2, #6
 8009136:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800913e:	2103      	movs	r1, #3
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	4798      	blx	r3
 8009144:	e006      	b.n	8009154 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	220d      	movs	r2, #13
 800914a:	701a      	strb	r2, [r3, #0]
 800914c:	e002      	b.n	8009154 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	220d      	movs	r2, #13
 8009152:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2205      	movs	r2, #5
 8009158:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009168:	2200      	movs	r2, #0
 800916a:	4619      	mov	r1, r3
 800916c:	f001 fb1e 	bl	800a7ac <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009170:	e084      	b.n	800927c <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009178:	2b00      	cmp	r3, #0
 800917a:	d017      	beq.n	80091ac <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009182:	691b      	ldr	r3, [r3, #16]
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	4798      	blx	r3
 8009188:	4603      	mov	r3, r0
 800918a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800918c:	7bbb      	ldrb	r3, [r7, #14]
 800918e:	b2db      	uxtb	r3, r3
 8009190:	2b00      	cmp	r3, #0
 8009192:	d103      	bne.n	800919c <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	220b      	movs	r2, #11
 8009198:	701a      	strb	r2, [r3, #0]
 800919a:	e00a      	b.n	80091b2 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800919c:	7bbb      	ldrb	r3, [r7, #14]
 800919e:	b2db      	uxtb	r3, r3
 80091a0:	2b02      	cmp	r3, #2
 80091a2:	d106      	bne.n	80091b2 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	220d      	movs	r2, #13
 80091a8:	701a      	strb	r2, [r3, #0]
 80091aa:	e002      	b.n	80091b2 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	220d      	movs	r2, #13
 80091b0:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2205      	movs	r2, #5
 80091b6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80091c6:	2200      	movs	r2, #0
 80091c8:	4619      	mov	r1, r3
 80091ca:	f001 faef 	bl	800a7ac <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80091ce:	e055      	b.n	800927c <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d04f      	beq.n	800927a <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80091e0:	695b      	ldr	r3, [r3, #20]
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	4798      	blx	r3
      }
      break;
 80091e6:	e048      	b.n	800927a <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2200      	movs	r2, #0
 80091ec:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f7ff fcf7 	bl	8008be4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d009      	beq.n	8009214 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009206:	68db      	ldr	r3, [r3, #12]
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2200      	movs	r2, #0
 8009210:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800921a:	2b00      	cmp	r3, #0
 800921c:	d005      	beq.n	800922a <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009224:	2105      	movs	r1, #5
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8009230:	b2db      	uxtb	r3, r3
 8009232:	2b01      	cmp	r3, #1
 8009234:	d107      	bne.n	8009246 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2200      	movs	r2, #0
 800923a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f7ff fdb0 	bl	8008da4 <USBH_Start>
 8009244:	e002      	b.n	800924c <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f003 fdda 	bl	800ce00 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2201      	movs	r2, #1
 8009250:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009260:	2200      	movs	r2, #0
 8009262:	4619      	mov	r1, r3
 8009264:	f001 faa2 	bl	800a7ac <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009268:	e008      	b.n	800927c <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800926a:	bf00      	nop
 800926c:	e006      	b.n	800927c <USBH_Process+0x4b8>
      break;
 800926e:	bf00      	nop
 8009270:	e004      	b.n	800927c <USBH_Process+0x4b8>
      break;
 8009272:	bf00      	nop
 8009274:	e002      	b.n	800927c <USBH_Process+0x4b8>
    break;
 8009276:	bf00      	nop
 8009278:	e000      	b.n	800927c <USBH_Process+0x4b8>
      break;
 800927a:	bf00      	nop
  }
  return USBH_OK;
 800927c:	2300      	movs	r3, #0
}
 800927e:	4618      	mov	r0, r3
 8009280:	3710      	adds	r7, #16
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}
 8009286:	bf00      	nop

08009288 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b088      	sub	sp, #32
 800928c:	af04      	add	r7, sp, #16
 800928e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009290:	2301      	movs	r3, #1
 8009292:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009294:	2301      	movs	r3, #1
 8009296:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	785b      	ldrb	r3, [r3, #1]
 800929c:	2b07      	cmp	r3, #7
 800929e:	f200 8208 	bhi.w	80096b2 <USBH_HandleEnum+0x42a>
 80092a2:	a201      	add	r2, pc, #4	; (adr r2, 80092a8 <USBH_HandleEnum+0x20>)
 80092a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092a8:	080092c9 	.word	0x080092c9
 80092ac:	08009387 	.word	0x08009387
 80092b0:	080093f1 	.word	0x080093f1
 80092b4:	0800947f 	.word	0x0800947f
 80092b8:	080094e9 	.word	0x080094e9
 80092bc:	08009559 	.word	0x08009559
 80092c0:	080095f5 	.word	0x080095f5
 80092c4:	08009673 	.word	0x08009673
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80092c8:	2108      	movs	r1, #8
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 faea 	bl	80098a4 <USBH_Get_DevDesc>
 80092d0:	4603      	mov	r3, r0
 80092d2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80092d4:	7bbb      	ldrb	r3, [r7, #14]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d130      	bne.n	800933c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2201      	movs	r2, #1
 80092e8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	7919      	ldrb	r1, [r3, #4]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80092fa:	687a      	ldr	r2, [r7, #4]
 80092fc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80092fe:	b292      	uxth	r2, r2
 8009300:	9202      	str	r2, [sp, #8]
 8009302:	2200      	movs	r2, #0
 8009304:	9201      	str	r2, [sp, #4]
 8009306:	9300      	str	r3, [sp, #0]
 8009308:	4603      	mov	r3, r0
 800930a:	2280      	movs	r2, #128	; 0x80
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f001 f901 	bl	800a514 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	7959      	ldrb	r1, [r3, #5]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009322:	687a      	ldr	r2, [r7, #4]
 8009324:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009326:	b292      	uxth	r2, r2
 8009328:	9202      	str	r2, [sp, #8]
 800932a:	2200      	movs	r2, #0
 800932c:	9201      	str	r2, [sp, #4]
 800932e:	9300      	str	r3, [sp, #0]
 8009330:	4603      	mov	r3, r0
 8009332:	2200      	movs	r2, #0
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f001 f8ed 	bl	800a514 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800933a:	e1bc      	b.n	80096b6 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800933c:	7bbb      	ldrb	r3, [r7, #14]
 800933e:	2b03      	cmp	r3, #3
 8009340:	f040 81b9 	bne.w	80096b6 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800934a:	3301      	adds	r3, #1
 800934c:	b2da      	uxtb	r2, r3
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800935a:	2b03      	cmp	r3, #3
 800935c:	d903      	bls.n	8009366 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	220d      	movs	r2, #13
 8009362:	701a      	strb	r2, [r3, #0]
      break;
 8009364:	e1a7      	b.n	80096b6 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	795b      	ldrb	r3, [r3, #5]
 800936a:	4619      	mov	r1, r3
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f001 f921 	bl	800a5b4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	791b      	ldrb	r3, [r3, #4]
 8009376:	4619      	mov	r1, r3
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f001 f91b 	bl	800a5b4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2200      	movs	r2, #0
 8009382:	701a      	strb	r2, [r3, #0]
      break;
 8009384:	e197      	b.n	80096b6 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009386:	2112      	movs	r1, #18
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f000 fa8b 	bl	80098a4 <USBH_Get_DevDesc>
 800938e:	4603      	mov	r3, r0
 8009390:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009392:	7bbb      	ldrb	r3, [r7, #14]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d103      	bne.n	80093a0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2202      	movs	r2, #2
 800939c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800939e:	e18c      	b.n	80096ba <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80093a0:	7bbb      	ldrb	r3, [r7, #14]
 80093a2:	2b03      	cmp	r3, #3
 80093a4:	f040 8189 	bne.w	80096ba <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80093ae:	3301      	adds	r3, #1
 80093b0:	b2da      	uxtb	r2, r3
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80093be:	2b03      	cmp	r3, #3
 80093c0:	d903      	bls.n	80093ca <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	220d      	movs	r2, #13
 80093c6:	701a      	strb	r2, [r3, #0]
      break;
 80093c8:	e177      	b.n	80096ba <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	795b      	ldrb	r3, [r3, #5]
 80093ce:	4619      	mov	r1, r3
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f001 f8ef 	bl	800a5b4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	791b      	ldrb	r3, [r3, #4]
 80093da:	4619      	mov	r1, r3
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f001 f8e9 	bl	800a5b4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2200      	movs	r2, #0
 80093e6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2200      	movs	r2, #0
 80093ec:	701a      	strb	r2, [r3, #0]
      break;
 80093ee:	e164      	b.n	80096ba <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80093f0:	2101      	movs	r1, #1
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f000 fb02 	bl	80099fc <USBH_SetAddress>
 80093f8:	4603      	mov	r3, r0
 80093fa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80093fc:	7bbb      	ldrb	r3, [r7, #14]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d132      	bne.n	8009468 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8009402:	2002      	movs	r0, #2
 8009404:	f003 fe60 	bl	800d0c8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2201      	movs	r2, #1
 800940c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2203      	movs	r2, #3
 8009414:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	7919      	ldrb	r1, [r3, #4]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009426:	687a      	ldr	r2, [r7, #4]
 8009428:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800942a:	b292      	uxth	r2, r2
 800942c:	9202      	str	r2, [sp, #8]
 800942e:	2200      	movs	r2, #0
 8009430:	9201      	str	r2, [sp, #4]
 8009432:	9300      	str	r3, [sp, #0]
 8009434:	4603      	mov	r3, r0
 8009436:	2280      	movs	r2, #128	; 0x80
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f001 f86b 	bl	800a514 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	7959      	ldrb	r1, [r3, #5]
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800944e:	687a      	ldr	r2, [r7, #4]
 8009450:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009452:	b292      	uxth	r2, r2
 8009454:	9202      	str	r2, [sp, #8]
 8009456:	2200      	movs	r2, #0
 8009458:	9201      	str	r2, [sp, #4]
 800945a:	9300      	str	r3, [sp, #0]
 800945c:	4603      	mov	r3, r0
 800945e:	2200      	movs	r2, #0
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f001 f857 	bl	800a514 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009466:	e12a      	b.n	80096be <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009468:	7bbb      	ldrb	r3, [r7, #14]
 800946a:	2b03      	cmp	r3, #3
 800946c:	f040 8127 	bne.w	80096be <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	220d      	movs	r2, #13
 8009474:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2200      	movs	r2, #0
 800947a:	705a      	strb	r2, [r3, #1]
      break;
 800947c:	e11f      	b.n	80096be <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800947e:	2109      	movs	r1, #9
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f000 fa37 	bl	80098f4 <USBH_Get_CfgDesc>
 8009486:	4603      	mov	r3, r0
 8009488:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800948a:	7bbb      	ldrb	r3, [r7, #14]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d103      	bne.n	8009498 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2204      	movs	r2, #4
 8009494:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009496:	e114      	b.n	80096c2 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009498:	7bbb      	ldrb	r3, [r7, #14]
 800949a:	2b03      	cmp	r3, #3
 800949c:	f040 8111 	bne.w	80096c2 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80094a6:	3301      	adds	r3, #1
 80094a8:	b2da      	uxtb	r2, r3
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80094b6:	2b03      	cmp	r3, #3
 80094b8:	d903      	bls.n	80094c2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	220d      	movs	r2, #13
 80094be:	701a      	strb	r2, [r3, #0]
      break;
 80094c0:	e0ff      	b.n	80096c2 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	795b      	ldrb	r3, [r3, #5]
 80094c6:	4619      	mov	r1, r3
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f001 f873 	bl	800a5b4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	791b      	ldrb	r3, [r3, #4]
 80094d2:	4619      	mov	r1, r3
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f001 f86d 	bl	800a5b4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2200      	movs	r2, #0
 80094de:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2200      	movs	r2, #0
 80094e4:	701a      	strb	r2, [r3, #0]
      break;
 80094e6:	e0ec      	b.n	80096c2 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80094ee:	4619      	mov	r1, r3
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 f9ff 	bl	80098f4 <USBH_Get_CfgDesc>
 80094f6:	4603      	mov	r3, r0
 80094f8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80094fa:	7bbb      	ldrb	r3, [r7, #14]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d103      	bne.n	8009508 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2205      	movs	r2, #5
 8009504:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009506:	e0de      	b.n	80096c6 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009508:	7bbb      	ldrb	r3, [r7, #14]
 800950a:	2b03      	cmp	r3, #3
 800950c:	f040 80db 	bne.w	80096c6 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009516:	3301      	adds	r3, #1
 8009518:	b2da      	uxtb	r2, r3
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009526:	2b03      	cmp	r3, #3
 8009528:	d903      	bls.n	8009532 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	220d      	movs	r2, #13
 800952e:	701a      	strb	r2, [r3, #0]
      break;
 8009530:	e0c9      	b.n	80096c6 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	795b      	ldrb	r3, [r3, #5]
 8009536:	4619      	mov	r1, r3
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f001 f83b 	bl	800a5b4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	791b      	ldrb	r3, [r3, #4]
 8009542:	4619      	mov	r1, r3
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f001 f835 	bl	800a5b4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2200      	movs	r2, #0
 800954e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2200      	movs	r2, #0
 8009554:	701a      	strb	r2, [r3, #0]
      break;
 8009556:	e0b6      	b.n	80096c6 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800955e:	2b00      	cmp	r3, #0
 8009560:	d036      	beq.n	80095d0 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800956e:	23ff      	movs	r3, #255	; 0xff
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f000 f9e3 	bl	800993c <USBH_Get_StringDesc>
 8009576:	4603      	mov	r3, r0
 8009578:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800957a:	7bbb      	ldrb	r3, [r7, #14]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d111      	bne.n	80095a4 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2206      	movs	r2, #6
 8009584:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2205      	movs	r2, #5
 800958a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800959a:	2200      	movs	r2, #0
 800959c:	4619      	mov	r1, r3
 800959e:	f001 f905 	bl	800a7ac <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80095a2:	e092      	b.n	80096ca <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80095a4:	7bbb      	ldrb	r3, [r7, #14]
 80095a6:	2b03      	cmp	r3, #3
 80095a8:	f040 808f 	bne.w	80096ca <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2206      	movs	r2, #6
 80095b0:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2205      	movs	r2, #5
 80095b6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80095c6:	2200      	movs	r2, #0
 80095c8:	4619      	mov	r1, r3
 80095ca:	f001 f8ef 	bl	800a7ac <osMessagePut>
      break;
 80095ce:	e07c      	b.n	80096ca <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2206      	movs	r2, #6
 80095d4:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2205      	movs	r2, #5
 80095da:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80095ea:	2200      	movs	r2, #0
 80095ec:	4619      	mov	r1, r3
 80095ee:	f001 f8dd 	bl	800a7ac <osMessagePut>
      break;
 80095f2:	e06a      	b.n	80096ca <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d027      	beq.n	800964e <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800960a:	23ff      	movs	r3, #255	; 0xff
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f000 f995 	bl	800993c <USBH_Get_StringDesc>
 8009612:	4603      	mov	r3, r0
 8009614:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009616:	7bbb      	ldrb	r3, [r7, #14]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d103      	bne.n	8009624 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2207      	movs	r2, #7
 8009620:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009622:	e054      	b.n	80096ce <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009624:	7bbb      	ldrb	r3, [r7, #14]
 8009626:	2b03      	cmp	r3, #3
 8009628:	d151      	bne.n	80096ce <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2207      	movs	r2, #7
 800962e:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2205      	movs	r2, #5
 8009634:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009644:	2200      	movs	r2, #0
 8009646:	4619      	mov	r1, r3
 8009648:	f001 f8b0 	bl	800a7ac <osMessagePut>
      break;
 800964c:	e03f      	b.n	80096ce <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2207      	movs	r2, #7
 8009652:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2205      	movs	r2, #5
 8009658:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009668:	2200      	movs	r2, #0
 800966a:	4619      	mov	r1, r3
 800966c:	f001 f89e 	bl	800a7ac <osMessagePut>
      break;
 8009670:	e02d      	b.n	80096ce <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8009678:	2b00      	cmp	r3, #0
 800967a:	d017      	beq.n	80096ac <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009688:	23ff      	movs	r3, #255	; 0xff
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f000 f956 	bl	800993c <USBH_Get_StringDesc>
 8009690:	4603      	mov	r3, r0
 8009692:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009694:	7bbb      	ldrb	r3, [r7, #14]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d102      	bne.n	80096a0 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800969a:	2300      	movs	r3, #0
 800969c:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800969e:	e018      	b.n	80096d2 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80096a0:	7bbb      	ldrb	r3, [r7, #14]
 80096a2:	2b03      	cmp	r3, #3
 80096a4:	d115      	bne.n	80096d2 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 80096a6:	2300      	movs	r3, #0
 80096a8:	73fb      	strb	r3, [r7, #15]
      break;
 80096aa:	e012      	b.n	80096d2 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 80096ac:	2300      	movs	r3, #0
 80096ae:	73fb      	strb	r3, [r7, #15]
      break;
 80096b0:	e00f      	b.n	80096d2 <USBH_HandleEnum+0x44a>

    default:
      break;
 80096b2:	bf00      	nop
 80096b4:	e00e      	b.n	80096d4 <USBH_HandleEnum+0x44c>
      break;
 80096b6:	bf00      	nop
 80096b8:	e00c      	b.n	80096d4 <USBH_HandleEnum+0x44c>
      break;
 80096ba:	bf00      	nop
 80096bc:	e00a      	b.n	80096d4 <USBH_HandleEnum+0x44c>
      break;
 80096be:	bf00      	nop
 80096c0:	e008      	b.n	80096d4 <USBH_HandleEnum+0x44c>
      break;
 80096c2:	bf00      	nop
 80096c4:	e006      	b.n	80096d4 <USBH_HandleEnum+0x44c>
      break;
 80096c6:	bf00      	nop
 80096c8:	e004      	b.n	80096d4 <USBH_HandleEnum+0x44c>
      break;
 80096ca:	bf00      	nop
 80096cc:	e002      	b.n	80096d4 <USBH_HandleEnum+0x44c>
      break;
 80096ce:	bf00      	nop
 80096d0:	e000      	b.n	80096d4 <USBH_HandleEnum+0x44c>
      break;
 80096d2:	bf00      	nop
  }
  return Status;
 80096d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3710      	adds	r7, #16
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}
 80096de:	bf00      	nop

080096e0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b083      	sub	sp, #12
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	683a      	ldr	r2, [r7, #0]
 80096ee:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80096f2:	bf00      	nop
 80096f4:	370c      	adds	r7, #12
 80096f6:	46bd      	mov	sp, r7
 80096f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fc:	4770      	bx	lr

080096fe <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80096fe:	b580      	push	{r7, lr}
 8009700:	b082      	sub	sp, #8
 8009702:	af00      	add	r7, sp, #0
 8009704:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800970c:	1c5a      	adds	r2, r3, #1
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f000 f804 	bl	8009722 <USBH_HandleSof>
}
 800971a:	bf00      	nop
 800971c:	3708      	adds	r7, #8
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}

08009722 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009722:	b580      	push	{r7, lr}
 8009724:	b082      	sub	sp, #8
 8009726:	af00      	add	r7, sp, #0
 8009728:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	781b      	ldrb	r3, [r3, #0]
 800972e:	b2db      	uxtb	r3, r3
 8009730:	2b0b      	cmp	r3, #11
 8009732:	d10a      	bne.n	800974a <USBH_HandleSof+0x28>
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800973a:	2b00      	cmp	r3, #0
 800973c:	d005      	beq.n	800974a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009744:	699b      	ldr	r3, [r3, #24]
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	4798      	blx	r3
  }
}
 800974a:	bf00      	nop
 800974c:	3708      	adds	r7, #8
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}

08009752 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009752:	b580      	push	{r7, lr}
 8009754:	b082      	sub	sp, #8
 8009756:	af00      	add	r7, sp, #0
 8009758:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2201      	movs	r2, #1
 800975e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2201      	movs	r2, #1
 8009766:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009776:	2200      	movs	r2, #0
 8009778:	4619      	mov	r1, r3
 800977a:	f001 f817 	bl	800a7ac <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800977e:	bf00      	nop
}
 8009780:	3708      	adds	r7, #8
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}

08009786 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009786:	b480      	push	{r7}
 8009788:	b083      	sub	sp, #12
 800978a:	af00      	add	r7, sp, #0
 800978c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2200      	movs	r2, #0
 8009792:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009796:	bf00      	nop
}
 8009798:	370c      	adds	r7, #12
 800979a:	46bd      	mov	sp, r7
 800979c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a0:	4770      	bx	lr

080097a2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80097a2:	b580      	push	{r7, lr}
 80097a4:	b082      	sub	sp, #8
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2201      	movs	r2, #1
 80097ae:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2200      	movs	r2, #0
 80097b6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2200      	movs	r2, #0
 80097be:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2201      	movs	r2, #1
 80097c6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80097d6:	2200      	movs	r2, #0
 80097d8:	4619      	mov	r1, r3
 80097da:	f000 ffe7 	bl	800a7ac <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80097de:	2300      	movs	r3, #0
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3708      	adds	r7, #8
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b082      	sub	sp, #8
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2201      	movs	r2, #1
 80097f4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2200      	movs	r2, #0
 80097fc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2200      	movs	r2, #0
 8009804:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f003 fb14 	bl	800ce36 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	791b      	ldrb	r3, [r3, #4]
 8009812:	4619      	mov	r1, r3
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f000 fecd 	bl	800a5b4 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	795b      	ldrb	r3, [r3, #5]
 800981e:	4619      	mov	r1, r3
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f000 fec7 	bl	800a5b4 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2201      	movs	r2, #1
 800982a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800983a:	2200      	movs	r2, #0
 800983c:	4619      	mov	r1, r3
 800983e:	f000 ffb5 	bl	800a7ac <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009842:	2300      	movs	r3, #0
}
 8009844:	4618      	mov	r0, r3
 8009846:	3708      	adds	r7, #8
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}

0800984c <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b086      	sub	sp, #24
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 800985a:	f107 030c 	add.w	r3, r7, #12
 800985e:	f04f 32ff 	mov.w	r2, #4294967295
 8009862:	4618      	mov	r0, r3
 8009864:	f000 ffe2 	bl	800a82c <osMessageGet>
    if (event.status == osEventMessage)
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2b10      	cmp	r3, #16
 800986c:	d1f2      	bne.n	8009854 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f7ff faa8 	bl	8008dc4 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8009874:	e7ee      	b.n	8009854 <USBH_Process_OS+0x8>

08009876 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8009876:	b580      	push	{r7, lr}
 8009878:	b082      	sub	sp, #8
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2201      	movs	r2, #1
 8009882:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009892:	2200      	movs	r2, #0
 8009894:	4619      	mov	r1, r3
 8009896:	f000 ff89 	bl	800a7ac <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800989a:	2300      	movs	r3, #0
}
 800989c:	4618      	mov	r0, r3
 800989e:	3708      	adds	r7, #8
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}

080098a4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b086      	sub	sp, #24
 80098a8:	af02      	add	r7, sp, #8
 80098aa:	6078      	str	r0, [r7, #4]
 80098ac:	460b      	mov	r3, r1
 80098ae:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80098b6:	78fb      	ldrb	r3, [r7, #3]
 80098b8:	b29b      	uxth	r3, r3
 80098ba:	9300      	str	r3, [sp, #0]
 80098bc:	4613      	mov	r3, r2
 80098be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80098c2:	2100      	movs	r1, #0
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f000 f864 	bl	8009992 <USBH_GetDescriptor>
 80098ca:	4603      	mov	r3, r0
 80098cc:	73fb      	strb	r3, [r7, #15]
 80098ce:	7bfb      	ldrb	r3, [r7, #15]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d10a      	bne.n	80098ea <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f203 3026 	addw	r0, r3, #806	; 0x326
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80098e0:	78fa      	ldrb	r2, [r7, #3]
 80098e2:	b292      	uxth	r2, r2
 80098e4:	4619      	mov	r1, r3
 80098e6:	f000 f918 	bl	8009b1a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80098ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3710      	adds	r7, #16
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}

080098f4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b086      	sub	sp, #24
 80098f8:	af02      	add	r7, sp, #8
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	460b      	mov	r3, r1
 80098fe:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	331c      	adds	r3, #28
 8009904:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009906:	887b      	ldrh	r3, [r7, #2]
 8009908:	9300      	str	r3, [sp, #0]
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009910:	2100      	movs	r1, #0
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f000 f83d 	bl	8009992 <USBH_GetDescriptor>
 8009918:	4603      	mov	r3, r0
 800991a:	72fb      	strb	r3, [r7, #11]
 800991c:	7afb      	ldrb	r3, [r7, #11]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d107      	bne.n	8009932 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009928:	887a      	ldrh	r2, [r7, #2]
 800992a:	68f9      	ldr	r1, [r7, #12]
 800992c:	4618      	mov	r0, r3
 800992e:	f000 f964 	bl	8009bfa <USBH_ParseCfgDesc>
  }

  return status;
 8009932:	7afb      	ldrb	r3, [r7, #11]
}
 8009934:	4618      	mov	r0, r3
 8009936:	3710      	adds	r7, #16
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b088      	sub	sp, #32
 8009940:	af02      	add	r7, sp, #8
 8009942:	60f8      	str	r0, [r7, #12]
 8009944:	607a      	str	r2, [r7, #4]
 8009946:	461a      	mov	r2, r3
 8009948:	460b      	mov	r3, r1
 800994a:	72fb      	strb	r3, [r7, #11]
 800994c:	4613      	mov	r3, r2
 800994e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8009950:	7afb      	ldrb	r3, [r7, #11]
 8009952:	b29b      	uxth	r3, r3
 8009954:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009958:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009960:	893b      	ldrh	r3, [r7, #8]
 8009962:	9300      	str	r3, [sp, #0]
 8009964:	460b      	mov	r3, r1
 8009966:	2100      	movs	r1, #0
 8009968:	68f8      	ldr	r0, [r7, #12]
 800996a:	f000 f812 	bl	8009992 <USBH_GetDescriptor>
 800996e:	4603      	mov	r3, r0
 8009970:	75fb      	strb	r3, [r7, #23]
 8009972:	7dfb      	ldrb	r3, [r7, #23]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d107      	bne.n	8009988 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800997e:	893a      	ldrh	r2, [r7, #8]
 8009980:	6879      	ldr	r1, [r7, #4]
 8009982:	4618      	mov	r0, r3
 8009984:	f000 fa37 	bl	8009df6 <USBH_ParseStringDesc>
  }

  return status;
 8009988:	7dfb      	ldrb	r3, [r7, #23]
}
 800998a:	4618      	mov	r0, r3
 800998c:	3718      	adds	r7, #24
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}

08009992 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009992:	b580      	push	{r7, lr}
 8009994:	b084      	sub	sp, #16
 8009996:	af00      	add	r7, sp, #0
 8009998:	60f8      	str	r0, [r7, #12]
 800999a:	607b      	str	r3, [r7, #4]
 800999c:	460b      	mov	r3, r1
 800999e:	72fb      	strb	r3, [r7, #11]
 80099a0:	4613      	mov	r3, r2
 80099a2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	789b      	ldrb	r3, [r3, #2]
 80099a8:	2b01      	cmp	r3, #1
 80099aa:	d11c      	bne.n	80099e6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80099ac:	7afb      	ldrb	r3, [r7, #11]
 80099ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80099b2:	b2da      	uxtb	r2, r3
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	2206      	movs	r2, #6
 80099bc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	893a      	ldrh	r2, [r7, #8]
 80099c2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80099c4:	893b      	ldrh	r3, [r7, #8]
 80099c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80099ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80099ce:	d104      	bne.n	80099da <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	f240 4209 	movw	r2, #1033	; 0x409
 80099d6:	829a      	strh	r2, [r3, #20]
 80099d8:	e002      	b.n	80099e0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	2200      	movs	r2, #0
 80099de:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	8b3a      	ldrh	r2, [r7, #24]
 80099e4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80099e6:	8b3b      	ldrh	r3, [r7, #24]
 80099e8:	461a      	mov	r2, r3
 80099ea:	6879      	ldr	r1, [r7, #4]
 80099ec:	68f8      	ldr	r0, [r7, #12]
 80099ee:	f000 fa50 	bl	8009e92 <USBH_CtlReq>
 80099f2:	4603      	mov	r3, r0
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3710      	adds	r7, #16
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}

080099fc <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b082      	sub	sp, #8
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	460b      	mov	r3, r1
 8009a06:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	789b      	ldrb	r3, [r3, #2]
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	d10f      	bne.n	8009a30 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2200      	movs	r2, #0
 8009a14:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2205      	movs	r2, #5
 8009a1a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009a1c:	78fb      	ldrb	r3, [r7, #3]
 8009a1e:	b29a      	uxth	r2, r3
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2200      	movs	r2, #0
 8009a28:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009a30:	2200      	movs	r2, #0
 8009a32:	2100      	movs	r1, #0
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f000 fa2c 	bl	8009e92 <USBH_CtlReq>
 8009a3a:	4603      	mov	r3, r0
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3708      	adds	r7, #8
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b082      	sub	sp, #8
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	460b      	mov	r3, r1
 8009a4e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	789b      	ldrb	r3, [r3, #2]
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	d10e      	bne.n	8009a76 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2209      	movs	r2, #9
 8009a62:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	887a      	ldrh	r2, [r7, #2]
 8009a68:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2200      	movs	r2, #0
 8009a74:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009a76:	2200      	movs	r2, #0
 8009a78:	2100      	movs	r1, #0
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f000 fa09 	bl	8009e92 <USBH_CtlReq>
 8009a80:	4603      	mov	r3, r0
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3708      	adds	r7, #8
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}

08009a8a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009a8a:	b580      	push	{r7, lr}
 8009a8c:	b082      	sub	sp, #8
 8009a8e:	af00      	add	r7, sp, #0
 8009a90:	6078      	str	r0, [r7, #4]
 8009a92:	460b      	mov	r3, r1
 8009a94:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	789b      	ldrb	r3, [r3, #2]
 8009a9a:	2b01      	cmp	r3, #1
 8009a9c:	d10f      	bne.n	8009abe <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2203      	movs	r2, #3
 8009aa8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009aaa:	78fb      	ldrb	r3, [r7, #3]
 8009aac:	b29a      	uxth	r2, r3
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2200      	movs	r2, #0
 8009abc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009abe:	2200      	movs	r2, #0
 8009ac0:	2100      	movs	r1, #0
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f000 f9e5 	bl	8009e92 <USBH_CtlReq>
 8009ac8:	4603      	mov	r3, r0
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3708      	adds	r7, #8
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}

08009ad2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009ad2:	b580      	push	{r7, lr}
 8009ad4:	b082      	sub	sp, #8
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	6078      	str	r0, [r7, #4]
 8009ada:	460b      	mov	r3, r1
 8009adc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	789b      	ldrb	r3, [r3, #2]
 8009ae2:	2b01      	cmp	r3, #1
 8009ae4:	d10f      	bne.n	8009b06 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2202      	movs	r2, #2
 8009aea:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2201      	movs	r2, #1
 8009af0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2200      	movs	r2, #0
 8009af6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009af8:	78fb      	ldrb	r3, [r7, #3]
 8009afa:	b29a      	uxth	r2, r3
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2200      	movs	r2, #0
 8009b04:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8009b06:	2200      	movs	r2, #0
 8009b08:	2100      	movs	r1, #0
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f000 f9c1 	bl	8009e92 <USBH_CtlReq>
 8009b10:	4603      	mov	r3, r0
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3708      	adds	r7, #8
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}

08009b1a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8009b1a:	b480      	push	{r7}
 8009b1c:	b085      	sub	sp, #20
 8009b1e:	af00      	add	r7, sp, #0
 8009b20:	60f8      	str	r0, [r7, #12]
 8009b22:	60b9      	str	r1, [r7, #8]
 8009b24:	4613      	mov	r3, r2
 8009b26:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	781a      	ldrb	r2, [r3, #0]
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	785a      	ldrb	r2, [r3, #1]
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	3302      	adds	r3, #2
 8009b3c:	781b      	ldrb	r3, [r3, #0]
 8009b3e:	b29a      	uxth	r2, r3
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	3303      	adds	r3, #3
 8009b44:	781b      	ldrb	r3, [r3, #0]
 8009b46:	b29b      	uxth	r3, r3
 8009b48:	021b      	lsls	r3, r3, #8
 8009b4a:	b29b      	uxth	r3, r3
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	b29a      	uxth	r2, r3
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	791a      	ldrb	r2, [r3, #4]
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	795a      	ldrb	r2, [r3, #5]
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	799a      	ldrb	r2, [r3, #6]
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	79da      	ldrb	r2, [r3, #7]
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8009b74:	88fb      	ldrh	r3, [r7, #6]
 8009b76:	2b08      	cmp	r3, #8
 8009b78:	d939      	bls.n	8009bee <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	3308      	adds	r3, #8
 8009b7e:	781b      	ldrb	r3, [r3, #0]
 8009b80:	b29a      	uxth	r2, r3
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	3309      	adds	r3, #9
 8009b86:	781b      	ldrb	r3, [r3, #0]
 8009b88:	b29b      	uxth	r3, r3
 8009b8a:	021b      	lsls	r3, r3, #8
 8009b8c:	b29b      	uxth	r3, r3
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	b29a      	uxth	r2, r3
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	330a      	adds	r3, #10
 8009b9a:	781b      	ldrb	r3, [r3, #0]
 8009b9c:	b29a      	uxth	r2, r3
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	330b      	adds	r3, #11
 8009ba2:	781b      	ldrb	r3, [r3, #0]
 8009ba4:	b29b      	uxth	r3, r3
 8009ba6:	021b      	lsls	r3, r3, #8
 8009ba8:	b29b      	uxth	r3, r3
 8009baa:	4313      	orrs	r3, r2
 8009bac:	b29a      	uxth	r2, r3
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	330c      	adds	r3, #12
 8009bb6:	781b      	ldrb	r3, [r3, #0]
 8009bb8:	b29a      	uxth	r2, r3
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	330d      	adds	r3, #13
 8009bbe:	781b      	ldrb	r3, [r3, #0]
 8009bc0:	b29b      	uxth	r3, r3
 8009bc2:	021b      	lsls	r3, r3, #8
 8009bc4:	b29b      	uxth	r3, r3
 8009bc6:	4313      	orrs	r3, r2
 8009bc8:	b29a      	uxth	r2, r3
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	7b9a      	ldrb	r2, [r3, #14]
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	7bda      	ldrb	r2, [r3, #15]
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	7c1a      	ldrb	r2, [r3, #16]
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	7c5a      	ldrb	r2, [r3, #17]
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	745a      	strb	r2, [r3, #17]
  }
}
 8009bee:	bf00      	nop
 8009bf0:	3714      	adds	r7, #20
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf8:	4770      	bx	lr

08009bfa <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8009bfa:	b580      	push	{r7, lr}
 8009bfc:	b08a      	sub	sp, #40	; 0x28
 8009bfe:	af00      	add	r7, sp, #0
 8009c00:	60f8      	str	r0, [r7, #12]
 8009c02:	60b9      	str	r1, [r7, #8]
 8009c04:	4613      	mov	r3, r2
 8009c06:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8009c12:	2300      	movs	r3, #0
 8009c14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	781a      	ldrb	r2, [r3, #0]
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	785a      	ldrb	r2, [r3, #1]
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	3302      	adds	r3, #2
 8009c30:	781b      	ldrb	r3, [r3, #0]
 8009c32:	b29a      	uxth	r2, r3
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	3303      	adds	r3, #3
 8009c38:	781b      	ldrb	r3, [r3, #0]
 8009c3a:	b29b      	uxth	r3, r3
 8009c3c:	021b      	lsls	r3, r3, #8
 8009c3e:	b29b      	uxth	r3, r3
 8009c40:	4313      	orrs	r3, r2
 8009c42:	b29a      	uxth	r2, r3
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	791a      	ldrb	r2, [r3, #4]
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	795a      	ldrb	r2, [r3, #5]
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	799a      	ldrb	r2, [r3, #6]
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	79da      	ldrb	r2, [r3, #7]
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	7a1a      	ldrb	r2, [r3, #8]
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009c70:	88fb      	ldrh	r3, [r7, #6]
 8009c72:	2b09      	cmp	r3, #9
 8009c74:	d95f      	bls.n	8009d36 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8009c76:	2309      	movs	r3, #9
 8009c78:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009c7e:	e051      	b.n	8009d24 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009c80:	f107 0316 	add.w	r3, r7, #22
 8009c84:	4619      	mov	r1, r3
 8009c86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009c88:	f000 f8e8 	bl	8009e5c <USBH_GetNextDesc>
 8009c8c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8009c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c90:	785b      	ldrb	r3, [r3, #1]
 8009c92:	2b04      	cmp	r3, #4
 8009c94:	d146      	bne.n	8009d24 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8009c96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009c9a:	221a      	movs	r2, #26
 8009c9c:	fb02 f303 	mul.w	r3, r2, r3
 8009ca0:	3308      	adds	r3, #8
 8009ca2:	68fa      	ldr	r2, [r7, #12]
 8009ca4:	4413      	add	r3, r2
 8009ca6:	3302      	adds	r3, #2
 8009ca8:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009caa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009cac:	69f8      	ldr	r0, [r7, #28]
 8009cae:	f000 f846 	bl	8009d3e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009cbc:	e022      	b.n	8009d04 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009cbe:	f107 0316 	add.w	r3, r7, #22
 8009cc2:	4619      	mov	r1, r3
 8009cc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009cc6:	f000 f8c9 	bl	8009e5c <USBH_GetNextDesc>
 8009cca:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8009ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cce:	785b      	ldrb	r3, [r3, #1]
 8009cd0:	2b05      	cmp	r3, #5
 8009cd2:	d117      	bne.n	8009d04 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009cd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009cd8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009cdc:	3201      	adds	r2, #1
 8009cde:	00d2      	lsls	r2, r2, #3
 8009ce0:	211a      	movs	r1, #26
 8009ce2:	fb01 f303 	mul.w	r3, r1, r3
 8009ce6:	4413      	add	r3, r2
 8009ce8:	3308      	adds	r3, #8
 8009cea:	68fa      	ldr	r2, [r7, #12]
 8009cec:	4413      	add	r3, r2
 8009cee:	3304      	adds	r3, #4
 8009cf0:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8009cf2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009cf4:	69b8      	ldr	r0, [r7, #24]
 8009cf6:	f000 f851 	bl	8009d9c <USBH_ParseEPDesc>
            ep_ix++;
 8009cfa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009cfe:	3301      	adds	r3, #1
 8009d00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009d04:	69fb      	ldr	r3, [r7, #28]
 8009d06:	791b      	ldrb	r3, [r3, #4]
 8009d08:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	d204      	bcs.n	8009d1a <USBH_ParseCfgDesc+0x120>
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	885a      	ldrh	r2, [r3, #2]
 8009d14:	8afb      	ldrh	r3, [r7, #22]
 8009d16:	429a      	cmp	r2, r3
 8009d18:	d8d1      	bhi.n	8009cbe <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8009d1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009d1e:	3301      	adds	r3, #1
 8009d20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009d24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009d28:	2b01      	cmp	r3, #1
 8009d2a:	d804      	bhi.n	8009d36 <USBH_ParseCfgDesc+0x13c>
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	885a      	ldrh	r2, [r3, #2]
 8009d30:	8afb      	ldrh	r3, [r7, #22]
 8009d32:	429a      	cmp	r2, r3
 8009d34:	d8a4      	bhi.n	8009c80 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8009d36:	bf00      	nop
 8009d38:	3728      	adds	r7, #40	; 0x28
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}

08009d3e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8009d3e:	b480      	push	{r7}
 8009d40:	b083      	sub	sp, #12
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	6078      	str	r0, [r7, #4]
 8009d46:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	781a      	ldrb	r2, [r3, #0]
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	785a      	ldrb	r2, [r3, #1]
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	789a      	ldrb	r2, [r3, #2]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	78da      	ldrb	r2, [r3, #3]
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	791a      	ldrb	r2, [r3, #4]
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	795a      	ldrb	r2, [r3, #5]
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	799a      	ldrb	r2, [r3, #6]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	79da      	ldrb	r2, [r3, #7]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	7a1a      	ldrb	r2, [r3, #8]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	721a      	strb	r2, [r3, #8]
}
 8009d90:	bf00      	nop
 8009d92:	370c      	adds	r7, #12
 8009d94:	46bd      	mov	sp, r7
 8009d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9a:	4770      	bx	lr

08009d9c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b083      	sub	sp, #12
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	781a      	ldrb	r2, [r3, #0]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	785a      	ldrb	r2, [r3, #1]
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	789a      	ldrb	r2, [r3, #2]
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	78da      	ldrb	r2, [r3, #3]
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	3304      	adds	r3, #4
 8009dca:	781b      	ldrb	r3, [r3, #0]
 8009dcc:	b29a      	uxth	r2, r3
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	3305      	adds	r3, #5
 8009dd2:	781b      	ldrb	r3, [r3, #0]
 8009dd4:	b29b      	uxth	r3, r3
 8009dd6:	021b      	lsls	r3, r3, #8
 8009dd8:	b29b      	uxth	r3, r3
 8009dda:	4313      	orrs	r3, r2
 8009ddc:	b29a      	uxth	r2, r3
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	799a      	ldrb	r2, [r3, #6]
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	719a      	strb	r2, [r3, #6]
}
 8009dea:	bf00      	nop
 8009dec:	370c      	adds	r7, #12
 8009dee:	46bd      	mov	sp, r7
 8009df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df4:	4770      	bx	lr

08009df6 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009df6:	b480      	push	{r7}
 8009df8:	b087      	sub	sp, #28
 8009dfa:	af00      	add	r7, sp, #0
 8009dfc:	60f8      	str	r0, [r7, #12]
 8009dfe:	60b9      	str	r1, [r7, #8]
 8009e00:	4613      	mov	r3, r2
 8009e02:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	3301      	adds	r3, #1
 8009e08:	781b      	ldrb	r3, [r3, #0]
 8009e0a:	2b03      	cmp	r3, #3
 8009e0c:	d120      	bne.n	8009e50 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	781b      	ldrb	r3, [r3, #0]
 8009e12:	1e9a      	subs	r2, r3, #2
 8009e14:	88fb      	ldrh	r3, [r7, #6]
 8009e16:	4293      	cmp	r3, r2
 8009e18:	bf28      	it	cs
 8009e1a:	4613      	movcs	r3, r2
 8009e1c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	3302      	adds	r3, #2
 8009e22:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009e24:	2300      	movs	r3, #0
 8009e26:	82fb      	strh	r3, [r7, #22]
 8009e28:	e00b      	b.n	8009e42 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009e2a:	8afb      	ldrh	r3, [r7, #22]
 8009e2c:	68fa      	ldr	r2, [r7, #12]
 8009e2e:	4413      	add	r3, r2
 8009e30:	781a      	ldrb	r2, [r3, #0]
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	3301      	adds	r3, #1
 8009e3a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009e3c:	8afb      	ldrh	r3, [r7, #22]
 8009e3e:	3302      	adds	r3, #2
 8009e40:	82fb      	strh	r3, [r7, #22]
 8009e42:	8afa      	ldrh	r2, [r7, #22]
 8009e44:	8abb      	ldrh	r3, [r7, #20]
 8009e46:	429a      	cmp	r2, r3
 8009e48:	d3ef      	bcc.n	8009e2a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	701a      	strb	r2, [r3, #0]
  }
}
 8009e50:	bf00      	nop
 8009e52:	371c      	adds	r7, #28
 8009e54:	46bd      	mov	sp, r7
 8009e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5a:	4770      	bx	lr

08009e5c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b085      	sub	sp, #20
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	881a      	ldrh	r2, [r3, #0]
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	781b      	ldrb	r3, [r3, #0]
 8009e6e:	b29b      	uxth	r3, r3
 8009e70:	4413      	add	r3, r2
 8009e72:	b29a      	uxth	r2, r3
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	781b      	ldrb	r3, [r3, #0]
 8009e7c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	4413      	add	r3, r2
 8009e82:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009e84:	68fb      	ldr	r3, [r7, #12]
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3714      	adds	r7, #20
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e90:	4770      	bx	lr

08009e92 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009e92:	b580      	push	{r7, lr}
 8009e94:	b086      	sub	sp, #24
 8009e96:	af00      	add	r7, sp, #0
 8009e98:	60f8      	str	r0, [r7, #12]
 8009e9a:	60b9      	str	r1, [r7, #8]
 8009e9c:	4613      	mov	r3, r2
 8009e9e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	789b      	ldrb	r3, [r3, #2]
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	d002      	beq.n	8009eb2 <USBH_CtlReq+0x20>
 8009eac:	2b02      	cmp	r3, #2
 8009eae:	d01d      	beq.n	8009eec <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8009eb0:	e043      	b.n	8009f3a <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	68ba      	ldr	r2, [r7, #8]
 8009eb6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	88fa      	ldrh	r2, [r7, #6]
 8009ebc:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	2202      	movs	r2, #2
 8009ec8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009eca:	2301      	movs	r3, #1
 8009ecc:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2203      	movs	r2, #3
 8009ed2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	4619      	mov	r1, r3
 8009ee6:	f000 fc61 	bl	800a7ac <osMessagePut>
      break;
 8009eea:	e026      	b.n	8009f3a <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8009eec:	68f8      	ldr	r0, [r7, #12]
 8009eee:	f000 f829 	bl	8009f44 <USBH_HandleControl>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009ef6:	7dfb      	ldrb	r3, [r7, #23]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d002      	beq.n	8009f02 <USBH_CtlReq+0x70>
 8009efc:	7dfb      	ldrb	r3, [r7, #23]
 8009efe:	2b03      	cmp	r3, #3
 8009f00:	d106      	bne.n	8009f10 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	2201      	movs	r2, #1
 8009f06:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	761a      	strb	r2, [r3, #24]
 8009f0e:	e005      	b.n	8009f1c <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8009f10:	7dfb      	ldrb	r3, [r7, #23]
 8009f12:	2b02      	cmp	r3, #2
 8009f14:	d102      	bne.n	8009f1c <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	2201      	movs	r2, #1
 8009f1a:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	2203      	movs	r2, #3
 8009f20:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009f30:	2200      	movs	r2, #0
 8009f32:	4619      	mov	r1, r3
 8009f34:	f000 fc3a 	bl	800a7ac <osMessagePut>
      break;
 8009f38:	bf00      	nop
  }
  return status;
 8009f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3718      	adds	r7, #24
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}

08009f44 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b086      	sub	sp, #24
 8009f48:	af02      	add	r7, sp, #8
 8009f4a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009f50:	2300      	movs	r3, #0
 8009f52:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	7e1b      	ldrb	r3, [r3, #24]
 8009f58:	3b01      	subs	r3, #1
 8009f5a:	2b0a      	cmp	r3, #10
 8009f5c:	f200 8229 	bhi.w	800a3b2 <USBH_HandleControl+0x46e>
 8009f60:	a201      	add	r2, pc, #4	; (adr r2, 8009f68 <USBH_HandleControl+0x24>)
 8009f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f66:	bf00      	nop
 8009f68:	08009f95 	.word	0x08009f95
 8009f6c:	08009faf 	.word	0x08009faf
 8009f70:	0800a051 	.word	0x0800a051
 8009f74:	0800a077 	.word	0x0800a077
 8009f78:	0800a103 	.word	0x0800a103
 8009f7c:	0800a12d 	.word	0x0800a12d
 8009f80:	0800a1ef 	.word	0x0800a1ef
 8009f84:	0800a211 	.word	0x0800a211
 8009f88:	0800a2a3 	.word	0x0800a2a3
 8009f8c:	0800a2c9 	.word	0x0800a2c9
 8009f90:	0800a35b 	.word	0x0800a35b
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f103 0110 	add.w	r1, r3, #16
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	795b      	ldrb	r3, [r3, #5]
 8009f9e:	461a      	mov	r2, r3
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f000 fa17 	bl	800a3d4 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2202      	movs	r2, #2
 8009faa:	761a      	strb	r2, [r3, #24]
      break;
 8009fac:	e20c      	b.n	800a3c8 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	795b      	ldrb	r3, [r3, #5]
 8009fb2:	4619      	mov	r1, r3
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f003 f82d 	bl	800d014 <USBH_LL_GetURBState>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009fbe:	7bbb      	ldrb	r3, [r7, #14]
 8009fc0:	2b01      	cmp	r3, #1
 8009fc2:	d12c      	bne.n	800a01e <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	7c1b      	ldrb	r3, [r3, #16]
 8009fc8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009fcc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	8adb      	ldrh	r3, [r3, #22]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d00a      	beq.n	8009fec <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009fd6:	7b7b      	ldrb	r3, [r7, #13]
 8009fd8:	2b80      	cmp	r3, #128	; 0x80
 8009fda:	d103      	bne.n	8009fe4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2203      	movs	r2, #3
 8009fe0:	761a      	strb	r2, [r3, #24]
 8009fe2:	e00d      	b.n	800a000 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2205      	movs	r2, #5
 8009fe8:	761a      	strb	r2, [r3, #24]
 8009fea:	e009      	b.n	800a000 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8009fec:	7b7b      	ldrb	r3, [r7, #13]
 8009fee:	2b80      	cmp	r3, #128	; 0x80
 8009ff0:	d103      	bne.n	8009ffa <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2209      	movs	r2, #9
 8009ff6:	761a      	strb	r2, [r3, #24]
 8009ff8:	e002      	b.n	800a000 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2207      	movs	r2, #7
 8009ffe:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2203      	movs	r2, #3
 800a004:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a014:	2200      	movs	r2, #0
 800a016:	4619      	mov	r1, r3
 800a018:	f000 fbc8 	bl	800a7ac <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a01c:	e1cb      	b.n	800a3b6 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a01e:	7bbb      	ldrb	r3, [r7, #14]
 800a020:	2b04      	cmp	r3, #4
 800a022:	d003      	beq.n	800a02c <USBH_HandleControl+0xe8>
 800a024:	7bbb      	ldrb	r3, [r7, #14]
 800a026:	2b02      	cmp	r3, #2
 800a028:	f040 81c5 	bne.w	800a3b6 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	220b      	movs	r2, #11
 800a030:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2203      	movs	r2, #3
 800a036:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a046:	2200      	movs	r2, #0
 800a048:	4619      	mov	r1, r3
 800a04a:	f000 fbaf 	bl	800a7ac <osMessagePut>
      break;
 800a04e:	e1b2      	b.n	800a3b6 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a056:	b29a      	uxth	r2, r3
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6899      	ldr	r1, [r3, #8]
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	899a      	ldrh	r2, [r3, #12]
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	791b      	ldrb	r3, [r3, #4]
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f000 f9f2 	bl	800a452 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2204      	movs	r2, #4
 800a072:	761a      	strb	r2, [r3, #24]
      break;
 800a074:	e1a8      	b.n	800a3c8 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	791b      	ldrb	r3, [r3, #4]
 800a07a:	4619      	mov	r1, r3
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f002 ffc9 	bl	800d014 <USBH_LL_GetURBState>
 800a082:	4603      	mov	r3, r0
 800a084:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a086:	7bbb      	ldrb	r3, [r7, #14]
 800a088:	2b01      	cmp	r3, #1
 800a08a:	d110      	bne.n	800a0ae <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2209      	movs	r2, #9
 800a090:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2203      	movs	r2, #3
 800a096:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	f000 fb7f 	bl	800a7ac <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a0ae:	7bbb      	ldrb	r3, [r7, #14]
 800a0b0:	2b05      	cmp	r3, #5
 800a0b2:	d110      	bne.n	800a0d6 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a0b4:	2303      	movs	r3, #3
 800a0b6:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2203      	movs	r2, #3
 800a0bc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	4619      	mov	r1, r3
 800a0d0:	f000 fb6c 	bl	800a7ac <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a0d4:	e171      	b.n	800a3ba <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800a0d6:	7bbb      	ldrb	r3, [r7, #14]
 800a0d8:	2b04      	cmp	r3, #4
 800a0da:	f040 816e 	bne.w	800a3ba <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	220b      	movs	r2, #11
 800a0e2:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2203      	movs	r2, #3
 800a0e8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	4619      	mov	r1, r3
 800a0fc:	f000 fb56 	bl	800a7ac <osMessagePut>
      break;
 800a100:	e15b      	b.n	800a3ba <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6899      	ldr	r1, [r3, #8]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	899a      	ldrh	r2, [r3, #12]
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	795b      	ldrb	r3, [r3, #5]
 800a10e:	2001      	movs	r0, #1
 800a110:	9000      	str	r0, [sp, #0]
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f000 f978 	bl	800a408 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a11e:	b29a      	uxth	r2, r3
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2206      	movs	r2, #6
 800a128:	761a      	strb	r2, [r3, #24]
      break;
 800a12a:	e14d      	b.n	800a3c8 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	795b      	ldrb	r3, [r3, #5]
 800a130:	4619      	mov	r1, r3
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f002 ff6e 	bl	800d014 <USBH_LL_GetURBState>
 800a138:	4603      	mov	r3, r0
 800a13a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a13c:	7bbb      	ldrb	r3, [r7, #14]
 800a13e:	2b01      	cmp	r3, #1
 800a140:	d111      	bne.n	800a166 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2207      	movs	r2, #7
 800a146:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2203      	movs	r2, #3
 800a14c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a15c:	2200      	movs	r2, #0
 800a15e:	4619      	mov	r1, r3
 800a160:	f000 fb24 	bl	800a7ac <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a164:	e12b      	b.n	800a3be <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800a166:	7bbb      	ldrb	r3, [r7, #14]
 800a168:	2b05      	cmp	r3, #5
 800a16a:	d113      	bne.n	800a194 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	220c      	movs	r2, #12
 800a170:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a172:	2303      	movs	r3, #3
 800a174:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2203      	movs	r2, #3
 800a17a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a18a:	2200      	movs	r2, #0
 800a18c:	4619      	mov	r1, r3
 800a18e:	f000 fb0d 	bl	800a7ac <osMessagePut>
      break;
 800a192:	e114      	b.n	800a3be <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a194:	7bbb      	ldrb	r3, [r7, #14]
 800a196:	2b02      	cmp	r3, #2
 800a198:	d111      	bne.n	800a1be <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2205      	movs	r2, #5
 800a19e:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2203      	movs	r2, #3
 800a1a4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	4619      	mov	r1, r3
 800a1b8:	f000 faf8 	bl	800a7ac <osMessagePut>
      break;
 800a1bc:	e0ff      	b.n	800a3be <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800a1be:	7bbb      	ldrb	r3, [r7, #14]
 800a1c0:	2b04      	cmp	r3, #4
 800a1c2:	f040 80fc 	bne.w	800a3be <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	220b      	movs	r2, #11
 800a1ca:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a1cc:	2302      	movs	r3, #2
 800a1ce:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2203      	movs	r2, #3
 800a1d4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	4619      	mov	r1, r3
 800a1e8:	f000 fae0 	bl	800a7ac <osMessagePut>
      break;
 800a1ec:	e0e7      	b.n	800a3be <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	791b      	ldrb	r3, [r3, #4]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	2100      	movs	r1, #0
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f000 f92b 	bl	800a452 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a202:	b29a      	uxth	r2, r3
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2208      	movs	r2, #8
 800a20c:	761a      	strb	r2, [r3, #24]

      break;
 800a20e:	e0db      	b.n	800a3c8 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	791b      	ldrb	r3, [r3, #4]
 800a214:	4619      	mov	r1, r3
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f002 fefc 	bl	800d014 <USBH_LL_GetURBState>
 800a21c:	4603      	mov	r3, r0
 800a21e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a220:	7bbb      	ldrb	r3, [r7, #14]
 800a222:	2b01      	cmp	r3, #1
 800a224:	d113      	bne.n	800a24e <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	220d      	movs	r2, #13
 800a22a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a22c:	2300      	movs	r3, #0
 800a22e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2203      	movs	r2, #3
 800a234:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a244:	2200      	movs	r2, #0
 800a246:	4619      	mov	r1, r3
 800a248:	f000 fab0 	bl	800a7ac <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a24c:	e0b9      	b.n	800a3c2 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800a24e:	7bbb      	ldrb	r3, [r7, #14]
 800a250:	2b04      	cmp	r3, #4
 800a252:	d111      	bne.n	800a278 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	220b      	movs	r2, #11
 800a258:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2203      	movs	r2, #3
 800a25e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a26e:	2200      	movs	r2, #0
 800a270:	4619      	mov	r1, r3
 800a272:	f000 fa9b 	bl	800a7ac <osMessagePut>
      break;
 800a276:	e0a4      	b.n	800a3c2 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800a278:	7bbb      	ldrb	r3, [r7, #14]
 800a27a:	2b05      	cmp	r3, #5
 800a27c:	f040 80a1 	bne.w	800a3c2 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800a280:	2303      	movs	r3, #3
 800a282:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2203      	movs	r2, #3
 800a288:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a298:	2200      	movs	r2, #0
 800a29a:	4619      	mov	r1, r3
 800a29c:	f000 fa86 	bl	800a7ac <osMessagePut>
      break;
 800a2a0:	e08f      	b.n	800a3c2 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	795b      	ldrb	r3, [r3, #5]
 800a2a6:	2201      	movs	r2, #1
 800a2a8:	9200      	str	r2, [sp, #0]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	2100      	movs	r1, #0
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f000 f8aa 	bl	800a408 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a2ba:	b29a      	uxth	r2, r3
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	220a      	movs	r2, #10
 800a2c4:	761a      	strb	r2, [r3, #24]
      break;
 800a2c6:	e07f      	b.n	800a3c8 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	795b      	ldrb	r3, [r3, #5]
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f002 fea0 	bl	800d014 <USBH_LL_GetURBState>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a2d8:	7bbb      	ldrb	r3, [r7, #14]
 800a2da:	2b01      	cmp	r3, #1
 800a2dc:	d113      	bne.n	800a306 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	220d      	movs	r2, #13
 800a2e6:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2203      	movs	r2, #3
 800a2ec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	4619      	mov	r1, r3
 800a300:	f000 fa54 	bl	800a7ac <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a304:	e05f      	b.n	800a3c6 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a306:	7bbb      	ldrb	r3, [r7, #14]
 800a308:	2b02      	cmp	r3, #2
 800a30a:	d111      	bne.n	800a330 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2209      	movs	r2, #9
 800a310:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2203      	movs	r2, #3
 800a316:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a326:	2200      	movs	r2, #0
 800a328:	4619      	mov	r1, r3
 800a32a:	f000 fa3f 	bl	800a7ac <osMessagePut>
      break;
 800a32e:	e04a      	b.n	800a3c6 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800a330:	7bbb      	ldrb	r3, [r7, #14]
 800a332:	2b04      	cmp	r3, #4
 800a334:	d147      	bne.n	800a3c6 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	220b      	movs	r2, #11
 800a33a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2203      	movs	r2, #3
 800a340:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a350:	2200      	movs	r2, #0
 800a352:	4619      	mov	r1, r3
 800a354:	f000 fa2a 	bl	800a7ac <osMessagePut>
      break;
 800a358:	e035      	b.n	800a3c6 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	7e5b      	ldrb	r3, [r3, #25]
 800a35e:	3301      	adds	r3, #1
 800a360:	b2da      	uxtb	r2, r3
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	765a      	strb	r2, [r3, #25]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	7e5b      	ldrb	r3, [r3, #25]
 800a36a:	2b02      	cmp	r3, #2
 800a36c:	d806      	bhi.n	800a37c <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2201      	movs	r2, #1
 800a372:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2201      	movs	r2, #1
 800a378:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a37a:	e025      	b.n	800a3c8 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a382:	2106      	movs	r1, #6
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2200      	movs	r2, #0
 800a38c:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	795b      	ldrb	r3, [r3, #5]
 800a392:	4619      	mov	r1, r3
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f000 f90d 	bl	800a5b4 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	791b      	ldrb	r3, [r3, #4]
 800a39e:	4619      	mov	r1, r3
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f000 f907 	bl	800a5b4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a3ac:	2302      	movs	r3, #2
 800a3ae:	73fb      	strb	r3, [r7, #15]
      break;
 800a3b0:	e00a      	b.n	800a3c8 <USBH_HandleControl+0x484>

    default:
      break;
 800a3b2:	bf00      	nop
 800a3b4:	e008      	b.n	800a3c8 <USBH_HandleControl+0x484>
      break;
 800a3b6:	bf00      	nop
 800a3b8:	e006      	b.n	800a3c8 <USBH_HandleControl+0x484>
      break;
 800a3ba:	bf00      	nop
 800a3bc:	e004      	b.n	800a3c8 <USBH_HandleControl+0x484>
      break;
 800a3be:	bf00      	nop
 800a3c0:	e002      	b.n	800a3c8 <USBH_HandleControl+0x484>
      break;
 800a3c2:	bf00      	nop
 800a3c4:	e000      	b.n	800a3c8 <USBH_HandleControl+0x484>
      break;
 800a3c6:	bf00      	nop
  }

  return status;
 800a3c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3710      	adds	r7, #16
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}
 800a3d2:	bf00      	nop

0800a3d4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b088      	sub	sp, #32
 800a3d8:	af04      	add	r7, sp, #16
 800a3da:	60f8      	str	r0, [r7, #12]
 800a3dc:	60b9      	str	r1, [r7, #8]
 800a3de:	4613      	mov	r3, r2
 800a3e0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a3e2:	79f9      	ldrb	r1, [r7, #7]
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	9303      	str	r3, [sp, #12]
 800a3e8:	2308      	movs	r3, #8
 800a3ea:	9302      	str	r3, [sp, #8]
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	9301      	str	r3, [sp, #4]
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	9300      	str	r3, [sp, #0]
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	68f8      	ldr	r0, [r7, #12]
 800a3fa:	f002 fdda 	bl	800cfb2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800a3fe:	2300      	movs	r3, #0
}
 800a400:	4618      	mov	r0, r3
 800a402:	3710      	adds	r7, #16
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}

0800a408 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b088      	sub	sp, #32
 800a40c:	af04      	add	r7, sp, #16
 800a40e:	60f8      	str	r0, [r7, #12]
 800a410:	60b9      	str	r1, [r7, #8]
 800a412:	4611      	mov	r1, r2
 800a414:	461a      	mov	r2, r3
 800a416:	460b      	mov	r3, r1
 800a418:	80fb      	strh	r3, [r7, #6]
 800a41a:	4613      	mov	r3, r2
 800a41c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a424:	2b00      	cmp	r3, #0
 800a426:	d001      	beq.n	800a42c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a428:	2300      	movs	r3, #0
 800a42a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a42c:	7979      	ldrb	r1, [r7, #5]
 800a42e:	7e3b      	ldrb	r3, [r7, #24]
 800a430:	9303      	str	r3, [sp, #12]
 800a432:	88fb      	ldrh	r3, [r7, #6]
 800a434:	9302      	str	r3, [sp, #8]
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	9301      	str	r3, [sp, #4]
 800a43a:	2301      	movs	r3, #1
 800a43c:	9300      	str	r3, [sp, #0]
 800a43e:	2300      	movs	r3, #0
 800a440:	2200      	movs	r2, #0
 800a442:	68f8      	ldr	r0, [r7, #12]
 800a444:	f002 fdb5 	bl	800cfb2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a448:	2300      	movs	r3, #0
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	3710      	adds	r7, #16
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}

0800a452 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a452:	b580      	push	{r7, lr}
 800a454:	b088      	sub	sp, #32
 800a456:	af04      	add	r7, sp, #16
 800a458:	60f8      	str	r0, [r7, #12]
 800a45a:	60b9      	str	r1, [r7, #8]
 800a45c:	4611      	mov	r1, r2
 800a45e:	461a      	mov	r2, r3
 800a460:	460b      	mov	r3, r1
 800a462:	80fb      	strh	r3, [r7, #6]
 800a464:	4613      	mov	r3, r2
 800a466:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a468:	7979      	ldrb	r1, [r7, #5]
 800a46a:	2300      	movs	r3, #0
 800a46c:	9303      	str	r3, [sp, #12]
 800a46e:	88fb      	ldrh	r3, [r7, #6]
 800a470:	9302      	str	r3, [sp, #8]
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	9301      	str	r3, [sp, #4]
 800a476:	2301      	movs	r3, #1
 800a478:	9300      	str	r3, [sp, #0]
 800a47a:	2300      	movs	r3, #0
 800a47c:	2201      	movs	r2, #1
 800a47e:	68f8      	ldr	r0, [r7, #12]
 800a480:	f002 fd97 	bl	800cfb2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a484:	2300      	movs	r3, #0

}
 800a486:	4618      	mov	r0, r3
 800a488:	3710      	adds	r7, #16
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}

0800a48e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a48e:	b580      	push	{r7, lr}
 800a490:	b088      	sub	sp, #32
 800a492:	af04      	add	r7, sp, #16
 800a494:	60f8      	str	r0, [r7, #12]
 800a496:	60b9      	str	r1, [r7, #8]
 800a498:	4611      	mov	r1, r2
 800a49a:	461a      	mov	r2, r3
 800a49c:	460b      	mov	r3, r1
 800a49e:	80fb      	strh	r3, [r7, #6]
 800a4a0:	4613      	mov	r3, r2
 800a4a2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d001      	beq.n	800a4b2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a4b2:	7979      	ldrb	r1, [r7, #5]
 800a4b4:	7e3b      	ldrb	r3, [r7, #24]
 800a4b6:	9303      	str	r3, [sp, #12]
 800a4b8:	88fb      	ldrh	r3, [r7, #6]
 800a4ba:	9302      	str	r3, [sp, #8]
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	9301      	str	r3, [sp, #4]
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	9300      	str	r3, [sp, #0]
 800a4c4:	2302      	movs	r3, #2
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	68f8      	ldr	r0, [r7, #12]
 800a4ca:	f002 fd72 	bl	800cfb2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a4ce:	2300      	movs	r3, #0
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	3710      	adds	r7, #16
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}

0800a4d8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b088      	sub	sp, #32
 800a4dc:	af04      	add	r7, sp, #16
 800a4de:	60f8      	str	r0, [r7, #12]
 800a4e0:	60b9      	str	r1, [r7, #8]
 800a4e2:	4611      	mov	r1, r2
 800a4e4:	461a      	mov	r2, r3
 800a4e6:	460b      	mov	r3, r1
 800a4e8:	80fb      	strh	r3, [r7, #6]
 800a4ea:	4613      	mov	r3, r2
 800a4ec:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a4ee:	7979      	ldrb	r1, [r7, #5]
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	9303      	str	r3, [sp, #12]
 800a4f4:	88fb      	ldrh	r3, [r7, #6]
 800a4f6:	9302      	str	r3, [sp, #8]
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	9301      	str	r3, [sp, #4]
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	9300      	str	r3, [sp, #0]
 800a500:	2302      	movs	r3, #2
 800a502:	2201      	movs	r2, #1
 800a504:	68f8      	ldr	r0, [r7, #12]
 800a506:	f002 fd54 	bl	800cfb2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a50a:	2300      	movs	r3, #0
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	3710      	adds	r7, #16
 800a510:	46bd      	mov	sp, r7
 800a512:	bd80      	pop	{r7, pc}

0800a514 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b086      	sub	sp, #24
 800a518:	af04      	add	r7, sp, #16
 800a51a:	6078      	str	r0, [r7, #4]
 800a51c:	4608      	mov	r0, r1
 800a51e:	4611      	mov	r1, r2
 800a520:	461a      	mov	r2, r3
 800a522:	4603      	mov	r3, r0
 800a524:	70fb      	strb	r3, [r7, #3]
 800a526:	460b      	mov	r3, r1
 800a528:	70bb      	strb	r3, [r7, #2]
 800a52a:	4613      	mov	r3, r2
 800a52c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a52e:	7878      	ldrb	r0, [r7, #1]
 800a530:	78ba      	ldrb	r2, [r7, #2]
 800a532:	78f9      	ldrb	r1, [r7, #3]
 800a534:	8b3b      	ldrh	r3, [r7, #24]
 800a536:	9302      	str	r3, [sp, #8]
 800a538:	7d3b      	ldrb	r3, [r7, #20]
 800a53a:	9301      	str	r3, [sp, #4]
 800a53c:	7c3b      	ldrb	r3, [r7, #16]
 800a53e:	9300      	str	r3, [sp, #0]
 800a540:	4603      	mov	r3, r0
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f002 fce7 	bl	800cf16 <USBH_LL_OpenPipe>

  return USBH_OK;
 800a548:	2300      	movs	r3, #0
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3708      	adds	r7, #8
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}

0800a552 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a552:	b580      	push	{r7, lr}
 800a554:	b082      	sub	sp, #8
 800a556:	af00      	add	r7, sp, #0
 800a558:	6078      	str	r0, [r7, #4]
 800a55a:	460b      	mov	r3, r1
 800a55c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800a55e:	78fb      	ldrb	r3, [r7, #3]
 800a560:	4619      	mov	r1, r3
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f002 fd06 	bl	800cf74 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a568:	2300      	movs	r3, #0
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	3708      	adds	r7, #8
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}

0800a572 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a572:	b580      	push	{r7, lr}
 800a574:	b084      	sub	sp, #16
 800a576:	af00      	add	r7, sp, #0
 800a578:	6078      	str	r0, [r7, #4]
 800a57a:	460b      	mov	r3, r1
 800a57c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f000 f836 	bl	800a5f0 <USBH_GetFreePipe>
 800a584:	4603      	mov	r3, r0
 800a586:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a588:	89fb      	ldrh	r3, [r7, #14]
 800a58a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a58e:	4293      	cmp	r3, r2
 800a590:	d00a      	beq.n	800a5a8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800a592:	78fa      	ldrb	r2, [r7, #3]
 800a594:	89fb      	ldrh	r3, [r7, #14]
 800a596:	f003 030f 	and.w	r3, r3, #15
 800a59a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a59e:	6879      	ldr	r1, [r7, #4]
 800a5a0:	33e0      	adds	r3, #224	; 0xe0
 800a5a2:	009b      	lsls	r3, r3, #2
 800a5a4:	440b      	add	r3, r1
 800a5a6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a5a8:	89fb      	ldrh	r3, [r7, #14]
 800a5aa:	b2db      	uxtb	r3, r3
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3710      	adds	r7, #16
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}

0800a5b4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b083      	sub	sp, #12
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
 800a5bc:	460b      	mov	r3, r1
 800a5be:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800a5c0:	78fb      	ldrb	r3, [r7, #3]
 800a5c2:	2b0a      	cmp	r3, #10
 800a5c4:	d80d      	bhi.n	800a5e2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a5c6:	78fb      	ldrb	r3, [r7, #3]
 800a5c8:	687a      	ldr	r2, [r7, #4]
 800a5ca:	33e0      	adds	r3, #224	; 0xe0
 800a5cc:	009b      	lsls	r3, r3, #2
 800a5ce:	4413      	add	r3, r2
 800a5d0:	685a      	ldr	r2, [r3, #4]
 800a5d2:	78fb      	ldrb	r3, [r7, #3]
 800a5d4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a5d8:	6879      	ldr	r1, [r7, #4]
 800a5da:	33e0      	adds	r3, #224	; 0xe0
 800a5dc:	009b      	lsls	r3, r3, #2
 800a5de:	440b      	add	r3, r1
 800a5e0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a5e2:	2300      	movs	r3, #0
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	370c      	adds	r7, #12
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ee:	4770      	bx	lr

0800a5f0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b085      	sub	sp, #20
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	73fb      	strb	r3, [r7, #15]
 800a600:	e00f      	b.n	800a622 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a602:	7bfb      	ldrb	r3, [r7, #15]
 800a604:	687a      	ldr	r2, [r7, #4]
 800a606:	33e0      	adds	r3, #224	; 0xe0
 800a608:	009b      	lsls	r3, r3, #2
 800a60a:	4413      	add	r3, r2
 800a60c:	685b      	ldr	r3, [r3, #4]
 800a60e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a612:	2b00      	cmp	r3, #0
 800a614:	d102      	bne.n	800a61c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a616:	7bfb      	ldrb	r3, [r7, #15]
 800a618:	b29b      	uxth	r3, r3
 800a61a:	e007      	b.n	800a62c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800a61c:	7bfb      	ldrb	r3, [r7, #15]
 800a61e:	3301      	adds	r3, #1
 800a620:	73fb      	strb	r3, [r7, #15]
 800a622:	7bfb      	ldrb	r3, [r7, #15]
 800a624:	2b0a      	cmp	r3, #10
 800a626:	d9ec      	bls.n	800a602 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a628:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3714      	adds	r7, #20
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr

0800a638 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a638:	b480      	push	{r7}
 800a63a:	b085      	sub	sp, #20
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	4603      	mov	r3, r0
 800a640:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a642:	2300      	movs	r3, #0
 800a644:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a646:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a64a:	2b84      	cmp	r3, #132	; 0x84
 800a64c:	d005      	beq.n	800a65a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a64e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	4413      	add	r3, r2
 800a656:	3303      	adds	r3, #3
 800a658:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a65a:	68fb      	ldr	r3, [r7, #12]
}
 800a65c:	4618      	mov	r0, r3
 800a65e:	3714      	adds	r7, #20
 800a660:	46bd      	mov	sp, r7
 800a662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a666:	4770      	bx	lr

0800a668 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a668:	b480      	push	{r7}
 800a66a:	b083      	sub	sp, #12
 800a66c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a66e:	f3ef 8305 	mrs	r3, IPSR
 800a672:	607b      	str	r3, [r7, #4]
  return(result);
 800a674:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a676:	2b00      	cmp	r3, #0
 800a678:	bf14      	ite	ne
 800a67a:	2301      	movne	r3, #1
 800a67c:	2300      	moveq	r3, #0
 800a67e:	b2db      	uxtb	r3, r3
}
 800a680:	4618      	mov	r0, r3
 800a682:	370c      	adds	r7, #12
 800a684:	46bd      	mov	sp, r7
 800a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68a:	4770      	bx	lr

0800a68c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a690:	f001 f916 	bl	800b8c0 <vTaskStartScheduler>
  
  return osOK;
 800a694:	2300      	movs	r3, #0
}
 800a696:	4618      	mov	r0, r3
 800a698:	bd80      	pop	{r7, pc}

0800a69a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a69a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a69c:	b089      	sub	sp, #36	; 0x24
 800a69e:	af04      	add	r7, sp, #16
 800a6a0:	6078      	str	r0, [r7, #4]
 800a6a2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	695b      	ldr	r3, [r3, #20]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d020      	beq.n	800a6ee <osThreadCreate+0x54>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	699b      	ldr	r3, [r3, #24]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d01c      	beq.n	800a6ee <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	685c      	ldr	r4, [r3, #4]
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681d      	ldr	r5, [r3, #0]
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	691e      	ldr	r6, [r3, #16]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f7ff ffb6 	bl	800a638 <makeFreeRtosPriority>
 800a6cc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	695b      	ldr	r3, [r3, #20]
 800a6d2:	687a      	ldr	r2, [r7, #4]
 800a6d4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a6d6:	9202      	str	r2, [sp, #8]
 800a6d8:	9301      	str	r3, [sp, #4]
 800a6da:	9100      	str	r1, [sp, #0]
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	4632      	mov	r2, r6
 800a6e0:	4629      	mov	r1, r5
 800a6e2:	4620      	mov	r0, r4
 800a6e4:	f000 ff0e 	bl	800b504 <xTaskCreateStatic>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	60fb      	str	r3, [r7, #12]
 800a6ec:	e01c      	b.n	800a728 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	685c      	ldr	r4, [r3, #4]
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a6fa:	b29e      	uxth	r6, r3
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a702:	4618      	mov	r0, r3
 800a704:	f7ff ff98 	bl	800a638 <makeFreeRtosPriority>
 800a708:	4602      	mov	r2, r0
 800a70a:	f107 030c 	add.w	r3, r7, #12
 800a70e:	9301      	str	r3, [sp, #4]
 800a710:	9200      	str	r2, [sp, #0]
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	4632      	mov	r2, r6
 800a716:	4629      	mov	r1, r5
 800a718:	4620      	mov	r0, r4
 800a71a:	f000 ff50 	bl	800b5be <xTaskCreate>
 800a71e:	4603      	mov	r3, r0
 800a720:	2b01      	cmp	r3, #1
 800a722:	d001      	beq.n	800a728 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a724:	2300      	movs	r3, #0
 800a726:	e000      	b.n	800a72a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a728:	68fb      	ldr	r3, [r7, #12]
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	3714      	adds	r7, #20
 800a72e:	46bd      	mov	sp, r7
 800a730:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a732 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a732:	b580      	push	{r7, lr}
 800a734:	b084      	sub	sp, #16
 800a736:	af00      	add	r7, sp, #0
 800a738:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d001      	beq.n	800a748 <osDelay+0x16>
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	e000      	b.n	800a74a <osDelay+0x18>
 800a748:	2301      	movs	r3, #1
 800a74a:	4618      	mov	r0, r3
 800a74c:	f001 f884 	bl	800b858 <vTaskDelay>
  
  return osOK;
 800a750:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a752:	4618      	mov	r0, r3
 800a754:	3710      	adds	r7, #16
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}

0800a75a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800a75a:	b590      	push	{r4, r7, lr}
 800a75c:	b085      	sub	sp, #20
 800a75e:	af02      	add	r7, sp, #8
 800a760:	6078      	str	r0, [r7, #4]
 800a762:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	689b      	ldr	r3, [r3, #8]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d011      	beq.n	800a790 <osMessageCreate+0x36>
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	68db      	ldr	r3, [r3, #12]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d00d      	beq.n	800a790 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6818      	ldr	r0, [r3, #0]
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6859      	ldr	r1, [r3, #4]
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	689a      	ldr	r2, [r3, #8]
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	68db      	ldr	r3, [r3, #12]
 800a784:	2400      	movs	r4, #0
 800a786:	9400      	str	r4, [sp, #0]
 800a788:	f000 f9e0 	bl	800ab4c <xQueueGenericCreateStatic>
 800a78c:	4603      	mov	r3, r0
 800a78e:	e008      	b.n	800a7a2 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6818      	ldr	r0, [r3, #0]
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	685b      	ldr	r3, [r3, #4]
 800a798:	2200      	movs	r2, #0
 800a79a:	4619      	mov	r1, r3
 800a79c:	f000 fa4e 	bl	800ac3c <xQueueGenericCreate>
 800a7a0:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	370c      	adds	r7, #12
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd90      	pop	{r4, r7, pc}
	...

0800a7ac <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b086      	sub	sp, #24
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	60f8      	str	r0, [r7, #12]
 800a7b4:	60b9      	str	r1, [r7, #8]
 800a7b6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d101      	bne.n	800a7ca <osMessagePut+0x1e>
    ticks = 1;
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800a7ca:	f7ff ff4d 	bl	800a668 <inHandlerMode>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d018      	beq.n	800a806 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800a7d4:	f107 0210 	add.w	r2, r7, #16
 800a7d8:	f107 0108 	add.w	r1, r7, #8
 800a7dc:	2300      	movs	r3, #0
 800a7de:	68f8      	ldr	r0, [r7, #12]
 800a7e0:	f000 fb84 	bl	800aeec <xQueueGenericSendFromISR>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	2b01      	cmp	r3, #1
 800a7e8:	d001      	beq.n	800a7ee <osMessagePut+0x42>
      return osErrorOS;
 800a7ea:	23ff      	movs	r3, #255	; 0xff
 800a7ec:	e018      	b.n	800a820 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d014      	beq.n	800a81e <osMessagePut+0x72>
 800a7f4:	4b0c      	ldr	r3, [pc, #48]	; (800a828 <osMessagePut+0x7c>)
 800a7f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7fa:	601a      	str	r2, [r3, #0]
 800a7fc:	f3bf 8f4f 	dsb	sy
 800a800:	f3bf 8f6f 	isb	sy
 800a804:	e00b      	b.n	800a81e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800a806:	f107 0108 	add.w	r1, r7, #8
 800a80a:	2300      	movs	r3, #0
 800a80c:	697a      	ldr	r2, [r7, #20]
 800a80e:	68f8      	ldr	r0, [r7, #12]
 800a810:	f000 fa6e 	bl	800acf0 <xQueueGenericSend>
 800a814:	4603      	mov	r3, r0
 800a816:	2b01      	cmp	r3, #1
 800a818:	d001      	beq.n	800a81e <osMessagePut+0x72>
      return osErrorOS;
 800a81a:	23ff      	movs	r3, #255	; 0xff
 800a81c:	e000      	b.n	800a820 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800a81e:	2300      	movs	r3, #0
}
 800a820:	4618      	mov	r0, r3
 800a822:	3718      	adds	r7, #24
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}
 800a828:	e000ed04 	.word	0xe000ed04

0800a82c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800a82c:	b590      	push	{r4, r7, lr}
 800a82e:	b08b      	sub	sp, #44	; 0x2c
 800a830:	af00      	add	r7, sp, #0
 800a832:	60f8      	str	r0, [r7, #12]
 800a834:	60b9      	str	r1, [r7, #8]
 800a836:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800a83c:	2300      	movs	r3, #0
 800a83e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d10a      	bne.n	800a85c <osMessageGet+0x30>
    event.status = osErrorParameter;
 800a846:	2380      	movs	r3, #128	; 0x80
 800a848:	617b      	str	r3, [r7, #20]
    return event;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	461c      	mov	r4, r3
 800a84e:	f107 0314 	add.w	r3, r7, #20
 800a852:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a856:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a85a:	e054      	b.n	800a906 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800a85c:	2300      	movs	r3, #0
 800a85e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800a860:	2300      	movs	r3, #0
 800a862:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a86a:	d103      	bne.n	800a874 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800a86c:	f04f 33ff 	mov.w	r3, #4294967295
 800a870:	627b      	str	r3, [r7, #36]	; 0x24
 800a872:	e009      	b.n	800a888 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d006      	beq.n	800a888 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800a87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a880:	2b00      	cmp	r3, #0
 800a882:	d101      	bne.n	800a888 <osMessageGet+0x5c>
      ticks = 1;
 800a884:	2301      	movs	r3, #1
 800a886:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800a888:	f7ff feee 	bl	800a668 <inHandlerMode>
 800a88c:	4603      	mov	r3, r0
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d01c      	beq.n	800a8cc <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800a892:	f107 0220 	add.w	r2, r7, #32
 800a896:	f107 0314 	add.w	r3, r7, #20
 800a89a:	3304      	adds	r3, #4
 800a89c:	4619      	mov	r1, r3
 800a89e:	68b8      	ldr	r0, [r7, #8]
 800a8a0:	f000 fca0 	bl	800b1e4 <xQueueReceiveFromISR>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	2b01      	cmp	r3, #1
 800a8a8:	d102      	bne.n	800a8b0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800a8aa:	2310      	movs	r3, #16
 800a8ac:	617b      	str	r3, [r7, #20]
 800a8ae:	e001      	b.n	800a8b4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a8b4:	6a3b      	ldr	r3, [r7, #32]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d01d      	beq.n	800a8f6 <osMessageGet+0xca>
 800a8ba:	4b15      	ldr	r3, [pc, #84]	; (800a910 <osMessageGet+0xe4>)
 800a8bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8c0:	601a      	str	r2, [r3, #0]
 800a8c2:	f3bf 8f4f 	dsb	sy
 800a8c6:	f3bf 8f6f 	isb	sy
 800a8ca:	e014      	b.n	800a8f6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800a8cc:	f107 0314 	add.w	r3, r7, #20
 800a8d0:	3304      	adds	r3, #4
 800a8d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8d4:	4619      	mov	r1, r3
 800a8d6:	68b8      	ldr	r0, [r7, #8]
 800a8d8:	f000 fba4 	bl	800b024 <xQueueReceive>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	2b01      	cmp	r3, #1
 800a8e0:	d102      	bne.n	800a8e8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800a8e2:	2310      	movs	r3, #16
 800a8e4:	617b      	str	r3, [r7, #20]
 800a8e6:	e006      	b.n	800a8f6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800a8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d101      	bne.n	800a8f2 <osMessageGet+0xc6>
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	e000      	b.n	800a8f4 <osMessageGet+0xc8>
 800a8f2:	2340      	movs	r3, #64	; 0x40
 800a8f4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	461c      	mov	r4, r3
 800a8fa:	f107 0314 	add.w	r3, r7, #20
 800a8fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a902:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a906:	68f8      	ldr	r0, [r7, #12]
 800a908:	372c      	adds	r7, #44	; 0x2c
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd90      	pop	{r4, r7, pc}
 800a90e:	bf00      	nop
 800a910:	e000ed04 	.word	0xe000ed04

0800a914 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a914:	b480      	push	{r7}
 800a916:	b083      	sub	sp, #12
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f103 0208 	add.w	r2, r3, #8
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f04f 32ff 	mov.w	r2, #4294967295
 800a92c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f103 0208 	add.w	r2, r3, #8
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f103 0208 	add.w	r2, r3, #8
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2200      	movs	r2, #0
 800a946:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a948:	bf00      	nop
 800a94a:	370c      	adds	r7, #12
 800a94c:	46bd      	mov	sp, r7
 800a94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a952:	4770      	bx	lr

0800a954 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a954:	b480      	push	{r7}
 800a956:	b083      	sub	sp, #12
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2200      	movs	r2, #0
 800a960:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a962:	bf00      	nop
 800a964:	370c      	adds	r7, #12
 800a966:	46bd      	mov	sp, r7
 800a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96c:	4770      	bx	lr

0800a96e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a96e:	b480      	push	{r7}
 800a970:	b085      	sub	sp, #20
 800a972:	af00      	add	r7, sp, #0
 800a974:	6078      	str	r0, [r7, #4]
 800a976:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	685b      	ldr	r3, [r3, #4]
 800a97c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	68fa      	ldr	r2, [r7, #12]
 800a982:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	689a      	ldr	r2, [r3, #8]
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	689b      	ldr	r3, [r3, #8]
 800a990:	683a      	ldr	r2, [r7, #0]
 800a992:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	683a      	ldr	r2, [r7, #0]
 800a998:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	687a      	ldr	r2, [r7, #4]
 800a99e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	1c5a      	adds	r2, r3, #1
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	601a      	str	r2, [r3, #0]
}
 800a9aa:	bf00      	nop
 800a9ac:	3714      	adds	r7, #20
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b4:	4770      	bx	lr

0800a9b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a9b6:	b480      	push	{r7}
 800a9b8:	b085      	sub	sp, #20
 800a9ba:	af00      	add	r7, sp, #0
 800a9bc:	6078      	str	r0, [r7, #4]
 800a9be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9cc:	d103      	bne.n	800a9d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	691b      	ldr	r3, [r3, #16]
 800a9d2:	60fb      	str	r3, [r7, #12]
 800a9d4:	e00c      	b.n	800a9f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	3308      	adds	r3, #8
 800a9da:	60fb      	str	r3, [r7, #12]
 800a9dc:	e002      	b.n	800a9e4 <vListInsert+0x2e>
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	685b      	ldr	r3, [r3, #4]
 800a9e2:	60fb      	str	r3, [r7, #12]
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	685b      	ldr	r3, [r3, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	68ba      	ldr	r2, [r7, #8]
 800a9ec:	429a      	cmp	r2, r3
 800a9ee:	d2f6      	bcs.n	800a9de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	685a      	ldr	r2, [r3, #4]
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	685b      	ldr	r3, [r3, #4]
 800a9fc:	683a      	ldr	r2, [r7, #0]
 800a9fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	68fa      	ldr	r2, [r7, #12]
 800aa04:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	683a      	ldr	r2, [r7, #0]
 800aa0a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	687a      	ldr	r2, [r7, #4]
 800aa10:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	1c5a      	adds	r2, r3, #1
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	601a      	str	r2, [r3, #0]
}
 800aa1c:	bf00      	nop
 800aa1e:	3714      	adds	r7, #20
 800aa20:	46bd      	mov	sp, r7
 800aa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa26:	4770      	bx	lr

0800aa28 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b085      	sub	sp, #20
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	691b      	ldr	r3, [r3, #16]
 800aa34:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	685b      	ldr	r3, [r3, #4]
 800aa3a:	687a      	ldr	r2, [r7, #4]
 800aa3c:	6892      	ldr	r2, [r2, #8]
 800aa3e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	689b      	ldr	r3, [r3, #8]
 800aa44:	687a      	ldr	r2, [r7, #4]
 800aa46:	6852      	ldr	r2, [r2, #4]
 800aa48:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	685b      	ldr	r3, [r3, #4]
 800aa4e:	687a      	ldr	r2, [r7, #4]
 800aa50:	429a      	cmp	r2, r3
 800aa52:	d103      	bne.n	800aa5c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	689a      	ldr	r2, [r3, #8]
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2200      	movs	r2, #0
 800aa60:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	1e5a      	subs	r2, r3, #1
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	681b      	ldr	r3, [r3, #0]
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	3714      	adds	r7, #20
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr

0800aa7c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b084      	sub	sp, #16
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d10a      	bne.n	800aaa6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800aa90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa94:	f383 8811 	msr	BASEPRI, r3
 800aa98:	f3bf 8f6f 	isb	sy
 800aa9c:	f3bf 8f4f 	dsb	sy
 800aaa0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800aaa2:	bf00      	nop
 800aaa4:	e7fe      	b.n	800aaa4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800aaa6:	f001 fd55 	bl	800c554 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	681a      	ldr	r2, [r3, #0]
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aab2:	68f9      	ldr	r1, [r7, #12]
 800aab4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800aab6:	fb01 f303 	mul.w	r3, r1, r3
 800aaba:	441a      	add	r2, r3
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	2200      	movs	r2, #0
 800aac4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	681a      	ldr	r2, [r3, #0]
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	681a      	ldr	r2, [r3, #0]
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aad6:	3b01      	subs	r3, #1
 800aad8:	68f9      	ldr	r1, [r7, #12]
 800aada:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800aadc:	fb01 f303 	mul.w	r3, r1, r3
 800aae0:	441a      	add	r2, r3
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	22ff      	movs	r2, #255	; 0xff
 800aaea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	22ff      	movs	r2, #255	; 0xff
 800aaf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d114      	bne.n	800ab26 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	691b      	ldr	r3, [r3, #16]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d01a      	beq.n	800ab3a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	3310      	adds	r3, #16
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f001 f92b 	bl	800bd64 <xTaskRemoveFromEventList>
 800ab0e:	4603      	mov	r3, r0
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d012      	beq.n	800ab3a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ab14:	4b0c      	ldr	r3, [pc, #48]	; (800ab48 <xQueueGenericReset+0xcc>)
 800ab16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab1a:	601a      	str	r2, [r3, #0]
 800ab1c:	f3bf 8f4f 	dsb	sy
 800ab20:	f3bf 8f6f 	isb	sy
 800ab24:	e009      	b.n	800ab3a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	3310      	adds	r3, #16
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f7ff fef2 	bl	800a914 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	3324      	adds	r3, #36	; 0x24
 800ab34:	4618      	mov	r0, r3
 800ab36:	f7ff feed 	bl	800a914 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ab3a:	f001 fd3b 	bl	800c5b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ab3e:	2301      	movs	r3, #1
}
 800ab40:	4618      	mov	r0, r3
 800ab42:	3710      	adds	r7, #16
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}
 800ab48:	e000ed04 	.word	0xe000ed04

0800ab4c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b08e      	sub	sp, #56	; 0x38
 800ab50:	af02      	add	r7, sp, #8
 800ab52:	60f8      	str	r0, [r7, #12]
 800ab54:	60b9      	str	r1, [r7, #8]
 800ab56:	607a      	str	r2, [r7, #4]
 800ab58:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d10a      	bne.n	800ab76 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ab60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab64:	f383 8811 	msr	BASEPRI, r3
 800ab68:	f3bf 8f6f 	isb	sy
 800ab6c:	f3bf 8f4f 	dsb	sy
 800ab70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ab72:	bf00      	nop
 800ab74:	e7fe      	b.n	800ab74 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d10a      	bne.n	800ab92 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ab7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab80:	f383 8811 	msr	BASEPRI, r3
 800ab84:	f3bf 8f6f 	isb	sy
 800ab88:	f3bf 8f4f 	dsb	sy
 800ab8c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ab8e:	bf00      	nop
 800ab90:	e7fe      	b.n	800ab90 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d002      	beq.n	800ab9e <xQueueGenericCreateStatic+0x52>
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d001      	beq.n	800aba2 <xQueueGenericCreateStatic+0x56>
 800ab9e:	2301      	movs	r3, #1
 800aba0:	e000      	b.n	800aba4 <xQueueGenericCreateStatic+0x58>
 800aba2:	2300      	movs	r3, #0
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d10a      	bne.n	800abbe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800aba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abac:	f383 8811 	msr	BASEPRI, r3
 800abb0:	f3bf 8f6f 	isb	sy
 800abb4:	f3bf 8f4f 	dsb	sy
 800abb8:	623b      	str	r3, [r7, #32]
}
 800abba:	bf00      	nop
 800abbc:	e7fe      	b.n	800abbc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d102      	bne.n	800abca <xQueueGenericCreateStatic+0x7e>
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d101      	bne.n	800abce <xQueueGenericCreateStatic+0x82>
 800abca:	2301      	movs	r3, #1
 800abcc:	e000      	b.n	800abd0 <xQueueGenericCreateStatic+0x84>
 800abce:	2300      	movs	r3, #0
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d10a      	bne.n	800abea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800abd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd8:	f383 8811 	msr	BASEPRI, r3
 800abdc:	f3bf 8f6f 	isb	sy
 800abe0:	f3bf 8f4f 	dsb	sy
 800abe4:	61fb      	str	r3, [r7, #28]
}
 800abe6:	bf00      	nop
 800abe8:	e7fe      	b.n	800abe8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800abea:	2348      	movs	r3, #72	; 0x48
 800abec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	2b48      	cmp	r3, #72	; 0x48
 800abf2:	d00a      	beq.n	800ac0a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800abf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf8:	f383 8811 	msr	BASEPRI, r3
 800abfc:	f3bf 8f6f 	isb	sy
 800ac00:	f3bf 8f4f 	dsb	sy
 800ac04:	61bb      	str	r3, [r7, #24]
}
 800ac06:	bf00      	nop
 800ac08:	e7fe      	b.n	800ac08 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ac0a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ac10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d00d      	beq.n	800ac32 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ac16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac18:	2201      	movs	r2, #1
 800ac1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ac1e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ac22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac24:	9300      	str	r3, [sp, #0]
 800ac26:	4613      	mov	r3, r2
 800ac28:	687a      	ldr	r2, [r7, #4]
 800ac2a:	68b9      	ldr	r1, [r7, #8]
 800ac2c:	68f8      	ldr	r0, [r7, #12]
 800ac2e:	f000 f83f 	bl	800acb0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ac32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ac34:	4618      	mov	r0, r3
 800ac36:	3730      	adds	r7, #48	; 0x30
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}

0800ac3c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b08a      	sub	sp, #40	; 0x28
 800ac40:	af02      	add	r7, sp, #8
 800ac42:	60f8      	str	r0, [r7, #12]
 800ac44:	60b9      	str	r1, [r7, #8]
 800ac46:	4613      	mov	r3, r2
 800ac48:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d10a      	bne.n	800ac66 <xQueueGenericCreate+0x2a>
	__asm volatile
 800ac50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac54:	f383 8811 	msr	BASEPRI, r3
 800ac58:	f3bf 8f6f 	isb	sy
 800ac5c:	f3bf 8f4f 	dsb	sy
 800ac60:	613b      	str	r3, [r7, #16]
}
 800ac62:	bf00      	nop
 800ac64:	e7fe      	b.n	800ac64 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	68ba      	ldr	r2, [r7, #8]
 800ac6a:	fb02 f303 	mul.w	r3, r2, r3
 800ac6e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ac70:	69fb      	ldr	r3, [r7, #28]
 800ac72:	3348      	adds	r3, #72	; 0x48
 800ac74:	4618      	mov	r0, r3
 800ac76:	f001 fd8f 	bl	800c798 <pvPortMalloc>
 800ac7a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ac7c:	69bb      	ldr	r3, [r7, #24]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d011      	beq.n	800aca6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ac82:	69bb      	ldr	r3, [r7, #24]
 800ac84:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ac86:	697b      	ldr	r3, [r7, #20]
 800ac88:	3348      	adds	r3, #72	; 0x48
 800ac8a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ac8c:	69bb      	ldr	r3, [r7, #24]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ac94:	79fa      	ldrb	r2, [r7, #7]
 800ac96:	69bb      	ldr	r3, [r7, #24]
 800ac98:	9300      	str	r3, [sp, #0]
 800ac9a:	4613      	mov	r3, r2
 800ac9c:	697a      	ldr	r2, [r7, #20]
 800ac9e:	68b9      	ldr	r1, [r7, #8]
 800aca0:	68f8      	ldr	r0, [r7, #12]
 800aca2:	f000 f805 	bl	800acb0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800aca6:	69bb      	ldr	r3, [r7, #24]
	}
 800aca8:	4618      	mov	r0, r3
 800acaa:	3720      	adds	r7, #32
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}

0800acb0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b084      	sub	sp, #16
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	60f8      	str	r0, [r7, #12]
 800acb8:	60b9      	str	r1, [r7, #8]
 800acba:	607a      	str	r2, [r7, #4]
 800acbc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d103      	bne.n	800accc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800acc4:	69bb      	ldr	r3, [r7, #24]
 800acc6:	69ba      	ldr	r2, [r7, #24]
 800acc8:	601a      	str	r2, [r3, #0]
 800acca:	e002      	b.n	800acd2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800accc:	69bb      	ldr	r3, [r7, #24]
 800acce:	687a      	ldr	r2, [r7, #4]
 800acd0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800acd2:	69bb      	ldr	r3, [r7, #24]
 800acd4:	68fa      	ldr	r2, [r7, #12]
 800acd6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800acd8:	69bb      	ldr	r3, [r7, #24]
 800acda:	68ba      	ldr	r2, [r7, #8]
 800acdc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800acde:	2101      	movs	r1, #1
 800ace0:	69b8      	ldr	r0, [r7, #24]
 800ace2:	f7ff fecb 	bl	800aa7c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ace6:	bf00      	nop
 800ace8:	3710      	adds	r7, #16
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}
	...

0800acf0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b08e      	sub	sp, #56	; 0x38
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	60f8      	str	r0, [r7, #12]
 800acf8:	60b9      	str	r1, [r7, #8]
 800acfa:	607a      	str	r2, [r7, #4]
 800acfc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800acfe:	2300      	movs	r3, #0
 800ad00:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ad06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d10a      	bne.n	800ad22 <xQueueGenericSend+0x32>
	__asm volatile
 800ad0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad10:	f383 8811 	msr	BASEPRI, r3
 800ad14:	f3bf 8f6f 	isb	sy
 800ad18:	f3bf 8f4f 	dsb	sy
 800ad1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ad1e:	bf00      	nop
 800ad20:	e7fe      	b.n	800ad20 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d103      	bne.n	800ad30 <xQueueGenericSend+0x40>
 800ad28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d101      	bne.n	800ad34 <xQueueGenericSend+0x44>
 800ad30:	2301      	movs	r3, #1
 800ad32:	e000      	b.n	800ad36 <xQueueGenericSend+0x46>
 800ad34:	2300      	movs	r3, #0
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d10a      	bne.n	800ad50 <xQueueGenericSend+0x60>
	__asm volatile
 800ad3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad3e:	f383 8811 	msr	BASEPRI, r3
 800ad42:	f3bf 8f6f 	isb	sy
 800ad46:	f3bf 8f4f 	dsb	sy
 800ad4a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ad4c:	bf00      	nop
 800ad4e:	e7fe      	b.n	800ad4e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	2b02      	cmp	r3, #2
 800ad54:	d103      	bne.n	800ad5e <xQueueGenericSend+0x6e>
 800ad56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad5a:	2b01      	cmp	r3, #1
 800ad5c:	d101      	bne.n	800ad62 <xQueueGenericSend+0x72>
 800ad5e:	2301      	movs	r3, #1
 800ad60:	e000      	b.n	800ad64 <xQueueGenericSend+0x74>
 800ad62:	2300      	movs	r3, #0
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d10a      	bne.n	800ad7e <xQueueGenericSend+0x8e>
	__asm volatile
 800ad68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad6c:	f383 8811 	msr	BASEPRI, r3
 800ad70:	f3bf 8f6f 	isb	sy
 800ad74:	f3bf 8f4f 	dsb	sy
 800ad78:	623b      	str	r3, [r7, #32]
}
 800ad7a:	bf00      	nop
 800ad7c:	e7fe      	b.n	800ad7c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ad7e:	f001 f9b1 	bl	800c0e4 <xTaskGetSchedulerState>
 800ad82:	4603      	mov	r3, r0
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d102      	bne.n	800ad8e <xQueueGenericSend+0x9e>
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d101      	bne.n	800ad92 <xQueueGenericSend+0xa2>
 800ad8e:	2301      	movs	r3, #1
 800ad90:	e000      	b.n	800ad94 <xQueueGenericSend+0xa4>
 800ad92:	2300      	movs	r3, #0
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d10a      	bne.n	800adae <xQueueGenericSend+0xbe>
	__asm volatile
 800ad98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad9c:	f383 8811 	msr	BASEPRI, r3
 800ada0:	f3bf 8f6f 	isb	sy
 800ada4:	f3bf 8f4f 	dsb	sy
 800ada8:	61fb      	str	r3, [r7, #28]
}
 800adaa:	bf00      	nop
 800adac:	e7fe      	b.n	800adac <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800adae:	f001 fbd1 	bl	800c554 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800adb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800adb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adba:	429a      	cmp	r2, r3
 800adbc:	d302      	bcc.n	800adc4 <xQueueGenericSend+0xd4>
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	2b02      	cmp	r3, #2
 800adc2:	d129      	bne.n	800ae18 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800adc4:	683a      	ldr	r2, [r7, #0]
 800adc6:	68b9      	ldr	r1, [r7, #8]
 800adc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800adca:	f000 fa8b 	bl	800b2e4 <prvCopyDataToQueue>
 800adce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800add0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add4:	2b00      	cmp	r3, #0
 800add6:	d010      	beq.n	800adfa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800add8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adda:	3324      	adds	r3, #36	; 0x24
 800addc:	4618      	mov	r0, r3
 800adde:	f000 ffc1 	bl	800bd64 <xTaskRemoveFromEventList>
 800ade2:	4603      	mov	r3, r0
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d013      	beq.n	800ae10 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ade8:	4b3f      	ldr	r3, [pc, #252]	; (800aee8 <xQueueGenericSend+0x1f8>)
 800adea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adee:	601a      	str	r2, [r3, #0]
 800adf0:	f3bf 8f4f 	dsb	sy
 800adf4:	f3bf 8f6f 	isb	sy
 800adf8:	e00a      	b.n	800ae10 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800adfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d007      	beq.n	800ae10 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ae00:	4b39      	ldr	r3, [pc, #228]	; (800aee8 <xQueueGenericSend+0x1f8>)
 800ae02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae06:	601a      	str	r2, [r3, #0]
 800ae08:	f3bf 8f4f 	dsb	sy
 800ae0c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ae10:	f001 fbd0 	bl	800c5b4 <vPortExitCritical>
				return pdPASS;
 800ae14:	2301      	movs	r3, #1
 800ae16:	e063      	b.n	800aee0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d103      	bne.n	800ae26 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ae1e:	f001 fbc9 	bl	800c5b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ae22:	2300      	movs	r3, #0
 800ae24:	e05c      	b.n	800aee0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d106      	bne.n	800ae3a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ae2c:	f107 0314 	add.w	r3, r7, #20
 800ae30:	4618      	mov	r0, r3
 800ae32:	f000 fff9 	bl	800be28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ae36:	2301      	movs	r3, #1
 800ae38:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ae3a:	f001 fbbb 	bl	800c5b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ae3e:	f000 fda9 	bl	800b994 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ae42:	f001 fb87 	bl	800c554 <vPortEnterCritical>
 800ae46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae4c:	b25b      	sxtb	r3, r3
 800ae4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae52:	d103      	bne.n	800ae5c <xQueueGenericSend+0x16c>
 800ae54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae56:	2200      	movs	r2, #0
 800ae58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae62:	b25b      	sxtb	r3, r3
 800ae64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae68:	d103      	bne.n	800ae72 <xQueueGenericSend+0x182>
 800ae6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ae72:	f001 fb9f 	bl	800c5b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ae76:	1d3a      	adds	r2, r7, #4
 800ae78:	f107 0314 	add.w	r3, r7, #20
 800ae7c:	4611      	mov	r1, r2
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f000 ffe8 	bl	800be54 <xTaskCheckForTimeOut>
 800ae84:	4603      	mov	r3, r0
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d124      	bne.n	800aed4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ae8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae8c:	f000 fb22 	bl	800b4d4 <prvIsQueueFull>
 800ae90:	4603      	mov	r3, r0
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d018      	beq.n	800aec8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ae96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae98:	3310      	adds	r3, #16
 800ae9a:	687a      	ldr	r2, [r7, #4]
 800ae9c:	4611      	mov	r1, r2
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f000 ff3c 	bl	800bd1c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800aea4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aea6:	f000 faad 	bl	800b404 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800aeaa:	f000 fd81 	bl	800b9b0 <xTaskResumeAll>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	f47f af7c 	bne.w	800adae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800aeb6:	4b0c      	ldr	r3, [pc, #48]	; (800aee8 <xQueueGenericSend+0x1f8>)
 800aeb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aebc:	601a      	str	r2, [r3, #0]
 800aebe:	f3bf 8f4f 	dsb	sy
 800aec2:	f3bf 8f6f 	isb	sy
 800aec6:	e772      	b.n	800adae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800aec8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aeca:	f000 fa9b 	bl	800b404 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aece:	f000 fd6f 	bl	800b9b0 <xTaskResumeAll>
 800aed2:	e76c      	b.n	800adae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800aed4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aed6:	f000 fa95 	bl	800b404 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aeda:	f000 fd69 	bl	800b9b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800aede:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3738      	adds	r7, #56	; 0x38
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}
 800aee8:	e000ed04 	.word	0xe000ed04

0800aeec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b090      	sub	sp, #64	; 0x40
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	60f8      	str	r0, [r7, #12]
 800aef4:	60b9      	str	r1, [r7, #8]
 800aef6:	607a      	str	r2, [r7, #4]
 800aef8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800aefe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af00:	2b00      	cmp	r3, #0
 800af02:	d10a      	bne.n	800af1a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800af04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af08:	f383 8811 	msr	BASEPRI, r3
 800af0c:	f3bf 8f6f 	isb	sy
 800af10:	f3bf 8f4f 	dsb	sy
 800af14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800af16:	bf00      	nop
 800af18:	e7fe      	b.n	800af18 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d103      	bne.n	800af28 <xQueueGenericSendFromISR+0x3c>
 800af20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af24:	2b00      	cmp	r3, #0
 800af26:	d101      	bne.n	800af2c <xQueueGenericSendFromISR+0x40>
 800af28:	2301      	movs	r3, #1
 800af2a:	e000      	b.n	800af2e <xQueueGenericSendFromISR+0x42>
 800af2c:	2300      	movs	r3, #0
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d10a      	bne.n	800af48 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800af32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af36:	f383 8811 	msr	BASEPRI, r3
 800af3a:	f3bf 8f6f 	isb	sy
 800af3e:	f3bf 8f4f 	dsb	sy
 800af42:	627b      	str	r3, [r7, #36]	; 0x24
}
 800af44:	bf00      	nop
 800af46:	e7fe      	b.n	800af46 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	2b02      	cmp	r3, #2
 800af4c:	d103      	bne.n	800af56 <xQueueGenericSendFromISR+0x6a>
 800af4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af52:	2b01      	cmp	r3, #1
 800af54:	d101      	bne.n	800af5a <xQueueGenericSendFromISR+0x6e>
 800af56:	2301      	movs	r3, #1
 800af58:	e000      	b.n	800af5c <xQueueGenericSendFromISR+0x70>
 800af5a:	2300      	movs	r3, #0
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d10a      	bne.n	800af76 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800af60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af64:	f383 8811 	msr	BASEPRI, r3
 800af68:	f3bf 8f6f 	isb	sy
 800af6c:	f3bf 8f4f 	dsb	sy
 800af70:	623b      	str	r3, [r7, #32]
}
 800af72:	bf00      	nop
 800af74:	e7fe      	b.n	800af74 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800af76:	f001 fbcf 	bl	800c718 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800af7a:	f3ef 8211 	mrs	r2, BASEPRI
 800af7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af82:	f383 8811 	msr	BASEPRI, r3
 800af86:	f3bf 8f6f 	isb	sy
 800af8a:	f3bf 8f4f 	dsb	sy
 800af8e:	61fa      	str	r2, [r7, #28]
 800af90:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800af92:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800af94:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800af96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af9e:	429a      	cmp	r2, r3
 800afa0:	d302      	bcc.n	800afa8 <xQueueGenericSendFromISR+0xbc>
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	2b02      	cmp	r3, #2
 800afa6:	d12f      	bne.n	800b008 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800afa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afaa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800afae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800afb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afb6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800afb8:	683a      	ldr	r2, [r7, #0]
 800afba:	68b9      	ldr	r1, [r7, #8]
 800afbc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800afbe:	f000 f991 	bl	800b2e4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800afc2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800afc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afca:	d112      	bne.n	800aff2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800afcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d016      	beq.n	800b002 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800afd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afd6:	3324      	adds	r3, #36	; 0x24
 800afd8:	4618      	mov	r0, r3
 800afda:	f000 fec3 	bl	800bd64 <xTaskRemoveFromEventList>
 800afde:	4603      	mov	r3, r0
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d00e      	beq.n	800b002 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d00b      	beq.n	800b002 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2201      	movs	r2, #1
 800afee:	601a      	str	r2, [r3, #0]
 800aff0:	e007      	b.n	800b002 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800aff2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800aff6:	3301      	adds	r3, #1
 800aff8:	b2db      	uxtb	r3, r3
 800affa:	b25a      	sxtb	r2, r3
 800affc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800affe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b002:	2301      	movs	r3, #1
 800b004:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b006:	e001      	b.n	800b00c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b008:	2300      	movs	r3, #0
 800b00a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b00c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b00e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b010:	697b      	ldr	r3, [r7, #20]
 800b012:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b016:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b01a:	4618      	mov	r0, r3
 800b01c:	3740      	adds	r7, #64	; 0x40
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}
	...

0800b024 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b08c      	sub	sp, #48	; 0x30
 800b028:	af00      	add	r7, sp, #0
 800b02a:	60f8      	str	r0, [r7, #12]
 800b02c:	60b9      	str	r1, [r7, #8]
 800b02e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b030:	2300      	movs	r3, #0
 800b032:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d10a      	bne.n	800b054 <xQueueReceive+0x30>
	__asm volatile
 800b03e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b042:	f383 8811 	msr	BASEPRI, r3
 800b046:	f3bf 8f6f 	isb	sy
 800b04a:	f3bf 8f4f 	dsb	sy
 800b04e:	623b      	str	r3, [r7, #32]
}
 800b050:	bf00      	nop
 800b052:	e7fe      	b.n	800b052 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d103      	bne.n	800b062 <xQueueReceive+0x3e>
 800b05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b05c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d101      	bne.n	800b066 <xQueueReceive+0x42>
 800b062:	2301      	movs	r3, #1
 800b064:	e000      	b.n	800b068 <xQueueReceive+0x44>
 800b066:	2300      	movs	r3, #0
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d10a      	bne.n	800b082 <xQueueReceive+0x5e>
	__asm volatile
 800b06c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b070:	f383 8811 	msr	BASEPRI, r3
 800b074:	f3bf 8f6f 	isb	sy
 800b078:	f3bf 8f4f 	dsb	sy
 800b07c:	61fb      	str	r3, [r7, #28]
}
 800b07e:	bf00      	nop
 800b080:	e7fe      	b.n	800b080 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b082:	f001 f82f 	bl	800c0e4 <xTaskGetSchedulerState>
 800b086:	4603      	mov	r3, r0
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d102      	bne.n	800b092 <xQueueReceive+0x6e>
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d101      	bne.n	800b096 <xQueueReceive+0x72>
 800b092:	2301      	movs	r3, #1
 800b094:	e000      	b.n	800b098 <xQueueReceive+0x74>
 800b096:	2300      	movs	r3, #0
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d10a      	bne.n	800b0b2 <xQueueReceive+0x8e>
	__asm volatile
 800b09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a0:	f383 8811 	msr	BASEPRI, r3
 800b0a4:	f3bf 8f6f 	isb	sy
 800b0a8:	f3bf 8f4f 	dsb	sy
 800b0ac:	61bb      	str	r3, [r7, #24]
}
 800b0ae:	bf00      	nop
 800b0b0:	e7fe      	b.n	800b0b0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b0b2:	f001 fa4f 	bl	800c554 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0ba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d01f      	beq.n	800b102 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b0c2:	68b9      	ldr	r1, [r7, #8]
 800b0c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0c6:	f000 f977 	bl	800b3b8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0cc:	1e5a      	subs	r2, r3, #1
 800b0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0d0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b0d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0d4:	691b      	ldr	r3, [r3, #16]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d00f      	beq.n	800b0fa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b0da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0dc:	3310      	adds	r3, #16
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f000 fe40 	bl	800bd64 <xTaskRemoveFromEventList>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d007      	beq.n	800b0fa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b0ea:	4b3d      	ldr	r3, [pc, #244]	; (800b1e0 <xQueueReceive+0x1bc>)
 800b0ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0f0:	601a      	str	r2, [r3, #0]
 800b0f2:	f3bf 8f4f 	dsb	sy
 800b0f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b0fa:	f001 fa5b 	bl	800c5b4 <vPortExitCritical>
				return pdPASS;
 800b0fe:	2301      	movs	r3, #1
 800b100:	e069      	b.n	800b1d6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d103      	bne.n	800b110 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b108:	f001 fa54 	bl	800c5b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b10c:	2300      	movs	r3, #0
 800b10e:	e062      	b.n	800b1d6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b112:	2b00      	cmp	r3, #0
 800b114:	d106      	bne.n	800b124 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b116:	f107 0310 	add.w	r3, r7, #16
 800b11a:	4618      	mov	r0, r3
 800b11c:	f000 fe84 	bl	800be28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b120:	2301      	movs	r3, #1
 800b122:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b124:	f001 fa46 	bl	800c5b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b128:	f000 fc34 	bl	800b994 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b12c:	f001 fa12 	bl	800c554 <vPortEnterCritical>
 800b130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b132:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b136:	b25b      	sxtb	r3, r3
 800b138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b13c:	d103      	bne.n	800b146 <xQueueReceive+0x122>
 800b13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b140:	2200      	movs	r2, #0
 800b142:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b148:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b14c:	b25b      	sxtb	r3, r3
 800b14e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b152:	d103      	bne.n	800b15c <xQueueReceive+0x138>
 800b154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b156:	2200      	movs	r2, #0
 800b158:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b15c:	f001 fa2a 	bl	800c5b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b160:	1d3a      	adds	r2, r7, #4
 800b162:	f107 0310 	add.w	r3, r7, #16
 800b166:	4611      	mov	r1, r2
 800b168:	4618      	mov	r0, r3
 800b16a:	f000 fe73 	bl	800be54 <xTaskCheckForTimeOut>
 800b16e:	4603      	mov	r3, r0
 800b170:	2b00      	cmp	r3, #0
 800b172:	d123      	bne.n	800b1bc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b174:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b176:	f000 f997 	bl	800b4a8 <prvIsQueueEmpty>
 800b17a:	4603      	mov	r3, r0
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d017      	beq.n	800b1b0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b182:	3324      	adds	r3, #36	; 0x24
 800b184:	687a      	ldr	r2, [r7, #4]
 800b186:	4611      	mov	r1, r2
 800b188:	4618      	mov	r0, r3
 800b18a:	f000 fdc7 	bl	800bd1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b18e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b190:	f000 f938 	bl	800b404 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b194:	f000 fc0c 	bl	800b9b0 <xTaskResumeAll>
 800b198:	4603      	mov	r3, r0
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d189      	bne.n	800b0b2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b19e:	4b10      	ldr	r3, [pc, #64]	; (800b1e0 <xQueueReceive+0x1bc>)
 800b1a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1a4:	601a      	str	r2, [r3, #0]
 800b1a6:	f3bf 8f4f 	dsb	sy
 800b1aa:	f3bf 8f6f 	isb	sy
 800b1ae:	e780      	b.n	800b0b2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b1b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1b2:	f000 f927 	bl	800b404 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b1b6:	f000 fbfb 	bl	800b9b0 <xTaskResumeAll>
 800b1ba:	e77a      	b.n	800b0b2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b1bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1be:	f000 f921 	bl	800b404 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b1c2:	f000 fbf5 	bl	800b9b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b1c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1c8:	f000 f96e 	bl	800b4a8 <prvIsQueueEmpty>
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	f43f af6f 	beq.w	800b0b2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b1d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3730      	adds	r7, #48	; 0x30
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}
 800b1de:	bf00      	nop
 800b1e0:	e000ed04 	.word	0xe000ed04

0800b1e4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b08e      	sub	sp, #56	; 0x38
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	60f8      	str	r0, [r7, #12]
 800b1ec:	60b9      	str	r1, [r7, #8]
 800b1ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b1f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d10a      	bne.n	800b210 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800b1fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1fe:	f383 8811 	msr	BASEPRI, r3
 800b202:	f3bf 8f6f 	isb	sy
 800b206:	f3bf 8f4f 	dsb	sy
 800b20a:	623b      	str	r3, [r7, #32]
}
 800b20c:	bf00      	nop
 800b20e:	e7fe      	b.n	800b20e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d103      	bne.n	800b21e <xQueueReceiveFromISR+0x3a>
 800b216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d101      	bne.n	800b222 <xQueueReceiveFromISR+0x3e>
 800b21e:	2301      	movs	r3, #1
 800b220:	e000      	b.n	800b224 <xQueueReceiveFromISR+0x40>
 800b222:	2300      	movs	r3, #0
 800b224:	2b00      	cmp	r3, #0
 800b226:	d10a      	bne.n	800b23e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800b228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b22c:	f383 8811 	msr	BASEPRI, r3
 800b230:	f3bf 8f6f 	isb	sy
 800b234:	f3bf 8f4f 	dsb	sy
 800b238:	61fb      	str	r3, [r7, #28]
}
 800b23a:	bf00      	nop
 800b23c:	e7fe      	b.n	800b23c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b23e:	f001 fa6b 	bl	800c718 <vPortValidateInterruptPriority>
	__asm volatile
 800b242:	f3ef 8211 	mrs	r2, BASEPRI
 800b246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b24a:	f383 8811 	msr	BASEPRI, r3
 800b24e:	f3bf 8f6f 	isb	sy
 800b252:	f3bf 8f4f 	dsb	sy
 800b256:	61ba      	str	r2, [r7, #24]
 800b258:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b25a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b25c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b262:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b266:	2b00      	cmp	r3, #0
 800b268:	d02f      	beq.n	800b2ca <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b26c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b270:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b274:	68b9      	ldr	r1, [r7, #8]
 800b276:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b278:	f000 f89e 	bl	800b3b8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b27e:	1e5a      	subs	r2, r3, #1
 800b280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b282:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b284:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b28c:	d112      	bne.n	800b2b4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b290:	691b      	ldr	r3, [r3, #16]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d016      	beq.n	800b2c4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b298:	3310      	adds	r3, #16
 800b29a:	4618      	mov	r0, r3
 800b29c:	f000 fd62 	bl	800bd64 <xTaskRemoveFromEventList>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d00e      	beq.n	800b2c4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d00b      	beq.n	800b2c4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2201      	movs	r2, #1
 800b2b0:	601a      	str	r2, [r3, #0]
 800b2b2:	e007      	b.n	800b2c4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b2b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b2b8:	3301      	adds	r3, #1
 800b2ba:	b2db      	uxtb	r3, r3
 800b2bc:	b25a      	sxtb	r2, r3
 800b2be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	637b      	str	r3, [r7, #52]	; 0x34
 800b2c8:	e001      	b.n	800b2ce <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	637b      	str	r3, [r7, #52]	; 0x34
 800b2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2d0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b2d2:	693b      	ldr	r3, [r7, #16]
 800b2d4:	f383 8811 	msr	BASEPRI, r3
}
 800b2d8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b2da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3738      	adds	r7, #56	; 0x38
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}

0800b2e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b086      	sub	sp, #24
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	60f8      	str	r0, [r7, #12]
 800b2ec:	60b9      	str	r1, [r7, #8]
 800b2ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d10d      	bne.n	800b31e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d14d      	bne.n	800b3a6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	689b      	ldr	r3, [r3, #8]
 800b30e:	4618      	mov	r0, r3
 800b310:	f000 ff06 	bl	800c120 <xTaskPriorityDisinherit>
 800b314:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	2200      	movs	r2, #0
 800b31a:	609a      	str	r2, [r3, #8]
 800b31c:	e043      	b.n	800b3a6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d119      	bne.n	800b358 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	6858      	ldr	r0, [r3, #4]
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b32c:	461a      	mov	r2, r3
 800b32e:	68b9      	ldr	r1, [r7, #8]
 800b330:	f001 ff5a 	bl	800d1e8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	685a      	ldr	r2, [r3, #4]
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b33c:	441a      	add	r2, r3
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	685a      	ldr	r2, [r3, #4]
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	689b      	ldr	r3, [r3, #8]
 800b34a:	429a      	cmp	r2, r3
 800b34c:	d32b      	bcc.n	800b3a6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	681a      	ldr	r2, [r3, #0]
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	605a      	str	r2, [r3, #4]
 800b356:	e026      	b.n	800b3a6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	68d8      	ldr	r0, [r3, #12]
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b360:	461a      	mov	r2, r3
 800b362:	68b9      	ldr	r1, [r7, #8]
 800b364:	f001 ff40 	bl	800d1e8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	68da      	ldr	r2, [r3, #12]
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b370:	425b      	negs	r3, r3
 800b372:	441a      	add	r2, r3
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	68da      	ldr	r2, [r3, #12]
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	429a      	cmp	r2, r3
 800b382:	d207      	bcs.n	800b394 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	689a      	ldr	r2, [r3, #8]
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b38c:	425b      	negs	r3, r3
 800b38e:	441a      	add	r2, r3
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2b02      	cmp	r3, #2
 800b398:	d105      	bne.n	800b3a6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b39a:	693b      	ldr	r3, [r7, #16]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d002      	beq.n	800b3a6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	3b01      	subs	r3, #1
 800b3a4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b3a6:	693b      	ldr	r3, [r7, #16]
 800b3a8:	1c5a      	adds	r2, r3, #1
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b3ae:	697b      	ldr	r3, [r7, #20]
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	3718      	adds	r7, #24
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}

0800b3b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b082      	sub	sp, #8
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
 800b3c0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d018      	beq.n	800b3fc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	68da      	ldr	r2, [r3, #12]
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3d2:	441a      	add	r2, r3
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	68da      	ldr	r2, [r3, #12]
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	689b      	ldr	r3, [r3, #8]
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	d303      	bcc.n	800b3ec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681a      	ldr	r2, [r3, #0]
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	68d9      	ldr	r1, [r3, #12]
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3f4:	461a      	mov	r2, r3
 800b3f6:	6838      	ldr	r0, [r7, #0]
 800b3f8:	f001 fef6 	bl	800d1e8 <memcpy>
	}
}
 800b3fc:	bf00      	nop
 800b3fe:	3708      	adds	r7, #8
 800b400:	46bd      	mov	sp, r7
 800b402:	bd80      	pop	{r7, pc}

0800b404 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b084      	sub	sp, #16
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b40c:	f001 f8a2 	bl	800c554 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b416:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b418:	e011      	b.n	800b43e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d012      	beq.n	800b448 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	3324      	adds	r3, #36	; 0x24
 800b426:	4618      	mov	r0, r3
 800b428:	f000 fc9c 	bl	800bd64 <xTaskRemoveFromEventList>
 800b42c:	4603      	mov	r3, r0
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d001      	beq.n	800b436 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b432:	f000 fd71 	bl	800bf18 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b436:	7bfb      	ldrb	r3, [r7, #15]
 800b438:	3b01      	subs	r3, #1
 800b43a:	b2db      	uxtb	r3, r3
 800b43c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b43e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b442:	2b00      	cmp	r3, #0
 800b444:	dce9      	bgt.n	800b41a <prvUnlockQueue+0x16>
 800b446:	e000      	b.n	800b44a <prvUnlockQueue+0x46>
					break;
 800b448:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	22ff      	movs	r2, #255	; 0xff
 800b44e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b452:	f001 f8af 	bl	800c5b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b456:	f001 f87d 	bl	800c554 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b460:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b462:	e011      	b.n	800b488 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	691b      	ldr	r3, [r3, #16]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d012      	beq.n	800b492 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	3310      	adds	r3, #16
 800b470:	4618      	mov	r0, r3
 800b472:	f000 fc77 	bl	800bd64 <xTaskRemoveFromEventList>
 800b476:	4603      	mov	r3, r0
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d001      	beq.n	800b480 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b47c:	f000 fd4c 	bl	800bf18 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b480:	7bbb      	ldrb	r3, [r7, #14]
 800b482:	3b01      	subs	r3, #1
 800b484:	b2db      	uxtb	r3, r3
 800b486:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b488:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	dce9      	bgt.n	800b464 <prvUnlockQueue+0x60>
 800b490:	e000      	b.n	800b494 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b492:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	22ff      	movs	r2, #255	; 0xff
 800b498:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b49c:	f001 f88a 	bl	800c5b4 <vPortExitCritical>
}
 800b4a0:	bf00      	nop
 800b4a2:	3710      	adds	r7, #16
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}

0800b4a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b084      	sub	sp, #16
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b4b0:	f001 f850 	bl	800c554 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d102      	bne.n	800b4c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b4bc:	2301      	movs	r3, #1
 800b4be:	60fb      	str	r3, [r7, #12]
 800b4c0:	e001      	b.n	800b4c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b4c6:	f001 f875 	bl	800c5b4 <vPortExitCritical>

	return xReturn;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
}
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	3710      	adds	r7, #16
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bd80      	pop	{r7, pc}

0800b4d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b084      	sub	sp, #16
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b4dc:	f001 f83a 	bl	800c554 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4e8:	429a      	cmp	r2, r3
 800b4ea:	d102      	bne.n	800b4f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	60fb      	str	r3, [r7, #12]
 800b4f0:	e001      	b.n	800b4f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b4f6:	f001 f85d 	bl	800c5b4 <vPortExitCritical>

	return xReturn;
 800b4fa:	68fb      	ldr	r3, [r7, #12]
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3710      	adds	r7, #16
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}

0800b504 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b504:	b580      	push	{r7, lr}
 800b506:	b08e      	sub	sp, #56	; 0x38
 800b508:	af04      	add	r7, sp, #16
 800b50a:	60f8      	str	r0, [r7, #12]
 800b50c:	60b9      	str	r1, [r7, #8]
 800b50e:	607a      	str	r2, [r7, #4]
 800b510:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b514:	2b00      	cmp	r3, #0
 800b516:	d10a      	bne.n	800b52e <xTaskCreateStatic+0x2a>
	__asm volatile
 800b518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b51c:	f383 8811 	msr	BASEPRI, r3
 800b520:	f3bf 8f6f 	isb	sy
 800b524:	f3bf 8f4f 	dsb	sy
 800b528:	623b      	str	r3, [r7, #32]
}
 800b52a:	bf00      	nop
 800b52c:	e7fe      	b.n	800b52c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b52e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b530:	2b00      	cmp	r3, #0
 800b532:	d10a      	bne.n	800b54a <xTaskCreateStatic+0x46>
	__asm volatile
 800b534:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b538:	f383 8811 	msr	BASEPRI, r3
 800b53c:	f3bf 8f6f 	isb	sy
 800b540:	f3bf 8f4f 	dsb	sy
 800b544:	61fb      	str	r3, [r7, #28]
}
 800b546:	bf00      	nop
 800b548:	e7fe      	b.n	800b548 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b54a:	23b4      	movs	r3, #180	; 0xb4
 800b54c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b54e:	693b      	ldr	r3, [r7, #16]
 800b550:	2bb4      	cmp	r3, #180	; 0xb4
 800b552:	d00a      	beq.n	800b56a <xTaskCreateStatic+0x66>
	__asm volatile
 800b554:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b558:	f383 8811 	msr	BASEPRI, r3
 800b55c:	f3bf 8f6f 	isb	sy
 800b560:	f3bf 8f4f 	dsb	sy
 800b564:	61bb      	str	r3, [r7, #24]
}
 800b566:	bf00      	nop
 800b568:	e7fe      	b.n	800b568 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b56a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b56c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d01e      	beq.n	800b5b0 <xTaskCreateStatic+0xac>
 800b572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b574:	2b00      	cmp	r3, #0
 800b576:	d01b      	beq.n	800b5b0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b57a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b57e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b580:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b584:	2202      	movs	r2, #2
 800b586:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b58a:	2300      	movs	r3, #0
 800b58c:	9303      	str	r3, [sp, #12]
 800b58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b590:	9302      	str	r3, [sp, #8]
 800b592:	f107 0314 	add.w	r3, r7, #20
 800b596:	9301      	str	r3, [sp, #4]
 800b598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b59a:	9300      	str	r3, [sp, #0]
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	687a      	ldr	r2, [r7, #4]
 800b5a0:	68b9      	ldr	r1, [r7, #8]
 800b5a2:	68f8      	ldr	r0, [r7, #12]
 800b5a4:	f000 f850 	bl	800b648 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b5a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b5aa:	f000 f8eb 	bl	800b784 <prvAddNewTaskToReadyList>
 800b5ae:	e001      	b.n	800b5b4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b5b4:	697b      	ldr	r3, [r7, #20]
	}
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	3728      	adds	r7, #40	; 0x28
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}

0800b5be <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b5be:	b580      	push	{r7, lr}
 800b5c0:	b08c      	sub	sp, #48	; 0x30
 800b5c2:	af04      	add	r7, sp, #16
 800b5c4:	60f8      	str	r0, [r7, #12]
 800b5c6:	60b9      	str	r1, [r7, #8]
 800b5c8:	603b      	str	r3, [r7, #0]
 800b5ca:	4613      	mov	r3, r2
 800b5cc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b5ce:	88fb      	ldrh	r3, [r7, #6]
 800b5d0:	009b      	lsls	r3, r3, #2
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f001 f8e0 	bl	800c798 <pvPortMalloc>
 800b5d8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d00e      	beq.n	800b5fe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b5e0:	20b4      	movs	r0, #180	; 0xb4
 800b5e2:	f001 f8d9 	bl	800c798 <pvPortMalloc>
 800b5e6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b5e8:	69fb      	ldr	r3, [r7, #28]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d003      	beq.n	800b5f6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b5ee:	69fb      	ldr	r3, [r7, #28]
 800b5f0:	697a      	ldr	r2, [r7, #20]
 800b5f2:	631a      	str	r2, [r3, #48]	; 0x30
 800b5f4:	e005      	b.n	800b602 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b5f6:	6978      	ldr	r0, [r7, #20]
 800b5f8:	f001 f99a 	bl	800c930 <vPortFree>
 800b5fc:	e001      	b.n	800b602 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b5fe:	2300      	movs	r3, #0
 800b600:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b602:	69fb      	ldr	r3, [r7, #28]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d017      	beq.n	800b638 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b608:	69fb      	ldr	r3, [r7, #28]
 800b60a:	2200      	movs	r2, #0
 800b60c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b610:	88fa      	ldrh	r2, [r7, #6]
 800b612:	2300      	movs	r3, #0
 800b614:	9303      	str	r3, [sp, #12]
 800b616:	69fb      	ldr	r3, [r7, #28]
 800b618:	9302      	str	r3, [sp, #8]
 800b61a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b61c:	9301      	str	r3, [sp, #4]
 800b61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b620:	9300      	str	r3, [sp, #0]
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	68b9      	ldr	r1, [r7, #8]
 800b626:	68f8      	ldr	r0, [r7, #12]
 800b628:	f000 f80e 	bl	800b648 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b62c:	69f8      	ldr	r0, [r7, #28]
 800b62e:	f000 f8a9 	bl	800b784 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b632:	2301      	movs	r3, #1
 800b634:	61bb      	str	r3, [r7, #24]
 800b636:	e002      	b.n	800b63e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b638:	f04f 33ff 	mov.w	r3, #4294967295
 800b63c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b63e:	69bb      	ldr	r3, [r7, #24]
	}
 800b640:	4618      	mov	r0, r3
 800b642:	3720      	adds	r7, #32
 800b644:	46bd      	mov	sp, r7
 800b646:	bd80      	pop	{r7, pc}

0800b648 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b088      	sub	sp, #32
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	60f8      	str	r0, [r7, #12]
 800b650:	60b9      	str	r1, [r7, #8]
 800b652:	607a      	str	r2, [r7, #4]
 800b654:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b660:	3b01      	subs	r3, #1
 800b662:	009b      	lsls	r3, r3, #2
 800b664:	4413      	add	r3, r2
 800b666:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b668:	69bb      	ldr	r3, [r7, #24]
 800b66a:	f023 0307 	bic.w	r3, r3, #7
 800b66e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b670:	69bb      	ldr	r3, [r7, #24]
 800b672:	f003 0307 	and.w	r3, r3, #7
 800b676:	2b00      	cmp	r3, #0
 800b678:	d00a      	beq.n	800b690 <prvInitialiseNewTask+0x48>
	__asm volatile
 800b67a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b67e:	f383 8811 	msr	BASEPRI, r3
 800b682:	f3bf 8f6f 	isb	sy
 800b686:	f3bf 8f4f 	dsb	sy
 800b68a:	617b      	str	r3, [r7, #20]
}
 800b68c:	bf00      	nop
 800b68e:	e7fe      	b.n	800b68e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d01f      	beq.n	800b6d6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b696:	2300      	movs	r3, #0
 800b698:	61fb      	str	r3, [r7, #28]
 800b69a:	e012      	b.n	800b6c2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b69c:	68ba      	ldr	r2, [r7, #8]
 800b69e:	69fb      	ldr	r3, [r7, #28]
 800b6a0:	4413      	add	r3, r2
 800b6a2:	7819      	ldrb	r1, [r3, #0]
 800b6a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6a6:	69fb      	ldr	r3, [r7, #28]
 800b6a8:	4413      	add	r3, r2
 800b6aa:	3334      	adds	r3, #52	; 0x34
 800b6ac:	460a      	mov	r2, r1
 800b6ae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b6b0:	68ba      	ldr	r2, [r7, #8]
 800b6b2:	69fb      	ldr	r3, [r7, #28]
 800b6b4:	4413      	add	r3, r2
 800b6b6:	781b      	ldrb	r3, [r3, #0]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d006      	beq.n	800b6ca <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b6bc:	69fb      	ldr	r3, [r7, #28]
 800b6be:	3301      	adds	r3, #1
 800b6c0:	61fb      	str	r3, [r7, #28]
 800b6c2:	69fb      	ldr	r3, [r7, #28]
 800b6c4:	2b0f      	cmp	r3, #15
 800b6c6:	d9e9      	bls.n	800b69c <prvInitialiseNewTask+0x54>
 800b6c8:	e000      	b.n	800b6cc <prvInitialiseNewTask+0x84>
			{
				break;
 800b6ca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b6cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b6d4:	e003      	b.n	800b6de <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b6d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6d8:	2200      	movs	r2, #0
 800b6da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6e0:	2b06      	cmp	r3, #6
 800b6e2:	d901      	bls.n	800b6e8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b6e4:	2306      	movs	r3, #6
 800b6e6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b6e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6ec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b6ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6f2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b6f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b6fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6fc:	3304      	adds	r3, #4
 800b6fe:	4618      	mov	r0, r3
 800b700:	f7ff f928 	bl	800a954 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b706:	3318      	adds	r3, #24
 800b708:	4618      	mov	r0, r3
 800b70a:	f7ff f923 	bl	800a954 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b712:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b716:	f1c3 0207 	rsb	r2, r3, #7
 800b71a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b71c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b71e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b720:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b722:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b726:	2200      	movs	r2, #0
 800b728:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b72c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b72e:	2200      	movs	r2, #0
 800b730:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b736:	334c      	adds	r3, #76	; 0x4c
 800b738:	2260      	movs	r2, #96	; 0x60
 800b73a:	2100      	movs	r1, #0
 800b73c:	4618      	mov	r0, r3
 800b73e:	f001 fd61 	bl	800d204 <memset>
 800b742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b744:	4a0c      	ldr	r2, [pc, #48]	; (800b778 <prvInitialiseNewTask+0x130>)
 800b746:	651a      	str	r2, [r3, #80]	; 0x50
 800b748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b74a:	4a0c      	ldr	r2, [pc, #48]	; (800b77c <prvInitialiseNewTask+0x134>)
 800b74c:	655a      	str	r2, [r3, #84]	; 0x54
 800b74e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b750:	4a0b      	ldr	r2, [pc, #44]	; (800b780 <prvInitialiseNewTask+0x138>)
 800b752:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b754:	683a      	ldr	r2, [r7, #0]
 800b756:	68f9      	ldr	r1, [r7, #12]
 800b758:	69b8      	ldr	r0, [r7, #24]
 800b75a:	f000 fdcd 	bl	800c2f8 <pxPortInitialiseStack>
 800b75e:	4602      	mov	r2, r0
 800b760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b762:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b766:	2b00      	cmp	r3, #0
 800b768:	d002      	beq.n	800b770 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b76a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b76c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b76e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b770:	bf00      	nop
 800b772:	3720      	adds	r7, #32
 800b774:	46bd      	mov	sp, r7
 800b776:	bd80      	pop	{r7, pc}
 800b778:	0800dc58 	.word	0x0800dc58
 800b77c:	0800dc78 	.word	0x0800dc78
 800b780:	0800dc38 	.word	0x0800dc38

0800b784 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b082      	sub	sp, #8
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b78c:	f000 fee2 	bl	800c554 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b790:	4b2a      	ldr	r3, [pc, #168]	; (800b83c <prvAddNewTaskToReadyList+0xb8>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	3301      	adds	r3, #1
 800b796:	4a29      	ldr	r2, [pc, #164]	; (800b83c <prvAddNewTaskToReadyList+0xb8>)
 800b798:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b79a:	4b29      	ldr	r3, [pc, #164]	; (800b840 <prvAddNewTaskToReadyList+0xbc>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d109      	bne.n	800b7b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b7a2:	4a27      	ldr	r2, [pc, #156]	; (800b840 <prvAddNewTaskToReadyList+0xbc>)
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b7a8:	4b24      	ldr	r3, [pc, #144]	; (800b83c <prvAddNewTaskToReadyList+0xb8>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	2b01      	cmp	r3, #1
 800b7ae:	d110      	bne.n	800b7d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b7b0:	f000 fbd6 	bl	800bf60 <prvInitialiseTaskLists>
 800b7b4:	e00d      	b.n	800b7d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b7b6:	4b23      	ldr	r3, [pc, #140]	; (800b844 <prvAddNewTaskToReadyList+0xc0>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d109      	bne.n	800b7d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b7be:	4b20      	ldr	r3, [pc, #128]	; (800b840 <prvAddNewTaskToReadyList+0xbc>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7c8:	429a      	cmp	r2, r3
 800b7ca:	d802      	bhi.n	800b7d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b7cc:	4a1c      	ldr	r2, [pc, #112]	; (800b840 <prvAddNewTaskToReadyList+0xbc>)
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b7d2:	4b1d      	ldr	r3, [pc, #116]	; (800b848 <prvAddNewTaskToReadyList+0xc4>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	3301      	adds	r3, #1
 800b7d8:	4a1b      	ldr	r2, [pc, #108]	; (800b848 <prvAddNewTaskToReadyList+0xc4>)
 800b7da:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7e0:	2201      	movs	r2, #1
 800b7e2:	409a      	lsls	r2, r3
 800b7e4:	4b19      	ldr	r3, [pc, #100]	; (800b84c <prvAddNewTaskToReadyList+0xc8>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	4313      	orrs	r3, r2
 800b7ea:	4a18      	ldr	r2, [pc, #96]	; (800b84c <prvAddNewTaskToReadyList+0xc8>)
 800b7ec:	6013      	str	r3, [r2, #0]
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7f2:	4613      	mov	r3, r2
 800b7f4:	009b      	lsls	r3, r3, #2
 800b7f6:	4413      	add	r3, r2
 800b7f8:	009b      	lsls	r3, r3, #2
 800b7fa:	4a15      	ldr	r2, [pc, #84]	; (800b850 <prvAddNewTaskToReadyList+0xcc>)
 800b7fc:	441a      	add	r2, r3
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	3304      	adds	r3, #4
 800b802:	4619      	mov	r1, r3
 800b804:	4610      	mov	r0, r2
 800b806:	f7ff f8b2 	bl	800a96e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b80a:	f000 fed3 	bl	800c5b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b80e:	4b0d      	ldr	r3, [pc, #52]	; (800b844 <prvAddNewTaskToReadyList+0xc0>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d00e      	beq.n	800b834 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b816:	4b0a      	ldr	r3, [pc, #40]	; (800b840 <prvAddNewTaskToReadyList+0xbc>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b820:	429a      	cmp	r2, r3
 800b822:	d207      	bcs.n	800b834 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b824:	4b0b      	ldr	r3, [pc, #44]	; (800b854 <prvAddNewTaskToReadyList+0xd0>)
 800b826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b82a:	601a      	str	r2, [r3, #0]
 800b82c:	f3bf 8f4f 	dsb	sy
 800b830:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b834:	bf00      	nop
 800b836:	3708      	adds	r7, #8
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd80      	pop	{r7, pc}
 800b83c:	20000468 	.word	0x20000468
 800b840:	20000368 	.word	0x20000368
 800b844:	20000474 	.word	0x20000474
 800b848:	20000484 	.word	0x20000484
 800b84c:	20000470 	.word	0x20000470
 800b850:	2000036c 	.word	0x2000036c
 800b854:	e000ed04 	.word	0xe000ed04

0800b858 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b084      	sub	sp, #16
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b860:	2300      	movs	r3, #0
 800b862:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d017      	beq.n	800b89a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b86a:	4b13      	ldr	r3, [pc, #76]	; (800b8b8 <vTaskDelay+0x60>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d00a      	beq.n	800b888 <vTaskDelay+0x30>
	__asm volatile
 800b872:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b876:	f383 8811 	msr	BASEPRI, r3
 800b87a:	f3bf 8f6f 	isb	sy
 800b87e:	f3bf 8f4f 	dsb	sy
 800b882:	60bb      	str	r3, [r7, #8]
}
 800b884:	bf00      	nop
 800b886:	e7fe      	b.n	800b886 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b888:	f000 f884 	bl	800b994 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b88c:	2100      	movs	r1, #0
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	f000 fccc 	bl	800c22c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b894:	f000 f88c 	bl	800b9b0 <xTaskResumeAll>
 800b898:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d107      	bne.n	800b8b0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b8a0:	4b06      	ldr	r3, [pc, #24]	; (800b8bc <vTaskDelay+0x64>)
 800b8a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8a6:	601a      	str	r2, [r3, #0]
 800b8a8:	f3bf 8f4f 	dsb	sy
 800b8ac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b8b0:	bf00      	nop
 800b8b2:	3710      	adds	r7, #16
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bd80      	pop	{r7, pc}
 800b8b8:	20000490 	.word	0x20000490
 800b8bc:	e000ed04 	.word	0xe000ed04

0800b8c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b08a      	sub	sp, #40	; 0x28
 800b8c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b8ce:	463a      	mov	r2, r7
 800b8d0:	1d39      	adds	r1, r7, #4
 800b8d2:	f107 0308 	add.w	r3, r7, #8
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f7f5 f954 	bl	8000b84 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b8dc:	6839      	ldr	r1, [r7, #0]
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	68ba      	ldr	r2, [r7, #8]
 800b8e2:	9202      	str	r2, [sp, #8]
 800b8e4:	9301      	str	r3, [sp, #4]
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	9300      	str	r3, [sp, #0]
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	460a      	mov	r2, r1
 800b8ee:	4921      	ldr	r1, [pc, #132]	; (800b974 <vTaskStartScheduler+0xb4>)
 800b8f0:	4821      	ldr	r0, [pc, #132]	; (800b978 <vTaskStartScheduler+0xb8>)
 800b8f2:	f7ff fe07 	bl	800b504 <xTaskCreateStatic>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	4a20      	ldr	r2, [pc, #128]	; (800b97c <vTaskStartScheduler+0xbc>)
 800b8fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b8fc:	4b1f      	ldr	r3, [pc, #124]	; (800b97c <vTaskStartScheduler+0xbc>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d002      	beq.n	800b90a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b904:	2301      	movs	r3, #1
 800b906:	617b      	str	r3, [r7, #20]
 800b908:	e001      	b.n	800b90e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b90a:	2300      	movs	r3, #0
 800b90c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b90e:	697b      	ldr	r3, [r7, #20]
 800b910:	2b01      	cmp	r3, #1
 800b912:	d11b      	bne.n	800b94c <vTaskStartScheduler+0x8c>
	__asm volatile
 800b914:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b918:	f383 8811 	msr	BASEPRI, r3
 800b91c:	f3bf 8f6f 	isb	sy
 800b920:	f3bf 8f4f 	dsb	sy
 800b924:	613b      	str	r3, [r7, #16]
}
 800b926:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b928:	4b15      	ldr	r3, [pc, #84]	; (800b980 <vTaskStartScheduler+0xc0>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	334c      	adds	r3, #76	; 0x4c
 800b92e:	4a15      	ldr	r2, [pc, #84]	; (800b984 <vTaskStartScheduler+0xc4>)
 800b930:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b932:	4b15      	ldr	r3, [pc, #84]	; (800b988 <vTaskStartScheduler+0xc8>)
 800b934:	f04f 32ff 	mov.w	r2, #4294967295
 800b938:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b93a:	4b14      	ldr	r3, [pc, #80]	; (800b98c <vTaskStartScheduler+0xcc>)
 800b93c:	2201      	movs	r2, #1
 800b93e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b940:	4b13      	ldr	r3, [pc, #76]	; (800b990 <vTaskStartScheduler+0xd0>)
 800b942:	2200      	movs	r2, #0
 800b944:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b946:	f000 fd63 	bl	800c410 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b94a:	e00e      	b.n	800b96a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b94c:	697b      	ldr	r3, [r7, #20]
 800b94e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b952:	d10a      	bne.n	800b96a <vTaskStartScheduler+0xaa>
	__asm volatile
 800b954:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b958:	f383 8811 	msr	BASEPRI, r3
 800b95c:	f3bf 8f6f 	isb	sy
 800b960:	f3bf 8f4f 	dsb	sy
 800b964:	60fb      	str	r3, [r7, #12]
}
 800b966:	bf00      	nop
 800b968:	e7fe      	b.n	800b968 <vTaskStartScheduler+0xa8>
}
 800b96a:	bf00      	nop
 800b96c:	3718      	adds	r7, #24
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd80      	pop	{r7, pc}
 800b972:	bf00      	nop
 800b974:	0800dc10 	.word	0x0800dc10
 800b978:	0800bf31 	.word	0x0800bf31
 800b97c:	2000048c 	.word	0x2000048c
 800b980:	20000368 	.word	0x20000368
 800b984:	20000030 	.word	0x20000030
 800b988:	20000488 	.word	0x20000488
 800b98c:	20000474 	.word	0x20000474
 800b990:	2000046c 	.word	0x2000046c

0800b994 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b994:	b480      	push	{r7}
 800b996:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b998:	4b04      	ldr	r3, [pc, #16]	; (800b9ac <vTaskSuspendAll+0x18>)
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	3301      	adds	r3, #1
 800b99e:	4a03      	ldr	r2, [pc, #12]	; (800b9ac <vTaskSuspendAll+0x18>)
 800b9a0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b9a2:	bf00      	nop
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9aa:	4770      	bx	lr
 800b9ac:	20000490 	.word	0x20000490

0800b9b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b084      	sub	sp, #16
 800b9b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b9be:	4b41      	ldr	r3, [pc, #260]	; (800bac4 <xTaskResumeAll+0x114>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d10a      	bne.n	800b9dc <xTaskResumeAll+0x2c>
	__asm volatile
 800b9c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ca:	f383 8811 	msr	BASEPRI, r3
 800b9ce:	f3bf 8f6f 	isb	sy
 800b9d2:	f3bf 8f4f 	dsb	sy
 800b9d6:	603b      	str	r3, [r7, #0]
}
 800b9d8:	bf00      	nop
 800b9da:	e7fe      	b.n	800b9da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b9dc:	f000 fdba 	bl	800c554 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b9e0:	4b38      	ldr	r3, [pc, #224]	; (800bac4 <xTaskResumeAll+0x114>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	3b01      	subs	r3, #1
 800b9e6:	4a37      	ldr	r2, [pc, #220]	; (800bac4 <xTaskResumeAll+0x114>)
 800b9e8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9ea:	4b36      	ldr	r3, [pc, #216]	; (800bac4 <xTaskResumeAll+0x114>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d161      	bne.n	800bab6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b9f2:	4b35      	ldr	r3, [pc, #212]	; (800bac8 <xTaskResumeAll+0x118>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d05d      	beq.n	800bab6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b9fa:	e02e      	b.n	800ba5a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9fc:	4b33      	ldr	r3, [pc, #204]	; (800bacc <xTaskResumeAll+0x11c>)
 800b9fe:	68db      	ldr	r3, [r3, #12]
 800ba00:	68db      	ldr	r3, [r3, #12]
 800ba02:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	3318      	adds	r3, #24
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f7ff f80d 	bl	800aa28 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	3304      	adds	r3, #4
 800ba12:	4618      	mov	r0, r3
 800ba14:	f7ff f808 	bl	800aa28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba1c:	2201      	movs	r2, #1
 800ba1e:	409a      	lsls	r2, r3
 800ba20:	4b2b      	ldr	r3, [pc, #172]	; (800bad0 <xTaskResumeAll+0x120>)
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	4313      	orrs	r3, r2
 800ba26:	4a2a      	ldr	r2, [pc, #168]	; (800bad0 <xTaskResumeAll+0x120>)
 800ba28:	6013      	str	r3, [r2, #0]
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba2e:	4613      	mov	r3, r2
 800ba30:	009b      	lsls	r3, r3, #2
 800ba32:	4413      	add	r3, r2
 800ba34:	009b      	lsls	r3, r3, #2
 800ba36:	4a27      	ldr	r2, [pc, #156]	; (800bad4 <xTaskResumeAll+0x124>)
 800ba38:	441a      	add	r2, r3
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	3304      	adds	r3, #4
 800ba3e:	4619      	mov	r1, r3
 800ba40:	4610      	mov	r0, r2
 800ba42:	f7fe ff94 	bl	800a96e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba4a:	4b23      	ldr	r3, [pc, #140]	; (800bad8 <xTaskResumeAll+0x128>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba50:	429a      	cmp	r2, r3
 800ba52:	d302      	bcc.n	800ba5a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800ba54:	4b21      	ldr	r3, [pc, #132]	; (800badc <xTaskResumeAll+0x12c>)
 800ba56:	2201      	movs	r2, #1
 800ba58:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ba5a:	4b1c      	ldr	r3, [pc, #112]	; (800bacc <xTaskResumeAll+0x11c>)
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d1cc      	bne.n	800b9fc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d001      	beq.n	800ba6c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ba68:	f000 fb1c 	bl	800c0a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ba6c:	4b1c      	ldr	r3, [pc, #112]	; (800bae0 <xTaskResumeAll+0x130>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d010      	beq.n	800ba9a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ba78:	f000 f836 	bl	800bae8 <xTaskIncrementTick>
 800ba7c:	4603      	mov	r3, r0
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d002      	beq.n	800ba88 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800ba82:	4b16      	ldr	r3, [pc, #88]	; (800badc <xTaskResumeAll+0x12c>)
 800ba84:	2201      	movs	r2, #1
 800ba86:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	3b01      	subs	r3, #1
 800ba8c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d1f1      	bne.n	800ba78 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800ba94:	4b12      	ldr	r3, [pc, #72]	; (800bae0 <xTaskResumeAll+0x130>)
 800ba96:	2200      	movs	r2, #0
 800ba98:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ba9a:	4b10      	ldr	r3, [pc, #64]	; (800badc <xTaskResumeAll+0x12c>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d009      	beq.n	800bab6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800baa2:	2301      	movs	r3, #1
 800baa4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800baa6:	4b0f      	ldr	r3, [pc, #60]	; (800bae4 <xTaskResumeAll+0x134>)
 800baa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800baac:	601a      	str	r2, [r3, #0]
 800baae:	f3bf 8f4f 	dsb	sy
 800bab2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bab6:	f000 fd7d 	bl	800c5b4 <vPortExitCritical>

	return xAlreadyYielded;
 800baba:	68bb      	ldr	r3, [r7, #8]
}
 800babc:	4618      	mov	r0, r3
 800babe:	3710      	adds	r7, #16
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}
 800bac4:	20000490 	.word	0x20000490
 800bac8:	20000468 	.word	0x20000468
 800bacc:	20000428 	.word	0x20000428
 800bad0:	20000470 	.word	0x20000470
 800bad4:	2000036c 	.word	0x2000036c
 800bad8:	20000368 	.word	0x20000368
 800badc:	2000047c 	.word	0x2000047c
 800bae0:	20000478 	.word	0x20000478
 800bae4:	e000ed04 	.word	0xe000ed04

0800bae8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b086      	sub	sp, #24
 800baec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800baee:	2300      	movs	r3, #0
 800baf0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800baf2:	4b4e      	ldr	r3, [pc, #312]	; (800bc2c <xTaskIncrementTick+0x144>)
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	f040 808e 	bne.w	800bc18 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bafc:	4b4c      	ldr	r3, [pc, #304]	; (800bc30 <xTaskIncrementTick+0x148>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	3301      	adds	r3, #1
 800bb02:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bb04:	4a4a      	ldr	r2, [pc, #296]	; (800bc30 <xTaskIncrementTick+0x148>)
 800bb06:	693b      	ldr	r3, [r7, #16]
 800bb08:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bb0a:	693b      	ldr	r3, [r7, #16]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d120      	bne.n	800bb52 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bb10:	4b48      	ldr	r3, [pc, #288]	; (800bc34 <xTaskIncrementTick+0x14c>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d00a      	beq.n	800bb30 <xTaskIncrementTick+0x48>
	__asm volatile
 800bb1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb1e:	f383 8811 	msr	BASEPRI, r3
 800bb22:	f3bf 8f6f 	isb	sy
 800bb26:	f3bf 8f4f 	dsb	sy
 800bb2a:	603b      	str	r3, [r7, #0]
}
 800bb2c:	bf00      	nop
 800bb2e:	e7fe      	b.n	800bb2e <xTaskIncrementTick+0x46>
 800bb30:	4b40      	ldr	r3, [pc, #256]	; (800bc34 <xTaskIncrementTick+0x14c>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	60fb      	str	r3, [r7, #12]
 800bb36:	4b40      	ldr	r3, [pc, #256]	; (800bc38 <xTaskIncrementTick+0x150>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	4a3e      	ldr	r2, [pc, #248]	; (800bc34 <xTaskIncrementTick+0x14c>)
 800bb3c:	6013      	str	r3, [r2, #0]
 800bb3e:	4a3e      	ldr	r2, [pc, #248]	; (800bc38 <xTaskIncrementTick+0x150>)
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	6013      	str	r3, [r2, #0]
 800bb44:	4b3d      	ldr	r3, [pc, #244]	; (800bc3c <xTaskIncrementTick+0x154>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	3301      	adds	r3, #1
 800bb4a:	4a3c      	ldr	r2, [pc, #240]	; (800bc3c <xTaskIncrementTick+0x154>)
 800bb4c:	6013      	str	r3, [r2, #0]
 800bb4e:	f000 faa9 	bl	800c0a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bb52:	4b3b      	ldr	r3, [pc, #236]	; (800bc40 <xTaskIncrementTick+0x158>)
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	693a      	ldr	r2, [r7, #16]
 800bb58:	429a      	cmp	r2, r3
 800bb5a:	d348      	bcc.n	800bbee <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb5c:	4b35      	ldr	r3, [pc, #212]	; (800bc34 <xTaskIncrementTick+0x14c>)
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d104      	bne.n	800bb70 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb66:	4b36      	ldr	r3, [pc, #216]	; (800bc40 <xTaskIncrementTick+0x158>)
 800bb68:	f04f 32ff 	mov.w	r2, #4294967295
 800bb6c:	601a      	str	r2, [r3, #0]
					break;
 800bb6e:	e03e      	b.n	800bbee <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb70:	4b30      	ldr	r3, [pc, #192]	; (800bc34 <xTaskIncrementTick+0x14c>)
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	68db      	ldr	r3, [r3, #12]
 800bb76:	68db      	ldr	r3, [r3, #12]
 800bb78:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bb7a:	68bb      	ldr	r3, [r7, #8]
 800bb7c:	685b      	ldr	r3, [r3, #4]
 800bb7e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bb80:	693a      	ldr	r2, [r7, #16]
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	429a      	cmp	r2, r3
 800bb86:	d203      	bcs.n	800bb90 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bb88:	4a2d      	ldr	r2, [pc, #180]	; (800bc40 <xTaskIncrementTick+0x158>)
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bb8e:	e02e      	b.n	800bbee <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb90:	68bb      	ldr	r3, [r7, #8]
 800bb92:	3304      	adds	r3, #4
 800bb94:	4618      	mov	r0, r3
 800bb96:	f7fe ff47 	bl	800aa28 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d004      	beq.n	800bbac <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	3318      	adds	r3, #24
 800bba6:	4618      	mov	r0, r3
 800bba8:	f7fe ff3e 	bl	800aa28 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbb0:	2201      	movs	r2, #1
 800bbb2:	409a      	lsls	r2, r3
 800bbb4:	4b23      	ldr	r3, [pc, #140]	; (800bc44 <xTaskIncrementTick+0x15c>)
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	4313      	orrs	r3, r2
 800bbba:	4a22      	ldr	r2, [pc, #136]	; (800bc44 <xTaskIncrementTick+0x15c>)
 800bbbc:	6013      	str	r3, [r2, #0]
 800bbbe:	68bb      	ldr	r3, [r7, #8]
 800bbc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbc2:	4613      	mov	r3, r2
 800bbc4:	009b      	lsls	r3, r3, #2
 800bbc6:	4413      	add	r3, r2
 800bbc8:	009b      	lsls	r3, r3, #2
 800bbca:	4a1f      	ldr	r2, [pc, #124]	; (800bc48 <xTaskIncrementTick+0x160>)
 800bbcc:	441a      	add	r2, r3
 800bbce:	68bb      	ldr	r3, [r7, #8]
 800bbd0:	3304      	adds	r3, #4
 800bbd2:	4619      	mov	r1, r3
 800bbd4:	4610      	mov	r0, r2
 800bbd6:	f7fe feca 	bl	800a96e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbde:	4b1b      	ldr	r3, [pc, #108]	; (800bc4c <xTaskIncrementTick+0x164>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbe4:	429a      	cmp	r2, r3
 800bbe6:	d3b9      	bcc.n	800bb5c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bbe8:	2301      	movs	r3, #1
 800bbea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bbec:	e7b6      	b.n	800bb5c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bbee:	4b17      	ldr	r3, [pc, #92]	; (800bc4c <xTaskIncrementTick+0x164>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbf4:	4914      	ldr	r1, [pc, #80]	; (800bc48 <xTaskIncrementTick+0x160>)
 800bbf6:	4613      	mov	r3, r2
 800bbf8:	009b      	lsls	r3, r3, #2
 800bbfa:	4413      	add	r3, r2
 800bbfc:	009b      	lsls	r3, r3, #2
 800bbfe:	440b      	add	r3, r1
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	2b01      	cmp	r3, #1
 800bc04:	d901      	bls.n	800bc0a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800bc06:	2301      	movs	r3, #1
 800bc08:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bc0a:	4b11      	ldr	r3, [pc, #68]	; (800bc50 <xTaskIncrementTick+0x168>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d007      	beq.n	800bc22 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800bc12:	2301      	movs	r3, #1
 800bc14:	617b      	str	r3, [r7, #20]
 800bc16:	e004      	b.n	800bc22 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bc18:	4b0e      	ldr	r3, [pc, #56]	; (800bc54 <xTaskIncrementTick+0x16c>)
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	3301      	adds	r3, #1
 800bc1e:	4a0d      	ldr	r2, [pc, #52]	; (800bc54 <xTaskIncrementTick+0x16c>)
 800bc20:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bc22:	697b      	ldr	r3, [r7, #20]
}
 800bc24:	4618      	mov	r0, r3
 800bc26:	3718      	adds	r7, #24
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bd80      	pop	{r7, pc}
 800bc2c:	20000490 	.word	0x20000490
 800bc30:	2000046c 	.word	0x2000046c
 800bc34:	20000420 	.word	0x20000420
 800bc38:	20000424 	.word	0x20000424
 800bc3c:	20000480 	.word	0x20000480
 800bc40:	20000488 	.word	0x20000488
 800bc44:	20000470 	.word	0x20000470
 800bc48:	2000036c 	.word	0x2000036c
 800bc4c:	20000368 	.word	0x20000368
 800bc50:	2000047c 	.word	0x2000047c
 800bc54:	20000478 	.word	0x20000478

0800bc58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bc58:	b480      	push	{r7}
 800bc5a:	b087      	sub	sp, #28
 800bc5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bc5e:	4b29      	ldr	r3, [pc, #164]	; (800bd04 <vTaskSwitchContext+0xac>)
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d003      	beq.n	800bc6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bc66:	4b28      	ldr	r3, [pc, #160]	; (800bd08 <vTaskSwitchContext+0xb0>)
 800bc68:	2201      	movs	r2, #1
 800bc6a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bc6c:	e044      	b.n	800bcf8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800bc6e:	4b26      	ldr	r3, [pc, #152]	; (800bd08 <vTaskSwitchContext+0xb0>)
 800bc70:	2200      	movs	r2, #0
 800bc72:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc74:	4b25      	ldr	r3, [pc, #148]	; (800bd0c <vTaskSwitchContext+0xb4>)
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	fab3 f383 	clz	r3, r3
 800bc80:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800bc82:	7afb      	ldrb	r3, [r7, #11]
 800bc84:	f1c3 031f 	rsb	r3, r3, #31
 800bc88:	617b      	str	r3, [r7, #20]
 800bc8a:	4921      	ldr	r1, [pc, #132]	; (800bd10 <vTaskSwitchContext+0xb8>)
 800bc8c:	697a      	ldr	r2, [r7, #20]
 800bc8e:	4613      	mov	r3, r2
 800bc90:	009b      	lsls	r3, r3, #2
 800bc92:	4413      	add	r3, r2
 800bc94:	009b      	lsls	r3, r3, #2
 800bc96:	440b      	add	r3, r1
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d10a      	bne.n	800bcb4 <vTaskSwitchContext+0x5c>
	__asm volatile
 800bc9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bca2:	f383 8811 	msr	BASEPRI, r3
 800bca6:	f3bf 8f6f 	isb	sy
 800bcaa:	f3bf 8f4f 	dsb	sy
 800bcae:	607b      	str	r3, [r7, #4]
}
 800bcb0:	bf00      	nop
 800bcb2:	e7fe      	b.n	800bcb2 <vTaskSwitchContext+0x5a>
 800bcb4:	697a      	ldr	r2, [r7, #20]
 800bcb6:	4613      	mov	r3, r2
 800bcb8:	009b      	lsls	r3, r3, #2
 800bcba:	4413      	add	r3, r2
 800bcbc:	009b      	lsls	r3, r3, #2
 800bcbe:	4a14      	ldr	r2, [pc, #80]	; (800bd10 <vTaskSwitchContext+0xb8>)
 800bcc0:	4413      	add	r3, r2
 800bcc2:	613b      	str	r3, [r7, #16]
 800bcc4:	693b      	ldr	r3, [r7, #16]
 800bcc6:	685b      	ldr	r3, [r3, #4]
 800bcc8:	685a      	ldr	r2, [r3, #4]
 800bcca:	693b      	ldr	r3, [r7, #16]
 800bccc:	605a      	str	r2, [r3, #4]
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	685a      	ldr	r2, [r3, #4]
 800bcd2:	693b      	ldr	r3, [r7, #16]
 800bcd4:	3308      	adds	r3, #8
 800bcd6:	429a      	cmp	r2, r3
 800bcd8:	d104      	bne.n	800bce4 <vTaskSwitchContext+0x8c>
 800bcda:	693b      	ldr	r3, [r7, #16]
 800bcdc:	685b      	ldr	r3, [r3, #4]
 800bcde:	685a      	ldr	r2, [r3, #4]
 800bce0:	693b      	ldr	r3, [r7, #16]
 800bce2:	605a      	str	r2, [r3, #4]
 800bce4:	693b      	ldr	r3, [r7, #16]
 800bce6:	685b      	ldr	r3, [r3, #4]
 800bce8:	68db      	ldr	r3, [r3, #12]
 800bcea:	4a0a      	ldr	r2, [pc, #40]	; (800bd14 <vTaskSwitchContext+0xbc>)
 800bcec:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bcee:	4b09      	ldr	r3, [pc, #36]	; (800bd14 <vTaskSwitchContext+0xbc>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	334c      	adds	r3, #76	; 0x4c
 800bcf4:	4a08      	ldr	r2, [pc, #32]	; (800bd18 <vTaskSwitchContext+0xc0>)
 800bcf6:	6013      	str	r3, [r2, #0]
}
 800bcf8:	bf00      	nop
 800bcfa:	371c      	adds	r7, #28
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd02:	4770      	bx	lr
 800bd04:	20000490 	.word	0x20000490
 800bd08:	2000047c 	.word	0x2000047c
 800bd0c:	20000470 	.word	0x20000470
 800bd10:	2000036c 	.word	0x2000036c
 800bd14:	20000368 	.word	0x20000368
 800bd18:	20000030 	.word	0x20000030

0800bd1c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b084      	sub	sp, #16
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
 800bd24:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d10a      	bne.n	800bd42 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bd2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd30:	f383 8811 	msr	BASEPRI, r3
 800bd34:	f3bf 8f6f 	isb	sy
 800bd38:	f3bf 8f4f 	dsb	sy
 800bd3c:	60fb      	str	r3, [r7, #12]
}
 800bd3e:	bf00      	nop
 800bd40:	e7fe      	b.n	800bd40 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bd42:	4b07      	ldr	r3, [pc, #28]	; (800bd60 <vTaskPlaceOnEventList+0x44>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	3318      	adds	r3, #24
 800bd48:	4619      	mov	r1, r3
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	f7fe fe33 	bl	800a9b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bd50:	2101      	movs	r1, #1
 800bd52:	6838      	ldr	r0, [r7, #0]
 800bd54:	f000 fa6a 	bl	800c22c <prvAddCurrentTaskToDelayedList>
}
 800bd58:	bf00      	nop
 800bd5a:	3710      	adds	r7, #16
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}
 800bd60:	20000368 	.word	0x20000368

0800bd64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b086      	sub	sp, #24
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	68db      	ldr	r3, [r3, #12]
 800bd70:	68db      	ldr	r3, [r3, #12]
 800bd72:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bd74:	693b      	ldr	r3, [r7, #16]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d10a      	bne.n	800bd90 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bd7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd7e:	f383 8811 	msr	BASEPRI, r3
 800bd82:	f3bf 8f6f 	isb	sy
 800bd86:	f3bf 8f4f 	dsb	sy
 800bd8a:	60fb      	str	r3, [r7, #12]
}
 800bd8c:	bf00      	nop
 800bd8e:	e7fe      	b.n	800bd8e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bd90:	693b      	ldr	r3, [r7, #16]
 800bd92:	3318      	adds	r3, #24
 800bd94:	4618      	mov	r0, r3
 800bd96:	f7fe fe47 	bl	800aa28 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd9a:	4b1d      	ldr	r3, [pc, #116]	; (800be10 <xTaskRemoveFromEventList+0xac>)
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d11c      	bne.n	800bddc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bda2:	693b      	ldr	r3, [r7, #16]
 800bda4:	3304      	adds	r3, #4
 800bda6:	4618      	mov	r0, r3
 800bda8:	f7fe fe3e 	bl	800aa28 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdb0:	2201      	movs	r2, #1
 800bdb2:	409a      	lsls	r2, r3
 800bdb4:	4b17      	ldr	r3, [pc, #92]	; (800be14 <xTaskRemoveFromEventList+0xb0>)
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	4313      	orrs	r3, r2
 800bdba:	4a16      	ldr	r2, [pc, #88]	; (800be14 <xTaskRemoveFromEventList+0xb0>)
 800bdbc:	6013      	str	r3, [r2, #0]
 800bdbe:	693b      	ldr	r3, [r7, #16]
 800bdc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdc2:	4613      	mov	r3, r2
 800bdc4:	009b      	lsls	r3, r3, #2
 800bdc6:	4413      	add	r3, r2
 800bdc8:	009b      	lsls	r3, r3, #2
 800bdca:	4a13      	ldr	r2, [pc, #76]	; (800be18 <xTaskRemoveFromEventList+0xb4>)
 800bdcc:	441a      	add	r2, r3
 800bdce:	693b      	ldr	r3, [r7, #16]
 800bdd0:	3304      	adds	r3, #4
 800bdd2:	4619      	mov	r1, r3
 800bdd4:	4610      	mov	r0, r2
 800bdd6:	f7fe fdca 	bl	800a96e <vListInsertEnd>
 800bdda:	e005      	b.n	800bde8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bddc:	693b      	ldr	r3, [r7, #16]
 800bdde:	3318      	adds	r3, #24
 800bde0:	4619      	mov	r1, r3
 800bde2:	480e      	ldr	r0, [pc, #56]	; (800be1c <xTaskRemoveFromEventList+0xb8>)
 800bde4:	f7fe fdc3 	bl	800a96e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bde8:	693b      	ldr	r3, [r7, #16]
 800bdea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdec:	4b0c      	ldr	r3, [pc, #48]	; (800be20 <xTaskRemoveFromEventList+0xbc>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdf2:	429a      	cmp	r2, r3
 800bdf4:	d905      	bls.n	800be02 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bdfa:	4b0a      	ldr	r3, [pc, #40]	; (800be24 <xTaskRemoveFromEventList+0xc0>)
 800bdfc:	2201      	movs	r2, #1
 800bdfe:	601a      	str	r2, [r3, #0]
 800be00:	e001      	b.n	800be06 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800be02:	2300      	movs	r3, #0
 800be04:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800be06:	697b      	ldr	r3, [r7, #20]
}
 800be08:	4618      	mov	r0, r3
 800be0a:	3718      	adds	r7, #24
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd80      	pop	{r7, pc}
 800be10:	20000490 	.word	0x20000490
 800be14:	20000470 	.word	0x20000470
 800be18:	2000036c 	.word	0x2000036c
 800be1c:	20000428 	.word	0x20000428
 800be20:	20000368 	.word	0x20000368
 800be24:	2000047c 	.word	0x2000047c

0800be28 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800be28:	b480      	push	{r7}
 800be2a:	b083      	sub	sp, #12
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800be30:	4b06      	ldr	r3, [pc, #24]	; (800be4c <vTaskInternalSetTimeOutState+0x24>)
 800be32:	681a      	ldr	r2, [r3, #0]
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800be38:	4b05      	ldr	r3, [pc, #20]	; (800be50 <vTaskInternalSetTimeOutState+0x28>)
 800be3a:	681a      	ldr	r2, [r3, #0]
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	605a      	str	r2, [r3, #4]
}
 800be40:	bf00      	nop
 800be42:	370c      	adds	r7, #12
 800be44:	46bd      	mov	sp, r7
 800be46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4a:	4770      	bx	lr
 800be4c:	20000480 	.word	0x20000480
 800be50:	2000046c 	.word	0x2000046c

0800be54 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b088      	sub	sp, #32
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
 800be5c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d10a      	bne.n	800be7a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800be64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be68:	f383 8811 	msr	BASEPRI, r3
 800be6c:	f3bf 8f6f 	isb	sy
 800be70:	f3bf 8f4f 	dsb	sy
 800be74:	613b      	str	r3, [r7, #16]
}
 800be76:	bf00      	nop
 800be78:	e7fe      	b.n	800be78 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d10a      	bne.n	800be96 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800be80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be84:	f383 8811 	msr	BASEPRI, r3
 800be88:	f3bf 8f6f 	isb	sy
 800be8c:	f3bf 8f4f 	dsb	sy
 800be90:	60fb      	str	r3, [r7, #12]
}
 800be92:	bf00      	nop
 800be94:	e7fe      	b.n	800be94 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800be96:	f000 fb5d 	bl	800c554 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800be9a:	4b1d      	ldr	r3, [pc, #116]	; (800bf10 <xTaskCheckForTimeOut+0xbc>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	685b      	ldr	r3, [r3, #4]
 800bea4:	69ba      	ldr	r2, [r7, #24]
 800bea6:	1ad3      	subs	r3, r2, r3
 800bea8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beb2:	d102      	bne.n	800beba <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800beb4:	2300      	movs	r3, #0
 800beb6:	61fb      	str	r3, [r7, #28]
 800beb8:	e023      	b.n	800bf02 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681a      	ldr	r2, [r3, #0]
 800bebe:	4b15      	ldr	r3, [pc, #84]	; (800bf14 <xTaskCheckForTimeOut+0xc0>)
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	429a      	cmp	r2, r3
 800bec4:	d007      	beq.n	800bed6 <xTaskCheckForTimeOut+0x82>
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	685b      	ldr	r3, [r3, #4]
 800beca:	69ba      	ldr	r2, [r7, #24]
 800becc:	429a      	cmp	r2, r3
 800bece:	d302      	bcc.n	800bed6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bed0:	2301      	movs	r3, #1
 800bed2:	61fb      	str	r3, [r7, #28]
 800bed4:	e015      	b.n	800bf02 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	697a      	ldr	r2, [r7, #20]
 800bedc:	429a      	cmp	r2, r3
 800bede:	d20b      	bcs.n	800bef8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	681a      	ldr	r2, [r3, #0]
 800bee4:	697b      	ldr	r3, [r7, #20]
 800bee6:	1ad2      	subs	r2, r2, r3
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f7ff ff9b 	bl	800be28 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bef2:	2300      	movs	r3, #0
 800bef4:	61fb      	str	r3, [r7, #28]
 800bef6:	e004      	b.n	800bf02 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	2200      	movs	r2, #0
 800befc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800befe:	2301      	movs	r3, #1
 800bf00:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bf02:	f000 fb57 	bl	800c5b4 <vPortExitCritical>

	return xReturn;
 800bf06:	69fb      	ldr	r3, [r7, #28]
}
 800bf08:	4618      	mov	r0, r3
 800bf0a:	3720      	adds	r7, #32
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	bd80      	pop	{r7, pc}
 800bf10:	2000046c 	.word	0x2000046c
 800bf14:	20000480 	.word	0x20000480

0800bf18 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bf18:	b480      	push	{r7}
 800bf1a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bf1c:	4b03      	ldr	r3, [pc, #12]	; (800bf2c <vTaskMissedYield+0x14>)
 800bf1e:	2201      	movs	r2, #1
 800bf20:	601a      	str	r2, [r3, #0]
}
 800bf22:	bf00      	nop
 800bf24:	46bd      	mov	sp, r7
 800bf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2a:	4770      	bx	lr
 800bf2c:	2000047c 	.word	0x2000047c

0800bf30 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b082      	sub	sp, #8
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bf38:	f000 f852 	bl	800bfe0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bf3c:	4b06      	ldr	r3, [pc, #24]	; (800bf58 <prvIdleTask+0x28>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	2b01      	cmp	r3, #1
 800bf42:	d9f9      	bls.n	800bf38 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bf44:	4b05      	ldr	r3, [pc, #20]	; (800bf5c <prvIdleTask+0x2c>)
 800bf46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf4a:	601a      	str	r2, [r3, #0]
 800bf4c:	f3bf 8f4f 	dsb	sy
 800bf50:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bf54:	e7f0      	b.n	800bf38 <prvIdleTask+0x8>
 800bf56:	bf00      	nop
 800bf58:	2000036c 	.word	0x2000036c
 800bf5c:	e000ed04 	.word	0xe000ed04

0800bf60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b082      	sub	sp, #8
 800bf64:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bf66:	2300      	movs	r3, #0
 800bf68:	607b      	str	r3, [r7, #4]
 800bf6a:	e00c      	b.n	800bf86 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bf6c:	687a      	ldr	r2, [r7, #4]
 800bf6e:	4613      	mov	r3, r2
 800bf70:	009b      	lsls	r3, r3, #2
 800bf72:	4413      	add	r3, r2
 800bf74:	009b      	lsls	r3, r3, #2
 800bf76:	4a12      	ldr	r2, [pc, #72]	; (800bfc0 <prvInitialiseTaskLists+0x60>)
 800bf78:	4413      	add	r3, r2
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f7fe fcca 	bl	800a914 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	3301      	adds	r3, #1
 800bf84:	607b      	str	r3, [r7, #4]
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2b06      	cmp	r3, #6
 800bf8a:	d9ef      	bls.n	800bf6c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bf8c:	480d      	ldr	r0, [pc, #52]	; (800bfc4 <prvInitialiseTaskLists+0x64>)
 800bf8e:	f7fe fcc1 	bl	800a914 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bf92:	480d      	ldr	r0, [pc, #52]	; (800bfc8 <prvInitialiseTaskLists+0x68>)
 800bf94:	f7fe fcbe 	bl	800a914 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bf98:	480c      	ldr	r0, [pc, #48]	; (800bfcc <prvInitialiseTaskLists+0x6c>)
 800bf9a:	f7fe fcbb 	bl	800a914 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bf9e:	480c      	ldr	r0, [pc, #48]	; (800bfd0 <prvInitialiseTaskLists+0x70>)
 800bfa0:	f7fe fcb8 	bl	800a914 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bfa4:	480b      	ldr	r0, [pc, #44]	; (800bfd4 <prvInitialiseTaskLists+0x74>)
 800bfa6:	f7fe fcb5 	bl	800a914 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bfaa:	4b0b      	ldr	r3, [pc, #44]	; (800bfd8 <prvInitialiseTaskLists+0x78>)
 800bfac:	4a05      	ldr	r2, [pc, #20]	; (800bfc4 <prvInitialiseTaskLists+0x64>)
 800bfae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bfb0:	4b0a      	ldr	r3, [pc, #40]	; (800bfdc <prvInitialiseTaskLists+0x7c>)
 800bfb2:	4a05      	ldr	r2, [pc, #20]	; (800bfc8 <prvInitialiseTaskLists+0x68>)
 800bfb4:	601a      	str	r2, [r3, #0]
}
 800bfb6:	bf00      	nop
 800bfb8:	3708      	adds	r7, #8
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	bd80      	pop	{r7, pc}
 800bfbe:	bf00      	nop
 800bfc0:	2000036c 	.word	0x2000036c
 800bfc4:	200003f8 	.word	0x200003f8
 800bfc8:	2000040c 	.word	0x2000040c
 800bfcc:	20000428 	.word	0x20000428
 800bfd0:	2000043c 	.word	0x2000043c
 800bfd4:	20000454 	.word	0x20000454
 800bfd8:	20000420 	.word	0x20000420
 800bfdc:	20000424 	.word	0x20000424

0800bfe0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b082      	sub	sp, #8
 800bfe4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bfe6:	e019      	b.n	800c01c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bfe8:	f000 fab4 	bl	800c554 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfec:	4b10      	ldr	r3, [pc, #64]	; (800c030 <prvCheckTasksWaitingTermination+0x50>)
 800bfee:	68db      	ldr	r3, [r3, #12]
 800bff0:	68db      	ldr	r3, [r3, #12]
 800bff2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	3304      	adds	r3, #4
 800bff8:	4618      	mov	r0, r3
 800bffa:	f7fe fd15 	bl	800aa28 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bffe:	4b0d      	ldr	r3, [pc, #52]	; (800c034 <prvCheckTasksWaitingTermination+0x54>)
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	3b01      	subs	r3, #1
 800c004:	4a0b      	ldr	r2, [pc, #44]	; (800c034 <prvCheckTasksWaitingTermination+0x54>)
 800c006:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c008:	4b0b      	ldr	r3, [pc, #44]	; (800c038 <prvCheckTasksWaitingTermination+0x58>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	3b01      	subs	r3, #1
 800c00e:	4a0a      	ldr	r2, [pc, #40]	; (800c038 <prvCheckTasksWaitingTermination+0x58>)
 800c010:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c012:	f000 facf 	bl	800c5b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c016:	6878      	ldr	r0, [r7, #4]
 800c018:	f000 f810 	bl	800c03c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c01c:	4b06      	ldr	r3, [pc, #24]	; (800c038 <prvCheckTasksWaitingTermination+0x58>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d1e1      	bne.n	800bfe8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c024:	bf00      	nop
 800c026:	bf00      	nop
 800c028:	3708      	adds	r7, #8
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bd80      	pop	{r7, pc}
 800c02e:	bf00      	nop
 800c030:	2000043c 	.word	0x2000043c
 800c034:	20000468 	.word	0x20000468
 800c038:	20000450 	.word	0x20000450

0800c03c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b084      	sub	sp, #16
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	334c      	adds	r3, #76	; 0x4c
 800c048:	4618      	mov	r0, r3
 800c04a:	f001 f99b 	bl	800d384 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c054:	2b00      	cmp	r3, #0
 800c056:	d108      	bne.n	800c06a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c05c:	4618      	mov	r0, r3
 800c05e:	f000 fc67 	bl	800c930 <vPortFree>
				vPortFree( pxTCB );
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f000 fc64 	bl	800c930 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c068:	e018      	b.n	800c09c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c070:	2b01      	cmp	r3, #1
 800c072:	d103      	bne.n	800c07c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c074:	6878      	ldr	r0, [r7, #4]
 800c076:	f000 fc5b 	bl	800c930 <vPortFree>
	}
 800c07a:	e00f      	b.n	800c09c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c082:	2b02      	cmp	r3, #2
 800c084:	d00a      	beq.n	800c09c <prvDeleteTCB+0x60>
	__asm volatile
 800c086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c08a:	f383 8811 	msr	BASEPRI, r3
 800c08e:	f3bf 8f6f 	isb	sy
 800c092:	f3bf 8f4f 	dsb	sy
 800c096:	60fb      	str	r3, [r7, #12]
}
 800c098:	bf00      	nop
 800c09a:	e7fe      	b.n	800c09a <prvDeleteTCB+0x5e>
	}
 800c09c:	bf00      	nop
 800c09e:	3710      	adds	r7, #16
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}

0800c0a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	b083      	sub	sp, #12
 800c0a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c0aa:	4b0c      	ldr	r3, [pc, #48]	; (800c0dc <prvResetNextTaskUnblockTime+0x38>)
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d104      	bne.n	800c0be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c0b4:	4b0a      	ldr	r3, [pc, #40]	; (800c0e0 <prvResetNextTaskUnblockTime+0x3c>)
 800c0b6:	f04f 32ff 	mov.w	r2, #4294967295
 800c0ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c0bc:	e008      	b.n	800c0d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0be:	4b07      	ldr	r3, [pc, #28]	; (800c0dc <prvResetNextTaskUnblockTime+0x38>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	68db      	ldr	r3, [r3, #12]
 800c0c4:	68db      	ldr	r3, [r3, #12]
 800c0c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	685b      	ldr	r3, [r3, #4]
 800c0cc:	4a04      	ldr	r2, [pc, #16]	; (800c0e0 <prvResetNextTaskUnblockTime+0x3c>)
 800c0ce:	6013      	str	r3, [r2, #0]
}
 800c0d0:	bf00      	nop
 800c0d2:	370c      	adds	r7, #12
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0da:	4770      	bx	lr
 800c0dc:	20000420 	.word	0x20000420
 800c0e0:	20000488 	.word	0x20000488

0800c0e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c0e4:	b480      	push	{r7}
 800c0e6:	b083      	sub	sp, #12
 800c0e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c0ea:	4b0b      	ldr	r3, [pc, #44]	; (800c118 <xTaskGetSchedulerState+0x34>)
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d102      	bne.n	800c0f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c0f2:	2301      	movs	r3, #1
 800c0f4:	607b      	str	r3, [r7, #4]
 800c0f6:	e008      	b.n	800c10a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c0f8:	4b08      	ldr	r3, [pc, #32]	; (800c11c <xTaskGetSchedulerState+0x38>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d102      	bne.n	800c106 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c100:	2302      	movs	r3, #2
 800c102:	607b      	str	r3, [r7, #4]
 800c104:	e001      	b.n	800c10a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c106:	2300      	movs	r3, #0
 800c108:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c10a:	687b      	ldr	r3, [r7, #4]
	}
 800c10c:	4618      	mov	r0, r3
 800c10e:	370c      	adds	r7, #12
 800c110:	46bd      	mov	sp, r7
 800c112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c116:	4770      	bx	lr
 800c118:	20000474 	.word	0x20000474
 800c11c:	20000490 	.word	0x20000490

0800c120 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c120:	b580      	push	{r7, lr}
 800c122:	b086      	sub	sp, #24
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c12c:	2300      	movs	r3, #0
 800c12e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d06e      	beq.n	800c214 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c136:	4b3a      	ldr	r3, [pc, #232]	; (800c220 <xTaskPriorityDisinherit+0x100>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	693a      	ldr	r2, [r7, #16]
 800c13c:	429a      	cmp	r2, r3
 800c13e:	d00a      	beq.n	800c156 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c144:	f383 8811 	msr	BASEPRI, r3
 800c148:	f3bf 8f6f 	isb	sy
 800c14c:	f3bf 8f4f 	dsb	sy
 800c150:	60fb      	str	r3, [r7, #12]
}
 800c152:	bf00      	nop
 800c154:	e7fe      	b.n	800c154 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c156:	693b      	ldr	r3, [r7, #16]
 800c158:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d10a      	bne.n	800c174 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c162:	f383 8811 	msr	BASEPRI, r3
 800c166:	f3bf 8f6f 	isb	sy
 800c16a:	f3bf 8f4f 	dsb	sy
 800c16e:	60bb      	str	r3, [r7, #8]
}
 800c170:	bf00      	nop
 800c172:	e7fe      	b.n	800c172 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c174:	693b      	ldr	r3, [r7, #16]
 800c176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c178:	1e5a      	subs	r2, r3, #1
 800c17a:	693b      	ldr	r3, [r7, #16]
 800c17c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c17e:	693b      	ldr	r3, [r7, #16]
 800c180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c182:	693b      	ldr	r3, [r7, #16]
 800c184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c186:	429a      	cmp	r2, r3
 800c188:	d044      	beq.n	800c214 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c18a:	693b      	ldr	r3, [r7, #16]
 800c18c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d140      	bne.n	800c214 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c192:	693b      	ldr	r3, [r7, #16]
 800c194:	3304      	adds	r3, #4
 800c196:	4618      	mov	r0, r3
 800c198:	f7fe fc46 	bl	800aa28 <uxListRemove>
 800c19c:	4603      	mov	r3, r0
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d115      	bne.n	800c1ce <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c1a2:	693b      	ldr	r3, [r7, #16]
 800c1a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1a6:	491f      	ldr	r1, [pc, #124]	; (800c224 <xTaskPriorityDisinherit+0x104>)
 800c1a8:	4613      	mov	r3, r2
 800c1aa:	009b      	lsls	r3, r3, #2
 800c1ac:	4413      	add	r3, r2
 800c1ae:	009b      	lsls	r3, r3, #2
 800c1b0:	440b      	add	r3, r1
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d10a      	bne.n	800c1ce <xTaskPriorityDisinherit+0xae>
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1bc:	2201      	movs	r2, #1
 800c1be:	fa02 f303 	lsl.w	r3, r2, r3
 800c1c2:	43da      	mvns	r2, r3
 800c1c4:	4b18      	ldr	r3, [pc, #96]	; (800c228 <xTaskPriorityDisinherit+0x108>)
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	4013      	ands	r3, r2
 800c1ca:	4a17      	ldr	r2, [pc, #92]	; (800c228 <xTaskPriorityDisinherit+0x108>)
 800c1cc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c1d2:	693b      	ldr	r3, [r7, #16]
 800c1d4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1d6:	693b      	ldr	r3, [r7, #16]
 800c1d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1da:	f1c3 0207 	rsb	r2, r3, #7
 800c1de:	693b      	ldr	r3, [r7, #16]
 800c1e0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c1e2:	693b      	ldr	r3, [r7, #16]
 800c1e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1e6:	2201      	movs	r2, #1
 800c1e8:	409a      	lsls	r2, r3
 800c1ea:	4b0f      	ldr	r3, [pc, #60]	; (800c228 <xTaskPriorityDisinherit+0x108>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	4313      	orrs	r3, r2
 800c1f0:	4a0d      	ldr	r2, [pc, #52]	; (800c228 <xTaskPriorityDisinherit+0x108>)
 800c1f2:	6013      	str	r3, [r2, #0]
 800c1f4:	693b      	ldr	r3, [r7, #16]
 800c1f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1f8:	4613      	mov	r3, r2
 800c1fa:	009b      	lsls	r3, r3, #2
 800c1fc:	4413      	add	r3, r2
 800c1fe:	009b      	lsls	r3, r3, #2
 800c200:	4a08      	ldr	r2, [pc, #32]	; (800c224 <xTaskPriorityDisinherit+0x104>)
 800c202:	441a      	add	r2, r3
 800c204:	693b      	ldr	r3, [r7, #16]
 800c206:	3304      	adds	r3, #4
 800c208:	4619      	mov	r1, r3
 800c20a:	4610      	mov	r0, r2
 800c20c:	f7fe fbaf 	bl	800a96e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c210:	2301      	movs	r3, #1
 800c212:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c214:	697b      	ldr	r3, [r7, #20]
	}
 800c216:	4618      	mov	r0, r3
 800c218:	3718      	adds	r7, #24
 800c21a:	46bd      	mov	sp, r7
 800c21c:	bd80      	pop	{r7, pc}
 800c21e:	bf00      	nop
 800c220:	20000368 	.word	0x20000368
 800c224:	2000036c 	.word	0x2000036c
 800c228:	20000470 	.word	0x20000470

0800c22c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b084      	sub	sp, #16
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
 800c234:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c236:	4b29      	ldr	r3, [pc, #164]	; (800c2dc <prvAddCurrentTaskToDelayedList+0xb0>)
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c23c:	4b28      	ldr	r3, [pc, #160]	; (800c2e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	3304      	adds	r3, #4
 800c242:	4618      	mov	r0, r3
 800c244:	f7fe fbf0 	bl	800aa28 <uxListRemove>
 800c248:	4603      	mov	r3, r0
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d10b      	bne.n	800c266 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c24e:	4b24      	ldr	r3, [pc, #144]	; (800c2e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c254:	2201      	movs	r2, #1
 800c256:	fa02 f303 	lsl.w	r3, r2, r3
 800c25a:	43da      	mvns	r2, r3
 800c25c:	4b21      	ldr	r3, [pc, #132]	; (800c2e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	4013      	ands	r3, r2
 800c262:	4a20      	ldr	r2, [pc, #128]	; (800c2e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c264:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c26c:	d10a      	bne.n	800c284 <prvAddCurrentTaskToDelayedList+0x58>
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d007      	beq.n	800c284 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c274:	4b1a      	ldr	r3, [pc, #104]	; (800c2e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	3304      	adds	r3, #4
 800c27a:	4619      	mov	r1, r3
 800c27c:	481a      	ldr	r0, [pc, #104]	; (800c2e8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c27e:	f7fe fb76 	bl	800a96e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c282:	e026      	b.n	800c2d2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c284:	68fa      	ldr	r2, [r7, #12]
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	4413      	add	r3, r2
 800c28a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c28c:	4b14      	ldr	r3, [pc, #80]	; (800c2e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	68ba      	ldr	r2, [r7, #8]
 800c292:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c294:	68ba      	ldr	r2, [r7, #8]
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	429a      	cmp	r2, r3
 800c29a:	d209      	bcs.n	800c2b0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c29c:	4b13      	ldr	r3, [pc, #76]	; (800c2ec <prvAddCurrentTaskToDelayedList+0xc0>)
 800c29e:	681a      	ldr	r2, [r3, #0]
 800c2a0:	4b0f      	ldr	r3, [pc, #60]	; (800c2e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	3304      	adds	r3, #4
 800c2a6:	4619      	mov	r1, r3
 800c2a8:	4610      	mov	r0, r2
 800c2aa:	f7fe fb84 	bl	800a9b6 <vListInsert>
}
 800c2ae:	e010      	b.n	800c2d2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c2b0:	4b0f      	ldr	r3, [pc, #60]	; (800c2f0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c2b2:	681a      	ldr	r2, [r3, #0]
 800c2b4:	4b0a      	ldr	r3, [pc, #40]	; (800c2e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	3304      	adds	r3, #4
 800c2ba:	4619      	mov	r1, r3
 800c2bc:	4610      	mov	r0, r2
 800c2be:	f7fe fb7a 	bl	800a9b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c2c2:	4b0c      	ldr	r3, [pc, #48]	; (800c2f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	68ba      	ldr	r2, [r7, #8]
 800c2c8:	429a      	cmp	r2, r3
 800c2ca:	d202      	bcs.n	800c2d2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c2cc:	4a09      	ldr	r2, [pc, #36]	; (800c2f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c2ce:	68bb      	ldr	r3, [r7, #8]
 800c2d0:	6013      	str	r3, [r2, #0]
}
 800c2d2:	bf00      	nop
 800c2d4:	3710      	adds	r7, #16
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd80      	pop	{r7, pc}
 800c2da:	bf00      	nop
 800c2dc:	2000046c 	.word	0x2000046c
 800c2e0:	20000368 	.word	0x20000368
 800c2e4:	20000470 	.word	0x20000470
 800c2e8:	20000454 	.word	0x20000454
 800c2ec:	20000424 	.word	0x20000424
 800c2f0:	20000420 	.word	0x20000420
 800c2f4:	20000488 	.word	0x20000488

0800c2f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c2f8:	b480      	push	{r7}
 800c2fa:	b085      	sub	sp, #20
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	60f8      	str	r0, [r7, #12]
 800c300:	60b9      	str	r1, [r7, #8]
 800c302:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	3b04      	subs	r3, #4
 800c308:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c310:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	3b04      	subs	r3, #4
 800c316:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c318:	68bb      	ldr	r3, [r7, #8]
 800c31a:	f023 0201 	bic.w	r2, r3, #1
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	3b04      	subs	r3, #4
 800c326:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c328:	4a0c      	ldr	r2, [pc, #48]	; (800c35c <pxPortInitialiseStack+0x64>)
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	3b14      	subs	r3, #20
 800c332:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c334:	687a      	ldr	r2, [r7, #4]
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	3b04      	subs	r3, #4
 800c33e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	f06f 0202 	mvn.w	r2, #2
 800c346:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	3b20      	subs	r3, #32
 800c34c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c34e:	68fb      	ldr	r3, [r7, #12]
}
 800c350:	4618      	mov	r0, r3
 800c352:	3714      	adds	r7, #20
 800c354:	46bd      	mov	sp, r7
 800c356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35a:	4770      	bx	lr
 800c35c:	0800c361 	.word	0x0800c361

0800c360 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c360:	b480      	push	{r7}
 800c362:	b085      	sub	sp, #20
 800c364:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c366:	2300      	movs	r3, #0
 800c368:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c36a:	4b12      	ldr	r3, [pc, #72]	; (800c3b4 <prvTaskExitError+0x54>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c372:	d00a      	beq.n	800c38a <prvTaskExitError+0x2a>
	__asm volatile
 800c374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c378:	f383 8811 	msr	BASEPRI, r3
 800c37c:	f3bf 8f6f 	isb	sy
 800c380:	f3bf 8f4f 	dsb	sy
 800c384:	60fb      	str	r3, [r7, #12]
}
 800c386:	bf00      	nop
 800c388:	e7fe      	b.n	800c388 <prvTaskExitError+0x28>
	__asm volatile
 800c38a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c38e:	f383 8811 	msr	BASEPRI, r3
 800c392:	f3bf 8f6f 	isb	sy
 800c396:	f3bf 8f4f 	dsb	sy
 800c39a:	60bb      	str	r3, [r7, #8]
}
 800c39c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c39e:	bf00      	nop
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d0fc      	beq.n	800c3a0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c3a6:	bf00      	nop
 800c3a8:	bf00      	nop
 800c3aa:	3714      	adds	r7, #20
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b2:	4770      	bx	lr
 800c3b4:	2000002c 	.word	0x2000002c
	...

0800c3c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c3c0:	4b07      	ldr	r3, [pc, #28]	; (800c3e0 <pxCurrentTCBConst2>)
 800c3c2:	6819      	ldr	r1, [r3, #0]
 800c3c4:	6808      	ldr	r0, [r1, #0]
 800c3c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3ca:	f380 8809 	msr	PSP, r0
 800c3ce:	f3bf 8f6f 	isb	sy
 800c3d2:	f04f 0000 	mov.w	r0, #0
 800c3d6:	f380 8811 	msr	BASEPRI, r0
 800c3da:	4770      	bx	lr
 800c3dc:	f3af 8000 	nop.w

0800c3e0 <pxCurrentTCBConst2>:
 800c3e0:	20000368 	.word	0x20000368
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c3e4:	bf00      	nop
 800c3e6:	bf00      	nop

0800c3e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c3e8:	4808      	ldr	r0, [pc, #32]	; (800c40c <prvPortStartFirstTask+0x24>)
 800c3ea:	6800      	ldr	r0, [r0, #0]
 800c3ec:	6800      	ldr	r0, [r0, #0]
 800c3ee:	f380 8808 	msr	MSP, r0
 800c3f2:	f04f 0000 	mov.w	r0, #0
 800c3f6:	f380 8814 	msr	CONTROL, r0
 800c3fa:	b662      	cpsie	i
 800c3fc:	b661      	cpsie	f
 800c3fe:	f3bf 8f4f 	dsb	sy
 800c402:	f3bf 8f6f 	isb	sy
 800c406:	df00      	svc	0
 800c408:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c40a:	bf00      	nop
 800c40c:	e000ed08 	.word	0xe000ed08

0800c410 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b086      	sub	sp, #24
 800c414:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c416:	4b46      	ldr	r3, [pc, #280]	; (800c530 <xPortStartScheduler+0x120>)
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	4a46      	ldr	r2, [pc, #280]	; (800c534 <xPortStartScheduler+0x124>)
 800c41c:	4293      	cmp	r3, r2
 800c41e:	d10a      	bne.n	800c436 <xPortStartScheduler+0x26>
	__asm volatile
 800c420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c424:	f383 8811 	msr	BASEPRI, r3
 800c428:	f3bf 8f6f 	isb	sy
 800c42c:	f3bf 8f4f 	dsb	sy
 800c430:	613b      	str	r3, [r7, #16]
}
 800c432:	bf00      	nop
 800c434:	e7fe      	b.n	800c434 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c436:	4b3e      	ldr	r3, [pc, #248]	; (800c530 <xPortStartScheduler+0x120>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	4a3f      	ldr	r2, [pc, #252]	; (800c538 <xPortStartScheduler+0x128>)
 800c43c:	4293      	cmp	r3, r2
 800c43e:	d10a      	bne.n	800c456 <xPortStartScheduler+0x46>
	__asm volatile
 800c440:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c444:	f383 8811 	msr	BASEPRI, r3
 800c448:	f3bf 8f6f 	isb	sy
 800c44c:	f3bf 8f4f 	dsb	sy
 800c450:	60fb      	str	r3, [r7, #12]
}
 800c452:	bf00      	nop
 800c454:	e7fe      	b.n	800c454 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c456:	4b39      	ldr	r3, [pc, #228]	; (800c53c <xPortStartScheduler+0x12c>)
 800c458:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c45a:	697b      	ldr	r3, [r7, #20]
 800c45c:	781b      	ldrb	r3, [r3, #0]
 800c45e:	b2db      	uxtb	r3, r3
 800c460:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c462:	697b      	ldr	r3, [r7, #20]
 800c464:	22ff      	movs	r2, #255	; 0xff
 800c466:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c468:	697b      	ldr	r3, [r7, #20]
 800c46a:	781b      	ldrb	r3, [r3, #0]
 800c46c:	b2db      	uxtb	r3, r3
 800c46e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c470:	78fb      	ldrb	r3, [r7, #3]
 800c472:	b2db      	uxtb	r3, r3
 800c474:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c478:	b2da      	uxtb	r2, r3
 800c47a:	4b31      	ldr	r3, [pc, #196]	; (800c540 <xPortStartScheduler+0x130>)
 800c47c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c47e:	4b31      	ldr	r3, [pc, #196]	; (800c544 <xPortStartScheduler+0x134>)
 800c480:	2207      	movs	r2, #7
 800c482:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c484:	e009      	b.n	800c49a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c486:	4b2f      	ldr	r3, [pc, #188]	; (800c544 <xPortStartScheduler+0x134>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	3b01      	subs	r3, #1
 800c48c:	4a2d      	ldr	r2, [pc, #180]	; (800c544 <xPortStartScheduler+0x134>)
 800c48e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c490:	78fb      	ldrb	r3, [r7, #3]
 800c492:	b2db      	uxtb	r3, r3
 800c494:	005b      	lsls	r3, r3, #1
 800c496:	b2db      	uxtb	r3, r3
 800c498:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c49a:	78fb      	ldrb	r3, [r7, #3]
 800c49c:	b2db      	uxtb	r3, r3
 800c49e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4a2:	2b80      	cmp	r3, #128	; 0x80
 800c4a4:	d0ef      	beq.n	800c486 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c4a6:	4b27      	ldr	r3, [pc, #156]	; (800c544 <xPortStartScheduler+0x134>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	f1c3 0307 	rsb	r3, r3, #7
 800c4ae:	2b04      	cmp	r3, #4
 800c4b0:	d00a      	beq.n	800c4c8 <xPortStartScheduler+0xb8>
	__asm volatile
 800c4b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4b6:	f383 8811 	msr	BASEPRI, r3
 800c4ba:	f3bf 8f6f 	isb	sy
 800c4be:	f3bf 8f4f 	dsb	sy
 800c4c2:	60bb      	str	r3, [r7, #8]
}
 800c4c4:	bf00      	nop
 800c4c6:	e7fe      	b.n	800c4c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c4c8:	4b1e      	ldr	r3, [pc, #120]	; (800c544 <xPortStartScheduler+0x134>)
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	021b      	lsls	r3, r3, #8
 800c4ce:	4a1d      	ldr	r2, [pc, #116]	; (800c544 <xPortStartScheduler+0x134>)
 800c4d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c4d2:	4b1c      	ldr	r3, [pc, #112]	; (800c544 <xPortStartScheduler+0x134>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c4da:	4a1a      	ldr	r2, [pc, #104]	; (800c544 <xPortStartScheduler+0x134>)
 800c4dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	b2da      	uxtb	r2, r3
 800c4e2:	697b      	ldr	r3, [r7, #20]
 800c4e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c4e6:	4b18      	ldr	r3, [pc, #96]	; (800c548 <xPortStartScheduler+0x138>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	4a17      	ldr	r2, [pc, #92]	; (800c548 <xPortStartScheduler+0x138>)
 800c4ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c4f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c4f2:	4b15      	ldr	r3, [pc, #84]	; (800c548 <xPortStartScheduler+0x138>)
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	4a14      	ldr	r2, [pc, #80]	; (800c548 <xPortStartScheduler+0x138>)
 800c4f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c4fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c4fe:	f000 f8dd 	bl	800c6bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c502:	4b12      	ldr	r3, [pc, #72]	; (800c54c <xPortStartScheduler+0x13c>)
 800c504:	2200      	movs	r2, #0
 800c506:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c508:	f000 f8fc 	bl	800c704 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c50c:	4b10      	ldr	r3, [pc, #64]	; (800c550 <xPortStartScheduler+0x140>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	4a0f      	ldr	r2, [pc, #60]	; (800c550 <xPortStartScheduler+0x140>)
 800c512:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c516:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c518:	f7ff ff66 	bl	800c3e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c51c:	f7ff fb9c 	bl	800bc58 <vTaskSwitchContext>
	prvTaskExitError();
 800c520:	f7ff ff1e 	bl	800c360 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c524:	2300      	movs	r3, #0
}
 800c526:	4618      	mov	r0, r3
 800c528:	3718      	adds	r7, #24
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}
 800c52e:	bf00      	nop
 800c530:	e000ed00 	.word	0xe000ed00
 800c534:	410fc271 	.word	0x410fc271
 800c538:	410fc270 	.word	0x410fc270
 800c53c:	e000e400 	.word	0xe000e400
 800c540:	20000494 	.word	0x20000494
 800c544:	20000498 	.word	0x20000498
 800c548:	e000ed20 	.word	0xe000ed20
 800c54c:	2000002c 	.word	0x2000002c
 800c550:	e000ef34 	.word	0xe000ef34

0800c554 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c554:	b480      	push	{r7}
 800c556:	b083      	sub	sp, #12
 800c558:	af00      	add	r7, sp, #0
	__asm volatile
 800c55a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c55e:	f383 8811 	msr	BASEPRI, r3
 800c562:	f3bf 8f6f 	isb	sy
 800c566:	f3bf 8f4f 	dsb	sy
 800c56a:	607b      	str	r3, [r7, #4]
}
 800c56c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c56e:	4b0f      	ldr	r3, [pc, #60]	; (800c5ac <vPortEnterCritical+0x58>)
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	3301      	adds	r3, #1
 800c574:	4a0d      	ldr	r2, [pc, #52]	; (800c5ac <vPortEnterCritical+0x58>)
 800c576:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c578:	4b0c      	ldr	r3, [pc, #48]	; (800c5ac <vPortEnterCritical+0x58>)
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	2b01      	cmp	r3, #1
 800c57e:	d10f      	bne.n	800c5a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c580:	4b0b      	ldr	r3, [pc, #44]	; (800c5b0 <vPortEnterCritical+0x5c>)
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	b2db      	uxtb	r3, r3
 800c586:	2b00      	cmp	r3, #0
 800c588:	d00a      	beq.n	800c5a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800c58a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c58e:	f383 8811 	msr	BASEPRI, r3
 800c592:	f3bf 8f6f 	isb	sy
 800c596:	f3bf 8f4f 	dsb	sy
 800c59a:	603b      	str	r3, [r7, #0]
}
 800c59c:	bf00      	nop
 800c59e:	e7fe      	b.n	800c59e <vPortEnterCritical+0x4a>
	}
}
 800c5a0:	bf00      	nop
 800c5a2:	370c      	adds	r7, #12
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5aa:	4770      	bx	lr
 800c5ac:	2000002c 	.word	0x2000002c
 800c5b0:	e000ed04 	.word	0xe000ed04

0800c5b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c5b4:	b480      	push	{r7}
 800c5b6:	b083      	sub	sp, #12
 800c5b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c5ba:	4b12      	ldr	r3, [pc, #72]	; (800c604 <vPortExitCritical+0x50>)
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d10a      	bne.n	800c5d8 <vPortExitCritical+0x24>
	__asm volatile
 800c5c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5c6:	f383 8811 	msr	BASEPRI, r3
 800c5ca:	f3bf 8f6f 	isb	sy
 800c5ce:	f3bf 8f4f 	dsb	sy
 800c5d2:	607b      	str	r3, [r7, #4]
}
 800c5d4:	bf00      	nop
 800c5d6:	e7fe      	b.n	800c5d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c5d8:	4b0a      	ldr	r3, [pc, #40]	; (800c604 <vPortExitCritical+0x50>)
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	3b01      	subs	r3, #1
 800c5de:	4a09      	ldr	r2, [pc, #36]	; (800c604 <vPortExitCritical+0x50>)
 800c5e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c5e2:	4b08      	ldr	r3, [pc, #32]	; (800c604 <vPortExitCritical+0x50>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d105      	bne.n	800c5f6 <vPortExitCritical+0x42>
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	f383 8811 	msr	BASEPRI, r3
}
 800c5f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c5f6:	bf00      	nop
 800c5f8:	370c      	adds	r7, #12
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c600:	4770      	bx	lr
 800c602:	bf00      	nop
 800c604:	2000002c 	.word	0x2000002c
	...

0800c610 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c610:	f3ef 8009 	mrs	r0, PSP
 800c614:	f3bf 8f6f 	isb	sy
 800c618:	4b15      	ldr	r3, [pc, #84]	; (800c670 <pxCurrentTCBConst>)
 800c61a:	681a      	ldr	r2, [r3, #0]
 800c61c:	f01e 0f10 	tst.w	lr, #16
 800c620:	bf08      	it	eq
 800c622:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c626:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c62a:	6010      	str	r0, [r2, #0]
 800c62c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c630:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c634:	f380 8811 	msr	BASEPRI, r0
 800c638:	f3bf 8f4f 	dsb	sy
 800c63c:	f3bf 8f6f 	isb	sy
 800c640:	f7ff fb0a 	bl	800bc58 <vTaskSwitchContext>
 800c644:	f04f 0000 	mov.w	r0, #0
 800c648:	f380 8811 	msr	BASEPRI, r0
 800c64c:	bc09      	pop	{r0, r3}
 800c64e:	6819      	ldr	r1, [r3, #0]
 800c650:	6808      	ldr	r0, [r1, #0]
 800c652:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c656:	f01e 0f10 	tst.w	lr, #16
 800c65a:	bf08      	it	eq
 800c65c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c660:	f380 8809 	msr	PSP, r0
 800c664:	f3bf 8f6f 	isb	sy
 800c668:	4770      	bx	lr
 800c66a:	bf00      	nop
 800c66c:	f3af 8000 	nop.w

0800c670 <pxCurrentTCBConst>:
 800c670:	20000368 	.word	0x20000368
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c674:	bf00      	nop
 800c676:	bf00      	nop

0800c678 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b082      	sub	sp, #8
 800c67c:	af00      	add	r7, sp, #0
	__asm volatile
 800c67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c682:	f383 8811 	msr	BASEPRI, r3
 800c686:	f3bf 8f6f 	isb	sy
 800c68a:	f3bf 8f4f 	dsb	sy
 800c68e:	607b      	str	r3, [r7, #4]
}
 800c690:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c692:	f7ff fa29 	bl	800bae8 <xTaskIncrementTick>
 800c696:	4603      	mov	r3, r0
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d003      	beq.n	800c6a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c69c:	4b06      	ldr	r3, [pc, #24]	; (800c6b8 <SysTick_Handler+0x40>)
 800c69e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6a2:	601a      	str	r2, [r3, #0]
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	f383 8811 	msr	BASEPRI, r3
}
 800c6ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c6b0:	bf00      	nop
 800c6b2:	3708      	adds	r7, #8
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	bd80      	pop	{r7, pc}
 800c6b8:	e000ed04 	.word	0xe000ed04

0800c6bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c6bc:	b480      	push	{r7}
 800c6be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c6c0:	4b0b      	ldr	r3, [pc, #44]	; (800c6f0 <vPortSetupTimerInterrupt+0x34>)
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c6c6:	4b0b      	ldr	r3, [pc, #44]	; (800c6f4 <vPortSetupTimerInterrupt+0x38>)
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c6cc:	4b0a      	ldr	r3, [pc, #40]	; (800c6f8 <vPortSetupTimerInterrupt+0x3c>)
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	4a0a      	ldr	r2, [pc, #40]	; (800c6fc <vPortSetupTimerInterrupt+0x40>)
 800c6d2:	fba2 2303 	umull	r2, r3, r2, r3
 800c6d6:	099b      	lsrs	r3, r3, #6
 800c6d8:	4a09      	ldr	r2, [pc, #36]	; (800c700 <vPortSetupTimerInterrupt+0x44>)
 800c6da:	3b01      	subs	r3, #1
 800c6dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c6de:	4b04      	ldr	r3, [pc, #16]	; (800c6f0 <vPortSetupTimerInterrupt+0x34>)
 800c6e0:	2207      	movs	r2, #7
 800c6e2:	601a      	str	r2, [r3, #0]
}
 800c6e4:	bf00      	nop
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ec:	4770      	bx	lr
 800c6ee:	bf00      	nop
 800c6f0:	e000e010 	.word	0xe000e010
 800c6f4:	e000e018 	.word	0xe000e018
 800c6f8:	20000000 	.word	0x20000000
 800c6fc:	10624dd3 	.word	0x10624dd3
 800c700:	e000e014 	.word	0xe000e014

0800c704 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c704:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c714 <vPortEnableVFP+0x10>
 800c708:	6801      	ldr	r1, [r0, #0]
 800c70a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c70e:	6001      	str	r1, [r0, #0]
 800c710:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c712:	bf00      	nop
 800c714:	e000ed88 	.word	0xe000ed88

0800c718 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c718:	b480      	push	{r7}
 800c71a:	b085      	sub	sp, #20
 800c71c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c71e:	f3ef 8305 	mrs	r3, IPSR
 800c722:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	2b0f      	cmp	r3, #15
 800c728:	d914      	bls.n	800c754 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c72a:	4a17      	ldr	r2, [pc, #92]	; (800c788 <vPortValidateInterruptPriority+0x70>)
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	4413      	add	r3, r2
 800c730:	781b      	ldrb	r3, [r3, #0]
 800c732:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c734:	4b15      	ldr	r3, [pc, #84]	; (800c78c <vPortValidateInterruptPriority+0x74>)
 800c736:	781b      	ldrb	r3, [r3, #0]
 800c738:	7afa      	ldrb	r2, [r7, #11]
 800c73a:	429a      	cmp	r2, r3
 800c73c:	d20a      	bcs.n	800c754 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c73e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c742:	f383 8811 	msr	BASEPRI, r3
 800c746:	f3bf 8f6f 	isb	sy
 800c74a:	f3bf 8f4f 	dsb	sy
 800c74e:	607b      	str	r3, [r7, #4]
}
 800c750:	bf00      	nop
 800c752:	e7fe      	b.n	800c752 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c754:	4b0e      	ldr	r3, [pc, #56]	; (800c790 <vPortValidateInterruptPriority+0x78>)
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c75c:	4b0d      	ldr	r3, [pc, #52]	; (800c794 <vPortValidateInterruptPriority+0x7c>)
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	429a      	cmp	r2, r3
 800c762:	d90a      	bls.n	800c77a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c764:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c768:	f383 8811 	msr	BASEPRI, r3
 800c76c:	f3bf 8f6f 	isb	sy
 800c770:	f3bf 8f4f 	dsb	sy
 800c774:	603b      	str	r3, [r7, #0]
}
 800c776:	bf00      	nop
 800c778:	e7fe      	b.n	800c778 <vPortValidateInterruptPriority+0x60>
	}
 800c77a:	bf00      	nop
 800c77c:	3714      	adds	r7, #20
 800c77e:	46bd      	mov	sp, r7
 800c780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c784:	4770      	bx	lr
 800c786:	bf00      	nop
 800c788:	e000e3f0 	.word	0xe000e3f0
 800c78c:	20000494 	.word	0x20000494
 800c790:	e000ed0c 	.word	0xe000ed0c
 800c794:	20000498 	.word	0x20000498

0800c798 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b08a      	sub	sp, #40	; 0x28
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c7a4:	f7ff f8f6 	bl	800b994 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c7a8:	4b5b      	ldr	r3, [pc, #364]	; (800c918 <pvPortMalloc+0x180>)
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d101      	bne.n	800c7b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c7b0:	f000 f920 	bl	800c9f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c7b4:	4b59      	ldr	r3, [pc, #356]	; (800c91c <pvPortMalloc+0x184>)
 800c7b6:	681a      	ldr	r2, [r3, #0]
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	4013      	ands	r3, r2
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	f040 8093 	bne.w	800c8e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d01d      	beq.n	800c804 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c7c8:	2208      	movs	r2, #8
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	4413      	add	r3, r2
 800c7ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f003 0307 	and.w	r3, r3, #7
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d014      	beq.n	800c804 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	f023 0307 	bic.w	r3, r3, #7
 800c7e0:	3308      	adds	r3, #8
 800c7e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	f003 0307 	and.w	r3, r3, #7
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d00a      	beq.n	800c804 <pvPortMalloc+0x6c>
	__asm volatile
 800c7ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7f2:	f383 8811 	msr	BASEPRI, r3
 800c7f6:	f3bf 8f6f 	isb	sy
 800c7fa:	f3bf 8f4f 	dsb	sy
 800c7fe:	617b      	str	r3, [r7, #20]
}
 800c800:	bf00      	nop
 800c802:	e7fe      	b.n	800c802 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d06e      	beq.n	800c8e8 <pvPortMalloc+0x150>
 800c80a:	4b45      	ldr	r3, [pc, #276]	; (800c920 <pvPortMalloc+0x188>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	687a      	ldr	r2, [r7, #4]
 800c810:	429a      	cmp	r2, r3
 800c812:	d869      	bhi.n	800c8e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c814:	4b43      	ldr	r3, [pc, #268]	; (800c924 <pvPortMalloc+0x18c>)
 800c816:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c818:	4b42      	ldr	r3, [pc, #264]	; (800c924 <pvPortMalloc+0x18c>)
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c81e:	e004      	b.n	800c82a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c822:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c82c:	685b      	ldr	r3, [r3, #4]
 800c82e:	687a      	ldr	r2, [r7, #4]
 800c830:	429a      	cmp	r2, r3
 800c832:	d903      	bls.n	800c83c <pvPortMalloc+0xa4>
 800c834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d1f1      	bne.n	800c820 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c83c:	4b36      	ldr	r3, [pc, #216]	; (800c918 <pvPortMalloc+0x180>)
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c842:	429a      	cmp	r2, r3
 800c844:	d050      	beq.n	800c8e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c846:	6a3b      	ldr	r3, [r7, #32]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	2208      	movs	r2, #8
 800c84c:	4413      	add	r3, r2
 800c84e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c852:	681a      	ldr	r2, [r3, #0]
 800c854:	6a3b      	ldr	r3, [r7, #32]
 800c856:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c85a:	685a      	ldr	r2, [r3, #4]
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	1ad2      	subs	r2, r2, r3
 800c860:	2308      	movs	r3, #8
 800c862:	005b      	lsls	r3, r3, #1
 800c864:	429a      	cmp	r2, r3
 800c866:	d91f      	bls.n	800c8a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	4413      	add	r3, r2
 800c86e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c870:	69bb      	ldr	r3, [r7, #24]
 800c872:	f003 0307 	and.w	r3, r3, #7
 800c876:	2b00      	cmp	r3, #0
 800c878:	d00a      	beq.n	800c890 <pvPortMalloc+0xf8>
	__asm volatile
 800c87a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c87e:	f383 8811 	msr	BASEPRI, r3
 800c882:	f3bf 8f6f 	isb	sy
 800c886:	f3bf 8f4f 	dsb	sy
 800c88a:	613b      	str	r3, [r7, #16]
}
 800c88c:	bf00      	nop
 800c88e:	e7fe      	b.n	800c88e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c892:	685a      	ldr	r2, [r3, #4]
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	1ad2      	subs	r2, r2, r3
 800c898:	69bb      	ldr	r3, [r7, #24]
 800c89a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c89e:	687a      	ldr	r2, [r7, #4]
 800c8a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c8a2:	69b8      	ldr	r0, [r7, #24]
 800c8a4:	f000 f908 	bl	800cab8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c8a8:	4b1d      	ldr	r3, [pc, #116]	; (800c920 <pvPortMalloc+0x188>)
 800c8aa:	681a      	ldr	r2, [r3, #0]
 800c8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ae:	685b      	ldr	r3, [r3, #4]
 800c8b0:	1ad3      	subs	r3, r2, r3
 800c8b2:	4a1b      	ldr	r2, [pc, #108]	; (800c920 <pvPortMalloc+0x188>)
 800c8b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c8b6:	4b1a      	ldr	r3, [pc, #104]	; (800c920 <pvPortMalloc+0x188>)
 800c8b8:	681a      	ldr	r2, [r3, #0]
 800c8ba:	4b1b      	ldr	r3, [pc, #108]	; (800c928 <pvPortMalloc+0x190>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	429a      	cmp	r2, r3
 800c8c0:	d203      	bcs.n	800c8ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c8c2:	4b17      	ldr	r3, [pc, #92]	; (800c920 <pvPortMalloc+0x188>)
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	4a18      	ldr	r2, [pc, #96]	; (800c928 <pvPortMalloc+0x190>)
 800c8c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8cc:	685a      	ldr	r2, [r3, #4]
 800c8ce:	4b13      	ldr	r3, [pc, #76]	; (800c91c <pvPortMalloc+0x184>)
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	431a      	orrs	r2, r3
 800c8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8da:	2200      	movs	r2, #0
 800c8dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c8de:	4b13      	ldr	r3, [pc, #76]	; (800c92c <pvPortMalloc+0x194>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	3301      	adds	r3, #1
 800c8e4:	4a11      	ldr	r2, [pc, #68]	; (800c92c <pvPortMalloc+0x194>)
 800c8e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c8e8:	f7ff f862 	bl	800b9b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c8ec:	69fb      	ldr	r3, [r7, #28]
 800c8ee:	f003 0307 	and.w	r3, r3, #7
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d00a      	beq.n	800c90c <pvPortMalloc+0x174>
	__asm volatile
 800c8f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8fa:	f383 8811 	msr	BASEPRI, r3
 800c8fe:	f3bf 8f6f 	isb	sy
 800c902:	f3bf 8f4f 	dsb	sy
 800c906:	60fb      	str	r3, [r7, #12]
}
 800c908:	bf00      	nop
 800c90a:	e7fe      	b.n	800c90a <pvPortMalloc+0x172>
	return pvReturn;
 800c90c:	69fb      	ldr	r3, [r7, #28]
}
 800c90e:	4618      	mov	r0, r3
 800c910:	3728      	adds	r7, #40	; 0x28
 800c912:	46bd      	mov	sp, r7
 800c914:	bd80      	pop	{r7, pc}
 800c916:	bf00      	nop
 800c918:	200040a4 	.word	0x200040a4
 800c91c:	200040b8 	.word	0x200040b8
 800c920:	200040a8 	.word	0x200040a8
 800c924:	2000409c 	.word	0x2000409c
 800c928:	200040ac 	.word	0x200040ac
 800c92c:	200040b0 	.word	0x200040b0

0800c930 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b086      	sub	sp, #24
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d04d      	beq.n	800c9de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c942:	2308      	movs	r3, #8
 800c944:	425b      	negs	r3, r3
 800c946:	697a      	ldr	r2, [r7, #20]
 800c948:	4413      	add	r3, r2
 800c94a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c94c:	697b      	ldr	r3, [r7, #20]
 800c94e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c950:	693b      	ldr	r3, [r7, #16]
 800c952:	685a      	ldr	r2, [r3, #4]
 800c954:	4b24      	ldr	r3, [pc, #144]	; (800c9e8 <vPortFree+0xb8>)
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	4013      	ands	r3, r2
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d10a      	bne.n	800c974 <vPortFree+0x44>
	__asm volatile
 800c95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c962:	f383 8811 	msr	BASEPRI, r3
 800c966:	f3bf 8f6f 	isb	sy
 800c96a:	f3bf 8f4f 	dsb	sy
 800c96e:	60fb      	str	r3, [r7, #12]
}
 800c970:	bf00      	nop
 800c972:	e7fe      	b.n	800c972 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c974:	693b      	ldr	r3, [r7, #16]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d00a      	beq.n	800c992 <vPortFree+0x62>
	__asm volatile
 800c97c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c980:	f383 8811 	msr	BASEPRI, r3
 800c984:	f3bf 8f6f 	isb	sy
 800c988:	f3bf 8f4f 	dsb	sy
 800c98c:	60bb      	str	r3, [r7, #8]
}
 800c98e:	bf00      	nop
 800c990:	e7fe      	b.n	800c990 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c992:	693b      	ldr	r3, [r7, #16]
 800c994:	685a      	ldr	r2, [r3, #4]
 800c996:	4b14      	ldr	r3, [pc, #80]	; (800c9e8 <vPortFree+0xb8>)
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	4013      	ands	r3, r2
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d01e      	beq.n	800c9de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c9a0:	693b      	ldr	r3, [r7, #16]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d11a      	bne.n	800c9de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c9a8:	693b      	ldr	r3, [r7, #16]
 800c9aa:	685a      	ldr	r2, [r3, #4]
 800c9ac:	4b0e      	ldr	r3, [pc, #56]	; (800c9e8 <vPortFree+0xb8>)
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	43db      	mvns	r3, r3
 800c9b2:	401a      	ands	r2, r3
 800c9b4:	693b      	ldr	r3, [r7, #16]
 800c9b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c9b8:	f7fe ffec 	bl	800b994 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c9bc:	693b      	ldr	r3, [r7, #16]
 800c9be:	685a      	ldr	r2, [r3, #4]
 800c9c0:	4b0a      	ldr	r3, [pc, #40]	; (800c9ec <vPortFree+0xbc>)
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	4413      	add	r3, r2
 800c9c6:	4a09      	ldr	r2, [pc, #36]	; (800c9ec <vPortFree+0xbc>)
 800c9c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c9ca:	6938      	ldr	r0, [r7, #16]
 800c9cc:	f000 f874 	bl	800cab8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c9d0:	4b07      	ldr	r3, [pc, #28]	; (800c9f0 <vPortFree+0xc0>)
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	3301      	adds	r3, #1
 800c9d6:	4a06      	ldr	r2, [pc, #24]	; (800c9f0 <vPortFree+0xc0>)
 800c9d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c9da:	f7fe ffe9 	bl	800b9b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c9de:	bf00      	nop
 800c9e0:	3718      	adds	r7, #24
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	bd80      	pop	{r7, pc}
 800c9e6:	bf00      	nop
 800c9e8:	200040b8 	.word	0x200040b8
 800c9ec:	200040a8 	.word	0x200040a8
 800c9f0:	200040b4 	.word	0x200040b4

0800c9f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c9f4:	b480      	push	{r7}
 800c9f6:	b085      	sub	sp, #20
 800c9f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c9fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c9fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ca00:	4b27      	ldr	r3, [pc, #156]	; (800caa0 <prvHeapInit+0xac>)
 800ca02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	f003 0307 	and.w	r3, r3, #7
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d00c      	beq.n	800ca28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	3307      	adds	r3, #7
 800ca12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	f023 0307 	bic.w	r3, r3, #7
 800ca1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ca1c:	68ba      	ldr	r2, [r7, #8]
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	1ad3      	subs	r3, r2, r3
 800ca22:	4a1f      	ldr	r2, [pc, #124]	; (800caa0 <prvHeapInit+0xac>)
 800ca24:	4413      	add	r3, r2
 800ca26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ca2c:	4a1d      	ldr	r2, [pc, #116]	; (800caa4 <prvHeapInit+0xb0>)
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ca32:	4b1c      	ldr	r3, [pc, #112]	; (800caa4 <prvHeapInit+0xb0>)
 800ca34:	2200      	movs	r2, #0
 800ca36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	68ba      	ldr	r2, [r7, #8]
 800ca3c:	4413      	add	r3, r2
 800ca3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ca40:	2208      	movs	r2, #8
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	1a9b      	subs	r3, r3, r2
 800ca46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	f023 0307 	bic.w	r3, r3, #7
 800ca4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	4a15      	ldr	r2, [pc, #84]	; (800caa8 <prvHeapInit+0xb4>)
 800ca54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ca56:	4b14      	ldr	r3, [pc, #80]	; (800caa8 <prvHeapInit+0xb4>)
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ca5e:	4b12      	ldr	r3, [pc, #72]	; (800caa8 <prvHeapInit+0xb4>)
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	2200      	movs	r2, #0
 800ca64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	68fa      	ldr	r2, [r7, #12]
 800ca6e:	1ad2      	subs	r2, r2, r3
 800ca70:	683b      	ldr	r3, [r7, #0]
 800ca72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ca74:	4b0c      	ldr	r3, [pc, #48]	; (800caa8 <prvHeapInit+0xb4>)
 800ca76:	681a      	ldr	r2, [r3, #0]
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	685b      	ldr	r3, [r3, #4]
 800ca80:	4a0a      	ldr	r2, [pc, #40]	; (800caac <prvHeapInit+0xb8>)
 800ca82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ca84:	683b      	ldr	r3, [r7, #0]
 800ca86:	685b      	ldr	r3, [r3, #4]
 800ca88:	4a09      	ldr	r2, [pc, #36]	; (800cab0 <prvHeapInit+0xbc>)
 800ca8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ca8c:	4b09      	ldr	r3, [pc, #36]	; (800cab4 <prvHeapInit+0xc0>)
 800ca8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ca92:	601a      	str	r2, [r3, #0]
}
 800ca94:	bf00      	nop
 800ca96:	3714      	adds	r7, #20
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9e:	4770      	bx	lr
 800caa0:	2000049c 	.word	0x2000049c
 800caa4:	2000409c 	.word	0x2000409c
 800caa8:	200040a4 	.word	0x200040a4
 800caac:	200040ac 	.word	0x200040ac
 800cab0:	200040a8 	.word	0x200040a8
 800cab4:	200040b8 	.word	0x200040b8

0800cab8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cab8:	b480      	push	{r7}
 800caba:	b085      	sub	sp, #20
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cac0:	4b28      	ldr	r3, [pc, #160]	; (800cb64 <prvInsertBlockIntoFreeList+0xac>)
 800cac2:	60fb      	str	r3, [r7, #12]
 800cac4:	e002      	b.n	800cacc <prvInsertBlockIntoFreeList+0x14>
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	60fb      	str	r3, [r7, #12]
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	687a      	ldr	r2, [r7, #4]
 800cad2:	429a      	cmp	r2, r3
 800cad4:	d8f7      	bhi.n	800cac6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	685b      	ldr	r3, [r3, #4]
 800cade:	68ba      	ldr	r2, [r7, #8]
 800cae0:	4413      	add	r3, r2
 800cae2:	687a      	ldr	r2, [r7, #4]
 800cae4:	429a      	cmp	r2, r3
 800cae6:	d108      	bne.n	800cafa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	685a      	ldr	r2, [r3, #4]
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	685b      	ldr	r3, [r3, #4]
 800caf0:	441a      	add	r2, r3
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	685b      	ldr	r3, [r3, #4]
 800cb02:	68ba      	ldr	r2, [r7, #8]
 800cb04:	441a      	add	r2, r3
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	429a      	cmp	r2, r3
 800cb0c:	d118      	bne.n	800cb40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	681a      	ldr	r2, [r3, #0]
 800cb12:	4b15      	ldr	r3, [pc, #84]	; (800cb68 <prvInsertBlockIntoFreeList+0xb0>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	429a      	cmp	r2, r3
 800cb18:	d00d      	beq.n	800cb36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	685a      	ldr	r2, [r3, #4]
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	685b      	ldr	r3, [r3, #4]
 800cb24:	441a      	add	r2, r3
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	681a      	ldr	r2, [r3, #0]
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	601a      	str	r2, [r3, #0]
 800cb34:	e008      	b.n	800cb48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cb36:	4b0c      	ldr	r3, [pc, #48]	; (800cb68 <prvInsertBlockIntoFreeList+0xb0>)
 800cb38:	681a      	ldr	r2, [r3, #0]
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	601a      	str	r2, [r3, #0]
 800cb3e:	e003      	b.n	800cb48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	681a      	ldr	r2, [r3, #0]
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cb48:	68fa      	ldr	r2, [r7, #12]
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	429a      	cmp	r2, r3
 800cb4e:	d002      	beq.n	800cb56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	687a      	ldr	r2, [r7, #4]
 800cb54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cb56:	bf00      	nop
 800cb58:	3714      	adds	r7, #20
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb60:	4770      	bx	lr
 800cb62:	bf00      	nop
 800cb64:	2000409c 	.word	0x2000409c
 800cb68:	200040a4 	.word	0x200040a4

0800cb6c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800cb70:	2201      	movs	r2, #1
 800cb72:	490e      	ldr	r1, [pc, #56]	; (800cbac <MX_USB_HOST_Init+0x40>)
 800cb74:	480e      	ldr	r0, [pc, #56]	; (800cbb0 <MX_USB_HOST_Init+0x44>)
 800cb76:	f7fb ffd3 	bl	8008b20 <USBH_Init>
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d001      	beq.n	800cb84 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800cb80:	f7f4 fca4 	bl	80014cc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800cb84:	490b      	ldr	r1, [pc, #44]	; (800cbb4 <MX_USB_HOST_Init+0x48>)
 800cb86:	480a      	ldr	r0, [pc, #40]	; (800cbb0 <MX_USB_HOST_Init+0x44>)
 800cb88:	f7fc f880 	bl	8008c8c <USBH_RegisterClass>
 800cb8c:	4603      	mov	r3, r0
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d001      	beq.n	800cb96 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800cb92:	f7f4 fc9b 	bl	80014cc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800cb96:	4806      	ldr	r0, [pc, #24]	; (800cbb0 <MX_USB_HOST_Init+0x44>)
 800cb98:	f7fc f904 	bl	8008da4 <USBH_Start>
 800cb9c:	4603      	mov	r3, r0
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d001      	beq.n	800cba6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800cba2:	f7f4 fc93 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800cba6:	bf00      	nop
 800cba8:	bd80      	pop	{r7, pc}
 800cbaa:	bf00      	nop
 800cbac:	0800cbb9 	.word	0x0800cbb9
 800cbb0:	20004480 	.word	0x20004480
 800cbb4:	2000000c 	.word	0x2000000c

0800cbb8 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800cbb8:	b480      	push	{r7}
 800cbba:	b083      	sub	sp, #12
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
 800cbc0:	460b      	mov	r3, r1
 800cbc2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800cbc4:	78fb      	ldrb	r3, [r7, #3]
 800cbc6:	3b01      	subs	r3, #1
 800cbc8:	2b04      	cmp	r3, #4
 800cbca:	d819      	bhi.n	800cc00 <USBH_UserProcess+0x48>
 800cbcc:	a201      	add	r2, pc, #4	; (adr r2, 800cbd4 <USBH_UserProcess+0x1c>)
 800cbce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbd2:	bf00      	nop
 800cbd4:	0800cc01 	.word	0x0800cc01
 800cbd8:	0800cbf1 	.word	0x0800cbf1
 800cbdc:	0800cc01 	.word	0x0800cc01
 800cbe0:	0800cbf9 	.word	0x0800cbf9
 800cbe4:	0800cbe9 	.word	0x0800cbe9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800cbe8:	4b09      	ldr	r3, [pc, #36]	; (800cc10 <USBH_UserProcess+0x58>)
 800cbea:	2203      	movs	r2, #3
 800cbec:	701a      	strb	r2, [r3, #0]
  break;
 800cbee:	e008      	b.n	800cc02 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800cbf0:	4b07      	ldr	r3, [pc, #28]	; (800cc10 <USBH_UserProcess+0x58>)
 800cbf2:	2202      	movs	r2, #2
 800cbf4:	701a      	strb	r2, [r3, #0]
  break;
 800cbf6:	e004      	b.n	800cc02 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800cbf8:	4b05      	ldr	r3, [pc, #20]	; (800cc10 <USBH_UserProcess+0x58>)
 800cbfa:	2201      	movs	r2, #1
 800cbfc:	701a      	strb	r2, [r3, #0]
  break;
 800cbfe:	e000      	b.n	800cc02 <USBH_UserProcess+0x4a>

  default:
  break;
 800cc00:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800cc02:	bf00      	nop
 800cc04:	370c      	adds	r7, #12
 800cc06:	46bd      	mov	sp, r7
 800cc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0c:	4770      	bx	lr
 800cc0e:	bf00      	nop
 800cc10:	200040bc 	.word	0x200040bc

0800cc14 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b08a      	sub	sp, #40	; 0x28
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cc1c:	f107 0314 	add.w	r3, r7, #20
 800cc20:	2200      	movs	r2, #0
 800cc22:	601a      	str	r2, [r3, #0]
 800cc24:	605a      	str	r2, [r3, #4]
 800cc26:	609a      	str	r2, [r3, #8]
 800cc28:	60da      	str	r2, [r3, #12]
 800cc2a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cc34:	d147      	bne.n	800ccc6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cc36:	2300      	movs	r3, #0
 800cc38:	613b      	str	r3, [r7, #16]
 800cc3a:	4b25      	ldr	r3, [pc, #148]	; (800ccd0 <HAL_HCD_MspInit+0xbc>)
 800cc3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc3e:	4a24      	ldr	r2, [pc, #144]	; (800ccd0 <HAL_HCD_MspInit+0xbc>)
 800cc40:	f043 0301 	orr.w	r3, r3, #1
 800cc44:	6313      	str	r3, [r2, #48]	; 0x30
 800cc46:	4b22      	ldr	r3, [pc, #136]	; (800ccd0 <HAL_HCD_MspInit+0xbc>)
 800cc48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc4a:	f003 0301 	and.w	r3, r3, #1
 800cc4e:	613b      	str	r3, [r7, #16]
 800cc50:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800cc52:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cc56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cc58:	2300      	movs	r3, #0
 800cc5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800cc60:	f107 0314 	add.w	r3, r7, #20
 800cc64:	4619      	mov	r1, r3
 800cc66:	481b      	ldr	r0, [pc, #108]	; (800ccd4 <HAL_HCD_MspInit+0xc0>)
 800cc68:	f7f6 fa6e 	bl	8003148 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800cc6c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800cc70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cc72:	2302      	movs	r3, #2
 800cc74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cc76:	2300      	movs	r3, #0
 800cc78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cc7e:	230a      	movs	r3, #10
 800cc80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cc82:	f107 0314 	add.w	r3, r7, #20
 800cc86:	4619      	mov	r1, r3
 800cc88:	4812      	ldr	r0, [pc, #72]	; (800ccd4 <HAL_HCD_MspInit+0xc0>)
 800cc8a:	f7f6 fa5d 	bl	8003148 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cc8e:	4b10      	ldr	r3, [pc, #64]	; (800ccd0 <HAL_HCD_MspInit+0xbc>)
 800cc90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc92:	4a0f      	ldr	r2, [pc, #60]	; (800ccd0 <HAL_HCD_MspInit+0xbc>)
 800cc94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc98:	6353      	str	r3, [r2, #52]	; 0x34
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	60fb      	str	r3, [r7, #12]
 800cc9e:	4b0c      	ldr	r3, [pc, #48]	; (800ccd0 <HAL_HCD_MspInit+0xbc>)
 800cca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cca2:	4a0b      	ldr	r2, [pc, #44]	; (800ccd0 <HAL_HCD_MspInit+0xbc>)
 800cca4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cca8:	6453      	str	r3, [r2, #68]	; 0x44
 800ccaa:	4b09      	ldr	r3, [pc, #36]	; (800ccd0 <HAL_HCD_MspInit+0xbc>)
 800ccac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ccae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ccb2:	60fb      	str	r3, [r7, #12]
 800ccb4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	2105      	movs	r1, #5
 800ccba:	2043      	movs	r0, #67	; 0x43
 800ccbc:	f7f5 ff30 	bl	8002b20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ccc0:	2043      	movs	r0, #67	; 0x43
 800ccc2:	f7f5 ff49 	bl	8002b58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ccc6:	bf00      	nop
 800ccc8:	3728      	adds	r7, #40	; 0x28
 800ccca:	46bd      	mov	sp, r7
 800cccc:	bd80      	pop	{r7, pc}
 800ccce:	bf00      	nop
 800ccd0:	40023800 	.word	0x40023800
 800ccd4:	40020000 	.word	0x40020000

0800ccd8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b082      	sub	sp, #8
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cce6:	4618      	mov	r0, r3
 800cce8:	f7fc fd09 	bl	80096fe <USBH_LL_IncTimer>
}
 800ccec:	bf00      	nop
 800ccee:	3708      	adds	r7, #8
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	bd80      	pop	{r7, pc}

0800ccf4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b082      	sub	sp, #8
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cd02:	4618      	mov	r0, r3
 800cd04:	f7fc fd4d 	bl	80097a2 <USBH_LL_Connect>
}
 800cd08:	bf00      	nop
 800cd0a:	3708      	adds	r7, #8
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}

0800cd10 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b082      	sub	sp, #8
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cd1e:	4618      	mov	r0, r3
 800cd20:	f7fc fd62 	bl	80097e8 <USBH_LL_Disconnect>
}
 800cd24:	bf00      	nop
 800cd26:	3708      	adds	r7, #8
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	bd80      	pop	{r7, pc}

0800cd2c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b082      	sub	sp, #8
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
 800cd34:	460b      	mov	r3, r1
 800cd36:	70fb      	strb	r3, [r7, #3]
 800cd38:	4613      	mov	r3, r2
 800cd3a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cd42:	4618      	mov	r0, r3
 800cd44:	f7fc fd97 	bl	8009876 <USBH_LL_NotifyURBChange>
#endif
}
 800cd48:	bf00      	nop
 800cd4a:	3708      	adds	r7, #8
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	bd80      	pop	{r7, pc}

0800cd50 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b082      	sub	sp, #8
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cd5e:	4618      	mov	r0, r3
 800cd60:	f7fc fcf7 	bl	8009752 <USBH_LL_PortEnabled>
}
 800cd64:	bf00      	nop
 800cd66:	3708      	adds	r7, #8
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	bd80      	pop	{r7, pc}

0800cd6c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b082      	sub	sp, #8
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	f7fc fd03 	bl	8009786 <USBH_LL_PortDisabled>
}
 800cd80:	bf00      	nop
 800cd82:	3708      	adds	r7, #8
 800cd84:	46bd      	mov	sp, r7
 800cd86:	bd80      	pop	{r7, pc}

0800cd88 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b082      	sub	sp, #8
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800cd96:	2b01      	cmp	r3, #1
 800cd98:	d12a      	bne.n	800cdf0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800cd9a:	4a18      	ldr	r2, [pc, #96]	; (800cdfc <USBH_LL_Init+0x74>)
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	4a15      	ldr	r2, [pc, #84]	; (800cdfc <USBH_LL_Init+0x74>)
 800cda6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cdaa:	4b14      	ldr	r3, [pc, #80]	; (800cdfc <USBH_LL_Init+0x74>)
 800cdac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800cdb0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800cdb2:	4b12      	ldr	r3, [pc, #72]	; (800cdfc <USBH_LL_Init+0x74>)
 800cdb4:	2208      	movs	r2, #8
 800cdb6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800cdb8:	4b10      	ldr	r3, [pc, #64]	; (800cdfc <USBH_LL_Init+0x74>)
 800cdba:	2201      	movs	r2, #1
 800cdbc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cdbe:	4b0f      	ldr	r3, [pc, #60]	; (800cdfc <USBH_LL_Init+0x74>)
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800cdc4:	4b0d      	ldr	r3, [pc, #52]	; (800cdfc <USBH_LL_Init+0x74>)
 800cdc6:	2202      	movs	r2, #2
 800cdc8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800cdca:	4b0c      	ldr	r3, [pc, #48]	; (800cdfc <USBH_LL_Init+0x74>)
 800cdcc:	2200      	movs	r2, #0
 800cdce:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800cdd0:	480a      	ldr	r0, [pc, #40]	; (800cdfc <USBH_LL_Init+0x74>)
 800cdd2:	f7f6 fba0 	bl	8003516 <HAL_HCD_Init>
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d001      	beq.n	800cde0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800cddc:	f7f4 fb76 	bl	80014cc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800cde0:	4806      	ldr	r0, [pc, #24]	; (800cdfc <USBH_LL_Init+0x74>)
 800cde2:	f7f6 ff84 	bl	8003cee <HAL_HCD_GetCurrentFrame>
 800cde6:	4603      	mov	r3, r0
 800cde8:	4619      	mov	r1, r3
 800cdea:	6878      	ldr	r0, [r7, #4]
 800cdec:	f7fc fc78 	bl	80096e0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800cdf0:	2300      	movs	r3, #0
}
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	3708      	adds	r7, #8
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	bd80      	pop	{r7, pc}
 800cdfa:	bf00      	nop
 800cdfc:	20004864 	.word	0x20004864

0800ce00 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b084      	sub	sp, #16
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce08:	2300      	movs	r3, #0
 800ce0a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ce16:	4618      	mov	r0, r3
 800ce18:	f7f6 fef3 	bl	8003c02 <HAL_HCD_Start>
 800ce1c:	4603      	mov	r3, r0
 800ce1e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ce20:	7bfb      	ldrb	r3, [r7, #15]
 800ce22:	4618      	mov	r0, r3
 800ce24:	f000 f95c 	bl	800d0e0 <USBH_Get_USB_Status>
 800ce28:	4603      	mov	r3, r0
 800ce2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce2c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	3710      	adds	r7, #16
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}

0800ce36 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ce36:	b580      	push	{r7, lr}
 800ce38:	b084      	sub	sp, #16
 800ce3a:	af00      	add	r7, sp, #0
 800ce3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce3e:	2300      	movs	r3, #0
 800ce40:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ce42:	2300      	movs	r3, #0
 800ce44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	f7f6 fefb 	bl	8003c48 <HAL_HCD_Stop>
 800ce52:	4603      	mov	r3, r0
 800ce54:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ce56:	7bfb      	ldrb	r3, [r7, #15]
 800ce58:	4618      	mov	r0, r3
 800ce5a:	f000 f941 	bl	800d0e0 <USBH_Get_USB_Status>
 800ce5e:	4603      	mov	r3, r0
 800ce60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce62:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce64:	4618      	mov	r0, r3
 800ce66:	3710      	adds	r7, #16
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}

0800ce6c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b084      	sub	sp, #16
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ce74:	2301      	movs	r3, #1
 800ce76:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ce7e:	4618      	mov	r0, r3
 800ce80:	f7f6 ff43 	bl	8003d0a <HAL_HCD_GetCurrentSpeed>
 800ce84:	4603      	mov	r3, r0
 800ce86:	2b02      	cmp	r3, #2
 800ce88:	d00c      	beq.n	800cea4 <USBH_LL_GetSpeed+0x38>
 800ce8a:	2b02      	cmp	r3, #2
 800ce8c:	d80d      	bhi.n	800ceaa <USBH_LL_GetSpeed+0x3e>
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d002      	beq.n	800ce98 <USBH_LL_GetSpeed+0x2c>
 800ce92:	2b01      	cmp	r3, #1
 800ce94:	d003      	beq.n	800ce9e <USBH_LL_GetSpeed+0x32>
 800ce96:	e008      	b.n	800ceaa <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ce98:	2300      	movs	r3, #0
 800ce9a:	73fb      	strb	r3, [r7, #15]
    break;
 800ce9c:	e008      	b.n	800ceb0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ce9e:	2301      	movs	r3, #1
 800cea0:	73fb      	strb	r3, [r7, #15]
    break;
 800cea2:	e005      	b.n	800ceb0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800cea4:	2302      	movs	r3, #2
 800cea6:	73fb      	strb	r3, [r7, #15]
    break;
 800cea8:	e002      	b.n	800ceb0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800ceaa:	2301      	movs	r3, #1
 800ceac:	73fb      	strb	r3, [r7, #15]
    break;
 800ceae:	bf00      	nop
  }
  return  speed;
 800ceb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	3710      	adds	r7, #16
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	bd80      	pop	{r7, pc}

0800ceba <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ceba:	b580      	push	{r7, lr}
 800cebc:	b084      	sub	sp, #16
 800cebe:	af00      	add	r7, sp, #0
 800cec0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cec2:	2300      	movs	r3, #0
 800cec4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cec6:	2300      	movs	r3, #0
 800cec8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ced0:	4618      	mov	r0, r3
 800ced2:	f7f6 fed6 	bl	8003c82 <HAL_HCD_ResetPort>
 800ced6:	4603      	mov	r3, r0
 800ced8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ceda:	7bfb      	ldrb	r3, [r7, #15]
 800cedc:	4618      	mov	r0, r3
 800cede:	f000 f8ff 	bl	800d0e0 <USBH_Get_USB_Status>
 800cee2:	4603      	mov	r3, r0
 800cee4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cee6:	7bbb      	ldrb	r3, [r7, #14]
}
 800cee8:	4618      	mov	r0, r3
 800ceea:	3710      	adds	r7, #16
 800ceec:	46bd      	mov	sp, r7
 800ceee:	bd80      	pop	{r7, pc}

0800cef0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b082      	sub	sp, #8
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
 800cef8:	460b      	mov	r3, r1
 800cefa:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cf02:	78fa      	ldrb	r2, [r7, #3]
 800cf04:	4611      	mov	r1, r2
 800cf06:	4618      	mov	r0, r3
 800cf08:	f7f6 fedd 	bl	8003cc6 <HAL_HCD_HC_GetXferCount>
 800cf0c:	4603      	mov	r3, r0
}
 800cf0e:	4618      	mov	r0, r3
 800cf10:	3708      	adds	r7, #8
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}

0800cf16 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800cf16:	b590      	push	{r4, r7, lr}
 800cf18:	b089      	sub	sp, #36	; 0x24
 800cf1a:	af04      	add	r7, sp, #16
 800cf1c:	6078      	str	r0, [r7, #4]
 800cf1e:	4608      	mov	r0, r1
 800cf20:	4611      	mov	r1, r2
 800cf22:	461a      	mov	r2, r3
 800cf24:	4603      	mov	r3, r0
 800cf26:	70fb      	strb	r3, [r7, #3]
 800cf28:	460b      	mov	r3, r1
 800cf2a:	70bb      	strb	r3, [r7, #2]
 800cf2c:	4613      	mov	r3, r2
 800cf2e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf30:	2300      	movs	r3, #0
 800cf32:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cf34:	2300      	movs	r3, #0
 800cf36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800cf3e:	787c      	ldrb	r4, [r7, #1]
 800cf40:	78ba      	ldrb	r2, [r7, #2]
 800cf42:	78f9      	ldrb	r1, [r7, #3]
 800cf44:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cf46:	9302      	str	r3, [sp, #8]
 800cf48:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800cf4c:	9301      	str	r3, [sp, #4]
 800cf4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cf52:	9300      	str	r3, [sp, #0]
 800cf54:	4623      	mov	r3, r4
 800cf56:	f7f6 fb40 	bl	80035da <HAL_HCD_HC_Init>
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800cf5e:	7bfb      	ldrb	r3, [r7, #15]
 800cf60:	4618      	mov	r0, r3
 800cf62:	f000 f8bd 	bl	800d0e0 <USBH_Get_USB_Status>
 800cf66:	4603      	mov	r3, r0
 800cf68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf6a:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	3714      	adds	r7, #20
 800cf70:	46bd      	mov	sp, r7
 800cf72:	bd90      	pop	{r4, r7, pc}

0800cf74 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b084      	sub	sp, #16
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
 800cf7c:	460b      	mov	r3, r1
 800cf7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf80:	2300      	movs	r3, #0
 800cf82:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cf84:	2300      	movs	r3, #0
 800cf86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cf8e:	78fa      	ldrb	r2, [r7, #3]
 800cf90:	4611      	mov	r1, r2
 800cf92:	4618      	mov	r0, r3
 800cf94:	f7f6 fbb0 	bl	80036f8 <HAL_HCD_HC_Halt>
 800cf98:	4603      	mov	r3, r0
 800cf9a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cf9c:	7bfb      	ldrb	r3, [r7, #15]
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	f000 f89e 	bl	800d0e0 <USBH_Get_USB_Status>
 800cfa4:	4603      	mov	r3, r0
 800cfa6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cfa8:	7bbb      	ldrb	r3, [r7, #14]
}
 800cfaa:	4618      	mov	r0, r3
 800cfac:	3710      	adds	r7, #16
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	bd80      	pop	{r7, pc}

0800cfb2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800cfb2:	b590      	push	{r4, r7, lr}
 800cfb4:	b089      	sub	sp, #36	; 0x24
 800cfb6:	af04      	add	r7, sp, #16
 800cfb8:	6078      	str	r0, [r7, #4]
 800cfba:	4608      	mov	r0, r1
 800cfbc:	4611      	mov	r1, r2
 800cfbe:	461a      	mov	r2, r3
 800cfc0:	4603      	mov	r3, r0
 800cfc2:	70fb      	strb	r3, [r7, #3]
 800cfc4:	460b      	mov	r3, r1
 800cfc6:	70bb      	strb	r3, [r7, #2]
 800cfc8:	4613      	mov	r3, r2
 800cfca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cfcc:	2300      	movs	r3, #0
 800cfce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800cfda:	787c      	ldrb	r4, [r7, #1]
 800cfdc:	78ba      	ldrb	r2, [r7, #2]
 800cfde:	78f9      	ldrb	r1, [r7, #3]
 800cfe0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800cfe4:	9303      	str	r3, [sp, #12]
 800cfe6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cfe8:	9302      	str	r3, [sp, #8]
 800cfea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfec:	9301      	str	r3, [sp, #4]
 800cfee:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cff2:	9300      	str	r3, [sp, #0]
 800cff4:	4623      	mov	r3, r4
 800cff6:	f7f6 fba3 	bl	8003740 <HAL_HCD_HC_SubmitRequest>
 800cffa:	4603      	mov	r3, r0
 800cffc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800cffe:	7bfb      	ldrb	r3, [r7, #15]
 800d000:	4618      	mov	r0, r3
 800d002:	f000 f86d 	bl	800d0e0 <USBH_Get_USB_Status>
 800d006:	4603      	mov	r3, r0
 800d008:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d00a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d00c:	4618      	mov	r0, r3
 800d00e:	3714      	adds	r7, #20
 800d010:	46bd      	mov	sp, r7
 800d012:	bd90      	pop	{r4, r7, pc}

0800d014 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b082      	sub	sp, #8
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
 800d01c:	460b      	mov	r3, r1
 800d01e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d026:	78fa      	ldrb	r2, [r7, #3]
 800d028:	4611      	mov	r1, r2
 800d02a:	4618      	mov	r0, r3
 800d02c:	f7f6 fe37 	bl	8003c9e <HAL_HCD_HC_GetURBState>
 800d030:	4603      	mov	r3, r0
}
 800d032:	4618      	mov	r0, r3
 800d034:	3708      	adds	r7, #8
 800d036:	46bd      	mov	sp, r7
 800d038:	bd80      	pop	{r7, pc}

0800d03a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800d03a:	b580      	push	{r7, lr}
 800d03c:	b082      	sub	sp, #8
 800d03e:	af00      	add	r7, sp, #0
 800d040:	6078      	str	r0, [r7, #4]
 800d042:	460b      	mov	r3, r1
 800d044:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800d04c:	2b01      	cmp	r3, #1
 800d04e:	d103      	bne.n	800d058 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800d050:	78fb      	ldrb	r3, [r7, #3]
 800d052:	4618      	mov	r0, r3
 800d054:	f000 f870 	bl	800d138 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800d058:	20c8      	movs	r0, #200	; 0xc8
 800d05a:	f7f4 feef 	bl	8001e3c <HAL_Delay>
  return USBH_OK;
 800d05e:	2300      	movs	r3, #0
}
 800d060:	4618      	mov	r0, r3
 800d062:	3708      	adds	r7, #8
 800d064:	46bd      	mov	sp, r7
 800d066:	bd80      	pop	{r7, pc}

0800d068 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800d068:	b480      	push	{r7}
 800d06a:	b085      	sub	sp, #20
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
 800d070:	460b      	mov	r3, r1
 800d072:	70fb      	strb	r3, [r7, #3]
 800d074:	4613      	mov	r3, r2
 800d076:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d07e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800d080:	78fb      	ldrb	r3, [r7, #3]
 800d082:	68fa      	ldr	r2, [r7, #12]
 800d084:	212c      	movs	r1, #44	; 0x2c
 800d086:	fb01 f303 	mul.w	r3, r1, r3
 800d08a:	4413      	add	r3, r2
 800d08c:	333b      	adds	r3, #59	; 0x3b
 800d08e:	781b      	ldrb	r3, [r3, #0]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d009      	beq.n	800d0a8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800d094:	78fb      	ldrb	r3, [r7, #3]
 800d096:	68fa      	ldr	r2, [r7, #12]
 800d098:	212c      	movs	r1, #44	; 0x2c
 800d09a:	fb01 f303 	mul.w	r3, r1, r3
 800d09e:	4413      	add	r3, r2
 800d0a0:	3354      	adds	r3, #84	; 0x54
 800d0a2:	78ba      	ldrb	r2, [r7, #2]
 800d0a4:	701a      	strb	r2, [r3, #0]
 800d0a6:	e008      	b.n	800d0ba <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800d0a8:	78fb      	ldrb	r3, [r7, #3]
 800d0aa:	68fa      	ldr	r2, [r7, #12]
 800d0ac:	212c      	movs	r1, #44	; 0x2c
 800d0ae:	fb01 f303 	mul.w	r3, r1, r3
 800d0b2:	4413      	add	r3, r2
 800d0b4:	3355      	adds	r3, #85	; 0x55
 800d0b6:	78ba      	ldrb	r2, [r7, #2]
 800d0b8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800d0ba:	2300      	movs	r3, #0
}
 800d0bc:	4618      	mov	r0, r3
 800d0be:	3714      	adds	r7, #20
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c6:	4770      	bx	lr

0800d0c8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b082      	sub	sp, #8
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	f7f4 feb3 	bl	8001e3c <HAL_Delay>
}
 800d0d6:	bf00      	nop
 800d0d8:	3708      	adds	r7, #8
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	bd80      	pop	{r7, pc}
	...

0800d0e0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d0e0:	b480      	push	{r7}
 800d0e2:	b085      	sub	sp, #20
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d0ee:	79fb      	ldrb	r3, [r7, #7]
 800d0f0:	2b03      	cmp	r3, #3
 800d0f2:	d817      	bhi.n	800d124 <USBH_Get_USB_Status+0x44>
 800d0f4:	a201      	add	r2, pc, #4	; (adr r2, 800d0fc <USBH_Get_USB_Status+0x1c>)
 800d0f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0fa:	bf00      	nop
 800d0fc:	0800d10d 	.word	0x0800d10d
 800d100:	0800d113 	.word	0x0800d113
 800d104:	0800d119 	.word	0x0800d119
 800d108:	0800d11f 	.word	0x0800d11f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800d10c:	2300      	movs	r3, #0
 800d10e:	73fb      	strb	r3, [r7, #15]
    break;
 800d110:	e00b      	b.n	800d12a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800d112:	2302      	movs	r3, #2
 800d114:	73fb      	strb	r3, [r7, #15]
    break;
 800d116:	e008      	b.n	800d12a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800d118:	2301      	movs	r3, #1
 800d11a:	73fb      	strb	r3, [r7, #15]
    break;
 800d11c:	e005      	b.n	800d12a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800d11e:	2302      	movs	r3, #2
 800d120:	73fb      	strb	r3, [r7, #15]
    break;
 800d122:	e002      	b.n	800d12a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800d124:	2302      	movs	r3, #2
 800d126:	73fb      	strb	r3, [r7, #15]
    break;
 800d128:	bf00      	nop
  }
  return usb_status;
 800d12a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d12c:	4618      	mov	r0, r3
 800d12e:	3714      	adds	r7, #20
 800d130:	46bd      	mov	sp, r7
 800d132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d136:	4770      	bx	lr

0800d138 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b084      	sub	sp, #16
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	4603      	mov	r3, r0
 800d140:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800d142:	79fb      	ldrb	r3, [r7, #7]
 800d144:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800d146:	79fb      	ldrb	r3, [r7, #7]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d102      	bne.n	800d152 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800d14c:	2301      	movs	r3, #1
 800d14e:	73fb      	strb	r3, [r7, #15]
 800d150:	e001      	b.n	800d156 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800d152:	2300      	movs	r3, #0
 800d154:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800d156:	7bfb      	ldrb	r3, [r7, #15]
 800d158:	461a      	mov	r2, r3
 800d15a:	2101      	movs	r1, #1
 800d15c:	4803      	ldr	r0, [pc, #12]	; (800d16c <MX_DriverVbusFS+0x34>)
 800d15e:	f7f6 f9a7 	bl	80034b0 <HAL_GPIO_WritePin>
}
 800d162:	bf00      	nop
 800d164:	3710      	adds	r7, #16
 800d166:	46bd      	mov	sp, r7
 800d168:	bd80      	pop	{r7, pc}
 800d16a:	bf00      	nop
 800d16c:	40020800 	.word	0x40020800

0800d170 <__errno>:
 800d170:	4b01      	ldr	r3, [pc, #4]	; (800d178 <__errno+0x8>)
 800d172:	6818      	ldr	r0, [r3, #0]
 800d174:	4770      	bx	lr
 800d176:	bf00      	nop
 800d178:	20000030 	.word	0x20000030

0800d17c <__libc_init_array>:
 800d17c:	b570      	push	{r4, r5, r6, lr}
 800d17e:	4d0d      	ldr	r5, [pc, #52]	; (800d1b4 <__libc_init_array+0x38>)
 800d180:	4c0d      	ldr	r4, [pc, #52]	; (800d1b8 <__libc_init_array+0x3c>)
 800d182:	1b64      	subs	r4, r4, r5
 800d184:	10a4      	asrs	r4, r4, #2
 800d186:	2600      	movs	r6, #0
 800d188:	42a6      	cmp	r6, r4
 800d18a:	d109      	bne.n	800d1a0 <__libc_init_array+0x24>
 800d18c:	4d0b      	ldr	r5, [pc, #44]	; (800d1bc <__libc_init_array+0x40>)
 800d18e:	4c0c      	ldr	r4, [pc, #48]	; (800d1c0 <__libc_init_array+0x44>)
 800d190:	f000 fcc8 	bl	800db24 <_init>
 800d194:	1b64      	subs	r4, r4, r5
 800d196:	10a4      	asrs	r4, r4, #2
 800d198:	2600      	movs	r6, #0
 800d19a:	42a6      	cmp	r6, r4
 800d19c:	d105      	bne.n	800d1aa <__libc_init_array+0x2e>
 800d19e:	bd70      	pop	{r4, r5, r6, pc}
 800d1a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1a4:	4798      	blx	r3
 800d1a6:	3601      	adds	r6, #1
 800d1a8:	e7ee      	b.n	800d188 <__libc_init_array+0xc>
 800d1aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1ae:	4798      	blx	r3
 800d1b0:	3601      	adds	r6, #1
 800d1b2:	e7f2      	b.n	800d19a <__libc_init_array+0x1e>
 800d1b4:	0800dcd4 	.word	0x0800dcd4
 800d1b8:	0800dcd4 	.word	0x0800dcd4
 800d1bc:	0800dcd4 	.word	0x0800dcd4
 800d1c0:	0800dcd8 	.word	0x0800dcd8

0800d1c4 <__retarget_lock_acquire_recursive>:
 800d1c4:	4770      	bx	lr

0800d1c6 <__retarget_lock_release_recursive>:
 800d1c6:	4770      	bx	lr

0800d1c8 <malloc>:
 800d1c8:	4b02      	ldr	r3, [pc, #8]	; (800d1d4 <malloc+0xc>)
 800d1ca:	4601      	mov	r1, r0
 800d1cc:	6818      	ldr	r0, [r3, #0]
 800d1ce:	f000 b871 	b.w	800d2b4 <_malloc_r>
 800d1d2:	bf00      	nop
 800d1d4:	20000030 	.word	0x20000030

0800d1d8 <free>:
 800d1d8:	4b02      	ldr	r3, [pc, #8]	; (800d1e4 <free+0xc>)
 800d1da:	4601      	mov	r1, r0
 800d1dc:	6818      	ldr	r0, [r3, #0]
 800d1de:	f000 b819 	b.w	800d214 <_free_r>
 800d1e2:	bf00      	nop
 800d1e4:	20000030 	.word	0x20000030

0800d1e8 <memcpy>:
 800d1e8:	440a      	add	r2, r1
 800d1ea:	4291      	cmp	r1, r2
 800d1ec:	f100 33ff 	add.w	r3, r0, #4294967295
 800d1f0:	d100      	bne.n	800d1f4 <memcpy+0xc>
 800d1f2:	4770      	bx	lr
 800d1f4:	b510      	push	{r4, lr}
 800d1f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d1fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d1fe:	4291      	cmp	r1, r2
 800d200:	d1f9      	bne.n	800d1f6 <memcpy+0xe>
 800d202:	bd10      	pop	{r4, pc}

0800d204 <memset>:
 800d204:	4402      	add	r2, r0
 800d206:	4603      	mov	r3, r0
 800d208:	4293      	cmp	r3, r2
 800d20a:	d100      	bne.n	800d20e <memset+0xa>
 800d20c:	4770      	bx	lr
 800d20e:	f803 1b01 	strb.w	r1, [r3], #1
 800d212:	e7f9      	b.n	800d208 <memset+0x4>

0800d214 <_free_r>:
 800d214:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d216:	2900      	cmp	r1, #0
 800d218:	d048      	beq.n	800d2ac <_free_r+0x98>
 800d21a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d21e:	9001      	str	r0, [sp, #4]
 800d220:	2b00      	cmp	r3, #0
 800d222:	f1a1 0404 	sub.w	r4, r1, #4
 800d226:	bfb8      	it	lt
 800d228:	18e4      	addlt	r4, r4, r3
 800d22a:	f000 f937 	bl	800d49c <__malloc_lock>
 800d22e:	4a20      	ldr	r2, [pc, #128]	; (800d2b0 <_free_r+0x9c>)
 800d230:	9801      	ldr	r0, [sp, #4]
 800d232:	6813      	ldr	r3, [r2, #0]
 800d234:	4615      	mov	r5, r2
 800d236:	b933      	cbnz	r3, 800d246 <_free_r+0x32>
 800d238:	6063      	str	r3, [r4, #4]
 800d23a:	6014      	str	r4, [r2, #0]
 800d23c:	b003      	add	sp, #12
 800d23e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d242:	f000 b931 	b.w	800d4a8 <__malloc_unlock>
 800d246:	42a3      	cmp	r3, r4
 800d248:	d90b      	bls.n	800d262 <_free_r+0x4e>
 800d24a:	6821      	ldr	r1, [r4, #0]
 800d24c:	1862      	adds	r2, r4, r1
 800d24e:	4293      	cmp	r3, r2
 800d250:	bf04      	itt	eq
 800d252:	681a      	ldreq	r2, [r3, #0]
 800d254:	685b      	ldreq	r3, [r3, #4]
 800d256:	6063      	str	r3, [r4, #4]
 800d258:	bf04      	itt	eq
 800d25a:	1852      	addeq	r2, r2, r1
 800d25c:	6022      	streq	r2, [r4, #0]
 800d25e:	602c      	str	r4, [r5, #0]
 800d260:	e7ec      	b.n	800d23c <_free_r+0x28>
 800d262:	461a      	mov	r2, r3
 800d264:	685b      	ldr	r3, [r3, #4]
 800d266:	b10b      	cbz	r3, 800d26c <_free_r+0x58>
 800d268:	42a3      	cmp	r3, r4
 800d26a:	d9fa      	bls.n	800d262 <_free_r+0x4e>
 800d26c:	6811      	ldr	r1, [r2, #0]
 800d26e:	1855      	adds	r5, r2, r1
 800d270:	42a5      	cmp	r5, r4
 800d272:	d10b      	bne.n	800d28c <_free_r+0x78>
 800d274:	6824      	ldr	r4, [r4, #0]
 800d276:	4421      	add	r1, r4
 800d278:	1854      	adds	r4, r2, r1
 800d27a:	42a3      	cmp	r3, r4
 800d27c:	6011      	str	r1, [r2, #0]
 800d27e:	d1dd      	bne.n	800d23c <_free_r+0x28>
 800d280:	681c      	ldr	r4, [r3, #0]
 800d282:	685b      	ldr	r3, [r3, #4]
 800d284:	6053      	str	r3, [r2, #4]
 800d286:	4421      	add	r1, r4
 800d288:	6011      	str	r1, [r2, #0]
 800d28a:	e7d7      	b.n	800d23c <_free_r+0x28>
 800d28c:	d902      	bls.n	800d294 <_free_r+0x80>
 800d28e:	230c      	movs	r3, #12
 800d290:	6003      	str	r3, [r0, #0]
 800d292:	e7d3      	b.n	800d23c <_free_r+0x28>
 800d294:	6825      	ldr	r5, [r4, #0]
 800d296:	1961      	adds	r1, r4, r5
 800d298:	428b      	cmp	r3, r1
 800d29a:	bf04      	itt	eq
 800d29c:	6819      	ldreq	r1, [r3, #0]
 800d29e:	685b      	ldreq	r3, [r3, #4]
 800d2a0:	6063      	str	r3, [r4, #4]
 800d2a2:	bf04      	itt	eq
 800d2a4:	1949      	addeq	r1, r1, r5
 800d2a6:	6021      	streq	r1, [r4, #0]
 800d2a8:	6054      	str	r4, [r2, #4]
 800d2aa:	e7c7      	b.n	800d23c <_free_r+0x28>
 800d2ac:	b003      	add	sp, #12
 800d2ae:	bd30      	pop	{r4, r5, pc}
 800d2b0:	200040c0 	.word	0x200040c0

0800d2b4 <_malloc_r>:
 800d2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2b6:	1ccd      	adds	r5, r1, #3
 800d2b8:	f025 0503 	bic.w	r5, r5, #3
 800d2bc:	3508      	adds	r5, #8
 800d2be:	2d0c      	cmp	r5, #12
 800d2c0:	bf38      	it	cc
 800d2c2:	250c      	movcc	r5, #12
 800d2c4:	2d00      	cmp	r5, #0
 800d2c6:	4606      	mov	r6, r0
 800d2c8:	db01      	blt.n	800d2ce <_malloc_r+0x1a>
 800d2ca:	42a9      	cmp	r1, r5
 800d2cc:	d903      	bls.n	800d2d6 <_malloc_r+0x22>
 800d2ce:	230c      	movs	r3, #12
 800d2d0:	6033      	str	r3, [r6, #0]
 800d2d2:	2000      	movs	r0, #0
 800d2d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2d6:	f000 f8e1 	bl	800d49c <__malloc_lock>
 800d2da:	4921      	ldr	r1, [pc, #132]	; (800d360 <_malloc_r+0xac>)
 800d2dc:	680a      	ldr	r2, [r1, #0]
 800d2de:	4614      	mov	r4, r2
 800d2e0:	b99c      	cbnz	r4, 800d30a <_malloc_r+0x56>
 800d2e2:	4f20      	ldr	r7, [pc, #128]	; (800d364 <_malloc_r+0xb0>)
 800d2e4:	683b      	ldr	r3, [r7, #0]
 800d2e6:	b923      	cbnz	r3, 800d2f2 <_malloc_r+0x3e>
 800d2e8:	4621      	mov	r1, r4
 800d2ea:	4630      	mov	r0, r6
 800d2ec:	f000 f8a6 	bl	800d43c <_sbrk_r>
 800d2f0:	6038      	str	r0, [r7, #0]
 800d2f2:	4629      	mov	r1, r5
 800d2f4:	4630      	mov	r0, r6
 800d2f6:	f000 f8a1 	bl	800d43c <_sbrk_r>
 800d2fa:	1c43      	adds	r3, r0, #1
 800d2fc:	d123      	bne.n	800d346 <_malloc_r+0x92>
 800d2fe:	230c      	movs	r3, #12
 800d300:	6033      	str	r3, [r6, #0]
 800d302:	4630      	mov	r0, r6
 800d304:	f000 f8d0 	bl	800d4a8 <__malloc_unlock>
 800d308:	e7e3      	b.n	800d2d2 <_malloc_r+0x1e>
 800d30a:	6823      	ldr	r3, [r4, #0]
 800d30c:	1b5b      	subs	r3, r3, r5
 800d30e:	d417      	bmi.n	800d340 <_malloc_r+0x8c>
 800d310:	2b0b      	cmp	r3, #11
 800d312:	d903      	bls.n	800d31c <_malloc_r+0x68>
 800d314:	6023      	str	r3, [r4, #0]
 800d316:	441c      	add	r4, r3
 800d318:	6025      	str	r5, [r4, #0]
 800d31a:	e004      	b.n	800d326 <_malloc_r+0x72>
 800d31c:	6863      	ldr	r3, [r4, #4]
 800d31e:	42a2      	cmp	r2, r4
 800d320:	bf0c      	ite	eq
 800d322:	600b      	streq	r3, [r1, #0]
 800d324:	6053      	strne	r3, [r2, #4]
 800d326:	4630      	mov	r0, r6
 800d328:	f000 f8be 	bl	800d4a8 <__malloc_unlock>
 800d32c:	f104 000b 	add.w	r0, r4, #11
 800d330:	1d23      	adds	r3, r4, #4
 800d332:	f020 0007 	bic.w	r0, r0, #7
 800d336:	1ac2      	subs	r2, r0, r3
 800d338:	d0cc      	beq.n	800d2d4 <_malloc_r+0x20>
 800d33a:	1a1b      	subs	r3, r3, r0
 800d33c:	50a3      	str	r3, [r4, r2]
 800d33e:	e7c9      	b.n	800d2d4 <_malloc_r+0x20>
 800d340:	4622      	mov	r2, r4
 800d342:	6864      	ldr	r4, [r4, #4]
 800d344:	e7cc      	b.n	800d2e0 <_malloc_r+0x2c>
 800d346:	1cc4      	adds	r4, r0, #3
 800d348:	f024 0403 	bic.w	r4, r4, #3
 800d34c:	42a0      	cmp	r0, r4
 800d34e:	d0e3      	beq.n	800d318 <_malloc_r+0x64>
 800d350:	1a21      	subs	r1, r4, r0
 800d352:	4630      	mov	r0, r6
 800d354:	f000 f872 	bl	800d43c <_sbrk_r>
 800d358:	3001      	adds	r0, #1
 800d35a:	d1dd      	bne.n	800d318 <_malloc_r+0x64>
 800d35c:	e7cf      	b.n	800d2fe <_malloc_r+0x4a>
 800d35e:	bf00      	nop
 800d360:	200040c0 	.word	0x200040c0
 800d364:	200040c4 	.word	0x200040c4

0800d368 <cleanup_glue>:
 800d368:	b538      	push	{r3, r4, r5, lr}
 800d36a:	460c      	mov	r4, r1
 800d36c:	6809      	ldr	r1, [r1, #0]
 800d36e:	4605      	mov	r5, r0
 800d370:	b109      	cbz	r1, 800d376 <cleanup_glue+0xe>
 800d372:	f7ff fff9 	bl	800d368 <cleanup_glue>
 800d376:	4621      	mov	r1, r4
 800d378:	4628      	mov	r0, r5
 800d37a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d37e:	f7ff bf49 	b.w	800d214 <_free_r>
	...

0800d384 <_reclaim_reent>:
 800d384:	4b2c      	ldr	r3, [pc, #176]	; (800d438 <_reclaim_reent+0xb4>)
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	4283      	cmp	r3, r0
 800d38a:	b570      	push	{r4, r5, r6, lr}
 800d38c:	4604      	mov	r4, r0
 800d38e:	d051      	beq.n	800d434 <_reclaim_reent+0xb0>
 800d390:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d392:	b143      	cbz	r3, 800d3a6 <_reclaim_reent+0x22>
 800d394:	68db      	ldr	r3, [r3, #12]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d14a      	bne.n	800d430 <_reclaim_reent+0xac>
 800d39a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d39c:	6819      	ldr	r1, [r3, #0]
 800d39e:	b111      	cbz	r1, 800d3a6 <_reclaim_reent+0x22>
 800d3a0:	4620      	mov	r0, r4
 800d3a2:	f7ff ff37 	bl	800d214 <_free_r>
 800d3a6:	6961      	ldr	r1, [r4, #20]
 800d3a8:	b111      	cbz	r1, 800d3b0 <_reclaim_reent+0x2c>
 800d3aa:	4620      	mov	r0, r4
 800d3ac:	f7ff ff32 	bl	800d214 <_free_r>
 800d3b0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d3b2:	b111      	cbz	r1, 800d3ba <_reclaim_reent+0x36>
 800d3b4:	4620      	mov	r0, r4
 800d3b6:	f7ff ff2d 	bl	800d214 <_free_r>
 800d3ba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d3bc:	b111      	cbz	r1, 800d3c4 <_reclaim_reent+0x40>
 800d3be:	4620      	mov	r0, r4
 800d3c0:	f7ff ff28 	bl	800d214 <_free_r>
 800d3c4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d3c6:	b111      	cbz	r1, 800d3ce <_reclaim_reent+0x4a>
 800d3c8:	4620      	mov	r0, r4
 800d3ca:	f7ff ff23 	bl	800d214 <_free_r>
 800d3ce:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d3d0:	b111      	cbz	r1, 800d3d8 <_reclaim_reent+0x54>
 800d3d2:	4620      	mov	r0, r4
 800d3d4:	f7ff ff1e 	bl	800d214 <_free_r>
 800d3d8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d3da:	b111      	cbz	r1, 800d3e2 <_reclaim_reent+0x5e>
 800d3dc:	4620      	mov	r0, r4
 800d3de:	f7ff ff19 	bl	800d214 <_free_r>
 800d3e2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d3e4:	b111      	cbz	r1, 800d3ec <_reclaim_reent+0x68>
 800d3e6:	4620      	mov	r0, r4
 800d3e8:	f7ff ff14 	bl	800d214 <_free_r>
 800d3ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d3ee:	b111      	cbz	r1, 800d3f6 <_reclaim_reent+0x72>
 800d3f0:	4620      	mov	r0, r4
 800d3f2:	f7ff ff0f 	bl	800d214 <_free_r>
 800d3f6:	69a3      	ldr	r3, [r4, #24]
 800d3f8:	b1e3      	cbz	r3, 800d434 <_reclaim_reent+0xb0>
 800d3fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d3fc:	4620      	mov	r0, r4
 800d3fe:	4798      	blx	r3
 800d400:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d402:	b1b9      	cbz	r1, 800d434 <_reclaim_reent+0xb0>
 800d404:	4620      	mov	r0, r4
 800d406:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d40a:	f7ff bfad 	b.w	800d368 <cleanup_glue>
 800d40e:	5949      	ldr	r1, [r1, r5]
 800d410:	b941      	cbnz	r1, 800d424 <_reclaim_reent+0xa0>
 800d412:	3504      	adds	r5, #4
 800d414:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d416:	2d80      	cmp	r5, #128	; 0x80
 800d418:	68d9      	ldr	r1, [r3, #12]
 800d41a:	d1f8      	bne.n	800d40e <_reclaim_reent+0x8a>
 800d41c:	4620      	mov	r0, r4
 800d41e:	f7ff fef9 	bl	800d214 <_free_r>
 800d422:	e7ba      	b.n	800d39a <_reclaim_reent+0x16>
 800d424:	680e      	ldr	r6, [r1, #0]
 800d426:	4620      	mov	r0, r4
 800d428:	f7ff fef4 	bl	800d214 <_free_r>
 800d42c:	4631      	mov	r1, r6
 800d42e:	e7ef      	b.n	800d410 <_reclaim_reent+0x8c>
 800d430:	2500      	movs	r5, #0
 800d432:	e7ef      	b.n	800d414 <_reclaim_reent+0x90>
 800d434:	bd70      	pop	{r4, r5, r6, pc}
 800d436:	bf00      	nop
 800d438:	20000030 	.word	0x20000030

0800d43c <_sbrk_r>:
 800d43c:	b538      	push	{r3, r4, r5, lr}
 800d43e:	4d06      	ldr	r5, [pc, #24]	; (800d458 <_sbrk_r+0x1c>)
 800d440:	2300      	movs	r3, #0
 800d442:	4604      	mov	r4, r0
 800d444:	4608      	mov	r0, r1
 800d446:	602b      	str	r3, [r5, #0]
 800d448:	f7f4 fc44 	bl	8001cd4 <_sbrk>
 800d44c:	1c43      	adds	r3, r0, #1
 800d44e:	d102      	bne.n	800d456 <_sbrk_r+0x1a>
 800d450:	682b      	ldr	r3, [r5, #0]
 800d452:	b103      	cbz	r3, 800d456 <_sbrk_r+0x1a>
 800d454:	6023      	str	r3, [r4, #0]
 800d456:	bd38      	pop	{r3, r4, r5, pc}
 800d458:	20004b74 	.word	0x20004b74

0800d45c <siprintf>:
 800d45c:	b40e      	push	{r1, r2, r3}
 800d45e:	b500      	push	{lr}
 800d460:	b09c      	sub	sp, #112	; 0x70
 800d462:	ab1d      	add	r3, sp, #116	; 0x74
 800d464:	9002      	str	r0, [sp, #8]
 800d466:	9006      	str	r0, [sp, #24]
 800d468:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d46c:	4809      	ldr	r0, [pc, #36]	; (800d494 <siprintf+0x38>)
 800d46e:	9107      	str	r1, [sp, #28]
 800d470:	9104      	str	r1, [sp, #16]
 800d472:	4909      	ldr	r1, [pc, #36]	; (800d498 <siprintf+0x3c>)
 800d474:	f853 2b04 	ldr.w	r2, [r3], #4
 800d478:	9105      	str	r1, [sp, #20]
 800d47a:	6800      	ldr	r0, [r0, #0]
 800d47c:	9301      	str	r3, [sp, #4]
 800d47e:	a902      	add	r1, sp, #8
 800d480:	f000 f874 	bl	800d56c <_svfiprintf_r>
 800d484:	9b02      	ldr	r3, [sp, #8]
 800d486:	2200      	movs	r2, #0
 800d488:	701a      	strb	r2, [r3, #0]
 800d48a:	b01c      	add	sp, #112	; 0x70
 800d48c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d490:	b003      	add	sp, #12
 800d492:	4770      	bx	lr
 800d494:	20000030 	.word	0x20000030
 800d498:	ffff0208 	.word	0xffff0208

0800d49c <__malloc_lock>:
 800d49c:	4801      	ldr	r0, [pc, #4]	; (800d4a4 <__malloc_lock+0x8>)
 800d49e:	f7ff be91 	b.w	800d1c4 <__retarget_lock_acquire_recursive>
 800d4a2:	bf00      	nop
 800d4a4:	20004b6c 	.word	0x20004b6c

0800d4a8 <__malloc_unlock>:
 800d4a8:	4801      	ldr	r0, [pc, #4]	; (800d4b0 <__malloc_unlock+0x8>)
 800d4aa:	f7ff be8c 	b.w	800d1c6 <__retarget_lock_release_recursive>
 800d4ae:	bf00      	nop
 800d4b0:	20004b6c 	.word	0x20004b6c

0800d4b4 <__ssputs_r>:
 800d4b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4b8:	688e      	ldr	r6, [r1, #8]
 800d4ba:	429e      	cmp	r6, r3
 800d4bc:	4682      	mov	sl, r0
 800d4be:	460c      	mov	r4, r1
 800d4c0:	4690      	mov	r8, r2
 800d4c2:	461f      	mov	r7, r3
 800d4c4:	d838      	bhi.n	800d538 <__ssputs_r+0x84>
 800d4c6:	898a      	ldrh	r2, [r1, #12]
 800d4c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d4cc:	d032      	beq.n	800d534 <__ssputs_r+0x80>
 800d4ce:	6825      	ldr	r5, [r4, #0]
 800d4d0:	6909      	ldr	r1, [r1, #16]
 800d4d2:	eba5 0901 	sub.w	r9, r5, r1
 800d4d6:	6965      	ldr	r5, [r4, #20]
 800d4d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d4dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d4e0:	3301      	adds	r3, #1
 800d4e2:	444b      	add	r3, r9
 800d4e4:	106d      	asrs	r5, r5, #1
 800d4e6:	429d      	cmp	r5, r3
 800d4e8:	bf38      	it	cc
 800d4ea:	461d      	movcc	r5, r3
 800d4ec:	0553      	lsls	r3, r2, #21
 800d4ee:	d531      	bpl.n	800d554 <__ssputs_r+0xa0>
 800d4f0:	4629      	mov	r1, r5
 800d4f2:	f7ff fedf 	bl	800d2b4 <_malloc_r>
 800d4f6:	4606      	mov	r6, r0
 800d4f8:	b950      	cbnz	r0, 800d510 <__ssputs_r+0x5c>
 800d4fa:	230c      	movs	r3, #12
 800d4fc:	f8ca 3000 	str.w	r3, [sl]
 800d500:	89a3      	ldrh	r3, [r4, #12]
 800d502:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d506:	81a3      	strh	r3, [r4, #12]
 800d508:	f04f 30ff 	mov.w	r0, #4294967295
 800d50c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d510:	6921      	ldr	r1, [r4, #16]
 800d512:	464a      	mov	r2, r9
 800d514:	f7ff fe68 	bl	800d1e8 <memcpy>
 800d518:	89a3      	ldrh	r3, [r4, #12]
 800d51a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d51e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d522:	81a3      	strh	r3, [r4, #12]
 800d524:	6126      	str	r6, [r4, #16]
 800d526:	6165      	str	r5, [r4, #20]
 800d528:	444e      	add	r6, r9
 800d52a:	eba5 0509 	sub.w	r5, r5, r9
 800d52e:	6026      	str	r6, [r4, #0]
 800d530:	60a5      	str	r5, [r4, #8]
 800d532:	463e      	mov	r6, r7
 800d534:	42be      	cmp	r6, r7
 800d536:	d900      	bls.n	800d53a <__ssputs_r+0x86>
 800d538:	463e      	mov	r6, r7
 800d53a:	4632      	mov	r2, r6
 800d53c:	6820      	ldr	r0, [r4, #0]
 800d53e:	4641      	mov	r1, r8
 800d540:	f000 faa8 	bl	800da94 <memmove>
 800d544:	68a3      	ldr	r3, [r4, #8]
 800d546:	6822      	ldr	r2, [r4, #0]
 800d548:	1b9b      	subs	r3, r3, r6
 800d54a:	4432      	add	r2, r6
 800d54c:	60a3      	str	r3, [r4, #8]
 800d54e:	6022      	str	r2, [r4, #0]
 800d550:	2000      	movs	r0, #0
 800d552:	e7db      	b.n	800d50c <__ssputs_r+0x58>
 800d554:	462a      	mov	r2, r5
 800d556:	f000 fab7 	bl	800dac8 <_realloc_r>
 800d55a:	4606      	mov	r6, r0
 800d55c:	2800      	cmp	r0, #0
 800d55e:	d1e1      	bne.n	800d524 <__ssputs_r+0x70>
 800d560:	6921      	ldr	r1, [r4, #16]
 800d562:	4650      	mov	r0, sl
 800d564:	f7ff fe56 	bl	800d214 <_free_r>
 800d568:	e7c7      	b.n	800d4fa <__ssputs_r+0x46>
	...

0800d56c <_svfiprintf_r>:
 800d56c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d570:	4698      	mov	r8, r3
 800d572:	898b      	ldrh	r3, [r1, #12]
 800d574:	061b      	lsls	r3, r3, #24
 800d576:	b09d      	sub	sp, #116	; 0x74
 800d578:	4607      	mov	r7, r0
 800d57a:	460d      	mov	r5, r1
 800d57c:	4614      	mov	r4, r2
 800d57e:	d50e      	bpl.n	800d59e <_svfiprintf_r+0x32>
 800d580:	690b      	ldr	r3, [r1, #16]
 800d582:	b963      	cbnz	r3, 800d59e <_svfiprintf_r+0x32>
 800d584:	2140      	movs	r1, #64	; 0x40
 800d586:	f7ff fe95 	bl	800d2b4 <_malloc_r>
 800d58a:	6028      	str	r0, [r5, #0]
 800d58c:	6128      	str	r0, [r5, #16]
 800d58e:	b920      	cbnz	r0, 800d59a <_svfiprintf_r+0x2e>
 800d590:	230c      	movs	r3, #12
 800d592:	603b      	str	r3, [r7, #0]
 800d594:	f04f 30ff 	mov.w	r0, #4294967295
 800d598:	e0d1      	b.n	800d73e <_svfiprintf_r+0x1d2>
 800d59a:	2340      	movs	r3, #64	; 0x40
 800d59c:	616b      	str	r3, [r5, #20]
 800d59e:	2300      	movs	r3, #0
 800d5a0:	9309      	str	r3, [sp, #36]	; 0x24
 800d5a2:	2320      	movs	r3, #32
 800d5a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d5a8:	f8cd 800c 	str.w	r8, [sp, #12]
 800d5ac:	2330      	movs	r3, #48	; 0x30
 800d5ae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d758 <_svfiprintf_r+0x1ec>
 800d5b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d5b6:	f04f 0901 	mov.w	r9, #1
 800d5ba:	4623      	mov	r3, r4
 800d5bc:	469a      	mov	sl, r3
 800d5be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d5c2:	b10a      	cbz	r2, 800d5c8 <_svfiprintf_r+0x5c>
 800d5c4:	2a25      	cmp	r2, #37	; 0x25
 800d5c6:	d1f9      	bne.n	800d5bc <_svfiprintf_r+0x50>
 800d5c8:	ebba 0b04 	subs.w	fp, sl, r4
 800d5cc:	d00b      	beq.n	800d5e6 <_svfiprintf_r+0x7a>
 800d5ce:	465b      	mov	r3, fp
 800d5d0:	4622      	mov	r2, r4
 800d5d2:	4629      	mov	r1, r5
 800d5d4:	4638      	mov	r0, r7
 800d5d6:	f7ff ff6d 	bl	800d4b4 <__ssputs_r>
 800d5da:	3001      	adds	r0, #1
 800d5dc:	f000 80aa 	beq.w	800d734 <_svfiprintf_r+0x1c8>
 800d5e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d5e2:	445a      	add	r2, fp
 800d5e4:	9209      	str	r2, [sp, #36]	; 0x24
 800d5e6:	f89a 3000 	ldrb.w	r3, [sl]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	f000 80a2 	beq.w	800d734 <_svfiprintf_r+0x1c8>
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	f04f 32ff 	mov.w	r2, #4294967295
 800d5f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d5fa:	f10a 0a01 	add.w	sl, sl, #1
 800d5fe:	9304      	str	r3, [sp, #16]
 800d600:	9307      	str	r3, [sp, #28]
 800d602:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d606:	931a      	str	r3, [sp, #104]	; 0x68
 800d608:	4654      	mov	r4, sl
 800d60a:	2205      	movs	r2, #5
 800d60c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d610:	4851      	ldr	r0, [pc, #324]	; (800d758 <_svfiprintf_r+0x1ec>)
 800d612:	f7f2 fde5 	bl	80001e0 <memchr>
 800d616:	9a04      	ldr	r2, [sp, #16]
 800d618:	b9d8      	cbnz	r0, 800d652 <_svfiprintf_r+0xe6>
 800d61a:	06d0      	lsls	r0, r2, #27
 800d61c:	bf44      	itt	mi
 800d61e:	2320      	movmi	r3, #32
 800d620:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d624:	0711      	lsls	r1, r2, #28
 800d626:	bf44      	itt	mi
 800d628:	232b      	movmi	r3, #43	; 0x2b
 800d62a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d62e:	f89a 3000 	ldrb.w	r3, [sl]
 800d632:	2b2a      	cmp	r3, #42	; 0x2a
 800d634:	d015      	beq.n	800d662 <_svfiprintf_r+0xf6>
 800d636:	9a07      	ldr	r2, [sp, #28]
 800d638:	4654      	mov	r4, sl
 800d63a:	2000      	movs	r0, #0
 800d63c:	f04f 0c0a 	mov.w	ip, #10
 800d640:	4621      	mov	r1, r4
 800d642:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d646:	3b30      	subs	r3, #48	; 0x30
 800d648:	2b09      	cmp	r3, #9
 800d64a:	d94e      	bls.n	800d6ea <_svfiprintf_r+0x17e>
 800d64c:	b1b0      	cbz	r0, 800d67c <_svfiprintf_r+0x110>
 800d64e:	9207      	str	r2, [sp, #28]
 800d650:	e014      	b.n	800d67c <_svfiprintf_r+0x110>
 800d652:	eba0 0308 	sub.w	r3, r0, r8
 800d656:	fa09 f303 	lsl.w	r3, r9, r3
 800d65a:	4313      	orrs	r3, r2
 800d65c:	9304      	str	r3, [sp, #16]
 800d65e:	46a2      	mov	sl, r4
 800d660:	e7d2      	b.n	800d608 <_svfiprintf_r+0x9c>
 800d662:	9b03      	ldr	r3, [sp, #12]
 800d664:	1d19      	adds	r1, r3, #4
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	9103      	str	r1, [sp, #12]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	bfbb      	ittet	lt
 800d66e:	425b      	neglt	r3, r3
 800d670:	f042 0202 	orrlt.w	r2, r2, #2
 800d674:	9307      	strge	r3, [sp, #28]
 800d676:	9307      	strlt	r3, [sp, #28]
 800d678:	bfb8      	it	lt
 800d67a:	9204      	strlt	r2, [sp, #16]
 800d67c:	7823      	ldrb	r3, [r4, #0]
 800d67e:	2b2e      	cmp	r3, #46	; 0x2e
 800d680:	d10c      	bne.n	800d69c <_svfiprintf_r+0x130>
 800d682:	7863      	ldrb	r3, [r4, #1]
 800d684:	2b2a      	cmp	r3, #42	; 0x2a
 800d686:	d135      	bne.n	800d6f4 <_svfiprintf_r+0x188>
 800d688:	9b03      	ldr	r3, [sp, #12]
 800d68a:	1d1a      	adds	r2, r3, #4
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	9203      	str	r2, [sp, #12]
 800d690:	2b00      	cmp	r3, #0
 800d692:	bfb8      	it	lt
 800d694:	f04f 33ff 	movlt.w	r3, #4294967295
 800d698:	3402      	adds	r4, #2
 800d69a:	9305      	str	r3, [sp, #20]
 800d69c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d768 <_svfiprintf_r+0x1fc>
 800d6a0:	7821      	ldrb	r1, [r4, #0]
 800d6a2:	2203      	movs	r2, #3
 800d6a4:	4650      	mov	r0, sl
 800d6a6:	f7f2 fd9b 	bl	80001e0 <memchr>
 800d6aa:	b140      	cbz	r0, 800d6be <_svfiprintf_r+0x152>
 800d6ac:	2340      	movs	r3, #64	; 0x40
 800d6ae:	eba0 000a 	sub.w	r0, r0, sl
 800d6b2:	fa03 f000 	lsl.w	r0, r3, r0
 800d6b6:	9b04      	ldr	r3, [sp, #16]
 800d6b8:	4303      	orrs	r3, r0
 800d6ba:	3401      	adds	r4, #1
 800d6bc:	9304      	str	r3, [sp, #16]
 800d6be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6c2:	4826      	ldr	r0, [pc, #152]	; (800d75c <_svfiprintf_r+0x1f0>)
 800d6c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d6c8:	2206      	movs	r2, #6
 800d6ca:	f7f2 fd89 	bl	80001e0 <memchr>
 800d6ce:	2800      	cmp	r0, #0
 800d6d0:	d038      	beq.n	800d744 <_svfiprintf_r+0x1d8>
 800d6d2:	4b23      	ldr	r3, [pc, #140]	; (800d760 <_svfiprintf_r+0x1f4>)
 800d6d4:	bb1b      	cbnz	r3, 800d71e <_svfiprintf_r+0x1b2>
 800d6d6:	9b03      	ldr	r3, [sp, #12]
 800d6d8:	3307      	adds	r3, #7
 800d6da:	f023 0307 	bic.w	r3, r3, #7
 800d6de:	3308      	adds	r3, #8
 800d6e0:	9303      	str	r3, [sp, #12]
 800d6e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6e4:	4433      	add	r3, r6
 800d6e6:	9309      	str	r3, [sp, #36]	; 0x24
 800d6e8:	e767      	b.n	800d5ba <_svfiprintf_r+0x4e>
 800d6ea:	fb0c 3202 	mla	r2, ip, r2, r3
 800d6ee:	460c      	mov	r4, r1
 800d6f0:	2001      	movs	r0, #1
 800d6f2:	e7a5      	b.n	800d640 <_svfiprintf_r+0xd4>
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	3401      	adds	r4, #1
 800d6f8:	9305      	str	r3, [sp, #20]
 800d6fa:	4619      	mov	r1, r3
 800d6fc:	f04f 0c0a 	mov.w	ip, #10
 800d700:	4620      	mov	r0, r4
 800d702:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d706:	3a30      	subs	r2, #48	; 0x30
 800d708:	2a09      	cmp	r2, #9
 800d70a:	d903      	bls.n	800d714 <_svfiprintf_r+0x1a8>
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d0c5      	beq.n	800d69c <_svfiprintf_r+0x130>
 800d710:	9105      	str	r1, [sp, #20]
 800d712:	e7c3      	b.n	800d69c <_svfiprintf_r+0x130>
 800d714:	fb0c 2101 	mla	r1, ip, r1, r2
 800d718:	4604      	mov	r4, r0
 800d71a:	2301      	movs	r3, #1
 800d71c:	e7f0      	b.n	800d700 <_svfiprintf_r+0x194>
 800d71e:	ab03      	add	r3, sp, #12
 800d720:	9300      	str	r3, [sp, #0]
 800d722:	462a      	mov	r2, r5
 800d724:	4b0f      	ldr	r3, [pc, #60]	; (800d764 <_svfiprintf_r+0x1f8>)
 800d726:	a904      	add	r1, sp, #16
 800d728:	4638      	mov	r0, r7
 800d72a:	f3af 8000 	nop.w
 800d72e:	1c42      	adds	r2, r0, #1
 800d730:	4606      	mov	r6, r0
 800d732:	d1d6      	bne.n	800d6e2 <_svfiprintf_r+0x176>
 800d734:	89ab      	ldrh	r3, [r5, #12]
 800d736:	065b      	lsls	r3, r3, #25
 800d738:	f53f af2c 	bmi.w	800d594 <_svfiprintf_r+0x28>
 800d73c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d73e:	b01d      	add	sp, #116	; 0x74
 800d740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d744:	ab03      	add	r3, sp, #12
 800d746:	9300      	str	r3, [sp, #0]
 800d748:	462a      	mov	r2, r5
 800d74a:	4b06      	ldr	r3, [pc, #24]	; (800d764 <_svfiprintf_r+0x1f8>)
 800d74c:	a904      	add	r1, sp, #16
 800d74e:	4638      	mov	r0, r7
 800d750:	f000 f87a 	bl	800d848 <_printf_i>
 800d754:	e7eb      	b.n	800d72e <_svfiprintf_r+0x1c2>
 800d756:	bf00      	nop
 800d758:	0800dc98 	.word	0x0800dc98
 800d75c:	0800dca2 	.word	0x0800dca2
 800d760:	00000000 	.word	0x00000000
 800d764:	0800d4b5 	.word	0x0800d4b5
 800d768:	0800dc9e 	.word	0x0800dc9e

0800d76c <_printf_common>:
 800d76c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d770:	4616      	mov	r6, r2
 800d772:	4699      	mov	r9, r3
 800d774:	688a      	ldr	r2, [r1, #8]
 800d776:	690b      	ldr	r3, [r1, #16]
 800d778:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d77c:	4293      	cmp	r3, r2
 800d77e:	bfb8      	it	lt
 800d780:	4613      	movlt	r3, r2
 800d782:	6033      	str	r3, [r6, #0]
 800d784:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d788:	4607      	mov	r7, r0
 800d78a:	460c      	mov	r4, r1
 800d78c:	b10a      	cbz	r2, 800d792 <_printf_common+0x26>
 800d78e:	3301      	adds	r3, #1
 800d790:	6033      	str	r3, [r6, #0]
 800d792:	6823      	ldr	r3, [r4, #0]
 800d794:	0699      	lsls	r1, r3, #26
 800d796:	bf42      	ittt	mi
 800d798:	6833      	ldrmi	r3, [r6, #0]
 800d79a:	3302      	addmi	r3, #2
 800d79c:	6033      	strmi	r3, [r6, #0]
 800d79e:	6825      	ldr	r5, [r4, #0]
 800d7a0:	f015 0506 	ands.w	r5, r5, #6
 800d7a4:	d106      	bne.n	800d7b4 <_printf_common+0x48>
 800d7a6:	f104 0a19 	add.w	sl, r4, #25
 800d7aa:	68e3      	ldr	r3, [r4, #12]
 800d7ac:	6832      	ldr	r2, [r6, #0]
 800d7ae:	1a9b      	subs	r3, r3, r2
 800d7b0:	42ab      	cmp	r3, r5
 800d7b2:	dc26      	bgt.n	800d802 <_printf_common+0x96>
 800d7b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d7b8:	1e13      	subs	r3, r2, #0
 800d7ba:	6822      	ldr	r2, [r4, #0]
 800d7bc:	bf18      	it	ne
 800d7be:	2301      	movne	r3, #1
 800d7c0:	0692      	lsls	r2, r2, #26
 800d7c2:	d42b      	bmi.n	800d81c <_printf_common+0xb0>
 800d7c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d7c8:	4649      	mov	r1, r9
 800d7ca:	4638      	mov	r0, r7
 800d7cc:	47c0      	blx	r8
 800d7ce:	3001      	adds	r0, #1
 800d7d0:	d01e      	beq.n	800d810 <_printf_common+0xa4>
 800d7d2:	6823      	ldr	r3, [r4, #0]
 800d7d4:	68e5      	ldr	r5, [r4, #12]
 800d7d6:	6832      	ldr	r2, [r6, #0]
 800d7d8:	f003 0306 	and.w	r3, r3, #6
 800d7dc:	2b04      	cmp	r3, #4
 800d7de:	bf08      	it	eq
 800d7e0:	1aad      	subeq	r5, r5, r2
 800d7e2:	68a3      	ldr	r3, [r4, #8]
 800d7e4:	6922      	ldr	r2, [r4, #16]
 800d7e6:	bf0c      	ite	eq
 800d7e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d7ec:	2500      	movne	r5, #0
 800d7ee:	4293      	cmp	r3, r2
 800d7f0:	bfc4      	itt	gt
 800d7f2:	1a9b      	subgt	r3, r3, r2
 800d7f4:	18ed      	addgt	r5, r5, r3
 800d7f6:	2600      	movs	r6, #0
 800d7f8:	341a      	adds	r4, #26
 800d7fa:	42b5      	cmp	r5, r6
 800d7fc:	d11a      	bne.n	800d834 <_printf_common+0xc8>
 800d7fe:	2000      	movs	r0, #0
 800d800:	e008      	b.n	800d814 <_printf_common+0xa8>
 800d802:	2301      	movs	r3, #1
 800d804:	4652      	mov	r2, sl
 800d806:	4649      	mov	r1, r9
 800d808:	4638      	mov	r0, r7
 800d80a:	47c0      	blx	r8
 800d80c:	3001      	adds	r0, #1
 800d80e:	d103      	bne.n	800d818 <_printf_common+0xac>
 800d810:	f04f 30ff 	mov.w	r0, #4294967295
 800d814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d818:	3501      	adds	r5, #1
 800d81a:	e7c6      	b.n	800d7aa <_printf_common+0x3e>
 800d81c:	18e1      	adds	r1, r4, r3
 800d81e:	1c5a      	adds	r2, r3, #1
 800d820:	2030      	movs	r0, #48	; 0x30
 800d822:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d826:	4422      	add	r2, r4
 800d828:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d82c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d830:	3302      	adds	r3, #2
 800d832:	e7c7      	b.n	800d7c4 <_printf_common+0x58>
 800d834:	2301      	movs	r3, #1
 800d836:	4622      	mov	r2, r4
 800d838:	4649      	mov	r1, r9
 800d83a:	4638      	mov	r0, r7
 800d83c:	47c0      	blx	r8
 800d83e:	3001      	adds	r0, #1
 800d840:	d0e6      	beq.n	800d810 <_printf_common+0xa4>
 800d842:	3601      	adds	r6, #1
 800d844:	e7d9      	b.n	800d7fa <_printf_common+0x8e>
	...

0800d848 <_printf_i>:
 800d848:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d84c:	460c      	mov	r4, r1
 800d84e:	4691      	mov	r9, r2
 800d850:	7e27      	ldrb	r7, [r4, #24]
 800d852:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d854:	2f78      	cmp	r7, #120	; 0x78
 800d856:	4680      	mov	r8, r0
 800d858:	469a      	mov	sl, r3
 800d85a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d85e:	d807      	bhi.n	800d870 <_printf_i+0x28>
 800d860:	2f62      	cmp	r7, #98	; 0x62
 800d862:	d80a      	bhi.n	800d87a <_printf_i+0x32>
 800d864:	2f00      	cmp	r7, #0
 800d866:	f000 80d8 	beq.w	800da1a <_printf_i+0x1d2>
 800d86a:	2f58      	cmp	r7, #88	; 0x58
 800d86c:	f000 80a3 	beq.w	800d9b6 <_printf_i+0x16e>
 800d870:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d874:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d878:	e03a      	b.n	800d8f0 <_printf_i+0xa8>
 800d87a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d87e:	2b15      	cmp	r3, #21
 800d880:	d8f6      	bhi.n	800d870 <_printf_i+0x28>
 800d882:	a001      	add	r0, pc, #4	; (adr r0, 800d888 <_printf_i+0x40>)
 800d884:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d888:	0800d8e1 	.word	0x0800d8e1
 800d88c:	0800d8f5 	.word	0x0800d8f5
 800d890:	0800d871 	.word	0x0800d871
 800d894:	0800d871 	.word	0x0800d871
 800d898:	0800d871 	.word	0x0800d871
 800d89c:	0800d871 	.word	0x0800d871
 800d8a0:	0800d8f5 	.word	0x0800d8f5
 800d8a4:	0800d871 	.word	0x0800d871
 800d8a8:	0800d871 	.word	0x0800d871
 800d8ac:	0800d871 	.word	0x0800d871
 800d8b0:	0800d871 	.word	0x0800d871
 800d8b4:	0800da01 	.word	0x0800da01
 800d8b8:	0800d925 	.word	0x0800d925
 800d8bc:	0800d9e3 	.word	0x0800d9e3
 800d8c0:	0800d871 	.word	0x0800d871
 800d8c4:	0800d871 	.word	0x0800d871
 800d8c8:	0800da23 	.word	0x0800da23
 800d8cc:	0800d871 	.word	0x0800d871
 800d8d0:	0800d925 	.word	0x0800d925
 800d8d4:	0800d871 	.word	0x0800d871
 800d8d8:	0800d871 	.word	0x0800d871
 800d8dc:	0800d9eb 	.word	0x0800d9eb
 800d8e0:	680b      	ldr	r3, [r1, #0]
 800d8e2:	1d1a      	adds	r2, r3, #4
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	600a      	str	r2, [r1, #0]
 800d8e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d8ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d8f0:	2301      	movs	r3, #1
 800d8f2:	e0a3      	b.n	800da3c <_printf_i+0x1f4>
 800d8f4:	6825      	ldr	r5, [r4, #0]
 800d8f6:	6808      	ldr	r0, [r1, #0]
 800d8f8:	062e      	lsls	r6, r5, #24
 800d8fa:	f100 0304 	add.w	r3, r0, #4
 800d8fe:	d50a      	bpl.n	800d916 <_printf_i+0xce>
 800d900:	6805      	ldr	r5, [r0, #0]
 800d902:	600b      	str	r3, [r1, #0]
 800d904:	2d00      	cmp	r5, #0
 800d906:	da03      	bge.n	800d910 <_printf_i+0xc8>
 800d908:	232d      	movs	r3, #45	; 0x2d
 800d90a:	426d      	negs	r5, r5
 800d90c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d910:	485e      	ldr	r0, [pc, #376]	; (800da8c <_printf_i+0x244>)
 800d912:	230a      	movs	r3, #10
 800d914:	e019      	b.n	800d94a <_printf_i+0x102>
 800d916:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d91a:	6805      	ldr	r5, [r0, #0]
 800d91c:	600b      	str	r3, [r1, #0]
 800d91e:	bf18      	it	ne
 800d920:	b22d      	sxthne	r5, r5
 800d922:	e7ef      	b.n	800d904 <_printf_i+0xbc>
 800d924:	680b      	ldr	r3, [r1, #0]
 800d926:	6825      	ldr	r5, [r4, #0]
 800d928:	1d18      	adds	r0, r3, #4
 800d92a:	6008      	str	r0, [r1, #0]
 800d92c:	0628      	lsls	r0, r5, #24
 800d92e:	d501      	bpl.n	800d934 <_printf_i+0xec>
 800d930:	681d      	ldr	r5, [r3, #0]
 800d932:	e002      	b.n	800d93a <_printf_i+0xf2>
 800d934:	0669      	lsls	r1, r5, #25
 800d936:	d5fb      	bpl.n	800d930 <_printf_i+0xe8>
 800d938:	881d      	ldrh	r5, [r3, #0]
 800d93a:	4854      	ldr	r0, [pc, #336]	; (800da8c <_printf_i+0x244>)
 800d93c:	2f6f      	cmp	r7, #111	; 0x6f
 800d93e:	bf0c      	ite	eq
 800d940:	2308      	moveq	r3, #8
 800d942:	230a      	movne	r3, #10
 800d944:	2100      	movs	r1, #0
 800d946:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d94a:	6866      	ldr	r6, [r4, #4]
 800d94c:	60a6      	str	r6, [r4, #8]
 800d94e:	2e00      	cmp	r6, #0
 800d950:	bfa2      	ittt	ge
 800d952:	6821      	ldrge	r1, [r4, #0]
 800d954:	f021 0104 	bicge.w	r1, r1, #4
 800d958:	6021      	strge	r1, [r4, #0]
 800d95a:	b90d      	cbnz	r5, 800d960 <_printf_i+0x118>
 800d95c:	2e00      	cmp	r6, #0
 800d95e:	d04d      	beq.n	800d9fc <_printf_i+0x1b4>
 800d960:	4616      	mov	r6, r2
 800d962:	fbb5 f1f3 	udiv	r1, r5, r3
 800d966:	fb03 5711 	mls	r7, r3, r1, r5
 800d96a:	5dc7      	ldrb	r7, [r0, r7]
 800d96c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d970:	462f      	mov	r7, r5
 800d972:	42bb      	cmp	r3, r7
 800d974:	460d      	mov	r5, r1
 800d976:	d9f4      	bls.n	800d962 <_printf_i+0x11a>
 800d978:	2b08      	cmp	r3, #8
 800d97a:	d10b      	bne.n	800d994 <_printf_i+0x14c>
 800d97c:	6823      	ldr	r3, [r4, #0]
 800d97e:	07df      	lsls	r7, r3, #31
 800d980:	d508      	bpl.n	800d994 <_printf_i+0x14c>
 800d982:	6923      	ldr	r3, [r4, #16]
 800d984:	6861      	ldr	r1, [r4, #4]
 800d986:	4299      	cmp	r1, r3
 800d988:	bfde      	ittt	le
 800d98a:	2330      	movle	r3, #48	; 0x30
 800d98c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d990:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d994:	1b92      	subs	r2, r2, r6
 800d996:	6122      	str	r2, [r4, #16]
 800d998:	f8cd a000 	str.w	sl, [sp]
 800d99c:	464b      	mov	r3, r9
 800d99e:	aa03      	add	r2, sp, #12
 800d9a0:	4621      	mov	r1, r4
 800d9a2:	4640      	mov	r0, r8
 800d9a4:	f7ff fee2 	bl	800d76c <_printf_common>
 800d9a8:	3001      	adds	r0, #1
 800d9aa:	d14c      	bne.n	800da46 <_printf_i+0x1fe>
 800d9ac:	f04f 30ff 	mov.w	r0, #4294967295
 800d9b0:	b004      	add	sp, #16
 800d9b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9b6:	4835      	ldr	r0, [pc, #212]	; (800da8c <_printf_i+0x244>)
 800d9b8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d9bc:	6823      	ldr	r3, [r4, #0]
 800d9be:	680e      	ldr	r6, [r1, #0]
 800d9c0:	061f      	lsls	r7, r3, #24
 800d9c2:	f856 5b04 	ldr.w	r5, [r6], #4
 800d9c6:	600e      	str	r6, [r1, #0]
 800d9c8:	d514      	bpl.n	800d9f4 <_printf_i+0x1ac>
 800d9ca:	07d9      	lsls	r1, r3, #31
 800d9cc:	bf44      	itt	mi
 800d9ce:	f043 0320 	orrmi.w	r3, r3, #32
 800d9d2:	6023      	strmi	r3, [r4, #0]
 800d9d4:	b91d      	cbnz	r5, 800d9de <_printf_i+0x196>
 800d9d6:	6823      	ldr	r3, [r4, #0]
 800d9d8:	f023 0320 	bic.w	r3, r3, #32
 800d9dc:	6023      	str	r3, [r4, #0]
 800d9de:	2310      	movs	r3, #16
 800d9e0:	e7b0      	b.n	800d944 <_printf_i+0xfc>
 800d9e2:	6823      	ldr	r3, [r4, #0]
 800d9e4:	f043 0320 	orr.w	r3, r3, #32
 800d9e8:	6023      	str	r3, [r4, #0]
 800d9ea:	2378      	movs	r3, #120	; 0x78
 800d9ec:	4828      	ldr	r0, [pc, #160]	; (800da90 <_printf_i+0x248>)
 800d9ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d9f2:	e7e3      	b.n	800d9bc <_printf_i+0x174>
 800d9f4:	065e      	lsls	r6, r3, #25
 800d9f6:	bf48      	it	mi
 800d9f8:	b2ad      	uxthmi	r5, r5
 800d9fa:	e7e6      	b.n	800d9ca <_printf_i+0x182>
 800d9fc:	4616      	mov	r6, r2
 800d9fe:	e7bb      	b.n	800d978 <_printf_i+0x130>
 800da00:	680b      	ldr	r3, [r1, #0]
 800da02:	6826      	ldr	r6, [r4, #0]
 800da04:	6960      	ldr	r0, [r4, #20]
 800da06:	1d1d      	adds	r5, r3, #4
 800da08:	600d      	str	r5, [r1, #0]
 800da0a:	0635      	lsls	r5, r6, #24
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	d501      	bpl.n	800da14 <_printf_i+0x1cc>
 800da10:	6018      	str	r0, [r3, #0]
 800da12:	e002      	b.n	800da1a <_printf_i+0x1d2>
 800da14:	0671      	lsls	r1, r6, #25
 800da16:	d5fb      	bpl.n	800da10 <_printf_i+0x1c8>
 800da18:	8018      	strh	r0, [r3, #0]
 800da1a:	2300      	movs	r3, #0
 800da1c:	6123      	str	r3, [r4, #16]
 800da1e:	4616      	mov	r6, r2
 800da20:	e7ba      	b.n	800d998 <_printf_i+0x150>
 800da22:	680b      	ldr	r3, [r1, #0]
 800da24:	1d1a      	adds	r2, r3, #4
 800da26:	600a      	str	r2, [r1, #0]
 800da28:	681e      	ldr	r6, [r3, #0]
 800da2a:	6862      	ldr	r2, [r4, #4]
 800da2c:	2100      	movs	r1, #0
 800da2e:	4630      	mov	r0, r6
 800da30:	f7f2 fbd6 	bl	80001e0 <memchr>
 800da34:	b108      	cbz	r0, 800da3a <_printf_i+0x1f2>
 800da36:	1b80      	subs	r0, r0, r6
 800da38:	6060      	str	r0, [r4, #4]
 800da3a:	6863      	ldr	r3, [r4, #4]
 800da3c:	6123      	str	r3, [r4, #16]
 800da3e:	2300      	movs	r3, #0
 800da40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da44:	e7a8      	b.n	800d998 <_printf_i+0x150>
 800da46:	6923      	ldr	r3, [r4, #16]
 800da48:	4632      	mov	r2, r6
 800da4a:	4649      	mov	r1, r9
 800da4c:	4640      	mov	r0, r8
 800da4e:	47d0      	blx	sl
 800da50:	3001      	adds	r0, #1
 800da52:	d0ab      	beq.n	800d9ac <_printf_i+0x164>
 800da54:	6823      	ldr	r3, [r4, #0]
 800da56:	079b      	lsls	r3, r3, #30
 800da58:	d413      	bmi.n	800da82 <_printf_i+0x23a>
 800da5a:	68e0      	ldr	r0, [r4, #12]
 800da5c:	9b03      	ldr	r3, [sp, #12]
 800da5e:	4298      	cmp	r0, r3
 800da60:	bfb8      	it	lt
 800da62:	4618      	movlt	r0, r3
 800da64:	e7a4      	b.n	800d9b0 <_printf_i+0x168>
 800da66:	2301      	movs	r3, #1
 800da68:	4632      	mov	r2, r6
 800da6a:	4649      	mov	r1, r9
 800da6c:	4640      	mov	r0, r8
 800da6e:	47d0      	blx	sl
 800da70:	3001      	adds	r0, #1
 800da72:	d09b      	beq.n	800d9ac <_printf_i+0x164>
 800da74:	3501      	adds	r5, #1
 800da76:	68e3      	ldr	r3, [r4, #12]
 800da78:	9903      	ldr	r1, [sp, #12]
 800da7a:	1a5b      	subs	r3, r3, r1
 800da7c:	42ab      	cmp	r3, r5
 800da7e:	dcf2      	bgt.n	800da66 <_printf_i+0x21e>
 800da80:	e7eb      	b.n	800da5a <_printf_i+0x212>
 800da82:	2500      	movs	r5, #0
 800da84:	f104 0619 	add.w	r6, r4, #25
 800da88:	e7f5      	b.n	800da76 <_printf_i+0x22e>
 800da8a:	bf00      	nop
 800da8c:	0800dca9 	.word	0x0800dca9
 800da90:	0800dcba 	.word	0x0800dcba

0800da94 <memmove>:
 800da94:	4288      	cmp	r0, r1
 800da96:	b510      	push	{r4, lr}
 800da98:	eb01 0402 	add.w	r4, r1, r2
 800da9c:	d902      	bls.n	800daa4 <memmove+0x10>
 800da9e:	4284      	cmp	r4, r0
 800daa0:	4623      	mov	r3, r4
 800daa2:	d807      	bhi.n	800dab4 <memmove+0x20>
 800daa4:	1e43      	subs	r3, r0, #1
 800daa6:	42a1      	cmp	r1, r4
 800daa8:	d008      	beq.n	800dabc <memmove+0x28>
 800daaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800daae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dab2:	e7f8      	b.n	800daa6 <memmove+0x12>
 800dab4:	4402      	add	r2, r0
 800dab6:	4601      	mov	r1, r0
 800dab8:	428a      	cmp	r2, r1
 800daba:	d100      	bne.n	800dabe <memmove+0x2a>
 800dabc:	bd10      	pop	{r4, pc}
 800dabe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dac2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dac6:	e7f7      	b.n	800dab8 <memmove+0x24>

0800dac8 <_realloc_r>:
 800dac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daca:	4607      	mov	r7, r0
 800dacc:	4614      	mov	r4, r2
 800dace:	460e      	mov	r6, r1
 800dad0:	b921      	cbnz	r1, 800dadc <_realloc_r+0x14>
 800dad2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dad6:	4611      	mov	r1, r2
 800dad8:	f7ff bbec 	b.w	800d2b4 <_malloc_r>
 800dadc:	b922      	cbnz	r2, 800dae8 <_realloc_r+0x20>
 800dade:	f7ff fb99 	bl	800d214 <_free_r>
 800dae2:	4625      	mov	r5, r4
 800dae4:	4628      	mov	r0, r5
 800dae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dae8:	f000 f814 	bl	800db14 <_malloc_usable_size_r>
 800daec:	42a0      	cmp	r0, r4
 800daee:	d20f      	bcs.n	800db10 <_realloc_r+0x48>
 800daf0:	4621      	mov	r1, r4
 800daf2:	4638      	mov	r0, r7
 800daf4:	f7ff fbde 	bl	800d2b4 <_malloc_r>
 800daf8:	4605      	mov	r5, r0
 800dafa:	2800      	cmp	r0, #0
 800dafc:	d0f2      	beq.n	800dae4 <_realloc_r+0x1c>
 800dafe:	4631      	mov	r1, r6
 800db00:	4622      	mov	r2, r4
 800db02:	f7ff fb71 	bl	800d1e8 <memcpy>
 800db06:	4631      	mov	r1, r6
 800db08:	4638      	mov	r0, r7
 800db0a:	f7ff fb83 	bl	800d214 <_free_r>
 800db0e:	e7e9      	b.n	800dae4 <_realloc_r+0x1c>
 800db10:	4635      	mov	r5, r6
 800db12:	e7e7      	b.n	800dae4 <_realloc_r+0x1c>

0800db14 <_malloc_usable_size_r>:
 800db14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db18:	1f18      	subs	r0, r3, #4
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	bfbc      	itt	lt
 800db1e:	580b      	ldrlt	r3, [r1, r0]
 800db20:	18c0      	addlt	r0, r0, r3
 800db22:	4770      	bx	lr

0800db24 <_init>:
 800db24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db26:	bf00      	nop
 800db28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db2a:	bc08      	pop	{r3}
 800db2c:	469e      	mov	lr, r3
 800db2e:	4770      	bx	lr

0800db30 <_fini>:
 800db30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db32:	bf00      	nop
 800db34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db36:	bc08      	pop	{r3}
 800db38:	469e      	mov	lr, r3
 800db3a:	4770      	bx	lr
