
RF21_VCU_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e3ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  0800e57c  0800e57c  0001e57c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e738  0800e738  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800e738  0800e738  0001e738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e740  0800e740  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e740  0800e740  0001e740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e744  0800e744  0001e744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800e748  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          00004b38  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004bcc  20004bcc  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00031ea0  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000060d3  00000000  00000000  00051f64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002198  00000000  00000000  00058038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001f88  00000000  00000000  0005a1d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a0de  00000000  00000000  0005c158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002b0e5  00000000  00000000  00086236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee880  00000000  00000000  000b131b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0019fb9b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000094ec  00000000  00000000  0019fbf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e564 	.word	0x0800e564

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800e564 	.word	0x0800e564

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295
 800089c:	f04f 30ff 	movne.w	r0, #4294967295
 80008a0:	f000 b96e 	b.w	8000b80 <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9d08      	ldr	r5, [sp, #32]
 80008c2:	4604      	mov	r4, r0
 80008c4:	468c      	mov	ip, r1
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	f040 8083 	bne.w	80009d2 <__udivmoddi4+0x116>
 80008cc:	428a      	cmp	r2, r1
 80008ce:	4617      	mov	r7, r2
 80008d0:	d947      	bls.n	8000962 <__udivmoddi4+0xa6>
 80008d2:	fab2 f282 	clz	r2, r2
 80008d6:	b142      	cbz	r2, 80008ea <__udivmoddi4+0x2e>
 80008d8:	f1c2 0020 	rsb	r0, r2, #32
 80008dc:	fa24 f000 	lsr.w	r0, r4, r0
 80008e0:	4091      	lsls	r1, r2
 80008e2:	4097      	lsls	r7, r2
 80008e4:	ea40 0c01 	orr.w	ip, r0, r1
 80008e8:	4094      	lsls	r4, r2
 80008ea:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008ee:	0c23      	lsrs	r3, r4, #16
 80008f0:	fbbc f6f8 	udiv	r6, ip, r8
 80008f4:	fa1f fe87 	uxth.w	lr, r7
 80008f8:	fb08 c116 	mls	r1, r8, r6, ip
 80008fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000900:	fb06 f10e 	mul.w	r1, r6, lr
 8000904:	4299      	cmp	r1, r3
 8000906:	d909      	bls.n	800091c <__udivmoddi4+0x60>
 8000908:	18fb      	adds	r3, r7, r3
 800090a:	f106 30ff 	add.w	r0, r6, #4294967295
 800090e:	f080 8119 	bcs.w	8000b44 <__udivmoddi4+0x288>
 8000912:	4299      	cmp	r1, r3
 8000914:	f240 8116 	bls.w	8000b44 <__udivmoddi4+0x288>
 8000918:	3e02      	subs	r6, #2
 800091a:	443b      	add	r3, r7
 800091c:	1a5b      	subs	r3, r3, r1
 800091e:	b2a4      	uxth	r4, r4
 8000920:	fbb3 f0f8 	udiv	r0, r3, r8
 8000924:	fb08 3310 	mls	r3, r8, r0, r3
 8000928:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800092c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000930:	45a6      	cmp	lr, r4
 8000932:	d909      	bls.n	8000948 <__udivmoddi4+0x8c>
 8000934:	193c      	adds	r4, r7, r4
 8000936:	f100 33ff 	add.w	r3, r0, #4294967295
 800093a:	f080 8105 	bcs.w	8000b48 <__udivmoddi4+0x28c>
 800093e:	45a6      	cmp	lr, r4
 8000940:	f240 8102 	bls.w	8000b48 <__udivmoddi4+0x28c>
 8000944:	3802      	subs	r0, #2
 8000946:	443c      	add	r4, r7
 8000948:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800094c:	eba4 040e 	sub.w	r4, r4, lr
 8000950:	2600      	movs	r6, #0
 8000952:	b11d      	cbz	r5, 800095c <__udivmoddi4+0xa0>
 8000954:	40d4      	lsrs	r4, r2
 8000956:	2300      	movs	r3, #0
 8000958:	e9c5 4300 	strd	r4, r3, [r5]
 800095c:	4631      	mov	r1, r6
 800095e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000962:	b902      	cbnz	r2, 8000966 <__udivmoddi4+0xaa>
 8000964:	deff      	udf	#255	; 0xff
 8000966:	fab2 f282 	clz	r2, r2
 800096a:	2a00      	cmp	r2, #0
 800096c:	d150      	bne.n	8000a10 <__udivmoddi4+0x154>
 800096e:	1bcb      	subs	r3, r1, r7
 8000970:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000974:	fa1f f887 	uxth.w	r8, r7
 8000978:	2601      	movs	r6, #1
 800097a:	fbb3 fcfe 	udiv	ip, r3, lr
 800097e:	0c21      	lsrs	r1, r4, #16
 8000980:	fb0e 331c 	mls	r3, lr, ip, r3
 8000984:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000988:	fb08 f30c 	mul.w	r3, r8, ip
 800098c:	428b      	cmp	r3, r1
 800098e:	d907      	bls.n	80009a0 <__udivmoddi4+0xe4>
 8000990:	1879      	adds	r1, r7, r1
 8000992:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000996:	d202      	bcs.n	800099e <__udivmoddi4+0xe2>
 8000998:	428b      	cmp	r3, r1
 800099a:	f200 80e9 	bhi.w	8000b70 <__udivmoddi4+0x2b4>
 800099e:	4684      	mov	ip, r0
 80009a0:	1ac9      	subs	r1, r1, r3
 80009a2:	b2a3      	uxth	r3, r4
 80009a4:	fbb1 f0fe 	udiv	r0, r1, lr
 80009a8:	fb0e 1110 	mls	r1, lr, r0, r1
 80009ac:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80009b0:	fb08 f800 	mul.w	r8, r8, r0
 80009b4:	45a0      	cmp	r8, r4
 80009b6:	d907      	bls.n	80009c8 <__udivmoddi4+0x10c>
 80009b8:	193c      	adds	r4, r7, r4
 80009ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80009be:	d202      	bcs.n	80009c6 <__udivmoddi4+0x10a>
 80009c0:	45a0      	cmp	r8, r4
 80009c2:	f200 80d9 	bhi.w	8000b78 <__udivmoddi4+0x2bc>
 80009c6:	4618      	mov	r0, r3
 80009c8:	eba4 0408 	sub.w	r4, r4, r8
 80009cc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80009d0:	e7bf      	b.n	8000952 <__udivmoddi4+0x96>
 80009d2:	428b      	cmp	r3, r1
 80009d4:	d909      	bls.n	80009ea <__udivmoddi4+0x12e>
 80009d6:	2d00      	cmp	r5, #0
 80009d8:	f000 80b1 	beq.w	8000b3e <__udivmoddi4+0x282>
 80009dc:	2600      	movs	r6, #0
 80009de:	e9c5 0100 	strd	r0, r1, [r5]
 80009e2:	4630      	mov	r0, r6
 80009e4:	4631      	mov	r1, r6
 80009e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ea:	fab3 f683 	clz	r6, r3
 80009ee:	2e00      	cmp	r6, #0
 80009f0:	d14a      	bne.n	8000a88 <__udivmoddi4+0x1cc>
 80009f2:	428b      	cmp	r3, r1
 80009f4:	d302      	bcc.n	80009fc <__udivmoddi4+0x140>
 80009f6:	4282      	cmp	r2, r0
 80009f8:	f200 80b8 	bhi.w	8000b6c <__udivmoddi4+0x2b0>
 80009fc:	1a84      	subs	r4, r0, r2
 80009fe:	eb61 0103 	sbc.w	r1, r1, r3
 8000a02:	2001      	movs	r0, #1
 8000a04:	468c      	mov	ip, r1
 8000a06:	2d00      	cmp	r5, #0
 8000a08:	d0a8      	beq.n	800095c <__udivmoddi4+0xa0>
 8000a0a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a0e:	e7a5      	b.n	800095c <__udivmoddi4+0xa0>
 8000a10:	f1c2 0320 	rsb	r3, r2, #32
 8000a14:	fa20 f603 	lsr.w	r6, r0, r3
 8000a18:	4097      	lsls	r7, r2
 8000a1a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a1e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a22:	40d9      	lsrs	r1, r3
 8000a24:	4330      	orrs	r0, r6
 8000a26:	0c03      	lsrs	r3, r0, #16
 8000a28:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a2c:	fa1f f887 	uxth.w	r8, r7
 8000a30:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a38:	fb06 f108 	mul.w	r1, r6, r8
 8000a3c:	4299      	cmp	r1, r3
 8000a3e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a42:	d909      	bls.n	8000a58 <__udivmoddi4+0x19c>
 8000a44:	18fb      	adds	r3, r7, r3
 8000a46:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a4a:	f080 808d 	bcs.w	8000b68 <__udivmoddi4+0x2ac>
 8000a4e:	4299      	cmp	r1, r3
 8000a50:	f240 808a 	bls.w	8000b68 <__udivmoddi4+0x2ac>
 8000a54:	3e02      	subs	r6, #2
 8000a56:	443b      	add	r3, r7
 8000a58:	1a5b      	subs	r3, r3, r1
 8000a5a:	b281      	uxth	r1, r0
 8000a5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a68:	fb00 f308 	mul.w	r3, r0, r8
 8000a6c:	428b      	cmp	r3, r1
 8000a6e:	d907      	bls.n	8000a80 <__udivmoddi4+0x1c4>
 8000a70:	1879      	adds	r1, r7, r1
 8000a72:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a76:	d273      	bcs.n	8000b60 <__udivmoddi4+0x2a4>
 8000a78:	428b      	cmp	r3, r1
 8000a7a:	d971      	bls.n	8000b60 <__udivmoddi4+0x2a4>
 8000a7c:	3802      	subs	r0, #2
 8000a7e:	4439      	add	r1, r7
 8000a80:	1acb      	subs	r3, r1, r3
 8000a82:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a86:	e778      	b.n	800097a <__udivmoddi4+0xbe>
 8000a88:	f1c6 0c20 	rsb	ip, r6, #32
 8000a8c:	fa03 f406 	lsl.w	r4, r3, r6
 8000a90:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a94:	431c      	orrs	r4, r3
 8000a96:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000a9e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000aa2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000aa6:	431f      	orrs	r7, r3
 8000aa8:	0c3b      	lsrs	r3, r7, #16
 8000aaa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000aae:	fa1f f884 	uxth.w	r8, r4
 8000ab2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ab6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000aba:	fb09 fa08 	mul.w	sl, r9, r8
 8000abe:	458a      	cmp	sl, r1
 8000ac0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ac4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ac8:	d908      	bls.n	8000adc <__udivmoddi4+0x220>
 8000aca:	1861      	adds	r1, r4, r1
 8000acc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ad0:	d248      	bcs.n	8000b64 <__udivmoddi4+0x2a8>
 8000ad2:	458a      	cmp	sl, r1
 8000ad4:	d946      	bls.n	8000b64 <__udivmoddi4+0x2a8>
 8000ad6:	f1a9 0902 	sub.w	r9, r9, #2
 8000ada:	4421      	add	r1, r4
 8000adc:	eba1 010a 	sub.w	r1, r1, sl
 8000ae0:	b2bf      	uxth	r7, r7
 8000ae2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ae6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000aea:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000aee:	fb00 f808 	mul.w	r8, r0, r8
 8000af2:	45b8      	cmp	r8, r7
 8000af4:	d907      	bls.n	8000b06 <__udivmoddi4+0x24a>
 8000af6:	19e7      	adds	r7, r4, r7
 8000af8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000afc:	d22e      	bcs.n	8000b5c <__udivmoddi4+0x2a0>
 8000afe:	45b8      	cmp	r8, r7
 8000b00:	d92c      	bls.n	8000b5c <__udivmoddi4+0x2a0>
 8000b02:	3802      	subs	r0, #2
 8000b04:	4427      	add	r7, r4
 8000b06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b0a:	eba7 0708 	sub.w	r7, r7, r8
 8000b0e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b12:	454f      	cmp	r7, r9
 8000b14:	46c6      	mov	lr, r8
 8000b16:	4649      	mov	r1, r9
 8000b18:	d31a      	bcc.n	8000b50 <__udivmoddi4+0x294>
 8000b1a:	d017      	beq.n	8000b4c <__udivmoddi4+0x290>
 8000b1c:	b15d      	cbz	r5, 8000b36 <__udivmoddi4+0x27a>
 8000b1e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b22:	eb67 0701 	sbc.w	r7, r7, r1
 8000b26:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b2a:	40f2      	lsrs	r2, r6
 8000b2c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b30:	40f7      	lsrs	r7, r6
 8000b32:	e9c5 2700 	strd	r2, r7, [r5]
 8000b36:	2600      	movs	r6, #0
 8000b38:	4631      	mov	r1, r6
 8000b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3e:	462e      	mov	r6, r5
 8000b40:	4628      	mov	r0, r5
 8000b42:	e70b      	b.n	800095c <__udivmoddi4+0xa0>
 8000b44:	4606      	mov	r6, r0
 8000b46:	e6e9      	b.n	800091c <__udivmoddi4+0x60>
 8000b48:	4618      	mov	r0, r3
 8000b4a:	e6fd      	b.n	8000948 <__udivmoddi4+0x8c>
 8000b4c:	4543      	cmp	r3, r8
 8000b4e:	d2e5      	bcs.n	8000b1c <__udivmoddi4+0x260>
 8000b50:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b54:	eb69 0104 	sbc.w	r1, r9, r4
 8000b58:	3801      	subs	r0, #1
 8000b5a:	e7df      	b.n	8000b1c <__udivmoddi4+0x260>
 8000b5c:	4608      	mov	r0, r1
 8000b5e:	e7d2      	b.n	8000b06 <__udivmoddi4+0x24a>
 8000b60:	4660      	mov	r0, ip
 8000b62:	e78d      	b.n	8000a80 <__udivmoddi4+0x1c4>
 8000b64:	4681      	mov	r9, r0
 8000b66:	e7b9      	b.n	8000adc <__udivmoddi4+0x220>
 8000b68:	4666      	mov	r6, ip
 8000b6a:	e775      	b.n	8000a58 <__udivmoddi4+0x19c>
 8000b6c:	4630      	mov	r0, r6
 8000b6e:	e74a      	b.n	8000a06 <__udivmoddi4+0x14a>
 8000b70:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b74:	4439      	add	r1, r7
 8000b76:	e713      	b.n	80009a0 <__udivmoddi4+0xe4>
 8000b78:	3802      	subs	r0, #2
 8000b7a:	443c      	add	r4, r7
 8000b7c:	e724      	b.n	80009c8 <__udivmoddi4+0x10c>
 8000b7e:	bf00      	nop

08000b80 <__aeabi_idiv0>:
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop

08000b84 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	4a07      	ldr	r2, [pc, #28]	; (8000bb0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b94:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	4a06      	ldr	r2, [pc, #24]	; (8000bb4 <vApplicationGetIdleTaskMemory+0x30>)
 8000b9a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2280      	movs	r2, #128	; 0x80
 8000ba0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000ba2:	bf00      	nop
 8000ba4:	3714      	adds	r7, #20
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	200000b0 	.word	0x200000b0
 8000bb4:	20000164 	.word	0x20000164

08000bb8 <HAL_CAN_RxFifo0MsgPendingCallback>:
uint8_t TxData[8];
uint8_t RxData[8];

uint32_t TxMailbox;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]

	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8000bc0:	4b07      	ldr	r3, [pc, #28]	; (8000be0 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8000bc2:	4a08      	ldr	r2, [pc, #32]	; (8000be4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	f002 f828 	bl	8002c1c <HAL_CAN_GetRxMessage>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
		Error_Handler();
 8000bd2:	f000 fd15 	bl	8001600 <Error_Handler>
	}

}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20004330 	.word	0x20004330
 8000be4:	2000441c 	.word	0x2000441c

08000be8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000be8:	b5b0      	push	{r4, r5, r7, lr}
 8000bea:	b096      	sub	sp, #88	; 0x58
 8000bec:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000bee:	f001 f97d 	bl	8001eec <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000bf2:	f000 f893 	bl	8000d1c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000bf6:	f000 fb33 	bl	8001260 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000bfa:	f000 fa43 	bl	8001084 <MX_I2C1_Init>
	MX_I2S3_Init();
 8000bfe:	f000 fa6f 	bl	80010e0 <MX_I2S3_Init>
	MX_SPI1_Init();
 8000c02:	f000 fa9d 	bl	8001140 <MX_SPI1_Init>
	MX_DMA_Init();
 8000c06:	f000 fafb 	bl	8001200 <MX_DMA_Init>
	MX_ADC1_Init();
 8000c0a:	f000 f8f1 	bl	8000df0 <MX_ADC1_Init>
	MX_USART2_UART_Init();
 8000c0e:	f000 facd 	bl	80011ac <MX_USART2_UART_Init>
	MX_ADC2_Init();
 8000c12:	f000 f93f 	bl	8000e94 <MX_ADC2_Init>
	MX_ADC3_Init();
 8000c16:	f000 f98f 	bl	8000f38 <MX_ADC3_Init>
	MX_CAN1_Init();
 8000c1a:	f000 f9df 	bl	8000fdc <MX_CAN1_Init>
	/* USER CODE BEGIN 2 */
	HAL_ADC_Start_DMA(&hadc1, &appsVal[0], 1); //start the ADC for APPS 1 in DMA mode
 8000c1e:	2201      	movs	r2, #1
 8000c20:	4930      	ldr	r1, [pc, #192]	; (8000ce4 <main+0xfc>)
 8000c22:	4831      	ldr	r0, [pc, #196]	; (8000ce8 <main+0x100>)
 8000c24:	f001 fa0c 	bl	8002040 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc3, &bpsVal, 1); //start the ADC for Brake Pressure Sensor in DMA mode
 8000c28:	2201      	movs	r2, #1
 8000c2a:	4930      	ldr	r1, [pc, #192]	; (8000cec <main+0x104>)
 8000c2c:	4830      	ldr	r0, [pc, #192]	; (8000cf0 <main+0x108>)
 8000c2e:	f001 fa07 	bl	8002040 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, &appsVal[1], 1); //start the ADC for APPS 2 in DMA mode
 8000c32:	2201      	movs	r2, #1
 8000c34:	492f      	ldr	r1, [pc, #188]	; (8000cf4 <main+0x10c>)
 8000c36:	4830      	ldr	r0, [pc, #192]	; (8000cf8 <main+0x110>)
 8000c38:	f001 fa02 	bl	8002040 <HAL_ADC_Start_DMA>

	//Start the CAN module
	HAL_CAN_Start(&hcan1);
 8000c3c:	482f      	ldr	r0, [pc, #188]	; (8000cfc <main+0x114>)
 8000c3e:	f001 ffa9 	bl	8002b94 <HAL_CAN_Start>

	//Activate the CAN notification
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)
 8000c42:	2102      	movs	r1, #2
 8000c44:	482d      	ldr	r0, [pc, #180]	; (8000cfc <main+0x114>)
 8000c46:	f002 f8fb 	bl	8002e40 <HAL_CAN_ActivateNotification>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <main+0x6c>
			!= HAL_OK) {
		Error_Handler();
 8000c50:	f000 fcd6 	bl	8001600 <Error_Handler>
	}

	//Setting Required Data Values for CAN frame
	TxHeader.DLC = 2;	//data length in bytes
 8000c54:	4b2a      	ldr	r3, [pc, #168]	; (8000d00 <main+0x118>)
 8000c56:	2202      	movs	r2, #2
 8000c58:	611a      	str	r2, [r3, #16]
	TxHeader.IDE = CAN_ID_STD; //specify standard CAN ID
 8000c5a:	4b29      	ldr	r3, [pc, #164]	; (8000d00 <main+0x118>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8000c60:	4b27      	ldr	r3, [pc, #156]	; (8000d00 <main+0x118>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = 0x446;	//CAN ID of this device
 8000c66:	4b26      	ldr	r3, [pc, #152]	; (8000d00 <main+0x118>)
 8000c68:	f240 4246 	movw	r2, #1094	; 0x446
 8000c6c:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of ledTask */
	osThreadDef(ledTask, startLEDTask, osPriorityNormal, 0, 128);
 8000c6e:	4b25      	ldr	r3, [pc, #148]	; (8000d04 <main+0x11c>)
 8000c70:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000c74:	461d      	mov	r5, r3
 8000c76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c7a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	ledTaskHandle = osThreadCreate(osThread(ledTask), NULL);
 8000c82:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c86:	2100      	movs	r1, #0
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f00a fa2a 	bl	800b0e2 <osThreadCreate>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	4a1d      	ldr	r2, [pc, #116]	; (8000d08 <main+0x120>)
 8000c92:	6013      	str	r3, [r2, #0]

	/* definition and creation of uartTask */
	osThreadDef(uartTask, startUART_Task, osPriorityNormal, 0, 256);
 8000c94:	4b1d      	ldr	r3, [pc, #116]	; (8000d0c <main+0x124>)
 8000c96:	f107 0420 	add.w	r4, r7, #32
 8000c9a:	461d      	mov	r5, r3
 8000c9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ca0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ca4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	uartTaskHandle = osThreadCreate(osThread(uartTask), NULL);
 8000ca8:	f107 0320 	add.w	r3, r7, #32
 8000cac:	2100      	movs	r1, #0
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f00a fa17 	bl	800b0e2 <osThreadCreate>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	4a16      	ldr	r2, [pc, #88]	; (8000d10 <main+0x128>)
 8000cb8:	6013      	str	r3, [r2, #0]

	/* definition and creation of Torque_Command */
	osThreadDef(Torque_Command, startTorqueCommand, osPriorityRealtime, 0, 256);
 8000cba:	4b16      	ldr	r3, [pc, #88]	; (8000d14 <main+0x12c>)
 8000cbc:	1d3c      	adds	r4, r7, #4
 8000cbe:	461d      	mov	r5, r3
 8000cc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cc4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cc8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Torque_CommandHandle = osThreadCreate(osThread(Torque_Command), NULL);
 8000ccc:	1d3b      	adds	r3, r7, #4
 8000cce:	2100      	movs	r1, #0
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f00a fa06 	bl	800b0e2 <osThreadCreate>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	4a0f      	ldr	r2, [pc, #60]	; (8000d18 <main+0x130>)
 8000cda:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000cdc:	f00a f9fa 	bl	800b0d4 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000ce0:	e7fe      	b.n	8000ce0 <main+0xf8>
 8000ce2:	bf00      	nop
 8000ce4:	20004438 	.word	0x20004438
 8000ce8:	200041d0 	.word	0x200041d0
 8000cec:	200042c0 	.word	0x200042c0
 8000cf0:	20004218 	.word	0x20004218
 8000cf4:	2000443c 	.word	0x2000443c
 8000cf8:	200040cc 	.word	0x200040cc
 8000cfc:	200043dc 	.word	0x200043dc
 8000d00:	20004404 	.word	0x20004404
 8000d04:	0800e5a0 	.word	0x0800e5a0
 8000d08:	20004168 	.word	0x20004168
 8000d0c:	0800e5bc 	.word	0x0800e5bc
 8000d10:	200041cc 	.word	0x200041cc
 8000d14:	0800e5d8 	.word	0x0800e5d8
 8000d18:	200040c8 	.word	0x200040c8

08000d1c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b094      	sub	sp, #80	; 0x50
 8000d20:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000d22:	f107 0320 	add.w	r3, r7, #32
 8000d26:	2230      	movs	r2, #48	; 0x30
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f00c ff8a 	bl	800dc44 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000d30:	f107 030c 	add.w	r3, r7, #12
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000d40:	2300      	movs	r3, #0
 8000d42:	60bb      	str	r3, [r7, #8]
 8000d44:	4b28      	ldr	r3, [pc, #160]	; (8000de8 <SystemClock_Config+0xcc>)
 8000d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d48:	4a27      	ldr	r2, [pc, #156]	; (8000de8 <SystemClock_Config+0xcc>)
 8000d4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d50:	4b25      	ldr	r3, [pc, #148]	; (8000de8 <SystemClock_Config+0xcc>)
 8000d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d58:	60bb      	str	r3, [r7, #8]
 8000d5a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	4b22      	ldr	r3, [pc, #136]	; (8000dec <SystemClock_Config+0xd0>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a21      	ldr	r2, [pc, #132]	; (8000dec <SystemClock_Config+0xd0>)
 8000d66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d6a:	6013      	str	r3, [r2, #0]
 8000d6c:	4b1f      	ldr	r3, [pc, #124]	; (8000dec <SystemClock_Config+0xd0>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d74:	607b      	str	r3, [r7, #4]
 8000d76:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d82:	2302      	movs	r3, #2
 8000d84:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000d8c:	2308      	movs	r3, #8
 8000d8e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000d90:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000d94:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d96:	2302      	movs	r3, #2
 8000d98:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d9a:	2307      	movs	r3, #7
 8000d9c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000d9e:	f107 0320 	add.w	r3, r7, #32
 8000da2:	4618      	mov	r0, r3
 8000da4:	f005 fc30 	bl	8006608 <HAL_RCC_OscConfig>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <SystemClock_Config+0x96>
		Error_Handler();
 8000dae:	f000 fc27 	bl	8001600 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000db2:	230f      	movs	r3, #15
 8000db4:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000db6:	2302      	movs	r3, #2
 8000db8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000dbe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000dc2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000dc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dc8:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000dca:	f107 030c 	add.w	r3, r7, #12
 8000dce:	2105      	movs	r1, #5
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f005 fe91 	bl	8006af8 <HAL_RCC_ClockConfig>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <SystemClock_Config+0xc4>
		Error_Handler();
 8000ddc:	f000 fc10 	bl	8001600 <Error_Handler>
	}
}
 8000de0:	bf00      	nop
 8000de2:	3750      	adds	r7, #80	; 0x50
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40023800 	.word	0x40023800
 8000dec:	40007000 	.word	0x40007000

08000df0 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000df6:	463b      	mov	r3, r7
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000e02:	4b21      	ldr	r3, [pc, #132]	; (8000e88 <MX_ADC1_Init+0x98>)
 8000e04:	4a21      	ldr	r2, [pc, #132]	; (8000e8c <MX_ADC1_Init+0x9c>)
 8000e06:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e08:	4b1f      	ldr	r3, [pc, #124]	; (8000e88 <MX_ADC1_Init+0x98>)
 8000e0a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e0e:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e10:	4b1d      	ldr	r3, [pc, #116]	; (8000e88 <MX_ADC1_Init+0x98>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8000e16:	4b1c      	ldr	r3, [pc, #112]	; (8000e88 <MX_ADC1_Init+0x98>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000e1c:	4b1a      	ldr	r3, [pc, #104]	; (8000e88 <MX_ADC1_Init+0x98>)
 8000e1e:	2201      	movs	r2, #1
 8000e20:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e22:	4b19      	ldr	r3, [pc, #100]	; (8000e88 <MX_ADC1_Init+0x98>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e2a:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <MX_ADC1_Init+0x98>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e30:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <MX_ADC1_Init+0x98>)
 8000e32:	4a17      	ldr	r2, [pc, #92]	; (8000e90 <MX_ADC1_Init+0xa0>)
 8000e34:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e36:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <MX_ADC1_Init+0x98>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8000e3c:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <MX_ADC1_Init+0x98>)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e42:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <MX_ADC1_Init+0x98>)
 8000e44:	2201      	movs	r2, #1
 8000e46:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e4a:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <MX_ADC1_Init+0x98>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000e50:	480d      	ldr	r0, [pc, #52]	; (8000e88 <MX_ADC1_Init+0x98>)
 8000e52:	f001 f8b1 	bl	8001fb8 <HAL_ADC_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_ADC1_Init+0x70>
		Error_Handler();
 8000e5c:	f000 fbd0 	bl	8001600 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8000e60:	2301      	movs	r3, #1
 8000e62:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000e64:	2301      	movs	r3, #1
 8000e66:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000e6c:	463b      	mov	r3, r7
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4805      	ldr	r0, [pc, #20]	; (8000e88 <MX_ADC1_Init+0x98>)
 8000e72:	f001 fa13 	bl	800229c <HAL_ADC_ConfigChannel>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_ADC1_Init+0x90>
		Error_Handler();
 8000e7c:	f000 fbc0 	bl	8001600 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000e80:	bf00      	nop
 8000e82:	3710      	adds	r7, #16
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	200041d0 	.word	0x200041d0
 8000e8c:	40012000 	.word	0x40012000
 8000e90:	0f000001 	.word	0x0f000001

08000e94 <MX_ADC2_Init>:
/**
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC2_Init 1 */

	/* USER CODE END ADC2_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc2.Instance = ADC2;
 8000ea6:	4b21      	ldr	r3, [pc, #132]	; (8000f2c <MX_ADC2_Init+0x98>)
 8000ea8:	4a21      	ldr	r2, [pc, #132]	; (8000f30 <MX_ADC2_Init+0x9c>)
 8000eaa:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000eac:	4b1f      	ldr	r3, [pc, #124]	; (8000f2c <MX_ADC2_Init+0x98>)
 8000eae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000eb2:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000eb4:	4b1d      	ldr	r3, [pc, #116]	; (8000f2c <MX_ADC2_Init+0x98>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
	hadc2.Init.ScanConvMode = DISABLE;
 8000eba:	4b1c      	ldr	r3, [pc, #112]	; (8000f2c <MX_ADC2_Init+0x98>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	611a      	str	r2, [r3, #16]
	hadc2.Init.ContinuousConvMode = ENABLE;
 8000ec0:	4b1a      	ldr	r3, [pc, #104]	; (8000f2c <MX_ADC2_Init+0x98>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	761a      	strb	r2, [r3, #24]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000ec6:	4b19      	ldr	r3, [pc, #100]	; (8000f2c <MX_ADC2_Init+0x98>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ece:	4b17      	ldr	r3, [pc, #92]	; (8000f2c <MX_ADC2_Init+0x98>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ed4:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <MX_ADC2_Init+0x98>)
 8000ed6:	4a17      	ldr	r2, [pc, #92]	; (8000f34 <MX_ADC2_Init+0xa0>)
 8000ed8:	629a      	str	r2, [r3, #40]	; 0x28
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eda:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <MX_ADC2_Init+0x98>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	60da      	str	r2, [r3, #12]
	hadc2.Init.NbrOfConversion = 1;
 8000ee0:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <MX_ADC2_Init+0x98>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	61da      	str	r2, [r3, #28]
	hadc2.Init.DMAContinuousRequests = ENABLE;
 8000ee6:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <MX_ADC2_Init+0x98>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eee:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <MX_ADC2_Init+0x98>)
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 8000ef4:	480d      	ldr	r0, [pc, #52]	; (8000f2c <MX_ADC2_Init+0x98>)
 8000ef6:	f001 f85f 	bl	8001fb8 <HAL_ADC_Init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_ADC2_Init+0x70>
		Error_Handler();
 8000f00:	f000 fb7e 	bl	8001600 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8000f04:	2303      	movs	r3, #3
 8000f06:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8000f10:	463b      	mov	r3, r7
 8000f12:	4619      	mov	r1, r3
 8000f14:	4805      	ldr	r0, [pc, #20]	; (8000f2c <MX_ADC2_Init+0x98>)
 8000f16:	f001 f9c1 	bl	800229c <HAL_ADC_ConfigChannel>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_ADC2_Init+0x90>
		Error_Handler();
 8000f20:	f000 fb6e 	bl	8001600 <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 8000f24:	bf00      	nop
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	200040cc 	.word	0x200040cc
 8000f30:	40012100 	.word	0x40012100
 8000f34:	0f000001 	.word	0x0f000001

08000f38 <MX_ADC3_Init>:
/**
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000f3e:	463b      	mov	r3, r7
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC3_Init 1 */

	/* USER CODE END ADC3_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc3.Instance = ADC3;
 8000f4a:	4b21      	ldr	r3, [pc, #132]	; (8000fd0 <MX_ADC3_Init+0x98>)
 8000f4c:	4a21      	ldr	r2, [pc, #132]	; (8000fd4 <MX_ADC3_Init+0x9c>)
 8000f4e:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f50:	4b1f      	ldr	r3, [pc, #124]	; (8000fd0 <MX_ADC3_Init+0x98>)
 8000f52:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f56:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000f58:	4b1d      	ldr	r3, [pc, #116]	; (8000fd0 <MX_ADC3_Init+0x98>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = DISABLE;
 8000f5e:	4b1c      	ldr	r3, [pc, #112]	; (8000fd0 <MX_ADC3_Init+0x98>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = ENABLE;
 8000f64:	4b1a      	ldr	r3, [pc, #104]	; (8000fd0 <MX_ADC3_Init+0x98>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	761a      	strb	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000f6a:	4b19      	ldr	r3, [pc, #100]	; (8000fd0 <MX_ADC3_Init+0x98>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f72:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <MX_ADC3_Init+0x98>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f78:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <MX_ADC3_Init+0x98>)
 8000f7a:	4a17      	ldr	r2, [pc, #92]	; (8000fd8 <MX_ADC3_Init+0xa0>)
 8000f7c:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f7e:	4b14      	ldr	r3, [pc, #80]	; (8000fd0 <MX_ADC3_Init+0x98>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 8000f84:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <MX_ADC3_Init+0x98>)
 8000f86:	2201      	movs	r2, #1
 8000f88:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = ENABLE;
 8000f8a:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <MX_ADC3_Init+0x98>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f92:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <MX_ADC3_Init+0x98>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 8000f98:	480d      	ldr	r0, [pc, #52]	; (8000fd0 <MX_ADC3_Init+0x98>)
 8000f9a:	f001 f80d 	bl	8001fb8 <HAL_ADC_Init>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_ADC3_Init+0x70>
		Error_Handler();
 8000fa4:	f000 fb2c 	bl	8001600 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_12;
 8000fa8:	230c      	movs	r3, #12
 8000faa:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000fac:	2301      	movs	r3, #1
 8000fae:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8000fb4:	463b      	mov	r3, r7
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4805      	ldr	r0, [pc, #20]	; (8000fd0 <MX_ADC3_Init+0x98>)
 8000fba:	f001 f96f 	bl	800229c <HAL_ADC_ConfigChannel>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_ADC3_Init+0x90>
		Error_Handler();
 8000fc4:	f000 fb1c 	bl	8001600 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 8000fc8:	bf00      	nop
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20004218 	.word	0x20004218
 8000fd4:	40012200 	.word	0x40012200
 8000fd8:	0f000001 	.word	0x0f000001

08000fdc <MX_CAN1_Init>:
/**
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08a      	sub	sp, #40	; 0x28
 8000fe0:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 8000fe2:	4b26      	ldr	r3, [pc, #152]	; (800107c <MX_CAN1_Init+0xa0>)
 8000fe4:	4a26      	ldr	r2, [pc, #152]	; (8001080 <MX_CAN1_Init+0xa4>)
 8000fe6:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 14;
 8000fe8:	4b24      	ldr	r3, [pc, #144]	; (800107c <MX_CAN1_Init+0xa0>)
 8000fea:	220e      	movs	r2, #14
 8000fec:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000fee:	4b23      	ldr	r3, [pc, #140]	; (800107c <MX_CAN1_Init+0xa0>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ff4:	4b21      	ldr	r3, [pc, #132]	; (800107c <MX_CAN1_Init+0xa0>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000ffa:	4b20      	ldr	r3, [pc, #128]	; (800107c <MX_CAN1_Init+0xa0>)
 8000ffc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001000:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001002:	4b1e      	ldr	r3, [pc, #120]	; (800107c <MX_CAN1_Init+0xa0>)
 8001004:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001008:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 800100a:	4b1c      	ldr	r3, [pc, #112]	; (800107c <MX_CAN1_Init+0xa0>)
 800100c:	2200      	movs	r2, #0
 800100e:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8001010:	4b1a      	ldr	r3, [pc, #104]	; (800107c <MX_CAN1_Init+0xa0>)
 8001012:	2200      	movs	r2, #0
 8001014:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8001016:	4b19      	ldr	r3, [pc, #100]	; (800107c <MX_CAN1_Init+0xa0>)
 8001018:	2200      	movs	r2, #0
 800101a:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 800101c:	4b17      	ldr	r3, [pc, #92]	; (800107c <MX_CAN1_Init+0xa0>)
 800101e:	2200      	movs	r2, #0
 8001020:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001022:	4b16      	ldr	r3, [pc, #88]	; (800107c <MX_CAN1_Init+0xa0>)
 8001024:	2200      	movs	r2, #0
 8001026:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8001028:	4b14      	ldr	r3, [pc, #80]	; (800107c <MX_CAN1_Init+0xa0>)
 800102a:	2200      	movs	r2, #0
 800102c:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 800102e:	4813      	ldr	r0, [pc, #76]	; (800107c <MX_CAN1_Init+0xa0>)
 8001030:	f001 fbd4 	bl	80027dc <HAL_CAN_Init>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_CAN1_Init+0x62>
		Error_Handler();
 800103a:	f000 fae1 	bl	8001600 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */
	CAN_FilterTypeDef canfilterconfig;
	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 800103e:	2301      	movs	r3, #1
 8001040:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 10;
 8001042:	230a      	movs	r3, #10
 8001044:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001046:	2300      	movs	r3, #0
 8001048:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0x446 << 5;
 800104a:	f648 03c0 	movw	r3, #35008	; 0x88c0
 800104e:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0x446 << 5;
 8001054:	f648 03c0 	movw	r3, #35008	; 0x88c0
 8001058:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800105e:	2300      	movs	r3, #0
 8001060:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001062:	2301      	movs	r3, #1
 8001064:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 20; // how many filters to assign to the CAN1 (master can)
 8001066:	2314      	movs	r3, #20
 8001068:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 800106a:	463b      	mov	r3, r7
 800106c:	4619      	mov	r1, r3
 800106e:	4803      	ldr	r0, [pc, #12]	; (800107c <MX_CAN1_Init+0xa0>)
 8001070:	f001 fcb0 	bl	80029d4 <HAL_CAN_ConfigFilter>
	/* USER CODE END CAN1_Init 2 */

}
 8001074:	bf00      	nop
 8001076:	3728      	adds	r7, #40	; 0x28
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	200043dc 	.word	0x200043dc
 8001080:	40006400 	.word	0x40006400

08001084 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001088:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <MX_I2C1_Init+0x50>)
 800108a:	4a13      	ldr	r2, [pc, #76]	; (80010d8 <MX_I2C1_Init+0x54>)
 800108c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800108e:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <MX_I2C1_Init+0x50>)
 8001090:	4a12      	ldr	r2, [pc, #72]	; (80010dc <MX_I2C1_Init+0x58>)
 8001092:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001094:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <MX_I2C1_Init+0x50>)
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800109a:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <MX_I2C1_Init+0x50>)
 800109c:	2200      	movs	r2, #0
 800109e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <MX_I2C1_Init+0x50>)
 80010a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010a6:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010a8:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <MX_I2C1_Init+0x50>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <MX_I2C1_Init+0x50>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010b4:	4b07      	ldr	r3, [pc, #28]	; (80010d4 <MX_I2C1_Init+0x50>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <MX_I2C1_Init+0x50>)
 80010bc:	2200      	movs	r2, #0
 80010be:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80010c0:	4804      	ldr	r0, [pc, #16]	; (80010d4 <MX_I2C1_Init+0x50>)
 80010c2:	f004 fcbd 	bl	8005a40 <HAL_I2C_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80010cc:	f000 fa98 	bl	8001600 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20004114 	.word	0x20004114
 80010d8:	40005400 	.word	0x40005400
 80010dc:	000186a0 	.word	0x000186a0

080010e0 <MX_I2S3_Init>:
/**
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S3_Init(void) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
	/* USER CODE END I2S3_Init 0 */

	/* USER CODE BEGIN I2S3_Init 1 */

	/* USER CODE END I2S3_Init 1 */
	hi2s3.Instance = SPI3;
 80010e4:	4b13      	ldr	r3, [pc, #76]	; (8001134 <MX_I2S3_Init+0x54>)
 80010e6:	4a14      	ldr	r2, [pc, #80]	; (8001138 <MX_I2S3_Init+0x58>)
 80010e8:	601a      	str	r2, [r3, #0]
	hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80010ea:	4b12      	ldr	r3, [pc, #72]	; (8001134 <MX_I2S3_Init+0x54>)
 80010ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010f0:	605a      	str	r2, [r3, #4]
	hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80010f2:	4b10      	ldr	r3, [pc, #64]	; (8001134 <MX_I2S3_Init+0x54>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
	hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80010f8:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <MX_I2S3_Init+0x54>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	60da      	str	r2, [r3, #12]
	hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80010fe:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <MX_I2S3_Init+0x54>)
 8001100:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001104:	611a      	str	r2, [r3, #16]
	hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001106:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <MX_I2S3_Init+0x54>)
 8001108:	4a0c      	ldr	r2, [pc, #48]	; (800113c <MX_I2S3_Init+0x5c>)
 800110a:	615a      	str	r2, [r3, #20]
	hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800110c:	4b09      	ldr	r3, [pc, #36]	; (8001134 <MX_I2S3_Init+0x54>)
 800110e:	2200      	movs	r2, #0
 8001110:	619a      	str	r2, [r3, #24]
	hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001112:	4b08      	ldr	r3, [pc, #32]	; (8001134 <MX_I2S3_Init+0x54>)
 8001114:	2200      	movs	r2, #0
 8001116:	61da      	str	r2, [r3, #28]
	hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <MX_I2S3_Init+0x54>)
 800111a:	2200      	movs	r2, #0
 800111c:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s3) != HAL_OK) {
 800111e:	4805      	ldr	r0, [pc, #20]	; (8001134 <MX_I2S3_Init+0x54>)
 8001120:	f004 fdd2 	bl	8005cc8 <HAL_I2S_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_I2S3_Init+0x4e>
		Error_Handler();
 800112a:	f000 fa69 	bl	8001600 <Error_Handler>
	}
	/* USER CODE BEGIN I2S3_Init 2 */

	/* USER CODE END I2S3_Init 2 */

}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20004440 	.word	0x20004440
 8001138:	40003c00 	.word	0x40003c00
 800113c:	00017700 	.word	0x00017700

08001140 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001144:	4b17      	ldr	r3, [pc, #92]	; (80011a4 <MX_SPI1_Init+0x64>)
 8001146:	4a18      	ldr	r2, [pc, #96]	; (80011a8 <MX_SPI1_Init+0x68>)
 8001148:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800114a:	4b16      	ldr	r3, [pc, #88]	; (80011a4 <MX_SPI1_Init+0x64>)
 800114c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001150:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001152:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <MX_SPI1_Init+0x64>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001158:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <MX_SPI1_Init+0x64>)
 800115a:	2200      	movs	r2, #0
 800115c:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800115e:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <MX_SPI1_Init+0x64>)
 8001160:	2200      	movs	r2, #0
 8001162:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001164:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <MX_SPI1_Init+0x64>)
 8001166:	2200      	movs	r2, #0
 8001168:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800116a:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <MX_SPI1_Init+0x64>)
 800116c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001170:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001172:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <MX_SPI1_Init+0x64>)
 8001174:	2200      	movs	r2, #0
 8001176:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001178:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <MX_SPI1_Init+0x64>)
 800117a:	2200      	movs	r2, #0
 800117c:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800117e:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <MX_SPI1_Init+0x64>)
 8001180:	2200      	movs	r2, #0
 8001182:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001184:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <MX_SPI1_Init+0x64>)
 8001186:	2200      	movs	r2, #0
 8001188:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800118a:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <MX_SPI1_Init+0x64>)
 800118c:	220a      	movs	r2, #10
 800118e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001190:	4804      	ldr	r0, [pc, #16]	; (80011a4 <MX_SPI1_Init+0x64>)
 8001192:	f006 f81f 	bl	80071d4 <HAL_SPI_Init>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_SPI1_Init+0x60>
		Error_Handler();
 800119c:	f000 fa30 	bl	8001600 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	200042d8 	.word	0x200042d8
 80011a8:	40013000 	.word	0x40013000

080011ac <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80011b0:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <MX_USART2_UART_Init+0x4c>)
 80011b2:	4a12      	ldr	r2, [pc, #72]	; (80011fc <MX_USART2_UART_Init+0x50>)
 80011b4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 256000;
 80011b6:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <MX_USART2_UART_Init+0x4c>)
 80011b8:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
 80011bc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <MX_USART2_UART_Init+0x4c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80011c4:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <MX_USART2_UART_Init+0x4c>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80011ca:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <MX_USART2_UART_Init+0x4c>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80011d0:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <MX_USART2_UART_Init+0x4c>)
 80011d2:	220c      	movs	r2, #12
 80011d4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011d6:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <MX_USART2_UART_Init+0x4c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <MX_USART2_UART_Init+0x4c>)
 80011de:	2200      	movs	r2, #0
 80011e0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80011e2:	4805      	ldr	r0, [pc, #20]	; (80011f8 <MX_USART2_UART_Init+0x4c>)
 80011e4:	f006 fb2c 	bl	8007840 <HAL_UART_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80011ee:	f000 fa07 	bl	8001600 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20004338 	.word	0x20004338
 80011fc:	40004400 	.word	0x40004400

08001200 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	607b      	str	r3, [r7, #4]
 800120a:	4b14      	ldr	r3, [pc, #80]	; (800125c <MX_DMA_Init+0x5c>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a13      	ldr	r2, [pc, #76]	; (800125c <MX_DMA_Init+0x5c>)
 8001210:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b11      	ldr	r3, [pc, #68]	; (800125c <MX_DMA_Init+0x5c>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800121e:	607b      	str	r3, [r7, #4]
 8001220:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001222:	2200      	movs	r2, #0
 8001224:	2105      	movs	r1, #5
 8001226:	2038      	movs	r0, #56	; 0x38
 8001228:	f002 f918 	bl	800345c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800122c:	2038      	movs	r0, #56	; 0x38
 800122e:	f002 f931 	bl	8003494 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2105      	movs	r1, #5
 8001236:	2039      	movs	r0, #57	; 0x39
 8001238:	f002 f910 	bl	800345c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800123c:	2039      	movs	r0, #57	; 0x39
 800123e:	f002 f929 	bl	8003494 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001242:	2200      	movs	r2, #0
 8001244:	2105      	movs	r1, #5
 8001246:	203a      	movs	r0, #58	; 0x3a
 8001248:	f002 f908 	bl	800345c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800124c:	203a      	movs	r0, #58	; 0x3a
 800124e:	f002 f921 	bl	8003494 <HAL_NVIC_EnableIRQ>

}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40023800 	.word	0x40023800

08001260 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001260:	b580      	push	{r7, lr}
 8001262:	b08c      	sub	sp, #48	; 0x30
 8001264:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001266:	f107 031c 	add.w	r3, r7, #28
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]
 8001274:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	61bb      	str	r3, [r7, #24]
 800127a:	4b78      	ldr	r3, [pc, #480]	; (800145c <MX_GPIO_Init+0x1fc>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a77      	ldr	r2, [pc, #476]	; (800145c <MX_GPIO_Init+0x1fc>)
 8001280:	f043 0310 	orr.w	r3, r3, #16
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4b75      	ldr	r3, [pc, #468]	; (800145c <MX_GPIO_Init+0x1fc>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f003 0310 	and.w	r3, r3, #16
 800128e:	61bb      	str	r3, [r7, #24]
 8001290:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	617b      	str	r3, [r7, #20]
 8001296:	4b71      	ldr	r3, [pc, #452]	; (800145c <MX_GPIO_Init+0x1fc>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	4a70      	ldr	r2, [pc, #448]	; (800145c <MX_GPIO_Init+0x1fc>)
 800129c:	f043 0304 	orr.w	r3, r3, #4
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
 80012a2:	4b6e      	ldr	r3, [pc, #440]	; (800145c <MX_GPIO_Init+0x1fc>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f003 0304 	and.w	r3, r3, #4
 80012aa:	617b      	str	r3, [r7, #20]
 80012ac:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	4b6a      	ldr	r3, [pc, #424]	; (800145c <MX_GPIO_Init+0x1fc>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a69      	ldr	r2, [pc, #420]	; (800145c <MX_GPIO_Init+0x1fc>)
 80012b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b67      	ldr	r3, [pc, #412]	; (800145c <MX_GPIO_Init+0x1fc>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	4b63      	ldr	r3, [pc, #396]	; (800145c <MX_GPIO_Init+0x1fc>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a62      	ldr	r2, [pc, #392]	; (800145c <MX_GPIO_Init+0x1fc>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b60      	ldr	r3, [pc, #384]	; (800145c <MX_GPIO_Init+0x1fc>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	4b5c      	ldr	r3, [pc, #368]	; (800145c <MX_GPIO_Init+0x1fc>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a5b      	ldr	r2, [pc, #364]	; (800145c <MX_GPIO_Init+0x1fc>)
 80012f0:	f043 0302 	orr.w	r3, r3, #2
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b59      	ldr	r3, [pc, #356]	; (800145c <MX_GPIO_Init+0x1fc>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	60bb      	str	r3, [r7, #8]
 8001300:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	4b55      	ldr	r3, [pc, #340]	; (800145c <MX_GPIO_Init+0x1fc>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	4a54      	ldr	r2, [pc, #336]	; (800145c <MX_GPIO_Init+0x1fc>)
 800130c:	f043 0308 	orr.w	r3, r3, #8
 8001310:	6313      	str	r3, [r2, #48]	; 0x30
 8001312:	4b52      	ldr	r3, [pc, #328]	; (800145c <MX_GPIO_Init+0x1fc>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	f003 0308 	and.w	r3, r3, #8
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800131e:	2200      	movs	r2, #0
 8001320:	2108      	movs	r1, #8
 8001322:	484f      	ldr	r0, [pc, #316]	; (8001460 <MX_GPIO_Init+0x200>)
 8001324:	f002 fde8 	bl	8003ef8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 8001328:	2201      	movs	r2, #1
 800132a:	2101      	movs	r1, #1
 800132c:	484d      	ldr	r0, [pc, #308]	; (8001464 <MX_GPIO_Init+0x204>)
 800132e:	f002 fde3 	bl	8003ef8 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8001332:	2200      	movs	r2, #0
 8001334:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001338:	484b      	ldr	r0, [pc, #300]	; (8001468 <MX_GPIO_Init+0x208>)
 800133a:	f002 fddd 	bl	8003ef8 <HAL_GPIO_WritePin>
	LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : PE3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 800133e:	2308      	movs	r3, #8
 8001340:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001342:	2301      	movs	r3, #1
 8001344:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134a:	2300      	movs	r3, #0
 800134c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800134e:	f107 031c 	add.w	r3, r7, #28
 8001352:	4619      	mov	r1, r3
 8001354:	4842      	ldr	r0, [pc, #264]	; (8001460 <MX_GPIO_Init+0x200>)
 8001356:	f002 fc1b 	bl	8003b90 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800135a:	2301      	movs	r3, #1
 800135c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135e:	2301      	movs	r3, #1
 8001360:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001366:	2300      	movs	r3, #0
 8001368:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800136a:	f107 031c 	add.w	r3, r7, #28
 800136e:	4619      	mov	r1, r3
 8001370:	483c      	ldr	r0, [pc, #240]	; (8001464 <MX_GPIO_Init+0x204>)
 8001372:	f002 fc0d 	bl	8003b90 <HAL_GPIO_Init>

	/*Configure GPIO pin : Start_Button_Pin */
	GPIO_InitStruct.Pin = Start_Button_Pin;
 8001376:	2302      	movs	r3, #2
 8001378:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800137a:	2300      	movs	r3, #0
 800137c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800137e:	2301      	movs	r3, #1
 8001380:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(Start_Button_GPIO_Port, &GPIO_InitStruct);
 8001382:	f107 031c 	add.w	r3, r7, #28
 8001386:	4619      	mov	r1, r3
 8001388:	4836      	ldr	r0, [pc, #216]	; (8001464 <MX_GPIO_Init+0x204>)
 800138a:	f002 fc01 	bl	8003b90 <HAL_GPIO_Init>

	/*Configure GPIO pin : PDM_OUT_Pin */
	GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800138e:	2308      	movs	r3, #8
 8001390:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001392:	2302      	movs	r3, #2
 8001394:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139a:	2300      	movs	r3, #0
 800139c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800139e:	2305      	movs	r3, #5
 80013a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80013a2:	f107 031c 	add.w	r3, r7, #28
 80013a6:	4619      	mov	r1, r3
 80013a8:	482e      	ldr	r0, [pc, #184]	; (8001464 <MX_GPIO_Init+0x204>)
 80013aa:	f002 fbf1 	bl	8003b90 <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80013ae:	2301      	movs	r3, #1
 80013b0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80013b2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80013b6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013bc:	f107 031c 	add.w	r3, r7, #28
 80013c0:	4619      	mov	r1, r3
 80013c2:	482a      	ldr	r0, [pc, #168]	; (800146c <MX_GPIO_Init+0x20c>)
 80013c4:	f002 fbe4 	bl	8003b90 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013c8:	2304      	movs	r3, #4
 80013ca:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013cc:	2300      	movs	r3, #0
 80013ce:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d4:	f107 031c 	add.w	r3, r7, #28
 80013d8:	4619      	mov	r1, r3
 80013da:	4825      	ldr	r0, [pc, #148]	; (8001470 <MX_GPIO_Init+0x210>)
 80013dc:	f002 fbd8 	bl	8003b90 <HAL_GPIO_Init>

	/*Configure GPIO pin : CLK_IN_Pin */
	GPIO_InitStruct.Pin = CLK_IN_Pin;
 80013e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013e4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e6:	2302      	movs	r3, #2
 80013e8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ee:	2300      	movs	r3, #0
 80013f0:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013f2:	2305      	movs	r3, #5
 80013f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80013f6:	f107 031c 	add.w	r3, r7, #28
 80013fa:	4619      	mov	r1, r3
 80013fc:	481c      	ldr	r0, [pc, #112]	; (8001470 <MX_GPIO_Init+0x210>)
 80013fe:	f002 fbc7 	bl	8003b90 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
	 Audio_RST_Pin */
	GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 8001402:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001406:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001408:	2301      	movs	r3, #1
 800140a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001410:	2300      	movs	r3, #0
 8001412:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001414:	f107 031c 	add.w	r3, r7, #28
 8001418:	4619      	mov	r1, r3
 800141a:	4813      	ldr	r0, [pc, #76]	; (8001468 <MX_GPIO_Init+0x208>)
 800141c:	f002 fbb8 	bl	8003b90 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001420:	2320      	movs	r3, #32
 8001422:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001424:	2300      	movs	r3, #0
 8001426:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800142c:	f107 031c 	add.w	r3, r7, #28
 8001430:	4619      	mov	r1, r3
 8001432:	480d      	ldr	r0, [pc, #52]	; (8001468 <MX_GPIO_Init+0x208>)
 8001434:	f002 fbac 	bl	8003b90 <HAL_GPIO_Init>

	/*Configure GPIO pin : MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001438:	2302      	movs	r3, #2
 800143a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800143c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001440:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	2300      	movs	r3, #0
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001446:	f107 031c 	add.w	r3, r7, #28
 800144a:	4619      	mov	r1, r3
 800144c:	4804      	ldr	r0, [pc, #16]	; (8001460 <MX_GPIO_Init+0x200>)
 800144e:	f002 fb9f 	bl	8003b90 <HAL_GPIO_Init>

}
 8001452:	bf00      	nop
 8001454:	3730      	adds	r7, #48	; 0x30
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40023800 	.word	0x40023800
 8001460:	40021000 	.word	0x40021000
 8001464:	40020800 	.word	0x40020800
 8001468:	40020c00 	.word	0x40020c00
 800146c:	40020000 	.word	0x40020000
 8001470:	40020400 	.word	0x40020400

08001474 <startLEDTask>:
 * @brief  Function implementing the ledTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_startLEDTask */
void startLEDTask(void const *argument) {
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
	/* init code for USB_HOST */
	MX_USB_HOST_Init();
 800147c:	f00c f896 	bl	800d5ac <MX_USB_HOST_Init>
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 8001480:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001484:	4803      	ldr	r0, [pc, #12]	; (8001494 <startLEDTask+0x20>)
 8001486:	f002 fd50 	bl	8003f2a <HAL_GPIO_TogglePin>
		osDelay(1000);
 800148a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800148e:	f009 fe74 	bl	800b17a <osDelay>
		HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 8001492:	e7f5      	b.n	8001480 <startLEDTask+0xc>
 8001494:	40020c00 	.word	0x40020c00

08001498 <startUART_Task>:
 * @brief Function implementing the uartTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startUART_Task */
void startUART_Task(void const *argument) {
 8001498:	b590      	push	{r4, r7, lr}
 800149a:	b0c9      	sub	sp, #292	; 0x124
 800149c:	af02      	add	r7, sp, #8
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	6018      	str	r0, [r3, #0]
	/* USER CODE BEGIN startUART_Task */
	char startBtn[16] = "";
 80014a2:	2300      	movs	r3, #0
 80014a4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80014a8:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
	char msg[256];

	/* Infinite loop */
	for (;;) {
		if (!HAL_GPIO_ReadPin(GPIOC, Start_Button_Pin)) {
 80014b4:	2102      	movs	r1, #2
 80014b6:	483a      	ldr	r0, [pc, #232]	; (80015a0 <startUART_Task+0x108>)
 80014b8:	f002 fd06 	bl	8003ec8 <HAL_GPIO_ReadPin>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d107      	bne.n	80014d2 <startUART_Task+0x3a>
			strcpy(startBtn, "Pressed");
 80014c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80014c6:	4a37      	ldr	r2, [pc, #220]	; (80015a4 <startUART_Task+0x10c>)
 80014c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014cc:	e883 0003 	stmia.w	r3, {r0, r1}
 80014d0:	e005      	b.n	80014de <startUART_Task+0x46>
		} else {
			strcpy(startBtn, "Not Pressed");
 80014d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80014d6:	4a34      	ldr	r2, [pc, #208]	; (80015a8 <startUART_Task+0x110>)
 80014d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80014da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}

		apps_PP[0] = 0.0833 * appsVal[0];
 80014de:	4b33      	ldr	r3, [pc, #204]	; (80015ac <startUART_Task+0x114>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff f938 	bl	8000758 <__aeabi_ui2d>
 80014e8:	a327      	add	r3, pc, #156	; (adr r3, 8001588 <startUART_Task+0xf0>)
 80014ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ee:	f7fe fec7 	bl	8000280 <__aeabi_dmul>
 80014f2:	4602      	mov	r2, r0
 80014f4:	460b      	mov	r3, r1
 80014f6:	4610      	mov	r0, r2
 80014f8:	4619      	mov	r1, r3
 80014fa:	f7ff f9a7 	bl	800084c <__aeabi_d2uiz>
 80014fe:	4603      	mov	r3, r0
 8001500:	4a2b      	ldr	r2, [pc, #172]	; (80015b0 <startUART_Task+0x118>)
 8001502:	6013      	str	r3, [r2, #0]
		apps_PP[1] = -0.03339 * appsVal[1] + 136.7;
 8001504:	4b29      	ldr	r3, [pc, #164]	; (80015ac <startUART_Task+0x114>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff f925 	bl	8000758 <__aeabi_ui2d>
 800150e:	a320      	add	r3, pc, #128	; (adr r3, 8001590 <startUART_Task+0xf8>)
 8001510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001514:	f7fe feb4 	bl	8000280 <__aeabi_dmul>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	4610      	mov	r0, r2
 800151e:	4619      	mov	r1, r3
 8001520:	a31d      	add	r3, pc, #116	; (adr r3, 8001598 <startUART_Task+0x100>)
 8001522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001526:	f7fe ffdb 	bl	80004e0 <__adddf3>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	4610      	mov	r0, r2
 8001530:	4619      	mov	r1, r3
 8001532:	f7ff f98b 	bl	800084c <__aeabi_d2uiz>
 8001536:	4603      	mov	r3, r0
 8001538:	4a1d      	ldr	r2, [pc, #116]	; (80015b0 <startUART_Task+0x118>)
 800153a:	6053      	str	r3, [r2, #4]

		//send out APPS values + APPS Pedal Position over UART
		sprintf(msg,
 800153c:	4b1b      	ldr	r3, [pc, #108]	; (80015ac <startUART_Task+0x114>)
 800153e:	6819      	ldr	r1, [r3, #0]
 8001540:	4b1a      	ldr	r3, [pc, #104]	; (80015ac <startUART_Task+0x114>)
 8001542:	685c      	ldr	r4, [r3, #4]
 8001544:	4b1a      	ldr	r3, [pc, #104]	; (80015b0 <startUART_Task+0x118>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a19      	ldr	r2, [pc, #100]	; (80015b0 <startUART_Task+0x118>)
 800154a:	6852      	ldr	r2, [r2, #4]
 800154c:	f107 0008 	add.w	r0, r7, #8
 8001550:	9201      	str	r2, [sp, #4]
 8001552:	9300      	str	r3, [sp, #0]
 8001554:	4623      	mov	r3, r4
 8001556:	460a      	mov	r2, r1
 8001558:	4916      	ldr	r1, [pc, #88]	; (80015b4 <startUART_Task+0x11c>)
 800155a:	f00c fc9f 	bl	800de9c <siprintf>
				"APPS_1 = %lu \t APPS_2 = %lu \t PP1 = %lu \t PP2 = %lu\r\n",
				appsVal[0], appsVal[1], apps_PP[0], apps_PP[1]);
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800155e:	f107 0308 	add.w	r3, r7, #8
 8001562:	4618      	mov	r0, r3
 8001564:	f7fe fe34 	bl	80001d0 <strlen>
 8001568:	4603      	mov	r3, r0
 800156a:	b29a      	uxth	r2, r3
 800156c:	f107 0108 	add.w	r1, r7, #8
 8001570:	f04f 33ff 	mov.w	r3, #4294967295
 8001574:	4810      	ldr	r0, [pc, #64]	; (80015b8 <startUART_Task+0x120>)
 8001576:	f006 f9b0 	bl	80078da <HAL_UART_Transmit>
		osDelay(100);
 800157a:	2064      	movs	r0, #100	; 0x64
 800157c:	f009 fdfd 	bl	800b17a <osDelay>
		if (!HAL_GPIO_ReadPin(GPIOC, Start_Button_Pin)) {
 8001580:	e798      	b.n	80014b4 <startUART_Task+0x1c>
 8001582:	bf00      	nop
 8001584:	f3af 8000 	nop.w
 8001588:	17c1bda5 	.word	0x17c1bda5
 800158c:	3fb55326 	.word	0x3fb55326
 8001590:	7c06e19c 	.word	0x7c06e19c
 8001594:	bfa1187e 	.word	0xbfa1187e
 8001598:	66666666 	.word	0x66666666
 800159c:	40611666 	.word	0x40611666
 80015a0:	40020800 	.word	0x40020800
 80015a4:	0800e5f4 	.word	0x0800e5f4
 80015a8:	0800e5fc 	.word	0x0800e5fc
 80015ac:	20004438 	.word	0x20004438
 80015b0:	200042d0 	.word	0x200042d0
 80015b4:	0800e608 	.word	0x0800e608
 80015b8:	20004338 	.word	0x20004338

080015bc <startTorqueCommand>:
 * @brief Function implementing the Torque_Command thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startTorqueCommand */
void startTorqueCommand(void const *argument) {
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
//		if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox)
//				!= HAL_OK) {
//			Error_Handler();
//		}

		HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
 80015c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015c8:	4803      	ldr	r0, [pc, #12]	; (80015d8 <startTorqueCommand+0x1c>)
 80015ca:	f002 fcae 	bl	8003f2a <HAL_GPIO_TogglePin>
		 * Need to send CAN messages before motor controller times out
		 * Recommended settings are to send out CAN message every half the timeout
		 * period. I.e if timeout period is 1000ms, then send a CAN message every 500ms.
		 * Need to configure actual timeout period for motor controller using DTI tool.
		 */
		osDelay(500);
 80015ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015d2:	f009 fdd2 	bl	800b17a <osDelay>
		HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
 80015d6:	e7f5      	b.n	80015c4 <startTorqueCommand+0x8>
 80015d8:	40020c00 	.word	0x40020c00

080015dc <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a04      	ldr	r2, [pc, #16]	; (80015fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d101      	bne.n	80015f2 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80015ee:	f000 fc9f 	bl	8001f30 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40010000 	.word	0x40010000

08001600 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001604:	b672      	cpsid	i
}
 8001606:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001608:	e7fe      	b.n	8001608 <Error_Handler+0x8>
	...

0800160c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	607b      	str	r3, [r7, #4]
 8001616:	4b12      	ldr	r3, [pc, #72]	; (8001660 <HAL_MspInit+0x54>)
 8001618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161a:	4a11      	ldr	r2, [pc, #68]	; (8001660 <HAL_MspInit+0x54>)
 800161c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001620:	6453      	str	r3, [r2, #68]	; 0x44
 8001622:	4b0f      	ldr	r3, [pc, #60]	; (8001660 <HAL_MspInit+0x54>)
 8001624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001626:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800162a:	607b      	str	r3, [r7, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	603b      	str	r3, [r7, #0]
 8001632:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <HAL_MspInit+0x54>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	4a0a      	ldr	r2, [pc, #40]	; (8001660 <HAL_MspInit+0x54>)
 8001638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800163c:	6413      	str	r3, [r2, #64]	; 0x40
 800163e:	4b08      	ldr	r3, [pc, #32]	; (8001660 <HAL_MspInit+0x54>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001646:	603b      	str	r3, [r7, #0]
 8001648:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800164a:	2200      	movs	r2, #0
 800164c:	210f      	movs	r1, #15
 800164e:	f06f 0001 	mvn.w	r0, #1
 8001652:	f001 ff03 	bl	800345c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40023800 	.word	0x40023800

08001664 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b08e      	sub	sp, #56	; 0x38
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a9b      	ldr	r2, [pc, #620]	; (80018f0 <HAL_ADC_MspInit+0x28c>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d161      	bne.n	800174a <HAL_ADC_MspInit+0xe6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	623b      	str	r3, [r7, #32]
 800168a:	4b9a      	ldr	r3, [pc, #616]	; (80018f4 <HAL_ADC_MspInit+0x290>)
 800168c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168e:	4a99      	ldr	r2, [pc, #612]	; (80018f4 <HAL_ADC_MspInit+0x290>)
 8001690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001694:	6453      	str	r3, [r2, #68]	; 0x44
 8001696:	4b97      	ldr	r3, [pc, #604]	; (80018f4 <HAL_ADC_MspInit+0x290>)
 8001698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800169e:	623b      	str	r3, [r7, #32]
 80016a0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	61fb      	str	r3, [r7, #28]
 80016a6:	4b93      	ldr	r3, [pc, #588]	; (80018f4 <HAL_ADC_MspInit+0x290>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	4a92      	ldr	r2, [pc, #584]	; (80018f4 <HAL_ADC_MspInit+0x290>)
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	6313      	str	r3, [r2, #48]	; 0x30
 80016b2:	4b90      	ldr	r3, [pc, #576]	; (80018f4 <HAL_ADC_MspInit+0x290>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	61fb      	str	r3, [r7, #28]
 80016bc:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80016be:	2302      	movs	r3, #2
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016c2:	2303      	movs	r3, #3
 80016c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ce:	4619      	mov	r1, r3
 80016d0:	4889      	ldr	r0, [pc, #548]	; (80018f8 <HAL_ADC_MspInit+0x294>)
 80016d2:	f002 fa5d 	bl	8003b90 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80016d6:	4b89      	ldr	r3, [pc, #548]	; (80018fc <HAL_ADC_MspInit+0x298>)
 80016d8:	4a89      	ldr	r2, [pc, #548]	; (8001900 <HAL_ADC_MspInit+0x29c>)
 80016da:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80016dc:	4b87      	ldr	r3, [pc, #540]	; (80018fc <HAL_ADC_MspInit+0x298>)
 80016de:	2200      	movs	r2, #0
 80016e0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016e2:	4b86      	ldr	r3, [pc, #536]	; (80018fc <HAL_ADC_MspInit+0x298>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016e8:	4b84      	ldr	r3, [pc, #528]	; (80018fc <HAL_ADC_MspInit+0x298>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80016ee:	4b83      	ldr	r3, [pc, #524]	; (80018fc <HAL_ADC_MspInit+0x298>)
 80016f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016f4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016f6:	4b81      	ldr	r3, [pc, #516]	; (80018fc <HAL_ADC_MspInit+0x298>)
 80016f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016fc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016fe:	4b7f      	ldr	r3, [pc, #508]	; (80018fc <HAL_ADC_MspInit+0x298>)
 8001700:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001704:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001706:	4b7d      	ldr	r3, [pc, #500]	; (80018fc <HAL_ADC_MspInit+0x298>)
 8001708:	f44f 7280 	mov.w	r2, #256	; 0x100
 800170c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800170e:	4b7b      	ldr	r3, [pc, #492]	; (80018fc <HAL_ADC_MspInit+0x298>)
 8001710:	2200      	movs	r2, #0
 8001712:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001714:	4b79      	ldr	r3, [pc, #484]	; (80018fc <HAL_ADC_MspInit+0x298>)
 8001716:	2204      	movs	r2, #4
 8001718:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800171a:	4b78      	ldr	r3, [pc, #480]	; (80018fc <HAL_ADC_MspInit+0x298>)
 800171c:	2203      	movs	r2, #3
 800171e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8001720:	4b76      	ldr	r3, [pc, #472]	; (80018fc <HAL_ADC_MspInit+0x298>)
 8001722:	2200      	movs	r2, #0
 8001724:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001726:	4b75      	ldr	r3, [pc, #468]	; (80018fc <HAL_ADC_MspInit+0x298>)
 8001728:	2200      	movs	r2, #0
 800172a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800172c:	4873      	ldr	r0, [pc, #460]	; (80018fc <HAL_ADC_MspInit+0x298>)
 800172e:	f001 febf 	bl	80034b0 <HAL_DMA_Init>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <HAL_ADC_MspInit+0xd8>
    {
      Error_Handler();
 8001738:	f7ff ff62 	bl	8001600 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4a6f      	ldr	r2, [pc, #444]	; (80018fc <HAL_ADC_MspInit+0x298>)
 8001740:	639a      	str	r2, [r3, #56]	; 0x38
 8001742:	4a6e      	ldr	r2, [pc, #440]	; (80018fc <HAL_ADC_MspInit+0x298>)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001748:	e0ce      	b.n	80018e8 <HAL_ADC_MspInit+0x284>
  else if(hadc->Instance==ADC2)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a6d      	ldr	r2, [pc, #436]	; (8001904 <HAL_ADC_MspInit+0x2a0>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d162      	bne.n	800181a <HAL_ADC_MspInit+0x1b6>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001754:	2300      	movs	r3, #0
 8001756:	61bb      	str	r3, [r7, #24]
 8001758:	4b66      	ldr	r3, [pc, #408]	; (80018f4 <HAL_ADC_MspInit+0x290>)
 800175a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175c:	4a65      	ldr	r2, [pc, #404]	; (80018f4 <HAL_ADC_MspInit+0x290>)
 800175e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001762:	6453      	str	r3, [r2, #68]	; 0x44
 8001764:	4b63      	ldr	r3, [pc, #396]	; (80018f4 <HAL_ADC_MspInit+0x290>)
 8001766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001768:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800176c:	61bb      	str	r3, [r7, #24]
 800176e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]
 8001774:	4b5f      	ldr	r3, [pc, #380]	; (80018f4 <HAL_ADC_MspInit+0x290>)
 8001776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001778:	4a5e      	ldr	r2, [pc, #376]	; (80018f4 <HAL_ADC_MspInit+0x290>)
 800177a:	f043 0301 	orr.w	r3, r3, #1
 800177e:	6313      	str	r3, [r2, #48]	; 0x30
 8001780:	4b5c      	ldr	r3, [pc, #368]	; (80018f4 <HAL_ADC_MspInit+0x290>)
 8001782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001784:	f003 0301 	and.w	r3, r3, #1
 8001788:	617b      	str	r3, [r7, #20]
 800178a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800178c:	2308      	movs	r3, #8
 800178e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001790:	2303      	movs	r3, #3
 8001792:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001798:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800179c:	4619      	mov	r1, r3
 800179e:	4856      	ldr	r0, [pc, #344]	; (80018f8 <HAL_ADC_MspInit+0x294>)
 80017a0:	f002 f9f6 	bl	8003b90 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 80017a4:	4b58      	ldr	r3, [pc, #352]	; (8001908 <HAL_ADC_MspInit+0x2a4>)
 80017a6:	4a59      	ldr	r2, [pc, #356]	; (800190c <HAL_ADC_MspInit+0x2a8>)
 80017a8:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80017aa:	4b57      	ldr	r3, [pc, #348]	; (8001908 <HAL_ADC_MspInit+0x2a4>)
 80017ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017b0:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017b2:	4b55      	ldr	r3, [pc, #340]	; (8001908 <HAL_ADC_MspInit+0x2a4>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80017b8:	4b53      	ldr	r3, [pc, #332]	; (8001908 <HAL_ADC_MspInit+0x2a4>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80017be:	4b52      	ldr	r3, [pc, #328]	; (8001908 <HAL_ADC_MspInit+0x2a4>)
 80017c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017c4:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017c6:	4b50      	ldr	r3, [pc, #320]	; (8001908 <HAL_ADC_MspInit+0x2a4>)
 80017c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017cc:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017ce:	4b4e      	ldr	r3, [pc, #312]	; (8001908 <HAL_ADC_MspInit+0x2a4>)
 80017d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017d4:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80017d6:	4b4c      	ldr	r3, [pc, #304]	; (8001908 <HAL_ADC_MspInit+0x2a4>)
 80017d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017dc:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80017de:	4b4a      	ldr	r3, [pc, #296]	; (8001908 <HAL_ADC_MspInit+0x2a4>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80017e4:	4b48      	ldr	r3, [pc, #288]	; (8001908 <HAL_ADC_MspInit+0x2a4>)
 80017e6:	2204      	movs	r2, #4
 80017e8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80017ea:	4b47      	ldr	r3, [pc, #284]	; (8001908 <HAL_ADC_MspInit+0x2a4>)
 80017ec:	2203      	movs	r2, #3
 80017ee:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc2.Init.MemBurst = DMA_MBURST_SINGLE;
 80017f0:	4b45      	ldr	r3, [pc, #276]	; (8001908 <HAL_ADC_MspInit+0x2a4>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80017f6:	4b44      	ldr	r3, [pc, #272]	; (8001908 <HAL_ADC_MspInit+0x2a4>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80017fc:	4842      	ldr	r0, [pc, #264]	; (8001908 <HAL_ADC_MspInit+0x2a4>)
 80017fe:	f001 fe57 	bl	80034b0 <HAL_DMA_Init>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <HAL_ADC_MspInit+0x1a8>
      Error_Handler();
 8001808:	f7ff fefa 	bl	8001600 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4a3e      	ldr	r2, [pc, #248]	; (8001908 <HAL_ADC_MspInit+0x2a4>)
 8001810:	639a      	str	r2, [r3, #56]	; 0x38
 8001812:	4a3d      	ldr	r2, [pc, #244]	; (8001908 <HAL_ADC_MspInit+0x2a4>)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001818:	e066      	b.n	80018e8 <HAL_ADC_MspInit+0x284>
  else if(hadc->Instance==ADC3)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a3c      	ldr	r2, [pc, #240]	; (8001910 <HAL_ADC_MspInit+0x2ac>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d161      	bne.n	80018e8 <HAL_ADC_MspInit+0x284>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001824:	2300      	movs	r3, #0
 8001826:	613b      	str	r3, [r7, #16]
 8001828:	4b32      	ldr	r3, [pc, #200]	; (80018f4 <HAL_ADC_MspInit+0x290>)
 800182a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182c:	4a31      	ldr	r2, [pc, #196]	; (80018f4 <HAL_ADC_MspInit+0x290>)
 800182e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001832:	6453      	str	r3, [r2, #68]	; 0x44
 8001834:	4b2f      	ldr	r3, [pc, #188]	; (80018f4 <HAL_ADC_MspInit+0x290>)
 8001836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800183c:	613b      	str	r3, [r7, #16]
 800183e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001840:	2300      	movs	r3, #0
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	4b2b      	ldr	r3, [pc, #172]	; (80018f4 <HAL_ADC_MspInit+0x290>)
 8001846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001848:	4a2a      	ldr	r2, [pc, #168]	; (80018f4 <HAL_ADC_MspInit+0x290>)
 800184a:	f043 0304 	orr.w	r3, r3, #4
 800184e:	6313      	str	r3, [r2, #48]	; 0x30
 8001850:	4b28      	ldr	r3, [pc, #160]	; (80018f4 <HAL_ADC_MspInit+0x290>)
 8001852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001854:	f003 0304 	and.w	r3, r3, #4
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800185c:	2304      	movs	r3, #4
 800185e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001860:	2303      	movs	r3, #3
 8001862:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001868:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800186c:	4619      	mov	r1, r3
 800186e:	4829      	ldr	r0, [pc, #164]	; (8001914 <HAL_ADC_MspInit+0x2b0>)
 8001870:	f002 f98e 	bl	8003b90 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8001874:	4b28      	ldr	r3, [pc, #160]	; (8001918 <HAL_ADC_MspInit+0x2b4>)
 8001876:	4a29      	ldr	r2, [pc, #164]	; (800191c <HAL_ADC_MspInit+0x2b8>)
 8001878:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 800187a:	4b27      	ldr	r3, [pc, #156]	; (8001918 <HAL_ADC_MspInit+0x2b4>)
 800187c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001880:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001882:	4b25      	ldr	r3, [pc, #148]	; (8001918 <HAL_ADC_MspInit+0x2b4>)
 8001884:	2200      	movs	r2, #0
 8001886:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001888:	4b23      	ldr	r3, [pc, #140]	; (8001918 <HAL_ADC_MspInit+0x2b4>)
 800188a:	2200      	movs	r2, #0
 800188c:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800188e:	4b22      	ldr	r3, [pc, #136]	; (8001918 <HAL_ADC_MspInit+0x2b4>)
 8001890:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001894:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001896:	4b20      	ldr	r3, [pc, #128]	; (8001918 <HAL_ADC_MspInit+0x2b4>)
 8001898:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800189c:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800189e:	4b1e      	ldr	r3, [pc, #120]	; (8001918 <HAL_ADC_MspInit+0x2b4>)
 80018a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018a4:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80018a6:	4b1c      	ldr	r3, [pc, #112]	; (8001918 <HAL_ADC_MspInit+0x2b4>)
 80018a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018ac:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80018ae:	4b1a      	ldr	r3, [pc, #104]	; (8001918 <HAL_ADC_MspInit+0x2b4>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80018b4:	4b18      	ldr	r3, [pc, #96]	; (8001918 <HAL_ADC_MspInit+0x2b4>)
 80018b6:	2204      	movs	r2, #4
 80018b8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80018ba:	4b17      	ldr	r3, [pc, #92]	; (8001918 <HAL_ADC_MspInit+0x2b4>)
 80018bc:	2203      	movs	r2, #3
 80018be:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc3.Init.MemBurst = DMA_MBURST_SINGLE;
 80018c0:	4b15      	ldr	r3, [pc, #84]	; (8001918 <HAL_ADC_MspInit+0x2b4>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80018c6:	4b14      	ldr	r3, [pc, #80]	; (8001918 <HAL_ADC_MspInit+0x2b4>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80018cc:	4812      	ldr	r0, [pc, #72]	; (8001918 <HAL_ADC_MspInit+0x2b4>)
 80018ce:	f001 fdef 	bl	80034b0 <HAL_DMA_Init>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <HAL_ADC_MspInit+0x278>
      Error_Handler();
 80018d8:	f7ff fe92 	bl	8001600 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a0e      	ldr	r2, [pc, #56]	; (8001918 <HAL_ADC_MspInit+0x2b4>)
 80018e0:	639a      	str	r2, [r3, #56]	; 0x38
 80018e2:	4a0d      	ldr	r2, [pc, #52]	; (8001918 <HAL_ADC_MspInit+0x2b4>)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6393      	str	r3, [r2, #56]	; 0x38
}
 80018e8:	bf00      	nop
 80018ea:	3738      	adds	r7, #56	; 0x38
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40012000 	.word	0x40012000
 80018f4:	40023800 	.word	0x40023800
 80018f8:	40020000 	.word	0x40020000
 80018fc:	20004260 	.word	0x20004260
 8001900:	40026410 	.word	0x40026410
 8001904:	40012100 	.word	0x40012100
 8001908:	2000437c 	.word	0x2000437c
 800190c:	40026440 	.word	0x40026440
 8001910:	40012200 	.word	0x40012200
 8001914:	40020800 	.word	0x40020800
 8001918:	2000416c 	.word	0x2000416c
 800191c:	40026428 	.word	0x40026428

08001920 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b08a      	sub	sp, #40	; 0x28
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a1d      	ldr	r2, [pc, #116]	; (80019b4 <HAL_CAN_MspInit+0x94>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d133      	bne.n	80019aa <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	613b      	str	r3, [r7, #16]
 8001946:	4b1c      	ldr	r3, [pc, #112]	; (80019b8 <HAL_CAN_MspInit+0x98>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	4a1b      	ldr	r2, [pc, #108]	; (80019b8 <HAL_CAN_MspInit+0x98>)
 800194c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001950:	6413      	str	r3, [r2, #64]	; 0x40
 8001952:	4b19      	ldr	r3, [pc, #100]	; (80019b8 <HAL_CAN_MspInit+0x98>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195a:	613b      	str	r3, [r7, #16]
 800195c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <HAL_CAN_MspInit+0x98>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	4a14      	ldr	r2, [pc, #80]	; (80019b8 <HAL_CAN_MspInit+0x98>)
 8001968:	f043 0308 	orr.w	r3, r3, #8
 800196c:	6313      	str	r3, [r2, #48]	; 0x30
 800196e:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <HAL_CAN_MspInit+0x98>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	f003 0308 	and.w	r3, r3, #8
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800197a:	2303      	movs	r3, #3
 800197c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197e:	2302      	movs	r3, #2
 8001980:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001986:	2303      	movs	r3, #3
 8001988:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800198a:	2309      	movs	r3, #9
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800198e:	f107 0314 	add.w	r3, r7, #20
 8001992:	4619      	mov	r1, r3
 8001994:	4809      	ldr	r0, [pc, #36]	; (80019bc <HAL_CAN_MspInit+0x9c>)
 8001996:	f002 f8fb 	bl	8003b90 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800199a:	2200      	movs	r2, #0
 800199c:	2105      	movs	r1, #5
 800199e:	2014      	movs	r0, #20
 80019a0:	f001 fd5c 	bl	800345c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80019a4:	2014      	movs	r0, #20
 80019a6:	f001 fd75 	bl	8003494 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80019aa:	bf00      	nop
 80019ac:	3728      	adds	r7, #40	; 0x28
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40006400 	.word	0x40006400
 80019b8:	40023800 	.word	0x40023800
 80019bc:	40020c00 	.word	0x40020c00

080019c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08a      	sub	sp, #40	; 0x28
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c8:	f107 0314 	add.w	r3, r7, #20
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	60da      	str	r2, [r3, #12]
 80019d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a19      	ldr	r2, [pc, #100]	; (8001a44 <HAL_I2C_MspInit+0x84>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d12c      	bne.n	8001a3c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	613b      	str	r3, [r7, #16]
 80019e6:	4b18      	ldr	r3, [pc, #96]	; (8001a48 <HAL_I2C_MspInit+0x88>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	4a17      	ldr	r2, [pc, #92]	; (8001a48 <HAL_I2C_MspInit+0x88>)
 80019ec:	f043 0302 	orr.w	r3, r3, #2
 80019f0:	6313      	str	r3, [r2, #48]	; 0x30
 80019f2:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <HAL_I2C_MspInit+0x88>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	613b      	str	r3, [r7, #16]
 80019fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80019fe:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001a02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a04:	2312      	movs	r3, #18
 8001a06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a10:	2304      	movs	r3, #4
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a14:	f107 0314 	add.w	r3, r7, #20
 8001a18:	4619      	mov	r1, r3
 8001a1a:	480c      	ldr	r0, [pc, #48]	; (8001a4c <HAL_I2C_MspInit+0x8c>)
 8001a1c:	f002 f8b8 	bl	8003b90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a20:	2300      	movs	r3, #0
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <HAL_I2C_MspInit+0x88>)
 8001a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a28:	4a07      	ldr	r2, [pc, #28]	; (8001a48 <HAL_I2C_MspInit+0x88>)
 8001a2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a2e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a30:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <HAL_I2C_MspInit+0x88>)
 8001a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a3c:	bf00      	nop
 8001a3e:	3728      	adds	r7, #40	; 0x28
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40005400 	.word	0x40005400
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	40020400 	.word	0x40020400

08001a50 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08e      	sub	sp, #56	; 0x38
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a68:	f107 0314 	add.w	r3, r7, #20
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a31      	ldr	r2, [pc, #196]	; (8001b40 <HAL_I2S_MspInit+0xf0>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d15a      	bne.n	8001b36 <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001a80:	2301      	movs	r3, #1
 8001a82:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001a84:	23c0      	movs	r3, #192	; 0xc0
 8001a86:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a8c:	f107 0314 	add.w	r3, r7, #20
 8001a90:	4618      	mov	r0, r3
 8001a92:	f005 fa5f 	bl	8006f54 <HAL_RCCEx_PeriphCLKConfig>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001a9c:	f7ff fdb0 	bl	8001600 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	613b      	str	r3, [r7, #16]
 8001aa4:	4b27      	ldr	r3, [pc, #156]	; (8001b44 <HAL_I2S_MspInit+0xf4>)
 8001aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa8:	4a26      	ldr	r2, [pc, #152]	; (8001b44 <HAL_I2S_MspInit+0xf4>)
 8001aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aae:	6413      	str	r3, [r2, #64]	; 0x40
 8001ab0:	4b24      	ldr	r3, [pc, #144]	; (8001b44 <HAL_I2S_MspInit+0xf4>)
 8001ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ab8:	613b      	str	r3, [r7, #16]
 8001aba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001abc:	2300      	movs	r3, #0
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	4b20      	ldr	r3, [pc, #128]	; (8001b44 <HAL_I2S_MspInit+0xf4>)
 8001ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac4:	4a1f      	ldr	r2, [pc, #124]	; (8001b44 <HAL_I2S_MspInit+0xf4>)
 8001ac6:	f043 0301 	orr.w	r3, r3, #1
 8001aca:	6313      	str	r3, [r2, #48]	; 0x30
 8001acc:	4b1d      	ldr	r3, [pc, #116]	; (8001b44 <HAL_I2S_MspInit+0xf4>)
 8001ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad8:	2300      	movs	r3, #0
 8001ada:	60bb      	str	r3, [r7, #8]
 8001adc:	4b19      	ldr	r3, [pc, #100]	; (8001b44 <HAL_I2S_MspInit+0xf4>)
 8001ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae0:	4a18      	ldr	r2, [pc, #96]	; (8001b44 <HAL_I2S_MspInit+0xf4>)
 8001ae2:	f043 0304 	orr.w	r3, r3, #4
 8001ae6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae8:	4b16      	ldr	r3, [pc, #88]	; (8001b44 <HAL_I2S_MspInit+0xf4>)
 8001aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aec:	f003 0304 	and.w	r3, r3, #4
 8001af0:	60bb      	str	r3, [r7, #8]
 8001af2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001af4:	2310      	movs	r3, #16
 8001af6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af8:	2302      	movs	r3, #2
 8001afa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b00:	2300      	movs	r3, #0
 8001b02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b04:	2306      	movs	r3, #6
 8001b06:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001b08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	480e      	ldr	r0, [pc, #56]	; (8001b48 <HAL_I2S_MspInit+0xf8>)
 8001b10:	f002 f83e 	bl	8003b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001b14:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b22:	2300      	movs	r3, #0
 8001b24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b26:	2306      	movs	r3, #6
 8001b28:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4806      	ldr	r0, [pc, #24]	; (8001b4c <HAL_I2S_MspInit+0xfc>)
 8001b32:	f002 f82d 	bl	8003b90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001b36:	bf00      	nop
 8001b38:	3738      	adds	r7, #56	; 0x38
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40003c00 	.word	0x40003c00
 8001b44:	40023800 	.word	0x40023800
 8001b48:	40020000 	.word	0x40020000
 8001b4c:	40020800 	.word	0x40020800

08001b50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08a      	sub	sp, #40	; 0x28
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b58:	f107 0314 	add.w	r3, r7, #20
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	60da      	str	r2, [r3, #12]
 8001b66:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a19      	ldr	r2, [pc, #100]	; (8001bd4 <HAL_SPI_MspInit+0x84>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d12b      	bne.n	8001bca <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	613b      	str	r3, [r7, #16]
 8001b76:	4b18      	ldr	r3, [pc, #96]	; (8001bd8 <HAL_SPI_MspInit+0x88>)
 8001b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7a:	4a17      	ldr	r2, [pc, #92]	; (8001bd8 <HAL_SPI_MspInit+0x88>)
 8001b7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b80:	6453      	str	r3, [r2, #68]	; 0x44
 8001b82:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <HAL_SPI_MspInit+0x88>)
 8001b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b8a:	613b      	str	r3, [r7, #16]
 8001b8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <HAL_SPI_MspInit+0x88>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	4a10      	ldr	r2, [pc, #64]	; (8001bd8 <HAL_SPI_MspInit+0x88>)
 8001b98:	f043 0301 	orr.w	r3, r3, #1
 8001b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9e:	4b0e      	ldr	r3, [pc, #56]	; (8001bd8 <HAL_SPI_MspInit+0x88>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001baa:	23e0      	movs	r3, #224	; 0xe0
 8001bac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bba:	2305      	movs	r3, #5
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bbe:	f107 0314 	add.w	r3, r7, #20
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4805      	ldr	r0, [pc, #20]	; (8001bdc <HAL_SPI_MspInit+0x8c>)
 8001bc6:	f001 ffe3 	bl	8003b90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001bca:	bf00      	nop
 8001bcc:	3728      	adds	r7, #40	; 0x28
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40013000 	.word	0x40013000
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	40020000 	.word	0x40020000

08001be0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08a      	sub	sp, #40	; 0x28
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be8:	f107 0314 	add.w	r3, r7, #20
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]
 8001bf6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a28      	ldr	r2, [pc, #160]	; (8001ca0 <HAL_UART_MspInit+0xc0>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d149      	bne.n	8001c96 <HAL_UART_MspInit+0xb6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	613b      	str	r3, [r7, #16]
 8001c06:	4b27      	ldr	r3, [pc, #156]	; (8001ca4 <HAL_UART_MspInit+0xc4>)
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	4a26      	ldr	r2, [pc, #152]	; (8001ca4 <HAL_UART_MspInit+0xc4>)
 8001c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c10:	6413      	str	r3, [r2, #64]	; 0x40
 8001c12:	4b24      	ldr	r3, [pc, #144]	; (8001ca4 <HAL_UART_MspInit+0xc4>)
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1a:	613b      	str	r3, [r7, #16]
 8001c1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	4b20      	ldr	r3, [pc, #128]	; (8001ca4 <HAL_UART_MspInit+0xc4>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	4a1f      	ldr	r2, [pc, #124]	; (8001ca4 <HAL_UART_MspInit+0xc4>)
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2e:	4b1d      	ldr	r3, [pc, #116]	; (8001ca4 <HAL_UART_MspInit+0xc4>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60bb      	str	r3, [r7, #8]
 8001c3e:	4b19      	ldr	r3, [pc, #100]	; (8001ca4 <HAL_UART_MspInit+0xc4>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	4a18      	ldr	r2, [pc, #96]	; (8001ca4 <HAL_UART_MspInit+0xc4>)
 8001c44:	f043 0308 	orr.w	r3, r3, #8
 8001c48:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4a:	4b16      	ldr	r3, [pc, #88]	; (8001ca4 <HAL_UART_MspInit+0xc4>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	f003 0308 	and.w	r3, r3, #8
 8001c52:	60bb      	str	r3, [r7, #8]
 8001c54:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c56:	2304      	movs	r3, #4
 8001c58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c62:	2303      	movs	r3, #3
 8001c64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c66:	2307      	movs	r3, #7
 8001c68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6a:	f107 0314 	add.w	r3, r7, #20
 8001c6e:	4619      	mov	r1, r3
 8001c70:	480d      	ldr	r0, [pc, #52]	; (8001ca8 <HAL_UART_MspInit+0xc8>)
 8001c72:	f001 ff8d 	bl	8003b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c76:	2340      	movs	r3, #64	; 0x40
 8001c78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c82:	2303      	movs	r3, #3
 8001c84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c86:	2307      	movs	r3, #7
 8001c88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c8a:	f107 0314 	add.w	r3, r7, #20
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4806      	ldr	r0, [pc, #24]	; (8001cac <HAL_UART_MspInit+0xcc>)
 8001c92:	f001 ff7d 	bl	8003b90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c96:	bf00      	nop
 8001c98:	3728      	adds	r7, #40	; 0x28
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40004400 	.word	0x40004400
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	40020000 	.word	0x40020000
 8001cac:	40020c00 	.word	0x40020c00

08001cb0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b08c      	sub	sp, #48	; 0x30
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	6879      	ldr	r1, [r7, #4]
 8001cc4:	2019      	movs	r0, #25
 8001cc6:	f001 fbc9 	bl	800345c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001cca:	2019      	movs	r0, #25
 8001ccc:	f001 fbe2 	bl	8003494 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	4b1f      	ldr	r3, [pc, #124]	; (8001d54 <HAL_InitTick+0xa4>)
 8001cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd8:	4a1e      	ldr	r2, [pc, #120]	; (8001d54 <HAL_InitTick+0xa4>)
 8001cda:	f043 0301 	orr.w	r3, r3, #1
 8001cde:	6453      	str	r3, [r2, #68]	; 0x44
 8001ce0:	4b1c      	ldr	r3, [pc, #112]	; (8001d54 <HAL_InitTick+0xa4>)
 8001ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001cec:	f107 0210 	add.w	r2, r7, #16
 8001cf0:	f107 0314 	add.w	r3, r7, #20
 8001cf4:	4611      	mov	r1, r2
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f005 f8fa 	bl	8006ef0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001cfc:	f005 f8e4 	bl	8006ec8 <HAL_RCC_GetPCLK2Freq>
 8001d00:	4603      	mov	r3, r0
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d08:	4a13      	ldr	r2, [pc, #76]	; (8001d58 <HAL_InitTick+0xa8>)
 8001d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0e:	0c9b      	lsrs	r3, r3, #18
 8001d10:	3b01      	subs	r3, #1
 8001d12:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001d14:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <HAL_InitTick+0xac>)
 8001d16:	4a12      	ldr	r2, [pc, #72]	; (8001d60 <HAL_InitTick+0xb0>)
 8001d18:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001d1a:	4b10      	ldr	r3, [pc, #64]	; (8001d5c <HAL_InitTick+0xac>)
 8001d1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d20:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001d22:	4a0e      	ldr	r2, [pc, #56]	; (8001d5c <HAL_InitTick+0xac>)
 8001d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d26:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001d28:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <HAL_InitTick+0xac>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d2e:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <HAL_InitTick+0xac>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001d34:	4809      	ldr	r0, [pc, #36]	; (8001d5c <HAL_InitTick+0xac>)
 8001d36:	f005 fad6 	bl	80072e6 <HAL_TIM_Base_Init>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d104      	bne.n	8001d4a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001d40:	4806      	ldr	r0, [pc, #24]	; (8001d5c <HAL_InitTick+0xac>)
 8001d42:	f005 fb29 	bl	8007398 <HAL_TIM_Base_Start_IT>
 8001d46:	4603      	mov	r3, r0
 8001d48:	e000      	b.n	8001d4c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3730      	adds	r7, #48	; 0x30
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40023800 	.word	0x40023800
 8001d58:	431bde83 	.word	0x431bde83
 8001d5c:	20004488 	.word	0x20004488
 8001d60:	40010000 	.word	0x40010000

08001d64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d68:	e7fe      	b.n	8001d68 <NMI_Handler+0x4>

08001d6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d6e:	e7fe      	b.n	8001d6e <HardFault_Handler+0x4>

08001d70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d74:	e7fe      	b.n	8001d74 <MemManage_Handler+0x4>

08001d76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d7a:	e7fe      	b.n	8001d7a <BusFault_Handler+0x4>

08001d7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d80:	e7fe      	b.n	8001d80 <UsageFault_Handler+0x4>

08001d82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d82:	b480      	push	{r7}
 8001d84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001d94:	4802      	ldr	r0, [pc, #8]	; (8001da0 <CAN1_RX0_IRQHandler+0x10>)
 8001d96:	f001 f879 	bl	8002e8c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	200043dc 	.word	0x200043dc

08001da4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001da8:	4802      	ldr	r0, [pc, #8]	; (8001db4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001daa:	f005 fb65 	bl	8007478 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20004488 	.word	0x20004488

08001db8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001dbc:	4802      	ldr	r0, [pc, #8]	; (8001dc8 <DMA2_Stream0_IRQHandler+0x10>)
 8001dbe:	f001 fc7d 	bl	80036bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20004260 	.word	0x20004260

08001dcc <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001dd0:	4802      	ldr	r0, [pc, #8]	; (8001ddc <DMA2_Stream1_IRQHandler+0x10>)
 8001dd2:	f001 fc73 	bl	80036bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	2000416c 	.word	0x2000416c

08001de0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001de4:	4802      	ldr	r0, [pc, #8]	; (8001df0 <DMA2_Stream2_IRQHandler+0x10>)
 8001de6:	f001 fc69 	bl	80036bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	2000437c 	.word	0x2000437c

08001df4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001df8:	4802      	ldr	r0, [pc, #8]	; (8001e04 <OTG_FS_IRQHandler+0x10>)
 8001dfa:	f002 fb1b 	bl	8004434 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	200048b8 	.word	0x200048b8

08001e08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e10:	4a14      	ldr	r2, [pc, #80]	; (8001e64 <_sbrk+0x5c>)
 8001e12:	4b15      	ldr	r3, [pc, #84]	; (8001e68 <_sbrk+0x60>)
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e1c:	4b13      	ldr	r3, [pc, #76]	; (8001e6c <_sbrk+0x64>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d102      	bne.n	8001e2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e24:	4b11      	ldr	r3, [pc, #68]	; (8001e6c <_sbrk+0x64>)
 8001e26:	4a12      	ldr	r2, [pc, #72]	; (8001e70 <_sbrk+0x68>)
 8001e28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e2a:	4b10      	ldr	r3, [pc, #64]	; (8001e6c <_sbrk+0x64>)
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4413      	add	r3, r2
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d207      	bcs.n	8001e48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e38:	f00b feba 	bl	800dbb0 <__errno>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	220c      	movs	r2, #12
 8001e40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e42:	f04f 33ff 	mov.w	r3, #4294967295
 8001e46:	e009      	b.n	8001e5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e48:	4b08      	ldr	r3, [pc, #32]	; (8001e6c <_sbrk+0x64>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e4e:	4b07      	ldr	r3, [pc, #28]	; (8001e6c <_sbrk+0x64>)
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4413      	add	r3, r2
 8001e56:	4a05      	ldr	r2, [pc, #20]	; (8001e6c <_sbrk+0x64>)
 8001e58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3718      	adds	r7, #24
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	20020000 	.word	0x20020000
 8001e68:	00000400 	.word	0x00000400
 8001e6c:	20000364 	.word	0x20000364
 8001e70:	20004bd0 	.word	0x20004bd0

08001e74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e78:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <SystemInit+0x20>)
 8001e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e7e:	4a05      	ldr	r2, [pc, #20]	; (8001e94 <SystemInit+0x20>)
 8001e80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e88:	bf00      	nop
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	e000ed00 	.word	0xe000ed00

08001e98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ed0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e9c:	480d      	ldr	r0, [pc, #52]	; (8001ed4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e9e:	490e      	ldr	r1, [pc, #56]	; (8001ed8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ea0:	4a0e      	ldr	r2, [pc, #56]	; (8001edc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ea2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ea4:	e002      	b.n	8001eac <LoopCopyDataInit>

08001ea6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ea6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ea8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eaa:	3304      	adds	r3, #4

08001eac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001eb0:	d3f9      	bcc.n	8001ea6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eb2:	4a0b      	ldr	r2, [pc, #44]	; (8001ee0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001eb4:	4c0b      	ldr	r4, [pc, #44]	; (8001ee4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001eb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eb8:	e001      	b.n	8001ebe <LoopFillZerobss>

08001eba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ebc:	3204      	adds	r2, #4

08001ebe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ebe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ec0:	d3fb      	bcc.n	8001eba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ec2:	f7ff ffd7 	bl	8001e74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ec6:	f00b fe79 	bl	800dbbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eca:	f7fe fe8d 	bl	8000be8 <main>
  bx  lr    
 8001ece:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ed0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ed4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ed8:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001edc:	0800e748 	.word	0x0800e748
  ldr r2, =_sbss
 8001ee0:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001ee4:	20004bcc 	.word	0x20004bcc

08001ee8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ee8:	e7fe      	b.n	8001ee8 <ADC_IRQHandler>
	...

08001eec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ef0:	4b0e      	ldr	r3, [pc, #56]	; (8001f2c <HAL_Init+0x40>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a0d      	ldr	r2, [pc, #52]	; (8001f2c <HAL_Init+0x40>)
 8001ef6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001efa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001efc:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <HAL_Init+0x40>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a0a      	ldr	r2, [pc, #40]	; (8001f2c <HAL_Init+0x40>)
 8001f02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f08:	4b08      	ldr	r3, [pc, #32]	; (8001f2c <HAL_Init+0x40>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a07      	ldr	r2, [pc, #28]	; (8001f2c <HAL_Init+0x40>)
 8001f0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f14:	2003      	movs	r0, #3
 8001f16:	f001 fa96 	bl	8003446 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f1a:	200f      	movs	r0, #15
 8001f1c:	f7ff fec8 	bl	8001cb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f20:	f7ff fb74 	bl	800160c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40023c00 	.word	0x40023c00

08001f30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f34:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <HAL_IncTick+0x20>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <HAL_IncTick+0x24>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4413      	add	r3, r2
 8001f40:	4a04      	ldr	r2, [pc, #16]	; (8001f54 <HAL_IncTick+0x24>)
 8001f42:	6013      	str	r3, [r2, #0]
}
 8001f44:	bf00      	nop
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	20000008 	.word	0x20000008
 8001f54:	200044d0 	.word	0x200044d0

08001f58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f5c:	4b03      	ldr	r3, [pc, #12]	; (8001f6c <HAL_GetTick+0x14>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	200044d0 	.word	0x200044d0

08001f70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f78:	f7ff ffee 	bl	8001f58 <HAL_GetTick>
 8001f7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f88:	d005      	beq.n	8001f96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f8a:	4b0a      	ldr	r3, [pc, #40]	; (8001fb4 <HAL_Delay+0x44>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	4413      	add	r3, r2
 8001f94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f96:	bf00      	nop
 8001f98:	f7ff ffde 	bl	8001f58 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d8f7      	bhi.n	8001f98 <HAL_Delay+0x28>
  {
  }
}
 8001fa8:	bf00      	nop
 8001faa:	bf00      	nop
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20000008 	.word	0x20000008

08001fb8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e033      	b.n	8002036 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d109      	bne.n	8001fea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7ff fb44 	bl	8001664 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	f003 0310 	and.w	r3, r3, #16
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d118      	bne.n	8002028 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ffe:	f023 0302 	bic.w	r3, r3, #2
 8002002:	f043 0202 	orr.w	r2, r3, #2
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 fa68 	bl	80024e0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	f023 0303 	bic.w	r3, r3, #3
 800201e:	f043 0201 	orr.w	r2, r3, #1
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	641a      	str	r2, [r3, #64]	; 0x40
 8002026:	e001      	b.n	800202c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002034:	7bfb      	ldrb	r3, [r7, #15]
}
 8002036:	4618      	mov	r0, r3
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
	...

08002040 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800204c:	2300      	movs	r3, #0
 800204e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002056:	2b01      	cmp	r3, #1
 8002058:	d101      	bne.n	800205e <HAL_ADC_Start_DMA+0x1e>
 800205a:	2302      	movs	r3, #2
 800205c:	e0e9      	b.n	8002232 <HAL_ADC_Start_DMA+0x1f2>
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2201      	movs	r2, #1
 8002062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b01      	cmp	r3, #1
 8002072:	d018      	beq.n	80020a6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	689a      	ldr	r2, [r3, #8]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f042 0201 	orr.w	r2, r2, #1
 8002082:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002084:	4b6d      	ldr	r3, [pc, #436]	; (800223c <HAL_ADC_Start_DMA+0x1fc>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a6d      	ldr	r2, [pc, #436]	; (8002240 <HAL_ADC_Start_DMA+0x200>)
 800208a:	fba2 2303 	umull	r2, r3, r2, r3
 800208e:	0c9a      	lsrs	r2, r3, #18
 8002090:	4613      	mov	r3, r2
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	4413      	add	r3, r2
 8002096:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002098:	e002      	b.n	80020a0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	3b01      	subs	r3, #1
 800209e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1f9      	bne.n	800209a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020b4:	d107      	bne.n	80020c6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	f040 80a1 	bne.w	8002218 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80020de:	f023 0301 	bic.w	r3, r3, #1
 80020e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d007      	beq.n	8002108 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002100:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002110:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002114:	d106      	bne.n	8002124 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211a:	f023 0206 	bic.w	r2, r3, #6
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	645a      	str	r2, [r3, #68]	; 0x44
 8002122:	e002      	b.n	800212a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2200      	movs	r2, #0
 8002128:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002132:	4b44      	ldr	r3, [pc, #272]	; (8002244 <HAL_ADC_Start_DMA+0x204>)
 8002134:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800213a:	4a43      	ldr	r2, [pc, #268]	; (8002248 <HAL_ADC_Start_DMA+0x208>)
 800213c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002142:	4a42      	ldr	r2, [pc, #264]	; (800224c <HAL_ADC_Start_DMA+0x20c>)
 8002144:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800214a:	4a41      	ldr	r2, [pc, #260]	; (8002250 <HAL_ADC_Start_DMA+0x210>)
 800214c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002156:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	685a      	ldr	r2, [r3, #4]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002166:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	689a      	ldr	r2, [r3, #8]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002176:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	334c      	adds	r3, #76	; 0x4c
 8002182:	4619      	mov	r1, r3
 8002184:	68ba      	ldr	r2, [r7, #8]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f001 fa40 	bl	800360c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 031f 	and.w	r3, r3, #31
 8002194:	2b00      	cmp	r3, #0
 8002196:	d12a      	bne.n	80021ee <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a2d      	ldr	r2, [pc, #180]	; (8002254 <HAL_ADC_Start_DMA+0x214>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d015      	beq.n	80021ce <HAL_ADC_Start_DMA+0x18e>
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a2c      	ldr	r2, [pc, #176]	; (8002258 <HAL_ADC_Start_DMA+0x218>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d105      	bne.n	80021b8 <HAL_ADC_Start_DMA+0x178>
 80021ac:	4b25      	ldr	r3, [pc, #148]	; (8002244 <HAL_ADC_Start_DMA+0x204>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f003 031f 	and.w	r3, r3, #31
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d00a      	beq.n	80021ce <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a27      	ldr	r2, [pc, #156]	; (800225c <HAL_ADC_Start_DMA+0x21c>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d136      	bne.n	8002230 <HAL_ADC_Start_DMA+0x1f0>
 80021c2:	4b20      	ldr	r3, [pc, #128]	; (8002244 <HAL_ADC_Start_DMA+0x204>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f003 0310 	and.w	r3, r3, #16
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d130      	bne.n	8002230 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d129      	bne.n	8002230 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	689a      	ldr	r2, [r3, #8]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80021ea:	609a      	str	r2, [r3, #8]
 80021ec:	e020      	b.n	8002230 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a18      	ldr	r2, [pc, #96]	; (8002254 <HAL_ADC_Start_DMA+0x214>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d11b      	bne.n	8002230 <HAL_ADC_Start_DMA+0x1f0>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d114      	bne.n	8002230 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002214:	609a      	str	r2, [r3, #8]
 8002216:	e00b      	b.n	8002230 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221c:	f043 0210 	orr.w	r2, r3, #16
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002228:	f043 0201 	orr.w	r2, r3, #1
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3718      	adds	r7, #24
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	20000000 	.word	0x20000000
 8002240:	431bde83 	.word	0x431bde83
 8002244:	40012300 	.word	0x40012300
 8002248:	080026d9 	.word	0x080026d9
 800224c:	08002793 	.word	0x08002793
 8002250:	080027af 	.word	0x080027af
 8002254:	40012000 	.word	0x40012000
 8002258:	40012100 	.word	0x40012100
 800225c:	40012200 	.word	0x40012200

08002260 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d101      	bne.n	80022b8 <HAL_ADC_ConfigChannel+0x1c>
 80022b4:	2302      	movs	r3, #2
 80022b6:	e105      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x228>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2b09      	cmp	r3, #9
 80022c6:	d925      	bls.n	8002314 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68d9      	ldr	r1, [r3, #12]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	461a      	mov	r2, r3
 80022d6:	4613      	mov	r3, r2
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	4413      	add	r3, r2
 80022dc:	3b1e      	subs	r3, #30
 80022de:	2207      	movs	r2, #7
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	43da      	mvns	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	400a      	ands	r2, r1
 80022ec:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68d9      	ldr	r1, [r3, #12]
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	4618      	mov	r0, r3
 8002300:	4603      	mov	r3, r0
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	4403      	add	r3, r0
 8002306:	3b1e      	subs	r3, #30
 8002308:	409a      	lsls	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	430a      	orrs	r2, r1
 8002310:	60da      	str	r2, [r3, #12]
 8002312:	e022      	b.n	800235a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6919      	ldr	r1, [r3, #16]
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	b29b      	uxth	r3, r3
 8002320:	461a      	mov	r2, r3
 8002322:	4613      	mov	r3, r2
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	4413      	add	r3, r2
 8002328:	2207      	movs	r2, #7
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	43da      	mvns	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	400a      	ands	r2, r1
 8002336:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6919      	ldr	r1, [r3, #16]
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	689a      	ldr	r2, [r3, #8]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	b29b      	uxth	r3, r3
 8002348:	4618      	mov	r0, r3
 800234a:	4603      	mov	r3, r0
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	4403      	add	r3, r0
 8002350:	409a      	lsls	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	430a      	orrs	r2, r1
 8002358:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b06      	cmp	r3, #6
 8002360:	d824      	bhi.n	80023ac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	4613      	mov	r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	4413      	add	r3, r2
 8002372:	3b05      	subs	r3, #5
 8002374:	221f      	movs	r2, #31
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	43da      	mvns	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	400a      	ands	r2, r1
 8002382:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	b29b      	uxth	r3, r3
 8002390:	4618      	mov	r0, r3
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685a      	ldr	r2, [r3, #4]
 8002396:	4613      	mov	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	4413      	add	r3, r2
 800239c:	3b05      	subs	r3, #5
 800239e:	fa00 f203 	lsl.w	r2, r0, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	430a      	orrs	r2, r1
 80023a8:	635a      	str	r2, [r3, #52]	; 0x34
 80023aa:	e04c      	b.n	8002446 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	2b0c      	cmp	r3, #12
 80023b2:	d824      	bhi.n	80023fe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	4613      	mov	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4413      	add	r3, r2
 80023c4:	3b23      	subs	r3, #35	; 0x23
 80023c6:	221f      	movs	r2, #31
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	43da      	mvns	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	400a      	ands	r2, r1
 80023d4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	4618      	mov	r0, r3
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	4613      	mov	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4413      	add	r3, r2
 80023ee:	3b23      	subs	r3, #35	; 0x23
 80023f0:	fa00 f203 	lsl.w	r2, r0, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	430a      	orrs	r2, r1
 80023fa:	631a      	str	r2, [r3, #48]	; 0x30
 80023fc:	e023      	b.n	8002446 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685a      	ldr	r2, [r3, #4]
 8002408:	4613      	mov	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4413      	add	r3, r2
 800240e:	3b41      	subs	r3, #65	; 0x41
 8002410:	221f      	movs	r2, #31
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	43da      	mvns	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	400a      	ands	r2, r1
 800241e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	b29b      	uxth	r3, r3
 800242c:	4618      	mov	r0, r3
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	4613      	mov	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4413      	add	r3, r2
 8002438:	3b41      	subs	r3, #65	; 0x41
 800243a:	fa00 f203 	lsl.w	r2, r0, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	430a      	orrs	r2, r1
 8002444:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002446:	4b22      	ldr	r3, [pc, #136]	; (80024d0 <HAL_ADC_ConfigChannel+0x234>)
 8002448:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a21      	ldr	r2, [pc, #132]	; (80024d4 <HAL_ADC_ConfigChannel+0x238>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d109      	bne.n	8002468 <HAL_ADC_ConfigChannel+0x1cc>
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2b12      	cmp	r3, #18
 800245a:	d105      	bne.n	8002468 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a19      	ldr	r2, [pc, #100]	; (80024d4 <HAL_ADC_ConfigChannel+0x238>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d123      	bne.n	80024ba <HAL_ADC_ConfigChannel+0x21e>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2b10      	cmp	r3, #16
 8002478:	d003      	beq.n	8002482 <HAL_ADC_ConfigChannel+0x1e6>
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2b11      	cmp	r3, #17
 8002480:	d11b      	bne.n	80024ba <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2b10      	cmp	r3, #16
 8002494:	d111      	bne.n	80024ba <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002496:	4b10      	ldr	r3, [pc, #64]	; (80024d8 <HAL_ADC_ConfigChannel+0x23c>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a10      	ldr	r2, [pc, #64]	; (80024dc <HAL_ADC_ConfigChannel+0x240>)
 800249c:	fba2 2303 	umull	r2, r3, r2, r3
 80024a0:	0c9a      	lsrs	r2, r3, #18
 80024a2:	4613      	mov	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4413      	add	r3, r2
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024ac:	e002      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	3b01      	subs	r3, #1
 80024b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1f9      	bne.n	80024ae <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3714      	adds	r7, #20
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr
 80024d0:	40012300 	.word	0x40012300
 80024d4:	40012000 	.word	0x40012000
 80024d8:	20000000 	.word	0x20000000
 80024dc:	431bde83 	.word	0x431bde83

080024e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024e8:	4b79      	ldr	r3, [pc, #484]	; (80026d0 <ADC_Init+0x1f0>)
 80024ea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	685a      	ldr	r2, [r3, #4]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	431a      	orrs	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002514:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6859      	ldr	r1, [r3, #4]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	021a      	lsls	r2, r3, #8
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	430a      	orrs	r2, r1
 8002528:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	685a      	ldr	r2, [r3, #4]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002538:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	6859      	ldr	r1, [r3, #4]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689a      	ldr	r2, [r3, #8]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	430a      	orrs	r2, r1
 800254a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	689a      	ldr	r2, [r3, #8]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800255a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6899      	ldr	r1, [r3, #8]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68da      	ldr	r2, [r3, #12]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	430a      	orrs	r2, r1
 800256c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002572:	4a58      	ldr	r2, [pc, #352]	; (80026d4 <ADC_Init+0x1f4>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d022      	beq.n	80025be <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	689a      	ldr	r2, [r3, #8]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002586:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6899      	ldr	r1, [r3, #8]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	430a      	orrs	r2, r1
 8002598:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	689a      	ldr	r2, [r3, #8]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	6899      	ldr	r1, [r3, #8]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	430a      	orrs	r2, r1
 80025ba:	609a      	str	r2, [r3, #8]
 80025bc:	e00f      	b.n	80025de <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	689a      	ldr	r2, [r3, #8]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 0202 	bic.w	r2, r2, #2
 80025ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	6899      	ldr	r1, [r3, #8]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	7e1b      	ldrb	r3, [r3, #24]
 80025f8:	005a      	lsls	r2, r3, #1
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	430a      	orrs	r2, r1
 8002600:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d01b      	beq.n	8002644 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	685a      	ldr	r2, [r3, #4]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800261a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	685a      	ldr	r2, [r3, #4]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800262a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6859      	ldr	r1, [r3, #4]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002636:	3b01      	subs	r3, #1
 8002638:	035a      	lsls	r2, r3, #13
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	430a      	orrs	r2, r1
 8002640:	605a      	str	r2, [r3, #4]
 8002642:	e007      	b.n	8002654 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	685a      	ldr	r2, [r3, #4]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002652:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002662:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	3b01      	subs	r3, #1
 8002670:	051a      	lsls	r2, r3, #20
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	430a      	orrs	r2, r1
 8002678:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002688:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	6899      	ldr	r1, [r3, #8]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002696:	025a      	lsls	r2, r3, #9
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	430a      	orrs	r2, r1
 800269e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	689a      	ldr	r2, [r3, #8]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6899      	ldr	r1, [r3, #8]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	029a      	lsls	r2, r3, #10
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	430a      	orrs	r2, r1
 80026c2:	609a      	str	r2, [r3, #8]
}
 80026c4:	bf00      	nop
 80026c6:	3714      	adds	r7, #20
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr
 80026d0:	40012300 	.word	0x40012300
 80026d4:	0f000001 	.word	0x0f000001

080026d8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d13c      	bne.n	800276c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d12b      	bne.n	8002764 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002710:	2b00      	cmp	r3, #0
 8002712:	d127      	bne.n	8002764 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800271e:	2b00      	cmp	r3, #0
 8002720:	d006      	beq.n	8002730 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800272c:	2b00      	cmp	r3, #0
 800272e:	d119      	bne.n	8002764 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	685a      	ldr	r2, [r3, #4]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 0220 	bic.w	r2, r2, #32
 800273e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002744:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002750:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d105      	bne.n	8002764 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275c:	f043 0201 	orr.w	r2, r3, #1
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002764:	68f8      	ldr	r0, [r7, #12]
 8002766:	f7ff fd7b 	bl	8002260 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800276a:	e00e      	b.n	800278a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002770:	f003 0310 	and.w	r3, r3, #16
 8002774:	2b00      	cmp	r3, #0
 8002776:	d003      	beq.n	8002780 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f7ff fd85 	bl	8002288 <HAL_ADC_ErrorCallback>
}
 800277e:	e004      	b.n	800278a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	4798      	blx	r3
}
 800278a:	bf00      	nop
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b084      	sub	sp, #16
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800279e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80027a0:	68f8      	ldr	r0, [r7, #12]
 80027a2:	f7ff fd67 	bl	8002274 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027a6:	bf00      	nop
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b084      	sub	sp, #16
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ba:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2240      	movs	r2, #64	; 0x40
 80027c0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c6:	f043 0204 	orr.w	r2, r3, #4
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80027ce:	68f8      	ldr	r0, [r7, #12]
 80027d0:	f7ff fd5a 	bl	8002288 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027d4:	bf00      	nop
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e0ed      	b.n	80029ca <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d102      	bne.n	8002800 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f7ff f890 	bl	8001920 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f042 0201 	orr.w	r2, r2, #1
 800280e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002810:	f7ff fba2 	bl	8001f58 <HAL_GetTick>
 8002814:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002816:	e012      	b.n	800283e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002818:	f7ff fb9e 	bl	8001f58 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b0a      	cmp	r3, #10
 8002824:	d90b      	bls.n	800283e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2205      	movs	r2, #5
 8002836:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e0c5      	b.n	80029ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	2b00      	cmp	r3, #0
 800284a:	d0e5      	beq.n	8002818 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 0202 	bic.w	r2, r2, #2
 800285a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800285c:	f7ff fb7c 	bl	8001f58 <HAL_GetTick>
 8002860:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002862:	e012      	b.n	800288a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002864:	f7ff fb78 	bl	8001f58 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b0a      	cmp	r3, #10
 8002870:	d90b      	bls.n	800288a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002876:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2205      	movs	r2, #5
 8002882:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e09f      	b.n	80029ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1e5      	bne.n	8002864 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	7e1b      	ldrb	r3, [r3, #24]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d108      	bne.n	80028b2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028ae:	601a      	str	r2, [r3, #0]
 80028b0:	e007      	b.n	80028c2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	7e5b      	ldrb	r3, [r3, #25]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d108      	bne.n	80028dc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	e007      	b.n	80028ec <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	7e9b      	ldrb	r3, [r3, #26]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d108      	bne.n	8002906 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f042 0220 	orr.w	r2, r2, #32
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	e007      	b.n	8002916 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f022 0220 	bic.w	r2, r2, #32
 8002914:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	7edb      	ldrb	r3, [r3, #27]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d108      	bne.n	8002930 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f022 0210 	bic.w	r2, r2, #16
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	e007      	b.n	8002940 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f042 0210 	orr.w	r2, r2, #16
 800293e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	7f1b      	ldrb	r3, [r3, #28]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d108      	bne.n	800295a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f042 0208 	orr.w	r2, r2, #8
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	e007      	b.n	800296a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 0208 	bic.w	r2, r2, #8
 8002968:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	7f5b      	ldrb	r3, [r3, #29]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d108      	bne.n	8002984 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f042 0204 	orr.w	r2, r2, #4
 8002980:	601a      	str	r2, [r3, #0]
 8002982:	e007      	b.n	8002994 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f022 0204 	bic.w	r2, r2, #4
 8002992:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	431a      	orrs	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	431a      	orrs	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	ea42 0103 	orr.w	r1, r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	1e5a      	subs	r2, r3, #1
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	430a      	orrs	r2, r1
 80029b8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
	...

080029d4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b087      	sub	sp, #28
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029ea:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80029ec:	7cfb      	ldrb	r3, [r7, #19]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d003      	beq.n	80029fa <HAL_CAN_ConfigFilter+0x26>
 80029f2:	7cfb      	ldrb	r3, [r7, #19]
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	f040 80be 	bne.w	8002b76 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80029fa:	4b65      	ldr	r3, [pc, #404]	; (8002b90 <HAL_CAN_ConfigFilter+0x1bc>)
 80029fc:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a04:	f043 0201 	orr.w	r2, r3, #1
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a14:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a28:	021b      	lsls	r3, r3, #8
 8002a2a:	431a      	orrs	r2, r3
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	f003 031f 	and.w	r3, r3, #31
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	43db      	mvns	r3, r3
 8002a4c:	401a      	ands	r2, r3
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	69db      	ldr	r3, [r3, #28]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d123      	bne.n	8002aa4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	43db      	mvns	r3, r3
 8002a66:	401a      	ands	r2, r3
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a7a:	683a      	ldr	r2, [r7, #0]
 8002a7c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002a7e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	3248      	adds	r2, #72	; 0x48
 8002a84:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002a98:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002a9a:	6979      	ldr	r1, [r7, #20]
 8002a9c:	3348      	adds	r3, #72	; 0x48
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	440b      	add	r3, r1
 8002aa2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	69db      	ldr	r3, [r3, #28]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d122      	bne.n	8002af2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002acc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	3248      	adds	r2, #72	; 0x48
 8002ad2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ae6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002ae8:	6979      	ldr	r1, [r7, #20]
 8002aea:	3348      	adds	r3, #72	; 0x48
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	440b      	add	r3, r1
 8002af0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d109      	bne.n	8002b0e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	43db      	mvns	r3, r3
 8002b04:	401a      	ands	r2, r3
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002b0c:	e007      	b.n	8002b1e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	431a      	orrs	r2, r3
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d109      	bne.n	8002b3a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	43db      	mvns	r3, r3
 8002b30:	401a      	ands	r2, r3
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002b38:	e007      	b.n	8002b4a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	431a      	orrs	r2, r3
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d107      	bne.n	8002b62 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002b68:	f023 0201 	bic.w	r2, r3, #1
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002b72:	2300      	movs	r3, #0
 8002b74:	e006      	b.n	8002b84 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
  }
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	371c      	adds	r7, #28
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr
 8002b90:	40006400 	.word	0x40006400

08002b94 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d12e      	bne.n	8002c06 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2202      	movs	r2, #2
 8002bac:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f022 0201 	bic.w	r2, r2, #1
 8002bbe:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002bc0:	f7ff f9ca 	bl	8001f58 <HAL_GetTick>
 8002bc4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002bc6:	e012      	b.n	8002bee <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002bc8:	f7ff f9c6 	bl	8001f58 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b0a      	cmp	r3, #10
 8002bd4:	d90b      	bls.n	8002bee <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bda:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2205      	movs	r2, #5
 8002be6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e012      	b.n	8002c14 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1e5      	bne.n	8002bc8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002c02:	2300      	movs	r3, #0
 8002c04:	e006      	b.n	8002c14 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
  }
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3710      	adds	r7, #16
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b087      	sub	sp, #28
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
 8002c28:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c30:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002c32:	7dfb      	ldrb	r3, [r7, #23]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d003      	beq.n	8002c40 <HAL_CAN_GetRxMessage+0x24>
 8002c38:	7dfb      	ldrb	r3, [r7, #23]
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	f040 80f3 	bne.w	8002e26 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10e      	bne.n	8002c64 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	f003 0303 	and.w	r3, r3, #3
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d116      	bne.n	8002c82 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c58:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e0e7      	b.n	8002e34 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	f003 0303 	and.w	r3, r3, #3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d107      	bne.n	8002c82 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e0d8      	b.n	8002e34 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	331b      	adds	r3, #27
 8002c8a:	011b      	lsls	r3, r3, #4
 8002c8c:	4413      	add	r3, r2
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0204 	and.w	r2, r3, #4
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d10c      	bne.n	8002cba <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	331b      	adds	r3, #27
 8002ca8:	011b      	lsls	r3, r3, #4
 8002caa:	4413      	add	r3, r2
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	0d5b      	lsrs	r3, r3, #21
 8002cb0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	e00b      	b.n	8002cd2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	331b      	adds	r3, #27
 8002cc2:	011b      	lsls	r3, r3, #4
 8002cc4:	4413      	add	r3, r2
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	08db      	lsrs	r3, r3, #3
 8002cca:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	331b      	adds	r3, #27
 8002cda:	011b      	lsls	r3, r3, #4
 8002cdc:	4413      	add	r3, r2
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0202 	and.w	r2, r3, #2
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	331b      	adds	r3, #27
 8002cf0:	011b      	lsls	r3, r3, #4
 8002cf2:	4413      	add	r3, r2
 8002cf4:	3304      	adds	r3, #4
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 020f 	and.w	r2, r3, #15
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	331b      	adds	r3, #27
 8002d08:	011b      	lsls	r3, r3, #4
 8002d0a:	4413      	add	r3, r2
 8002d0c:	3304      	adds	r3, #4
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	0a1b      	lsrs	r3, r3, #8
 8002d12:	b2da      	uxtb	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	331b      	adds	r3, #27
 8002d20:	011b      	lsls	r3, r3, #4
 8002d22:	4413      	add	r3, r2
 8002d24:	3304      	adds	r3, #4
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	0c1b      	lsrs	r3, r3, #16
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	011b      	lsls	r3, r3, #4
 8002d38:	4413      	add	r3, r2
 8002d3a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	b2da      	uxtb	r2, r3
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	011b      	lsls	r3, r3, #4
 8002d4e:	4413      	add	r3, r2
 8002d50:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	0a1a      	lsrs	r2, r3, #8
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	b2d2      	uxtb	r2, r2
 8002d5e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	011b      	lsls	r3, r3, #4
 8002d68:	4413      	add	r3, r2
 8002d6a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	0c1a      	lsrs	r2, r3, #16
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	3302      	adds	r3, #2
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	011b      	lsls	r3, r3, #4
 8002d82:	4413      	add	r3, r2
 8002d84:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	0e1a      	lsrs	r2, r3, #24
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	3303      	adds	r3, #3
 8002d90:	b2d2      	uxtb	r2, r2
 8002d92:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	011b      	lsls	r3, r3, #4
 8002d9c:	4413      	add	r3, r2
 8002d9e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	3304      	adds	r3, #4
 8002da8:	b2d2      	uxtb	r2, r2
 8002daa:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	011b      	lsls	r3, r3, #4
 8002db4:	4413      	add	r3, r2
 8002db6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	0a1a      	lsrs	r2, r3, #8
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	3305      	adds	r3, #5
 8002dc2:	b2d2      	uxtb	r2, r2
 8002dc4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	011b      	lsls	r3, r3, #4
 8002dce:	4413      	add	r3, r2
 8002dd0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	0c1a      	lsrs	r2, r3, #16
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	3306      	adds	r3, #6
 8002ddc:	b2d2      	uxtb	r2, r2
 8002dde:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	011b      	lsls	r3, r3, #4
 8002de8:	4413      	add	r3, r2
 8002dea:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	0e1a      	lsrs	r2, r3, #24
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	3307      	adds	r3, #7
 8002df6:	b2d2      	uxtb	r2, r2
 8002df8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d108      	bne.n	8002e12 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68da      	ldr	r2, [r3, #12]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f042 0220 	orr.w	r2, r2, #32
 8002e0e:	60da      	str	r2, [r3, #12]
 8002e10:	e007      	b.n	8002e22 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	691a      	ldr	r2, [r3, #16]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f042 0220 	orr.w	r2, r2, #32
 8002e20:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002e22:	2300      	movs	r3, #0
 8002e24:	e006      	b.n	8002e34 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
  }
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	371c      	adds	r7, #28
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e50:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002e52:	7bfb      	ldrb	r3, [r7, #15]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d002      	beq.n	8002e5e <HAL_CAN_ActivateNotification+0x1e>
 8002e58:	7bfb      	ldrb	r3, [r7, #15]
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d109      	bne.n	8002e72 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6959      	ldr	r1, [r3, #20]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	e006      	b.n	8002e80 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e76:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
  }
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3714      	adds	r7, #20
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b08a      	sub	sp, #40	; 0x28
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002e94:	2300      	movs	r3, #0
 8002e96:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002ec8:	6a3b      	ldr	r3, [r7, #32]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d07c      	beq.n	8002fcc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	f003 0301 	and.w	r3, r3, #1
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d023      	beq.n	8002f24 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 f983 	bl	80031fa <HAL_CAN_TxMailbox0CompleteCallback>
 8002ef4:	e016      	b.n	8002f24 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d004      	beq.n	8002f0a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f02:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f06:	627b      	str	r3, [r7, #36]	; 0x24
 8002f08:	e00c      	b.n	8002f24 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	f003 0308 	and.w	r3, r3, #8
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d004      	beq.n	8002f1e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f16:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f1c:	e002      	b.n	8002f24 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 f989 	bl	8003236 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d024      	beq.n	8002f78 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f36:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 f963 	bl	800320e <HAL_CAN_TxMailbox1CompleteCallback>
 8002f48:	e016      	b.n	8002f78 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d004      	beq.n	8002f5e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f56:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f5a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f5c:	e00c      	b.n	8002f78 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d004      	beq.n	8002f72 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f70:	e002      	b.n	8002f78 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 f969 	bl	800324a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d024      	beq.n	8002fcc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002f8a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 f943 	bl	8003222 <HAL_CAN_TxMailbox2CompleteCallback>
 8002f9c:	e016      	b.n	8002fcc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d004      	beq.n	8002fb2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002faa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fae:	627b      	str	r3, [r7, #36]	; 0x24
 8002fb0:	e00c      	b.n	8002fcc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d004      	beq.n	8002fc6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc2:	627b      	str	r3, [r7, #36]	; 0x24
 8002fc4:	e002      	b.n	8002fcc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 f949 	bl	800325e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002fcc:	6a3b      	ldr	r3, [r7, #32]
 8002fce:	f003 0308 	and.w	r3, r3, #8
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00c      	beq.n	8002ff0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	f003 0310 	and.w	r3, r3, #16
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d007      	beq.n	8002ff0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fe6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2210      	movs	r2, #16
 8002fee:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002ff0:	6a3b      	ldr	r3, [r7, #32]
 8002ff2:	f003 0304 	and.w	r3, r3, #4
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00b      	beq.n	8003012 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	f003 0308 	and.w	r3, r3, #8
 8003000:	2b00      	cmp	r3, #0
 8003002:	d006      	beq.n	8003012 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2208      	movs	r2, #8
 800300a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 f930 	bl	8003272 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003012:	6a3b      	ldr	r3, [r7, #32]
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d009      	beq.n	8003030 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	f003 0303 	and.w	r3, r3, #3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d002      	beq.n	8003030 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7fd fdc4 	bl	8000bb8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003030:	6a3b      	ldr	r3, [r7, #32]
 8003032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00c      	beq.n	8003054 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	f003 0310 	and.w	r3, r3, #16
 8003040:	2b00      	cmp	r3, #0
 8003042:	d007      	beq.n	8003054 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003046:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800304a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2210      	movs	r2, #16
 8003052:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003054:	6a3b      	ldr	r3, [r7, #32]
 8003056:	f003 0320 	and.w	r3, r3, #32
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00b      	beq.n	8003076 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	f003 0308 	and.w	r3, r3, #8
 8003064:	2b00      	cmp	r3, #0
 8003066:	d006      	beq.n	8003076 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2208      	movs	r2, #8
 800306e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 f912 	bl	800329a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003076:	6a3b      	ldr	r3, [r7, #32]
 8003078:	f003 0310 	and.w	r3, r3, #16
 800307c:	2b00      	cmp	r3, #0
 800307e:	d009      	beq.n	8003094 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	f003 0303 	and.w	r3, r3, #3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d002      	beq.n	8003094 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 f8f9 	bl	8003286 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003094:	6a3b      	ldr	r3, [r7, #32]
 8003096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00b      	beq.n	80030b6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	f003 0310 	and.w	r3, r3, #16
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d006      	beq.n	80030b6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2210      	movs	r2, #16
 80030ae:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 f8fc 	bl	80032ae <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80030b6:	6a3b      	ldr	r3, [r7, #32]
 80030b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00b      	beq.n	80030d8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	f003 0308 	and.w	r3, r3, #8
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d006      	beq.n	80030d8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2208      	movs	r2, #8
 80030d0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 f8f5 	bl	80032c2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80030d8:	6a3b      	ldr	r3, [r7, #32]
 80030da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d07b      	beq.n	80031da <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	f003 0304 	and.w	r3, r3, #4
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d072      	beq.n	80031d2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80030ec:	6a3b      	ldr	r3, [r7, #32]
 80030ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d008      	beq.n	8003108 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d003      	beq.n	8003108 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003102:	f043 0301 	orr.w	r3, r3, #1
 8003106:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003108:	6a3b      	ldr	r3, [r7, #32]
 800310a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800310e:	2b00      	cmp	r3, #0
 8003110:	d008      	beq.n	8003124 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003118:	2b00      	cmp	r3, #0
 800311a:	d003      	beq.n	8003124 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800311c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311e:	f043 0302 	orr.w	r3, r3, #2
 8003122:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003124:	6a3b      	ldr	r3, [r7, #32]
 8003126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800312a:	2b00      	cmp	r3, #0
 800312c:	d008      	beq.n	8003140 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003134:	2b00      	cmp	r3, #0
 8003136:	d003      	beq.n	8003140 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313a:	f043 0304 	orr.w	r3, r3, #4
 800313e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003140:	6a3b      	ldr	r3, [r7, #32]
 8003142:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003146:	2b00      	cmp	r3, #0
 8003148:	d043      	beq.n	80031d2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003150:	2b00      	cmp	r3, #0
 8003152:	d03e      	beq.n	80031d2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800315a:	2b60      	cmp	r3, #96	; 0x60
 800315c:	d02b      	beq.n	80031b6 <HAL_CAN_IRQHandler+0x32a>
 800315e:	2b60      	cmp	r3, #96	; 0x60
 8003160:	d82e      	bhi.n	80031c0 <HAL_CAN_IRQHandler+0x334>
 8003162:	2b50      	cmp	r3, #80	; 0x50
 8003164:	d022      	beq.n	80031ac <HAL_CAN_IRQHandler+0x320>
 8003166:	2b50      	cmp	r3, #80	; 0x50
 8003168:	d82a      	bhi.n	80031c0 <HAL_CAN_IRQHandler+0x334>
 800316a:	2b40      	cmp	r3, #64	; 0x40
 800316c:	d019      	beq.n	80031a2 <HAL_CAN_IRQHandler+0x316>
 800316e:	2b40      	cmp	r3, #64	; 0x40
 8003170:	d826      	bhi.n	80031c0 <HAL_CAN_IRQHandler+0x334>
 8003172:	2b30      	cmp	r3, #48	; 0x30
 8003174:	d010      	beq.n	8003198 <HAL_CAN_IRQHandler+0x30c>
 8003176:	2b30      	cmp	r3, #48	; 0x30
 8003178:	d822      	bhi.n	80031c0 <HAL_CAN_IRQHandler+0x334>
 800317a:	2b10      	cmp	r3, #16
 800317c:	d002      	beq.n	8003184 <HAL_CAN_IRQHandler+0x2f8>
 800317e:	2b20      	cmp	r3, #32
 8003180:	d005      	beq.n	800318e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003182:	e01d      	b.n	80031c0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003186:	f043 0308 	orr.w	r3, r3, #8
 800318a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800318c:	e019      	b.n	80031c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003190:	f043 0310 	orr.w	r3, r3, #16
 8003194:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003196:	e014      	b.n	80031c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319a:	f043 0320 	orr.w	r3, r3, #32
 800319e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80031a0:	e00f      	b.n	80031c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80031a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80031aa:	e00a      	b.n	80031c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80031ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80031b4:	e005      	b.n	80031c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80031b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80031be:	e000      	b.n	80031c2 <HAL_CAN_IRQHandler+0x336>
            break;
 80031c0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	699a      	ldr	r2, [r3, #24]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80031d0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2204      	movs	r2, #4
 80031d8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80031da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d008      	beq.n	80031f2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e6:	431a      	orrs	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 f872 	bl	80032d6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80031f2:	bf00      	nop
 80031f4:	3728      	adds	r7, #40	; 0x28
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80031fa:	b480      	push	{r7}
 80031fc:	b083      	sub	sp, #12
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003202:	bf00      	nop
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800320e:	b480      	push	{r7}
 8003210:	b083      	sub	sp, #12
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003216:	bf00      	nop
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003222:	b480      	push	{r7}
 8003224:	b083      	sub	sp, #12
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800323e:	bf00      	nop
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr

0800324a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800324a:	b480      	push	{r7}
 800324c:	b083      	sub	sp, #12
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003252:	bf00      	nop
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr

0800325e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800325e:	b480      	push	{r7}
 8003260:	b083      	sub	sp, #12
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003266:	bf00      	nop
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr

08003272 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003272:	b480      	push	{r7}
 8003274:	b083      	sub	sp, #12
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800327a:	bf00      	nop
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003286:	b480      	push	{r7}
 8003288:	b083      	sub	sp, #12
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800328e:	bf00      	nop
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr

0800329a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800329a:	b480      	push	{r7}
 800329c:	b083      	sub	sp, #12
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80032a2:	bf00      	nop
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr

080032ae <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b083      	sub	sp, #12
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80032b6:	bf00      	nop
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr

080032c2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80032c2:	b480      	push	{r7}
 80032c4:	b083      	sub	sp, #12
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80032ca:	bf00      	nop
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr

080032d6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80032d6:	b480      	push	{r7}
 80032d8:	b083      	sub	sp, #12
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80032de:	bf00      	nop
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
	...

080032ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f003 0307 	and.w	r3, r3, #7
 80032fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032fc:	4b0c      	ldr	r3, [pc, #48]	; (8003330 <__NVIC_SetPriorityGrouping+0x44>)
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003302:	68ba      	ldr	r2, [r7, #8]
 8003304:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003308:	4013      	ands	r3, r2
 800330a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003314:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800331c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800331e:	4a04      	ldr	r2, [pc, #16]	; (8003330 <__NVIC_SetPriorityGrouping+0x44>)
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	60d3      	str	r3, [r2, #12]
}
 8003324:	bf00      	nop
 8003326:	3714      	adds	r7, #20
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr
 8003330:	e000ed00 	.word	0xe000ed00

08003334 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003338:	4b04      	ldr	r3, [pc, #16]	; (800334c <__NVIC_GetPriorityGrouping+0x18>)
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	0a1b      	lsrs	r3, r3, #8
 800333e:	f003 0307 	and.w	r3, r3, #7
}
 8003342:	4618      	mov	r0, r3
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	e000ed00 	.word	0xe000ed00

08003350 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	4603      	mov	r3, r0
 8003358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800335a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800335e:	2b00      	cmp	r3, #0
 8003360:	db0b      	blt.n	800337a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003362:	79fb      	ldrb	r3, [r7, #7]
 8003364:	f003 021f 	and.w	r2, r3, #31
 8003368:	4907      	ldr	r1, [pc, #28]	; (8003388 <__NVIC_EnableIRQ+0x38>)
 800336a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336e:	095b      	lsrs	r3, r3, #5
 8003370:	2001      	movs	r0, #1
 8003372:	fa00 f202 	lsl.w	r2, r0, r2
 8003376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800337a:	bf00      	nop
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	e000e100 	.word	0xe000e100

0800338c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	4603      	mov	r3, r0
 8003394:	6039      	str	r1, [r7, #0]
 8003396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339c:	2b00      	cmp	r3, #0
 800339e:	db0a      	blt.n	80033b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	b2da      	uxtb	r2, r3
 80033a4:	490c      	ldr	r1, [pc, #48]	; (80033d8 <__NVIC_SetPriority+0x4c>)
 80033a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033aa:	0112      	lsls	r2, r2, #4
 80033ac:	b2d2      	uxtb	r2, r2
 80033ae:	440b      	add	r3, r1
 80033b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033b4:	e00a      	b.n	80033cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	b2da      	uxtb	r2, r3
 80033ba:	4908      	ldr	r1, [pc, #32]	; (80033dc <__NVIC_SetPriority+0x50>)
 80033bc:	79fb      	ldrb	r3, [r7, #7]
 80033be:	f003 030f 	and.w	r3, r3, #15
 80033c2:	3b04      	subs	r3, #4
 80033c4:	0112      	lsls	r2, r2, #4
 80033c6:	b2d2      	uxtb	r2, r2
 80033c8:	440b      	add	r3, r1
 80033ca:	761a      	strb	r2, [r3, #24]
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	e000e100 	.word	0xe000e100
 80033dc:	e000ed00 	.word	0xe000ed00

080033e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b089      	sub	sp, #36	; 0x24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f003 0307 	and.w	r3, r3, #7
 80033f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	f1c3 0307 	rsb	r3, r3, #7
 80033fa:	2b04      	cmp	r3, #4
 80033fc:	bf28      	it	cs
 80033fe:	2304      	movcs	r3, #4
 8003400:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	3304      	adds	r3, #4
 8003406:	2b06      	cmp	r3, #6
 8003408:	d902      	bls.n	8003410 <NVIC_EncodePriority+0x30>
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	3b03      	subs	r3, #3
 800340e:	e000      	b.n	8003412 <NVIC_EncodePriority+0x32>
 8003410:	2300      	movs	r3, #0
 8003412:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003414:	f04f 32ff 	mov.w	r2, #4294967295
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	43da      	mvns	r2, r3
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	401a      	ands	r2, r3
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003428:	f04f 31ff 	mov.w	r1, #4294967295
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	fa01 f303 	lsl.w	r3, r1, r3
 8003432:	43d9      	mvns	r1, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003438:	4313      	orrs	r3, r2
         );
}
 800343a:	4618      	mov	r0, r3
 800343c:	3724      	adds	r7, #36	; 0x24
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b082      	sub	sp, #8
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f7ff ff4c 	bl	80032ec <__NVIC_SetPriorityGrouping>
}
 8003454:	bf00      	nop
 8003456:	3708      	adds	r7, #8
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800345c:	b580      	push	{r7, lr}
 800345e:	b086      	sub	sp, #24
 8003460:	af00      	add	r7, sp, #0
 8003462:	4603      	mov	r3, r0
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
 8003468:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800346a:	2300      	movs	r3, #0
 800346c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800346e:	f7ff ff61 	bl	8003334 <__NVIC_GetPriorityGrouping>
 8003472:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	68b9      	ldr	r1, [r7, #8]
 8003478:	6978      	ldr	r0, [r7, #20]
 800347a:	f7ff ffb1 	bl	80033e0 <NVIC_EncodePriority>
 800347e:	4602      	mov	r2, r0
 8003480:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003484:	4611      	mov	r1, r2
 8003486:	4618      	mov	r0, r3
 8003488:	f7ff ff80 	bl	800338c <__NVIC_SetPriority>
}
 800348c:	bf00      	nop
 800348e:	3718      	adds	r7, #24
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	4603      	mov	r3, r0
 800349c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800349e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7ff ff54 	bl	8003350 <__NVIC_EnableIRQ>
}
 80034a8:	bf00      	nop
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80034b8:	2300      	movs	r3, #0
 80034ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80034bc:	f7fe fd4c 	bl	8001f58 <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d101      	bne.n	80034cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e099      	b.n	8003600 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2202      	movs	r2, #2
 80034d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f022 0201 	bic.w	r2, r2, #1
 80034ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034ec:	e00f      	b.n	800350e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034ee:	f7fe fd33 	bl	8001f58 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b05      	cmp	r3, #5
 80034fa:	d908      	bls.n	800350e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2220      	movs	r2, #32
 8003500:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2203      	movs	r2, #3
 8003506:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e078      	b.n	8003600 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0301 	and.w	r3, r3, #1
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1e8      	bne.n	80034ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003524:	697a      	ldr	r2, [r7, #20]
 8003526:	4b38      	ldr	r3, [pc, #224]	; (8003608 <HAL_DMA_Init+0x158>)
 8003528:	4013      	ands	r3, r2
 800352a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800353a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003546:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003552:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800355a:	697a      	ldr	r2, [r7, #20]
 800355c:	4313      	orrs	r3, r2
 800355e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003564:	2b04      	cmp	r3, #4
 8003566:	d107      	bne.n	8003578 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003570:	4313      	orrs	r3, r2
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	4313      	orrs	r3, r2
 8003576:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	697a      	ldr	r2, [r7, #20]
 800357e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	f023 0307 	bic.w	r3, r3, #7
 800358e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003594:	697a      	ldr	r2, [r7, #20]
 8003596:	4313      	orrs	r3, r2
 8003598:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359e:	2b04      	cmp	r3, #4
 80035a0:	d117      	bne.n	80035d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00e      	beq.n	80035d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 fa6f 	bl	8003a98 <DMA_CheckFifoParam>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d008      	beq.n	80035d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2240      	movs	r2, #64	; 0x40
 80035c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80035ce:	2301      	movs	r3, #1
 80035d0:	e016      	b.n	8003600 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 fa26 	bl	8003a2c <DMA_CalcBaseAndBitshift>
 80035e0:	4603      	mov	r3, r0
 80035e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e8:	223f      	movs	r2, #63	; 0x3f
 80035ea:	409a      	lsls	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3718      	adds	r7, #24
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	f010803f 	.word	0xf010803f

0800360c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
 8003618:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800361a:	2300      	movs	r3, #0
 800361c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003622:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800362a:	2b01      	cmp	r3, #1
 800362c:	d101      	bne.n	8003632 <HAL_DMA_Start_IT+0x26>
 800362e:	2302      	movs	r3, #2
 8003630:	e040      	b.n	80036b4 <HAL_DMA_Start_IT+0xa8>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2201      	movs	r2, #1
 8003636:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b01      	cmp	r3, #1
 8003644:	d12f      	bne.n	80036a6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2202      	movs	r2, #2
 800364a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	68b9      	ldr	r1, [r7, #8]
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f000 f9b8 	bl	80039d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003664:	223f      	movs	r2, #63	; 0x3f
 8003666:	409a      	lsls	r2, r3
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f042 0216 	orr.w	r2, r2, #22
 800367a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003680:	2b00      	cmp	r3, #0
 8003682:	d007      	beq.n	8003694 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f042 0208 	orr.w	r2, r2, #8
 8003692:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f042 0201 	orr.w	r2, r2, #1
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	e005      	b.n	80036b2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80036ae:	2302      	movs	r3, #2
 80036b0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80036b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3718      	adds	r7, #24
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80036c4:	2300      	movs	r3, #0
 80036c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80036c8:	4b92      	ldr	r3, [pc, #584]	; (8003914 <HAL_DMA_IRQHandler+0x258>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a92      	ldr	r2, [pc, #584]	; (8003918 <HAL_DMA_IRQHandler+0x25c>)
 80036ce:	fba2 2303 	umull	r2, r3, r2, r3
 80036d2:	0a9b      	lsrs	r3, r3, #10
 80036d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e6:	2208      	movs	r2, #8
 80036e8:	409a      	lsls	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	4013      	ands	r3, r2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d01a      	beq.n	8003728 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0304 	and.w	r3, r3, #4
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d013      	beq.n	8003728 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f022 0204 	bic.w	r2, r2, #4
 800370e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003714:	2208      	movs	r2, #8
 8003716:	409a      	lsls	r2, r3
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003720:	f043 0201 	orr.w	r2, r3, #1
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800372c:	2201      	movs	r2, #1
 800372e:	409a      	lsls	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	4013      	ands	r3, r2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d012      	beq.n	800375e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00b      	beq.n	800375e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800374a:	2201      	movs	r2, #1
 800374c:	409a      	lsls	r2, r3
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003756:	f043 0202 	orr.w	r2, r3, #2
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003762:	2204      	movs	r2, #4
 8003764:	409a      	lsls	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	4013      	ands	r3, r2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d012      	beq.n	8003794 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00b      	beq.n	8003794 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003780:	2204      	movs	r2, #4
 8003782:	409a      	lsls	r2, r3
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800378c:	f043 0204 	orr.w	r2, r3, #4
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003798:	2210      	movs	r2, #16
 800379a:	409a      	lsls	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	4013      	ands	r3, r2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d043      	beq.n	800382c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0308 	and.w	r3, r3, #8
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d03c      	beq.n	800382c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b6:	2210      	movs	r2, #16
 80037b8:	409a      	lsls	r2, r3
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d018      	beq.n	80037fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d108      	bne.n	80037ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d024      	beq.n	800382c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	4798      	blx	r3
 80037ea:	e01f      	b.n	800382c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d01b      	beq.n	800382c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	4798      	blx	r3
 80037fc:	e016      	b.n	800382c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003808:	2b00      	cmp	r3, #0
 800380a:	d107      	bne.n	800381c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 0208 	bic.w	r2, r2, #8
 800381a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003820:	2b00      	cmp	r3, #0
 8003822:	d003      	beq.n	800382c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003830:	2220      	movs	r2, #32
 8003832:	409a      	lsls	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	4013      	ands	r3, r2
 8003838:	2b00      	cmp	r3, #0
 800383a:	f000 808e 	beq.w	800395a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0310 	and.w	r3, r3, #16
 8003848:	2b00      	cmp	r3, #0
 800384a:	f000 8086 	beq.w	800395a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003852:	2220      	movs	r2, #32
 8003854:	409a      	lsls	r2, r3
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b05      	cmp	r3, #5
 8003864:	d136      	bne.n	80038d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 0216 	bic.w	r2, r2, #22
 8003874:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	695a      	ldr	r2, [r3, #20]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003884:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388a:	2b00      	cmp	r3, #0
 800388c:	d103      	bne.n	8003896 <HAL_DMA_IRQHandler+0x1da>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003892:	2b00      	cmp	r3, #0
 8003894:	d007      	beq.n	80038a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 0208 	bic.w	r2, r2, #8
 80038a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038aa:	223f      	movs	r2, #63	; 0x3f
 80038ac:	409a      	lsls	r2, r3
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d07d      	beq.n	80039c6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	4798      	blx	r3
        }
        return;
 80038d2:	e078      	b.n	80039c6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d01c      	beq.n	800391c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d108      	bne.n	8003902 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d030      	beq.n	800395a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	4798      	blx	r3
 8003900:	e02b      	b.n	800395a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003906:	2b00      	cmp	r3, #0
 8003908:	d027      	beq.n	800395a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	4798      	blx	r3
 8003912:	e022      	b.n	800395a <HAL_DMA_IRQHandler+0x29e>
 8003914:	20000000 	.word	0x20000000
 8003918:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10f      	bne.n	800394a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 0210 	bic.w	r2, r2, #16
 8003938:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800394e:	2b00      	cmp	r3, #0
 8003950:	d003      	beq.n	800395a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800395e:	2b00      	cmp	r3, #0
 8003960:	d032      	beq.n	80039c8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d022      	beq.n	80039b4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2205      	movs	r2, #5
 8003972:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 0201 	bic.w	r2, r2, #1
 8003984:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	3301      	adds	r3, #1
 800398a:	60bb      	str	r3, [r7, #8]
 800398c:	697a      	ldr	r2, [r7, #20]
 800398e:	429a      	cmp	r2, r3
 8003990:	d307      	bcc.n	80039a2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1f2      	bne.n	8003986 <HAL_DMA_IRQHandler+0x2ca>
 80039a0:	e000      	b.n	80039a4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80039a2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d005      	beq.n	80039c8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	4798      	blx	r3
 80039c4:	e000      	b.n	80039c8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80039c6:	bf00      	nop
    }
  }
}
 80039c8:	3718      	adds	r7, #24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop

080039d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
 80039dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80039ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	2b40      	cmp	r3, #64	; 0x40
 80039fc:	d108      	bne.n	8003a10 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68ba      	ldr	r2, [r7, #8]
 8003a0c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003a0e:	e007      	b.n	8003a20 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68ba      	ldr	r2, [r7, #8]
 8003a16:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	60da      	str	r2, [r3, #12]
}
 8003a20:	bf00      	nop
 8003a22:	3714      	adds	r7, #20
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b085      	sub	sp, #20
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	3b10      	subs	r3, #16
 8003a3c:	4a14      	ldr	r2, [pc, #80]	; (8003a90 <DMA_CalcBaseAndBitshift+0x64>)
 8003a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a42:	091b      	lsrs	r3, r3, #4
 8003a44:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a46:	4a13      	ldr	r2, [pc, #76]	; (8003a94 <DMA_CalcBaseAndBitshift+0x68>)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	461a      	mov	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2b03      	cmp	r3, #3
 8003a58:	d909      	bls.n	8003a6e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a62:	f023 0303 	bic.w	r3, r3, #3
 8003a66:	1d1a      	adds	r2, r3, #4
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	659a      	str	r2, [r3, #88]	; 0x58
 8003a6c:	e007      	b.n	8003a7e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a76:	f023 0303 	bic.w	r3, r3, #3
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3714      	adds	r7, #20
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	aaaaaaab 	.word	0xaaaaaaab
 8003a94:	0800e69c 	.word	0x0800e69c

08003a98 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d11f      	bne.n	8003af2 <DMA_CheckFifoParam+0x5a>
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	2b03      	cmp	r3, #3
 8003ab6:	d856      	bhi.n	8003b66 <DMA_CheckFifoParam+0xce>
 8003ab8:	a201      	add	r2, pc, #4	; (adr r2, 8003ac0 <DMA_CheckFifoParam+0x28>)
 8003aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003abe:	bf00      	nop
 8003ac0:	08003ad1 	.word	0x08003ad1
 8003ac4:	08003ae3 	.word	0x08003ae3
 8003ac8:	08003ad1 	.word	0x08003ad1
 8003acc:	08003b67 	.word	0x08003b67
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d046      	beq.n	8003b6a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ae0:	e043      	b.n	8003b6a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003aea:	d140      	bne.n	8003b6e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003af0:	e03d      	b.n	8003b6e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003afa:	d121      	bne.n	8003b40 <DMA_CheckFifoParam+0xa8>
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	2b03      	cmp	r3, #3
 8003b00:	d837      	bhi.n	8003b72 <DMA_CheckFifoParam+0xda>
 8003b02:	a201      	add	r2, pc, #4	; (adr r2, 8003b08 <DMA_CheckFifoParam+0x70>)
 8003b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b08:	08003b19 	.word	0x08003b19
 8003b0c:	08003b1f 	.word	0x08003b1f
 8003b10:	08003b19 	.word	0x08003b19
 8003b14:	08003b31 	.word	0x08003b31
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b1c:	e030      	b.n	8003b80 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d025      	beq.n	8003b76 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b2e:	e022      	b.n	8003b76 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b34:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b38:	d11f      	bne.n	8003b7a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b3e:	e01c      	b.n	8003b7a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d903      	bls.n	8003b4e <DMA_CheckFifoParam+0xb6>
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	2b03      	cmp	r3, #3
 8003b4a:	d003      	beq.n	8003b54 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b4c:	e018      	b.n	8003b80 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	73fb      	strb	r3, [r7, #15]
      break;
 8003b52:	e015      	b.n	8003b80 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00e      	beq.n	8003b7e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	73fb      	strb	r3, [r7, #15]
      break;
 8003b64:	e00b      	b.n	8003b7e <DMA_CheckFifoParam+0xe6>
      break;
 8003b66:	bf00      	nop
 8003b68:	e00a      	b.n	8003b80 <DMA_CheckFifoParam+0xe8>
      break;
 8003b6a:	bf00      	nop
 8003b6c:	e008      	b.n	8003b80 <DMA_CheckFifoParam+0xe8>
      break;
 8003b6e:	bf00      	nop
 8003b70:	e006      	b.n	8003b80 <DMA_CheckFifoParam+0xe8>
      break;
 8003b72:	bf00      	nop
 8003b74:	e004      	b.n	8003b80 <DMA_CheckFifoParam+0xe8>
      break;
 8003b76:	bf00      	nop
 8003b78:	e002      	b.n	8003b80 <DMA_CheckFifoParam+0xe8>
      break;   
 8003b7a:	bf00      	nop
 8003b7c:	e000      	b.n	8003b80 <DMA_CheckFifoParam+0xe8>
      break;
 8003b7e:	bf00      	nop
    }
  } 
  
  return status; 
 8003b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3714      	adds	r7, #20
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop

08003b90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b089      	sub	sp, #36	; 0x24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	61fb      	str	r3, [r7, #28]
 8003baa:	e16b      	b.n	8003e84 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003bac:	2201      	movs	r2, #1
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	f040 815a 	bne.w	8003e7e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f003 0303 	and.w	r3, r3, #3
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d005      	beq.n	8003be2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d130      	bne.n	8003c44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	2203      	movs	r2, #3
 8003bee:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf2:	43db      	mvns	r3, r3
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	68da      	ldr	r2, [r3, #12]
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	fa02 f303 	lsl.w	r3, r2, r3
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	69ba      	ldr	r2, [r7, #24]
 8003c10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c18:	2201      	movs	r2, #1
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c20:	43db      	mvns	r3, r3
 8003c22:	69ba      	ldr	r2, [r7, #24]
 8003c24:	4013      	ands	r3, r2
 8003c26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	091b      	lsrs	r3, r3, #4
 8003c2e:	f003 0201 	and.w	r2, r3, #1
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	fa02 f303 	lsl.w	r3, r2, r3
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f003 0303 	and.w	r3, r3, #3
 8003c4c:	2b03      	cmp	r3, #3
 8003c4e:	d017      	beq.n	8003c80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	005b      	lsls	r3, r3, #1
 8003c5a:	2203      	movs	r2, #3
 8003c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c60:	43db      	mvns	r3, r3
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	4013      	ands	r3, r2
 8003c66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	689a      	ldr	r2, [r3, #8]
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	005b      	lsls	r3, r3, #1
 8003c70:	fa02 f303 	lsl.w	r3, r2, r3
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	69ba      	ldr	r2, [r7, #24]
 8003c7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f003 0303 	and.w	r3, r3, #3
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d123      	bne.n	8003cd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	08da      	lsrs	r2, r3, #3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	3208      	adds	r2, #8
 8003c94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	f003 0307 	and.w	r3, r3, #7
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	220f      	movs	r2, #15
 8003ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca8:	43db      	mvns	r3, r3
 8003caa:	69ba      	ldr	r2, [r7, #24]
 8003cac:	4013      	ands	r3, r2
 8003cae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	691a      	ldr	r2, [r3, #16]
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	f003 0307 	and.w	r3, r3, #7
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	08da      	lsrs	r2, r3, #3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	3208      	adds	r2, #8
 8003cce:	69b9      	ldr	r1, [r7, #24]
 8003cd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	005b      	lsls	r3, r3, #1
 8003cde:	2203      	movs	r2, #3
 8003ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce4:	43db      	mvns	r3, r3
 8003ce6:	69ba      	ldr	r2, [r7, #24]
 8003ce8:	4013      	ands	r3, r2
 8003cea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f003 0203 	and.w	r2, r3, #3
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f000 80b4 	beq.w	8003e7e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d16:	2300      	movs	r3, #0
 8003d18:	60fb      	str	r3, [r7, #12]
 8003d1a:	4b60      	ldr	r3, [pc, #384]	; (8003e9c <HAL_GPIO_Init+0x30c>)
 8003d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1e:	4a5f      	ldr	r2, [pc, #380]	; (8003e9c <HAL_GPIO_Init+0x30c>)
 8003d20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d24:	6453      	str	r3, [r2, #68]	; 0x44
 8003d26:	4b5d      	ldr	r3, [pc, #372]	; (8003e9c <HAL_GPIO_Init+0x30c>)
 8003d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d2e:	60fb      	str	r3, [r7, #12]
 8003d30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d32:	4a5b      	ldr	r2, [pc, #364]	; (8003ea0 <HAL_GPIO_Init+0x310>)
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	089b      	lsrs	r3, r3, #2
 8003d38:	3302      	adds	r3, #2
 8003d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	f003 0303 	and.w	r3, r3, #3
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	220f      	movs	r2, #15
 8003d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4e:	43db      	mvns	r3, r3
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	4013      	ands	r3, r2
 8003d54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a52      	ldr	r2, [pc, #328]	; (8003ea4 <HAL_GPIO_Init+0x314>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d02b      	beq.n	8003db6 <HAL_GPIO_Init+0x226>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a51      	ldr	r2, [pc, #324]	; (8003ea8 <HAL_GPIO_Init+0x318>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d025      	beq.n	8003db2 <HAL_GPIO_Init+0x222>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a50      	ldr	r2, [pc, #320]	; (8003eac <HAL_GPIO_Init+0x31c>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d01f      	beq.n	8003dae <HAL_GPIO_Init+0x21e>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a4f      	ldr	r2, [pc, #316]	; (8003eb0 <HAL_GPIO_Init+0x320>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d019      	beq.n	8003daa <HAL_GPIO_Init+0x21a>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a4e      	ldr	r2, [pc, #312]	; (8003eb4 <HAL_GPIO_Init+0x324>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d013      	beq.n	8003da6 <HAL_GPIO_Init+0x216>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a4d      	ldr	r2, [pc, #308]	; (8003eb8 <HAL_GPIO_Init+0x328>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d00d      	beq.n	8003da2 <HAL_GPIO_Init+0x212>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a4c      	ldr	r2, [pc, #304]	; (8003ebc <HAL_GPIO_Init+0x32c>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d007      	beq.n	8003d9e <HAL_GPIO_Init+0x20e>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a4b      	ldr	r2, [pc, #300]	; (8003ec0 <HAL_GPIO_Init+0x330>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d101      	bne.n	8003d9a <HAL_GPIO_Init+0x20a>
 8003d96:	2307      	movs	r3, #7
 8003d98:	e00e      	b.n	8003db8 <HAL_GPIO_Init+0x228>
 8003d9a:	2308      	movs	r3, #8
 8003d9c:	e00c      	b.n	8003db8 <HAL_GPIO_Init+0x228>
 8003d9e:	2306      	movs	r3, #6
 8003da0:	e00a      	b.n	8003db8 <HAL_GPIO_Init+0x228>
 8003da2:	2305      	movs	r3, #5
 8003da4:	e008      	b.n	8003db8 <HAL_GPIO_Init+0x228>
 8003da6:	2304      	movs	r3, #4
 8003da8:	e006      	b.n	8003db8 <HAL_GPIO_Init+0x228>
 8003daa:	2303      	movs	r3, #3
 8003dac:	e004      	b.n	8003db8 <HAL_GPIO_Init+0x228>
 8003dae:	2302      	movs	r3, #2
 8003db0:	e002      	b.n	8003db8 <HAL_GPIO_Init+0x228>
 8003db2:	2301      	movs	r3, #1
 8003db4:	e000      	b.n	8003db8 <HAL_GPIO_Init+0x228>
 8003db6:	2300      	movs	r3, #0
 8003db8:	69fa      	ldr	r2, [r7, #28]
 8003dba:	f002 0203 	and.w	r2, r2, #3
 8003dbe:	0092      	lsls	r2, r2, #2
 8003dc0:	4093      	lsls	r3, r2
 8003dc2:	69ba      	ldr	r2, [r7, #24]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003dc8:	4935      	ldr	r1, [pc, #212]	; (8003ea0 <HAL_GPIO_Init+0x310>)
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	089b      	lsrs	r3, r3, #2
 8003dce:	3302      	adds	r3, #2
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003dd6:	4b3b      	ldr	r3, [pc, #236]	; (8003ec4 <HAL_GPIO_Init+0x334>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	43db      	mvns	r3, r3
 8003de0:	69ba      	ldr	r2, [r7, #24]
 8003de2:	4013      	ands	r3, r2
 8003de4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d003      	beq.n	8003dfa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003df2:	69ba      	ldr	r2, [r7, #24]
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003dfa:	4a32      	ldr	r2, [pc, #200]	; (8003ec4 <HAL_GPIO_Init+0x334>)
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003e00:	4b30      	ldr	r3, [pc, #192]	; (8003ec4 <HAL_GPIO_Init+0x334>)
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	43db      	mvns	r3, r3
 8003e0a:	69ba      	ldr	r2, [r7, #24]
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d003      	beq.n	8003e24 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e24:	4a27      	ldr	r2, [pc, #156]	; (8003ec4 <HAL_GPIO_Init+0x334>)
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e2a:	4b26      	ldr	r3, [pc, #152]	; (8003ec4 <HAL_GPIO_Init+0x334>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	43db      	mvns	r3, r3
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	4013      	ands	r3, r2
 8003e38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d003      	beq.n	8003e4e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003e46:	69ba      	ldr	r2, [r7, #24]
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e4e:	4a1d      	ldr	r2, [pc, #116]	; (8003ec4 <HAL_GPIO_Init+0x334>)
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e54:	4b1b      	ldr	r3, [pc, #108]	; (8003ec4 <HAL_GPIO_Init+0x334>)
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	43db      	mvns	r3, r3
 8003e5e:	69ba      	ldr	r2, [r7, #24]
 8003e60:	4013      	ands	r3, r2
 8003e62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d003      	beq.n	8003e78 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e78:	4a12      	ldr	r2, [pc, #72]	; (8003ec4 <HAL_GPIO_Init+0x334>)
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	3301      	adds	r3, #1
 8003e82:	61fb      	str	r3, [r7, #28]
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	2b0f      	cmp	r3, #15
 8003e88:	f67f ae90 	bls.w	8003bac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e8c:	bf00      	nop
 8003e8e:	bf00      	nop
 8003e90:	3724      	adds	r7, #36	; 0x24
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	40023800 	.word	0x40023800
 8003ea0:	40013800 	.word	0x40013800
 8003ea4:	40020000 	.word	0x40020000
 8003ea8:	40020400 	.word	0x40020400
 8003eac:	40020800 	.word	0x40020800
 8003eb0:	40020c00 	.word	0x40020c00
 8003eb4:	40021000 	.word	0x40021000
 8003eb8:	40021400 	.word	0x40021400
 8003ebc:	40021800 	.word	0x40021800
 8003ec0:	40021c00 	.word	0x40021c00
 8003ec4:	40013c00 	.word	0x40013c00

08003ec8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	691a      	ldr	r2, [r3, #16]
 8003ed8:	887b      	ldrh	r3, [r7, #2]
 8003eda:	4013      	ands	r3, r2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d002      	beq.n	8003ee6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	73fb      	strb	r3, [r7, #15]
 8003ee4:	e001      	b.n	8003eea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3714      	adds	r7, #20
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	460b      	mov	r3, r1
 8003f02:	807b      	strh	r3, [r7, #2]
 8003f04:	4613      	mov	r3, r2
 8003f06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f08:	787b      	ldrb	r3, [r7, #1]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d003      	beq.n	8003f16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f0e:	887a      	ldrh	r2, [r7, #2]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f14:	e003      	b.n	8003f1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f16:	887b      	ldrh	r3, [r7, #2]
 8003f18:	041a      	lsls	r2, r3, #16
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	619a      	str	r2, [r3, #24]
}
 8003f1e:	bf00      	nop
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr

08003f2a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	b085      	sub	sp, #20
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
 8003f32:	460b      	mov	r3, r1
 8003f34:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f3c:	887a      	ldrh	r2, [r7, #2]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	4013      	ands	r3, r2
 8003f42:	041a      	lsls	r2, r3, #16
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	43d9      	mvns	r1, r3
 8003f48:	887b      	ldrh	r3, [r7, #2]
 8003f4a:	400b      	ands	r3, r1
 8003f4c:	431a      	orrs	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	619a      	str	r2, [r3, #24]
}
 8003f52:	bf00      	nop
 8003f54:	3714      	adds	r7, #20
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr

08003f5e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003f5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f60:	b08f      	sub	sp, #60	; 0x3c
 8003f62:	af0a      	add	r7, sp, #40	; 0x28
 8003f64:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d101      	bne.n	8003f70 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e054      	b.n	800401a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d106      	bne.n	8003f90 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f009 fb62 	bl	800d654 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2203      	movs	r2, #3
 8003f94:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d102      	bne.n	8003faa <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f003 ffce 	bl	8007f50 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	603b      	str	r3, [r7, #0]
 8003fba:	687e      	ldr	r6, [r7, #4]
 8003fbc:	466d      	mov	r5, sp
 8003fbe:	f106 0410 	add.w	r4, r6, #16
 8003fc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fca:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003fce:	e885 0003 	stmia.w	r5, {r0, r1}
 8003fd2:	1d33      	adds	r3, r6, #4
 8003fd4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003fd6:	6838      	ldr	r0, [r7, #0]
 8003fd8:	f003 ff48 	bl	8007e6c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f003 ffc5 	bl	8007f72 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	603b      	str	r3, [r7, #0]
 8003fee:	687e      	ldr	r6, [r7, #4]
 8003ff0:	466d      	mov	r5, sp
 8003ff2:	f106 0410 	add.w	r4, r6, #16
 8003ff6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ff8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ffa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ffc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ffe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004002:	e885 0003 	stmia.w	r5, {r0, r1}
 8004006:	1d33      	adds	r3, r6, #4
 8004008:	cb0e      	ldmia	r3, {r1, r2, r3}
 800400a:	6838      	ldr	r0, [r7, #0]
 800400c:	f004 f92c 	bl	8008268 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3714      	adds	r7, #20
 800401e:	46bd      	mov	sp, r7
 8004020:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004022 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8004022:	b590      	push	{r4, r7, lr}
 8004024:	b089      	sub	sp, #36	; 0x24
 8004026:	af04      	add	r7, sp, #16
 8004028:	6078      	str	r0, [r7, #4]
 800402a:	4608      	mov	r0, r1
 800402c:	4611      	mov	r1, r2
 800402e:	461a      	mov	r2, r3
 8004030:	4603      	mov	r3, r0
 8004032:	70fb      	strb	r3, [r7, #3]
 8004034:	460b      	mov	r3, r1
 8004036:	70bb      	strb	r3, [r7, #2]
 8004038:	4613      	mov	r3, r2
 800403a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004042:	2b01      	cmp	r3, #1
 8004044:	d101      	bne.n	800404a <HAL_HCD_HC_Init+0x28>
 8004046:	2302      	movs	r3, #2
 8004048:	e076      	b.n	8004138 <HAL_HCD_HC_Init+0x116>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8004052:	78fb      	ldrb	r3, [r7, #3]
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	212c      	movs	r1, #44	; 0x2c
 8004058:	fb01 f303 	mul.w	r3, r1, r3
 800405c:	4413      	add	r3, r2
 800405e:	333d      	adds	r3, #61	; 0x3d
 8004060:	2200      	movs	r2, #0
 8004062:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004064:	78fb      	ldrb	r3, [r7, #3]
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	212c      	movs	r1, #44	; 0x2c
 800406a:	fb01 f303 	mul.w	r3, r1, r3
 800406e:	4413      	add	r3, r2
 8004070:	3338      	adds	r3, #56	; 0x38
 8004072:	787a      	ldrb	r2, [r7, #1]
 8004074:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8004076:	78fb      	ldrb	r3, [r7, #3]
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	212c      	movs	r1, #44	; 0x2c
 800407c:	fb01 f303 	mul.w	r3, r1, r3
 8004080:	4413      	add	r3, r2
 8004082:	3340      	adds	r3, #64	; 0x40
 8004084:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004086:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004088:	78fb      	ldrb	r3, [r7, #3]
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	212c      	movs	r1, #44	; 0x2c
 800408e:	fb01 f303 	mul.w	r3, r1, r3
 8004092:	4413      	add	r3, r2
 8004094:	3339      	adds	r3, #57	; 0x39
 8004096:	78fa      	ldrb	r2, [r7, #3]
 8004098:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800409a:	78fb      	ldrb	r3, [r7, #3]
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	212c      	movs	r1, #44	; 0x2c
 80040a0:	fb01 f303 	mul.w	r3, r1, r3
 80040a4:	4413      	add	r3, r2
 80040a6:	333f      	adds	r3, #63	; 0x3f
 80040a8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80040ac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80040ae:	78fb      	ldrb	r3, [r7, #3]
 80040b0:	78ba      	ldrb	r2, [r7, #2]
 80040b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80040b6:	b2d0      	uxtb	r0, r2
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	212c      	movs	r1, #44	; 0x2c
 80040bc:	fb01 f303 	mul.w	r3, r1, r3
 80040c0:	4413      	add	r3, r2
 80040c2:	333a      	adds	r3, #58	; 0x3a
 80040c4:	4602      	mov	r2, r0
 80040c6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80040c8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	da09      	bge.n	80040e4 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80040d0:	78fb      	ldrb	r3, [r7, #3]
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	212c      	movs	r1, #44	; 0x2c
 80040d6:	fb01 f303 	mul.w	r3, r1, r3
 80040da:	4413      	add	r3, r2
 80040dc:	333b      	adds	r3, #59	; 0x3b
 80040de:	2201      	movs	r2, #1
 80040e0:	701a      	strb	r2, [r3, #0]
 80040e2:	e008      	b.n	80040f6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80040e4:	78fb      	ldrb	r3, [r7, #3]
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	212c      	movs	r1, #44	; 0x2c
 80040ea:	fb01 f303 	mul.w	r3, r1, r3
 80040ee:	4413      	add	r3, r2
 80040f0:	333b      	adds	r3, #59	; 0x3b
 80040f2:	2200      	movs	r2, #0
 80040f4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80040f6:	78fb      	ldrb	r3, [r7, #3]
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	212c      	movs	r1, #44	; 0x2c
 80040fc:	fb01 f303 	mul.w	r3, r1, r3
 8004100:	4413      	add	r3, r2
 8004102:	333c      	adds	r3, #60	; 0x3c
 8004104:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004108:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6818      	ldr	r0, [r3, #0]
 800410e:	787c      	ldrb	r4, [r7, #1]
 8004110:	78ba      	ldrb	r2, [r7, #2]
 8004112:	78f9      	ldrb	r1, [r7, #3]
 8004114:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004116:	9302      	str	r3, [sp, #8]
 8004118:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800411c:	9301      	str	r3, [sp, #4]
 800411e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004122:	9300      	str	r3, [sp, #0]
 8004124:	4623      	mov	r3, r4
 8004126:	f004 fa19 	bl	800855c <USB_HC_Init>
 800412a:	4603      	mov	r3, r0
 800412c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004136:	7bfb      	ldrb	r3, [r7, #15]
}
 8004138:	4618      	mov	r0, r3
 800413a:	3714      	adds	r7, #20
 800413c:	46bd      	mov	sp, r7
 800413e:	bd90      	pop	{r4, r7, pc}

08004140 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	460b      	mov	r3, r1
 800414a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800414c:	2300      	movs	r3, #0
 800414e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004156:	2b01      	cmp	r3, #1
 8004158:	d101      	bne.n	800415e <HAL_HCD_HC_Halt+0x1e>
 800415a:	2302      	movs	r3, #2
 800415c:	e00f      	b.n	800417e <HAL_HCD_HC_Halt+0x3e>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2201      	movs	r2, #1
 8004162:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	78fa      	ldrb	r2, [r7, #3]
 800416c:	4611      	mov	r1, r2
 800416e:	4618      	mov	r0, r3
 8004170:	f004 fc55 	bl	8008a1e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800417c:	7bfb      	ldrb	r3, [r7, #15]
}
 800417e:	4618      	mov	r0, r3
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
	...

08004188 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	4608      	mov	r0, r1
 8004192:	4611      	mov	r1, r2
 8004194:	461a      	mov	r2, r3
 8004196:	4603      	mov	r3, r0
 8004198:	70fb      	strb	r3, [r7, #3]
 800419a:	460b      	mov	r3, r1
 800419c:	70bb      	strb	r3, [r7, #2]
 800419e:	4613      	mov	r3, r2
 80041a0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80041a2:	78fb      	ldrb	r3, [r7, #3]
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	212c      	movs	r1, #44	; 0x2c
 80041a8:	fb01 f303 	mul.w	r3, r1, r3
 80041ac:	4413      	add	r3, r2
 80041ae:	333b      	adds	r3, #59	; 0x3b
 80041b0:	78ba      	ldrb	r2, [r7, #2]
 80041b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80041b4:	78fb      	ldrb	r3, [r7, #3]
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	212c      	movs	r1, #44	; 0x2c
 80041ba:	fb01 f303 	mul.w	r3, r1, r3
 80041be:	4413      	add	r3, r2
 80041c0:	333f      	adds	r3, #63	; 0x3f
 80041c2:	787a      	ldrb	r2, [r7, #1]
 80041c4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80041c6:	7c3b      	ldrb	r3, [r7, #16]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d112      	bne.n	80041f2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80041cc:	78fb      	ldrb	r3, [r7, #3]
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	212c      	movs	r1, #44	; 0x2c
 80041d2:	fb01 f303 	mul.w	r3, r1, r3
 80041d6:	4413      	add	r3, r2
 80041d8:	3342      	adds	r3, #66	; 0x42
 80041da:	2203      	movs	r2, #3
 80041dc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80041de:	78fb      	ldrb	r3, [r7, #3]
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	212c      	movs	r1, #44	; 0x2c
 80041e4:	fb01 f303 	mul.w	r3, r1, r3
 80041e8:	4413      	add	r3, r2
 80041ea:	333d      	adds	r3, #61	; 0x3d
 80041ec:	7f3a      	ldrb	r2, [r7, #28]
 80041ee:	701a      	strb	r2, [r3, #0]
 80041f0:	e008      	b.n	8004204 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80041f2:	78fb      	ldrb	r3, [r7, #3]
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	212c      	movs	r1, #44	; 0x2c
 80041f8:	fb01 f303 	mul.w	r3, r1, r3
 80041fc:	4413      	add	r3, r2
 80041fe:	3342      	adds	r3, #66	; 0x42
 8004200:	2202      	movs	r2, #2
 8004202:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004204:	787b      	ldrb	r3, [r7, #1]
 8004206:	2b03      	cmp	r3, #3
 8004208:	f200 80c6 	bhi.w	8004398 <HAL_HCD_HC_SubmitRequest+0x210>
 800420c:	a201      	add	r2, pc, #4	; (adr r2, 8004214 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800420e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004212:	bf00      	nop
 8004214:	08004225 	.word	0x08004225
 8004218:	08004385 	.word	0x08004385
 800421c:	08004289 	.word	0x08004289
 8004220:	08004307 	.word	0x08004307
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004224:	7c3b      	ldrb	r3, [r7, #16]
 8004226:	2b01      	cmp	r3, #1
 8004228:	f040 80b8 	bne.w	800439c <HAL_HCD_HC_SubmitRequest+0x214>
 800422c:	78bb      	ldrb	r3, [r7, #2]
 800422e:	2b00      	cmp	r3, #0
 8004230:	f040 80b4 	bne.w	800439c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8004234:	8b3b      	ldrh	r3, [r7, #24]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d108      	bne.n	800424c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800423a:	78fb      	ldrb	r3, [r7, #3]
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	212c      	movs	r1, #44	; 0x2c
 8004240:	fb01 f303 	mul.w	r3, r1, r3
 8004244:	4413      	add	r3, r2
 8004246:	3355      	adds	r3, #85	; 0x55
 8004248:	2201      	movs	r2, #1
 800424a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800424c:	78fb      	ldrb	r3, [r7, #3]
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	212c      	movs	r1, #44	; 0x2c
 8004252:	fb01 f303 	mul.w	r3, r1, r3
 8004256:	4413      	add	r3, r2
 8004258:	3355      	adds	r3, #85	; 0x55
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d109      	bne.n	8004274 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004260:	78fb      	ldrb	r3, [r7, #3]
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	212c      	movs	r1, #44	; 0x2c
 8004266:	fb01 f303 	mul.w	r3, r1, r3
 800426a:	4413      	add	r3, r2
 800426c:	3342      	adds	r3, #66	; 0x42
 800426e:	2200      	movs	r2, #0
 8004270:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004272:	e093      	b.n	800439c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004274:	78fb      	ldrb	r3, [r7, #3]
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	212c      	movs	r1, #44	; 0x2c
 800427a:	fb01 f303 	mul.w	r3, r1, r3
 800427e:	4413      	add	r3, r2
 8004280:	3342      	adds	r3, #66	; 0x42
 8004282:	2202      	movs	r2, #2
 8004284:	701a      	strb	r2, [r3, #0]
      break;
 8004286:	e089      	b.n	800439c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004288:	78bb      	ldrb	r3, [r7, #2]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d11d      	bne.n	80042ca <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800428e:	78fb      	ldrb	r3, [r7, #3]
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	212c      	movs	r1, #44	; 0x2c
 8004294:	fb01 f303 	mul.w	r3, r1, r3
 8004298:	4413      	add	r3, r2
 800429a:	3355      	adds	r3, #85	; 0x55
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d109      	bne.n	80042b6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80042a2:	78fb      	ldrb	r3, [r7, #3]
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	212c      	movs	r1, #44	; 0x2c
 80042a8:	fb01 f303 	mul.w	r3, r1, r3
 80042ac:	4413      	add	r3, r2
 80042ae:	3342      	adds	r3, #66	; 0x42
 80042b0:	2200      	movs	r2, #0
 80042b2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80042b4:	e073      	b.n	800439e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80042b6:	78fb      	ldrb	r3, [r7, #3]
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	212c      	movs	r1, #44	; 0x2c
 80042bc:	fb01 f303 	mul.w	r3, r1, r3
 80042c0:	4413      	add	r3, r2
 80042c2:	3342      	adds	r3, #66	; 0x42
 80042c4:	2202      	movs	r2, #2
 80042c6:	701a      	strb	r2, [r3, #0]
      break;
 80042c8:	e069      	b.n	800439e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80042ca:	78fb      	ldrb	r3, [r7, #3]
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	212c      	movs	r1, #44	; 0x2c
 80042d0:	fb01 f303 	mul.w	r3, r1, r3
 80042d4:	4413      	add	r3, r2
 80042d6:	3354      	adds	r3, #84	; 0x54
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d109      	bne.n	80042f2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80042de:	78fb      	ldrb	r3, [r7, #3]
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	212c      	movs	r1, #44	; 0x2c
 80042e4:	fb01 f303 	mul.w	r3, r1, r3
 80042e8:	4413      	add	r3, r2
 80042ea:	3342      	adds	r3, #66	; 0x42
 80042ec:	2200      	movs	r2, #0
 80042ee:	701a      	strb	r2, [r3, #0]
      break;
 80042f0:	e055      	b.n	800439e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80042f2:	78fb      	ldrb	r3, [r7, #3]
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	212c      	movs	r1, #44	; 0x2c
 80042f8:	fb01 f303 	mul.w	r3, r1, r3
 80042fc:	4413      	add	r3, r2
 80042fe:	3342      	adds	r3, #66	; 0x42
 8004300:	2202      	movs	r2, #2
 8004302:	701a      	strb	r2, [r3, #0]
      break;
 8004304:	e04b      	b.n	800439e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004306:	78bb      	ldrb	r3, [r7, #2]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d11d      	bne.n	8004348 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800430c:	78fb      	ldrb	r3, [r7, #3]
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	212c      	movs	r1, #44	; 0x2c
 8004312:	fb01 f303 	mul.w	r3, r1, r3
 8004316:	4413      	add	r3, r2
 8004318:	3355      	adds	r3, #85	; 0x55
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d109      	bne.n	8004334 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004320:	78fb      	ldrb	r3, [r7, #3]
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	212c      	movs	r1, #44	; 0x2c
 8004326:	fb01 f303 	mul.w	r3, r1, r3
 800432a:	4413      	add	r3, r2
 800432c:	3342      	adds	r3, #66	; 0x42
 800432e:	2200      	movs	r2, #0
 8004330:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004332:	e034      	b.n	800439e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004334:	78fb      	ldrb	r3, [r7, #3]
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	212c      	movs	r1, #44	; 0x2c
 800433a:	fb01 f303 	mul.w	r3, r1, r3
 800433e:	4413      	add	r3, r2
 8004340:	3342      	adds	r3, #66	; 0x42
 8004342:	2202      	movs	r2, #2
 8004344:	701a      	strb	r2, [r3, #0]
      break;
 8004346:	e02a      	b.n	800439e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004348:	78fb      	ldrb	r3, [r7, #3]
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	212c      	movs	r1, #44	; 0x2c
 800434e:	fb01 f303 	mul.w	r3, r1, r3
 8004352:	4413      	add	r3, r2
 8004354:	3354      	adds	r3, #84	; 0x54
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d109      	bne.n	8004370 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800435c:	78fb      	ldrb	r3, [r7, #3]
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	212c      	movs	r1, #44	; 0x2c
 8004362:	fb01 f303 	mul.w	r3, r1, r3
 8004366:	4413      	add	r3, r2
 8004368:	3342      	adds	r3, #66	; 0x42
 800436a:	2200      	movs	r2, #0
 800436c:	701a      	strb	r2, [r3, #0]
      break;
 800436e:	e016      	b.n	800439e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004370:	78fb      	ldrb	r3, [r7, #3]
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	212c      	movs	r1, #44	; 0x2c
 8004376:	fb01 f303 	mul.w	r3, r1, r3
 800437a:	4413      	add	r3, r2
 800437c:	3342      	adds	r3, #66	; 0x42
 800437e:	2202      	movs	r2, #2
 8004380:	701a      	strb	r2, [r3, #0]
      break;
 8004382:	e00c      	b.n	800439e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004384:	78fb      	ldrb	r3, [r7, #3]
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	212c      	movs	r1, #44	; 0x2c
 800438a:	fb01 f303 	mul.w	r3, r1, r3
 800438e:	4413      	add	r3, r2
 8004390:	3342      	adds	r3, #66	; 0x42
 8004392:	2200      	movs	r2, #0
 8004394:	701a      	strb	r2, [r3, #0]
      break;
 8004396:	e002      	b.n	800439e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8004398:	bf00      	nop
 800439a:	e000      	b.n	800439e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800439c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800439e:	78fb      	ldrb	r3, [r7, #3]
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	212c      	movs	r1, #44	; 0x2c
 80043a4:	fb01 f303 	mul.w	r3, r1, r3
 80043a8:	4413      	add	r3, r2
 80043aa:	3344      	adds	r3, #68	; 0x44
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80043b0:	78fb      	ldrb	r3, [r7, #3]
 80043b2:	8b3a      	ldrh	r2, [r7, #24]
 80043b4:	6879      	ldr	r1, [r7, #4]
 80043b6:	202c      	movs	r0, #44	; 0x2c
 80043b8:	fb00 f303 	mul.w	r3, r0, r3
 80043bc:	440b      	add	r3, r1
 80043be:	334c      	adds	r3, #76	; 0x4c
 80043c0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80043c2:	78fb      	ldrb	r3, [r7, #3]
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	212c      	movs	r1, #44	; 0x2c
 80043c8:	fb01 f303 	mul.w	r3, r1, r3
 80043cc:	4413      	add	r3, r2
 80043ce:	3360      	adds	r3, #96	; 0x60
 80043d0:	2200      	movs	r2, #0
 80043d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80043d4:	78fb      	ldrb	r3, [r7, #3]
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	212c      	movs	r1, #44	; 0x2c
 80043da:	fb01 f303 	mul.w	r3, r1, r3
 80043de:	4413      	add	r3, r2
 80043e0:	3350      	adds	r3, #80	; 0x50
 80043e2:	2200      	movs	r2, #0
 80043e4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80043e6:	78fb      	ldrb	r3, [r7, #3]
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	212c      	movs	r1, #44	; 0x2c
 80043ec:	fb01 f303 	mul.w	r3, r1, r3
 80043f0:	4413      	add	r3, r2
 80043f2:	3339      	adds	r3, #57	; 0x39
 80043f4:	78fa      	ldrb	r2, [r7, #3]
 80043f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80043f8:	78fb      	ldrb	r3, [r7, #3]
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	212c      	movs	r1, #44	; 0x2c
 80043fe:	fb01 f303 	mul.w	r3, r1, r3
 8004402:	4413      	add	r3, r2
 8004404:	3361      	adds	r3, #97	; 0x61
 8004406:	2200      	movs	r2, #0
 8004408:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6818      	ldr	r0, [r3, #0]
 800440e:	78fb      	ldrb	r3, [r7, #3]
 8004410:	222c      	movs	r2, #44	; 0x2c
 8004412:	fb02 f303 	mul.w	r3, r2, r3
 8004416:	3338      	adds	r3, #56	; 0x38
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	18d1      	adds	r1, r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	b2db      	uxtb	r3, r3
 8004422:	461a      	mov	r2, r3
 8004424:	f004 f9a8 	bl	8008778 <USB_HC_StartXfer>
 8004428:	4603      	mov	r3, r0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3708      	adds	r7, #8
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop

08004434 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4618      	mov	r0, r3
 800444c:	f003 fecb 	bl	80081e6 <USB_GetMode>
 8004450:	4603      	mov	r3, r0
 8004452:	2b01      	cmp	r3, #1
 8004454:	f040 80f6 	bne.w	8004644 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4618      	mov	r0, r3
 800445e:	f003 feaf 	bl	80081c0 <USB_ReadInterrupts>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	f000 80ec 	beq.w	8004642 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4618      	mov	r0, r3
 8004470:	f003 fea6 	bl	80081c0 <USB_ReadInterrupts>
 8004474:	4603      	mov	r3, r0
 8004476:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800447a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800447e:	d104      	bne.n	800448a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004488:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4618      	mov	r0, r3
 8004490:	f003 fe96 	bl	80081c0 <USB_ReadInterrupts>
 8004494:	4603      	mov	r3, r0
 8004496:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800449a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800449e:	d104      	bne.n	80044aa <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80044a8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4618      	mov	r0, r3
 80044b0:	f003 fe86 	bl	80081c0 <USB_ReadInterrupts>
 80044b4:	4603      	mov	r3, r0
 80044b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80044ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044be:	d104      	bne.n	80044ca <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80044c8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4618      	mov	r0, r3
 80044d0:	f003 fe76 	bl	80081c0 <USB_ReadInterrupts>
 80044d4:	4603      	mov	r3, r0
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d103      	bne.n	80044e6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2202      	movs	r2, #2
 80044e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4618      	mov	r0, r3
 80044ec:	f003 fe68 	bl	80081c0 <USB_ReadInterrupts>
 80044f0:	4603      	mov	r3, r0
 80044f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044fa:	d11c      	bne.n	8004536 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004504:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	2b00      	cmp	r3, #0
 8004514:	d10f      	bne.n	8004536 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004516:	2110      	movs	r1, #16
 8004518:	6938      	ldr	r0, [r7, #16]
 800451a:	f003 fd77 	bl	800800c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800451e:	6938      	ldr	r0, [r7, #16]
 8004520:	f003 fd98 	bl	8008054 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2101      	movs	r1, #1
 800452a:	4618      	mov	r0, r3
 800452c:	f003 ff50 	bl	80083d0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f009 f90d 	bl	800d750 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4618      	mov	r0, r3
 800453c:	f003 fe40 	bl	80081c0 <USB_ReadInterrupts>
 8004540:	4603      	mov	r3, r0
 8004542:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004546:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800454a:	d102      	bne.n	8004552 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f001 fa03 	bl	8005958 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4618      	mov	r0, r3
 8004558:	f003 fe32 	bl	80081c0 <USB_ReadInterrupts>
 800455c:	4603      	mov	r3, r0
 800455e:	f003 0308 	and.w	r3, r3, #8
 8004562:	2b08      	cmp	r3, #8
 8004564:	d106      	bne.n	8004574 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f009 f8d6 	bl	800d718 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2208      	movs	r2, #8
 8004572:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4618      	mov	r0, r3
 800457a:	f003 fe21 	bl	80081c0 <USB_ReadInterrupts>
 800457e:	4603      	mov	r3, r0
 8004580:	f003 0310 	and.w	r3, r3, #16
 8004584:	2b10      	cmp	r3, #16
 8004586:	d101      	bne.n	800458c <HAL_HCD_IRQHandler+0x158>
 8004588:	2301      	movs	r3, #1
 800458a:	e000      	b.n	800458e <HAL_HCD_IRQHandler+0x15a>
 800458c:	2300      	movs	r3, #0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d012      	beq.n	80045b8 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	699a      	ldr	r2, [r3, #24]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f022 0210 	bic.w	r2, r2, #16
 80045a0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f001 f906 	bl	80057b4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	699a      	ldr	r2, [r3, #24]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f042 0210 	orr.w	r2, r2, #16
 80045b6:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4618      	mov	r0, r3
 80045be:	f003 fdff 	bl	80081c0 <USB_ReadInterrupts>
 80045c2:	4603      	mov	r3, r0
 80045c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045cc:	d13a      	bne.n	8004644 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4618      	mov	r0, r3
 80045d4:	f004 fa12 	bl	80089fc <USB_HC_ReadInterrupt>
 80045d8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80045da:	2300      	movs	r3, #0
 80045dc:	617b      	str	r3, [r7, #20]
 80045de:	e025      	b.n	800462c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	f003 030f 	and.w	r3, r3, #15
 80045e6:	68ba      	ldr	r2, [r7, #8]
 80045e8:	fa22 f303 	lsr.w	r3, r2, r3
 80045ec:	f003 0301 	and.w	r3, r3, #1
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d018      	beq.n	8004626 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	015a      	lsls	r2, r3, #5
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	4413      	add	r3, r2
 80045fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004606:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800460a:	d106      	bne.n	800461a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	b2db      	uxtb	r3, r3
 8004610:	4619      	mov	r1, r3
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 f8ab 	bl	800476e <HCD_HC_IN_IRQHandler>
 8004618:	e005      	b.n	8004626 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	b2db      	uxtb	r3, r3
 800461e:	4619      	mov	r1, r3
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 fcc6 	bl	8004fb2 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	3301      	adds	r3, #1
 800462a:	617b      	str	r3, [r7, #20]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	429a      	cmp	r2, r3
 8004634:	d3d4      	bcc.n	80045e0 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800463e:	615a      	str	r2, [r3, #20]
 8004640:	e000      	b.n	8004644 <HAL_HCD_IRQHandler+0x210>
      return;
 8004642:	bf00      	nop
    }
  }
}
 8004644:	3718      	adds	r7, #24
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}

0800464a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800464a:	b580      	push	{r7, lr}
 800464c:	b082      	sub	sp, #8
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004658:	2b01      	cmp	r3, #1
 800465a:	d101      	bne.n	8004660 <HAL_HCD_Start+0x16>
 800465c:	2302      	movs	r3, #2
 800465e:	e013      	b.n	8004688 <HAL_HCD_Start+0x3e>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2101      	movs	r1, #1
 800466e:	4618      	mov	r0, r3
 8004670:	f003 ff12 	bl	8008498 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4618      	mov	r0, r3
 800467a:	f003 fc58 	bl	8007f2e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3708      	adds	r7, #8
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d101      	bne.n	80046a6 <HAL_HCD_Stop+0x16>
 80046a2:	2302      	movs	r3, #2
 80046a4:	e00d      	b.n	80046c2 <HAL_HCD_Stop+0x32>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f004 fb0c 	bl	8008cd0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3708      	adds	r7, #8
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}

080046ca <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80046ca:	b580      	push	{r7, lr}
 80046cc:	b082      	sub	sp, #8
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4618      	mov	r0, r3
 80046d8:	f003 feb4 	bl	8008444 <USB_ResetPort>
 80046dc:	4603      	mov	r3, r0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3708      	adds	r7, #8
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80046e6:	b480      	push	{r7}
 80046e8:	b083      	sub	sp, #12
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
 80046ee:	460b      	mov	r3, r1
 80046f0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80046f2:	78fb      	ldrb	r3, [r7, #3]
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	212c      	movs	r1, #44	; 0x2c
 80046f8:	fb01 f303 	mul.w	r3, r1, r3
 80046fc:	4413      	add	r3, r2
 80046fe:	3360      	adds	r3, #96	; 0x60
 8004700:	781b      	ldrb	r3, [r3, #0]
}
 8004702:	4618      	mov	r0, r3
 8004704:	370c      	adds	r7, #12
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr

0800470e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800470e:	b480      	push	{r7}
 8004710:	b083      	sub	sp, #12
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
 8004716:	460b      	mov	r3, r1
 8004718:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800471a:	78fb      	ldrb	r3, [r7, #3]
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	212c      	movs	r1, #44	; 0x2c
 8004720:	fb01 f303 	mul.w	r3, r1, r3
 8004724:	4413      	add	r3, r2
 8004726:	3350      	adds	r3, #80	; 0x50
 8004728:	681b      	ldr	r3, [r3, #0]
}
 800472a:	4618      	mov	r0, r3
 800472c:	370c      	adds	r7, #12
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr

08004736 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004736:	b580      	push	{r7, lr}
 8004738:	b082      	sub	sp, #8
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4618      	mov	r0, r3
 8004744:	f003 fef8 	bl	8008538 <USB_GetCurrentFrame>
 8004748:	4603      	mov	r3, r0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3708      	adds	r7, #8
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}

08004752 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004752:	b580      	push	{r7, lr}
 8004754:	b082      	sub	sp, #8
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4618      	mov	r0, r3
 8004760:	f003 fed3 	bl	800850a <USB_GetHostSpeed>
 8004764:	4603      	mov	r3, r0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3708      	adds	r7, #8
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}

0800476e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800476e:	b580      	push	{r7, lr}
 8004770:	b086      	sub	sp, #24
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
 8004776:	460b      	mov	r3, r1
 8004778:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004784:	78fb      	ldrb	r3, [r7, #3]
 8004786:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	015a      	lsls	r2, r3, #5
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	4413      	add	r3, r2
 8004790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f003 0304 	and.w	r3, r3, #4
 800479a:	2b04      	cmp	r3, #4
 800479c:	d119      	bne.n	80047d2 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	015a      	lsls	r2, r3, #5
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	4413      	add	r3, r2
 80047a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047aa:	461a      	mov	r2, r3
 80047ac:	2304      	movs	r3, #4
 80047ae:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	015a      	lsls	r2, r3, #5
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	4413      	add	r3, r2
 80047b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	0151      	lsls	r1, r2, #5
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	440a      	add	r2, r1
 80047c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047ca:	f043 0302 	orr.w	r3, r3, #2
 80047ce:	60d3      	str	r3, [r2, #12]
 80047d0:	e101      	b.n	80049d6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	015a      	lsls	r2, r3, #5
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	4413      	add	r3, r2
 80047da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047e8:	d12b      	bne.n	8004842 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	015a      	lsls	r2, r3, #5
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	4413      	add	r3, r2
 80047f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047f6:	461a      	mov	r2, r3
 80047f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80047fc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	212c      	movs	r1, #44	; 0x2c
 8004804:	fb01 f303 	mul.w	r3, r1, r3
 8004808:	4413      	add	r3, r2
 800480a:	3361      	adds	r3, #97	; 0x61
 800480c:	2207      	movs	r2, #7
 800480e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	015a      	lsls	r2, r3, #5
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	4413      	add	r3, r2
 8004818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	0151      	lsls	r1, r2, #5
 8004822:	693a      	ldr	r2, [r7, #16]
 8004824:	440a      	add	r2, r1
 8004826:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800482a:	f043 0302 	orr.w	r3, r3, #2
 800482e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	b2d2      	uxtb	r2, r2
 8004838:	4611      	mov	r1, r2
 800483a:	4618      	mov	r0, r3
 800483c:	f004 f8ef 	bl	8008a1e <USB_HC_Halt>
 8004840:	e0c9      	b.n	80049d6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	015a      	lsls	r2, r3, #5
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	4413      	add	r3, r2
 800484a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f003 0320 	and.w	r3, r3, #32
 8004854:	2b20      	cmp	r3, #32
 8004856:	d109      	bne.n	800486c <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	015a      	lsls	r2, r3, #5
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	4413      	add	r3, r2
 8004860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004864:	461a      	mov	r2, r3
 8004866:	2320      	movs	r3, #32
 8004868:	6093      	str	r3, [r2, #8]
 800486a:	e0b4      	b.n	80049d6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	015a      	lsls	r2, r3, #5
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	4413      	add	r3, r2
 8004874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f003 0308 	and.w	r3, r3, #8
 800487e:	2b08      	cmp	r3, #8
 8004880:	d133      	bne.n	80048ea <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	015a      	lsls	r2, r3, #5
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	4413      	add	r3, r2
 800488a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	0151      	lsls	r1, r2, #5
 8004894:	693a      	ldr	r2, [r7, #16]
 8004896:	440a      	add	r2, r1
 8004898:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800489c:	f043 0302 	orr.w	r3, r3, #2
 80048a0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	212c      	movs	r1, #44	; 0x2c
 80048a8:	fb01 f303 	mul.w	r3, r1, r3
 80048ac:	4413      	add	r3, r2
 80048ae:	3361      	adds	r3, #97	; 0x61
 80048b0:	2205      	movs	r2, #5
 80048b2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	015a      	lsls	r2, r3, #5
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	4413      	add	r3, r2
 80048bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048c0:	461a      	mov	r2, r3
 80048c2:	2310      	movs	r3, #16
 80048c4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	015a      	lsls	r2, r3, #5
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	4413      	add	r3, r2
 80048ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048d2:	461a      	mov	r2, r3
 80048d4:	2308      	movs	r3, #8
 80048d6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	b2d2      	uxtb	r2, r2
 80048e0:	4611      	mov	r1, r2
 80048e2:	4618      	mov	r0, r3
 80048e4:	f004 f89b 	bl	8008a1e <USB_HC_Halt>
 80048e8:	e075      	b.n	80049d6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	015a      	lsls	r2, r3, #5
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	4413      	add	r3, r2
 80048f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004900:	d134      	bne.n	800496c <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	015a      	lsls	r2, r3, #5
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	4413      	add	r3, r2
 800490a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	0151      	lsls	r1, r2, #5
 8004914:	693a      	ldr	r2, [r7, #16]
 8004916:	440a      	add	r2, r1
 8004918:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800491c:	f043 0302 	orr.w	r3, r3, #2
 8004920:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	212c      	movs	r1, #44	; 0x2c
 8004928:	fb01 f303 	mul.w	r3, r1, r3
 800492c:	4413      	add	r3, r2
 800492e:	3361      	adds	r3, #97	; 0x61
 8004930:	2208      	movs	r2, #8
 8004932:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	015a      	lsls	r2, r3, #5
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	4413      	add	r3, r2
 800493c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004940:	461a      	mov	r2, r3
 8004942:	2310      	movs	r3, #16
 8004944:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	015a      	lsls	r2, r3, #5
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	4413      	add	r3, r2
 800494e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004952:	461a      	mov	r2, r3
 8004954:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004958:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	b2d2      	uxtb	r2, r2
 8004962:	4611      	mov	r1, r2
 8004964:	4618      	mov	r0, r3
 8004966:	f004 f85a 	bl	8008a1e <USB_HC_Halt>
 800496a:	e034      	b.n	80049d6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	015a      	lsls	r2, r3, #5
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	4413      	add	r3, r2
 8004974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800497e:	2b80      	cmp	r3, #128	; 0x80
 8004980:	d129      	bne.n	80049d6 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	015a      	lsls	r2, r3, #5
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	4413      	add	r3, r2
 800498a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	0151      	lsls	r1, r2, #5
 8004994:	693a      	ldr	r2, [r7, #16]
 8004996:	440a      	add	r2, r1
 8004998:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800499c:	f043 0302 	orr.w	r3, r3, #2
 80049a0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	212c      	movs	r1, #44	; 0x2c
 80049a8:	fb01 f303 	mul.w	r3, r1, r3
 80049ac:	4413      	add	r3, r2
 80049ae:	3361      	adds	r3, #97	; 0x61
 80049b0:	2206      	movs	r2, #6
 80049b2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	b2d2      	uxtb	r2, r2
 80049bc:	4611      	mov	r1, r2
 80049be:	4618      	mov	r0, r3
 80049c0:	f004 f82d 	bl	8008a1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	015a      	lsls	r2, r3, #5
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	4413      	add	r3, r2
 80049cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049d0:	461a      	mov	r2, r3
 80049d2:	2380      	movs	r3, #128	; 0x80
 80049d4:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	015a      	lsls	r2, r3, #5
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	4413      	add	r3, r2
 80049de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049ec:	d122      	bne.n	8004a34 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	015a      	lsls	r2, r3, #5
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	4413      	add	r3, r2
 80049f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	0151      	lsls	r1, r2, #5
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	440a      	add	r2, r1
 8004a04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a08:	f043 0302 	orr.w	r3, r3, #2
 8004a0c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	b2d2      	uxtb	r2, r2
 8004a16:	4611      	mov	r1, r2
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f004 f800 	bl	8008a1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	015a      	lsls	r2, r3, #5
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	4413      	add	r3, r2
 8004a26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a30:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004a32:	e2ba      	b.n	8004faa <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	015a      	lsls	r2, r3, #5
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	f040 811b 	bne.w	8004c82 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d019      	beq.n	8004a88 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	212c      	movs	r1, #44	; 0x2c
 8004a5a:	fb01 f303 	mul.w	r3, r1, r3
 8004a5e:	4413      	add	r3, r2
 8004a60:	3348      	adds	r3, #72	; 0x48
 8004a62:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	0159      	lsls	r1, r3, #5
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	440b      	add	r3, r1
 8004a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004a76:	1ad2      	subs	r2, r2, r3
 8004a78:	6879      	ldr	r1, [r7, #4]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	202c      	movs	r0, #44	; 0x2c
 8004a7e:	fb00 f303 	mul.w	r3, r0, r3
 8004a82:	440b      	add	r3, r1
 8004a84:	3350      	adds	r3, #80	; 0x50
 8004a86:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	212c      	movs	r1, #44	; 0x2c
 8004a8e:	fb01 f303 	mul.w	r3, r1, r3
 8004a92:	4413      	add	r3, r2
 8004a94:	3361      	adds	r3, #97	; 0x61
 8004a96:	2201      	movs	r2, #1
 8004a98:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	212c      	movs	r1, #44	; 0x2c
 8004aa0:	fb01 f303 	mul.w	r3, r1, r3
 8004aa4:	4413      	add	r3, r2
 8004aa6:	335c      	adds	r3, #92	; 0x5c
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	015a      	lsls	r2, r3, #5
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ab8:	461a      	mov	r2, r3
 8004aba:	2301      	movs	r3, #1
 8004abc:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	212c      	movs	r1, #44	; 0x2c
 8004ac4:	fb01 f303 	mul.w	r3, r1, r3
 8004ac8:	4413      	add	r3, r2
 8004aca:	333f      	adds	r3, #63	; 0x3f
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d009      	beq.n	8004ae6 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	212c      	movs	r1, #44	; 0x2c
 8004ad8:	fb01 f303 	mul.w	r3, r1, r3
 8004adc:	4413      	add	r3, r2
 8004ade:	333f      	adds	r3, #63	; 0x3f
 8004ae0:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d121      	bne.n	8004b2a <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	015a      	lsls	r2, r3, #5
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	4413      	add	r3, r2
 8004aee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	0151      	lsls	r1, r2, #5
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	440a      	add	r2, r1
 8004afc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b00:	f043 0302 	orr.w	r3, r3, #2
 8004b04:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	b2d2      	uxtb	r2, r2
 8004b0e:	4611      	mov	r1, r2
 8004b10:	4618      	mov	r0, r3
 8004b12:	f003 ff84 	bl	8008a1e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	015a      	lsls	r2, r3, #5
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b22:	461a      	mov	r2, r3
 8004b24:	2310      	movs	r3, #16
 8004b26:	6093      	str	r3, [r2, #8]
 8004b28:	e066      	b.n	8004bf8 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	212c      	movs	r1, #44	; 0x2c
 8004b30:	fb01 f303 	mul.w	r3, r1, r3
 8004b34:	4413      	add	r3, r2
 8004b36:	333f      	adds	r3, #63	; 0x3f
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	2b03      	cmp	r3, #3
 8004b3c:	d127      	bne.n	8004b8e <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	015a      	lsls	r2, r3, #5
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	4413      	add	r3, r2
 8004b46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68fa      	ldr	r2, [r7, #12]
 8004b4e:	0151      	lsls	r1, r2, #5
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	440a      	add	r2, r1
 8004b54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b5c:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	212c      	movs	r1, #44	; 0x2c
 8004b64:	fb01 f303 	mul.w	r3, r1, r3
 8004b68:	4413      	add	r3, r2
 8004b6a:	3360      	adds	r3, #96	; 0x60
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	b2d9      	uxtb	r1, r3
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	202c      	movs	r0, #44	; 0x2c
 8004b7a:	fb00 f303 	mul.w	r3, r0, r3
 8004b7e:	4413      	add	r3, r2
 8004b80:	3360      	adds	r3, #96	; 0x60
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	461a      	mov	r2, r3
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f008 fdf0 	bl	800d76c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004b8c:	e034      	b.n	8004bf8 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	212c      	movs	r1, #44	; 0x2c
 8004b94:	fb01 f303 	mul.w	r3, r1, r3
 8004b98:	4413      	add	r3, r2
 8004b9a:	333f      	adds	r3, #63	; 0x3f
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d12a      	bne.n	8004bf8 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	212c      	movs	r1, #44	; 0x2c
 8004ba8:	fb01 f303 	mul.w	r3, r1, r3
 8004bac:	4413      	add	r3, r2
 8004bae:	3360      	adds	r3, #96	; 0x60
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	212c      	movs	r1, #44	; 0x2c
 8004bba:	fb01 f303 	mul.w	r3, r1, r3
 8004bbe:	4413      	add	r3, r2
 8004bc0:	3354      	adds	r3, #84	; 0x54
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	f083 0301 	eor.w	r3, r3, #1
 8004bc8:	b2d8      	uxtb	r0, r3
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	212c      	movs	r1, #44	; 0x2c
 8004bd0:	fb01 f303 	mul.w	r3, r1, r3
 8004bd4:	4413      	add	r3, r2
 8004bd6:	3354      	adds	r3, #84	; 0x54
 8004bd8:	4602      	mov	r2, r0
 8004bda:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	b2d9      	uxtb	r1, r3
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	202c      	movs	r0, #44	; 0x2c
 8004be6:	fb00 f303 	mul.w	r3, r0, r3
 8004bea:	4413      	add	r3, r2
 8004bec:	3360      	adds	r3, #96	; 0x60
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f008 fdba 	bl	800d76c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d12b      	bne.n	8004c58 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	212c      	movs	r1, #44	; 0x2c
 8004c06:	fb01 f303 	mul.w	r3, r1, r3
 8004c0a:	4413      	add	r3, r2
 8004c0c:	3348      	adds	r3, #72	; 0x48
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	6879      	ldr	r1, [r7, #4]
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	202c      	movs	r0, #44	; 0x2c
 8004c16:	fb00 f202 	mul.w	r2, r0, r2
 8004c1a:	440a      	add	r2, r1
 8004c1c:	3240      	adds	r2, #64	; 0x40
 8004c1e:	8812      	ldrh	r2, [r2, #0]
 8004c20:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c24:	f003 0301 	and.w	r3, r3, #1
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f000 81be 	beq.w	8004faa <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	212c      	movs	r1, #44	; 0x2c
 8004c34:	fb01 f303 	mul.w	r3, r1, r3
 8004c38:	4413      	add	r3, r2
 8004c3a:	3354      	adds	r3, #84	; 0x54
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	f083 0301 	eor.w	r3, r3, #1
 8004c42:	b2d8      	uxtb	r0, r3
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	212c      	movs	r1, #44	; 0x2c
 8004c4a:	fb01 f303 	mul.w	r3, r1, r3
 8004c4e:	4413      	add	r3, r2
 8004c50:	3354      	adds	r3, #84	; 0x54
 8004c52:	4602      	mov	r2, r0
 8004c54:	701a      	strb	r2, [r3, #0]
}
 8004c56:	e1a8      	b.n	8004faa <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	212c      	movs	r1, #44	; 0x2c
 8004c5e:	fb01 f303 	mul.w	r3, r1, r3
 8004c62:	4413      	add	r3, r2
 8004c64:	3354      	adds	r3, #84	; 0x54
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	f083 0301 	eor.w	r3, r3, #1
 8004c6c:	b2d8      	uxtb	r0, r3
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	212c      	movs	r1, #44	; 0x2c
 8004c74:	fb01 f303 	mul.w	r3, r1, r3
 8004c78:	4413      	add	r3, r2
 8004c7a:	3354      	adds	r3, #84	; 0x54
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	701a      	strb	r2, [r3, #0]
}
 8004c80:	e193      	b.n	8004faa <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	015a      	lsls	r2, r3, #5
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	4413      	add	r3, r2
 8004c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	f003 0302 	and.w	r3, r3, #2
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	f040 8106 	bne.w	8004ea6 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	015a      	lsls	r2, r3, #5
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	0151      	lsls	r1, r2, #5
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	440a      	add	r2, r1
 8004cb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cb4:	f023 0302 	bic.w	r3, r3, #2
 8004cb8:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	212c      	movs	r1, #44	; 0x2c
 8004cc0:	fb01 f303 	mul.w	r3, r1, r3
 8004cc4:	4413      	add	r3, r2
 8004cc6:	3361      	adds	r3, #97	; 0x61
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d109      	bne.n	8004ce2 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	212c      	movs	r1, #44	; 0x2c
 8004cd4:	fb01 f303 	mul.w	r3, r1, r3
 8004cd8:	4413      	add	r3, r2
 8004cda:	3360      	adds	r3, #96	; 0x60
 8004cdc:	2201      	movs	r2, #1
 8004cde:	701a      	strb	r2, [r3, #0]
 8004ce0:	e0c9      	b.n	8004e76 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	212c      	movs	r1, #44	; 0x2c
 8004ce8:	fb01 f303 	mul.w	r3, r1, r3
 8004cec:	4413      	add	r3, r2
 8004cee:	3361      	adds	r3, #97	; 0x61
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	2b05      	cmp	r3, #5
 8004cf4:	d109      	bne.n	8004d0a <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	212c      	movs	r1, #44	; 0x2c
 8004cfc:	fb01 f303 	mul.w	r3, r1, r3
 8004d00:	4413      	add	r3, r2
 8004d02:	3360      	adds	r3, #96	; 0x60
 8004d04:	2205      	movs	r2, #5
 8004d06:	701a      	strb	r2, [r3, #0]
 8004d08:	e0b5      	b.n	8004e76 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	212c      	movs	r1, #44	; 0x2c
 8004d10:	fb01 f303 	mul.w	r3, r1, r3
 8004d14:	4413      	add	r3, r2
 8004d16:	3361      	adds	r3, #97	; 0x61
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	2b06      	cmp	r3, #6
 8004d1c:	d009      	beq.n	8004d32 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	212c      	movs	r1, #44	; 0x2c
 8004d24:	fb01 f303 	mul.w	r3, r1, r3
 8004d28:	4413      	add	r3, r2
 8004d2a:	3361      	adds	r3, #97	; 0x61
 8004d2c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004d2e:	2b08      	cmp	r3, #8
 8004d30:	d150      	bne.n	8004dd4 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	212c      	movs	r1, #44	; 0x2c
 8004d38:	fb01 f303 	mul.w	r3, r1, r3
 8004d3c:	4413      	add	r3, r2
 8004d3e:	335c      	adds	r3, #92	; 0x5c
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	1c5a      	adds	r2, r3, #1
 8004d44:	6879      	ldr	r1, [r7, #4]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	202c      	movs	r0, #44	; 0x2c
 8004d4a:	fb00 f303 	mul.w	r3, r0, r3
 8004d4e:	440b      	add	r3, r1
 8004d50:	335c      	adds	r3, #92	; 0x5c
 8004d52:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	212c      	movs	r1, #44	; 0x2c
 8004d5a:	fb01 f303 	mul.w	r3, r1, r3
 8004d5e:	4413      	add	r3, r2
 8004d60:	335c      	adds	r3, #92	; 0x5c
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d912      	bls.n	8004d8e <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	212c      	movs	r1, #44	; 0x2c
 8004d6e:	fb01 f303 	mul.w	r3, r1, r3
 8004d72:	4413      	add	r3, r2
 8004d74:	335c      	adds	r3, #92	; 0x5c
 8004d76:	2200      	movs	r2, #0
 8004d78:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	212c      	movs	r1, #44	; 0x2c
 8004d80:	fb01 f303 	mul.w	r3, r1, r3
 8004d84:	4413      	add	r3, r2
 8004d86:	3360      	adds	r3, #96	; 0x60
 8004d88:	2204      	movs	r2, #4
 8004d8a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004d8c:	e073      	b.n	8004e76 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	212c      	movs	r1, #44	; 0x2c
 8004d94:	fb01 f303 	mul.w	r3, r1, r3
 8004d98:	4413      	add	r3, r2
 8004d9a:	3360      	adds	r3, #96	; 0x60
 8004d9c:	2202      	movs	r2, #2
 8004d9e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	015a      	lsls	r2, r3, #5
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	4413      	add	r3, r2
 8004da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004db6:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004dbe:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	015a      	lsls	r2, r3, #5
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dcc:	461a      	mov	r2, r3
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004dd2:	e050      	b.n	8004e76 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	212c      	movs	r1, #44	; 0x2c
 8004dda:	fb01 f303 	mul.w	r3, r1, r3
 8004dde:	4413      	add	r3, r2
 8004de0:	3361      	adds	r3, #97	; 0x61
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	2b03      	cmp	r3, #3
 8004de6:	d122      	bne.n	8004e2e <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	212c      	movs	r1, #44	; 0x2c
 8004dee:	fb01 f303 	mul.w	r3, r1, r3
 8004df2:	4413      	add	r3, r2
 8004df4:	3360      	adds	r3, #96	; 0x60
 8004df6:	2202      	movs	r2, #2
 8004df8:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	015a      	lsls	r2, r3, #5
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	4413      	add	r3, r2
 8004e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004e10:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e18:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	015a      	lsls	r2, r3, #5
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	4413      	add	r3, r2
 8004e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e26:	461a      	mov	r2, r3
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	6013      	str	r3, [r2, #0]
 8004e2c:	e023      	b.n	8004e76 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	212c      	movs	r1, #44	; 0x2c
 8004e34:	fb01 f303 	mul.w	r3, r1, r3
 8004e38:	4413      	add	r3, r2
 8004e3a:	3361      	adds	r3, #97	; 0x61
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	2b07      	cmp	r3, #7
 8004e40:	d119      	bne.n	8004e76 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	212c      	movs	r1, #44	; 0x2c
 8004e48:	fb01 f303 	mul.w	r3, r1, r3
 8004e4c:	4413      	add	r3, r2
 8004e4e:	335c      	adds	r3, #92	; 0x5c
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	1c5a      	adds	r2, r3, #1
 8004e54:	6879      	ldr	r1, [r7, #4]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	202c      	movs	r0, #44	; 0x2c
 8004e5a:	fb00 f303 	mul.w	r3, r0, r3
 8004e5e:	440b      	add	r3, r1
 8004e60:	335c      	adds	r3, #92	; 0x5c
 8004e62:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	212c      	movs	r1, #44	; 0x2c
 8004e6a:	fb01 f303 	mul.w	r3, r1, r3
 8004e6e:	4413      	add	r3, r2
 8004e70:	3360      	adds	r3, #96	; 0x60
 8004e72:	2204      	movs	r2, #4
 8004e74:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	015a      	lsls	r2, r3, #5
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e82:	461a      	mov	r2, r3
 8004e84:	2302      	movs	r3, #2
 8004e86:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	b2d9      	uxtb	r1, r3
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	202c      	movs	r0, #44	; 0x2c
 8004e92:	fb00 f303 	mul.w	r3, r0, r3
 8004e96:	4413      	add	r3, r2
 8004e98:	3360      	adds	r3, #96	; 0x60
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f008 fc64 	bl	800d76c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004ea4:	e081      	b.n	8004faa <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	015a      	lsls	r2, r3, #5
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	4413      	add	r3, r2
 8004eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f003 0310 	and.w	r3, r3, #16
 8004eb8:	2b10      	cmp	r3, #16
 8004eba:	d176      	bne.n	8004faa <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	212c      	movs	r1, #44	; 0x2c
 8004ec2:	fb01 f303 	mul.w	r3, r1, r3
 8004ec6:	4413      	add	r3, r2
 8004ec8:	333f      	adds	r3, #63	; 0x3f
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	2b03      	cmp	r3, #3
 8004ece:	d121      	bne.n	8004f14 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	212c      	movs	r1, #44	; 0x2c
 8004ed6:	fb01 f303 	mul.w	r3, r1, r3
 8004eda:	4413      	add	r3, r2
 8004edc:	335c      	adds	r3, #92	; 0x5c
 8004ede:	2200      	movs	r2, #0
 8004ee0:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	015a      	lsls	r2, r3, #5
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	4413      	add	r3, r2
 8004eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	0151      	lsls	r1, r2, #5
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	440a      	add	r2, r1
 8004ef8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004efc:	f043 0302 	orr.w	r3, r3, #2
 8004f00:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	b2d2      	uxtb	r2, r2
 8004f0a:	4611      	mov	r1, r2
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f003 fd86 	bl	8008a1e <USB_HC_Halt>
 8004f12:	e041      	b.n	8004f98 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	212c      	movs	r1, #44	; 0x2c
 8004f1a:	fb01 f303 	mul.w	r3, r1, r3
 8004f1e:	4413      	add	r3, r2
 8004f20:	333f      	adds	r3, #63	; 0x3f
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d009      	beq.n	8004f3c <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	212c      	movs	r1, #44	; 0x2c
 8004f2e:	fb01 f303 	mul.w	r3, r1, r3
 8004f32:	4413      	add	r3, r2
 8004f34:	333f      	adds	r3, #63	; 0x3f
 8004f36:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d12d      	bne.n	8004f98 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	212c      	movs	r1, #44	; 0x2c
 8004f42:	fb01 f303 	mul.w	r3, r1, r3
 8004f46:	4413      	add	r3, r2
 8004f48:	335c      	adds	r3, #92	; 0x5c
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d120      	bne.n	8004f98 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	212c      	movs	r1, #44	; 0x2c
 8004f5c:	fb01 f303 	mul.w	r3, r1, r3
 8004f60:	4413      	add	r3, r2
 8004f62:	3361      	adds	r3, #97	; 0x61
 8004f64:	2203      	movs	r2, #3
 8004f66:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	015a      	lsls	r2, r3, #5
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	4413      	add	r3, r2
 8004f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	0151      	lsls	r1, r2, #5
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	440a      	add	r2, r1
 8004f7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f82:	f043 0302 	orr.w	r3, r3, #2
 8004f86:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	b2d2      	uxtb	r2, r2
 8004f90:	4611      	mov	r1, r2
 8004f92:	4618      	mov	r0, r3
 8004f94:	f003 fd43 	bl	8008a1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	015a      	lsls	r2, r3, #5
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	2310      	movs	r3, #16
 8004fa8:	6093      	str	r3, [r2, #8]
}
 8004faa:	bf00      	nop
 8004fac:	3718      	adds	r7, #24
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b088      	sub	sp, #32
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
 8004fba:	460b      	mov	r3, r1
 8004fbc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004fc8:	78fb      	ldrb	r3, [r7, #3]
 8004fca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	015a      	lsls	r2, r3, #5
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f003 0304 	and.w	r3, r3, #4
 8004fde:	2b04      	cmp	r3, #4
 8004fe0:	d119      	bne.n	8005016 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	015a      	lsls	r2, r3, #5
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	4413      	add	r3, r2
 8004fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fee:	461a      	mov	r2, r3
 8004ff0:	2304      	movs	r3, #4
 8004ff2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	015a      	lsls	r2, r3, #5
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	0151      	lsls	r1, r2, #5
 8005006:	69ba      	ldr	r2, [r7, #24]
 8005008:	440a      	add	r2, r1
 800500a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800500e:	f043 0302 	orr.w	r3, r3, #2
 8005012:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8005014:	e3ca      	b.n	80057ac <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	015a      	lsls	r2, r3, #5
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	4413      	add	r3, r2
 800501e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	f003 0320 	and.w	r3, r3, #32
 8005028:	2b20      	cmp	r3, #32
 800502a:	d13e      	bne.n	80050aa <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	015a      	lsls	r2, r3, #5
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	4413      	add	r3, r2
 8005034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005038:	461a      	mov	r2, r3
 800503a:	2320      	movs	r3, #32
 800503c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	212c      	movs	r1, #44	; 0x2c
 8005044:	fb01 f303 	mul.w	r3, r1, r3
 8005048:	4413      	add	r3, r2
 800504a:	333d      	adds	r3, #61	; 0x3d
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	2b01      	cmp	r3, #1
 8005050:	f040 83ac 	bne.w	80057ac <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	212c      	movs	r1, #44	; 0x2c
 800505a:	fb01 f303 	mul.w	r3, r1, r3
 800505e:	4413      	add	r3, r2
 8005060:	333d      	adds	r3, #61	; 0x3d
 8005062:	2200      	movs	r2, #0
 8005064:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	212c      	movs	r1, #44	; 0x2c
 800506c:	fb01 f303 	mul.w	r3, r1, r3
 8005070:	4413      	add	r3, r2
 8005072:	3360      	adds	r3, #96	; 0x60
 8005074:	2202      	movs	r2, #2
 8005076:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	015a      	lsls	r2, r3, #5
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	4413      	add	r3, r2
 8005080:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	697a      	ldr	r2, [r7, #20]
 8005088:	0151      	lsls	r1, r2, #5
 800508a:	69ba      	ldr	r2, [r7, #24]
 800508c:	440a      	add	r2, r1
 800508e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005092:	f043 0302 	orr.w	r3, r3, #2
 8005096:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	697a      	ldr	r2, [r7, #20]
 800509e:	b2d2      	uxtb	r2, r2
 80050a0:	4611      	mov	r1, r2
 80050a2:	4618      	mov	r0, r3
 80050a4:	f003 fcbb 	bl	8008a1e <USB_HC_Halt>
}
 80050a8:	e380      	b.n	80057ac <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	015a      	lsls	r2, r3, #5
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	4413      	add	r3, r2
 80050b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050c0:	d122      	bne.n	8005108 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	015a      	lsls	r2, r3, #5
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	4413      	add	r3, r2
 80050ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	697a      	ldr	r2, [r7, #20]
 80050d2:	0151      	lsls	r1, r2, #5
 80050d4:	69ba      	ldr	r2, [r7, #24]
 80050d6:	440a      	add	r2, r1
 80050d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050dc:	f043 0302 	orr.w	r3, r3, #2
 80050e0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	697a      	ldr	r2, [r7, #20]
 80050e8:	b2d2      	uxtb	r2, r2
 80050ea:	4611      	mov	r1, r2
 80050ec:	4618      	mov	r0, r3
 80050ee:	f003 fc96 	bl	8008a1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	015a      	lsls	r2, r3, #5
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	4413      	add	r3, r2
 80050fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050fe:	461a      	mov	r2, r3
 8005100:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005104:	6093      	str	r3, [r2, #8]
}
 8005106:	e351      	b.n	80057ac <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	015a      	lsls	r2, r3, #5
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	4413      	add	r3, r2
 8005110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	2b01      	cmp	r3, #1
 800511c:	d150      	bne.n	80051c0 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	212c      	movs	r1, #44	; 0x2c
 8005124:	fb01 f303 	mul.w	r3, r1, r3
 8005128:	4413      	add	r3, r2
 800512a:	335c      	adds	r3, #92	; 0x5c
 800512c:	2200      	movs	r2, #0
 800512e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	015a      	lsls	r2, r3, #5
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	4413      	add	r3, r2
 8005138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005142:	2b40      	cmp	r3, #64	; 0x40
 8005144:	d111      	bne.n	800516a <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	212c      	movs	r1, #44	; 0x2c
 800514c:	fb01 f303 	mul.w	r3, r1, r3
 8005150:	4413      	add	r3, r2
 8005152:	333d      	adds	r3, #61	; 0x3d
 8005154:	2201      	movs	r2, #1
 8005156:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	015a      	lsls	r2, r3, #5
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	4413      	add	r3, r2
 8005160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005164:	461a      	mov	r2, r3
 8005166:	2340      	movs	r3, #64	; 0x40
 8005168:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	015a      	lsls	r2, r3, #5
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	4413      	add	r3, r2
 8005172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	697a      	ldr	r2, [r7, #20]
 800517a:	0151      	lsls	r1, r2, #5
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	440a      	add	r2, r1
 8005180:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005184:	f043 0302 	orr.w	r3, r3, #2
 8005188:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	b2d2      	uxtb	r2, r2
 8005192:	4611      	mov	r1, r2
 8005194:	4618      	mov	r0, r3
 8005196:	f003 fc42 	bl	8008a1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	015a      	lsls	r2, r3, #5
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	4413      	add	r3, r2
 80051a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051a6:	461a      	mov	r2, r3
 80051a8:	2301      	movs	r3, #1
 80051aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	212c      	movs	r1, #44	; 0x2c
 80051b2:	fb01 f303 	mul.w	r3, r1, r3
 80051b6:	4413      	add	r3, r2
 80051b8:	3361      	adds	r3, #97	; 0x61
 80051ba:	2201      	movs	r2, #1
 80051bc:	701a      	strb	r2, [r3, #0]
}
 80051be:	e2f5      	b.n	80057ac <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	015a      	lsls	r2, r3, #5
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	4413      	add	r3, r2
 80051c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d2:	2b40      	cmp	r3, #64	; 0x40
 80051d4:	d13c      	bne.n	8005250 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	212c      	movs	r1, #44	; 0x2c
 80051dc:	fb01 f303 	mul.w	r3, r1, r3
 80051e0:	4413      	add	r3, r2
 80051e2:	3361      	adds	r3, #97	; 0x61
 80051e4:	2204      	movs	r2, #4
 80051e6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	212c      	movs	r1, #44	; 0x2c
 80051ee:	fb01 f303 	mul.w	r3, r1, r3
 80051f2:	4413      	add	r3, r2
 80051f4:	333d      	adds	r3, #61	; 0x3d
 80051f6:	2201      	movs	r2, #1
 80051f8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	212c      	movs	r1, #44	; 0x2c
 8005200:	fb01 f303 	mul.w	r3, r1, r3
 8005204:	4413      	add	r3, r2
 8005206:	335c      	adds	r3, #92	; 0x5c
 8005208:	2200      	movs	r2, #0
 800520a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	015a      	lsls	r2, r3, #5
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	4413      	add	r3, r2
 8005214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	0151      	lsls	r1, r2, #5
 800521e:	69ba      	ldr	r2, [r7, #24]
 8005220:	440a      	add	r2, r1
 8005222:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005226:	f043 0302 	orr.w	r3, r3, #2
 800522a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	697a      	ldr	r2, [r7, #20]
 8005232:	b2d2      	uxtb	r2, r2
 8005234:	4611      	mov	r1, r2
 8005236:	4618      	mov	r0, r3
 8005238:	f003 fbf1 	bl	8008a1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	015a      	lsls	r2, r3, #5
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	4413      	add	r3, r2
 8005244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005248:	461a      	mov	r2, r3
 800524a:	2340      	movs	r3, #64	; 0x40
 800524c:	6093      	str	r3, [r2, #8]
}
 800524e:	e2ad      	b.n	80057ac <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	015a      	lsls	r2, r3, #5
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	4413      	add	r3, r2
 8005258:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f003 0308 	and.w	r3, r3, #8
 8005262:	2b08      	cmp	r3, #8
 8005264:	d12a      	bne.n	80052bc <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	015a      	lsls	r2, r3, #5
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	4413      	add	r3, r2
 800526e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005272:	461a      	mov	r2, r3
 8005274:	2308      	movs	r3, #8
 8005276:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	015a      	lsls	r2, r3, #5
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	4413      	add	r3, r2
 8005280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	0151      	lsls	r1, r2, #5
 800528a:	69ba      	ldr	r2, [r7, #24]
 800528c:	440a      	add	r2, r1
 800528e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005292:	f043 0302 	orr.w	r3, r3, #2
 8005296:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	697a      	ldr	r2, [r7, #20]
 800529e:	b2d2      	uxtb	r2, r2
 80052a0:	4611      	mov	r1, r2
 80052a2:	4618      	mov	r0, r3
 80052a4:	f003 fbbb 	bl	8008a1e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	212c      	movs	r1, #44	; 0x2c
 80052ae:	fb01 f303 	mul.w	r3, r1, r3
 80052b2:	4413      	add	r3, r2
 80052b4:	3361      	adds	r3, #97	; 0x61
 80052b6:	2205      	movs	r2, #5
 80052b8:	701a      	strb	r2, [r3, #0]
}
 80052ba:	e277      	b.n	80057ac <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	015a      	lsls	r2, r3, #5
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	4413      	add	r3, r2
 80052c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	f003 0310 	and.w	r3, r3, #16
 80052ce:	2b10      	cmp	r3, #16
 80052d0:	d150      	bne.n	8005374 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	212c      	movs	r1, #44	; 0x2c
 80052d8:	fb01 f303 	mul.w	r3, r1, r3
 80052dc:	4413      	add	r3, r2
 80052de:	335c      	adds	r3, #92	; 0x5c
 80052e0:	2200      	movs	r2, #0
 80052e2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	212c      	movs	r1, #44	; 0x2c
 80052ea:	fb01 f303 	mul.w	r3, r1, r3
 80052ee:	4413      	add	r3, r2
 80052f0:	3361      	adds	r3, #97	; 0x61
 80052f2:	2203      	movs	r2, #3
 80052f4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	212c      	movs	r1, #44	; 0x2c
 80052fc:	fb01 f303 	mul.w	r3, r1, r3
 8005300:	4413      	add	r3, r2
 8005302:	333d      	adds	r3, #61	; 0x3d
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d112      	bne.n	8005330 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	212c      	movs	r1, #44	; 0x2c
 8005310:	fb01 f303 	mul.w	r3, r1, r3
 8005314:	4413      	add	r3, r2
 8005316:	333c      	adds	r3, #60	; 0x3c
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d108      	bne.n	8005330 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	212c      	movs	r1, #44	; 0x2c
 8005324:	fb01 f303 	mul.w	r3, r1, r3
 8005328:	4413      	add	r3, r2
 800532a:	333d      	adds	r3, #61	; 0x3d
 800532c:	2201      	movs	r2, #1
 800532e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	015a      	lsls	r2, r3, #5
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	4413      	add	r3, r2
 8005338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	697a      	ldr	r2, [r7, #20]
 8005340:	0151      	lsls	r1, r2, #5
 8005342:	69ba      	ldr	r2, [r7, #24]
 8005344:	440a      	add	r2, r1
 8005346:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800534a:	f043 0302 	orr.w	r3, r3, #2
 800534e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	697a      	ldr	r2, [r7, #20]
 8005356:	b2d2      	uxtb	r2, r2
 8005358:	4611      	mov	r1, r2
 800535a:	4618      	mov	r0, r3
 800535c:	f003 fb5f 	bl	8008a1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	015a      	lsls	r2, r3, #5
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	4413      	add	r3, r2
 8005368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800536c:	461a      	mov	r2, r3
 800536e:	2310      	movs	r3, #16
 8005370:	6093      	str	r3, [r2, #8]
}
 8005372:	e21b      	b.n	80057ac <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	015a      	lsls	r2, r3, #5
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	4413      	add	r3, r2
 800537c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005386:	2b80      	cmp	r3, #128	; 0x80
 8005388:	d174      	bne.n	8005474 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d121      	bne.n	80053d6 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	212c      	movs	r1, #44	; 0x2c
 8005398:	fb01 f303 	mul.w	r3, r1, r3
 800539c:	4413      	add	r3, r2
 800539e:	3361      	adds	r3, #97	; 0x61
 80053a0:	2206      	movs	r2, #6
 80053a2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	015a      	lsls	r2, r3, #5
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	4413      	add	r3, r2
 80053ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	0151      	lsls	r1, r2, #5
 80053b6:	69ba      	ldr	r2, [r7, #24]
 80053b8:	440a      	add	r2, r1
 80053ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053be:	f043 0302 	orr.w	r3, r3, #2
 80053c2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	697a      	ldr	r2, [r7, #20]
 80053ca:	b2d2      	uxtb	r2, r2
 80053cc:	4611      	mov	r1, r2
 80053ce:	4618      	mov	r0, r3
 80053d0:	f003 fb25 	bl	8008a1e <USB_HC_Halt>
 80053d4:	e044      	b.n	8005460 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	212c      	movs	r1, #44	; 0x2c
 80053dc:	fb01 f303 	mul.w	r3, r1, r3
 80053e0:	4413      	add	r3, r2
 80053e2:	335c      	adds	r3, #92	; 0x5c
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	1c5a      	adds	r2, r3, #1
 80053e8:	6879      	ldr	r1, [r7, #4]
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	202c      	movs	r0, #44	; 0x2c
 80053ee:	fb00 f303 	mul.w	r3, r0, r3
 80053f2:	440b      	add	r3, r1
 80053f4:	335c      	adds	r3, #92	; 0x5c
 80053f6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	212c      	movs	r1, #44	; 0x2c
 80053fe:	fb01 f303 	mul.w	r3, r1, r3
 8005402:	4413      	add	r3, r2
 8005404:	335c      	adds	r3, #92	; 0x5c
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2b02      	cmp	r3, #2
 800540a:	d920      	bls.n	800544e <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	212c      	movs	r1, #44	; 0x2c
 8005412:	fb01 f303 	mul.w	r3, r1, r3
 8005416:	4413      	add	r3, r2
 8005418:	335c      	adds	r3, #92	; 0x5c
 800541a:	2200      	movs	r2, #0
 800541c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	212c      	movs	r1, #44	; 0x2c
 8005424:	fb01 f303 	mul.w	r3, r1, r3
 8005428:	4413      	add	r3, r2
 800542a:	3360      	adds	r3, #96	; 0x60
 800542c:	2204      	movs	r2, #4
 800542e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	b2d9      	uxtb	r1, r3
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	202c      	movs	r0, #44	; 0x2c
 800543a:	fb00 f303 	mul.w	r3, r0, r3
 800543e:	4413      	add	r3, r2
 8005440:	3360      	adds	r3, #96	; 0x60
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	461a      	mov	r2, r3
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f008 f990 	bl	800d76c <HAL_HCD_HC_NotifyURBChange_Callback>
 800544c:	e008      	b.n	8005460 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	212c      	movs	r1, #44	; 0x2c
 8005454:	fb01 f303 	mul.w	r3, r1, r3
 8005458:	4413      	add	r3, r2
 800545a:	3360      	adds	r3, #96	; 0x60
 800545c:	2202      	movs	r2, #2
 800545e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	015a      	lsls	r2, r3, #5
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	4413      	add	r3, r2
 8005468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800546c:	461a      	mov	r2, r3
 800546e:	2380      	movs	r3, #128	; 0x80
 8005470:	6093      	str	r3, [r2, #8]
}
 8005472:	e19b      	b.n	80057ac <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	015a      	lsls	r2, r3, #5
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	4413      	add	r3, r2
 800547c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005486:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800548a:	d134      	bne.n	80054f6 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	015a      	lsls	r2, r3, #5
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	4413      	add	r3, r2
 8005494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	697a      	ldr	r2, [r7, #20]
 800549c:	0151      	lsls	r1, r2, #5
 800549e:	69ba      	ldr	r2, [r7, #24]
 80054a0:	440a      	add	r2, r1
 80054a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054a6:	f043 0302 	orr.w	r3, r3, #2
 80054aa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	697a      	ldr	r2, [r7, #20]
 80054b2:	b2d2      	uxtb	r2, r2
 80054b4:	4611      	mov	r1, r2
 80054b6:	4618      	mov	r0, r3
 80054b8:	f003 fab1 	bl	8008a1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	015a      	lsls	r2, r3, #5
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	4413      	add	r3, r2
 80054c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054c8:	461a      	mov	r2, r3
 80054ca:	2310      	movs	r3, #16
 80054cc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	015a      	lsls	r2, r3, #5
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	4413      	add	r3, r2
 80054d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054da:	461a      	mov	r2, r3
 80054dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	212c      	movs	r1, #44	; 0x2c
 80054e8:	fb01 f303 	mul.w	r3, r1, r3
 80054ec:	4413      	add	r3, r2
 80054ee:	3361      	adds	r3, #97	; 0x61
 80054f0:	2208      	movs	r2, #8
 80054f2:	701a      	strb	r2, [r3, #0]
}
 80054f4:	e15a      	b.n	80057ac <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	015a      	lsls	r2, r3, #5
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	4413      	add	r3, r2
 80054fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	f003 0302 	and.w	r3, r3, #2
 8005508:	2b02      	cmp	r3, #2
 800550a:	f040 814f 	bne.w	80057ac <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	015a      	lsls	r2, r3, #5
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	4413      	add	r3, r2
 8005516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	697a      	ldr	r2, [r7, #20]
 800551e:	0151      	lsls	r1, r2, #5
 8005520:	69ba      	ldr	r2, [r7, #24]
 8005522:	440a      	add	r2, r1
 8005524:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005528:	f023 0302 	bic.w	r3, r3, #2
 800552c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	212c      	movs	r1, #44	; 0x2c
 8005534:	fb01 f303 	mul.w	r3, r1, r3
 8005538:	4413      	add	r3, r2
 800553a:	3361      	adds	r3, #97	; 0x61
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	2b01      	cmp	r3, #1
 8005540:	d17d      	bne.n	800563e <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	212c      	movs	r1, #44	; 0x2c
 8005548:	fb01 f303 	mul.w	r3, r1, r3
 800554c:	4413      	add	r3, r2
 800554e:	3360      	adds	r3, #96	; 0x60
 8005550:	2201      	movs	r2, #1
 8005552:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	212c      	movs	r1, #44	; 0x2c
 800555a:	fb01 f303 	mul.w	r3, r1, r3
 800555e:	4413      	add	r3, r2
 8005560:	333f      	adds	r3, #63	; 0x3f
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	2b02      	cmp	r3, #2
 8005566:	d00a      	beq.n	800557e <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	212c      	movs	r1, #44	; 0x2c
 800556e:	fb01 f303 	mul.w	r3, r1, r3
 8005572:	4413      	add	r3, r2
 8005574:	333f      	adds	r3, #63	; 0x3f
 8005576:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005578:	2b03      	cmp	r3, #3
 800557a:	f040 8100 	bne.w	800577e <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d113      	bne.n	80055ae <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	212c      	movs	r1, #44	; 0x2c
 800558c:	fb01 f303 	mul.w	r3, r1, r3
 8005590:	4413      	add	r3, r2
 8005592:	3355      	adds	r3, #85	; 0x55
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	f083 0301 	eor.w	r3, r3, #1
 800559a:	b2d8      	uxtb	r0, r3
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	212c      	movs	r1, #44	; 0x2c
 80055a2:	fb01 f303 	mul.w	r3, r1, r3
 80055a6:	4413      	add	r3, r2
 80055a8:	3355      	adds	r3, #85	; 0x55
 80055aa:	4602      	mov	r2, r0
 80055ac:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	f040 80e3 	bne.w	800577e <HCD_HC_OUT_IRQHandler+0x7cc>
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	212c      	movs	r1, #44	; 0x2c
 80055be:	fb01 f303 	mul.w	r3, r1, r3
 80055c2:	4413      	add	r3, r2
 80055c4:	334c      	adds	r3, #76	; 0x4c
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	f000 80d8 	beq.w	800577e <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	212c      	movs	r1, #44	; 0x2c
 80055d4:	fb01 f303 	mul.w	r3, r1, r3
 80055d8:	4413      	add	r3, r2
 80055da:	334c      	adds	r3, #76	; 0x4c
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	6879      	ldr	r1, [r7, #4]
 80055e0:	697a      	ldr	r2, [r7, #20]
 80055e2:	202c      	movs	r0, #44	; 0x2c
 80055e4:	fb00 f202 	mul.w	r2, r0, r2
 80055e8:	440a      	add	r2, r1
 80055ea:	3240      	adds	r2, #64	; 0x40
 80055ec:	8812      	ldrh	r2, [r2, #0]
 80055ee:	4413      	add	r3, r2
 80055f0:	3b01      	subs	r3, #1
 80055f2:	6879      	ldr	r1, [r7, #4]
 80055f4:	697a      	ldr	r2, [r7, #20]
 80055f6:	202c      	movs	r0, #44	; 0x2c
 80055f8:	fb00 f202 	mul.w	r2, r0, r2
 80055fc:	440a      	add	r2, r1
 80055fe:	3240      	adds	r2, #64	; 0x40
 8005600:	8812      	ldrh	r2, [r2, #0]
 8005602:	fbb3 f3f2 	udiv	r3, r3, r2
 8005606:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f003 0301 	and.w	r3, r3, #1
 800560e:	2b00      	cmp	r3, #0
 8005610:	f000 80b5 	beq.w	800577e <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	212c      	movs	r1, #44	; 0x2c
 800561a:	fb01 f303 	mul.w	r3, r1, r3
 800561e:	4413      	add	r3, r2
 8005620:	3355      	adds	r3, #85	; 0x55
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	f083 0301 	eor.w	r3, r3, #1
 8005628:	b2d8      	uxtb	r0, r3
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	212c      	movs	r1, #44	; 0x2c
 8005630:	fb01 f303 	mul.w	r3, r1, r3
 8005634:	4413      	add	r3, r2
 8005636:	3355      	adds	r3, #85	; 0x55
 8005638:	4602      	mov	r2, r0
 800563a:	701a      	strb	r2, [r3, #0]
 800563c:	e09f      	b.n	800577e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	212c      	movs	r1, #44	; 0x2c
 8005644:	fb01 f303 	mul.w	r3, r1, r3
 8005648:	4413      	add	r3, r2
 800564a:	3361      	adds	r3, #97	; 0x61
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	2b03      	cmp	r3, #3
 8005650:	d109      	bne.n	8005666 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	212c      	movs	r1, #44	; 0x2c
 8005658:	fb01 f303 	mul.w	r3, r1, r3
 800565c:	4413      	add	r3, r2
 800565e:	3360      	adds	r3, #96	; 0x60
 8005660:	2202      	movs	r2, #2
 8005662:	701a      	strb	r2, [r3, #0]
 8005664:	e08b      	b.n	800577e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	212c      	movs	r1, #44	; 0x2c
 800566c:	fb01 f303 	mul.w	r3, r1, r3
 8005670:	4413      	add	r3, r2
 8005672:	3361      	adds	r3, #97	; 0x61
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	2b04      	cmp	r3, #4
 8005678:	d109      	bne.n	800568e <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	212c      	movs	r1, #44	; 0x2c
 8005680:	fb01 f303 	mul.w	r3, r1, r3
 8005684:	4413      	add	r3, r2
 8005686:	3360      	adds	r3, #96	; 0x60
 8005688:	2202      	movs	r2, #2
 800568a:	701a      	strb	r2, [r3, #0]
 800568c:	e077      	b.n	800577e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	212c      	movs	r1, #44	; 0x2c
 8005694:	fb01 f303 	mul.w	r3, r1, r3
 8005698:	4413      	add	r3, r2
 800569a:	3361      	adds	r3, #97	; 0x61
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	2b05      	cmp	r3, #5
 80056a0:	d109      	bne.n	80056b6 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	212c      	movs	r1, #44	; 0x2c
 80056a8:	fb01 f303 	mul.w	r3, r1, r3
 80056ac:	4413      	add	r3, r2
 80056ae:	3360      	adds	r3, #96	; 0x60
 80056b0:	2205      	movs	r2, #5
 80056b2:	701a      	strb	r2, [r3, #0]
 80056b4:	e063      	b.n	800577e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	212c      	movs	r1, #44	; 0x2c
 80056bc:	fb01 f303 	mul.w	r3, r1, r3
 80056c0:	4413      	add	r3, r2
 80056c2:	3361      	adds	r3, #97	; 0x61
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	2b06      	cmp	r3, #6
 80056c8:	d009      	beq.n	80056de <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	212c      	movs	r1, #44	; 0x2c
 80056d0:	fb01 f303 	mul.w	r3, r1, r3
 80056d4:	4413      	add	r3, r2
 80056d6:	3361      	adds	r3, #97	; 0x61
 80056d8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80056da:	2b08      	cmp	r3, #8
 80056dc:	d14f      	bne.n	800577e <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	212c      	movs	r1, #44	; 0x2c
 80056e4:	fb01 f303 	mul.w	r3, r1, r3
 80056e8:	4413      	add	r3, r2
 80056ea:	335c      	adds	r3, #92	; 0x5c
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	1c5a      	adds	r2, r3, #1
 80056f0:	6879      	ldr	r1, [r7, #4]
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	202c      	movs	r0, #44	; 0x2c
 80056f6:	fb00 f303 	mul.w	r3, r0, r3
 80056fa:	440b      	add	r3, r1
 80056fc:	335c      	adds	r3, #92	; 0x5c
 80056fe:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	212c      	movs	r1, #44	; 0x2c
 8005706:	fb01 f303 	mul.w	r3, r1, r3
 800570a:	4413      	add	r3, r2
 800570c:	335c      	adds	r3, #92	; 0x5c
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2b02      	cmp	r3, #2
 8005712:	d912      	bls.n	800573a <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	212c      	movs	r1, #44	; 0x2c
 800571a:	fb01 f303 	mul.w	r3, r1, r3
 800571e:	4413      	add	r3, r2
 8005720:	335c      	adds	r3, #92	; 0x5c
 8005722:	2200      	movs	r2, #0
 8005724:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	212c      	movs	r1, #44	; 0x2c
 800572c:	fb01 f303 	mul.w	r3, r1, r3
 8005730:	4413      	add	r3, r2
 8005732:	3360      	adds	r3, #96	; 0x60
 8005734:	2204      	movs	r2, #4
 8005736:	701a      	strb	r2, [r3, #0]
 8005738:	e021      	b.n	800577e <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	212c      	movs	r1, #44	; 0x2c
 8005740:	fb01 f303 	mul.w	r3, r1, r3
 8005744:	4413      	add	r3, r2
 8005746:	3360      	adds	r3, #96	; 0x60
 8005748:	2202      	movs	r2, #2
 800574a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	015a      	lsls	r2, r3, #5
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	4413      	add	r3, r2
 8005754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005762:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800576a:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	015a      	lsls	r2, r3, #5
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	4413      	add	r3, r2
 8005774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005778:	461a      	mov	r2, r3
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	015a      	lsls	r2, r3, #5
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	4413      	add	r3, r2
 8005786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800578a:	461a      	mov	r2, r3
 800578c:	2302      	movs	r3, #2
 800578e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	b2d9      	uxtb	r1, r3
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	202c      	movs	r0, #44	; 0x2c
 800579a:	fb00 f303 	mul.w	r3, r0, r3
 800579e:	4413      	add	r3, r2
 80057a0:	3360      	adds	r3, #96	; 0x60
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	461a      	mov	r2, r3
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f007 ffe0 	bl	800d76c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80057ac:	bf00      	nop
 80057ae:	3720      	adds	r7, #32
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b08a      	sub	sp, #40	; 0x28
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c4:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	6a1b      	ldr	r3, [r3, #32]
 80057cc:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	f003 030f 	and.w	r3, r3, #15
 80057d4:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	0c5b      	lsrs	r3, r3, #17
 80057da:	f003 030f 	and.w	r3, r3, #15
 80057de:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	091b      	lsrs	r3, r3, #4
 80057e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80057e8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d004      	beq.n	80057fa <HCD_RXQLVL_IRQHandler+0x46>
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	2b05      	cmp	r3, #5
 80057f4:	f000 80a9 	beq.w	800594a <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80057f8:	e0aa      	b.n	8005950 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	f000 80a6 	beq.w	800594e <HCD_RXQLVL_IRQHandler+0x19a>
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	212c      	movs	r1, #44	; 0x2c
 8005808:	fb01 f303 	mul.w	r3, r1, r3
 800580c:	4413      	add	r3, r2
 800580e:	3344      	adds	r3, #68	; 0x44
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	f000 809b 	beq.w	800594e <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	212c      	movs	r1, #44	; 0x2c
 800581e:	fb01 f303 	mul.w	r3, r1, r3
 8005822:	4413      	add	r3, r2
 8005824:	3350      	adds	r3, #80	; 0x50
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	441a      	add	r2, r3
 800582c:	6879      	ldr	r1, [r7, #4]
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	202c      	movs	r0, #44	; 0x2c
 8005832:	fb00 f303 	mul.w	r3, r0, r3
 8005836:	440b      	add	r3, r1
 8005838:	334c      	adds	r3, #76	; 0x4c
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	429a      	cmp	r2, r3
 800583e:	d87a      	bhi.n	8005936 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6818      	ldr	r0, [r3, #0]
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	212c      	movs	r1, #44	; 0x2c
 800584a:	fb01 f303 	mul.w	r3, r1, r3
 800584e:	4413      	add	r3, r2
 8005850:	3344      	adds	r3, #68	; 0x44
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	693a      	ldr	r2, [r7, #16]
 8005856:	b292      	uxth	r2, r2
 8005858:	4619      	mov	r1, r3
 800585a:	f002 fc59 	bl	8008110 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	212c      	movs	r1, #44	; 0x2c
 8005864:	fb01 f303 	mul.w	r3, r1, r3
 8005868:	4413      	add	r3, r2
 800586a:	3344      	adds	r3, #68	; 0x44
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	441a      	add	r2, r3
 8005872:	6879      	ldr	r1, [r7, #4]
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	202c      	movs	r0, #44	; 0x2c
 8005878:	fb00 f303 	mul.w	r3, r0, r3
 800587c:	440b      	add	r3, r1
 800587e:	3344      	adds	r3, #68	; 0x44
 8005880:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	212c      	movs	r1, #44	; 0x2c
 8005888:	fb01 f303 	mul.w	r3, r1, r3
 800588c:	4413      	add	r3, r2
 800588e:	3350      	adds	r3, #80	; 0x50
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	441a      	add	r2, r3
 8005896:	6879      	ldr	r1, [r7, #4]
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	202c      	movs	r0, #44	; 0x2c
 800589c:	fb00 f303 	mul.w	r3, r0, r3
 80058a0:	440b      	add	r3, r1
 80058a2:	3350      	adds	r3, #80	; 0x50
 80058a4:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	015a      	lsls	r2, r3, #5
 80058aa:	6a3b      	ldr	r3, [r7, #32]
 80058ac:	4413      	add	r3, r2
 80058ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	0cdb      	lsrs	r3, r3, #19
 80058b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058ba:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	212c      	movs	r1, #44	; 0x2c
 80058c2:	fb01 f303 	mul.w	r3, r1, r3
 80058c6:	4413      	add	r3, r2
 80058c8:	3340      	adds	r3, #64	; 0x40
 80058ca:	881b      	ldrh	r3, [r3, #0]
 80058cc:	461a      	mov	r2, r3
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d13c      	bne.n	800594e <HCD_RXQLVL_IRQHandler+0x19a>
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d039      	beq.n	800594e <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	015a      	lsls	r2, r3, #5
 80058de:	6a3b      	ldr	r3, [r7, #32]
 80058e0:	4413      	add	r3, r2
 80058e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80058f0:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80058f8:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	015a      	lsls	r2, r3, #5
 80058fe:	6a3b      	ldr	r3, [r7, #32]
 8005900:	4413      	add	r3, r2
 8005902:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005906:	461a      	mov	r2, r3
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	212c      	movs	r1, #44	; 0x2c
 8005912:	fb01 f303 	mul.w	r3, r1, r3
 8005916:	4413      	add	r3, r2
 8005918:	3354      	adds	r3, #84	; 0x54
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	f083 0301 	eor.w	r3, r3, #1
 8005920:	b2d8      	uxtb	r0, r3
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	212c      	movs	r1, #44	; 0x2c
 8005928:	fb01 f303 	mul.w	r3, r1, r3
 800592c:	4413      	add	r3, r2
 800592e:	3354      	adds	r3, #84	; 0x54
 8005930:	4602      	mov	r2, r0
 8005932:	701a      	strb	r2, [r3, #0]
      break;
 8005934:	e00b      	b.n	800594e <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	212c      	movs	r1, #44	; 0x2c
 800593c:	fb01 f303 	mul.w	r3, r1, r3
 8005940:	4413      	add	r3, r2
 8005942:	3360      	adds	r3, #96	; 0x60
 8005944:	2204      	movs	r2, #4
 8005946:	701a      	strb	r2, [r3, #0]
      break;
 8005948:	e001      	b.n	800594e <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800594a:	bf00      	nop
 800594c:	e000      	b.n	8005950 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800594e:	bf00      	nop
  }
}
 8005950:	bf00      	nop
 8005952:	3728      	adds	r7, #40	; 0x28
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b086      	sub	sp, #24
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005984:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f003 0302 	and.w	r3, r3, #2
 800598c:	2b02      	cmp	r3, #2
 800598e:	d10b      	bne.n	80059a8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f003 0301 	and.w	r3, r3, #1
 8005996:	2b01      	cmp	r3, #1
 8005998:	d102      	bne.n	80059a0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f007 feca 	bl	800d734 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	f043 0302 	orr.w	r3, r3, #2
 80059a6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f003 0308 	and.w	r3, r3, #8
 80059ae:	2b08      	cmp	r3, #8
 80059b0:	d132      	bne.n	8005a18 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	f043 0308 	orr.w	r3, r3, #8
 80059b8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f003 0304 	and.w	r3, r3, #4
 80059c0:	2b04      	cmp	r3, #4
 80059c2:	d126      	bne.n	8005a12 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	699b      	ldr	r3, [r3, #24]
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d113      	bne.n	80059f4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80059d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80059d6:	d106      	bne.n	80059e6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2102      	movs	r1, #2
 80059de:	4618      	mov	r0, r3
 80059e0:	f002 fcf6 	bl	80083d0 <USB_InitFSLSPClkSel>
 80059e4:	e011      	b.n	8005a0a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2101      	movs	r1, #1
 80059ec:	4618      	mov	r0, r3
 80059ee:	f002 fcef 	bl	80083d0 <USB_InitFSLSPClkSel>
 80059f2:	e00a      	b.n	8005a0a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d106      	bne.n	8005a0a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a02:	461a      	mov	r2, r3
 8005a04:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005a08:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f007 fec0 	bl	800d790 <HAL_HCD_PortEnabled_Callback>
 8005a10:	e002      	b.n	8005a18 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f007 feca 	bl	800d7ac <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f003 0320 	and.w	r3, r3, #32
 8005a1e:	2b20      	cmp	r3, #32
 8005a20:	d103      	bne.n	8005a2a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	f043 0320 	orr.w	r3, r3, #32
 8005a28:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005a30:	461a      	mov	r2, r3
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	6013      	str	r3, [r2, #0]
}
 8005a36:	bf00      	nop
 8005a38:	3718      	adds	r7, #24
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
	...

08005a40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d101      	bne.n	8005a52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e12b      	b.n	8005caa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d106      	bne.n	8005a6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f7fb ffaa 	bl	80019c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2224      	movs	r2, #36	; 0x24
 8005a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f022 0201 	bic.w	r2, r2, #1
 8005a82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005aa2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005aa4:	f001 f9fc 	bl	8006ea0 <HAL_RCC_GetPCLK1Freq>
 8005aa8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	4a81      	ldr	r2, [pc, #516]	; (8005cb4 <HAL_I2C_Init+0x274>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d807      	bhi.n	8005ac4 <HAL_I2C_Init+0x84>
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	4a80      	ldr	r2, [pc, #512]	; (8005cb8 <HAL_I2C_Init+0x278>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	bf94      	ite	ls
 8005abc:	2301      	movls	r3, #1
 8005abe:	2300      	movhi	r3, #0
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	e006      	b.n	8005ad2 <HAL_I2C_Init+0x92>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	4a7d      	ldr	r2, [pc, #500]	; (8005cbc <HAL_I2C_Init+0x27c>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	bf94      	ite	ls
 8005acc:	2301      	movls	r3, #1
 8005ace:	2300      	movhi	r3, #0
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d001      	beq.n	8005ada <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e0e7      	b.n	8005caa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	4a78      	ldr	r2, [pc, #480]	; (8005cc0 <HAL_I2C_Init+0x280>)
 8005ade:	fba2 2303 	umull	r2, r3, r2, r3
 8005ae2:	0c9b      	lsrs	r3, r3, #18
 8005ae4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68ba      	ldr	r2, [r7, #8]
 8005af6:	430a      	orrs	r2, r1
 8005af8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	6a1b      	ldr	r3, [r3, #32]
 8005b00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	4a6a      	ldr	r2, [pc, #424]	; (8005cb4 <HAL_I2C_Init+0x274>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d802      	bhi.n	8005b14 <HAL_I2C_Init+0xd4>
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	3301      	adds	r3, #1
 8005b12:	e009      	b.n	8005b28 <HAL_I2C_Init+0xe8>
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005b1a:	fb02 f303 	mul.w	r3, r2, r3
 8005b1e:	4a69      	ldr	r2, [pc, #420]	; (8005cc4 <HAL_I2C_Init+0x284>)
 8005b20:	fba2 2303 	umull	r2, r3, r2, r3
 8005b24:	099b      	lsrs	r3, r3, #6
 8005b26:	3301      	adds	r3, #1
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	6812      	ldr	r2, [r2, #0]
 8005b2c:	430b      	orrs	r3, r1
 8005b2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	69db      	ldr	r3, [r3, #28]
 8005b36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005b3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	495c      	ldr	r1, [pc, #368]	; (8005cb4 <HAL_I2C_Init+0x274>)
 8005b44:	428b      	cmp	r3, r1
 8005b46:	d819      	bhi.n	8005b7c <HAL_I2C_Init+0x13c>
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	1e59      	subs	r1, r3, #1
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	005b      	lsls	r3, r3, #1
 8005b52:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b56:	1c59      	adds	r1, r3, #1
 8005b58:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005b5c:	400b      	ands	r3, r1
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00a      	beq.n	8005b78 <HAL_I2C_Init+0x138>
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	1e59      	subs	r1, r3, #1
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	005b      	lsls	r3, r3, #1
 8005b6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b70:	3301      	adds	r3, #1
 8005b72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b76:	e051      	b.n	8005c1c <HAL_I2C_Init+0x1dc>
 8005b78:	2304      	movs	r3, #4
 8005b7a:	e04f      	b.n	8005c1c <HAL_I2C_Init+0x1dc>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d111      	bne.n	8005ba8 <HAL_I2C_Init+0x168>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	1e58      	subs	r0, r3, #1
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6859      	ldr	r1, [r3, #4]
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	005b      	lsls	r3, r3, #1
 8005b90:	440b      	add	r3, r1
 8005b92:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b96:	3301      	adds	r3, #1
 8005b98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	bf0c      	ite	eq
 8005ba0:	2301      	moveq	r3, #1
 8005ba2:	2300      	movne	r3, #0
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	e012      	b.n	8005bce <HAL_I2C_Init+0x18e>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	1e58      	subs	r0, r3, #1
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6859      	ldr	r1, [r3, #4]
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	440b      	add	r3, r1
 8005bb6:	0099      	lsls	r1, r3, #2
 8005bb8:	440b      	add	r3, r1
 8005bba:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	bf0c      	ite	eq
 8005bc8:	2301      	moveq	r3, #1
 8005bca:	2300      	movne	r3, #0
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d001      	beq.n	8005bd6 <HAL_I2C_Init+0x196>
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e022      	b.n	8005c1c <HAL_I2C_Init+0x1dc>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d10e      	bne.n	8005bfc <HAL_I2C_Init+0x1bc>
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	1e58      	subs	r0, r3, #1
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6859      	ldr	r1, [r3, #4]
 8005be6:	460b      	mov	r3, r1
 8005be8:	005b      	lsls	r3, r3, #1
 8005bea:	440b      	add	r3, r1
 8005bec:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bfa:	e00f      	b.n	8005c1c <HAL_I2C_Init+0x1dc>
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	1e58      	subs	r0, r3, #1
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6859      	ldr	r1, [r3, #4]
 8005c04:	460b      	mov	r3, r1
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	440b      	add	r3, r1
 8005c0a:	0099      	lsls	r1, r3, #2
 8005c0c:	440b      	add	r3, r1
 8005c0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c12:	3301      	adds	r3, #1
 8005c14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c1c:	6879      	ldr	r1, [r7, #4]
 8005c1e:	6809      	ldr	r1, [r1, #0]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	69da      	ldr	r2, [r3, #28]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	431a      	orrs	r2, r3
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	430a      	orrs	r2, r1
 8005c3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005c4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	6911      	ldr	r1, [r2, #16]
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	68d2      	ldr	r2, [r2, #12]
 8005c56:	4311      	orrs	r1, r2
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	6812      	ldr	r2, [r2, #0]
 8005c5c:	430b      	orrs	r3, r1
 8005c5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	695a      	ldr	r2, [r3, #20]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	699b      	ldr	r3, [r3, #24]
 8005c72:	431a      	orrs	r2, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	430a      	orrs	r2, r1
 8005c7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f042 0201 	orr.w	r2, r2, #1
 8005c8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2220      	movs	r2, #32
 8005c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ca8:	2300      	movs	r3, #0
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3710      	adds	r7, #16
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	bf00      	nop
 8005cb4:	000186a0 	.word	0x000186a0
 8005cb8:	001e847f 	.word	0x001e847f
 8005cbc:	003d08ff 	.word	0x003d08ff
 8005cc0:	431bde83 	.word	0x431bde83
 8005cc4:	10624dd3 	.word	0x10624dd3

08005cc8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b088      	sub	sp, #32
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d101      	bne.n	8005cda <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e128      	b.n	8005f2c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d109      	bne.n	8005cfa <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a90      	ldr	r2, [pc, #576]	; (8005f34 <HAL_I2S_Init+0x26c>)
 8005cf2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f7fb feab 	bl	8001a50 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2202      	movs	r2, #2
 8005cfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	69db      	ldr	r3, [r3, #28]
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	6812      	ldr	r2, [r2, #0]
 8005d0c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005d10:	f023 030f 	bic.w	r3, r3, #15
 8005d14:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2202      	movs	r2, #2
 8005d1c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d060      	beq.n	8005de8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d102      	bne.n	8005d34 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005d2e:	2310      	movs	r3, #16
 8005d30:	617b      	str	r3, [r7, #20]
 8005d32:	e001      	b.n	8005d38 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005d34:	2320      	movs	r3, #32
 8005d36:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	2b20      	cmp	r3, #32
 8005d3e:	d802      	bhi.n	8005d46 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	005b      	lsls	r3, r3, #1
 8005d44:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005d46:	2001      	movs	r0, #1
 8005d48:	f001 f9e6 	bl	8007118 <HAL_RCCEx_GetPeriphCLKFreq>
 8005d4c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d56:	d125      	bne.n	8005da4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d010      	beq.n	8005d82 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d6a:	4613      	mov	r3, r2
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	4413      	add	r3, r2
 8005d70:	005b      	lsls	r3, r3, #1
 8005d72:	461a      	mov	r2, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	695b      	ldr	r3, [r3, #20]
 8005d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d7c:	3305      	adds	r3, #5
 8005d7e:	613b      	str	r3, [r7, #16]
 8005d80:	e01f      	b.n	8005dc2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	00db      	lsls	r3, r3, #3
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	4413      	add	r3, r2
 8005d92:	005b      	lsls	r3, r3, #1
 8005d94:	461a      	mov	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d9e:	3305      	adds	r3, #5
 8005da0:	613b      	str	r3, [r7, #16]
 8005da2:	e00e      	b.n	8005dc2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005dac:	4613      	mov	r3, r2
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	4413      	add	r3, r2
 8005db2:	005b      	lsls	r3, r3, #1
 8005db4:	461a      	mov	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	695b      	ldr	r3, [r3, #20]
 8005dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dbe:	3305      	adds	r3, #5
 8005dc0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	4a5c      	ldr	r2, [pc, #368]	; (8005f38 <HAL_I2S_Init+0x270>)
 8005dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8005dca:	08db      	lsrs	r3, r3, #3
 8005dcc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	f003 0301 	and.w	r3, r3, #1
 8005dd4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005dd6:	693a      	ldr	r2, [r7, #16]
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	1ad3      	subs	r3, r2, r3
 8005ddc:	085b      	lsrs	r3, r3, #1
 8005dde:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	021b      	lsls	r3, r3, #8
 8005de4:	61bb      	str	r3, [r7, #24]
 8005de6:	e003      	b.n	8005df0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005de8:	2302      	movs	r3, #2
 8005dea:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005dec:	2300      	movs	r3, #0
 8005dee:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d902      	bls.n	8005dfc <HAL_I2S_Init+0x134>
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	2bff      	cmp	r3, #255	; 0xff
 8005dfa:	d907      	bls.n	8005e0c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e00:	f043 0210 	orr.w	r2, r3, #16
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e08f      	b.n	8005f2c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	691a      	ldr	r2, [r3, #16]
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	ea42 0103 	orr.w	r1, r2, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	69fa      	ldr	r2, [r7, #28]
 8005e1c:	430a      	orrs	r2, r1
 8005e1e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	69db      	ldr	r3, [r3, #28]
 8005e26:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005e2a:	f023 030f 	bic.w	r3, r3, #15
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	6851      	ldr	r1, [r2, #4]
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	6892      	ldr	r2, [r2, #8]
 8005e36:	4311      	orrs	r1, r2
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	68d2      	ldr	r2, [r2, #12]
 8005e3c:	4311      	orrs	r1, r2
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	6992      	ldr	r2, [r2, #24]
 8005e42:	430a      	orrs	r2, r1
 8005e44:	431a      	orrs	r2, r3
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e4e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a1b      	ldr	r3, [r3, #32]
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d161      	bne.n	8005f1c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a38      	ldr	r2, [pc, #224]	; (8005f3c <HAL_I2S_Init+0x274>)
 8005e5c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a37      	ldr	r2, [pc, #220]	; (8005f40 <HAL_I2S_Init+0x278>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d101      	bne.n	8005e6c <HAL_I2S_Init+0x1a4>
 8005e68:	4b36      	ldr	r3, [pc, #216]	; (8005f44 <HAL_I2S_Init+0x27c>)
 8005e6a:	e001      	b.n	8005e70 <HAL_I2S_Init+0x1a8>
 8005e6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e70:	69db      	ldr	r3, [r3, #28]
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	6812      	ldr	r2, [r2, #0]
 8005e76:	4932      	ldr	r1, [pc, #200]	; (8005f40 <HAL_I2S_Init+0x278>)
 8005e78:	428a      	cmp	r2, r1
 8005e7a:	d101      	bne.n	8005e80 <HAL_I2S_Init+0x1b8>
 8005e7c:	4a31      	ldr	r2, [pc, #196]	; (8005f44 <HAL_I2S_Init+0x27c>)
 8005e7e:	e001      	b.n	8005e84 <HAL_I2S_Init+0x1bc>
 8005e80:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005e84:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005e88:	f023 030f 	bic.w	r3, r3, #15
 8005e8c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a2b      	ldr	r2, [pc, #172]	; (8005f40 <HAL_I2S_Init+0x278>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d101      	bne.n	8005e9c <HAL_I2S_Init+0x1d4>
 8005e98:	4b2a      	ldr	r3, [pc, #168]	; (8005f44 <HAL_I2S_Init+0x27c>)
 8005e9a:	e001      	b.n	8005ea0 <HAL_I2S_Init+0x1d8>
 8005e9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ea0:	2202      	movs	r2, #2
 8005ea2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a25      	ldr	r2, [pc, #148]	; (8005f40 <HAL_I2S_Init+0x278>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d101      	bne.n	8005eb2 <HAL_I2S_Init+0x1ea>
 8005eae:	4b25      	ldr	r3, [pc, #148]	; (8005f44 <HAL_I2S_Init+0x27c>)
 8005eb0:	e001      	b.n	8005eb6 <HAL_I2S_Init+0x1ee>
 8005eb2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005eb6:	69db      	ldr	r3, [r3, #28]
 8005eb8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ec2:	d003      	beq.n	8005ecc <HAL_I2S_Init+0x204>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d103      	bne.n	8005ed4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005ecc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ed0:	613b      	str	r3, [r7, #16]
 8005ed2:	e001      	b.n	8005ed8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005eec:	4313      	orrs	r3, r2
 8005eee:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	699b      	ldr	r3, [r3, #24]
 8005ef4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	897b      	ldrh	r3, [r7, #10]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005f04:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a0d      	ldr	r2, [pc, #52]	; (8005f40 <HAL_I2S_Init+0x278>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d101      	bne.n	8005f14 <HAL_I2S_Init+0x24c>
 8005f10:	4b0c      	ldr	r3, [pc, #48]	; (8005f44 <HAL_I2S_Init+0x27c>)
 8005f12:	e001      	b.n	8005f18 <HAL_I2S_Init+0x250>
 8005f14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f18:	897a      	ldrh	r2, [r7, #10]
 8005f1a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3720      	adds	r7, #32
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	0800603f 	.word	0x0800603f
 8005f38:	cccccccd 	.word	0xcccccccd
 8005f3c:	08006155 	.word	0x08006155
 8005f40:	40003800 	.word	0x40003800
 8005f44:	40003400 	.word	0x40003400

08005f48 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005f50:	bf00      	nop
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005f64:	bf00      	nop
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005f78:	bf00      	nop
 8005f7a:	370c      	adds	r7, #12
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f90:	881a      	ldrh	r2, [r3, #0]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9c:	1c9a      	adds	r2, r3, #2
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	3b01      	subs	r3, #1
 8005faa:	b29a      	uxth	r2, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d10e      	bne.n	8005fd8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	685a      	ldr	r2, [r3, #4]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005fc8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f7ff ffb8 	bl	8005f48 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005fd8:	bf00      	nop
 8005fda:	3708      	adds	r7, #8
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	68da      	ldr	r2, [r3, #12]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff2:	b292      	uxth	r2, r2
 8005ff4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ffa:	1c9a      	adds	r2, r3, #2
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006004:	b29b      	uxth	r3, r3
 8006006:	3b01      	subs	r3, #1
 8006008:	b29a      	uxth	r2, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006012:	b29b      	uxth	r3, r3
 8006014:	2b00      	cmp	r3, #0
 8006016:	d10e      	bne.n	8006036 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	685a      	ldr	r2, [r3, #4]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006026:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f7ff ff93 	bl	8005f5c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006036:	bf00      	nop
 8006038:	3708      	adds	r7, #8
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b086      	sub	sp, #24
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006054:	b2db      	uxtb	r3, r3
 8006056:	2b04      	cmp	r3, #4
 8006058:	d13a      	bne.n	80060d0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	f003 0301 	and.w	r3, r3, #1
 8006060:	2b01      	cmp	r3, #1
 8006062:	d109      	bne.n	8006078 <I2S_IRQHandler+0x3a>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800606e:	2b40      	cmp	r3, #64	; 0x40
 8006070:	d102      	bne.n	8006078 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f7ff ffb4 	bl	8005fe0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800607e:	2b40      	cmp	r3, #64	; 0x40
 8006080:	d126      	bne.n	80060d0 <I2S_IRQHandler+0x92>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	f003 0320 	and.w	r3, r3, #32
 800608c:	2b20      	cmp	r3, #32
 800608e:	d11f      	bne.n	80060d0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	685a      	ldr	r2, [r3, #4]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800609e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80060a0:	2300      	movs	r3, #0
 80060a2:	613b      	str	r3, [r7, #16]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	613b      	str	r3, [r7, #16]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	613b      	str	r3, [r7, #16]
 80060b4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060c2:	f043 0202 	orr.w	r2, r3, #2
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f7ff ff50 	bl	8005f70 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	2b03      	cmp	r3, #3
 80060da:	d136      	bne.n	800614a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	f003 0302 	and.w	r3, r3, #2
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d109      	bne.n	80060fa <I2S_IRQHandler+0xbc>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060f0:	2b80      	cmp	r3, #128	; 0x80
 80060f2:	d102      	bne.n	80060fa <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f7ff ff45 	bl	8005f84 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	f003 0308 	and.w	r3, r3, #8
 8006100:	2b08      	cmp	r3, #8
 8006102:	d122      	bne.n	800614a <I2S_IRQHandler+0x10c>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	f003 0320 	and.w	r3, r3, #32
 800610e:	2b20      	cmp	r3, #32
 8006110:	d11b      	bne.n	800614a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	685a      	ldr	r2, [r3, #4]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006120:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006122:	2300      	movs	r3, #0
 8006124:	60fb      	str	r3, [r7, #12]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	60fb      	str	r3, [r7, #12]
 800612e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800613c:	f043 0204 	orr.w	r2, r3, #4
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f7ff ff13 	bl	8005f70 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800614a:	bf00      	nop
 800614c:	3718      	adds	r7, #24
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
	...

08006154 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b088      	sub	sp, #32
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4aa2      	ldr	r2, [pc, #648]	; (80063f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d101      	bne.n	8006172 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800616e:	4ba2      	ldr	r3, [pc, #648]	; (80063f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006170:	e001      	b.n	8006176 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006172:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a9b      	ldr	r2, [pc, #620]	; (80063f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d101      	bne.n	8006190 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800618c:	4b9a      	ldr	r3, [pc, #616]	; (80063f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800618e:	e001      	b.n	8006194 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006190:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061a0:	d004      	beq.n	80061ac <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	f040 8099 	bne.w	80062de <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	f003 0302 	and.w	r3, r3, #2
 80061b2:	2b02      	cmp	r3, #2
 80061b4:	d107      	bne.n	80061c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d002      	beq.n	80061c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 f925 	bl	8006410 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	f003 0301 	and.w	r3, r3, #1
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d107      	bne.n	80061e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d002      	beq.n	80061e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 f9c8 	bl	8006570 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061e6:	2b40      	cmp	r3, #64	; 0x40
 80061e8:	d13a      	bne.n	8006260 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	f003 0320 	and.w	r3, r3, #32
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d035      	beq.n	8006260 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a7e      	ldr	r2, [pc, #504]	; (80063f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d101      	bne.n	8006202 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80061fe:	4b7e      	ldr	r3, [pc, #504]	; (80063f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006200:	e001      	b.n	8006206 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006202:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006206:	685a      	ldr	r2, [r3, #4]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4979      	ldr	r1, [pc, #484]	; (80063f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800620e:	428b      	cmp	r3, r1
 8006210:	d101      	bne.n	8006216 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006212:	4b79      	ldr	r3, [pc, #484]	; (80063f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006214:	e001      	b.n	800621a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006216:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800621a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800621e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	685a      	ldr	r2, [r3, #4]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800622e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006230:	2300      	movs	r3, #0
 8006232:	60fb      	str	r3, [r7, #12]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	60fb      	str	r3, [r7, #12]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	60fb      	str	r3, [r7, #12]
 8006244:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2201      	movs	r2, #1
 800624a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006252:	f043 0202 	orr.w	r2, r3, #2
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f7ff fe88 	bl	8005f70 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	f003 0308 	and.w	r3, r3, #8
 8006266:	2b08      	cmp	r3, #8
 8006268:	f040 80be 	bne.w	80063e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	f003 0320 	and.w	r3, r3, #32
 8006272:	2b00      	cmp	r3, #0
 8006274:	f000 80b8 	beq.w	80063e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	685a      	ldr	r2, [r3, #4]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006286:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a59      	ldr	r2, [pc, #356]	; (80063f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d101      	bne.n	8006296 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006292:	4b59      	ldr	r3, [pc, #356]	; (80063f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006294:	e001      	b.n	800629a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006296:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800629a:	685a      	ldr	r2, [r3, #4]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4954      	ldr	r1, [pc, #336]	; (80063f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80062a2:	428b      	cmp	r3, r1
 80062a4:	d101      	bne.n	80062aa <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80062a6:	4b54      	ldr	r3, [pc, #336]	; (80063f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80062a8:	e001      	b.n	80062ae <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80062aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80062ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80062b2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80062b4:	2300      	movs	r3, #0
 80062b6:	60bb      	str	r3, [r7, #8]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	60bb      	str	r3, [r7, #8]
 80062c0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2201      	movs	r2, #1
 80062c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ce:	f043 0204 	orr.w	r2, r3, #4
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f7ff fe4a 	bl	8005f70 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80062dc:	e084      	b.n	80063e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	f003 0302 	and.w	r3, r3, #2
 80062e4:	2b02      	cmp	r3, #2
 80062e6:	d107      	bne.n	80062f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d002      	beq.n	80062f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 f8be 	bl	8006474 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	f003 0301 	and.w	r3, r3, #1
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d107      	bne.n	8006312 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006308:	2b00      	cmp	r3, #0
 800630a:	d002      	beq.n	8006312 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 f8fd 	bl	800650c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006318:	2b40      	cmp	r3, #64	; 0x40
 800631a:	d12f      	bne.n	800637c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	f003 0320 	and.w	r3, r3, #32
 8006322:	2b00      	cmp	r3, #0
 8006324:	d02a      	beq.n	800637c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	685a      	ldr	r2, [r3, #4]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006334:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a2e      	ldr	r2, [pc, #184]	; (80063f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d101      	bne.n	8006344 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006340:	4b2d      	ldr	r3, [pc, #180]	; (80063f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006342:	e001      	b.n	8006348 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006344:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006348:	685a      	ldr	r2, [r3, #4]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4929      	ldr	r1, [pc, #164]	; (80063f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006350:	428b      	cmp	r3, r1
 8006352:	d101      	bne.n	8006358 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006354:	4b28      	ldr	r3, [pc, #160]	; (80063f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006356:	e001      	b.n	800635c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006358:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800635c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006360:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2201      	movs	r2, #1
 8006366:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800636e:	f043 0202 	orr.w	r2, r3, #2
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f7ff fdfa 	bl	8005f70 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	f003 0308 	and.w	r3, r3, #8
 8006382:	2b08      	cmp	r3, #8
 8006384:	d131      	bne.n	80063ea <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	f003 0320 	and.w	r3, r3, #32
 800638c:	2b00      	cmp	r3, #0
 800638e:	d02c      	beq.n	80063ea <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a17      	ldr	r2, [pc, #92]	; (80063f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d101      	bne.n	800639e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800639a:	4b17      	ldr	r3, [pc, #92]	; (80063f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800639c:	e001      	b.n	80063a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800639e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80063a2:	685a      	ldr	r2, [r3, #4]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4912      	ldr	r1, [pc, #72]	; (80063f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80063aa:	428b      	cmp	r3, r1
 80063ac:	d101      	bne.n	80063b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80063ae:	4b12      	ldr	r3, [pc, #72]	; (80063f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80063b0:	e001      	b.n	80063b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80063b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80063b6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80063ba:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	685a      	ldr	r2, [r3, #4]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80063ca:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063d8:	f043 0204 	orr.w	r2, r3, #4
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f7ff fdc5 	bl	8005f70 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80063e6:	e000      	b.n	80063ea <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80063e8:	bf00      	nop
}
 80063ea:	bf00      	nop
 80063ec:	3720      	adds	r7, #32
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop
 80063f4:	40003800 	.word	0x40003800
 80063f8:	40003400 	.word	0x40003400

080063fc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006404:	bf00      	nop
 8006406:	370c      	adds	r7, #12
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b082      	sub	sp, #8
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641c:	1c99      	adds	r1, r3, #2
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	6251      	str	r1, [r2, #36]	; 0x24
 8006422:	881a      	ldrh	r2, [r3, #0]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800642e:	b29b      	uxth	r3, r3
 8006430:	3b01      	subs	r3, #1
 8006432:	b29a      	uxth	r2, r3
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800643c:	b29b      	uxth	r3, r3
 800643e:	2b00      	cmp	r3, #0
 8006440:	d113      	bne.n	800646a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	685a      	ldr	r2, [r3, #4]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006450:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006456:	b29b      	uxth	r3, r3
 8006458:	2b00      	cmp	r3, #0
 800645a:	d106      	bne.n	800646a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f7ff ffc9 	bl	80063fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800646a:	bf00      	nop
 800646c:	3708      	adds	r7, #8
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
	...

08006474 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006480:	1c99      	adds	r1, r3, #2
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	6251      	str	r1, [r2, #36]	; 0x24
 8006486:	8819      	ldrh	r1, [r3, #0]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a1d      	ldr	r2, [pc, #116]	; (8006504 <I2SEx_TxISR_I2SExt+0x90>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d101      	bne.n	8006496 <I2SEx_TxISR_I2SExt+0x22>
 8006492:	4b1d      	ldr	r3, [pc, #116]	; (8006508 <I2SEx_TxISR_I2SExt+0x94>)
 8006494:	e001      	b.n	800649a <I2SEx_TxISR_I2SExt+0x26>
 8006496:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800649a:	460a      	mov	r2, r1
 800649c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	3b01      	subs	r3, #1
 80064a6:	b29a      	uxth	r2, r3
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d121      	bne.n	80064fa <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a12      	ldr	r2, [pc, #72]	; (8006504 <I2SEx_TxISR_I2SExt+0x90>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d101      	bne.n	80064c4 <I2SEx_TxISR_I2SExt+0x50>
 80064c0:	4b11      	ldr	r3, [pc, #68]	; (8006508 <I2SEx_TxISR_I2SExt+0x94>)
 80064c2:	e001      	b.n	80064c8 <I2SEx_TxISR_I2SExt+0x54>
 80064c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064c8:	685a      	ldr	r2, [r3, #4]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	490d      	ldr	r1, [pc, #52]	; (8006504 <I2SEx_TxISR_I2SExt+0x90>)
 80064d0:	428b      	cmp	r3, r1
 80064d2:	d101      	bne.n	80064d8 <I2SEx_TxISR_I2SExt+0x64>
 80064d4:	4b0c      	ldr	r3, [pc, #48]	; (8006508 <I2SEx_TxISR_I2SExt+0x94>)
 80064d6:	e001      	b.n	80064dc <I2SEx_TxISR_I2SExt+0x68>
 80064d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064dc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80064e0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d106      	bne.n	80064fa <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f7ff ff81 	bl	80063fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80064fa:	bf00      	nop
 80064fc:	3708      	adds	r7, #8
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	40003800 	.word	0x40003800
 8006508:	40003400 	.word	0x40003400

0800650c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b082      	sub	sp, #8
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68d8      	ldr	r0, [r3, #12]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800651e:	1c99      	adds	r1, r3, #2
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006524:	b282      	uxth	r2, r0
 8006526:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800652c:	b29b      	uxth	r3, r3
 800652e:	3b01      	subs	r3, #1
 8006530:	b29a      	uxth	r2, r3
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800653a:	b29b      	uxth	r3, r3
 800653c:	2b00      	cmp	r3, #0
 800653e:	d113      	bne.n	8006568 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	685a      	ldr	r2, [r3, #4]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800654e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006554:	b29b      	uxth	r3, r3
 8006556:	2b00      	cmp	r3, #0
 8006558:	d106      	bne.n	8006568 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2201      	movs	r2, #1
 800655e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f7ff ff4a 	bl	80063fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006568:	bf00      	nop
 800656a:	3708      	adds	r7, #8
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b082      	sub	sp, #8
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a20      	ldr	r2, [pc, #128]	; (8006600 <I2SEx_RxISR_I2SExt+0x90>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d101      	bne.n	8006586 <I2SEx_RxISR_I2SExt+0x16>
 8006582:	4b20      	ldr	r3, [pc, #128]	; (8006604 <I2SEx_RxISR_I2SExt+0x94>)
 8006584:	e001      	b.n	800658a <I2SEx_RxISR_I2SExt+0x1a>
 8006586:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800658a:	68d8      	ldr	r0, [r3, #12]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006590:	1c99      	adds	r1, r3, #2
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006596:	b282      	uxth	r2, r0
 8006598:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800659e:	b29b      	uxth	r3, r3
 80065a0:	3b01      	subs	r3, #1
 80065a2:	b29a      	uxth	r2, r3
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d121      	bne.n	80065f6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a12      	ldr	r2, [pc, #72]	; (8006600 <I2SEx_RxISR_I2SExt+0x90>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d101      	bne.n	80065c0 <I2SEx_RxISR_I2SExt+0x50>
 80065bc:	4b11      	ldr	r3, [pc, #68]	; (8006604 <I2SEx_RxISR_I2SExt+0x94>)
 80065be:	e001      	b.n	80065c4 <I2SEx_RxISR_I2SExt+0x54>
 80065c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065c4:	685a      	ldr	r2, [r3, #4]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	490d      	ldr	r1, [pc, #52]	; (8006600 <I2SEx_RxISR_I2SExt+0x90>)
 80065cc:	428b      	cmp	r3, r1
 80065ce:	d101      	bne.n	80065d4 <I2SEx_RxISR_I2SExt+0x64>
 80065d0:	4b0c      	ldr	r3, [pc, #48]	; (8006604 <I2SEx_RxISR_I2SExt+0x94>)
 80065d2:	e001      	b.n	80065d8 <I2SEx_RxISR_I2SExt+0x68>
 80065d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065d8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80065dc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d106      	bne.n	80065f6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f7ff ff03 	bl	80063fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80065f6:	bf00      	nop
 80065f8:	3708      	adds	r7, #8
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	40003800 	.word	0x40003800
 8006604:	40003400 	.word	0x40003400

08006608 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b086      	sub	sp, #24
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d101      	bne.n	800661a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e264      	b.n	8006ae4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f003 0301 	and.w	r3, r3, #1
 8006622:	2b00      	cmp	r3, #0
 8006624:	d075      	beq.n	8006712 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006626:	4ba3      	ldr	r3, [pc, #652]	; (80068b4 <HAL_RCC_OscConfig+0x2ac>)
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	f003 030c 	and.w	r3, r3, #12
 800662e:	2b04      	cmp	r3, #4
 8006630:	d00c      	beq.n	800664c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006632:	4ba0      	ldr	r3, [pc, #640]	; (80068b4 <HAL_RCC_OscConfig+0x2ac>)
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800663a:	2b08      	cmp	r3, #8
 800663c:	d112      	bne.n	8006664 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800663e:	4b9d      	ldr	r3, [pc, #628]	; (80068b4 <HAL_RCC_OscConfig+0x2ac>)
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006646:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800664a:	d10b      	bne.n	8006664 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800664c:	4b99      	ldr	r3, [pc, #612]	; (80068b4 <HAL_RCC_OscConfig+0x2ac>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006654:	2b00      	cmp	r3, #0
 8006656:	d05b      	beq.n	8006710 <HAL_RCC_OscConfig+0x108>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d157      	bne.n	8006710 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	e23f      	b.n	8006ae4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800666c:	d106      	bne.n	800667c <HAL_RCC_OscConfig+0x74>
 800666e:	4b91      	ldr	r3, [pc, #580]	; (80068b4 <HAL_RCC_OscConfig+0x2ac>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a90      	ldr	r2, [pc, #576]	; (80068b4 <HAL_RCC_OscConfig+0x2ac>)
 8006674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006678:	6013      	str	r3, [r2, #0]
 800667a:	e01d      	b.n	80066b8 <HAL_RCC_OscConfig+0xb0>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006684:	d10c      	bne.n	80066a0 <HAL_RCC_OscConfig+0x98>
 8006686:	4b8b      	ldr	r3, [pc, #556]	; (80068b4 <HAL_RCC_OscConfig+0x2ac>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a8a      	ldr	r2, [pc, #552]	; (80068b4 <HAL_RCC_OscConfig+0x2ac>)
 800668c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006690:	6013      	str	r3, [r2, #0]
 8006692:	4b88      	ldr	r3, [pc, #544]	; (80068b4 <HAL_RCC_OscConfig+0x2ac>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a87      	ldr	r2, [pc, #540]	; (80068b4 <HAL_RCC_OscConfig+0x2ac>)
 8006698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800669c:	6013      	str	r3, [r2, #0]
 800669e:	e00b      	b.n	80066b8 <HAL_RCC_OscConfig+0xb0>
 80066a0:	4b84      	ldr	r3, [pc, #528]	; (80068b4 <HAL_RCC_OscConfig+0x2ac>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a83      	ldr	r2, [pc, #524]	; (80068b4 <HAL_RCC_OscConfig+0x2ac>)
 80066a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066aa:	6013      	str	r3, [r2, #0]
 80066ac:	4b81      	ldr	r3, [pc, #516]	; (80068b4 <HAL_RCC_OscConfig+0x2ac>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a80      	ldr	r2, [pc, #512]	; (80068b4 <HAL_RCC_OscConfig+0x2ac>)
 80066b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80066b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d013      	beq.n	80066e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066c0:	f7fb fc4a 	bl	8001f58 <HAL_GetTick>
 80066c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066c6:	e008      	b.n	80066da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80066c8:	f7fb fc46 	bl	8001f58 <HAL_GetTick>
 80066cc:	4602      	mov	r2, r0
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	2b64      	cmp	r3, #100	; 0x64
 80066d4:	d901      	bls.n	80066da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80066d6:	2303      	movs	r3, #3
 80066d8:	e204      	b.n	8006ae4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066da:	4b76      	ldr	r3, [pc, #472]	; (80068b4 <HAL_RCC_OscConfig+0x2ac>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d0f0      	beq.n	80066c8 <HAL_RCC_OscConfig+0xc0>
 80066e6:	e014      	b.n	8006712 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066e8:	f7fb fc36 	bl	8001f58 <HAL_GetTick>
 80066ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066ee:	e008      	b.n	8006702 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80066f0:	f7fb fc32 	bl	8001f58 <HAL_GetTick>
 80066f4:	4602      	mov	r2, r0
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	1ad3      	subs	r3, r2, r3
 80066fa:	2b64      	cmp	r3, #100	; 0x64
 80066fc:	d901      	bls.n	8006702 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80066fe:	2303      	movs	r3, #3
 8006700:	e1f0      	b.n	8006ae4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006702:	4b6c      	ldr	r3, [pc, #432]	; (80068b4 <HAL_RCC_OscConfig+0x2ac>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800670a:	2b00      	cmp	r3, #0
 800670c:	d1f0      	bne.n	80066f0 <HAL_RCC_OscConfig+0xe8>
 800670e:	e000      	b.n	8006712 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006710:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 0302 	and.w	r3, r3, #2
 800671a:	2b00      	cmp	r3, #0
 800671c:	d063      	beq.n	80067e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800671e:	4b65      	ldr	r3, [pc, #404]	; (80068b4 <HAL_RCC_OscConfig+0x2ac>)
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	f003 030c 	and.w	r3, r3, #12
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00b      	beq.n	8006742 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800672a:	4b62      	ldr	r3, [pc, #392]	; (80068b4 <HAL_RCC_OscConfig+0x2ac>)
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006732:	2b08      	cmp	r3, #8
 8006734:	d11c      	bne.n	8006770 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006736:	4b5f      	ldr	r3, [pc, #380]	; (80068b4 <HAL_RCC_OscConfig+0x2ac>)
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800673e:	2b00      	cmp	r3, #0
 8006740:	d116      	bne.n	8006770 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006742:	4b5c      	ldr	r3, [pc, #368]	; (80068b4 <HAL_RCC_OscConfig+0x2ac>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 0302 	and.w	r3, r3, #2
 800674a:	2b00      	cmp	r3, #0
 800674c:	d005      	beq.n	800675a <HAL_RCC_OscConfig+0x152>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	2b01      	cmp	r3, #1
 8006754:	d001      	beq.n	800675a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e1c4      	b.n	8006ae4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800675a:	4b56      	ldr	r3, [pc, #344]	; (80068b4 <HAL_RCC_OscConfig+0x2ac>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	691b      	ldr	r3, [r3, #16]
 8006766:	00db      	lsls	r3, r3, #3
 8006768:	4952      	ldr	r1, [pc, #328]	; (80068b4 <HAL_RCC_OscConfig+0x2ac>)
 800676a:	4313      	orrs	r3, r2
 800676c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800676e:	e03a      	b.n	80067e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d020      	beq.n	80067ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006778:	4b4f      	ldr	r3, [pc, #316]	; (80068b8 <HAL_RCC_OscConfig+0x2b0>)
 800677a:	2201      	movs	r2, #1
 800677c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800677e:	f7fb fbeb 	bl	8001f58 <HAL_GetTick>
 8006782:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006784:	e008      	b.n	8006798 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006786:	f7fb fbe7 	bl	8001f58 <HAL_GetTick>
 800678a:	4602      	mov	r2, r0
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	2b02      	cmp	r3, #2
 8006792:	d901      	bls.n	8006798 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006794:	2303      	movs	r3, #3
 8006796:	e1a5      	b.n	8006ae4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006798:	4b46      	ldr	r3, [pc, #280]	; (80068b4 <HAL_RCC_OscConfig+0x2ac>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 0302 	and.w	r3, r3, #2
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d0f0      	beq.n	8006786 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067a4:	4b43      	ldr	r3, [pc, #268]	; (80068b4 <HAL_RCC_OscConfig+0x2ac>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	00db      	lsls	r3, r3, #3
 80067b2:	4940      	ldr	r1, [pc, #256]	; (80068b4 <HAL_RCC_OscConfig+0x2ac>)
 80067b4:	4313      	orrs	r3, r2
 80067b6:	600b      	str	r3, [r1, #0]
 80067b8:	e015      	b.n	80067e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80067ba:	4b3f      	ldr	r3, [pc, #252]	; (80068b8 <HAL_RCC_OscConfig+0x2b0>)
 80067bc:	2200      	movs	r2, #0
 80067be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067c0:	f7fb fbca 	bl	8001f58 <HAL_GetTick>
 80067c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067c6:	e008      	b.n	80067da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80067c8:	f7fb fbc6 	bl	8001f58 <HAL_GetTick>
 80067cc:	4602      	mov	r2, r0
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	1ad3      	subs	r3, r2, r3
 80067d2:	2b02      	cmp	r3, #2
 80067d4:	d901      	bls.n	80067da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80067d6:	2303      	movs	r3, #3
 80067d8:	e184      	b.n	8006ae4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067da:	4b36      	ldr	r3, [pc, #216]	; (80068b4 <HAL_RCC_OscConfig+0x2ac>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 0302 	and.w	r3, r3, #2
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d1f0      	bne.n	80067c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 0308 	and.w	r3, r3, #8
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d030      	beq.n	8006854 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	695b      	ldr	r3, [r3, #20]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d016      	beq.n	8006828 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067fa:	4b30      	ldr	r3, [pc, #192]	; (80068bc <HAL_RCC_OscConfig+0x2b4>)
 80067fc:	2201      	movs	r2, #1
 80067fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006800:	f7fb fbaa 	bl	8001f58 <HAL_GetTick>
 8006804:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006806:	e008      	b.n	800681a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006808:	f7fb fba6 	bl	8001f58 <HAL_GetTick>
 800680c:	4602      	mov	r2, r0
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	1ad3      	subs	r3, r2, r3
 8006812:	2b02      	cmp	r3, #2
 8006814:	d901      	bls.n	800681a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006816:	2303      	movs	r3, #3
 8006818:	e164      	b.n	8006ae4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800681a:	4b26      	ldr	r3, [pc, #152]	; (80068b4 <HAL_RCC_OscConfig+0x2ac>)
 800681c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800681e:	f003 0302 	and.w	r3, r3, #2
 8006822:	2b00      	cmp	r3, #0
 8006824:	d0f0      	beq.n	8006808 <HAL_RCC_OscConfig+0x200>
 8006826:	e015      	b.n	8006854 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006828:	4b24      	ldr	r3, [pc, #144]	; (80068bc <HAL_RCC_OscConfig+0x2b4>)
 800682a:	2200      	movs	r2, #0
 800682c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800682e:	f7fb fb93 	bl	8001f58 <HAL_GetTick>
 8006832:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006834:	e008      	b.n	8006848 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006836:	f7fb fb8f 	bl	8001f58 <HAL_GetTick>
 800683a:	4602      	mov	r2, r0
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	2b02      	cmp	r3, #2
 8006842:	d901      	bls.n	8006848 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006844:	2303      	movs	r3, #3
 8006846:	e14d      	b.n	8006ae4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006848:	4b1a      	ldr	r3, [pc, #104]	; (80068b4 <HAL_RCC_OscConfig+0x2ac>)
 800684a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800684c:	f003 0302 	and.w	r3, r3, #2
 8006850:	2b00      	cmp	r3, #0
 8006852:	d1f0      	bne.n	8006836 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 0304 	and.w	r3, r3, #4
 800685c:	2b00      	cmp	r3, #0
 800685e:	f000 80a0 	beq.w	80069a2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006862:	2300      	movs	r3, #0
 8006864:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006866:	4b13      	ldr	r3, [pc, #76]	; (80068b4 <HAL_RCC_OscConfig+0x2ac>)
 8006868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800686e:	2b00      	cmp	r3, #0
 8006870:	d10f      	bne.n	8006892 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006872:	2300      	movs	r3, #0
 8006874:	60bb      	str	r3, [r7, #8]
 8006876:	4b0f      	ldr	r3, [pc, #60]	; (80068b4 <HAL_RCC_OscConfig+0x2ac>)
 8006878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687a:	4a0e      	ldr	r2, [pc, #56]	; (80068b4 <HAL_RCC_OscConfig+0x2ac>)
 800687c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006880:	6413      	str	r3, [r2, #64]	; 0x40
 8006882:	4b0c      	ldr	r3, [pc, #48]	; (80068b4 <HAL_RCC_OscConfig+0x2ac>)
 8006884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800688a:	60bb      	str	r3, [r7, #8]
 800688c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800688e:	2301      	movs	r3, #1
 8006890:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006892:	4b0b      	ldr	r3, [pc, #44]	; (80068c0 <HAL_RCC_OscConfig+0x2b8>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800689a:	2b00      	cmp	r3, #0
 800689c:	d121      	bne.n	80068e2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800689e:	4b08      	ldr	r3, [pc, #32]	; (80068c0 <HAL_RCC_OscConfig+0x2b8>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a07      	ldr	r2, [pc, #28]	; (80068c0 <HAL_RCC_OscConfig+0x2b8>)
 80068a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068aa:	f7fb fb55 	bl	8001f58 <HAL_GetTick>
 80068ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068b0:	e011      	b.n	80068d6 <HAL_RCC_OscConfig+0x2ce>
 80068b2:	bf00      	nop
 80068b4:	40023800 	.word	0x40023800
 80068b8:	42470000 	.word	0x42470000
 80068bc:	42470e80 	.word	0x42470e80
 80068c0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068c4:	f7fb fb48 	bl	8001f58 <HAL_GetTick>
 80068c8:	4602      	mov	r2, r0
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	1ad3      	subs	r3, r2, r3
 80068ce:	2b02      	cmp	r3, #2
 80068d0:	d901      	bls.n	80068d6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80068d2:	2303      	movs	r3, #3
 80068d4:	e106      	b.n	8006ae4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068d6:	4b85      	ldr	r3, [pc, #532]	; (8006aec <HAL_RCC_OscConfig+0x4e4>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d0f0      	beq.n	80068c4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d106      	bne.n	80068f8 <HAL_RCC_OscConfig+0x2f0>
 80068ea:	4b81      	ldr	r3, [pc, #516]	; (8006af0 <HAL_RCC_OscConfig+0x4e8>)
 80068ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ee:	4a80      	ldr	r2, [pc, #512]	; (8006af0 <HAL_RCC_OscConfig+0x4e8>)
 80068f0:	f043 0301 	orr.w	r3, r3, #1
 80068f4:	6713      	str	r3, [r2, #112]	; 0x70
 80068f6:	e01c      	b.n	8006932 <HAL_RCC_OscConfig+0x32a>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	2b05      	cmp	r3, #5
 80068fe:	d10c      	bne.n	800691a <HAL_RCC_OscConfig+0x312>
 8006900:	4b7b      	ldr	r3, [pc, #492]	; (8006af0 <HAL_RCC_OscConfig+0x4e8>)
 8006902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006904:	4a7a      	ldr	r2, [pc, #488]	; (8006af0 <HAL_RCC_OscConfig+0x4e8>)
 8006906:	f043 0304 	orr.w	r3, r3, #4
 800690a:	6713      	str	r3, [r2, #112]	; 0x70
 800690c:	4b78      	ldr	r3, [pc, #480]	; (8006af0 <HAL_RCC_OscConfig+0x4e8>)
 800690e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006910:	4a77      	ldr	r2, [pc, #476]	; (8006af0 <HAL_RCC_OscConfig+0x4e8>)
 8006912:	f043 0301 	orr.w	r3, r3, #1
 8006916:	6713      	str	r3, [r2, #112]	; 0x70
 8006918:	e00b      	b.n	8006932 <HAL_RCC_OscConfig+0x32a>
 800691a:	4b75      	ldr	r3, [pc, #468]	; (8006af0 <HAL_RCC_OscConfig+0x4e8>)
 800691c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800691e:	4a74      	ldr	r2, [pc, #464]	; (8006af0 <HAL_RCC_OscConfig+0x4e8>)
 8006920:	f023 0301 	bic.w	r3, r3, #1
 8006924:	6713      	str	r3, [r2, #112]	; 0x70
 8006926:	4b72      	ldr	r3, [pc, #456]	; (8006af0 <HAL_RCC_OscConfig+0x4e8>)
 8006928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800692a:	4a71      	ldr	r2, [pc, #452]	; (8006af0 <HAL_RCC_OscConfig+0x4e8>)
 800692c:	f023 0304 	bic.w	r3, r3, #4
 8006930:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d015      	beq.n	8006966 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800693a:	f7fb fb0d 	bl	8001f58 <HAL_GetTick>
 800693e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006940:	e00a      	b.n	8006958 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006942:	f7fb fb09 	bl	8001f58 <HAL_GetTick>
 8006946:	4602      	mov	r2, r0
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	1ad3      	subs	r3, r2, r3
 800694c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006950:	4293      	cmp	r3, r2
 8006952:	d901      	bls.n	8006958 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006954:	2303      	movs	r3, #3
 8006956:	e0c5      	b.n	8006ae4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006958:	4b65      	ldr	r3, [pc, #404]	; (8006af0 <HAL_RCC_OscConfig+0x4e8>)
 800695a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800695c:	f003 0302 	and.w	r3, r3, #2
 8006960:	2b00      	cmp	r3, #0
 8006962:	d0ee      	beq.n	8006942 <HAL_RCC_OscConfig+0x33a>
 8006964:	e014      	b.n	8006990 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006966:	f7fb faf7 	bl	8001f58 <HAL_GetTick>
 800696a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800696c:	e00a      	b.n	8006984 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800696e:	f7fb faf3 	bl	8001f58 <HAL_GetTick>
 8006972:	4602      	mov	r2, r0
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	1ad3      	subs	r3, r2, r3
 8006978:	f241 3288 	movw	r2, #5000	; 0x1388
 800697c:	4293      	cmp	r3, r2
 800697e:	d901      	bls.n	8006984 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006980:	2303      	movs	r3, #3
 8006982:	e0af      	b.n	8006ae4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006984:	4b5a      	ldr	r3, [pc, #360]	; (8006af0 <HAL_RCC_OscConfig+0x4e8>)
 8006986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006988:	f003 0302 	and.w	r3, r3, #2
 800698c:	2b00      	cmp	r3, #0
 800698e:	d1ee      	bne.n	800696e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006990:	7dfb      	ldrb	r3, [r7, #23]
 8006992:	2b01      	cmp	r3, #1
 8006994:	d105      	bne.n	80069a2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006996:	4b56      	ldr	r3, [pc, #344]	; (8006af0 <HAL_RCC_OscConfig+0x4e8>)
 8006998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699a:	4a55      	ldr	r2, [pc, #340]	; (8006af0 <HAL_RCC_OscConfig+0x4e8>)
 800699c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	699b      	ldr	r3, [r3, #24]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	f000 809b 	beq.w	8006ae2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80069ac:	4b50      	ldr	r3, [pc, #320]	; (8006af0 <HAL_RCC_OscConfig+0x4e8>)
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	f003 030c 	and.w	r3, r3, #12
 80069b4:	2b08      	cmp	r3, #8
 80069b6:	d05c      	beq.n	8006a72 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	699b      	ldr	r3, [r3, #24]
 80069bc:	2b02      	cmp	r3, #2
 80069be:	d141      	bne.n	8006a44 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069c0:	4b4c      	ldr	r3, [pc, #304]	; (8006af4 <HAL_RCC_OscConfig+0x4ec>)
 80069c2:	2200      	movs	r2, #0
 80069c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069c6:	f7fb fac7 	bl	8001f58 <HAL_GetTick>
 80069ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069cc:	e008      	b.n	80069e0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069ce:	f7fb fac3 	bl	8001f58 <HAL_GetTick>
 80069d2:	4602      	mov	r2, r0
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	1ad3      	subs	r3, r2, r3
 80069d8:	2b02      	cmp	r3, #2
 80069da:	d901      	bls.n	80069e0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80069dc:	2303      	movs	r3, #3
 80069de:	e081      	b.n	8006ae4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069e0:	4b43      	ldr	r3, [pc, #268]	; (8006af0 <HAL_RCC_OscConfig+0x4e8>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d1f0      	bne.n	80069ce <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	69da      	ldr	r2, [r3, #28]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6a1b      	ldr	r3, [r3, #32]
 80069f4:	431a      	orrs	r2, r3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fa:	019b      	lsls	r3, r3, #6
 80069fc:	431a      	orrs	r2, r3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a02:	085b      	lsrs	r3, r3, #1
 8006a04:	3b01      	subs	r3, #1
 8006a06:	041b      	lsls	r3, r3, #16
 8006a08:	431a      	orrs	r2, r3
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a0e:	061b      	lsls	r3, r3, #24
 8006a10:	4937      	ldr	r1, [pc, #220]	; (8006af0 <HAL_RCC_OscConfig+0x4e8>)
 8006a12:	4313      	orrs	r3, r2
 8006a14:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a16:	4b37      	ldr	r3, [pc, #220]	; (8006af4 <HAL_RCC_OscConfig+0x4ec>)
 8006a18:	2201      	movs	r2, #1
 8006a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a1c:	f7fb fa9c 	bl	8001f58 <HAL_GetTick>
 8006a20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a22:	e008      	b.n	8006a36 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a24:	f7fb fa98 	bl	8001f58 <HAL_GetTick>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	1ad3      	subs	r3, r2, r3
 8006a2e:	2b02      	cmp	r3, #2
 8006a30:	d901      	bls.n	8006a36 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006a32:	2303      	movs	r3, #3
 8006a34:	e056      	b.n	8006ae4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a36:	4b2e      	ldr	r3, [pc, #184]	; (8006af0 <HAL_RCC_OscConfig+0x4e8>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d0f0      	beq.n	8006a24 <HAL_RCC_OscConfig+0x41c>
 8006a42:	e04e      	b.n	8006ae2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a44:	4b2b      	ldr	r3, [pc, #172]	; (8006af4 <HAL_RCC_OscConfig+0x4ec>)
 8006a46:	2200      	movs	r2, #0
 8006a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a4a:	f7fb fa85 	bl	8001f58 <HAL_GetTick>
 8006a4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a50:	e008      	b.n	8006a64 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a52:	f7fb fa81 	bl	8001f58 <HAL_GetTick>
 8006a56:	4602      	mov	r2, r0
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	1ad3      	subs	r3, r2, r3
 8006a5c:	2b02      	cmp	r3, #2
 8006a5e:	d901      	bls.n	8006a64 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006a60:	2303      	movs	r3, #3
 8006a62:	e03f      	b.n	8006ae4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a64:	4b22      	ldr	r3, [pc, #136]	; (8006af0 <HAL_RCC_OscConfig+0x4e8>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d1f0      	bne.n	8006a52 <HAL_RCC_OscConfig+0x44a>
 8006a70:	e037      	b.n	8006ae2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	699b      	ldr	r3, [r3, #24]
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d101      	bne.n	8006a7e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e032      	b.n	8006ae4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006a7e:	4b1c      	ldr	r3, [pc, #112]	; (8006af0 <HAL_RCC_OscConfig+0x4e8>)
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	699b      	ldr	r3, [r3, #24]
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d028      	beq.n	8006ade <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d121      	bne.n	8006ade <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d11a      	bne.n	8006ade <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006aae:	4013      	ands	r3, r2
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006ab4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d111      	bne.n	8006ade <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ac4:	085b      	lsrs	r3, r3, #1
 8006ac6:	3b01      	subs	r3, #1
 8006ac8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d107      	bne.n	8006ade <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d001      	beq.n	8006ae2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e000      	b.n	8006ae4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3718      	adds	r7, #24
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}
 8006aec:	40007000 	.word	0x40007000
 8006af0:	40023800 	.word	0x40023800
 8006af4:	42470060 	.word	0x42470060

08006af8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d101      	bne.n	8006b0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e0cc      	b.n	8006ca6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b0c:	4b68      	ldr	r3, [pc, #416]	; (8006cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 0307 	and.w	r3, r3, #7
 8006b14:	683a      	ldr	r2, [r7, #0]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d90c      	bls.n	8006b34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b1a:	4b65      	ldr	r3, [pc, #404]	; (8006cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8006b1c:	683a      	ldr	r2, [r7, #0]
 8006b1e:	b2d2      	uxtb	r2, r2
 8006b20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b22:	4b63      	ldr	r3, [pc, #396]	; (8006cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f003 0307 	and.w	r3, r3, #7
 8006b2a:	683a      	ldr	r2, [r7, #0]
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d001      	beq.n	8006b34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	e0b8      	b.n	8006ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 0302 	and.w	r3, r3, #2
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d020      	beq.n	8006b82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 0304 	and.w	r3, r3, #4
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d005      	beq.n	8006b58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b4c:	4b59      	ldr	r3, [pc, #356]	; (8006cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	4a58      	ldr	r2, [pc, #352]	; (8006cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006b56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f003 0308 	and.w	r3, r3, #8
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d005      	beq.n	8006b70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b64:	4b53      	ldr	r3, [pc, #332]	; (8006cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	4a52      	ldr	r2, [pc, #328]	; (8006cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006b6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b70:	4b50      	ldr	r3, [pc, #320]	; (8006cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	494d      	ldr	r1, [pc, #308]	; (8006cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f003 0301 	and.w	r3, r3, #1
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d044      	beq.n	8006c18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d107      	bne.n	8006ba6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b96:	4b47      	ldr	r3, [pc, #284]	; (8006cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d119      	bne.n	8006bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e07f      	b.n	8006ca6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	d003      	beq.n	8006bb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006bb2:	2b03      	cmp	r3, #3
 8006bb4:	d107      	bne.n	8006bc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bb6:	4b3f      	ldr	r3, [pc, #252]	; (8006cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d109      	bne.n	8006bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	e06f      	b.n	8006ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bc6:	4b3b      	ldr	r3, [pc, #236]	; (8006cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 0302 	and.w	r3, r3, #2
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d101      	bne.n	8006bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e067      	b.n	8006ca6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006bd6:	4b37      	ldr	r3, [pc, #220]	; (8006cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	f023 0203 	bic.w	r2, r3, #3
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	4934      	ldr	r1, [pc, #208]	; (8006cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006be4:	4313      	orrs	r3, r2
 8006be6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006be8:	f7fb f9b6 	bl	8001f58 <HAL_GetTick>
 8006bec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bee:	e00a      	b.n	8006c06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bf0:	f7fb f9b2 	bl	8001f58 <HAL_GetTick>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	1ad3      	subs	r3, r2, r3
 8006bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d901      	bls.n	8006c06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006c02:	2303      	movs	r3, #3
 8006c04:	e04f      	b.n	8006ca6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c06:	4b2b      	ldr	r3, [pc, #172]	; (8006cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	f003 020c 	and.w	r2, r3, #12
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d1eb      	bne.n	8006bf0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c18:	4b25      	ldr	r3, [pc, #148]	; (8006cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f003 0307 	and.w	r3, r3, #7
 8006c20:	683a      	ldr	r2, [r7, #0]
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d20c      	bcs.n	8006c40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c26:	4b22      	ldr	r3, [pc, #136]	; (8006cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8006c28:	683a      	ldr	r2, [r7, #0]
 8006c2a:	b2d2      	uxtb	r2, r2
 8006c2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c2e:	4b20      	ldr	r3, [pc, #128]	; (8006cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 0307 	and.w	r3, r3, #7
 8006c36:	683a      	ldr	r2, [r7, #0]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d001      	beq.n	8006c40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e032      	b.n	8006ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f003 0304 	and.w	r3, r3, #4
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d008      	beq.n	8006c5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c4c:	4b19      	ldr	r3, [pc, #100]	; (8006cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	4916      	ldr	r1, [pc, #88]	; (8006cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f003 0308 	and.w	r3, r3, #8
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d009      	beq.n	8006c7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c6a:	4b12      	ldr	r3, [pc, #72]	; (8006cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	691b      	ldr	r3, [r3, #16]
 8006c76:	00db      	lsls	r3, r3, #3
 8006c78:	490e      	ldr	r1, [pc, #56]	; (8006cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006c7e:	f000 f821 	bl	8006cc4 <HAL_RCC_GetSysClockFreq>
 8006c82:	4602      	mov	r2, r0
 8006c84:	4b0b      	ldr	r3, [pc, #44]	; (8006cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	091b      	lsrs	r3, r3, #4
 8006c8a:	f003 030f 	and.w	r3, r3, #15
 8006c8e:	490a      	ldr	r1, [pc, #40]	; (8006cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8006c90:	5ccb      	ldrb	r3, [r1, r3]
 8006c92:	fa22 f303 	lsr.w	r3, r2, r3
 8006c96:	4a09      	ldr	r2, [pc, #36]	; (8006cbc <HAL_RCC_ClockConfig+0x1c4>)
 8006c98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006c9a:	4b09      	ldr	r3, [pc, #36]	; (8006cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7fb f806 	bl	8001cb0 <HAL_InitTick>

  return HAL_OK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3710      	adds	r7, #16
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	40023c00 	.word	0x40023c00
 8006cb4:	40023800 	.word	0x40023800
 8006cb8:	0800e684 	.word	0x0800e684
 8006cbc:	20000000 	.word	0x20000000
 8006cc0:	20000004 	.word	0x20000004

08006cc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006cc4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006cc8:	b084      	sub	sp, #16
 8006cca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	607b      	str	r3, [r7, #4]
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	60fb      	str	r3, [r7, #12]
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006cdc:	4b67      	ldr	r3, [pc, #412]	; (8006e7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	f003 030c 	and.w	r3, r3, #12
 8006ce4:	2b08      	cmp	r3, #8
 8006ce6:	d00d      	beq.n	8006d04 <HAL_RCC_GetSysClockFreq+0x40>
 8006ce8:	2b08      	cmp	r3, #8
 8006cea:	f200 80bd 	bhi.w	8006e68 <HAL_RCC_GetSysClockFreq+0x1a4>
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d002      	beq.n	8006cf8 <HAL_RCC_GetSysClockFreq+0x34>
 8006cf2:	2b04      	cmp	r3, #4
 8006cf4:	d003      	beq.n	8006cfe <HAL_RCC_GetSysClockFreq+0x3a>
 8006cf6:	e0b7      	b.n	8006e68 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006cf8:	4b61      	ldr	r3, [pc, #388]	; (8006e80 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006cfa:	60bb      	str	r3, [r7, #8]
       break;
 8006cfc:	e0b7      	b.n	8006e6e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006cfe:	4b61      	ldr	r3, [pc, #388]	; (8006e84 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006d00:	60bb      	str	r3, [r7, #8]
      break;
 8006d02:	e0b4      	b.n	8006e6e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d04:	4b5d      	ldr	r3, [pc, #372]	; (8006e7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d0c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006d0e:	4b5b      	ldr	r3, [pc, #364]	; (8006e7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d04d      	beq.n	8006db6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d1a:	4b58      	ldr	r3, [pc, #352]	; (8006e7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	099b      	lsrs	r3, r3, #6
 8006d20:	461a      	mov	r2, r3
 8006d22:	f04f 0300 	mov.w	r3, #0
 8006d26:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006d2a:	f04f 0100 	mov.w	r1, #0
 8006d2e:	ea02 0800 	and.w	r8, r2, r0
 8006d32:	ea03 0901 	and.w	r9, r3, r1
 8006d36:	4640      	mov	r0, r8
 8006d38:	4649      	mov	r1, r9
 8006d3a:	f04f 0200 	mov.w	r2, #0
 8006d3e:	f04f 0300 	mov.w	r3, #0
 8006d42:	014b      	lsls	r3, r1, #5
 8006d44:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006d48:	0142      	lsls	r2, r0, #5
 8006d4a:	4610      	mov	r0, r2
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	ebb0 0008 	subs.w	r0, r0, r8
 8006d52:	eb61 0109 	sbc.w	r1, r1, r9
 8006d56:	f04f 0200 	mov.w	r2, #0
 8006d5a:	f04f 0300 	mov.w	r3, #0
 8006d5e:	018b      	lsls	r3, r1, #6
 8006d60:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006d64:	0182      	lsls	r2, r0, #6
 8006d66:	1a12      	subs	r2, r2, r0
 8006d68:	eb63 0301 	sbc.w	r3, r3, r1
 8006d6c:	f04f 0000 	mov.w	r0, #0
 8006d70:	f04f 0100 	mov.w	r1, #0
 8006d74:	00d9      	lsls	r1, r3, #3
 8006d76:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006d7a:	00d0      	lsls	r0, r2, #3
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	460b      	mov	r3, r1
 8006d80:	eb12 0208 	adds.w	r2, r2, r8
 8006d84:	eb43 0309 	adc.w	r3, r3, r9
 8006d88:	f04f 0000 	mov.w	r0, #0
 8006d8c:	f04f 0100 	mov.w	r1, #0
 8006d90:	0259      	lsls	r1, r3, #9
 8006d92:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006d96:	0250      	lsls	r0, r2, #9
 8006d98:	4602      	mov	r2, r0
 8006d9a:	460b      	mov	r3, r1
 8006d9c:	4610      	mov	r0, r2
 8006d9e:	4619      	mov	r1, r3
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	461a      	mov	r2, r3
 8006da4:	f04f 0300 	mov.w	r3, #0
 8006da8:	f7f9 fd70 	bl	800088c <__aeabi_uldivmod>
 8006dac:	4602      	mov	r2, r0
 8006dae:	460b      	mov	r3, r1
 8006db0:	4613      	mov	r3, r2
 8006db2:	60fb      	str	r3, [r7, #12]
 8006db4:	e04a      	b.n	8006e4c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006db6:	4b31      	ldr	r3, [pc, #196]	; (8006e7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	099b      	lsrs	r3, r3, #6
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	f04f 0300 	mov.w	r3, #0
 8006dc2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006dc6:	f04f 0100 	mov.w	r1, #0
 8006dca:	ea02 0400 	and.w	r4, r2, r0
 8006dce:	ea03 0501 	and.w	r5, r3, r1
 8006dd2:	4620      	mov	r0, r4
 8006dd4:	4629      	mov	r1, r5
 8006dd6:	f04f 0200 	mov.w	r2, #0
 8006dda:	f04f 0300 	mov.w	r3, #0
 8006dde:	014b      	lsls	r3, r1, #5
 8006de0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006de4:	0142      	lsls	r2, r0, #5
 8006de6:	4610      	mov	r0, r2
 8006de8:	4619      	mov	r1, r3
 8006dea:	1b00      	subs	r0, r0, r4
 8006dec:	eb61 0105 	sbc.w	r1, r1, r5
 8006df0:	f04f 0200 	mov.w	r2, #0
 8006df4:	f04f 0300 	mov.w	r3, #0
 8006df8:	018b      	lsls	r3, r1, #6
 8006dfa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006dfe:	0182      	lsls	r2, r0, #6
 8006e00:	1a12      	subs	r2, r2, r0
 8006e02:	eb63 0301 	sbc.w	r3, r3, r1
 8006e06:	f04f 0000 	mov.w	r0, #0
 8006e0a:	f04f 0100 	mov.w	r1, #0
 8006e0e:	00d9      	lsls	r1, r3, #3
 8006e10:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006e14:	00d0      	lsls	r0, r2, #3
 8006e16:	4602      	mov	r2, r0
 8006e18:	460b      	mov	r3, r1
 8006e1a:	1912      	adds	r2, r2, r4
 8006e1c:	eb45 0303 	adc.w	r3, r5, r3
 8006e20:	f04f 0000 	mov.w	r0, #0
 8006e24:	f04f 0100 	mov.w	r1, #0
 8006e28:	0299      	lsls	r1, r3, #10
 8006e2a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006e2e:	0290      	lsls	r0, r2, #10
 8006e30:	4602      	mov	r2, r0
 8006e32:	460b      	mov	r3, r1
 8006e34:	4610      	mov	r0, r2
 8006e36:	4619      	mov	r1, r3
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	f04f 0300 	mov.w	r3, #0
 8006e40:	f7f9 fd24 	bl	800088c <__aeabi_uldivmod>
 8006e44:	4602      	mov	r2, r0
 8006e46:	460b      	mov	r3, r1
 8006e48:	4613      	mov	r3, r2
 8006e4a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006e4c:	4b0b      	ldr	r3, [pc, #44]	; (8006e7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	0c1b      	lsrs	r3, r3, #16
 8006e52:	f003 0303 	and.w	r3, r3, #3
 8006e56:	3301      	adds	r3, #1
 8006e58:	005b      	lsls	r3, r3, #1
 8006e5a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006e5c:	68fa      	ldr	r2, [r7, #12]
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e64:	60bb      	str	r3, [r7, #8]
      break;
 8006e66:	e002      	b.n	8006e6e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e68:	4b05      	ldr	r3, [pc, #20]	; (8006e80 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006e6a:	60bb      	str	r3, [r7, #8]
      break;
 8006e6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e6e:	68bb      	ldr	r3, [r7, #8]
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3710      	adds	r7, #16
 8006e74:	46bd      	mov	sp, r7
 8006e76:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006e7a:	bf00      	nop
 8006e7c:	40023800 	.word	0x40023800
 8006e80:	00f42400 	.word	0x00f42400
 8006e84:	007a1200 	.word	0x007a1200

08006e88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e8c:	4b03      	ldr	r3, [pc, #12]	; (8006e9c <HAL_RCC_GetHCLKFreq+0x14>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr
 8006e9a:	bf00      	nop
 8006e9c:	20000000 	.word	0x20000000

08006ea0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006ea4:	f7ff fff0 	bl	8006e88 <HAL_RCC_GetHCLKFreq>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	4b05      	ldr	r3, [pc, #20]	; (8006ec0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	0a9b      	lsrs	r3, r3, #10
 8006eb0:	f003 0307 	and.w	r3, r3, #7
 8006eb4:	4903      	ldr	r1, [pc, #12]	; (8006ec4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006eb6:	5ccb      	ldrb	r3, [r1, r3]
 8006eb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	40023800 	.word	0x40023800
 8006ec4:	0800e694 	.word	0x0800e694

08006ec8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006ecc:	f7ff ffdc 	bl	8006e88 <HAL_RCC_GetHCLKFreq>
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	4b05      	ldr	r3, [pc, #20]	; (8006ee8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	0b5b      	lsrs	r3, r3, #13
 8006ed8:	f003 0307 	and.w	r3, r3, #7
 8006edc:	4903      	ldr	r1, [pc, #12]	; (8006eec <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ede:	5ccb      	ldrb	r3, [r1, r3]
 8006ee0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	40023800 	.word	0x40023800
 8006eec:	0800e694 	.word	0x0800e694

08006ef0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	220f      	movs	r2, #15
 8006efe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006f00:	4b12      	ldr	r3, [pc, #72]	; (8006f4c <HAL_RCC_GetClockConfig+0x5c>)
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	f003 0203 	and.w	r2, r3, #3
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006f0c:	4b0f      	ldr	r3, [pc, #60]	; (8006f4c <HAL_RCC_GetClockConfig+0x5c>)
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006f18:	4b0c      	ldr	r3, [pc, #48]	; (8006f4c <HAL_RCC_GetClockConfig+0x5c>)
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006f24:	4b09      	ldr	r3, [pc, #36]	; (8006f4c <HAL_RCC_GetClockConfig+0x5c>)
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	08db      	lsrs	r3, r3, #3
 8006f2a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006f32:	4b07      	ldr	r3, [pc, #28]	; (8006f50 <HAL_RCC_GetClockConfig+0x60>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f003 0207 	and.w	r2, r3, #7
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	601a      	str	r2, [r3, #0]
}
 8006f3e:	bf00      	nop
 8006f40:	370c      	adds	r7, #12
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr
 8006f4a:	bf00      	nop
 8006f4c:	40023800 	.word	0x40023800
 8006f50:	40023c00 	.word	0x40023c00

08006f54 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b086      	sub	sp, #24
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006f60:	2300      	movs	r3, #0
 8006f62:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f003 0301 	and.w	r3, r3, #1
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d105      	bne.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d035      	beq.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006f7c:	4b62      	ldr	r3, [pc, #392]	; (8007108 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006f7e:	2200      	movs	r2, #0
 8006f80:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006f82:	f7fa ffe9 	bl	8001f58 <HAL_GetTick>
 8006f86:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006f88:	e008      	b.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006f8a:	f7fa ffe5 	bl	8001f58 <HAL_GetTick>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	1ad3      	subs	r3, r2, r3
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	d901      	bls.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f98:	2303      	movs	r3, #3
 8006f9a:	e0b0      	b.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006f9c:	4b5b      	ldr	r3, [pc, #364]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d1f0      	bne.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	019a      	lsls	r2, r3, #6
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	071b      	lsls	r3, r3, #28
 8006fb4:	4955      	ldr	r1, [pc, #340]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006fbc:	4b52      	ldr	r3, [pc, #328]	; (8007108 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006fc2:	f7fa ffc9 	bl	8001f58 <HAL_GetTick>
 8006fc6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006fc8:	e008      	b.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006fca:	f7fa ffc5 	bl	8001f58 <HAL_GetTick>
 8006fce:	4602      	mov	r2, r0
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	1ad3      	subs	r3, r2, r3
 8006fd4:	2b02      	cmp	r3, #2
 8006fd6:	d901      	bls.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006fd8:	2303      	movs	r3, #3
 8006fda:	e090      	b.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006fdc:	4b4b      	ldr	r3, [pc, #300]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d0f0      	beq.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f003 0302 	and.w	r3, r3, #2
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	f000 8083 	beq.w	80070fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	60fb      	str	r3, [r7, #12]
 8006ffa:	4b44      	ldr	r3, [pc, #272]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ffe:	4a43      	ldr	r2, [pc, #268]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007004:	6413      	str	r3, [r2, #64]	; 0x40
 8007006:	4b41      	ldr	r3, [pc, #260]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800700e:	60fb      	str	r3, [r7, #12]
 8007010:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007012:	4b3f      	ldr	r3, [pc, #252]	; (8007110 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a3e      	ldr	r2, [pc, #248]	; (8007110 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800701c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800701e:	f7fa ff9b 	bl	8001f58 <HAL_GetTick>
 8007022:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007024:	e008      	b.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007026:	f7fa ff97 	bl	8001f58 <HAL_GetTick>
 800702a:	4602      	mov	r2, r0
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	1ad3      	subs	r3, r2, r3
 8007030:	2b02      	cmp	r3, #2
 8007032:	d901      	bls.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007034:	2303      	movs	r3, #3
 8007036:	e062      	b.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007038:	4b35      	ldr	r3, [pc, #212]	; (8007110 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007040:	2b00      	cmp	r3, #0
 8007042:	d0f0      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007044:	4b31      	ldr	r3, [pc, #196]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007048:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800704c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d02f      	beq.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800705c:	693a      	ldr	r2, [r7, #16]
 800705e:	429a      	cmp	r2, r3
 8007060:	d028      	beq.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007062:	4b2a      	ldr	r3, [pc, #168]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007066:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800706a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800706c:	4b29      	ldr	r3, [pc, #164]	; (8007114 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800706e:	2201      	movs	r2, #1
 8007070:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007072:	4b28      	ldr	r3, [pc, #160]	; (8007114 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007074:	2200      	movs	r2, #0
 8007076:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007078:	4a24      	ldr	r2, [pc, #144]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800707e:	4b23      	ldr	r3, [pc, #140]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007082:	f003 0301 	and.w	r3, r3, #1
 8007086:	2b01      	cmp	r3, #1
 8007088:	d114      	bne.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800708a:	f7fa ff65 	bl	8001f58 <HAL_GetTick>
 800708e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007090:	e00a      	b.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007092:	f7fa ff61 	bl	8001f58 <HAL_GetTick>
 8007096:	4602      	mov	r2, r0
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	1ad3      	subs	r3, r2, r3
 800709c:	f241 3288 	movw	r2, #5000	; 0x1388
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d901      	bls.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80070a4:	2303      	movs	r3, #3
 80070a6:	e02a      	b.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070a8:	4b18      	ldr	r3, [pc, #96]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ac:	f003 0302 	and.w	r3, r3, #2
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d0ee      	beq.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070c0:	d10d      	bne.n	80070de <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80070c2:	4b12      	ldr	r3, [pc, #72]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80070d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070d6:	490d      	ldr	r1, [pc, #52]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070d8:	4313      	orrs	r3, r2
 80070da:	608b      	str	r3, [r1, #8]
 80070dc:	e005      	b.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x196>
 80070de:	4b0b      	ldr	r3, [pc, #44]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	4a0a      	ldr	r2, [pc, #40]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070e4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80070e8:	6093      	str	r3, [r2, #8]
 80070ea:	4b08      	ldr	r3, [pc, #32]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	68db      	ldr	r3, [r3, #12]
 80070f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070f6:	4905      	ldr	r1, [pc, #20]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070f8:	4313      	orrs	r3, r2
 80070fa:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80070fc:	2300      	movs	r3, #0
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3718      	adds	r7, #24
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	42470068 	.word	0x42470068
 800710c:	40023800 	.word	0x40023800
 8007110:	40007000 	.word	0x40007000
 8007114:	42470e40 	.word	0x42470e40

08007118 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007118:	b480      	push	{r7}
 800711a:	b087      	sub	sp, #28
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007120:	2300      	movs	r3, #0
 8007122:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007124:	2300      	movs	r3, #0
 8007126:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007128:	2300      	movs	r3, #0
 800712a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800712c:	2300      	movs	r3, #0
 800712e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2b01      	cmp	r3, #1
 8007134:	d13e      	bne.n	80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007136:	4b23      	ldr	r3, [pc, #140]	; (80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800713e:	60fb      	str	r3, [r7, #12]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d005      	beq.n	8007152 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2b01      	cmp	r3, #1
 800714a:	d12f      	bne.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800714c:	4b1e      	ldr	r3, [pc, #120]	; (80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800714e:	617b      	str	r3, [r7, #20]
          break;
 8007150:	e02f      	b.n	80071b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007152:	4b1c      	ldr	r3, [pc, #112]	; (80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800715a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800715e:	d108      	bne.n	8007172 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007160:	4b18      	ldr	r3, [pc, #96]	; (80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007168:	4a18      	ldr	r2, [pc, #96]	; (80071cc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800716a:	fbb2 f3f3 	udiv	r3, r2, r3
 800716e:	613b      	str	r3, [r7, #16]
 8007170:	e007      	b.n	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007172:	4b14      	ldr	r3, [pc, #80]	; (80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800717a:	4a15      	ldr	r2, [pc, #84]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800717c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007180:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007182:	4b10      	ldr	r3, [pc, #64]	; (80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007184:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007188:	099b      	lsrs	r3, r3, #6
 800718a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	fb02 f303 	mul.w	r3, r2, r3
 8007194:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007196:	4b0b      	ldr	r3, [pc, #44]	; (80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007198:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800719c:	0f1b      	lsrs	r3, r3, #28
 800719e:	f003 0307 	and.w	r3, r3, #7
 80071a2:	68ba      	ldr	r2, [r7, #8]
 80071a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80071a8:	617b      	str	r3, [r7, #20]
          break;
 80071aa:	e002      	b.n	80071b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80071ac:	2300      	movs	r3, #0
 80071ae:	617b      	str	r3, [r7, #20]
          break;
 80071b0:	bf00      	nop
        }
      }
      break;
 80071b2:	bf00      	nop
    }
  }
  return frequency;
 80071b4:	697b      	ldr	r3, [r7, #20]
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	371c      	adds	r7, #28
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr
 80071c2:	bf00      	nop
 80071c4:	40023800 	.word	0x40023800
 80071c8:	00bb8000 	.word	0x00bb8000
 80071cc:	007a1200 	.word	0x007a1200
 80071d0:	00f42400 	.word	0x00f42400

080071d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d101      	bne.n	80071e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	e07b      	b.n	80072de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d108      	bne.n	8007200 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071f6:	d009      	beq.n	800720c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	61da      	str	r2, [r3, #28]
 80071fe:	e005      	b.n	800720c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007218:	b2db      	uxtb	r3, r3
 800721a:	2b00      	cmp	r3, #0
 800721c:	d106      	bne.n	800722c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f7fa fc92 	bl	8001b50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2202      	movs	r2, #2
 8007230:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007242:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007254:	431a      	orrs	r2, r3
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	68db      	ldr	r3, [r3, #12]
 800725a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800725e:	431a      	orrs	r2, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	691b      	ldr	r3, [r3, #16]
 8007264:	f003 0302 	and.w	r3, r3, #2
 8007268:	431a      	orrs	r2, r3
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	695b      	ldr	r3, [r3, #20]
 800726e:	f003 0301 	and.w	r3, r3, #1
 8007272:	431a      	orrs	r2, r3
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	699b      	ldr	r3, [r3, #24]
 8007278:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800727c:	431a      	orrs	r2, r3
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	69db      	ldr	r3, [r3, #28]
 8007282:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007286:	431a      	orrs	r2, r3
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6a1b      	ldr	r3, [r3, #32]
 800728c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007290:	ea42 0103 	orr.w	r1, r2, r3
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007298:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	430a      	orrs	r2, r1
 80072a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	699b      	ldr	r3, [r3, #24]
 80072a8:	0c1b      	lsrs	r3, r3, #16
 80072aa:	f003 0104 	and.w	r1, r3, #4
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b2:	f003 0210 	and.w	r2, r3, #16
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	430a      	orrs	r2, r1
 80072bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	69da      	ldr	r2, [r3, #28]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80072cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2201      	movs	r2, #1
 80072d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3708      	adds	r7, #8
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}

080072e6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b082      	sub	sp, #8
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d101      	bne.n	80072f8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	e041      	b.n	800737c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	2b00      	cmp	r3, #0
 8007302:	d106      	bne.n	8007312 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 f839 	bl	8007384 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2202      	movs	r2, #2
 8007316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	3304      	adds	r3, #4
 8007322:	4619      	mov	r1, r3
 8007324:	4610      	mov	r0, r2
 8007326:	f000 f9d7 	bl	80076d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2201      	movs	r2, #1
 800732e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2201      	movs	r2, #1
 8007336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2201      	movs	r2, #1
 800733e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2201      	movs	r2, #1
 8007346:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2201      	movs	r2, #1
 800734e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2201      	movs	r2, #1
 8007356:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2201      	movs	r2, #1
 800735e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2201      	movs	r2, #1
 8007366:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2201      	movs	r2, #1
 800736e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2201      	movs	r2, #1
 8007376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800737a:	2300      	movs	r3, #0
}
 800737c:	4618      	mov	r0, r3
 800737e:	3708      	adds	r7, #8
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800738c:	bf00      	nop
 800738e:	370c      	adds	r7, #12
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007398:	b480      	push	{r7}
 800739a:	b085      	sub	sp, #20
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d001      	beq.n	80073b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	e04e      	b.n	800744e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2202      	movs	r2, #2
 80073b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	68da      	ldr	r2, [r3, #12]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f042 0201 	orr.w	r2, r2, #1
 80073c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a23      	ldr	r2, [pc, #140]	; (800745c <HAL_TIM_Base_Start_IT+0xc4>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d022      	beq.n	8007418 <HAL_TIM_Base_Start_IT+0x80>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073da:	d01d      	beq.n	8007418 <HAL_TIM_Base_Start_IT+0x80>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a1f      	ldr	r2, [pc, #124]	; (8007460 <HAL_TIM_Base_Start_IT+0xc8>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d018      	beq.n	8007418 <HAL_TIM_Base_Start_IT+0x80>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a1e      	ldr	r2, [pc, #120]	; (8007464 <HAL_TIM_Base_Start_IT+0xcc>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d013      	beq.n	8007418 <HAL_TIM_Base_Start_IT+0x80>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a1c      	ldr	r2, [pc, #112]	; (8007468 <HAL_TIM_Base_Start_IT+0xd0>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d00e      	beq.n	8007418 <HAL_TIM_Base_Start_IT+0x80>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a1b      	ldr	r2, [pc, #108]	; (800746c <HAL_TIM_Base_Start_IT+0xd4>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d009      	beq.n	8007418 <HAL_TIM_Base_Start_IT+0x80>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a19      	ldr	r2, [pc, #100]	; (8007470 <HAL_TIM_Base_Start_IT+0xd8>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d004      	beq.n	8007418 <HAL_TIM_Base_Start_IT+0x80>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a18      	ldr	r2, [pc, #96]	; (8007474 <HAL_TIM_Base_Start_IT+0xdc>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d111      	bne.n	800743c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	f003 0307 	and.w	r3, r3, #7
 8007422:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2b06      	cmp	r3, #6
 8007428:	d010      	beq.n	800744c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f042 0201 	orr.w	r2, r2, #1
 8007438:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800743a:	e007      	b.n	800744c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f042 0201 	orr.w	r2, r2, #1
 800744a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800744c:	2300      	movs	r3, #0
}
 800744e:	4618      	mov	r0, r3
 8007450:	3714      	adds	r7, #20
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr
 800745a:	bf00      	nop
 800745c:	40010000 	.word	0x40010000
 8007460:	40000400 	.word	0x40000400
 8007464:	40000800 	.word	0x40000800
 8007468:	40000c00 	.word	0x40000c00
 800746c:	40010400 	.word	0x40010400
 8007470:	40014000 	.word	0x40014000
 8007474:	40001800 	.word	0x40001800

08007478 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	691b      	ldr	r3, [r3, #16]
 8007486:	f003 0302 	and.w	r3, r3, #2
 800748a:	2b02      	cmp	r3, #2
 800748c:	d122      	bne.n	80074d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	68db      	ldr	r3, [r3, #12]
 8007494:	f003 0302 	and.w	r3, r3, #2
 8007498:	2b02      	cmp	r3, #2
 800749a:	d11b      	bne.n	80074d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f06f 0202 	mvn.w	r2, #2
 80074a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2201      	movs	r2, #1
 80074aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	699b      	ldr	r3, [r3, #24]
 80074b2:	f003 0303 	and.w	r3, r3, #3
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d003      	beq.n	80074c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 f8ee 	bl	800769c <HAL_TIM_IC_CaptureCallback>
 80074c0:	e005      	b.n	80074ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 f8e0 	bl	8007688 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 f8f1 	bl	80076b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	691b      	ldr	r3, [r3, #16]
 80074da:	f003 0304 	and.w	r3, r3, #4
 80074de:	2b04      	cmp	r3, #4
 80074e0:	d122      	bne.n	8007528 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	68db      	ldr	r3, [r3, #12]
 80074e8:	f003 0304 	and.w	r3, r3, #4
 80074ec:	2b04      	cmp	r3, #4
 80074ee:	d11b      	bne.n	8007528 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f06f 0204 	mvn.w	r2, #4
 80074f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2202      	movs	r2, #2
 80074fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	699b      	ldr	r3, [r3, #24]
 8007506:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800750a:	2b00      	cmp	r3, #0
 800750c:	d003      	beq.n	8007516 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 f8c4 	bl	800769c <HAL_TIM_IC_CaptureCallback>
 8007514:	e005      	b.n	8007522 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 f8b6 	bl	8007688 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 f8c7 	bl	80076b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	691b      	ldr	r3, [r3, #16]
 800752e:	f003 0308 	and.w	r3, r3, #8
 8007532:	2b08      	cmp	r3, #8
 8007534:	d122      	bne.n	800757c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	f003 0308 	and.w	r3, r3, #8
 8007540:	2b08      	cmp	r3, #8
 8007542:	d11b      	bne.n	800757c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f06f 0208 	mvn.w	r2, #8
 800754c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2204      	movs	r2, #4
 8007552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	69db      	ldr	r3, [r3, #28]
 800755a:	f003 0303 	and.w	r3, r3, #3
 800755e:	2b00      	cmp	r3, #0
 8007560:	d003      	beq.n	800756a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 f89a 	bl	800769c <HAL_TIM_IC_CaptureCallback>
 8007568:	e005      	b.n	8007576 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 f88c 	bl	8007688 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f000 f89d 	bl	80076b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	691b      	ldr	r3, [r3, #16]
 8007582:	f003 0310 	and.w	r3, r3, #16
 8007586:	2b10      	cmp	r3, #16
 8007588:	d122      	bne.n	80075d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	f003 0310 	and.w	r3, r3, #16
 8007594:	2b10      	cmp	r3, #16
 8007596:	d11b      	bne.n	80075d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f06f 0210 	mvn.w	r2, #16
 80075a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2208      	movs	r2, #8
 80075a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	69db      	ldr	r3, [r3, #28]
 80075ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d003      	beq.n	80075be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 f870 	bl	800769c <HAL_TIM_IC_CaptureCallback>
 80075bc:	e005      	b.n	80075ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 f862 	bl	8007688 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f000 f873 	bl	80076b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	f003 0301 	and.w	r3, r3, #1
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d10e      	bne.n	80075fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	68db      	ldr	r3, [r3, #12]
 80075e4:	f003 0301 	and.w	r3, r3, #1
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d107      	bne.n	80075fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f06f 0201 	mvn.w	r2, #1
 80075f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f7f9 fff0 	bl	80015dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	691b      	ldr	r3, [r3, #16]
 8007602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007606:	2b80      	cmp	r3, #128	; 0x80
 8007608:	d10e      	bne.n	8007628 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007614:	2b80      	cmp	r3, #128	; 0x80
 8007616:	d107      	bne.n	8007628 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007620:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 f902 	bl	800782c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	691b      	ldr	r3, [r3, #16]
 800762e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007632:	2b40      	cmp	r3, #64	; 0x40
 8007634:	d10e      	bne.n	8007654 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007640:	2b40      	cmp	r3, #64	; 0x40
 8007642:	d107      	bne.n	8007654 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800764c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 f838 	bl	80076c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	691b      	ldr	r3, [r3, #16]
 800765a:	f003 0320 	and.w	r3, r3, #32
 800765e:	2b20      	cmp	r3, #32
 8007660:	d10e      	bne.n	8007680 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	f003 0320 	and.w	r3, r3, #32
 800766c:	2b20      	cmp	r3, #32
 800766e:	d107      	bne.n	8007680 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f06f 0220 	mvn.w	r2, #32
 8007678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 f8cc 	bl	8007818 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007680:	bf00      	nop
 8007682:	3708      	adds	r7, #8
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007690:	bf00      	nop
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80076a4:	bf00      	nop
 80076a6:	370c      	adds	r7, #12
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80076b8:	bf00      	nop
 80076ba:	370c      	adds	r7, #12
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80076cc:	bf00      	nop
 80076ce:	370c      	adds	r7, #12
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr

080076d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80076d8:	b480      	push	{r7}
 80076da:	b085      	sub	sp, #20
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4a40      	ldr	r2, [pc, #256]	; (80077ec <TIM_Base_SetConfig+0x114>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d013      	beq.n	8007718 <TIM_Base_SetConfig+0x40>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076f6:	d00f      	beq.n	8007718 <TIM_Base_SetConfig+0x40>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4a3d      	ldr	r2, [pc, #244]	; (80077f0 <TIM_Base_SetConfig+0x118>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d00b      	beq.n	8007718 <TIM_Base_SetConfig+0x40>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4a3c      	ldr	r2, [pc, #240]	; (80077f4 <TIM_Base_SetConfig+0x11c>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d007      	beq.n	8007718 <TIM_Base_SetConfig+0x40>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	4a3b      	ldr	r2, [pc, #236]	; (80077f8 <TIM_Base_SetConfig+0x120>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d003      	beq.n	8007718 <TIM_Base_SetConfig+0x40>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	4a3a      	ldr	r2, [pc, #232]	; (80077fc <TIM_Base_SetConfig+0x124>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d108      	bne.n	800772a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800771e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	68fa      	ldr	r2, [r7, #12]
 8007726:	4313      	orrs	r3, r2
 8007728:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4a2f      	ldr	r2, [pc, #188]	; (80077ec <TIM_Base_SetConfig+0x114>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d02b      	beq.n	800778a <TIM_Base_SetConfig+0xb2>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007738:	d027      	beq.n	800778a <TIM_Base_SetConfig+0xb2>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	4a2c      	ldr	r2, [pc, #176]	; (80077f0 <TIM_Base_SetConfig+0x118>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d023      	beq.n	800778a <TIM_Base_SetConfig+0xb2>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4a2b      	ldr	r2, [pc, #172]	; (80077f4 <TIM_Base_SetConfig+0x11c>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d01f      	beq.n	800778a <TIM_Base_SetConfig+0xb2>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4a2a      	ldr	r2, [pc, #168]	; (80077f8 <TIM_Base_SetConfig+0x120>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d01b      	beq.n	800778a <TIM_Base_SetConfig+0xb2>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4a29      	ldr	r2, [pc, #164]	; (80077fc <TIM_Base_SetConfig+0x124>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d017      	beq.n	800778a <TIM_Base_SetConfig+0xb2>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4a28      	ldr	r2, [pc, #160]	; (8007800 <TIM_Base_SetConfig+0x128>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d013      	beq.n	800778a <TIM_Base_SetConfig+0xb2>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a27      	ldr	r2, [pc, #156]	; (8007804 <TIM_Base_SetConfig+0x12c>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d00f      	beq.n	800778a <TIM_Base_SetConfig+0xb2>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4a26      	ldr	r2, [pc, #152]	; (8007808 <TIM_Base_SetConfig+0x130>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d00b      	beq.n	800778a <TIM_Base_SetConfig+0xb2>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	4a25      	ldr	r2, [pc, #148]	; (800780c <TIM_Base_SetConfig+0x134>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d007      	beq.n	800778a <TIM_Base_SetConfig+0xb2>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	4a24      	ldr	r2, [pc, #144]	; (8007810 <TIM_Base_SetConfig+0x138>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d003      	beq.n	800778a <TIM_Base_SetConfig+0xb2>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	4a23      	ldr	r2, [pc, #140]	; (8007814 <TIM_Base_SetConfig+0x13c>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d108      	bne.n	800779c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007790:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	68fa      	ldr	r2, [r7, #12]
 8007798:	4313      	orrs	r3, r2
 800779a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	695b      	ldr	r3, [r3, #20]
 80077a6:	4313      	orrs	r3, r2
 80077a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	68fa      	ldr	r2, [r7, #12]
 80077ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	689a      	ldr	r2, [r3, #8]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	4a0a      	ldr	r2, [pc, #40]	; (80077ec <TIM_Base_SetConfig+0x114>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d003      	beq.n	80077d0 <TIM_Base_SetConfig+0xf8>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	4a0c      	ldr	r2, [pc, #48]	; (80077fc <TIM_Base_SetConfig+0x124>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d103      	bne.n	80077d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	691a      	ldr	r2, [r3, #16]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2201      	movs	r2, #1
 80077dc:	615a      	str	r2, [r3, #20]
}
 80077de:	bf00      	nop
 80077e0:	3714      	adds	r7, #20
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr
 80077ea:	bf00      	nop
 80077ec:	40010000 	.word	0x40010000
 80077f0:	40000400 	.word	0x40000400
 80077f4:	40000800 	.word	0x40000800
 80077f8:	40000c00 	.word	0x40000c00
 80077fc:	40010400 	.word	0x40010400
 8007800:	40014000 	.word	0x40014000
 8007804:	40014400 	.word	0x40014400
 8007808:	40014800 	.word	0x40014800
 800780c:	40001800 	.word	0x40001800
 8007810:	40001c00 	.word	0x40001c00
 8007814:	40002000 	.word	0x40002000

08007818 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007818:	b480      	push	{r7}
 800781a:	b083      	sub	sp, #12
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007820:	bf00      	nop
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007834:	bf00      	nop
 8007836:	370c      	adds	r7, #12
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr

08007840 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b082      	sub	sp, #8
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d101      	bne.n	8007852 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800784e:	2301      	movs	r3, #1
 8007850:	e03f      	b.n	80078d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007858:	b2db      	uxtb	r3, r3
 800785a:	2b00      	cmp	r3, #0
 800785c:	d106      	bne.n	800786c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f7fa f9ba 	bl	8001be0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2224      	movs	r2, #36	; 0x24
 8007870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	68da      	ldr	r2, [r3, #12]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007882:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 f929 	bl	8007adc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	691a      	ldr	r2, [r3, #16]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007898:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	695a      	ldr	r2, [r3, #20]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80078a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	68da      	ldr	r2, [r3, #12]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80078b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2220      	movs	r2, #32
 80078c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2220      	movs	r2, #32
 80078cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80078d0:	2300      	movs	r3, #0
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3708      	adds	r7, #8
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}

080078da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078da:	b580      	push	{r7, lr}
 80078dc:	b08a      	sub	sp, #40	; 0x28
 80078de:	af02      	add	r7, sp, #8
 80078e0:	60f8      	str	r0, [r7, #12]
 80078e2:	60b9      	str	r1, [r7, #8]
 80078e4:	603b      	str	r3, [r7, #0]
 80078e6:	4613      	mov	r3, r2
 80078e8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80078ea:	2300      	movs	r3, #0
 80078ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	2b20      	cmp	r3, #32
 80078f8:	d17c      	bne.n	80079f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d002      	beq.n	8007906 <HAL_UART_Transmit+0x2c>
 8007900:	88fb      	ldrh	r3, [r7, #6]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d101      	bne.n	800790a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	e075      	b.n	80079f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007910:	2b01      	cmp	r3, #1
 8007912:	d101      	bne.n	8007918 <HAL_UART_Transmit+0x3e>
 8007914:	2302      	movs	r3, #2
 8007916:	e06e      	b.n	80079f6 <HAL_UART_Transmit+0x11c>
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2201      	movs	r2, #1
 800791c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2200      	movs	r2, #0
 8007924:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2221      	movs	r2, #33	; 0x21
 800792a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800792e:	f7fa fb13 	bl	8001f58 <HAL_GetTick>
 8007932:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	88fa      	ldrh	r2, [r7, #6]
 8007938:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	88fa      	ldrh	r2, [r7, #6]
 800793e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007948:	d108      	bne.n	800795c <HAL_UART_Transmit+0x82>
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	691b      	ldr	r3, [r3, #16]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d104      	bne.n	800795c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007952:	2300      	movs	r3, #0
 8007954:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	61bb      	str	r3, [r7, #24]
 800795a:	e003      	b.n	8007964 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007960:	2300      	movs	r3, #0
 8007962:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2200      	movs	r2, #0
 8007968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800796c:	e02a      	b.n	80079c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	9300      	str	r3, [sp, #0]
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	2200      	movs	r2, #0
 8007976:	2180      	movs	r1, #128	; 0x80
 8007978:	68f8      	ldr	r0, [r7, #12]
 800797a:	f000 f840 	bl	80079fe <UART_WaitOnFlagUntilTimeout>
 800797e:	4603      	mov	r3, r0
 8007980:	2b00      	cmp	r3, #0
 8007982:	d001      	beq.n	8007988 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007984:	2303      	movs	r3, #3
 8007986:	e036      	b.n	80079f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007988:	69fb      	ldr	r3, [r7, #28]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d10b      	bne.n	80079a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	881b      	ldrh	r3, [r3, #0]
 8007992:	461a      	mov	r2, r3
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800799c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800799e:	69bb      	ldr	r3, [r7, #24]
 80079a0:	3302      	adds	r3, #2
 80079a2:	61bb      	str	r3, [r7, #24]
 80079a4:	e007      	b.n	80079b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80079a6:	69fb      	ldr	r3, [r7, #28]
 80079a8:	781a      	ldrb	r2, [r3, #0]
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80079b0:	69fb      	ldr	r3, [r7, #28]
 80079b2:	3301      	adds	r3, #1
 80079b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	3b01      	subs	r3, #1
 80079be:	b29a      	uxth	r2, r3
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d1cf      	bne.n	800796e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	9300      	str	r3, [sp, #0]
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	2200      	movs	r2, #0
 80079d6:	2140      	movs	r1, #64	; 0x40
 80079d8:	68f8      	ldr	r0, [r7, #12]
 80079da:	f000 f810 	bl	80079fe <UART_WaitOnFlagUntilTimeout>
 80079de:	4603      	mov	r3, r0
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d001      	beq.n	80079e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80079e4:	2303      	movs	r3, #3
 80079e6:	e006      	b.n	80079f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2220      	movs	r2, #32
 80079ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80079f0:	2300      	movs	r3, #0
 80079f2:	e000      	b.n	80079f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80079f4:	2302      	movs	r3, #2
  }
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3720      	adds	r7, #32
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}

080079fe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b090      	sub	sp, #64	; 0x40
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	60f8      	str	r0, [r7, #12]
 8007a06:	60b9      	str	r1, [r7, #8]
 8007a08:	603b      	str	r3, [r7, #0]
 8007a0a:	4613      	mov	r3, r2
 8007a0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a0e:	e050      	b.n	8007ab2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a16:	d04c      	beq.n	8007ab2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007a18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d007      	beq.n	8007a2e <UART_WaitOnFlagUntilTimeout+0x30>
 8007a1e:	f7fa fa9b 	bl	8001f58 <HAL_GetTick>
 8007a22:	4602      	mov	r2, r0
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	1ad3      	subs	r3, r2, r3
 8007a28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d241      	bcs.n	8007ab2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	330c      	adds	r3, #12
 8007a34:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a38:	e853 3f00 	ldrex	r3, [r3]
 8007a3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007a44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	330c      	adds	r3, #12
 8007a4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007a4e:	637a      	str	r2, [r7, #52]	; 0x34
 8007a50:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a56:	e841 2300 	strex	r3, r2, [r1]
 8007a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d1e5      	bne.n	8007a2e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	3314      	adds	r3, #20
 8007a68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	e853 3f00 	ldrex	r3, [r3]
 8007a70:	613b      	str	r3, [r7, #16]
   return(result);
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	f023 0301 	bic.w	r3, r3, #1
 8007a78:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	3314      	adds	r3, #20
 8007a80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a82:	623a      	str	r2, [r7, #32]
 8007a84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a86:	69f9      	ldr	r1, [r7, #28]
 8007a88:	6a3a      	ldr	r2, [r7, #32]
 8007a8a:	e841 2300 	strex	r3, r2, [r1]
 8007a8e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a90:	69bb      	ldr	r3, [r7, #24]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d1e5      	bne.n	8007a62 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2220      	movs	r2, #32
 8007a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2220      	movs	r2, #32
 8007aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007aae:	2303      	movs	r3, #3
 8007ab0:	e00f      	b.n	8007ad2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	4013      	ands	r3, r2
 8007abc:	68ba      	ldr	r2, [r7, #8]
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	bf0c      	ite	eq
 8007ac2:	2301      	moveq	r3, #1
 8007ac4:	2300      	movne	r3, #0
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	461a      	mov	r2, r3
 8007aca:	79fb      	ldrb	r3, [r7, #7]
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d09f      	beq.n	8007a10 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007ad0:	2300      	movs	r3, #0
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3740      	adds	r7, #64	; 0x40
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}
	...

08007adc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ae0:	b09f      	sub	sp, #124	; 0x7c
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	691b      	ldr	r3, [r3, #16]
 8007aec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007af0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007af2:	68d9      	ldr	r1, [r3, #12]
 8007af4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	ea40 0301 	orr.w	r3, r0, r1
 8007afc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b00:	689a      	ldr	r2, [r3, #8]
 8007b02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	431a      	orrs	r2, r3
 8007b08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b0a:	695b      	ldr	r3, [r3, #20]
 8007b0c:	431a      	orrs	r2, r3
 8007b0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b10:	69db      	ldr	r3, [r3, #28]
 8007b12:	4313      	orrs	r3, r2
 8007b14:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007b16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	68db      	ldr	r3, [r3, #12]
 8007b1c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007b20:	f021 010c 	bic.w	r1, r1, #12
 8007b24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b26:	681a      	ldr	r2, [r3, #0]
 8007b28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b2a:	430b      	orrs	r3, r1
 8007b2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007b2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	695b      	ldr	r3, [r3, #20]
 8007b34:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007b38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b3a:	6999      	ldr	r1, [r3, #24]
 8007b3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	ea40 0301 	orr.w	r3, r0, r1
 8007b44:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007b46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b48:	681a      	ldr	r2, [r3, #0]
 8007b4a:	4bc5      	ldr	r3, [pc, #788]	; (8007e60 <UART_SetConfig+0x384>)
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d004      	beq.n	8007b5a <UART_SetConfig+0x7e>
 8007b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	4bc3      	ldr	r3, [pc, #780]	; (8007e64 <UART_SetConfig+0x388>)
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d103      	bne.n	8007b62 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007b5a:	f7ff f9b5 	bl	8006ec8 <HAL_RCC_GetPCLK2Freq>
 8007b5e:	6778      	str	r0, [r7, #116]	; 0x74
 8007b60:	e002      	b.n	8007b68 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007b62:	f7ff f99d 	bl	8006ea0 <HAL_RCC_GetPCLK1Freq>
 8007b66:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b6a:	69db      	ldr	r3, [r3, #28]
 8007b6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b70:	f040 80b6 	bne.w	8007ce0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007b74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b76:	461c      	mov	r4, r3
 8007b78:	f04f 0500 	mov.w	r5, #0
 8007b7c:	4622      	mov	r2, r4
 8007b7e:	462b      	mov	r3, r5
 8007b80:	1891      	adds	r1, r2, r2
 8007b82:	6439      	str	r1, [r7, #64]	; 0x40
 8007b84:	415b      	adcs	r3, r3
 8007b86:	647b      	str	r3, [r7, #68]	; 0x44
 8007b88:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007b8c:	1912      	adds	r2, r2, r4
 8007b8e:	eb45 0303 	adc.w	r3, r5, r3
 8007b92:	f04f 0000 	mov.w	r0, #0
 8007b96:	f04f 0100 	mov.w	r1, #0
 8007b9a:	00d9      	lsls	r1, r3, #3
 8007b9c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007ba0:	00d0      	lsls	r0, r2, #3
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	460b      	mov	r3, r1
 8007ba6:	1911      	adds	r1, r2, r4
 8007ba8:	6639      	str	r1, [r7, #96]	; 0x60
 8007baa:	416b      	adcs	r3, r5
 8007bac:	667b      	str	r3, [r7, #100]	; 0x64
 8007bae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	f04f 0300 	mov.w	r3, #0
 8007bb8:	1891      	adds	r1, r2, r2
 8007bba:	63b9      	str	r1, [r7, #56]	; 0x38
 8007bbc:	415b      	adcs	r3, r3
 8007bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bc0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007bc4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007bc8:	f7f8 fe60 	bl	800088c <__aeabi_uldivmod>
 8007bcc:	4602      	mov	r2, r0
 8007bce:	460b      	mov	r3, r1
 8007bd0:	4ba5      	ldr	r3, [pc, #660]	; (8007e68 <UART_SetConfig+0x38c>)
 8007bd2:	fba3 2302 	umull	r2, r3, r3, r2
 8007bd6:	095b      	lsrs	r3, r3, #5
 8007bd8:	011e      	lsls	r6, r3, #4
 8007bda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bdc:	461c      	mov	r4, r3
 8007bde:	f04f 0500 	mov.w	r5, #0
 8007be2:	4622      	mov	r2, r4
 8007be4:	462b      	mov	r3, r5
 8007be6:	1891      	adds	r1, r2, r2
 8007be8:	6339      	str	r1, [r7, #48]	; 0x30
 8007bea:	415b      	adcs	r3, r3
 8007bec:	637b      	str	r3, [r7, #52]	; 0x34
 8007bee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007bf2:	1912      	adds	r2, r2, r4
 8007bf4:	eb45 0303 	adc.w	r3, r5, r3
 8007bf8:	f04f 0000 	mov.w	r0, #0
 8007bfc:	f04f 0100 	mov.w	r1, #0
 8007c00:	00d9      	lsls	r1, r3, #3
 8007c02:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007c06:	00d0      	lsls	r0, r2, #3
 8007c08:	4602      	mov	r2, r0
 8007c0a:	460b      	mov	r3, r1
 8007c0c:	1911      	adds	r1, r2, r4
 8007c0e:	65b9      	str	r1, [r7, #88]	; 0x58
 8007c10:	416b      	adcs	r3, r5
 8007c12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	461a      	mov	r2, r3
 8007c1a:	f04f 0300 	mov.w	r3, #0
 8007c1e:	1891      	adds	r1, r2, r2
 8007c20:	62b9      	str	r1, [r7, #40]	; 0x28
 8007c22:	415b      	adcs	r3, r3
 8007c24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007c2a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007c2e:	f7f8 fe2d 	bl	800088c <__aeabi_uldivmod>
 8007c32:	4602      	mov	r2, r0
 8007c34:	460b      	mov	r3, r1
 8007c36:	4b8c      	ldr	r3, [pc, #560]	; (8007e68 <UART_SetConfig+0x38c>)
 8007c38:	fba3 1302 	umull	r1, r3, r3, r2
 8007c3c:	095b      	lsrs	r3, r3, #5
 8007c3e:	2164      	movs	r1, #100	; 0x64
 8007c40:	fb01 f303 	mul.w	r3, r1, r3
 8007c44:	1ad3      	subs	r3, r2, r3
 8007c46:	00db      	lsls	r3, r3, #3
 8007c48:	3332      	adds	r3, #50	; 0x32
 8007c4a:	4a87      	ldr	r2, [pc, #540]	; (8007e68 <UART_SetConfig+0x38c>)
 8007c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8007c50:	095b      	lsrs	r3, r3, #5
 8007c52:	005b      	lsls	r3, r3, #1
 8007c54:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007c58:	441e      	add	r6, r3
 8007c5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f04f 0100 	mov.w	r1, #0
 8007c62:	4602      	mov	r2, r0
 8007c64:	460b      	mov	r3, r1
 8007c66:	1894      	adds	r4, r2, r2
 8007c68:	623c      	str	r4, [r7, #32]
 8007c6a:	415b      	adcs	r3, r3
 8007c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8007c6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007c72:	1812      	adds	r2, r2, r0
 8007c74:	eb41 0303 	adc.w	r3, r1, r3
 8007c78:	f04f 0400 	mov.w	r4, #0
 8007c7c:	f04f 0500 	mov.w	r5, #0
 8007c80:	00dd      	lsls	r5, r3, #3
 8007c82:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007c86:	00d4      	lsls	r4, r2, #3
 8007c88:	4622      	mov	r2, r4
 8007c8a:	462b      	mov	r3, r5
 8007c8c:	1814      	adds	r4, r2, r0
 8007c8e:	653c      	str	r4, [r7, #80]	; 0x50
 8007c90:	414b      	adcs	r3, r1
 8007c92:	657b      	str	r3, [r7, #84]	; 0x54
 8007c94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	461a      	mov	r2, r3
 8007c9a:	f04f 0300 	mov.w	r3, #0
 8007c9e:	1891      	adds	r1, r2, r2
 8007ca0:	61b9      	str	r1, [r7, #24]
 8007ca2:	415b      	adcs	r3, r3
 8007ca4:	61fb      	str	r3, [r7, #28]
 8007ca6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007caa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007cae:	f7f8 fded 	bl	800088c <__aeabi_uldivmod>
 8007cb2:	4602      	mov	r2, r0
 8007cb4:	460b      	mov	r3, r1
 8007cb6:	4b6c      	ldr	r3, [pc, #432]	; (8007e68 <UART_SetConfig+0x38c>)
 8007cb8:	fba3 1302 	umull	r1, r3, r3, r2
 8007cbc:	095b      	lsrs	r3, r3, #5
 8007cbe:	2164      	movs	r1, #100	; 0x64
 8007cc0:	fb01 f303 	mul.w	r3, r1, r3
 8007cc4:	1ad3      	subs	r3, r2, r3
 8007cc6:	00db      	lsls	r3, r3, #3
 8007cc8:	3332      	adds	r3, #50	; 0x32
 8007cca:	4a67      	ldr	r2, [pc, #412]	; (8007e68 <UART_SetConfig+0x38c>)
 8007ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8007cd0:	095b      	lsrs	r3, r3, #5
 8007cd2:	f003 0207 	and.w	r2, r3, #7
 8007cd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4432      	add	r2, r6
 8007cdc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007cde:	e0b9      	b.n	8007e54 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ce0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ce2:	461c      	mov	r4, r3
 8007ce4:	f04f 0500 	mov.w	r5, #0
 8007ce8:	4622      	mov	r2, r4
 8007cea:	462b      	mov	r3, r5
 8007cec:	1891      	adds	r1, r2, r2
 8007cee:	6139      	str	r1, [r7, #16]
 8007cf0:	415b      	adcs	r3, r3
 8007cf2:	617b      	str	r3, [r7, #20]
 8007cf4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007cf8:	1912      	adds	r2, r2, r4
 8007cfa:	eb45 0303 	adc.w	r3, r5, r3
 8007cfe:	f04f 0000 	mov.w	r0, #0
 8007d02:	f04f 0100 	mov.w	r1, #0
 8007d06:	00d9      	lsls	r1, r3, #3
 8007d08:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007d0c:	00d0      	lsls	r0, r2, #3
 8007d0e:	4602      	mov	r2, r0
 8007d10:	460b      	mov	r3, r1
 8007d12:	eb12 0804 	adds.w	r8, r2, r4
 8007d16:	eb43 0905 	adc.w	r9, r3, r5
 8007d1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f04f 0100 	mov.w	r1, #0
 8007d24:	f04f 0200 	mov.w	r2, #0
 8007d28:	f04f 0300 	mov.w	r3, #0
 8007d2c:	008b      	lsls	r3, r1, #2
 8007d2e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007d32:	0082      	lsls	r2, r0, #2
 8007d34:	4640      	mov	r0, r8
 8007d36:	4649      	mov	r1, r9
 8007d38:	f7f8 fda8 	bl	800088c <__aeabi_uldivmod>
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	460b      	mov	r3, r1
 8007d40:	4b49      	ldr	r3, [pc, #292]	; (8007e68 <UART_SetConfig+0x38c>)
 8007d42:	fba3 2302 	umull	r2, r3, r3, r2
 8007d46:	095b      	lsrs	r3, r3, #5
 8007d48:	011e      	lsls	r6, r3, #4
 8007d4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f04f 0100 	mov.w	r1, #0
 8007d52:	4602      	mov	r2, r0
 8007d54:	460b      	mov	r3, r1
 8007d56:	1894      	adds	r4, r2, r2
 8007d58:	60bc      	str	r4, [r7, #8]
 8007d5a:	415b      	adcs	r3, r3
 8007d5c:	60fb      	str	r3, [r7, #12]
 8007d5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d62:	1812      	adds	r2, r2, r0
 8007d64:	eb41 0303 	adc.w	r3, r1, r3
 8007d68:	f04f 0400 	mov.w	r4, #0
 8007d6c:	f04f 0500 	mov.w	r5, #0
 8007d70:	00dd      	lsls	r5, r3, #3
 8007d72:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007d76:	00d4      	lsls	r4, r2, #3
 8007d78:	4622      	mov	r2, r4
 8007d7a:	462b      	mov	r3, r5
 8007d7c:	1814      	adds	r4, r2, r0
 8007d7e:	64bc      	str	r4, [r7, #72]	; 0x48
 8007d80:	414b      	adcs	r3, r1
 8007d82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f04f 0100 	mov.w	r1, #0
 8007d8e:	f04f 0200 	mov.w	r2, #0
 8007d92:	f04f 0300 	mov.w	r3, #0
 8007d96:	008b      	lsls	r3, r1, #2
 8007d98:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007d9c:	0082      	lsls	r2, r0, #2
 8007d9e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007da2:	f7f8 fd73 	bl	800088c <__aeabi_uldivmod>
 8007da6:	4602      	mov	r2, r0
 8007da8:	460b      	mov	r3, r1
 8007daa:	4b2f      	ldr	r3, [pc, #188]	; (8007e68 <UART_SetConfig+0x38c>)
 8007dac:	fba3 1302 	umull	r1, r3, r3, r2
 8007db0:	095b      	lsrs	r3, r3, #5
 8007db2:	2164      	movs	r1, #100	; 0x64
 8007db4:	fb01 f303 	mul.w	r3, r1, r3
 8007db8:	1ad3      	subs	r3, r2, r3
 8007dba:	011b      	lsls	r3, r3, #4
 8007dbc:	3332      	adds	r3, #50	; 0x32
 8007dbe:	4a2a      	ldr	r2, [pc, #168]	; (8007e68 <UART_SetConfig+0x38c>)
 8007dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8007dc4:	095b      	lsrs	r3, r3, #5
 8007dc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007dca:	441e      	add	r6, r3
 8007dcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f04f 0100 	mov.w	r1, #0
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	1894      	adds	r4, r2, r2
 8007dda:	603c      	str	r4, [r7, #0]
 8007ddc:	415b      	adcs	r3, r3
 8007dde:	607b      	str	r3, [r7, #4]
 8007de0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007de4:	1812      	adds	r2, r2, r0
 8007de6:	eb41 0303 	adc.w	r3, r1, r3
 8007dea:	f04f 0400 	mov.w	r4, #0
 8007dee:	f04f 0500 	mov.w	r5, #0
 8007df2:	00dd      	lsls	r5, r3, #3
 8007df4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007df8:	00d4      	lsls	r4, r2, #3
 8007dfa:	4622      	mov	r2, r4
 8007dfc:	462b      	mov	r3, r5
 8007dfe:	eb12 0a00 	adds.w	sl, r2, r0
 8007e02:	eb43 0b01 	adc.w	fp, r3, r1
 8007e06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f04f 0100 	mov.w	r1, #0
 8007e10:	f04f 0200 	mov.w	r2, #0
 8007e14:	f04f 0300 	mov.w	r3, #0
 8007e18:	008b      	lsls	r3, r1, #2
 8007e1a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007e1e:	0082      	lsls	r2, r0, #2
 8007e20:	4650      	mov	r0, sl
 8007e22:	4659      	mov	r1, fp
 8007e24:	f7f8 fd32 	bl	800088c <__aeabi_uldivmod>
 8007e28:	4602      	mov	r2, r0
 8007e2a:	460b      	mov	r3, r1
 8007e2c:	4b0e      	ldr	r3, [pc, #56]	; (8007e68 <UART_SetConfig+0x38c>)
 8007e2e:	fba3 1302 	umull	r1, r3, r3, r2
 8007e32:	095b      	lsrs	r3, r3, #5
 8007e34:	2164      	movs	r1, #100	; 0x64
 8007e36:	fb01 f303 	mul.w	r3, r1, r3
 8007e3a:	1ad3      	subs	r3, r2, r3
 8007e3c:	011b      	lsls	r3, r3, #4
 8007e3e:	3332      	adds	r3, #50	; 0x32
 8007e40:	4a09      	ldr	r2, [pc, #36]	; (8007e68 <UART_SetConfig+0x38c>)
 8007e42:	fba2 2303 	umull	r2, r3, r2, r3
 8007e46:	095b      	lsrs	r3, r3, #5
 8007e48:	f003 020f 	and.w	r2, r3, #15
 8007e4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4432      	add	r2, r6
 8007e52:	609a      	str	r2, [r3, #8]
}
 8007e54:	bf00      	nop
 8007e56:	377c      	adds	r7, #124	; 0x7c
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e5e:	bf00      	nop
 8007e60:	40011000 	.word	0x40011000
 8007e64:	40011400 	.word	0x40011400
 8007e68:	51eb851f 	.word	0x51eb851f

08007e6c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e6c:	b084      	sub	sp, #16
 8007e6e:	b580      	push	{r7, lr}
 8007e70:	b084      	sub	sp, #16
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
 8007e76:	f107 001c 	add.w	r0, r7, #28
 8007e7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d122      	bne.n	8007eca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e88:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007e98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	68db      	ldr	r3, [r3, #12]
 8007ea4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007eac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007eae:	2b01      	cmp	r3, #1
 8007eb0:	d105      	bne.n	8007ebe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	68db      	ldr	r3, [r3, #12]
 8007eb6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 f9a0 	bl	8008204 <USB_CoreReset>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	73fb      	strb	r3, [r7, #15]
 8007ec8:	e01a      	b.n	8007f00 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	68db      	ldr	r3, [r3, #12]
 8007ece:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 f994 	bl	8008204 <USB_CoreReset>
 8007edc:	4603      	mov	r3, r0
 8007ede:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007ee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d106      	bne.n	8007ef4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	639a      	str	r2, [r3, #56]	; 0x38
 8007ef2:	e005      	b.n	8007f00 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ef8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f02:	2b01      	cmp	r3, #1
 8007f04:	d10b      	bne.n	8007f1e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	689b      	ldr	r3, [r3, #8]
 8007f0a:	f043 0206 	orr.w	r2, r3, #6
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	f043 0220 	orr.w	r2, r3, #32
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3710      	adds	r7, #16
 8007f24:	46bd      	mov	sp, r7
 8007f26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007f2a:	b004      	add	sp, #16
 8007f2c:	4770      	bx	lr

08007f2e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f2e:	b480      	push	{r7}
 8007f30:	b083      	sub	sp, #12
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	689b      	ldr	r3, [r3, #8]
 8007f3a:	f043 0201 	orr.w	r2, r3, #1
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007f42:	2300      	movs	r3, #0
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	370c      	adds	r7, #12
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b083      	sub	sp, #12
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	f023 0201 	bic.w	r2, r3, #1
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007f64:	2300      	movs	r3, #0
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	370c      	adds	r7, #12
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr

08007f72 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007f72:	b580      	push	{r7, lr}
 8007f74:	b084      	sub	sp, #16
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
 8007f7a:	460b      	mov	r3, r1
 8007f7c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007f8e:	78fb      	ldrb	r3, [r7, #3]
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	d115      	bne.n	8007fc0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	68db      	ldr	r3, [r3, #12]
 8007f98:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007fa0:	2001      	movs	r0, #1
 8007fa2:	f7f9 ffe5 	bl	8001f70 <HAL_Delay>
      ms++;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	3301      	adds	r3, #1
 8007faa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 f91a 	bl	80081e6 <USB_GetMode>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d01e      	beq.n	8007ff6 <USB_SetCurrentMode+0x84>
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2b31      	cmp	r3, #49	; 0x31
 8007fbc:	d9f0      	bls.n	8007fa0 <USB_SetCurrentMode+0x2e>
 8007fbe:	e01a      	b.n	8007ff6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007fc0:	78fb      	ldrb	r3, [r7, #3]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d115      	bne.n	8007ff2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	68db      	ldr	r3, [r3, #12]
 8007fca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007fd2:	2001      	movs	r0, #1
 8007fd4:	f7f9 ffcc 	bl	8001f70 <HAL_Delay>
      ms++;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	3301      	adds	r3, #1
 8007fdc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 f901 	bl	80081e6 <USB_GetMode>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d005      	beq.n	8007ff6 <USB_SetCurrentMode+0x84>
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2b31      	cmp	r3, #49	; 0x31
 8007fee:	d9f0      	bls.n	8007fd2 <USB_SetCurrentMode+0x60>
 8007ff0:	e001      	b.n	8007ff6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e005      	b.n	8008002 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2b32      	cmp	r3, #50	; 0x32
 8007ffa:	d101      	bne.n	8008000 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	e000      	b.n	8008002 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008000:	2300      	movs	r3, #0
}
 8008002:	4618      	mov	r0, r3
 8008004:	3710      	adds	r7, #16
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
	...

0800800c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800800c:	b480      	push	{r7}
 800800e:	b085      	sub	sp, #20
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008016:	2300      	movs	r3, #0
 8008018:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	019b      	lsls	r3, r3, #6
 800801e:	f043 0220 	orr.w	r2, r3, #32
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	3301      	adds	r3, #1
 800802a:	60fb      	str	r3, [r7, #12]
 800802c:	4a08      	ldr	r2, [pc, #32]	; (8008050 <USB_FlushTxFifo+0x44>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d901      	bls.n	8008036 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8008032:	2303      	movs	r3, #3
 8008034:	e006      	b.n	8008044 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	691b      	ldr	r3, [r3, #16]
 800803a:	f003 0320 	and.w	r3, r3, #32
 800803e:	2b20      	cmp	r3, #32
 8008040:	d0f1      	beq.n	8008026 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008042:	2300      	movs	r3, #0
}
 8008044:	4618      	mov	r0, r3
 8008046:	3714      	adds	r7, #20
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr
 8008050:	00030d40 	.word	0x00030d40

08008054 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008054:	b480      	push	{r7}
 8008056:	b085      	sub	sp, #20
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800805c:	2300      	movs	r3, #0
 800805e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2210      	movs	r2, #16
 8008064:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	3301      	adds	r3, #1
 800806a:	60fb      	str	r3, [r7, #12]
 800806c:	4a08      	ldr	r2, [pc, #32]	; (8008090 <USB_FlushRxFifo+0x3c>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d901      	bls.n	8008076 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8008072:	2303      	movs	r3, #3
 8008074:	e006      	b.n	8008084 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	691b      	ldr	r3, [r3, #16]
 800807a:	f003 0310 	and.w	r3, r3, #16
 800807e:	2b10      	cmp	r3, #16
 8008080:	d0f1      	beq.n	8008066 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008082:	2300      	movs	r3, #0
}
 8008084:	4618      	mov	r0, r3
 8008086:	3714      	adds	r7, #20
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr
 8008090:	00030d40 	.word	0x00030d40

08008094 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008094:	b480      	push	{r7}
 8008096:	b089      	sub	sp, #36	; 0x24
 8008098:	af00      	add	r7, sp, #0
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	60b9      	str	r1, [r7, #8]
 800809e:	4611      	mov	r1, r2
 80080a0:	461a      	mov	r2, r3
 80080a2:	460b      	mov	r3, r1
 80080a4:	71fb      	strb	r3, [r7, #7]
 80080a6:	4613      	mov	r3, r2
 80080a8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80080b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d123      	bne.n	8008102 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80080ba:	88bb      	ldrh	r3, [r7, #4]
 80080bc:	3303      	adds	r3, #3
 80080be:	089b      	lsrs	r3, r3, #2
 80080c0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80080c2:	2300      	movs	r3, #0
 80080c4:	61bb      	str	r3, [r7, #24]
 80080c6:	e018      	b.n	80080fa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80080c8:	79fb      	ldrb	r3, [r7, #7]
 80080ca:	031a      	lsls	r2, r3, #12
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	4413      	add	r3, r2
 80080d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080d4:	461a      	mov	r2, r3
 80080d6:	69fb      	ldr	r3, [r7, #28]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	6013      	str	r3, [r2, #0]
      pSrc++;
 80080dc:	69fb      	ldr	r3, [r7, #28]
 80080de:	3301      	adds	r3, #1
 80080e0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80080e2:	69fb      	ldr	r3, [r7, #28]
 80080e4:	3301      	adds	r3, #1
 80080e6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80080e8:	69fb      	ldr	r3, [r7, #28]
 80080ea:	3301      	adds	r3, #1
 80080ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80080ee:	69fb      	ldr	r3, [r7, #28]
 80080f0:	3301      	adds	r3, #1
 80080f2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80080f4:	69bb      	ldr	r3, [r7, #24]
 80080f6:	3301      	adds	r3, #1
 80080f8:	61bb      	str	r3, [r7, #24]
 80080fa:	69ba      	ldr	r2, [r7, #24]
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	429a      	cmp	r2, r3
 8008100:	d3e2      	bcc.n	80080c8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008102:	2300      	movs	r3, #0
}
 8008104:	4618      	mov	r0, r3
 8008106:	3724      	adds	r7, #36	; 0x24
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008110:	b480      	push	{r7}
 8008112:	b08b      	sub	sp, #44	; 0x2c
 8008114:	af00      	add	r7, sp, #0
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	60b9      	str	r1, [r7, #8]
 800811a:	4613      	mov	r3, r2
 800811c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008126:	88fb      	ldrh	r3, [r7, #6]
 8008128:	089b      	lsrs	r3, r3, #2
 800812a:	b29b      	uxth	r3, r3
 800812c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800812e:	88fb      	ldrh	r3, [r7, #6]
 8008130:	f003 0303 	and.w	r3, r3, #3
 8008134:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008136:	2300      	movs	r3, #0
 8008138:	623b      	str	r3, [r7, #32]
 800813a:	e014      	b.n	8008166 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800813c:	69bb      	ldr	r3, [r7, #24]
 800813e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008142:	681a      	ldr	r2, [r3, #0]
 8008144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008146:	601a      	str	r2, [r3, #0]
    pDest++;
 8008148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814a:	3301      	adds	r3, #1
 800814c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800814e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008150:	3301      	adds	r3, #1
 8008152:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008156:	3301      	adds	r3, #1
 8008158:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800815a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815c:	3301      	adds	r3, #1
 800815e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008160:	6a3b      	ldr	r3, [r7, #32]
 8008162:	3301      	adds	r3, #1
 8008164:	623b      	str	r3, [r7, #32]
 8008166:	6a3a      	ldr	r2, [r7, #32]
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	429a      	cmp	r2, r3
 800816c:	d3e6      	bcc.n	800813c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800816e:	8bfb      	ldrh	r3, [r7, #30]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d01e      	beq.n	80081b2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008174:	2300      	movs	r3, #0
 8008176:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008178:	69bb      	ldr	r3, [r7, #24]
 800817a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800817e:	461a      	mov	r2, r3
 8008180:	f107 0310 	add.w	r3, r7, #16
 8008184:	6812      	ldr	r2, [r2, #0]
 8008186:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008188:	693a      	ldr	r2, [r7, #16]
 800818a:	6a3b      	ldr	r3, [r7, #32]
 800818c:	b2db      	uxtb	r3, r3
 800818e:	00db      	lsls	r3, r3, #3
 8008190:	fa22 f303 	lsr.w	r3, r2, r3
 8008194:	b2da      	uxtb	r2, r3
 8008196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008198:	701a      	strb	r2, [r3, #0]
      i++;
 800819a:	6a3b      	ldr	r3, [r7, #32]
 800819c:	3301      	adds	r3, #1
 800819e:	623b      	str	r3, [r7, #32]
      pDest++;
 80081a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a2:	3301      	adds	r3, #1
 80081a4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80081a6:	8bfb      	ldrh	r3, [r7, #30]
 80081a8:	3b01      	subs	r3, #1
 80081aa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80081ac:	8bfb      	ldrh	r3, [r7, #30]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d1ea      	bne.n	8008188 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80081b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	372c      	adds	r7, #44	; 0x2c
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr

080081c0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b085      	sub	sp, #20
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	695b      	ldr	r3, [r3, #20]
 80081cc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	699b      	ldr	r3, [r3, #24]
 80081d2:	68fa      	ldr	r2, [r7, #12]
 80081d4:	4013      	ands	r3, r2
 80081d6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80081d8:	68fb      	ldr	r3, [r7, #12]
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3714      	adds	r7, #20
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr

080081e6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80081e6:	b480      	push	{r7}
 80081e8:	b083      	sub	sp, #12
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	695b      	ldr	r3, [r3, #20]
 80081f2:	f003 0301 	and.w	r3, r3, #1
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	370c      	adds	r7, #12
 80081fa:	46bd      	mov	sp, r7
 80081fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008200:	4770      	bx	lr
	...

08008204 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008204:	b480      	push	{r7}
 8008206:	b085      	sub	sp, #20
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800820c:	2300      	movs	r3, #0
 800820e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	3301      	adds	r3, #1
 8008214:	60fb      	str	r3, [r7, #12]
 8008216:	4a13      	ldr	r2, [pc, #76]	; (8008264 <USB_CoreReset+0x60>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d901      	bls.n	8008220 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800821c:	2303      	movs	r3, #3
 800821e:	e01a      	b.n	8008256 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	691b      	ldr	r3, [r3, #16]
 8008224:	2b00      	cmp	r3, #0
 8008226:	daf3      	bge.n	8008210 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008228:	2300      	movs	r3, #0
 800822a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	691b      	ldr	r3, [r3, #16]
 8008230:	f043 0201 	orr.w	r2, r3, #1
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	3301      	adds	r3, #1
 800823c:	60fb      	str	r3, [r7, #12]
 800823e:	4a09      	ldr	r2, [pc, #36]	; (8008264 <USB_CoreReset+0x60>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d901      	bls.n	8008248 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8008244:	2303      	movs	r3, #3
 8008246:	e006      	b.n	8008256 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	691b      	ldr	r3, [r3, #16]
 800824c:	f003 0301 	and.w	r3, r3, #1
 8008250:	2b01      	cmp	r3, #1
 8008252:	d0f1      	beq.n	8008238 <USB_CoreReset+0x34>

  return HAL_OK;
 8008254:	2300      	movs	r3, #0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3714      	adds	r7, #20
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr
 8008262:	bf00      	nop
 8008264:	00030d40 	.word	0x00030d40

08008268 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008268:	b084      	sub	sp, #16
 800826a:	b580      	push	{r7, lr}
 800826c:	b084      	sub	sp, #16
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
 8008272:	f107 001c 	add.w	r0, r7, #28
 8008276:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008284:	461a      	mov	r2, r3
 8008286:	2300      	movs	r3, #0
 8008288:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800828e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800829a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082a6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d018      	beq.n	80082ec <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80082ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d10a      	bne.n	80082d6 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	68ba      	ldr	r2, [r7, #8]
 80082ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80082ce:	f043 0304 	orr.w	r3, r3, #4
 80082d2:	6013      	str	r3, [r2, #0]
 80082d4:	e014      	b.n	8008300 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	68ba      	ldr	r2, [r7, #8]
 80082e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80082e4:	f023 0304 	bic.w	r3, r3, #4
 80082e8:	6013      	str	r3, [r2, #0]
 80082ea:	e009      	b.n	8008300 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	68ba      	ldr	r2, [r7, #8]
 80082f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80082fa:	f023 0304 	bic.w	r3, r3, #4
 80082fe:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8008300:	2110      	movs	r1, #16
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f7ff fe82 	bl	800800c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f7ff fea3 	bl	8008054 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800830e:	2300      	movs	r3, #0
 8008310:	60fb      	str	r3, [r7, #12]
 8008312:	e015      	b.n	8008340 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	015a      	lsls	r2, r3, #5
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	4413      	add	r3, r2
 800831c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008320:	461a      	mov	r2, r3
 8008322:	f04f 33ff 	mov.w	r3, #4294967295
 8008326:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	015a      	lsls	r2, r3, #5
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	4413      	add	r3, r2
 8008330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008334:	461a      	mov	r2, r3
 8008336:	2300      	movs	r3, #0
 8008338:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	3301      	adds	r3, #1
 800833e:	60fb      	str	r3, [r7, #12]
 8008340:	6a3b      	ldr	r3, [r7, #32]
 8008342:	68fa      	ldr	r2, [r7, #12]
 8008344:	429a      	cmp	r2, r3
 8008346:	d3e5      	bcc.n	8008314 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f04f 32ff 	mov.w	r2, #4294967295
 8008354:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800835a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800835e:	2b00      	cmp	r3, #0
 8008360:	d00b      	beq.n	800837a <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008368:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	4a13      	ldr	r2, [pc, #76]	; (80083bc <USB_HostInit+0x154>)
 800836e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	4a13      	ldr	r2, [pc, #76]	; (80083c0 <USB_HostInit+0x158>)
 8008374:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008378:	e009      	b.n	800838e <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2280      	movs	r2, #128	; 0x80
 800837e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	4a10      	ldr	r2, [pc, #64]	; (80083c4 <USB_HostInit+0x15c>)
 8008384:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	4a0f      	ldr	r2, [pc, #60]	; (80083c8 <USB_HostInit+0x160>)
 800838a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800838e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008390:	2b00      	cmp	r3, #0
 8008392:	d105      	bne.n	80083a0 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	699b      	ldr	r3, [r3, #24]
 8008398:	f043 0210 	orr.w	r2, r3, #16
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	699a      	ldr	r2, [r3, #24]
 80083a4:	4b09      	ldr	r3, [pc, #36]	; (80083cc <USB_HostInit+0x164>)
 80083a6:	4313      	orrs	r3, r2
 80083a8:	687a      	ldr	r2, [r7, #4]
 80083aa:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80083ac:	2300      	movs	r3, #0
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3710      	adds	r7, #16
 80083b2:	46bd      	mov	sp, r7
 80083b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80083b8:	b004      	add	sp, #16
 80083ba:	4770      	bx	lr
 80083bc:	01000200 	.word	0x01000200
 80083c0:	00e00300 	.word	0x00e00300
 80083c4:	00600080 	.word	0x00600080
 80083c8:	004000e0 	.word	0x004000e0
 80083cc:	a3200008 	.word	0xa3200008

080083d0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b085      	sub	sp, #20
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	460b      	mov	r3, r1
 80083da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	68fa      	ldr	r2, [r7, #12]
 80083ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80083ee:	f023 0303 	bic.w	r3, r3, #3
 80083f2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	78fb      	ldrb	r3, [r7, #3]
 80083fe:	f003 0303 	and.w	r3, r3, #3
 8008402:	68f9      	ldr	r1, [r7, #12]
 8008404:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008408:	4313      	orrs	r3, r2
 800840a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800840c:	78fb      	ldrb	r3, [r7, #3]
 800840e:	2b01      	cmp	r3, #1
 8008410:	d107      	bne.n	8008422 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008418:	461a      	mov	r2, r3
 800841a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800841e:	6053      	str	r3, [r2, #4]
 8008420:	e009      	b.n	8008436 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008422:	78fb      	ldrb	r3, [r7, #3]
 8008424:	2b02      	cmp	r3, #2
 8008426:	d106      	bne.n	8008436 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800842e:	461a      	mov	r2, r3
 8008430:	f241 7370 	movw	r3, #6000	; 0x1770
 8008434:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008436:	2300      	movs	r3, #0
}
 8008438:	4618      	mov	r0, r3
 800843a:	3714      	adds	r7, #20
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr

08008444 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b084      	sub	sp, #16
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008450:	2300      	movs	r3, #0
 8008452:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008464:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	68fa      	ldr	r2, [r7, #12]
 800846a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800846e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008472:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008474:	2064      	movs	r0, #100	; 0x64
 8008476:	f7f9 fd7b 	bl	8001f70 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	68fa      	ldr	r2, [r7, #12]
 800847e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008482:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008486:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008488:	200a      	movs	r0, #10
 800848a:	f7f9 fd71 	bl	8001f70 <HAL_Delay>

  return HAL_OK;
 800848e:	2300      	movs	r3, #0
}
 8008490:	4618      	mov	r0, r3
 8008492:	3710      	adds	r7, #16
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008498:	b480      	push	{r7}
 800849a:	b085      	sub	sp, #20
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	460b      	mov	r3, r1
 80084a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80084a8:	2300      	movs	r3, #0
 80084aa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80084bc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d109      	bne.n	80084dc <USB_DriveVbus+0x44>
 80084c8:	78fb      	ldrb	r3, [r7, #3]
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d106      	bne.n	80084dc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	68fa      	ldr	r2, [r7, #12]
 80084d2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80084d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80084da:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80084e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084e6:	d109      	bne.n	80084fc <USB_DriveVbus+0x64>
 80084e8:	78fb      	ldrb	r3, [r7, #3]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d106      	bne.n	80084fc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	68fa      	ldr	r2, [r7, #12]
 80084f2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80084f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80084fa:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80084fc:	2300      	movs	r3, #0
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3714      	adds	r7, #20
 8008502:	46bd      	mov	sp, r7
 8008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008508:	4770      	bx	lr

0800850a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800850a:	b480      	push	{r7}
 800850c:	b085      	sub	sp, #20
 800850e:	af00      	add	r7, sp, #0
 8008510:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008516:	2300      	movs	r3, #0
 8008518:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	0c5b      	lsrs	r3, r3, #17
 8008528:	f003 0303 	and.w	r3, r3, #3
}
 800852c:	4618      	mov	r0, r3
 800852e:	3714      	adds	r7, #20
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr

08008538 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008538:	b480      	push	{r7}
 800853a:	b085      	sub	sp, #20
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800854a:	689b      	ldr	r3, [r3, #8]
 800854c:	b29b      	uxth	r3, r3
}
 800854e:	4618      	mov	r0, r3
 8008550:	3714      	adds	r7, #20
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr
	...

0800855c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b088      	sub	sp, #32
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	4608      	mov	r0, r1
 8008566:	4611      	mov	r1, r2
 8008568:	461a      	mov	r2, r3
 800856a:	4603      	mov	r3, r0
 800856c:	70fb      	strb	r3, [r7, #3]
 800856e:	460b      	mov	r3, r1
 8008570:	70bb      	strb	r3, [r7, #2]
 8008572:	4613      	mov	r3, r2
 8008574:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008576:	2300      	movs	r3, #0
 8008578:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800857e:	78fb      	ldrb	r3, [r7, #3]
 8008580:	015a      	lsls	r2, r3, #5
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	4413      	add	r3, r2
 8008586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800858a:	461a      	mov	r2, r3
 800858c:	f04f 33ff 	mov.w	r3, #4294967295
 8008590:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008592:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008596:	2b03      	cmp	r3, #3
 8008598:	d87e      	bhi.n	8008698 <USB_HC_Init+0x13c>
 800859a:	a201      	add	r2, pc, #4	; (adr r2, 80085a0 <USB_HC_Init+0x44>)
 800859c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085a0:	080085b1 	.word	0x080085b1
 80085a4:	0800865b 	.word	0x0800865b
 80085a8:	080085b1 	.word	0x080085b1
 80085ac:	0800861d 	.word	0x0800861d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80085b0:	78fb      	ldrb	r3, [r7, #3]
 80085b2:	015a      	lsls	r2, r3, #5
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	4413      	add	r3, r2
 80085b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085bc:	461a      	mov	r2, r3
 80085be:	f240 439d 	movw	r3, #1181	; 0x49d
 80085c2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80085c4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	da10      	bge.n	80085ee <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80085cc:	78fb      	ldrb	r3, [r7, #3]
 80085ce:	015a      	lsls	r2, r3, #5
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	4413      	add	r3, r2
 80085d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085d8:	68db      	ldr	r3, [r3, #12]
 80085da:	78fa      	ldrb	r2, [r7, #3]
 80085dc:	0151      	lsls	r1, r2, #5
 80085de:	693a      	ldr	r2, [r7, #16]
 80085e0:	440a      	add	r2, r1
 80085e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085ea:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80085ec:	e057      	b.n	800869e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d051      	beq.n	800869e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80085fa:	78fb      	ldrb	r3, [r7, #3]
 80085fc:	015a      	lsls	r2, r3, #5
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	4413      	add	r3, r2
 8008602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	78fa      	ldrb	r2, [r7, #3]
 800860a:	0151      	lsls	r1, r2, #5
 800860c:	693a      	ldr	r2, [r7, #16]
 800860e:	440a      	add	r2, r1
 8008610:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008614:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008618:	60d3      	str	r3, [r2, #12]
      break;
 800861a:	e040      	b.n	800869e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800861c:	78fb      	ldrb	r3, [r7, #3]
 800861e:	015a      	lsls	r2, r3, #5
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	4413      	add	r3, r2
 8008624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008628:	461a      	mov	r2, r3
 800862a:	f240 639d 	movw	r3, #1693	; 0x69d
 800862e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008630:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008634:	2b00      	cmp	r3, #0
 8008636:	da34      	bge.n	80086a2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008638:	78fb      	ldrb	r3, [r7, #3]
 800863a:	015a      	lsls	r2, r3, #5
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	4413      	add	r3, r2
 8008640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008644:	68db      	ldr	r3, [r3, #12]
 8008646:	78fa      	ldrb	r2, [r7, #3]
 8008648:	0151      	lsls	r1, r2, #5
 800864a:	693a      	ldr	r2, [r7, #16]
 800864c:	440a      	add	r2, r1
 800864e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008656:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008658:	e023      	b.n	80086a2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800865a:	78fb      	ldrb	r3, [r7, #3]
 800865c:	015a      	lsls	r2, r3, #5
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	4413      	add	r3, r2
 8008662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008666:	461a      	mov	r2, r3
 8008668:	f240 2325 	movw	r3, #549	; 0x225
 800866c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800866e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008672:	2b00      	cmp	r3, #0
 8008674:	da17      	bge.n	80086a6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008676:	78fb      	ldrb	r3, [r7, #3]
 8008678:	015a      	lsls	r2, r3, #5
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	4413      	add	r3, r2
 800867e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008682:	68db      	ldr	r3, [r3, #12]
 8008684:	78fa      	ldrb	r2, [r7, #3]
 8008686:	0151      	lsls	r1, r2, #5
 8008688:	693a      	ldr	r2, [r7, #16]
 800868a:	440a      	add	r2, r1
 800868c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008690:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008694:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008696:	e006      	b.n	80086a6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008698:	2301      	movs	r3, #1
 800869a:	77fb      	strb	r3, [r7, #31]
      break;
 800869c:	e004      	b.n	80086a8 <USB_HC_Init+0x14c>
      break;
 800869e:	bf00      	nop
 80086a0:	e002      	b.n	80086a8 <USB_HC_Init+0x14c>
      break;
 80086a2:	bf00      	nop
 80086a4:	e000      	b.n	80086a8 <USB_HC_Init+0x14c>
      break;
 80086a6:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80086ae:	699a      	ldr	r2, [r3, #24]
 80086b0:	78fb      	ldrb	r3, [r7, #3]
 80086b2:	f003 030f 	and.w	r3, r3, #15
 80086b6:	2101      	movs	r1, #1
 80086b8:	fa01 f303 	lsl.w	r3, r1, r3
 80086bc:	6939      	ldr	r1, [r7, #16]
 80086be:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80086c2:	4313      	orrs	r3, r2
 80086c4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	699b      	ldr	r3, [r3, #24]
 80086ca:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80086d2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	da03      	bge.n	80086e2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80086da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086de:	61bb      	str	r3, [r7, #24]
 80086e0:	e001      	b.n	80086e6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80086e2:	2300      	movs	r3, #0
 80086e4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f7ff ff0f 	bl	800850a <USB_GetHostSpeed>
 80086ec:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80086ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80086f2:	2b02      	cmp	r3, #2
 80086f4:	d106      	bne.n	8008704 <USB_HC_Init+0x1a8>
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2b02      	cmp	r3, #2
 80086fa:	d003      	beq.n	8008704 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80086fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008700:	617b      	str	r3, [r7, #20]
 8008702:	e001      	b.n	8008708 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008704:	2300      	movs	r3, #0
 8008706:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008708:	787b      	ldrb	r3, [r7, #1]
 800870a:	059b      	lsls	r3, r3, #22
 800870c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008710:	78bb      	ldrb	r3, [r7, #2]
 8008712:	02db      	lsls	r3, r3, #11
 8008714:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008718:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800871a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800871e:	049b      	lsls	r3, r3, #18
 8008720:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008724:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008726:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008728:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800872c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800872e:	69bb      	ldr	r3, [r7, #24]
 8008730:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008732:	78fb      	ldrb	r3, [r7, #3]
 8008734:	0159      	lsls	r1, r3, #5
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	440b      	add	r3, r1
 800873a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800873e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008744:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8008746:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800874a:	2b03      	cmp	r3, #3
 800874c:	d10f      	bne.n	800876e <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800874e:	78fb      	ldrb	r3, [r7, #3]
 8008750:	015a      	lsls	r2, r3, #5
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	4413      	add	r3, r2
 8008756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	78fa      	ldrb	r2, [r7, #3]
 800875e:	0151      	lsls	r1, r2, #5
 8008760:	693a      	ldr	r2, [r7, #16]
 8008762:	440a      	add	r2, r1
 8008764:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008768:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800876c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800876e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008770:	4618      	mov	r0, r3
 8008772:	3720      	adds	r7, #32
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}

08008778 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b08c      	sub	sp, #48	; 0x30
 800877c:	af02      	add	r7, sp, #8
 800877e:	60f8      	str	r0, [r7, #12]
 8008780:	60b9      	str	r1, [r7, #8]
 8008782:	4613      	mov	r3, r2
 8008784:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	785b      	ldrb	r3, [r3, #1]
 800878e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008790:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008794:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800879a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d02d      	beq.n	80087fe <USB_HC_StartXfer+0x86>
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	791b      	ldrb	r3, [r3, #4]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d129      	bne.n	80087fe <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80087aa:	79fb      	ldrb	r3, [r7, #7]
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d117      	bne.n	80087e0 <USB_HC_StartXfer+0x68>
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	79db      	ldrb	r3, [r3, #7]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d003      	beq.n	80087c0 <USB_HC_StartXfer+0x48>
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	79db      	ldrb	r3, [r3, #7]
 80087bc:	2b02      	cmp	r3, #2
 80087be:	d10f      	bne.n	80087e0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80087c0:	69fb      	ldr	r3, [r7, #28]
 80087c2:	015a      	lsls	r2, r3, #5
 80087c4:	6a3b      	ldr	r3, [r7, #32]
 80087c6:	4413      	add	r3, r2
 80087c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087cc:	68db      	ldr	r3, [r3, #12]
 80087ce:	69fa      	ldr	r2, [r7, #28]
 80087d0:	0151      	lsls	r1, r2, #5
 80087d2:	6a3a      	ldr	r2, [r7, #32]
 80087d4:	440a      	add	r2, r1
 80087d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087de:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80087e0:	79fb      	ldrb	r3, [r7, #7]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d10b      	bne.n	80087fe <USB_HC_StartXfer+0x86>
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	795b      	ldrb	r3, [r3, #5]
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d107      	bne.n	80087fe <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	785b      	ldrb	r3, [r3, #1]
 80087f2:	4619      	mov	r1, r3
 80087f4:	68f8      	ldr	r0, [r7, #12]
 80087f6:	f000 fa2f 	bl	8008c58 <USB_DoPing>
      return HAL_OK;
 80087fa:	2300      	movs	r3, #0
 80087fc:	e0f8      	b.n	80089f0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	695b      	ldr	r3, [r3, #20]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d018      	beq.n	8008838 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	695b      	ldr	r3, [r3, #20]
 800880a:	68ba      	ldr	r2, [r7, #8]
 800880c:	8912      	ldrh	r2, [r2, #8]
 800880e:	4413      	add	r3, r2
 8008810:	3b01      	subs	r3, #1
 8008812:	68ba      	ldr	r2, [r7, #8]
 8008814:	8912      	ldrh	r2, [r2, #8]
 8008816:	fbb3 f3f2 	udiv	r3, r3, r2
 800881a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800881c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800881e:	8b7b      	ldrh	r3, [r7, #26]
 8008820:	429a      	cmp	r2, r3
 8008822:	d90b      	bls.n	800883c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8008824:	8b7b      	ldrh	r3, [r7, #26]
 8008826:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008828:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800882a:	68ba      	ldr	r2, [r7, #8]
 800882c:	8912      	ldrh	r2, [r2, #8]
 800882e:	fb02 f203 	mul.w	r2, r2, r3
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	611a      	str	r2, [r3, #16]
 8008836:	e001      	b.n	800883c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8008838:	2301      	movs	r3, #1
 800883a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	78db      	ldrb	r3, [r3, #3]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d007      	beq.n	8008854 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008844:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008846:	68ba      	ldr	r2, [r7, #8]
 8008848:	8912      	ldrh	r2, [r2, #8]
 800884a:	fb02 f203 	mul.w	r2, r2, r3
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	611a      	str	r2, [r3, #16]
 8008852:	e003      	b.n	800885c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	695a      	ldr	r2, [r3, #20]
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	691b      	ldr	r3, [r3, #16]
 8008860:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008864:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008866:	04d9      	lsls	r1, r3, #19
 8008868:	4b63      	ldr	r3, [pc, #396]	; (80089f8 <USB_HC_StartXfer+0x280>)
 800886a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800886c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	7a9b      	ldrb	r3, [r3, #10]
 8008872:	075b      	lsls	r3, r3, #29
 8008874:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008878:	69f9      	ldr	r1, [r7, #28]
 800887a:	0148      	lsls	r0, r1, #5
 800887c:	6a39      	ldr	r1, [r7, #32]
 800887e:	4401      	add	r1, r0
 8008880:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008884:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008886:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008888:	79fb      	ldrb	r3, [r7, #7]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d009      	beq.n	80088a2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	68d9      	ldr	r1, [r3, #12]
 8008892:	69fb      	ldr	r3, [r7, #28]
 8008894:	015a      	lsls	r2, r3, #5
 8008896:	6a3b      	ldr	r3, [r7, #32]
 8008898:	4413      	add	r3, r2
 800889a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800889e:	460a      	mov	r2, r1
 80088a0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80088a2:	6a3b      	ldr	r3, [r7, #32]
 80088a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80088a8:	689b      	ldr	r3, [r3, #8]
 80088aa:	f003 0301 	and.w	r3, r3, #1
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	bf0c      	ite	eq
 80088b2:	2301      	moveq	r3, #1
 80088b4:	2300      	movne	r3, #0
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80088ba:	69fb      	ldr	r3, [r7, #28]
 80088bc:	015a      	lsls	r2, r3, #5
 80088be:	6a3b      	ldr	r3, [r7, #32]
 80088c0:	4413      	add	r3, r2
 80088c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	69fa      	ldr	r2, [r7, #28]
 80088ca:	0151      	lsls	r1, r2, #5
 80088cc:	6a3a      	ldr	r2, [r7, #32]
 80088ce:	440a      	add	r2, r1
 80088d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088d4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80088d8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80088da:	69fb      	ldr	r3, [r7, #28]
 80088dc:	015a      	lsls	r2, r3, #5
 80088de:	6a3b      	ldr	r3, [r7, #32]
 80088e0:	4413      	add	r3, r2
 80088e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088e6:	681a      	ldr	r2, [r3, #0]
 80088e8:	7e7b      	ldrb	r3, [r7, #25]
 80088ea:	075b      	lsls	r3, r3, #29
 80088ec:	69f9      	ldr	r1, [r7, #28]
 80088ee:	0148      	lsls	r0, r1, #5
 80088f0:	6a39      	ldr	r1, [r7, #32]
 80088f2:	4401      	add	r1, r0
 80088f4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80088f8:	4313      	orrs	r3, r2
 80088fa:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80088fc:	69fb      	ldr	r3, [r7, #28]
 80088fe:	015a      	lsls	r2, r3, #5
 8008900:	6a3b      	ldr	r3, [r7, #32]
 8008902:	4413      	add	r3, r2
 8008904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008912:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	78db      	ldrb	r3, [r3, #3]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d004      	beq.n	8008926 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008922:	613b      	str	r3, [r7, #16]
 8008924:	e003      	b.n	800892e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800892c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008934:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008936:	69fb      	ldr	r3, [r7, #28]
 8008938:	015a      	lsls	r2, r3, #5
 800893a:	6a3b      	ldr	r3, [r7, #32]
 800893c:	4413      	add	r3, r2
 800893e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008942:	461a      	mov	r2, r3
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008948:	79fb      	ldrb	r3, [r7, #7]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d001      	beq.n	8008952 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800894e:	2300      	movs	r3, #0
 8008950:	e04e      	b.n	80089f0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	78db      	ldrb	r3, [r3, #3]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d149      	bne.n	80089ee <USB_HC_StartXfer+0x276>
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	695b      	ldr	r3, [r3, #20]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d045      	beq.n	80089ee <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	79db      	ldrb	r3, [r3, #7]
 8008966:	2b03      	cmp	r3, #3
 8008968:	d830      	bhi.n	80089cc <USB_HC_StartXfer+0x254>
 800896a:	a201      	add	r2, pc, #4	; (adr r2, 8008970 <USB_HC_StartXfer+0x1f8>)
 800896c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008970:	08008981 	.word	0x08008981
 8008974:	080089a5 	.word	0x080089a5
 8008978:	08008981 	.word	0x08008981
 800897c:	080089a5 	.word	0x080089a5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	695b      	ldr	r3, [r3, #20]
 8008984:	3303      	adds	r3, #3
 8008986:	089b      	lsrs	r3, r3, #2
 8008988:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800898a:	8afa      	ldrh	r2, [r7, #22]
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008990:	b29b      	uxth	r3, r3
 8008992:	429a      	cmp	r2, r3
 8008994:	d91c      	bls.n	80089d0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	699b      	ldr	r3, [r3, #24]
 800899a:	f043 0220 	orr.w	r2, r3, #32
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	619a      	str	r2, [r3, #24]
        }
        break;
 80089a2:	e015      	b.n	80089d0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	695b      	ldr	r3, [r3, #20]
 80089a8:	3303      	adds	r3, #3
 80089aa:	089b      	lsrs	r3, r3, #2
 80089ac:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80089ae:	8afa      	ldrh	r2, [r7, #22]
 80089b0:	6a3b      	ldr	r3, [r7, #32]
 80089b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089b6:	691b      	ldr	r3, [r3, #16]
 80089b8:	b29b      	uxth	r3, r3
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d90a      	bls.n	80089d4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	699b      	ldr	r3, [r3, #24]
 80089c2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	619a      	str	r2, [r3, #24]
        }
        break;
 80089ca:	e003      	b.n	80089d4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80089cc:	bf00      	nop
 80089ce:	e002      	b.n	80089d6 <USB_HC_StartXfer+0x25e>
        break;
 80089d0:	bf00      	nop
 80089d2:	e000      	b.n	80089d6 <USB_HC_StartXfer+0x25e>
        break;
 80089d4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	68d9      	ldr	r1, [r3, #12]
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	785a      	ldrb	r2, [r3, #1]
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	695b      	ldr	r3, [r3, #20]
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	2000      	movs	r0, #0
 80089e6:	9000      	str	r0, [sp, #0]
 80089e8:	68f8      	ldr	r0, [r7, #12]
 80089ea:	f7ff fb53 	bl	8008094 <USB_WritePacket>
  }

  return HAL_OK;
 80089ee:	2300      	movs	r3, #0
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3728      	adds	r7, #40	; 0x28
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}
 80089f8:	1ff80000 	.word	0x1ff80000

080089fc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b085      	sub	sp, #20
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a0e:	695b      	ldr	r3, [r3, #20]
 8008a10:	b29b      	uxth	r3, r3
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3714      	adds	r7, #20
 8008a16:	46bd      	mov	sp, r7
 8008a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1c:	4770      	bx	lr

08008a1e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008a1e:	b480      	push	{r7}
 8008a20:	b089      	sub	sp, #36	; 0x24
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	6078      	str	r0, [r7, #4]
 8008a26:	460b      	mov	r3, r1
 8008a28:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8008a2e:	78fb      	ldrb	r3, [r7, #3]
 8008a30:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8008a32:	2300      	movs	r3, #0
 8008a34:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	015a      	lsls	r2, r3, #5
 8008a3a:	69bb      	ldr	r3, [r7, #24]
 8008a3c:	4413      	add	r3, r2
 8008a3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	0c9b      	lsrs	r3, r3, #18
 8008a46:	f003 0303 	and.w	r3, r3, #3
 8008a4a:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	015a      	lsls	r2, r3, #5
 8008a50:	69bb      	ldr	r3, [r7, #24]
 8008a52:	4413      	add	r3, r2
 8008a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	0fdb      	lsrs	r3, r3, #31
 8008a5c:	f003 0301 	and.w	r3, r3, #1
 8008a60:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	689b      	ldr	r3, [r3, #8]
 8008a66:	f003 0320 	and.w	r3, r3, #32
 8008a6a:	2b20      	cmp	r3, #32
 8008a6c:	d104      	bne.n	8008a78 <USB_HC_Halt+0x5a>
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d101      	bne.n	8008a78 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008a74:	2300      	movs	r3, #0
 8008a76:	e0e8      	b.n	8008c4a <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d002      	beq.n	8008a84 <USB_HC_Halt+0x66>
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	2b02      	cmp	r3, #2
 8008a82:	d173      	bne.n	8008b6c <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	015a      	lsls	r2, r3, #5
 8008a88:	69bb      	ldr	r3, [r7, #24]
 8008a8a:	4413      	add	r3, r2
 8008a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	697a      	ldr	r2, [r7, #20]
 8008a94:	0151      	lsls	r1, r2, #5
 8008a96:	69ba      	ldr	r2, [r7, #24]
 8008a98:	440a      	add	r2, r1
 8008a9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008aa2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	689b      	ldr	r3, [r3, #8]
 8008aa8:	f003 0320 	and.w	r3, r3, #32
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	f040 80cb 	bne.w	8008c48 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d143      	bne.n	8008b46 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	015a      	lsls	r2, r3, #5
 8008ac2:	69bb      	ldr	r3, [r7, #24]
 8008ac4:	4413      	add	r3, r2
 8008ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	697a      	ldr	r2, [r7, #20]
 8008ace:	0151      	lsls	r1, r2, #5
 8008ad0:	69ba      	ldr	r2, [r7, #24]
 8008ad2:	440a      	add	r2, r1
 8008ad4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ad8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008adc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	015a      	lsls	r2, r3, #5
 8008ae2:	69bb      	ldr	r3, [r7, #24]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	697a      	ldr	r2, [r7, #20]
 8008aee:	0151      	lsls	r1, r2, #5
 8008af0:	69ba      	ldr	r2, [r7, #24]
 8008af2:	440a      	add	r2, r1
 8008af4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008af8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008afc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	015a      	lsls	r2, r3, #5
 8008b02:	69bb      	ldr	r3, [r7, #24]
 8008b04:	4413      	add	r3, r2
 8008b06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	697a      	ldr	r2, [r7, #20]
 8008b0e:	0151      	lsls	r1, r2, #5
 8008b10:	69ba      	ldr	r2, [r7, #24]
 8008b12:	440a      	add	r2, r1
 8008b14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b18:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008b1c:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8008b1e:	69fb      	ldr	r3, [r7, #28]
 8008b20:	3301      	adds	r3, #1
 8008b22:	61fb      	str	r3, [r7, #28]
 8008b24:	69fb      	ldr	r3, [r7, #28]
 8008b26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b2a:	d81d      	bhi.n	8008b68 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	015a      	lsls	r2, r3, #5
 8008b30:	69bb      	ldr	r3, [r7, #24]
 8008b32:	4413      	add	r3, r2
 8008b34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b42:	d0ec      	beq.n	8008b1e <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008b44:	e080      	b.n	8008c48 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	015a      	lsls	r2, r3, #5
 8008b4a:	69bb      	ldr	r3, [r7, #24]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	697a      	ldr	r2, [r7, #20]
 8008b56:	0151      	lsls	r1, r2, #5
 8008b58:	69ba      	ldr	r2, [r7, #24]
 8008b5a:	440a      	add	r2, r1
 8008b5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b64:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008b66:	e06f      	b.n	8008c48 <USB_HC_Halt+0x22a>
            break;
 8008b68:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008b6a:	e06d      	b.n	8008c48 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	015a      	lsls	r2, r3, #5
 8008b70:	69bb      	ldr	r3, [r7, #24]
 8008b72:	4413      	add	r3, r2
 8008b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	697a      	ldr	r2, [r7, #20]
 8008b7c:	0151      	lsls	r1, r2, #5
 8008b7e:	69ba      	ldr	r2, [r7, #24]
 8008b80:	440a      	add	r2, r1
 8008b82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b8a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008b8c:	69bb      	ldr	r3, [r7, #24]
 8008b8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b92:	691b      	ldr	r3, [r3, #16]
 8008b94:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d143      	bne.n	8008c24 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	015a      	lsls	r2, r3, #5
 8008ba0:	69bb      	ldr	r3, [r7, #24]
 8008ba2:	4413      	add	r3, r2
 8008ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	697a      	ldr	r2, [r7, #20]
 8008bac:	0151      	lsls	r1, r2, #5
 8008bae:	69ba      	ldr	r2, [r7, #24]
 8008bb0:	440a      	add	r2, r1
 8008bb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008bb6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008bba:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	015a      	lsls	r2, r3, #5
 8008bc0:	69bb      	ldr	r3, [r7, #24]
 8008bc2:	4413      	add	r3, r2
 8008bc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	697a      	ldr	r2, [r7, #20]
 8008bcc:	0151      	lsls	r1, r2, #5
 8008bce:	69ba      	ldr	r2, [r7, #24]
 8008bd0:	440a      	add	r2, r1
 8008bd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008bda:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	015a      	lsls	r2, r3, #5
 8008be0:	69bb      	ldr	r3, [r7, #24]
 8008be2:	4413      	add	r3, r2
 8008be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	697a      	ldr	r2, [r7, #20]
 8008bec:	0151      	lsls	r1, r2, #5
 8008bee:	69ba      	ldr	r2, [r7, #24]
 8008bf0:	440a      	add	r2, r1
 8008bf2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008bf6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008bfa:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008bfc:	69fb      	ldr	r3, [r7, #28]
 8008bfe:	3301      	adds	r3, #1
 8008c00:	61fb      	str	r3, [r7, #28]
 8008c02:	69fb      	ldr	r3, [r7, #28]
 8008c04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c08:	d81d      	bhi.n	8008c46 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	015a      	lsls	r2, r3, #5
 8008c0e:	69bb      	ldr	r3, [r7, #24]
 8008c10:	4413      	add	r3, r2
 8008c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c20:	d0ec      	beq.n	8008bfc <USB_HC_Halt+0x1de>
 8008c22:	e011      	b.n	8008c48 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	015a      	lsls	r2, r3, #5
 8008c28:	69bb      	ldr	r3, [r7, #24]
 8008c2a:	4413      	add	r3, r2
 8008c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	697a      	ldr	r2, [r7, #20]
 8008c34:	0151      	lsls	r1, r2, #5
 8008c36:	69ba      	ldr	r2, [r7, #24]
 8008c38:	440a      	add	r2, r1
 8008c3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008c42:	6013      	str	r3, [r2, #0]
 8008c44:	e000      	b.n	8008c48 <USB_HC_Halt+0x22a>
          break;
 8008c46:	bf00      	nop
    }
  }

  return HAL_OK;
 8008c48:	2300      	movs	r3, #0
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3724      	adds	r7, #36	; 0x24
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c54:	4770      	bx	lr
	...

08008c58 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b087      	sub	sp, #28
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	460b      	mov	r3, r1
 8008c62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008c68:	78fb      	ldrb	r3, [r7, #3]
 8008c6a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	04da      	lsls	r2, r3, #19
 8008c74:	4b15      	ldr	r3, [pc, #84]	; (8008ccc <USB_DoPing+0x74>)
 8008c76:	4013      	ands	r3, r2
 8008c78:	693a      	ldr	r2, [r7, #16]
 8008c7a:	0151      	lsls	r1, r2, #5
 8008c7c:	697a      	ldr	r2, [r7, #20]
 8008c7e:	440a      	add	r2, r1
 8008c80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008c88:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	015a      	lsls	r2, r3, #5
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	4413      	add	r3, r2
 8008c92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008ca0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008ca8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	015a      	lsls	r2, r3, #5
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	4413      	add	r3, r2
 8008cb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cb6:	461a      	mov	r2, r3
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008cbc:	2300      	movs	r3, #0
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	371c      	adds	r7, #28
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr
 8008cca:	bf00      	nop
 8008ccc:	1ff80000 	.word	0x1ff80000

08008cd0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b086      	sub	sp, #24
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f7ff f935 	bl	8007f50 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8008ce6:	2110      	movs	r1, #16
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f7ff f98f 	bl	800800c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f7ff f9b0 	bl	8008054 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	613b      	str	r3, [r7, #16]
 8008cf8:	e01f      	b.n	8008d3a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	015a      	lsls	r2, r3, #5
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	4413      	add	r3, r2
 8008d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d10:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008d18:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008d20:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	015a      	lsls	r2, r3, #5
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	4413      	add	r3, r2
 8008d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d2e:	461a      	mov	r2, r3
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	3301      	adds	r3, #1
 8008d38:	613b      	str	r3, [r7, #16]
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	2b0f      	cmp	r3, #15
 8008d3e:	d9dc      	bls.n	8008cfa <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008d40:	2300      	movs	r3, #0
 8008d42:	613b      	str	r3, [r7, #16]
 8008d44:	e034      	b.n	8008db0 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	015a      	lsls	r2, r3, #5
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	4413      	add	r3, r2
 8008d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d5c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008d64:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008d6c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	015a      	lsls	r2, r3, #5
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	4413      	add	r3, r2
 8008d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	3301      	adds	r3, #1
 8008d84:	617b      	str	r3, [r7, #20]
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d8c:	d80c      	bhi.n	8008da8 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	015a      	lsls	r2, r3, #5
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	4413      	add	r3, r2
 8008d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008da0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008da4:	d0ec      	beq.n	8008d80 <USB_StopHost+0xb0>
 8008da6:	e000      	b.n	8008daa <USB_StopHost+0xda>
        break;
 8008da8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	3301      	adds	r3, #1
 8008dae:	613b      	str	r3, [r7, #16]
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	2b0f      	cmp	r3, #15
 8008db4:	d9c7      	bls.n	8008d46 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8008dc2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8008dca:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f7ff f8ae 	bl	8007f2e <USB_EnableGlobalInt>

  return HAL_OK;
 8008dd2:	2300      	movs	r3, #0
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3718      	adds	r7, #24
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008ddc:	b590      	push	{r4, r7, lr}
 8008dde:	b089      	sub	sp, #36	; 0x24
 8008de0:	af04      	add	r7, sp, #16
 8008de2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008de4:	2301      	movs	r3, #1
 8008de6:	2202      	movs	r2, #2
 8008de8:	2102      	movs	r1, #2
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 fcb8 	bl	8009760 <USBH_FindInterface>
 8008df0:	4603      	mov	r3, r0
 8008df2:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008df4:	7bfb      	ldrb	r3, [r7, #15]
 8008df6:	2bff      	cmp	r3, #255	; 0xff
 8008df8:	d002      	beq.n	8008e00 <USBH_CDC_InterfaceInit+0x24>
 8008dfa:	7bfb      	ldrb	r3, [r7, #15]
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	d901      	bls.n	8008e04 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008e00:	2302      	movs	r3, #2
 8008e02:	e13d      	b.n	8009080 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008e04:	7bfb      	ldrb	r3, [r7, #15]
 8008e06:	4619      	mov	r1, r3
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f000 fc8d 	bl	8009728 <USBH_SelectInterface>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008e12:	7bbb      	ldrb	r3, [r7, #14]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d001      	beq.n	8008e1c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008e18:	2302      	movs	r3, #2
 8008e1a:	e131      	b.n	8009080 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008e22:	2050      	movs	r0, #80	; 0x50
 8008e24:	f004 fef0 	bl	800dc08 <malloc>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e32:	69db      	ldr	r3, [r3, #28]
 8008e34:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d101      	bne.n	8008e40 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008e3c:	2302      	movs	r3, #2
 8008e3e:	e11f      	b.n	8009080 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008e40:	2250      	movs	r2, #80	; 0x50
 8008e42:	2100      	movs	r1, #0
 8008e44:	68b8      	ldr	r0, [r7, #8]
 8008e46:	f004 fefd 	bl	800dc44 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008e4a:	7bfb      	ldrb	r3, [r7, #15]
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	211a      	movs	r1, #26
 8008e50:	fb01 f303 	mul.w	r3, r1, r3
 8008e54:	4413      	add	r3, r2
 8008e56:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008e5a:	781b      	ldrb	r3, [r3, #0]
 8008e5c:	b25b      	sxtb	r3, r3
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	da15      	bge.n	8008e8e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008e62:	7bfb      	ldrb	r3, [r7, #15]
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	211a      	movs	r1, #26
 8008e68:	fb01 f303 	mul.w	r3, r1, r3
 8008e6c:	4413      	add	r3, r2
 8008e6e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008e72:	781a      	ldrb	r2, [r3, #0]
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008e78:	7bfb      	ldrb	r3, [r7, #15]
 8008e7a:	687a      	ldr	r2, [r7, #4]
 8008e7c:	211a      	movs	r1, #26
 8008e7e:	fb01 f303 	mul.w	r3, r1, r3
 8008e82:	4413      	add	r3, r2
 8008e84:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008e88:	881a      	ldrh	r2, [r3, #0]
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	785b      	ldrb	r3, [r3, #1]
 8008e92:	4619      	mov	r1, r3
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f002 f890 	bl	800afba <USBH_AllocPipe>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	7819      	ldrb	r1, [r3, #0]
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	7858      	ldrb	r0, [r3, #1]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008eb6:	68ba      	ldr	r2, [r7, #8]
 8008eb8:	8952      	ldrh	r2, [r2, #10]
 8008eba:	9202      	str	r2, [sp, #8]
 8008ebc:	2203      	movs	r2, #3
 8008ebe:	9201      	str	r2, [sp, #4]
 8008ec0:	9300      	str	r3, [sp, #0]
 8008ec2:	4623      	mov	r3, r4
 8008ec4:	4602      	mov	r2, r0
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f002 f848 	bl	800af5c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	4619      	mov	r1, r3
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f004 fde7 	bl	800daa8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008eda:	2300      	movs	r3, #0
 8008edc:	2200      	movs	r2, #0
 8008ede:	210a      	movs	r1, #10
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f000 fc3d 	bl	8009760 <USBH_FindInterface>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008eea:	7bfb      	ldrb	r3, [r7, #15]
 8008eec:	2bff      	cmp	r3, #255	; 0xff
 8008eee:	d002      	beq.n	8008ef6 <USBH_CDC_InterfaceInit+0x11a>
 8008ef0:	7bfb      	ldrb	r3, [r7, #15]
 8008ef2:	2b01      	cmp	r3, #1
 8008ef4:	d901      	bls.n	8008efa <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008ef6:	2302      	movs	r3, #2
 8008ef8:	e0c2      	b.n	8009080 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008efa:	7bfb      	ldrb	r3, [r7, #15]
 8008efc:	687a      	ldr	r2, [r7, #4]
 8008efe:	211a      	movs	r1, #26
 8008f00:	fb01 f303 	mul.w	r3, r1, r3
 8008f04:	4413      	add	r3, r2
 8008f06:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	b25b      	sxtb	r3, r3
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	da16      	bge.n	8008f40 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008f12:	7bfb      	ldrb	r3, [r7, #15]
 8008f14:	687a      	ldr	r2, [r7, #4]
 8008f16:	211a      	movs	r1, #26
 8008f18:	fb01 f303 	mul.w	r3, r1, r3
 8008f1c:	4413      	add	r3, r2
 8008f1e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008f22:	781a      	ldrb	r2, [r3, #0]
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008f28:	7bfb      	ldrb	r3, [r7, #15]
 8008f2a:	687a      	ldr	r2, [r7, #4]
 8008f2c:	211a      	movs	r1, #26
 8008f2e:	fb01 f303 	mul.w	r3, r1, r3
 8008f32:	4413      	add	r3, r2
 8008f34:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008f38:	881a      	ldrh	r2, [r3, #0]
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	835a      	strh	r2, [r3, #26]
 8008f3e:	e015      	b.n	8008f6c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008f40:	7bfb      	ldrb	r3, [r7, #15]
 8008f42:	687a      	ldr	r2, [r7, #4]
 8008f44:	211a      	movs	r1, #26
 8008f46:	fb01 f303 	mul.w	r3, r1, r3
 8008f4a:	4413      	add	r3, r2
 8008f4c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008f50:	781a      	ldrb	r2, [r3, #0]
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008f56:	7bfb      	ldrb	r3, [r7, #15]
 8008f58:	687a      	ldr	r2, [r7, #4]
 8008f5a:	211a      	movs	r1, #26
 8008f5c:	fb01 f303 	mul.w	r3, r1, r3
 8008f60:	4413      	add	r3, r2
 8008f62:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008f66:	881a      	ldrh	r2, [r3, #0]
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8008f6c:	7bfb      	ldrb	r3, [r7, #15]
 8008f6e:	687a      	ldr	r2, [r7, #4]
 8008f70:	211a      	movs	r1, #26
 8008f72:	fb01 f303 	mul.w	r3, r1, r3
 8008f76:	4413      	add	r3, r2
 8008f78:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	b25b      	sxtb	r3, r3
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	da16      	bge.n	8008fb2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008f84:	7bfb      	ldrb	r3, [r7, #15]
 8008f86:	687a      	ldr	r2, [r7, #4]
 8008f88:	211a      	movs	r1, #26
 8008f8a:	fb01 f303 	mul.w	r3, r1, r3
 8008f8e:	4413      	add	r3, r2
 8008f90:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008f94:	781a      	ldrb	r2, [r3, #0]
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008f9a:	7bfb      	ldrb	r3, [r7, #15]
 8008f9c:	687a      	ldr	r2, [r7, #4]
 8008f9e:	211a      	movs	r1, #26
 8008fa0:	fb01 f303 	mul.w	r3, r1, r3
 8008fa4:	4413      	add	r3, r2
 8008fa6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008faa:	881a      	ldrh	r2, [r3, #0]
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	835a      	strh	r2, [r3, #26]
 8008fb0:	e015      	b.n	8008fde <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008fb2:	7bfb      	ldrb	r3, [r7, #15]
 8008fb4:	687a      	ldr	r2, [r7, #4]
 8008fb6:	211a      	movs	r1, #26
 8008fb8:	fb01 f303 	mul.w	r3, r1, r3
 8008fbc:	4413      	add	r3, r2
 8008fbe:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008fc2:	781a      	ldrb	r2, [r3, #0]
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008fc8:	7bfb      	ldrb	r3, [r7, #15]
 8008fca:	687a      	ldr	r2, [r7, #4]
 8008fcc:	211a      	movs	r1, #26
 8008fce:	fb01 f303 	mul.w	r3, r1, r3
 8008fd2:	4413      	add	r3, r2
 8008fd4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008fd8:	881a      	ldrh	r2, [r3, #0]
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	7b9b      	ldrb	r3, [r3, #14]
 8008fe2:	4619      	mov	r1, r3
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f001 ffe8 	bl	800afba <USBH_AllocPipe>
 8008fea:	4603      	mov	r3, r0
 8008fec:	461a      	mov	r2, r3
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	7bdb      	ldrb	r3, [r3, #15]
 8008ff6:	4619      	mov	r1, r3
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f001 ffde 	bl	800afba <USBH_AllocPipe>
 8008ffe:	4603      	mov	r3, r0
 8009000:	461a      	mov	r2, r3
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	7b59      	ldrb	r1, [r3, #13]
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	7b98      	ldrb	r0, [r3, #14]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800901a:	68ba      	ldr	r2, [r7, #8]
 800901c:	8b12      	ldrh	r2, [r2, #24]
 800901e:	9202      	str	r2, [sp, #8]
 8009020:	2202      	movs	r2, #2
 8009022:	9201      	str	r2, [sp, #4]
 8009024:	9300      	str	r3, [sp, #0]
 8009026:	4623      	mov	r3, r4
 8009028:	4602      	mov	r2, r0
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f001 ff96 	bl	800af5c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	7b19      	ldrb	r1, [r3, #12]
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	7bd8      	ldrb	r0, [r3, #15]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009044:	68ba      	ldr	r2, [r7, #8]
 8009046:	8b52      	ldrh	r2, [r2, #26]
 8009048:	9202      	str	r2, [sp, #8]
 800904a:	2202      	movs	r2, #2
 800904c:	9201      	str	r2, [sp, #4]
 800904e:	9300      	str	r3, [sp, #0]
 8009050:	4623      	mov	r3, r4
 8009052:	4602      	mov	r2, r0
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f001 ff81 	bl	800af5c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	2200      	movs	r2, #0
 800905e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	7b5b      	ldrb	r3, [r3, #13]
 8009066:	2200      	movs	r2, #0
 8009068:	4619      	mov	r1, r3
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f004 fd1c 	bl	800daa8 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	7b1b      	ldrb	r3, [r3, #12]
 8009074:	2200      	movs	r2, #0
 8009076:	4619      	mov	r1, r3
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f004 fd15 	bl	800daa8 <USBH_LL_SetToggle>

  return USBH_OK;
 800907e:	2300      	movs	r3, #0
}
 8009080:	4618      	mov	r0, r3
 8009082:	3714      	adds	r7, #20
 8009084:	46bd      	mov	sp, r7
 8009086:	bd90      	pop	{r4, r7, pc}

08009088 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b084      	sub	sp, #16
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009096:	69db      	ldr	r3, [r3, #28]
 8009098:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	781b      	ldrb	r3, [r3, #0]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d00e      	beq.n	80090c0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	781b      	ldrb	r3, [r3, #0]
 80090a6:	4619      	mov	r1, r3
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f001 ff76 	bl	800af9a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	781b      	ldrb	r3, [r3, #0]
 80090b2:	4619      	mov	r1, r3
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f001 ffa1 	bl	800affc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2200      	movs	r2, #0
 80090be:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	7b1b      	ldrb	r3, [r3, #12]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d00e      	beq.n	80090e6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	7b1b      	ldrb	r3, [r3, #12]
 80090cc:	4619      	mov	r1, r3
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f001 ff63 	bl	800af9a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	7b1b      	ldrb	r3, [r3, #12]
 80090d8:	4619      	mov	r1, r3
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f001 ff8e 	bl	800affc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2200      	movs	r2, #0
 80090e4:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	7b5b      	ldrb	r3, [r3, #13]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d00e      	beq.n	800910c <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	7b5b      	ldrb	r3, [r3, #13]
 80090f2:	4619      	mov	r1, r3
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f001 ff50 	bl	800af9a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	7b5b      	ldrb	r3, [r3, #13]
 80090fe:	4619      	mov	r1, r3
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f001 ff7b 	bl	800affc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2200      	movs	r2, #0
 800910a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009112:	69db      	ldr	r3, [r3, #28]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d00b      	beq.n	8009130 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800911e:	69db      	ldr	r3, [r3, #28]
 8009120:	4618      	mov	r0, r3
 8009122:	f004 fd79 	bl	800dc18 <free>
    phost->pActiveClass->pData = 0U;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800912c:	2200      	movs	r2, #0
 800912e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009130:	2300      	movs	r3, #0
}
 8009132:	4618      	mov	r0, r3
 8009134:	3710      	adds	r7, #16
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}

0800913a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800913a:	b580      	push	{r7, lr}
 800913c:	b084      	sub	sp, #16
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009148:	69db      	ldr	r3, [r3, #28]
 800914a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	3340      	adds	r3, #64	; 0x40
 8009150:	4619      	mov	r1, r3
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f000 f8b1 	bl	80092ba <GetLineCoding>
 8009158:	4603      	mov	r3, r0
 800915a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800915c:	7afb      	ldrb	r3, [r7, #11]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d105      	bne.n	800916e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009168:	2102      	movs	r1, #2
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800916e:	7afb      	ldrb	r3, [r7, #11]
}
 8009170:	4618      	mov	r0, r3
 8009172:	3710      	adds	r7, #16
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b084      	sub	sp, #16
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009180:	2301      	movs	r3, #1
 8009182:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009184:	2300      	movs	r3, #0
 8009186:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800918e:	69db      	ldr	r3, [r3, #28]
 8009190:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009198:	2b04      	cmp	r3, #4
 800919a:	d877      	bhi.n	800928c <USBH_CDC_Process+0x114>
 800919c:	a201      	add	r2, pc, #4	; (adr r2, 80091a4 <USBH_CDC_Process+0x2c>)
 800919e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091a2:	bf00      	nop
 80091a4:	080091b9 	.word	0x080091b9
 80091a8:	080091bf 	.word	0x080091bf
 80091ac:	080091ef 	.word	0x080091ef
 80091b0:	08009263 	.word	0x08009263
 80091b4:	08009271 	.word	0x08009271
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80091b8:	2300      	movs	r3, #0
 80091ba:	73fb      	strb	r3, [r7, #15]
      break;
 80091bc:	e06d      	b.n	800929a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091c2:	4619      	mov	r1, r3
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f000 f897 	bl	80092f8 <SetLineCoding>
 80091ca:	4603      	mov	r3, r0
 80091cc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80091ce:	7bbb      	ldrb	r3, [r7, #14]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d104      	bne.n	80091de <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	2202      	movs	r2, #2
 80091d8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80091dc:	e058      	b.n	8009290 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80091de:	7bbb      	ldrb	r3, [r7, #14]
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	d055      	beq.n	8009290 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	2204      	movs	r2, #4
 80091e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80091ec:	e050      	b.n	8009290 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	3340      	adds	r3, #64	; 0x40
 80091f2:	4619      	mov	r1, r3
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f000 f860 	bl	80092ba <GetLineCoding>
 80091fa:	4603      	mov	r3, r0
 80091fc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80091fe:	7bbb      	ldrb	r3, [r7, #14]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d126      	bne.n	8009252 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	2200      	movs	r2, #0
 8009208:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009216:	791b      	ldrb	r3, [r3, #4]
 8009218:	429a      	cmp	r2, r3
 800921a:	d13b      	bne.n	8009294 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009226:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009228:	429a      	cmp	r2, r3
 800922a:	d133      	bne.n	8009294 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009236:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009238:	429a      	cmp	r2, r3
 800923a:	d12b      	bne.n	8009294 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009244:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009246:	429a      	cmp	r2, r3
 8009248:	d124      	bne.n	8009294 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f000 f982 	bl	8009554 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009250:	e020      	b.n	8009294 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009252:	7bbb      	ldrb	r3, [r7, #14]
 8009254:	2b01      	cmp	r3, #1
 8009256:	d01d      	beq.n	8009294 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	2204      	movs	r2, #4
 800925c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009260:	e018      	b.n	8009294 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f000 f867 	bl	8009336 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f000 f8f6 	bl	800945a <CDC_ProcessReception>
      break;
 800926e:	e014      	b.n	800929a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009270:	2100      	movs	r1, #0
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f001 f951 	bl	800a51a <USBH_ClrFeature>
 8009278:	4603      	mov	r3, r0
 800927a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800927c:	7bbb      	ldrb	r3, [r7, #14]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d10a      	bne.n	8009298 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	2200      	movs	r2, #0
 8009286:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800928a:	e005      	b.n	8009298 <USBH_CDC_Process+0x120>

    default:
      break;
 800928c:	bf00      	nop
 800928e:	e004      	b.n	800929a <USBH_CDC_Process+0x122>
      break;
 8009290:	bf00      	nop
 8009292:	e002      	b.n	800929a <USBH_CDC_Process+0x122>
      break;
 8009294:	bf00      	nop
 8009296:	e000      	b.n	800929a <USBH_CDC_Process+0x122>
      break;
 8009298:	bf00      	nop

  }

  return status;
 800929a:	7bfb      	ldrb	r3, [r7, #15]
}
 800929c:	4618      	mov	r0, r3
 800929e:	3710      	adds	r7, #16
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b083      	sub	sp, #12
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80092ac:	2300      	movs	r3, #0
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	370c      	adds	r7, #12
 80092b2:	46bd      	mov	sp, r7
 80092b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b8:	4770      	bx	lr

080092ba <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80092ba:	b580      	push	{r7, lr}
 80092bc:	b082      	sub	sp, #8
 80092be:	af00      	add	r7, sp, #0
 80092c0:	6078      	str	r0, [r7, #4]
 80092c2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	22a1      	movs	r2, #161	; 0xa1
 80092c8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2221      	movs	r2, #33	; 0x21
 80092ce:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2200      	movs	r2, #0
 80092d4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2200      	movs	r2, #0
 80092da:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2207      	movs	r2, #7
 80092e0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	2207      	movs	r2, #7
 80092e6:	4619      	mov	r1, r3
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f001 faf6 	bl	800a8da <USBH_CtlReq>
 80092ee:	4603      	mov	r3, r0
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3708      	adds	r7, #8
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b082      	sub	sp, #8
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2221      	movs	r2, #33	; 0x21
 8009306:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2220      	movs	r2, #32
 800930c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2200      	movs	r2, #0
 8009312:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2200      	movs	r2, #0
 8009318:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2207      	movs	r2, #7
 800931e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	2207      	movs	r2, #7
 8009324:	4619      	mov	r1, r3
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f001 fad7 	bl	800a8da <USBH_CtlReq>
 800932c:	4603      	mov	r3, r0
}
 800932e:	4618      	mov	r0, r3
 8009330:	3708      	adds	r7, #8
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}

08009336 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8009336:	b580      	push	{r7, lr}
 8009338:	b086      	sub	sp, #24
 800933a:	af02      	add	r7, sp, #8
 800933c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009344:	69db      	ldr	r3, [r3, #28]
 8009346:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009348:	2300      	movs	r3, #0
 800934a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8009352:	2b01      	cmp	r3, #1
 8009354:	d002      	beq.n	800935c <CDC_ProcessTransmission+0x26>
 8009356:	2b02      	cmp	r3, #2
 8009358:	d023      	beq.n	80093a2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800935a:	e07a      	b.n	8009452 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009360:	68fa      	ldr	r2, [r7, #12]
 8009362:	8b12      	ldrh	r2, [r2, #24]
 8009364:	4293      	cmp	r3, r2
 8009366:	d90b      	bls.n	8009380 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	69d9      	ldr	r1, [r3, #28]
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	8b1a      	ldrh	r2, [r3, #24]
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	7b5b      	ldrb	r3, [r3, #13]
 8009374:	2001      	movs	r0, #1
 8009376:	9000      	str	r0, [sp, #0]
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f001 fdac 	bl	800aed6 <USBH_BulkSendData>
 800937e:	e00b      	b.n	8009398 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8009388:	b29a      	uxth	r2, r3
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	7b5b      	ldrb	r3, [r3, #13]
 800938e:	2001      	movs	r0, #1
 8009390:	9000      	str	r0, [sp, #0]
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f001 fd9f 	bl	800aed6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2202      	movs	r2, #2
 800939c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80093a0:	e057      	b.n	8009452 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	7b5b      	ldrb	r3, [r3, #13]
 80093a6:	4619      	mov	r1, r3
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f004 fb53 	bl	800da54 <USBH_LL_GetURBState>
 80093ae:	4603      	mov	r3, r0
 80093b0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80093b2:	7afb      	ldrb	r3, [r7, #11]
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	d136      	bne.n	8009426 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093bc:	68fa      	ldr	r2, [r7, #12]
 80093be:	8b12      	ldrh	r2, [r2, #24]
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d90e      	bls.n	80093e2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093c8:	68fa      	ldr	r2, [r7, #12]
 80093ca:	8b12      	ldrh	r2, [r2, #24]
 80093cc:	1a9a      	subs	r2, r3, r2
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	69db      	ldr	r3, [r3, #28]
 80093d6:	68fa      	ldr	r2, [r7, #12]
 80093d8:	8b12      	ldrh	r2, [r2, #24]
 80093da:	441a      	add	r2, r3
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	61da      	str	r2, [r3, #28]
 80093e0:	e002      	b.n	80093e8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2200      	movs	r2, #0
 80093e6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d004      	beq.n	80093fa <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	2201      	movs	r2, #1
 80093f4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 80093f8:	e006      	b.n	8009408 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2200      	movs	r2, #0
 80093fe:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 f892 	bl	800952c <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2204      	movs	r2, #4
 800940c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800941c:	2200      	movs	r2, #0
 800941e:	4619      	mov	r1, r3
 8009420:	f001 fee8 	bl	800b1f4 <osMessagePut>
      break;
 8009424:	e014      	b.n	8009450 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8009426:	7afb      	ldrb	r3, [r7, #11]
 8009428:	2b02      	cmp	r3, #2
 800942a:	d111      	bne.n	8009450 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2201      	movs	r2, #1
 8009430:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2204      	movs	r2, #4
 8009438:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009448:	2200      	movs	r2, #0
 800944a:	4619      	mov	r1, r3
 800944c:	f001 fed2 	bl	800b1f4 <osMessagePut>
      break;
 8009450:	bf00      	nop
  }
}
 8009452:	bf00      	nop
 8009454:	3710      	adds	r7, #16
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}

0800945a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800945a:	b580      	push	{r7, lr}
 800945c:	b086      	sub	sp, #24
 800945e:	af00      	add	r7, sp, #0
 8009460:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009468:	69db      	ldr	r3, [r3, #28]
 800946a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800946c:	2300      	movs	r3, #0
 800946e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8009476:	2b03      	cmp	r3, #3
 8009478:	d002      	beq.n	8009480 <CDC_ProcessReception+0x26>
 800947a:	2b04      	cmp	r3, #4
 800947c:	d00e      	beq.n	800949c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800947e:	e051      	b.n	8009524 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	6a19      	ldr	r1, [r3, #32]
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	8b5a      	ldrh	r2, [r3, #26]
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	7b1b      	ldrb	r3, [r3, #12]
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f001 fd47 	bl	800af20 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	2204      	movs	r2, #4
 8009496:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800949a:	e043      	b.n	8009524 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	7b1b      	ldrb	r3, [r3, #12]
 80094a0:	4619      	mov	r1, r3
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f004 fad6 	bl	800da54 <USBH_LL_GetURBState>
 80094a8:	4603      	mov	r3, r0
 80094aa:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80094ac:	7cfb      	ldrb	r3, [r7, #19]
 80094ae:	2b01      	cmp	r3, #1
 80094b0:	d137      	bne.n	8009522 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	7b1b      	ldrb	r3, [r3, #12]
 80094b6:	4619      	mov	r1, r3
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f004 fa39 	bl	800d930 <USBH_LL_GetLastXferSize>
 80094be:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80094c0:	697b      	ldr	r3, [r7, #20]
 80094c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094c4:	68fa      	ldr	r2, [r7, #12]
 80094c6:	429a      	cmp	r2, r3
 80094c8:	d016      	beq.n	80094f8 <CDC_ProcessReception+0x9e>
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	8b5b      	ldrh	r3, [r3, #26]
 80094ce:	461a      	mov	r2, r3
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d910      	bls.n	80094f8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	1ad2      	subs	r2, r2, r3
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	6a1a      	ldr	r2, [r3, #32]
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	441a      	add	r2, r3
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	2203      	movs	r2, #3
 80094f2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 80094f6:	e006      	b.n	8009506 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	2200      	movs	r2, #0
 80094fc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f000 f81d 	bl	8009540 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2204      	movs	r2, #4
 800950a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800951a:	2200      	movs	r2, #0
 800951c:	4619      	mov	r1, r3
 800951e:	f001 fe69 	bl	800b1f4 <osMessagePut>
      break;
 8009522:	bf00      	nop
  }
}
 8009524:	bf00      	nop
 8009526:	3718      	adds	r7, #24
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}

0800952c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800952c:	b480      	push	{r7}
 800952e:	b083      	sub	sp, #12
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009534:	bf00      	nop
 8009536:	370c      	adds	r7, #12
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr

08009540 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009540:	b480      	push	{r7}
 8009542:	b083      	sub	sp, #12
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009548:	bf00      	nop
 800954a:	370c      	adds	r7, #12
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr

08009554 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009554:	b480      	push	{r7}
 8009556:	b083      	sub	sp, #12
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800955c:	bf00      	nop
 800955e:	370c      	adds	r7, #12
 8009560:	46bd      	mov	sp, r7
 8009562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009566:	4770      	bx	lr

08009568 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8009568:	b5b0      	push	{r4, r5, r7, lr}
 800956a:	b090      	sub	sp, #64	; 0x40
 800956c:	af00      	add	r7, sp, #0
 800956e:	60f8      	str	r0, [r7, #12]
 8009570:	60b9      	str	r1, [r7, #8]
 8009572:	4613      	mov	r3, r2
 8009574:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d101      	bne.n	8009580 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800957c:	2302      	movs	r3, #2
 800957e:	e04d      	b.n	800961c <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	79fa      	ldrb	r2, [r7, #7]
 8009584:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2200      	movs	r2, #0
 800958c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2200      	movs	r2, #0
 8009594:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8009598:	68f8      	ldr	r0, [r7, #12]
 800959a:	f000 f847 	bl	800962c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	2200      	movs	r2, #0
 80095a2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	2200      	movs	r2, #0
 80095aa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	2200      	movs	r2, #0
 80095b2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2200      	movs	r2, #0
 80095ba:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d003      	beq.n	80095cc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	68ba      	ldr	r2, [r7, #8]
 80095c8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 80095cc:	4b15      	ldr	r3, [pc, #84]	; (8009624 <USBH_Init+0xbc>)
 80095ce:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80095d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80095d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 80095d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80095dc:	2100      	movs	r1, #0
 80095de:	4618      	mov	r0, r3
 80095e0:	f001 fddf 	bl	800b1a2 <osMessageCreate>
 80095e4:	4602      	mov	r2, r0
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 80095ec:	4b0e      	ldr	r3, [pc, #56]	; (8009628 <USBH_Init+0xc0>)
 80095ee:	f107 0414 	add.w	r4, r7, #20
 80095f2:	461d      	mov	r5, r3
 80095f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80095f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80095f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80095fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8009600:	f107 0314 	add.w	r3, r7, #20
 8009604:	68f9      	ldr	r1, [r7, #12]
 8009606:	4618      	mov	r0, r3
 8009608:	f001 fd6b 	bl	800b0e2 <osThreadCreate>
 800960c:	4602      	mov	r2, r0
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8009614:	68f8      	ldr	r0, [r7, #12]
 8009616:	f004 f8d7 	bl	800d7c8 <USBH_LL_Init>

  return USBH_OK;
 800961a:	2300      	movs	r3, #0
}
 800961c:	4618      	mov	r0, r3
 800961e:	3740      	adds	r7, #64	; 0x40
 8009620:	46bd      	mov	sp, r7
 8009622:	bdb0      	pop	{r4, r5, r7, pc}
 8009624:	0800e650 	.word	0x0800e650
 8009628:	0800e660 	.word	0x0800e660

0800962c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800962c:	b480      	push	{r7}
 800962e:	b085      	sub	sp, #20
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009634:	2300      	movs	r3, #0
 8009636:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009638:	2300      	movs	r3, #0
 800963a:	60fb      	str	r3, [r7, #12]
 800963c:	e009      	b.n	8009652 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800963e:	687a      	ldr	r2, [r7, #4]
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	33e0      	adds	r3, #224	; 0xe0
 8009644:	009b      	lsls	r3, r3, #2
 8009646:	4413      	add	r3, r2
 8009648:	2200      	movs	r2, #0
 800964a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	3301      	adds	r3, #1
 8009650:	60fb      	str	r3, [r7, #12]
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2b0e      	cmp	r3, #14
 8009656:	d9f2      	bls.n	800963e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009658:	2300      	movs	r3, #0
 800965a:	60fb      	str	r3, [r7, #12]
 800965c:	e009      	b.n	8009672 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800965e:	687a      	ldr	r2, [r7, #4]
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	4413      	add	r3, r2
 8009664:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009668:	2200      	movs	r2, #0
 800966a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	3301      	adds	r3, #1
 8009670:	60fb      	str	r3, [r7, #12]
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009678:	d3f1      	bcc.n	800965e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2200      	movs	r2, #0
 800967e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2200      	movs	r2, #0
 8009684:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2201      	movs	r2, #1
 800968a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2200      	movs	r2, #0
 8009690:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2201      	movs	r2, #1
 8009698:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2240      	movs	r2, #64	; 0x40
 800969e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2200      	movs	r2, #0
 80096a4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2200      	movs	r2, #0
 80096aa:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2201      	movs	r2, #1
 80096b2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2200      	movs	r2, #0
 80096ba:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2200      	movs	r2, #0
 80096c2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80096c6:	2300      	movs	r3, #0
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3714      	adds	r7, #20
 80096cc:	46bd      	mov	sp, r7
 80096ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d2:	4770      	bx	lr

080096d4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b085      	sub	sp, #20
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
 80096dc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80096de:	2300      	movs	r3, #0
 80096e0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d016      	beq.n	8009716 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d10e      	bne.n	8009710 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80096f8:	1c59      	adds	r1, r3, #1
 80096fa:	687a      	ldr	r2, [r7, #4]
 80096fc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8009700:	687a      	ldr	r2, [r7, #4]
 8009702:	33de      	adds	r3, #222	; 0xde
 8009704:	6839      	ldr	r1, [r7, #0]
 8009706:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800970a:	2300      	movs	r3, #0
 800970c:	73fb      	strb	r3, [r7, #15]
 800970e:	e004      	b.n	800971a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009710:	2302      	movs	r3, #2
 8009712:	73fb      	strb	r3, [r7, #15]
 8009714:	e001      	b.n	800971a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009716:	2302      	movs	r3, #2
 8009718:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800971a:	7bfb      	ldrb	r3, [r7, #15]
}
 800971c:	4618      	mov	r0, r3
 800971e:	3714      	adds	r7, #20
 8009720:	46bd      	mov	sp, r7
 8009722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009726:	4770      	bx	lr

08009728 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009728:	b480      	push	{r7}
 800972a:	b085      	sub	sp, #20
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	460b      	mov	r3, r1
 8009732:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009734:	2300      	movs	r3, #0
 8009736:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800973e:	78fa      	ldrb	r2, [r7, #3]
 8009740:	429a      	cmp	r2, r3
 8009742:	d204      	bcs.n	800974e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	78fa      	ldrb	r2, [r7, #3]
 8009748:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800974c:	e001      	b.n	8009752 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800974e:	2302      	movs	r3, #2
 8009750:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009752:	7bfb      	ldrb	r3, [r7, #15]
}
 8009754:	4618      	mov	r0, r3
 8009756:	3714      	adds	r7, #20
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr

08009760 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009760:	b480      	push	{r7}
 8009762:	b087      	sub	sp, #28
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
 8009768:	4608      	mov	r0, r1
 800976a:	4611      	mov	r1, r2
 800976c:	461a      	mov	r2, r3
 800976e:	4603      	mov	r3, r0
 8009770:	70fb      	strb	r3, [r7, #3]
 8009772:	460b      	mov	r3, r1
 8009774:	70bb      	strb	r3, [r7, #2]
 8009776:	4613      	mov	r3, r2
 8009778:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800977a:	2300      	movs	r3, #0
 800977c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800977e:	2300      	movs	r3, #0
 8009780:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009788:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800978a:	e025      	b.n	80097d8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800978c:	7dfb      	ldrb	r3, [r7, #23]
 800978e:	221a      	movs	r2, #26
 8009790:	fb02 f303 	mul.w	r3, r2, r3
 8009794:	3308      	adds	r3, #8
 8009796:	68fa      	ldr	r2, [r7, #12]
 8009798:	4413      	add	r3, r2
 800979a:	3302      	adds	r3, #2
 800979c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	795b      	ldrb	r3, [r3, #5]
 80097a2:	78fa      	ldrb	r2, [r7, #3]
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d002      	beq.n	80097ae <USBH_FindInterface+0x4e>
 80097a8:	78fb      	ldrb	r3, [r7, #3]
 80097aa:	2bff      	cmp	r3, #255	; 0xff
 80097ac:	d111      	bne.n	80097d2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80097ae:	693b      	ldr	r3, [r7, #16]
 80097b0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80097b2:	78ba      	ldrb	r2, [r7, #2]
 80097b4:	429a      	cmp	r2, r3
 80097b6:	d002      	beq.n	80097be <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80097b8:	78bb      	ldrb	r3, [r7, #2]
 80097ba:	2bff      	cmp	r3, #255	; 0xff
 80097bc:	d109      	bne.n	80097d2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80097c2:	787a      	ldrb	r2, [r7, #1]
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d002      	beq.n	80097ce <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80097c8:	787b      	ldrb	r3, [r7, #1]
 80097ca:	2bff      	cmp	r3, #255	; 0xff
 80097cc:	d101      	bne.n	80097d2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80097ce:	7dfb      	ldrb	r3, [r7, #23]
 80097d0:	e006      	b.n	80097e0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80097d2:	7dfb      	ldrb	r3, [r7, #23]
 80097d4:	3301      	adds	r3, #1
 80097d6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80097d8:	7dfb      	ldrb	r3, [r7, #23]
 80097da:	2b01      	cmp	r3, #1
 80097dc:	d9d6      	bls.n	800978c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80097de:	23ff      	movs	r3, #255	; 0xff
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	371c      	adds	r7, #28
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr

080097ec <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b082      	sub	sp, #8
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f004 f823 	bl	800d840 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80097fa:	2101      	movs	r1, #1
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f004 f93c 	bl	800da7a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009802:	2300      	movs	r3, #0
}
 8009804:	4618      	mov	r0, r3
 8009806:	3708      	adds	r7, #8
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}

0800980c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b088      	sub	sp, #32
 8009810:	af04      	add	r7, sp, #16
 8009812:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009814:	2302      	movs	r3, #2
 8009816:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009818:	2300      	movs	r3, #0
 800981a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8009822:	b2db      	uxtb	r3, r3
 8009824:	2b01      	cmp	r3, #1
 8009826:	d102      	bne.n	800982e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2203      	movs	r2, #3
 800982c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	781b      	ldrb	r3, [r3, #0]
 8009832:	b2db      	uxtb	r3, r3
 8009834:	2b0b      	cmp	r3, #11
 8009836:	f200 823c 	bhi.w	8009cb2 <USBH_Process+0x4a6>
 800983a:	a201      	add	r2, pc, #4	; (adr r2, 8009840 <USBH_Process+0x34>)
 800983c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009840:	08009871 	.word	0x08009871
 8009844:	080098bf 	.word	0x080098bf
 8009848:	08009943 	.word	0x08009943
 800984c:	08009c31 	.word	0x08009c31
 8009850:	08009cb3 	.word	0x08009cb3
 8009854:	08009a03 	.word	0x08009a03
 8009858:	08009bbb 	.word	0x08009bbb
 800985c:	08009a55 	.word	0x08009a55
 8009860:	08009a91 	.word	0x08009a91
 8009864:	08009acb 	.word	0x08009acb
 8009868:	08009b13 	.word	0x08009b13
 800986c:	08009c19 	.word	0x08009c19
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009876:	b2db      	uxtb	r3, r3
 8009878:	2b00      	cmp	r3, #0
 800987a:	f000 821c 	beq.w	8009cb6 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2201      	movs	r2, #1
 8009882:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009884:	20c8      	movs	r0, #200	; 0xc8
 8009886:	f004 f93f 	bl	800db08 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f004 f835 	bl	800d8fa <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2200      	movs	r2, #0
 8009894:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2200      	movs	r2, #0
 800989c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2201      	movs	r2, #1
 80098a4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80098b4:	2200      	movs	r2, #0
 80098b6:	4619      	mov	r1, r3
 80098b8:	f001 fc9c 	bl	800b1f4 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80098bc:	e1fb      	b.n	8009cb6 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80098c4:	2b01      	cmp	r3, #1
 80098c6:	d107      	bne.n	80098d8 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2200      	movs	r2, #0
 80098cc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2202      	movs	r2, #2
 80098d4:	701a      	strb	r2, [r3, #0]
 80098d6:	e025      	b.n	8009924 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80098de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80098e2:	d914      	bls.n	800990e <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80098ea:	3301      	adds	r3, #1
 80098ec:	b2da      	uxtb	r2, r3
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80098fa:	2b03      	cmp	r3, #3
 80098fc:	d903      	bls.n	8009906 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	220d      	movs	r2, #13
 8009902:	701a      	strb	r2, [r3, #0]
 8009904:	e00e      	b.n	8009924 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2200      	movs	r2, #0
 800990a:	701a      	strb	r2, [r3, #0]
 800990c:	e00a      	b.n	8009924 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009914:	f103 020a 	add.w	r2, r3, #10
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800991e:	200a      	movs	r0, #10
 8009920:	f004 f8f2 	bl	800db08 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2201      	movs	r2, #1
 8009928:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009938:	2200      	movs	r2, #0
 800993a:	4619      	mov	r1, r3
 800993c:	f001 fc5a 	bl	800b1f4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009940:	e1c0      	b.n	8009cc4 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009948:	2b00      	cmp	r3, #0
 800994a:	d005      	beq.n	8009958 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009952:	2104      	movs	r1, #4
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009958:	2064      	movs	r0, #100	; 0x64
 800995a:	f004 f8d5 	bl	800db08 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f003 ffa4 	bl	800d8ac <USBH_LL_GetSpeed>
 8009964:	4603      	mov	r3, r0
 8009966:	461a      	mov	r2, r3
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2205      	movs	r2, #5
 8009972:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009974:	2100      	movs	r1, #0
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f001 fb1f 	bl	800afba <USBH_AllocPipe>
 800997c:	4603      	mov	r3, r0
 800997e:	461a      	mov	r2, r3
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009984:	2180      	movs	r1, #128	; 0x80
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f001 fb17 	bl	800afba <USBH_AllocPipe>
 800998c:	4603      	mov	r3, r0
 800998e:	461a      	mov	r2, r3
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	7919      	ldrb	r1, [r3, #4]
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80099a4:	687a      	ldr	r2, [r7, #4]
 80099a6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80099a8:	b292      	uxth	r2, r2
 80099aa:	9202      	str	r2, [sp, #8]
 80099ac:	2200      	movs	r2, #0
 80099ae:	9201      	str	r2, [sp, #4]
 80099b0:	9300      	str	r3, [sp, #0]
 80099b2:	4603      	mov	r3, r0
 80099b4:	2280      	movs	r2, #128	; 0x80
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f001 fad0 	bl	800af5c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	7959      	ldrb	r1, [r3, #5]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80099cc:	687a      	ldr	r2, [r7, #4]
 80099ce:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80099d0:	b292      	uxth	r2, r2
 80099d2:	9202      	str	r2, [sp, #8]
 80099d4:	2200      	movs	r2, #0
 80099d6:	9201      	str	r2, [sp, #4]
 80099d8:	9300      	str	r3, [sp, #0]
 80099da:	4603      	mov	r3, r0
 80099dc:	2200      	movs	r2, #0
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f001 fabc 	bl	800af5c <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2201      	movs	r2, #1
 80099e8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80099f8:	2200      	movs	r2, #0
 80099fa:	4619      	mov	r1, r3
 80099fc:	f001 fbfa 	bl	800b1f4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009a00:	e160      	b.n	8009cc4 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f000 f964 	bl	8009cd0 <USBH_HandleEnum>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009a0c:	7bbb      	ldrb	r3, [r7, #14]
 8009a0e:	b2db      	uxtb	r3, r3
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	f040 8152 	bne.w	8009cba <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d103      	bne.n	8009a30 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2208      	movs	r2, #8
 8009a2c:	701a      	strb	r2, [r3, #0]
 8009a2e:	e002      	b.n	8009a36 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2207      	movs	r2, #7
 8009a34:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2205      	movs	r2, #5
 8009a3a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	4619      	mov	r1, r3
 8009a4e:	f001 fbd1 	bl	800b1f4 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009a52:	e132      	b.n	8009cba <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	f000 812f 	beq.w	8009cbe <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009a66:	2101      	movs	r1, #1
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2208      	movs	r2, #8
 8009a70:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2205      	movs	r2, #5
 8009a76:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009a86:	2200      	movs	r2, #0
 8009a88:	4619      	mov	r1, r3
 8009a8a:	f001 fbb3 	bl	800b1f4 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8009a8e:	e116      	b.n	8009cbe <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8009a96:	b29b      	uxth	r3, r3
 8009a98:	4619      	mov	r1, r3
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f000 fcf6 	bl	800a48c <USBH_SetCfg>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d102      	bne.n	8009aac <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2209      	movs	r2, #9
 8009aaa:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2201      	movs	r2, #1
 8009ab0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	4619      	mov	r1, r3
 8009ac4:	f001 fb96 	bl	800b1f4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009ac8:	e0fc      	b.n	8009cc4 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8009ad0:	f003 0320 	and.w	r3, r3, #32
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d00a      	beq.n	8009aee <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8009ad8:	2101      	movs	r1, #1
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f000 fcf9 	bl	800a4d2 <USBH_SetFeature>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d106      	bne.n	8009af4 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	220a      	movs	r2, #10
 8009aea:	701a      	strb	r2, [r3, #0]
 8009aec:	e002      	b.n	8009af4 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	220a      	movs	r2, #10
 8009af2:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2201      	movs	r2, #1
 8009af8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009b08:	2200      	movs	r2, #0
 8009b0a:	4619      	mov	r1, r3
 8009b0c:	f001 fb72 	bl	800b1f4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009b10:	e0d8      	b.n	8009cc4 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d03f      	beq.n	8009b9c <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009b24:	2300      	movs	r3, #0
 8009b26:	73fb      	strb	r3, [r7, #15]
 8009b28:	e016      	b.n	8009b58 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009b2a:	7bfa      	ldrb	r2, [r7, #15]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	32de      	adds	r2, #222	; 0xde
 8009b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b34:	791a      	ldrb	r2, [r3, #4]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8009b3c:	429a      	cmp	r2, r3
 8009b3e:	d108      	bne.n	8009b52 <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009b40:	7bfa      	ldrb	r2, [r7, #15]
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	32de      	adds	r2, #222	; 0xde
 8009b46:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8009b50:	e005      	b.n	8009b5e <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009b52:	7bfb      	ldrb	r3, [r7, #15]
 8009b54:	3301      	adds	r3, #1
 8009b56:	73fb      	strb	r3, [r7, #15]
 8009b58:	7bfb      	ldrb	r3, [r7, #15]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d0e5      	beq.n	8009b2a <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d016      	beq.n	8009b96 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b6e:	689b      	ldr	r3, [r3, #8]
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	4798      	blx	r3
 8009b74:	4603      	mov	r3, r0
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d109      	bne.n	8009b8e <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2206      	movs	r2, #6
 8009b7e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009b86:	2103      	movs	r1, #3
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	4798      	blx	r3
 8009b8c:	e006      	b.n	8009b9c <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	220d      	movs	r2, #13
 8009b92:	701a      	strb	r2, [r3, #0]
 8009b94:	e002      	b.n	8009b9c <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	220d      	movs	r2, #13
 8009b9a:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2205      	movs	r2, #5
 8009ba0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	4619      	mov	r1, r3
 8009bb4:	f001 fb1e 	bl	800b1f4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009bb8:	e084      	b.n	8009cc4 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d017      	beq.n	8009bf4 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009bca:	691b      	ldr	r3, [r3, #16]
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	4798      	blx	r3
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009bd4:	7bbb      	ldrb	r3, [r7, #14]
 8009bd6:	b2db      	uxtb	r3, r3
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d103      	bne.n	8009be4 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	220b      	movs	r2, #11
 8009be0:	701a      	strb	r2, [r3, #0]
 8009be2:	e00a      	b.n	8009bfa <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 8009be4:	7bbb      	ldrb	r3, [r7, #14]
 8009be6:	b2db      	uxtb	r3, r3
 8009be8:	2b02      	cmp	r3, #2
 8009bea:	d106      	bne.n	8009bfa <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	220d      	movs	r2, #13
 8009bf0:	701a      	strb	r2, [r3, #0]
 8009bf2:	e002      	b.n	8009bfa <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	220d      	movs	r2, #13
 8009bf8:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2205      	movs	r2, #5
 8009bfe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009c0e:	2200      	movs	r2, #0
 8009c10:	4619      	mov	r1, r3
 8009c12:	f001 faef 	bl	800b1f4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009c16:	e055      	b.n	8009cc4 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d04f      	beq.n	8009cc2 <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c28:	695b      	ldr	r3, [r3, #20]
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	4798      	blx	r3
      }
      break;
 8009c2e:	e048      	b.n	8009cc2 <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2200      	movs	r2, #0
 8009c34:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f7ff fcf7 	bl	800962c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d009      	beq.n	8009c5c <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c4e:	68db      	ldr	r3, [r3, #12]
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2200      	movs	r2, #0
 8009c58:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d005      	beq.n	8009c72 <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009c6c:	2105      	movs	r1, #5
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8009c78:	b2db      	uxtb	r3, r3
 8009c7a:	2b01      	cmp	r3, #1
 8009c7c:	d107      	bne.n	8009c8e <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2200      	movs	r2, #0
 8009c82:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f7ff fdb0 	bl	80097ec <USBH_Start>
 8009c8c:	e002      	b.n	8009c94 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f003 fdd6 	bl	800d840 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2201      	movs	r2, #1
 8009c98:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009ca8:	2200      	movs	r2, #0
 8009caa:	4619      	mov	r1, r3
 8009cac:	f001 faa2 	bl	800b1f4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009cb0:	e008      	b.n	8009cc4 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 8009cb2:	bf00      	nop
 8009cb4:	e006      	b.n	8009cc4 <USBH_Process+0x4b8>
      break;
 8009cb6:	bf00      	nop
 8009cb8:	e004      	b.n	8009cc4 <USBH_Process+0x4b8>
      break;
 8009cba:	bf00      	nop
 8009cbc:	e002      	b.n	8009cc4 <USBH_Process+0x4b8>
    break;
 8009cbe:	bf00      	nop
 8009cc0:	e000      	b.n	8009cc4 <USBH_Process+0x4b8>
      break;
 8009cc2:	bf00      	nop
  }
  return USBH_OK;
 8009cc4:	2300      	movs	r3, #0
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3710      	adds	r7, #16
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	bf00      	nop

08009cd0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b088      	sub	sp, #32
 8009cd4:	af04      	add	r7, sp, #16
 8009cd6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009cd8:	2301      	movs	r3, #1
 8009cda:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009cdc:	2301      	movs	r3, #1
 8009cde:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	785b      	ldrb	r3, [r3, #1]
 8009ce4:	2b07      	cmp	r3, #7
 8009ce6:	f200 8208 	bhi.w	800a0fa <USBH_HandleEnum+0x42a>
 8009cea:	a201      	add	r2, pc, #4	; (adr r2, 8009cf0 <USBH_HandleEnum+0x20>)
 8009cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cf0:	08009d11 	.word	0x08009d11
 8009cf4:	08009dcf 	.word	0x08009dcf
 8009cf8:	08009e39 	.word	0x08009e39
 8009cfc:	08009ec7 	.word	0x08009ec7
 8009d00:	08009f31 	.word	0x08009f31
 8009d04:	08009fa1 	.word	0x08009fa1
 8009d08:	0800a03d 	.word	0x0800a03d
 8009d0c:	0800a0bb 	.word	0x0800a0bb
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009d10:	2108      	movs	r1, #8
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f000 faea 	bl	800a2ec <USBH_Get_DevDesc>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009d1c:	7bbb      	ldrb	r3, [r7, #14]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d130      	bne.n	8009d84 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2201      	movs	r2, #1
 8009d30:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	7919      	ldrb	r1, [r3, #4]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009d42:	687a      	ldr	r2, [r7, #4]
 8009d44:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009d46:	b292      	uxth	r2, r2
 8009d48:	9202      	str	r2, [sp, #8]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	9201      	str	r2, [sp, #4]
 8009d4e:	9300      	str	r3, [sp, #0]
 8009d50:	4603      	mov	r3, r0
 8009d52:	2280      	movs	r2, #128	; 0x80
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f001 f901 	bl	800af5c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	7959      	ldrb	r1, [r3, #5]
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009d6a:	687a      	ldr	r2, [r7, #4]
 8009d6c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009d6e:	b292      	uxth	r2, r2
 8009d70:	9202      	str	r2, [sp, #8]
 8009d72:	2200      	movs	r2, #0
 8009d74:	9201      	str	r2, [sp, #4]
 8009d76:	9300      	str	r3, [sp, #0]
 8009d78:	4603      	mov	r3, r0
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f001 f8ed 	bl	800af5c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009d82:	e1bc      	b.n	800a0fe <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009d84:	7bbb      	ldrb	r3, [r7, #14]
 8009d86:	2b03      	cmp	r3, #3
 8009d88:	f040 81b9 	bne.w	800a0fe <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009d92:	3301      	adds	r3, #1
 8009d94:	b2da      	uxtb	r2, r3
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009da2:	2b03      	cmp	r3, #3
 8009da4:	d903      	bls.n	8009dae <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	220d      	movs	r2, #13
 8009daa:	701a      	strb	r2, [r3, #0]
      break;
 8009dac:	e1a7      	b.n	800a0fe <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	795b      	ldrb	r3, [r3, #5]
 8009db2:	4619      	mov	r1, r3
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f001 f921 	bl	800affc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	791b      	ldrb	r3, [r3, #4]
 8009dbe:	4619      	mov	r1, r3
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f001 f91b 	bl	800affc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	701a      	strb	r2, [r3, #0]
      break;
 8009dcc:	e197      	b.n	800a0fe <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009dce:	2112      	movs	r1, #18
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f000 fa8b 	bl	800a2ec <USBH_Get_DevDesc>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009dda:	7bbb      	ldrb	r3, [r7, #14]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d103      	bne.n	8009de8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2202      	movs	r2, #2
 8009de4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009de6:	e18c      	b.n	800a102 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009de8:	7bbb      	ldrb	r3, [r7, #14]
 8009dea:	2b03      	cmp	r3, #3
 8009dec:	f040 8189 	bne.w	800a102 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009df6:	3301      	adds	r3, #1
 8009df8:	b2da      	uxtb	r2, r3
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009e06:	2b03      	cmp	r3, #3
 8009e08:	d903      	bls.n	8009e12 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	220d      	movs	r2, #13
 8009e0e:	701a      	strb	r2, [r3, #0]
      break;
 8009e10:	e177      	b.n	800a102 <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	795b      	ldrb	r3, [r3, #5]
 8009e16:	4619      	mov	r1, r3
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f001 f8ef 	bl	800affc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	791b      	ldrb	r3, [r3, #4]
 8009e22:	4619      	mov	r1, r3
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f001 f8e9 	bl	800affc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2200      	movs	r2, #0
 8009e34:	701a      	strb	r2, [r3, #0]
      break;
 8009e36:	e164      	b.n	800a102 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009e38:	2101      	movs	r1, #1
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f000 fb02 	bl	800a444 <USBH_SetAddress>
 8009e40:	4603      	mov	r3, r0
 8009e42:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009e44:	7bbb      	ldrb	r3, [r7, #14]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d132      	bne.n	8009eb0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8009e4a:	2002      	movs	r0, #2
 8009e4c:	f003 fe5c 	bl	800db08 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2201      	movs	r2, #1
 8009e54:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2203      	movs	r2, #3
 8009e5c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	7919      	ldrb	r1, [r3, #4]
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009e6e:	687a      	ldr	r2, [r7, #4]
 8009e70:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009e72:	b292      	uxth	r2, r2
 8009e74:	9202      	str	r2, [sp, #8]
 8009e76:	2200      	movs	r2, #0
 8009e78:	9201      	str	r2, [sp, #4]
 8009e7a:	9300      	str	r3, [sp, #0]
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	2280      	movs	r2, #128	; 0x80
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f001 f86b 	bl	800af5c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	7959      	ldrb	r1, [r3, #5]
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009e96:	687a      	ldr	r2, [r7, #4]
 8009e98:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009e9a:	b292      	uxth	r2, r2
 8009e9c:	9202      	str	r2, [sp, #8]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	9201      	str	r2, [sp, #4]
 8009ea2:	9300      	str	r3, [sp, #0]
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f001 f857 	bl	800af5c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009eae:	e12a      	b.n	800a106 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009eb0:	7bbb      	ldrb	r3, [r7, #14]
 8009eb2:	2b03      	cmp	r3, #3
 8009eb4:	f040 8127 	bne.w	800a106 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	220d      	movs	r2, #13
 8009ebc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	705a      	strb	r2, [r3, #1]
      break;
 8009ec4:	e11f      	b.n	800a106 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009ec6:	2109      	movs	r1, #9
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f000 fa37 	bl	800a33c <USBH_Get_CfgDesc>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009ed2:	7bbb      	ldrb	r3, [r7, #14]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d103      	bne.n	8009ee0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2204      	movs	r2, #4
 8009edc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009ede:	e114      	b.n	800a10a <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009ee0:	7bbb      	ldrb	r3, [r7, #14]
 8009ee2:	2b03      	cmp	r3, #3
 8009ee4:	f040 8111 	bne.w	800a10a <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009eee:	3301      	adds	r3, #1
 8009ef0:	b2da      	uxtb	r2, r3
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009efe:	2b03      	cmp	r3, #3
 8009f00:	d903      	bls.n	8009f0a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	220d      	movs	r2, #13
 8009f06:	701a      	strb	r2, [r3, #0]
      break;
 8009f08:	e0ff      	b.n	800a10a <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	795b      	ldrb	r3, [r3, #5]
 8009f0e:	4619      	mov	r1, r3
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f001 f873 	bl	800affc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	791b      	ldrb	r3, [r3, #4]
 8009f1a:	4619      	mov	r1, r3
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f001 f86d 	bl	800affc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2200      	movs	r2, #0
 8009f26:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	701a      	strb	r2, [r3, #0]
      break;
 8009f2e:	e0ec      	b.n	800a10a <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8009f36:	4619      	mov	r1, r3
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f000 f9ff 	bl	800a33c <USBH_Get_CfgDesc>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009f42:	7bbb      	ldrb	r3, [r7, #14]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d103      	bne.n	8009f50 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2205      	movs	r2, #5
 8009f4c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009f4e:	e0de      	b.n	800a10e <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009f50:	7bbb      	ldrb	r3, [r7, #14]
 8009f52:	2b03      	cmp	r3, #3
 8009f54:	f040 80db 	bne.w	800a10e <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009f5e:	3301      	adds	r3, #1
 8009f60:	b2da      	uxtb	r2, r3
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009f6e:	2b03      	cmp	r3, #3
 8009f70:	d903      	bls.n	8009f7a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	220d      	movs	r2, #13
 8009f76:	701a      	strb	r2, [r3, #0]
      break;
 8009f78:	e0c9      	b.n	800a10e <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	795b      	ldrb	r3, [r3, #5]
 8009f7e:	4619      	mov	r1, r3
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f001 f83b 	bl	800affc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	791b      	ldrb	r3, [r3, #4]
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f001 f835 	bl	800affc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2200      	movs	r2, #0
 8009f96:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	701a      	strb	r2, [r3, #0]
      break;
 8009f9e:	e0b6      	b.n	800a10e <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d036      	beq.n	800a018 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009fb6:	23ff      	movs	r3, #255	; 0xff
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f000 f9e3 	bl	800a384 <USBH_Get_StringDesc>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009fc2:	7bbb      	ldrb	r3, [r7, #14]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d111      	bne.n	8009fec <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2206      	movs	r2, #6
 8009fcc:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2205      	movs	r2, #5
 8009fd2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	4619      	mov	r1, r3
 8009fe6:	f001 f905 	bl	800b1f4 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009fea:	e092      	b.n	800a112 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009fec:	7bbb      	ldrb	r3, [r7, #14]
 8009fee:	2b03      	cmp	r3, #3
 8009ff0:	f040 808f 	bne.w	800a112 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2206      	movs	r2, #6
 8009ff8:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2205      	movs	r2, #5
 8009ffe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a00e:	2200      	movs	r2, #0
 800a010:	4619      	mov	r1, r3
 800a012:	f001 f8ef 	bl	800b1f4 <osMessagePut>
      break;
 800a016:	e07c      	b.n	800a112 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2206      	movs	r2, #6
 800a01c:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2205      	movs	r2, #5
 800a022:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a032:	2200      	movs	r2, #0
 800a034:	4619      	mov	r1, r3
 800a036:	f001 f8dd 	bl	800b1f4 <osMessagePut>
      break;
 800a03a:	e06a      	b.n	800a112 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800a042:	2b00      	cmp	r3, #0
 800a044:	d027      	beq.n	800a096 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a052:	23ff      	movs	r3, #255	; 0xff
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f000 f995 	bl	800a384 <USBH_Get_StringDesc>
 800a05a:	4603      	mov	r3, r0
 800a05c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a05e:	7bbb      	ldrb	r3, [r7, #14]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d103      	bne.n	800a06c <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2207      	movs	r2, #7
 800a068:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a06a:	e054      	b.n	800a116 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a06c:	7bbb      	ldrb	r3, [r7, #14]
 800a06e:	2b03      	cmp	r3, #3
 800a070:	d151      	bne.n	800a116 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2207      	movs	r2, #7
 800a076:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2205      	movs	r2, #5
 800a07c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a08c:	2200      	movs	r2, #0
 800a08e:	4619      	mov	r1, r3
 800a090:	f001 f8b0 	bl	800b1f4 <osMessagePut>
      break;
 800a094:	e03f      	b.n	800a116 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2207      	movs	r2, #7
 800a09a:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2205      	movs	r2, #5
 800a0a0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	4619      	mov	r1, r3
 800a0b4:	f001 f89e 	bl	800b1f4 <osMessagePut>
      break;
 800a0b8:	e02d      	b.n	800a116 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d017      	beq.n	800a0f4 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a0d0:	23ff      	movs	r3, #255	; 0xff
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f000 f956 	bl	800a384 <USBH_Get_StringDesc>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a0dc:	7bbb      	ldrb	r3, [r7, #14]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d102      	bne.n	800a0e8 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a0e6:	e018      	b.n	800a11a <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a0e8:	7bbb      	ldrb	r3, [r7, #14]
 800a0ea:	2b03      	cmp	r3, #3
 800a0ec:	d115      	bne.n	800a11a <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	73fb      	strb	r3, [r7, #15]
      break;
 800a0f2:	e012      	b.n	800a11a <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	73fb      	strb	r3, [r7, #15]
      break;
 800a0f8:	e00f      	b.n	800a11a <USBH_HandleEnum+0x44a>

    default:
      break;
 800a0fa:	bf00      	nop
 800a0fc:	e00e      	b.n	800a11c <USBH_HandleEnum+0x44c>
      break;
 800a0fe:	bf00      	nop
 800a100:	e00c      	b.n	800a11c <USBH_HandleEnum+0x44c>
      break;
 800a102:	bf00      	nop
 800a104:	e00a      	b.n	800a11c <USBH_HandleEnum+0x44c>
      break;
 800a106:	bf00      	nop
 800a108:	e008      	b.n	800a11c <USBH_HandleEnum+0x44c>
      break;
 800a10a:	bf00      	nop
 800a10c:	e006      	b.n	800a11c <USBH_HandleEnum+0x44c>
      break;
 800a10e:	bf00      	nop
 800a110:	e004      	b.n	800a11c <USBH_HandleEnum+0x44c>
      break;
 800a112:	bf00      	nop
 800a114:	e002      	b.n	800a11c <USBH_HandleEnum+0x44c>
      break;
 800a116:	bf00      	nop
 800a118:	e000      	b.n	800a11c <USBH_HandleEnum+0x44c>
      break;
 800a11a:	bf00      	nop
  }
  return Status;
 800a11c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3710      	adds	r7, #16
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}
 800a126:	bf00      	nop

0800a128 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a128:	b480      	push	{r7}
 800a12a:	b083      	sub	sp, #12
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
 800a130:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	683a      	ldr	r2, [r7, #0]
 800a136:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800a13a:	bf00      	nop
 800a13c:	370c      	adds	r7, #12
 800a13e:	46bd      	mov	sp, r7
 800a140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a144:	4770      	bx	lr

0800a146 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a146:	b580      	push	{r7, lr}
 800a148:	b082      	sub	sp, #8
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a154:	1c5a      	adds	r2, r3, #1
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f000 f804 	bl	800a16a <USBH_HandleSof>
}
 800a162:	bf00      	nop
 800a164:	3708      	adds	r7, #8
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}

0800a16a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a16a:	b580      	push	{r7, lr}
 800a16c:	b082      	sub	sp, #8
 800a16e:	af00      	add	r7, sp, #0
 800a170:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	781b      	ldrb	r3, [r3, #0]
 800a176:	b2db      	uxtb	r3, r3
 800a178:	2b0b      	cmp	r3, #11
 800a17a:	d10a      	bne.n	800a192 <USBH_HandleSof+0x28>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a182:	2b00      	cmp	r3, #0
 800a184:	d005      	beq.n	800a192 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a18c:	699b      	ldr	r3, [r3, #24]
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	4798      	blx	r3
  }
}
 800a192:	bf00      	nop
 800a194:	3708      	adds	r7, #8
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}

0800a19a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a19a:	b580      	push	{r7, lr}
 800a19c:	b082      	sub	sp, #8
 800a19e:	af00      	add	r7, sp, #0
 800a1a0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2201      	movs	r2, #1
 800a1a6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2201      	movs	r2, #1
 800a1ae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a1be:	2200      	movs	r2, #0
 800a1c0:	4619      	mov	r1, r3
 800a1c2:	f001 f817 	bl	800b1f4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800a1c6:	bf00      	nop
}
 800a1c8:	3708      	adds	r7, #8
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}

0800a1ce <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a1ce:	b480      	push	{r7}
 800a1d0:	b083      	sub	sp, #12
 800a1d2:	af00      	add	r7, sp, #0
 800a1d4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800a1de:	bf00      	nop
}
 800a1e0:	370c      	adds	r7, #12
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e8:	4770      	bx	lr

0800a1ea <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a1ea:	b580      	push	{r7, lr}
 800a1ec:	b082      	sub	sp, #8
 800a1ee:	af00      	add	r7, sp, #0
 800a1f0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2201      	movs	r2, #1
 800a1f6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2200      	movs	r2, #0
 800a206:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2201      	movs	r2, #1
 800a20e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a21e:	2200      	movs	r2, #0
 800a220:	4619      	mov	r1, r3
 800a222:	f000 ffe7 	bl	800b1f4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800a226:	2300      	movs	r3, #0
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3708      	adds	r7, #8
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}

0800a230 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b082      	sub	sp, #8
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2201      	movs	r2, #1
 800a23c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2200      	movs	r2, #0
 800a244:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2200      	movs	r2, #0
 800a24c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f003 fb10 	bl	800d876 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	791b      	ldrb	r3, [r3, #4]
 800a25a:	4619      	mov	r1, r3
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f000 fecd 	bl	800affc <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	795b      	ldrb	r3, [r3, #5]
 800a266:	4619      	mov	r1, r3
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f000 fec7 	bl	800affc <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2201      	movs	r2, #1
 800a272:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a282:	2200      	movs	r2, #0
 800a284:	4619      	mov	r1, r3
 800a286:	f000 ffb5 	bl	800b1f4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800a28a:	2300      	movs	r3, #0
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3708      	adds	r7, #8
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}

0800a294 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b086      	sub	sp, #24
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 800a2a2:	f107 030c 	add.w	r3, r7, #12
 800a2a6:	f04f 32ff 	mov.w	r2, #4294967295
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f000 ffe2 	bl	800b274 <osMessageGet>
    if (event.status == osEventMessage)
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	2b10      	cmp	r3, #16
 800a2b4:	d1f2      	bne.n	800a29c <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f7ff faa8 	bl	800980c <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800a2bc:	e7ee      	b.n	800a29c <USBH_Process_OS+0x8>

0800a2be <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800a2be:	b580      	push	{r7, lr}
 800a2c0:	b082      	sub	sp, #8
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2201      	movs	r2, #1
 800a2ca:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a2da:	2200      	movs	r2, #0
 800a2dc:	4619      	mov	r1, r3
 800a2de:	f000 ff89 	bl	800b1f4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800a2e2:	2300      	movs	r3, #0
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3708      	adds	r7, #8
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}

0800a2ec <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b086      	sub	sp, #24
 800a2f0:	af02      	add	r7, sp, #8
 800a2f2:	6078      	str	r0, [r7, #4]
 800a2f4:	460b      	mov	r3, r1
 800a2f6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800a2fe:	78fb      	ldrb	r3, [r7, #3]
 800a300:	b29b      	uxth	r3, r3
 800a302:	9300      	str	r3, [sp, #0]
 800a304:	4613      	mov	r3, r2
 800a306:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a30a:	2100      	movs	r1, #0
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	f000 f864 	bl	800a3da <USBH_GetDescriptor>
 800a312:	4603      	mov	r3, r0
 800a314:	73fb      	strb	r3, [r7, #15]
 800a316:	7bfb      	ldrb	r3, [r7, #15]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d10a      	bne.n	800a332 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f203 3026 	addw	r0, r3, #806	; 0x326
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a328:	78fa      	ldrb	r2, [r7, #3]
 800a32a:	b292      	uxth	r2, r2
 800a32c:	4619      	mov	r1, r3
 800a32e:	f000 f918 	bl	800a562 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800a332:	7bfb      	ldrb	r3, [r7, #15]
}
 800a334:	4618      	mov	r0, r3
 800a336:	3710      	adds	r7, #16
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}

0800a33c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b086      	sub	sp, #24
 800a340:	af02      	add	r7, sp, #8
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	460b      	mov	r3, r1
 800a346:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	331c      	adds	r3, #28
 800a34c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a34e:	887b      	ldrh	r3, [r7, #2]
 800a350:	9300      	str	r3, [sp, #0]
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a358:	2100      	movs	r1, #0
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f000 f83d 	bl	800a3da <USBH_GetDescriptor>
 800a360:	4603      	mov	r3, r0
 800a362:	72fb      	strb	r3, [r7, #11]
 800a364:	7afb      	ldrb	r3, [r7, #11]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d107      	bne.n	800a37a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a370:	887a      	ldrh	r2, [r7, #2]
 800a372:	68f9      	ldr	r1, [r7, #12]
 800a374:	4618      	mov	r0, r3
 800a376:	f000 f964 	bl	800a642 <USBH_ParseCfgDesc>
  }

  return status;
 800a37a:	7afb      	ldrb	r3, [r7, #11]
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3710      	adds	r7, #16
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}

0800a384 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b088      	sub	sp, #32
 800a388:	af02      	add	r7, sp, #8
 800a38a:	60f8      	str	r0, [r7, #12]
 800a38c:	607a      	str	r2, [r7, #4]
 800a38e:	461a      	mov	r2, r3
 800a390:	460b      	mov	r3, r1
 800a392:	72fb      	strb	r3, [r7, #11]
 800a394:	4613      	mov	r3, r2
 800a396:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800a398:	7afb      	ldrb	r3, [r7, #11]
 800a39a:	b29b      	uxth	r3, r3
 800a39c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a3a0:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800a3a8:	893b      	ldrh	r3, [r7, #8]
 800a3aa:	9300      	str	r3, [sp, #0]
 800a3ac:	460b      	mov	r3, r1
 800a3ae:	2100      	movs	r1, #0
 800a3b0:	68f8      	ldr	r0, [r7, #12]
 800a3b2:	f000 f812 	bl	800a3da <USBH_GetDescriptor>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	75fb      	strb	r3, [r7, #23]
 800a3ba:	7dfb      	ldrb	r3, [r7, #23]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d107      	bne.n	800a3d0 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a3c6:	893a      	ldrh	r2, [r7, #8]
 800a3c8:	6879      	ldr	r1, [r7, #4]
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f000 fa37 	bl	800a83e <USBH_ParseStringDesc>
  }

  return status;
 800a3d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3718      	adds	r7, #24
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}

0800a3da <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800a3da:	b580      	push	{r7, lr}
 800a3dc:	b084      	sub	sp, #16
 800a3de:	af00      	add	r7, sp, #0
 800a3e0:	60f8      	str	r0, [r7, #12]
 800a3e2:	607b      	str	r3, [r7, #4]
 800a3e4:	460b      	mov	r3, r1
 800a3e6:	72fb      	strb	r3, [r7, #11]
 800a3e8:	4613      	mov	r3, r2
 800a3ea:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	789b      	ldrb	r3, [r3, #2]
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	d11c      	bne.n	800a42e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a3f4:	7afb      	ldrb	r3, [r7, #11]
 800a3f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a3fa:	b2da      	uxtb	r2, r3
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	2206      	movs	r2, #6
 800a404:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	893a      	ldrh	r2, [r7, #8]
 800a40a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a40c:	893b      	ldrh	r3, [r7, #8]
 800a40e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a412:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a416:	d104      	bne.n	800a422 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	f240 4209 	movw	r2, #1033	; 0x409
 800a41e:	829a      	strh	r2, [r3, #20]
 800a420:	e002      	b.n	800a428 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	2200      	movs	r2, #0
 800a426:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	8b3a      	ldrh	r2, [r7, #24]
 800a42c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a42e:	8b3b      	ldrh	r3, [r7, #24]
 800a430:	461a      	mov	r2, r3
 800a432:	6879      	ldr	r1, [r7, #4]
 800a434:	68f8      	ldr	r0, [r7, #12]
 800a436:	f000 fa50 	bl	800a8da <USBH_CtlReq>
 800a43a:	4603      	mov	r3, r0
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3710      	adds	r7, #16
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	460b      	mov	r3, r1
 800a44e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	789b      	ldrb	r3, [r3, #2]
 800a454:	2b01      	cmp	r3, #1
 800a456:	d10f      	bne.n	800a478 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2200      	movs	r2, #0
 800a45c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2205      	movs	r2, #5
 800a462:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a464:	78fb      	ldrb	r3, [r7, #3]
 800a466:	b29a      	uxth	r2, r3
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2200      	movs	r2, #0
 800a470:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2200      	movs	r2, #0
 800a476:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a478:	2200      	movs	r2, #0
 800a47a:	2100      	movs	r1, #0
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f000 fa2c 	bl	800a8da <USBH_CtlReq>
 800a482:	4603      	mov	r3, r0
}
 800a484:	4618      	mov	r0, r3
 800a486:	3708      	adds	r7, #8
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}

0800a48c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b082      	sub	sp, #8
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
 800a494:	460b      	mov	r3, r1
 800a496:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	789b      	ldrb	r3, [r3, #2]
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	d10e      	bne.n	800a4be <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2209      	movs	r2, #9
 800a4aa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	887a      	ldrh	r2, [r7, #2]
 800a4b0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a4be:	2200      	movs	r2, #0
 800a4c0:	2100      	movs	r1, #0
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f000 fa09 	bl	800a8da <USBH_CtlReq>
 800a4c8:	4603      	mov	r3, r0
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3708      	adds	r7, #8
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}

0800a4d2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a4d2:	b580      	push	{r7, lr}
 800a4d4:	b082      	sub	sp, #8
 800a4d6:	af00      	add	r7, sp, #0
 800a4d8:	6078      	str	r0, [r7, #4]
 800a4da:	460b      	mov	r3, r1
 800a4dc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	789b      	ldrb	r3, [r3, #2]
 800a4e2:	2b01      	cmp	r3, #1
 800a4e4:	d10f      	bne.n	800a506 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2203      	movs	r2, #3
 800a4f0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a4f2:	78fb      	ldrb	r3, [r7, #3]
 800a4f4:	b29a      	uxth	r2, r3
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2200      	movs	r2, #0
 800a504:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a506:	2200      	movs	r2, #0
 800a508:	2100      	movs	r1, #0
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f000 f9e5 	bl	800a8da <USBH_CtlReq>
 800a510:	4603      	mov	r3, r0
}
 800a512:	4618      	mov	r0, r3
 800a514:	3708      	adds	r7, #8
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}

0800a51a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a51a:	b580      	push	{r7, lr}
 800a51c:	b082      	sub	sp, #8
 800a51e:	af00      	add	r7, sp, #0
 800a520:	6078      	str	r0, [r7, #4]
 800a522:	460b      	mov	r3, r1
 800a524:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	789b      	ldrb	r3, [r3, #2]
 800a52a:	2b01      	cmp	r3, #1
 800a52c:	d10f      	bne.n	800a54e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2202      	movs	r2, #2
 800a532:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2201      	movs	r2, #1
 800a538:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2200      	movs	r2, #0
 800a53e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a540:	78fb      	ldrb	r3, [r7, #3]
 800a542:	b29a      	uxth	r2, r3
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2200      	movs	r2, #0
 800a54c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800a54e:	2200      	movs	r2, #0
 800a550:	2100      	movs	r1, #0
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f000 f9c1 	bl	800a8da <USBH_CtlReq>
 800a558:	4603      	mov	r3, r0
}
 800a55a:	4618      	mov	r0, r3
 800a55c:	3708      	adds	r7, #8
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}

0800a562 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800a562:	b480      	push	{r7}
 800a564:	b085      	sub	sp, #20
 800a566:	af00      	add	r7, sp, #0
 800a568:	60f8      	str	r0, [r7, #12]
 800a56a:	60b9      	str	r1, [r7, #8]
 800a56c:	4613      	mov	r3, r2
 800a56e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	781a      	ldrb	r2, [r3, #0]
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	785a      	ldrb	r2, [r3, #1]
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	3302      	adds	r3, #2
 800a584:	781b      	ldrb	r3, [r3, #0]
 800a586:	b29a      	uxth	r2, r3
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	3303      	adds	r3, #3
 800a58c:	781b      	ldrb	r3, [r3, #0]
 800a58e:	b29b      	uxth	r3, r3
 800a590:	021b      	lsls	r3, r3, #8
 800a592:	b29b      	uxth	r3, r3
 800a594:	4313      	orrs	r3, r2
 800a596:	b29a      	uxth	r2, r3
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	791a      	ldrb	r2, [r3, #4]
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	795a      	ldrb	r2, [r3, #5]
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	799a      	ldrb	r2, [r3, #6]
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	79da      	ldrb	r2, [r3, #7]
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800a5bc:	88fb      	ldrh	r3, [r7, #6]
 800a5be:	2b08      	cmp	r3, #8
 800a5c0:	d939      	bls.n	800a636 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	3308      	adds	r3, #8
 800a5c6:	781b      	ldrb	r3, [r3, #0]
 800a5c8:	b29a      	uxth	r2, r3
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	3309      	adds	r3, #9
 800a5ce:	781b      	ldrb	r3, [r3, #0]
 800a5d0:	b29b      	uxth	r3, r3
 800a5d2:	021b      	lsls	r3, r3, #8
 800a5d4:	b29b      	uxth	r3, r3
 800a5d6:	4313      	orrs	r3, r2
 800a5d8:	b29a      	uxth	r2, r3
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	330a      	adds	r3, #10
 800a5e2:	781b      	ldrb	r3, [r3, #0]
 800a5e4:	b29a      	uxth	r2, r3
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	330b      	adds	r3, #11
 800a5ea:	781b      	ldrb	r3, [r3, #0]
 800a5ec:	b29b      	uxth	r3, r3
 800a5ee:	021b      	lsls	r3, r3, #8
 800a5f0:	b29b      	uxth	r3, r3
 800a5f2:	4313      	orrs	r3, r2
 800a5f4:	b29a      	uxth	r2, r3
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	330c      	adds	r3, #12
 800a5fe:	781b      	ldrb	r3, [r3, #0]
 800a600:	b29a      	uxth	r2, r3
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	330d      	adds	r3, #13
 800a606:	781b      	ldrb	r3, [r3, #0]
 800a608:	b29b      	uxth	r3, r3
 800a60a:	021b      	lsls	r3, r3, #8
 800a60c:	b29b      	uxth	r3, r3
 800a60e:	4313      	orrs	r3, r2
 800a610:	b29a      	uxth	r2, r3
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	7b9a      	ldrb	r2, [r3, #14]
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	7bda      	ldrb	r2, [r3, #15]
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	7c1a      	ldrb	r2, [r3, #16]
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	7c5a      	ldrb	r2, [r3, #17]
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	745a      	strb	r2, [r3, #17]
  }
}
 800a636:	bf00      	nop
 800a638:	3714      	adds	r7, #20
 800a63a:	46bd      	mov	sp, r7
 800a63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a640:	4770      	bx	lr

0800a642 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800a642:	b580      	push	{r7, lr}
 800a644:	b08a      	sub	sp, #40	; 0x28
 800a646:	af00      	add	r7, sp, #0
 800a648:	60f8      	str	r0, [r7, #12]
 800a64a:	60b9      	str	r1, [r7, #8]
 800a64c:	4613      	mov	r3, r2
 800a64e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a654:	2300      	movs	r3, #0
 800a656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800a65a:	2300      	movs	r3, #0
 800a65c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	781a      	ldrb	r2, [r3, #0]
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	785a      	ldrb	r2, [r3, #1]
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	3302      	adds	r3, #2
 800a678:	781b      	ldrb	r3, [r3, #0]
 800a67a:	b29a      	uxth	r2, r3
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	3303      	adds	r3, #3
 800a680:	781b      	ldrb	r3, [r3, #0]
 800a682:	b29b      	uxth	r3, r3
 800a684:	021b      	lsls	r3, r3, #8
 800a686:	b29b      	uxth	r3, r3
 800a688:	4313      	orrs	r3, r2
 800a68a:	b29a      	uxth	r2, r3
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	791a      	ldrb	r2, [r3, #4]
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	795a      	ldrb	r2, [r3, #5]
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	799a      	ldrb	r2, [r3, #6]
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	79da      	ldrb	r2, [r3, #7]
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	7a1a      	ldrb	r2, [r3, #8]
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a6b8:	88fb      	ldrh	r3, [r7, #6]
 800a6ba:	2b09      	cmp	r3, #9
 800a6bc:	d95f      	bls.n	800a77e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800a6be:	2309      	movs	r3, #9
 800a6c0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a6c6:	e051      	b.n	800a76c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a6c8:	f107 0316 	add.w	r3, r7, #22
 800a6cc:	4619      	mov	r1, r3
 800a6ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a6d0:	f000 f8e8 	bl	800a8a4 <USBH_GetNextDesc>
 800a6d4:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800a6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d8:	785b      	ldrb	r3, [r3, #1]
 800a6da:	2b04      	cmp	r3, #4
 800a6dc:	d146      	bne.n	800a76c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800a6de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a6e2:	221a      	movs	r2, #26
 800a6e4:	fb02 f303 	mul.w	r3, r2, r3
 800a6e8:	3308      	adds	r3, #8
 800a6ea:	68fa      	ldr	r2, [r7, #12]
 800a6ec:	4413      	add	r3, r2
 800a6ee:	3302      	adds	r3, #2
 800a6f0:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a6f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a6f4:	69f8      	ldr	r0, [r7, #28]
 800a6f6:	f000 f846 	bl	800a786 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800a700:	2300      	movs	r3, #0
 800a702:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a704:	e022      	b.n	800a74c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a706:	f107 0316 	add.w	r3, r7, #22
 800a70a:	4619      	mov	r1, r3
 800a70c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a70e:	f000 f8c9 	bl	800a8a4 <USBH_GetNextDesc>
 800a712:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800a714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a716:	785b      	ldrb	r3, [r3, #1]
 800a718:	2b05      	cmp	r3, #5
 800a71a:	d117      	bne.n	800a74c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a71c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a720:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a724:	3201      	adds	r2, #1
 800a726:	00d2      	lsls	r2, r2, #3
 800a728:	211a      	movs	r1, #26
 800a72a:	fb01 f303 	mul.w	r3, r1, r3
 800a72e:	4413      	add	r3, r2
 800a730:	3308      	adds	r3, #8
 800a732:	68fa      	ldr	r2, [r7, #12]
 800a734:	4413      	add	r3, r2
 800a736:	3304      	adds	r3, #4
 800a738:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800a73a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a73c:	69b8      	ldr	r0, [r7, #24]
 800a73e:	f000 f851 	bl	800a7e4 <USBH_ParseEPDesc>
            ep_ix++;
 800a742:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a746:	3301      	adds	r3, #1
 800a748:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a74c:	69fb      	ldr	r3, [r7, #28]
 800a74e:	791b      	ldrb	r3, [r3, #4]
 800a750:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a754:	429a      	cmp	r2, r3
 800a756:	d204      	bcs.n	800a762 <USBH_ParseCfgDesc+0x120>
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	885a      	ldrh	r2, [r3, #2]
 800a75c:	8afb      	ldrh	r3, [r7, #22]
 800a75e:	429a      	cmp	r2, r3
 800a760:	d8d1      	bhi.n	800a706 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800a762:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a766:	3301      	adds	r3, #1
 800a768:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a76c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a770:	2b01      	cmp	r3, #1
 800a772:	d804      	bhi.n	800a77e <USBH_ParseCfgDesc+0x13c>
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	885a      	ldrh	r2, [r3, #2]
 800a778:	8afb      	ldrh	r3, [r7, #22]
 800a77a:	429a      	cmp	r2, r3
 800a77c:	d8a4      	bhi.n	800a6c8 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800a77e:	bf00      	nop
 800a780:	3728      	adds	r7, #40	; 0x28
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}

0800a786 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800a786:	b480      	push	{r7}
 800a788:	b083      	sub	sp, #12
 800a78a:	af00      	add	r7, sp, #0
 800a78c:	6078      	str	r0, [r7, #4]
 800a78e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	781a      	ldrb	r2, [r3, #0]
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	785a      	ldrb	r2, [r3, #1]
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	789a      	ldrb	r2, [r3, #2]
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	78da      	ldrb	r2, [r3, #3]
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	791a      	ldrb	r2, [r3, #4]
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	795a      	ldrb	r2, [r3, #5]
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	799a      	ldrb	r2, [r3, #6]
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	79da      	ldrb	r2, [r3, #7]
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	7a1a      	ldrb	r2, [r3, #8]
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	721a      	strb	r2, [r3, #8]
}
 800a7d8:	bf00      	nop
 800a7da:	370c      	adds	r7, #12
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e2:	4770      	bx	lr

0800a7e4 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b083      	sub	sp, #12
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	781a      	ldrb	r2, [r3, #0]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	785a      	ldrb	r2, [r3, #1]
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	789a      	ldrb	r2, [r3, #2]
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	78da      	ldrb	r2, [r3, #3]
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	3304      	adds	r3, #4
 800a812:	781b      	ldrb	r3, [r3, #0]
 800a814:	b29a      	uxth	r2, r3
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	3305      	adds	r3, #5
 800a81a:	781b      	ldrb	r3, [r3, #0]
 800a81c:	b29b      	uxth	r3, r3
 800a81e:	021b      	lsls	r3, r3, #8
 800a820:	b29b      	uxth	r3, r3
 800a822:	4313      	orrs	r3, r2
 800a824:	b29a      	uxth	r2, r3
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	799a      	ldrb	r2, [r3, #6]
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	719a      	strb	r2, [r3, #6]
}
 800a832:	bf00      	nop
 800a834:	370c      	adds	r7, #12
 800a836:	46bd      	mov	sp, r7
 800a838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83c:	4770      	bx	lr

0800a83e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a83e:	b480      	push	{r7}
 800a840:	b087      	sub	sp, #28
 800a842:	af00      	add	r7, sp, #0
 800a844:	60f8      	str	r0, [r7, #12]
 800a846:	60b9      	str	r1, [r7, #8]
 800a848:	4613      	mov	r3, r2
 800a84a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	3301      	adds	r3, #1
 800a850:	781b      	ldrb	r3, [r3, #0]
 800a852:	2b03      	cmp	r3, #3
 800a854:	d120      	bne.n	800a898 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	781b      	ldrb	r3, [r3, #0]
 800a85a:	1e9a      	subs	r2, r3, #2
 800a85c:	88fb      	ldrh	r3, [r7, #6]
 800a85e:	4293      	cmp	r3, r2
 800a860:	bf28      	it	cs
 800a862:	4613      	movcs	r3, r2
 800a864:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	3302      	adds	r3, #2
 800a86a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a86c:	2300      	movs	r3, #0
 800a86e:	82fb      	strh	r3, [r7, #22]
 800a870:	e00b      	b.n	800a88a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a872:	8afb      	ldrh	r3, [r7, #22]
 800a874:	68fa      	ldr	r2, [r7, #12]
 800a876:	4413      	add	r3, r2
 800a878:	781a      	ldrb	r2, [r3, #0]
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	3301      	adds	r3, #1
 800a882:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a884:	8afb      	ldrh	r3, [r7, #22]
 800a886:	3302      	adds	r3, #2
 800a888:	82fb      	strh	r3, [r7, #22]
 800a88a:	8afa      	ldrh	r2, [r7, #22]
 800a88c:	8abb      	ldrh	r3, [r7, #20]
 800a88e:	429a      	cmp	r2, r3
 800a890:	d3ef      	bcc.n	800a872 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	2200      	movs	r2, #0
 800a896:	701a      	strb	r2, [r3, #0]
  }
}
 800a898:	bf00      	nop
 800a89a:	371c      	adds	r7, #28
 800a89c:	46bd      	mov	sp, r7
 800a89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a2:	4770      	bx	lr

0800a8a4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b085      	sub	sp, #20
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	881a      	ldrh	r2, [r3, #0]
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	781b      	ldrb	r3, [r3, #0]
 800a8b6:	b29b      	uxth	r3, r3
 800a8b8:	4413      	add	r3, r2
 800a8ba:	b29a      	uxth	r2, r3
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	781b      	ldrb	r3, [r3, #0]
 800a8c4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	4413      	add	r3, r2
 800a8ca:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a8cc:	68fb      	ldr	r3, [r7, #12]
}
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	3714      	adds	r7, #20
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d8:	4770      	bx	lr

0800a8da <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a8da:	b580      	push	{r7, lr}
 800a8dc:	b086      	sub	sp, #24
 800a8de:	af00      	add	r7, sp, #0
 800a8e0:	60f8      	str	r0, [r7, #12]
 800a8e2:	60b9      	str	r1, [r7, #8]
 800a8e4:	4613      	mov	r3, r2
 800a8e6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	789b      	ldrb	r3, [r3, #2]
 800a8f0:	2b01      	cmp	r3, #1
 800a8f2:	d002      	beq.n	800a8fa <USBH_CtlReq+0x20>
 800a8f4:	2b02      	cmp	r3, #2
 800a8f6:	d01d      	beq.n	800a934 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800a8f8:	e043      	b.n	800a982 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	68ba      	ldr	r2, [r7, #8]
 800a8fe:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	88fa      	ldrh	r2, [r7, #6]
 800a904:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	2201      	movs	r2, #1
 800a90a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	2202      	movs	r2, #2
 800a910:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a912:	2301      	movs	r3, #1
 800a914:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	2203      	movs	r2, #3
 800a91a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a92a:	2200      	movs	r2, #0
 800a92c:	4619      	mov	r1, r3
 800a92e:	f000 fc61 	bl	800b1f4 <osMessagePut>
      break;
 800a932:	e026      	b.n	800a982 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800a934:	68f8      	ldr	r0, [r7, #12]
 800a936:	f000 f829 	bl	800a98c <USBH_HandleControl>
 800a93a:	4603      	mov	r3, r0
 800a93c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a93e:	7dfb      	ldrb	r3, [r7, #23]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d002      	beq.n	800a94a <USBH_CtlReq+0x70>
 800a944:	7dfb      	ldrb	r3, [r7, #23]
 800a946:	2b03      	cmp	r3, #3
 800a948:	d106      	bne.n	800a958 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	2201      	movs	r2, #1
 800a94e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	2200      	movs	r2, #0
 800a954:	761a      	strb	r2, [r3, #24]
 800a956:	e005      	b.n	800a964 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800a958:	7dfb      	ldrb	r3, [r7, #23]
 800a95a:	2b02      	cmp	r3, #2
 800a95c:	d102      	bne.n	800a964 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	2201      	movs	r2, #1
 800a962:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	2203      	movs	r2, #3
 800a968:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a978:	2200      	movs	r2, #0
 800a97a:	4619      	mov	r1, r3
 800a97c:	f000 fc3a 	bl	800b1f4 <osMessagePut>
      break;
 800a980:	bf00      	nop
  }
  return status;
 800a982:	7dfb      	ldrb	r3, [r7, #23]
}
 800a984:	4618      	mov	r0, r3
 800a986:	3718      	adds	r7, #24
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}

0800a98c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b086      	sub	sp, #24
 800a990:	af02      	add	r7, sp, #8
 800a992:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a994:	2301      	movs	r3, #1
 800a996:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a998:	2300      	movs	r3, #0
 800a99a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	7e1b      	ldrb	r3, [r3, #24]
 800a9a0:	3b01      	subs	r3, #1
 800a9a2:	2b0a      	cmp	r3, #10
 800a9a4:	f200 8229 	bhi.w	800adfa <USBH_HandleControl+0x46e>
 800a9a8:	a201      	add	r2, pc, #4	; (adr r2, 800a9b0 <USBH_HandleControl+0x24>)
 800a9aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9ae:	bf00      	nop
 800a9b0:	0800a9dd 	.word	0x0800a9dd
 800a9b4:	0800a9f7 	.word	0x0800a9f7
 800a9b8:	0800aa99 	.word	0x0800aa99
 800a9bc:	0800aabf 	.word	0x0800aabf
 800a9c0:	0800ab4b 	.word	0x0800ab4b
 800a9c4:	0800ab75 	.word	0x0800ab75
 800a9c8:	0800ac37 	.word	0x0800ac37
 800a9cc:	0800ac59 	.word	0x0800ac59
 800a9d0:	0800aceb 	.word	0x0800aceb
 800a9d4:	0800ad11 	.word	0x0800ad11
 800a9d8:	0800ada3 	.word	0x0800ada3
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f103 0110 	add.w	r1, r3, #16
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	795b      	ldrb	r3, [r3, #5]
 800a9e6:	461a      	mov	r2, r3
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f000 fa17 	bl	800ae1c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2202      	movs	r2, #2
 800a9f2:	761a      	strb	r2, [r3, #24]
      break;
 800a9f4:	e20c      	b.n	800ae10 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	795b      	ldrb	r3, [r3, #5]
 800a9fa:	4619      	mov	r1, r3
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f003 f829 	bl	800da54 <USBH_LL_GetURBState>
 800aa02:	4603      	mov	r3, r0
 800aa04:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800aa06:	7bbb      	ldrb	r3, [r7, #14]
 800aa08:	2b01      	cmp	r3, #1
 800aa0a:	d12c      	bne.n	800aa66 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	7c1b      	ldrb	r3, [r3, #16]
 800aa10:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800aa14:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	8adb      	ldrh	r3, [r3, #22]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d00a      	beq.n	800aa34 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800aa1e:	7b7b      	ldrb	r3, [r7, #13]
 800aa20:	2b80      	cmp	r3, #128	; 0x80
 800aa22:	d103      	bne.n	800aa2c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2203      	movs	r2, #3
 800aa28:	761a      	strb	r2, [r3, #24]
 800aa2a:	e00d      	b.n	800aa48 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2205      	movs	r2, #5
 800aa30:	761a      	strb	r2, [r3, #24]
 800aa32:	e009      	b.n	800aa48 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800aa34:	7b7b      	ldrb	r3, [r7, #13]
 800aa36:	2b80      	cmp	r3, #128	; 0x80
 800aa38:	d103      	bne.n	800aa42 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2209      	movs	r2, #9
 800aa3e:	761a      	strb	r2, [r3, #24]
 800aa40:	e002      	b.n	800aa48 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2207      	movs	r2, #7
 800aa46:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2203      	movs	r2, #3
 800aa4c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	4619      	mov	r1, r3
 800aa60:	f000 fbc8 	bl	800b1f4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800aa64:	e1cb      	b.n	800adfe <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800aa66:	7bbb      	ldrb	r3, [r7, #14]
 800aa68:	2b04      	cmp	r3, #4
 800aa6a:	d003      	beq.n	800aa74 <USBH_HandleControl+0xe8>
 800aa6c:	7bbb      	ldrb	r3, [r7, #14]
 800aa6e:	2b02      	cmp	r3, #2
 800aa70:	f040 81c5 	bne.w	800adfe <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	220b      	movs	r2, #11
 800aa78:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2203      	movs	r2, #3
 800aa7e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800aa8e:	2200      	movs	r2, #0
 800aa90:	4619      	mov	r1, r3
 800aa92:	f000 fbaf 	bl	800b1f4 <osMessagePut>
      break;
 800aa96:	e1b2      	b.n	800adfe <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800aa9e:	b29a      	uxth	r2, r3
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6899      	ldr	r1, [r3, #8]
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	899a      	ldrh	r2, [r3, #12]
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	791b      	ldrb	r3, [r3, #4]
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f000 f9f2 	bl	800ae9a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2204      	movs	r2, #4
 800aaba:	761a      	strb	r2, [r3, #24]
      break;
 800aabc:	e1a8      	b.n	800ae10 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	791b      	ldrb	r3, [r3, #4]
 800aac2:	4619      	mov	r1, r3
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f002 ffc5 	bl	800da54 <USBH_LL_GetURBState>
 800aaca:	4603      	mov	r3, r0
 800aacc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800aace:	7bbb      	ldrb	r3, [r7, #14]
 800aad0:	2b01      	cmp	r3, #1
 800aad2:	d110      	bne.n	800aaf6 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2209      	movs	r2, #9
 800aad8:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2203      	movs	r2, #3
 800aade:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800aaee:	2200      	movs	r2, #0
 800aaf0:	4619      	mov	r1, r3
 800aaf2:	f000 fb7f 	bl	800b1f4 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800aaf6:	7bbb      	ldrb	r3, [r7, #14]
 800aaf8:	2b05      	cmp	r3, #5
 800aafa:	d110      	bne.n	800ab1e <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800aafc:	2303      	movs	r3, #3
 800aafe:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2203      	movs	r2, #3
 800ab04:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ab14:	2200      	movs	r2, #0
 800ab16:	4619      	mov	r1, r3
 800ab18:	f000 fb6c 	bl	800b1f4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ab1c:	e171      	b.n	800ae02 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800ab1e:	7bbb      	ldrb	r3, [r7, #14]
 800ab20:	2b04      	cmp	r3, #4
 800ab22:	f040 816e 	bne.w	800ae02 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	220b      	movs	r2, #11
 800ab2a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2203      	movs	r2, #3
 800ab30:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ab40:	2200      	movs	r2, #0
 800ab42:	4619      	mov	r1, r3
 800ab44:	f000 fb56 	bl	800b1f4 <osMessagePut>
      break;
 800ab48:	e15b      	b.n	800ae02 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6899      	ldr	r1, [r3, #8]
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	899a      	ldrh	r2, [r3, #12]
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	795b      	ldrb	r3, [r3, #5]
 800ab56:	2001      	movs	r0, #1
 800ab58:	9000      	str	r0, [sp, #0]
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f000 f978 	bl	800ae50 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ab66:	b29a      	uxth	r2, r3
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2206      	movs	r2, #6
 800ab70:	761a      	strb	r2, [r3, #24]
      break;
 800ab72:	e14d      	b.n	800ae10 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	795b      	ldrb	r3, [r3, #5]
 800ab78:	4619      	mov	r1, r3
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	f002 ff6a 	bl	800da54 <USBH_LL_GetURBState>
 800ab80:	4603      	mov	r3, r0
 800ab82:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ab84:	7bbb      	ldrb	r3, [r7, #14]
 800ab86:	2b01      	cmp	r3, #1
 800ab88:	d111      	bne.n	800abae <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2207      	movs	r2, #7
 800ab8e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2203      	movs	r2, #3
 800ab94:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800aba4:	2200      	movs	r2, #0
 800aba6:	4619      	mov	r1, r3
 800aba8:	f000 fb24 	bl	800b1f4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800abac:	e12b      	b.n	800ae06 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800abae:	7bbb      	ldrb	r3, [r7, #14]
 800abb0:	2b05      	cmp	r3, #5
 800abb2:	d113      	bne.n	800abdc <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	220c      	movs	r2, #12
 800abb8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800abba:	2303      	movs	r3, #3
 800abbc:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2203      	movs	r2, #3
 800abc2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800abd2:	2200      	movs	r2, #0
 800abd4:	4619      	mov	r1, r3
 800abd6:	f000 fb0d 	bl	800b1f4 <osMessagePut>
      break;
 800abda:	e114      	b.n	800ae06 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800abdc:	7bbb      	ldrb	r3, [r7, #14]
 800abde:	2b02      	cmp	r3, #2
 800abe0:	d111      	bne.n	800ac06 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2205      	movs	r2, #5
 800abe6:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2203      	movs	r2, #3
 800abec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800abfc:	2200      	movs	r2, #0
 800abfe:	4619      	mov	r1, r3
 800ac00:	f000 faf8 	bl	800b1f4 <osMessagePut>
      break;
 800ac04:	e0ff      	b.n	800ae06 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800ac06:	7bbb      	ldrb	r3, [r7, #14]
 800ac08:	2b04      	cmp	r3, #4
 800ac0a:	f040 80fc 	bne.w	800ae06 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	220b      	movs	r2, #11
 800ac12:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800ac14:	2302      	movs	r3, #2
 800ac16:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2203      	movs	r2, #3
 800ac1c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	4619      	mov	r1, r3
 800ac30:	f000 fae0 	bl	800b1f4 <osMessagePut>
      break;
 800ac34:	e0e7      	b.n	800ae06 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	791b      	ldrb	r3, [r3, #4]
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	2100      	movs	r1, #0
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f000 f92b 	bl	800ae9a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ac4a:	b29a      	uxth	r2, r3
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2208      	movs	r2, #8
 800ac54:	761a      	strb	r2, [r3, #24]

      break;
 800ac56:	e0db      	b.n	800ae10 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	791b      	ldrb	r3, [r3, #4]
 800ac5c:	4619      	mov	r1, r3
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f002 fef8 	bl	800da54 <USBH_LL_GetURBState>
 800ac64:	4603      	mov	r3, r0
 800ac66:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ac68:	7bbb      	ldrb	r3, [r7, #14]
 800ac6a:	2b01      	cmp	r3, #1
 800ac6c:	d113      	bne.n	800ac96 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	220d      	movs	r2, #13
 800ac72:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800ac74:	2300      	movs	r3, #0
 800ac76:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2203      	movs	r2, #3
 800ac7c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	4619      	mov	r1, r3
 800ac90:	f000 fab0 	bl	800b1f4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ac94:	e0b9      	b.n	800ae0a <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800ac96:	7bbb      	ldrb	r3, [r7, #14]
 800ac98:	2b04      	cmp	r3, #4
 800ac9a:	d111      	bne.n	800acc0 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	220b      	movs	r2, #11
 800aca0:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2203      	movs	r2, #3
 800aca6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800acb6:	2200      	movs	r2, #0
 800acb8:	4619      	mov	r1, r3
 800acba:	f000 fa9b 	bl	800b1f4 <osMessagePut>
      break;
 800acbe:	e0a4      	b.n	800ae0a <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800acc0:	7bbb      	ldrb	r3, [r7, #14]
 800acc2:	2b05      	cmp	r3, #5
 800acc4:	f040 80a1 	bne.w	800ae0a <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800acc8:	2303      	movs	r3, #3
 800acca:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2203      	movs	r2, #3
 800acd0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ace0:	2200      	movs	r2, #0
 800ace2:	4619      	mov	r1, r3
 800ace4:	f000 fa86 	bl	800b1f4 <osMessagePut>
      break;
 800ace8:	e08f      	b.n	800ae0a <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	795b      	ldrb	r3, [r3, #5]
 800acee:	2201      	movs	r2, #1
 800acf0:	9200      	str	r2, [sp, #0]
 800acf2:	2200      	movs	r2, #0
 800acf4:	2100      	movs	r1, #0
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f000 f8aa 	bl	800ae50 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ad02:	b29a      	uxth	r2, r3
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	220a      	movs	r2, #10
 800ad0c:	761a      	strb	r2, [r3, #24]
      break;
 800ad0e:	e07f      	b.n	800ae10 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	795b      	ldrb	r3, [r3, #5]
 800ad14:	4619      	mov	r1, r3
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f002 fe9c 	bl	800da54 <USBH_LL_GetURBState>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800ad20:	7bbb      	ldrb	r3, [r7, #14]
 800ad22:	2b01      	cmp	r3, #1
 800ad24:	d113      	bne.n	800ad4e <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800ad26:	2300      	movs	r3, #0
 800ad28:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	220d      	movs	r2, #13
 800ad2e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2203      	movs	r2, #3
 800ad34:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ad44:	2200      	movs	r2, #0
 800ad46:	4619      	mov	r1, r3
 800ad48:	f000 fa54 	bl	800b1f4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ad4c:	e05f      	b.n	800ae0e <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ad4e:	7bbb      	ldrb	r3, [r7, #14]
 800ad50:	2b02      	cmp	r3, #2
 800ad52:	d111      	bne.n	800ad78 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2209      	movs	r2, #9
 800ad58:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2203      	movs	r2, #3
 800ad5e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ad6e:	2200      	movs	r2, #0
 800ad70:	4619      	mov	r1, r3
 800ad72:	f000 fa3f 	bl	800b1f4 <osMessagePut>
      break;
 800ad76:	e04a      	b.n	800ae0e <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800ad78:	7bbb      	ldrb	r3, [r7, #14]
 800ad7a:	2b04      	cmp	r3, #4
 800ad7c:	d147      	bne.n	800ae0e <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	220b      	movs	r2, #11
 800ad82:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2203      	movs	r2, #3
 800ad88:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ad98:	2200      	movs	r2, #0
 800ad9a:	4619      	mov	r1, r3
 800ad9c:	f000 fa2a 	bl	800b1f4 <osMessagePut>
      break;
 800ada0:	e035      	b.n	800ae0e <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	7e5b      	ldrb	r3, [r3, #25]
 800ada6:	3301      	adds	r3, #1
 800ada8:	b2da      	uxtb	r2, r3
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	765a      	strb	r2, [r3, #25]
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	7e5b      	ldrb	r3, [r3, #25]
 800adb2:	2b02      	cmp	r3, #2
 800adb4:	d806      	bhi.n	800adc4 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2201      	movs	r2, #1
 800adba:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2201      	movs	r2, #1
 800adc0:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800adc2:	e025      	b.n	800ae10 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800adca:	2106      	movs	r1, #6
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2200      	movs	r2, #0
 800add4:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	795b      	ldrb	r3, [r3, #5]
 800adda:	4619      	mov	r1, r3
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f000 f90d 	bl	800affc <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	791b      	ldrb	r3, [r3, #4]
 800ade6:	4619      	mov	r1, r3
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f000 f907 	bl	800affc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2200      	movs	r2, #0
 800adf2:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800adf4:	2302      	movs	r3, #2
 800adf6:	73fb      	strb	r3, [r7, #15]
      break;
 800adf8:	e00a      	b.n	800ae10 <USBH_HandleControl+0x484>

    default:
      break;
 800adfa:	bf00      	nop
 800adfc:	e008      	b.n	800ae10 <USBH_HandleControl+0x484>
      break;
 800adfe:	bf00      	nop
 800ae00:	e006      	b.n	800ae10 <USBH_HandleControl+0x484>
      break;
 800ae02:	bf00      	nop
 800ae04:	e004      	b.n	800ae10 <USBH_HandleControl+0x484>
      break;
 800ae06:	bf00      	nop
 800ae08:	e002      	b.n	800ae10 <USBH_HandleControl+0x484>
      break;
 800ae0a:	bf00      	nop
 800ae0c:	e000      	b.n	800ae10 <USBH_HandleControl+0x484>
      break;
 800ae0e:	bf00      	nop
  }

  return status;
 800ae10:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	3710      	adds	r7, #16
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}
 800ae1a:	bf00      	nop

0800ae1c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b088      	sub	sp, #32
 800ae20:	af04      	add	r7, sp, #16
 800ae22:	60f8      	str	r0, [r7, #12]
 800ae24:	60b9      	str	r1, [r7, #8]
 800ae26:	4613      	mov	r3, r2
 800ae28:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ae2a:	79f9      	ldrb	r1, [r7, #7]
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	9303      	str	r3, [sp, #12]
 800ae30:	2308      	movs	r3, #8
 800ae32:	9302      	str	r3, [sp, #8]
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	9301      	str	r3, [sp, #4]
 800ae38:	2300      	movs	r3, #0
 800ae3a:	9300      	str	r3, [sp, #0]
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	2200      	movs	r2, #0
 800ae40:	68f8      	ldr	r0, [r7, #12]
 800ae42:	f002 fdd6 	bl	800d9f2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800ae46:	2300      	movs	r3, #0
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	3710      	adds	r7, #16
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}

0800ae50 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b088      	sub	sp, #32
 800ae54:	af04      	add	r7, sp, #16
 800ae56:	60f8      	str	r0, [r7, #12]
 800ae58:	60b9      	str	r1, [r7, #8]
 800ae5a:	4611      	mov	r1, r2
 800ae5c:	461a      	mov	r2, r3
 800ae5e:	460b      	mov	r3, r1
 800ae60:	80fb      	strh	r3, [r7, #6]
 800ae62:	4613      	mov	r3, r2
 800ae64:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d001      	beq.n	800ae74 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800ae70:	2300      	movs	r3, #0
 800ae72:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ae74:	7979      	ldrb	r1, [r7, #5]
 800ae76:	7e3b      	ldrb	r3, [r7, #24]
 800ae78:	9303      	str	r3, [sp, #12]
 800ae7a:	88fb      	ldrh	r3, [r7, #6]
 800ae7c:	9302      	str	r3, [sp, #8]
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	9301      	str	r3, [sp, #4]
 800ae82:	2301      	movs	r3, #1
 800ae84:	9300      	str	r3, [sp, #0]
 800ae86:	2300      	movs	r3, #0
 800ae88:	2200      	movs	r2, #0
 800ae8a:	68f8      	ldr	r0, [r7, #12]
 800ae8c:	f002 fdb1 	bl	800d9f2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800ae90:	2300      	movs	r3, #0
}
 800ae92:	4618      	mov	r0, r3
 800ae94:	3710      	adds	r7, #16
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}

0800ae9a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800ae9a:	b580      	push	{r7, lr}
 800ae9c:	b088      	sub	sp, #32
 800ae9e:	af04      	add	r7, sp, #16
 800aea0:	60f8      	str	r0, [r7, #12]
 800aea2:	60b9      	str	r1, [r7, #8]
 800aea4:	4611      	mov	r1, r2
 800aea6:	461a      	mov	r2, r3
 800aea8:	460b      	mov	r3, r1
 800aeaa:	80fb      	strh	r3, [r7, #6]
 800aeac:	4613      	mov	r3, r2
 800aeae:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800aeb0:	7979      	ldrb	r1, [r7, #5]
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	9303      	str	r3, [sp, #12]
 800aeb6:	88fb      	ldrh	r3, [r7, #6]
 800aeb8:	9302      	str	r3, [sp, #8]
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	9301      	str	r3, [sp, #4]
 800aebe:	2301      	movs	r3, #1
 800aec0:	9300      	str	r3, [sp, #0]
 800aec2:	2300      	movs	r3, #0
 800aec4:	2201      	movs	r2, #1
 800aec6:	68f8      	ldr	r0, [r7, #12]
 800aec8:	f002 fd93 	bl	800d9f2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800aecc:	2300      	movs	r3, #0

}
 800aece:	4618      	mov	r0, r3
 800aed0:	3710      	adds	r7, #16
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}

0800aed6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800aed6:	b580      	push	{r7, lr}
 800aed8:	b088      	sub	sp, #32
 800aeda:	af04      	add	r7, sp, #16
 800aedc:	60f8      	str	r0, [r7, #12]
 800aede:	60b9      	str	r1, [r7, #8]
 800aee0:	4611      	mov	r1, r2
 800aee2:	461a      	mov	r2, r3
 800aee4:	460b      	mov	r3, r1
 800aee6:	80fb      	strh	r3, [r7, #6]
 800aee8:	4613      	mov	r3, r2
 800aeea:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d001      	beq.n	800aefa <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800aef6:	2300      	movs	r3, #0
 800aef8:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800aefa:	7979      	ldrb	r1, [r7, #5]
 800aefc:	7e3b      	ldrb	r3, [r7, #24]
 800aefe:	9303      	str	r3, [sp, #12]
 800af00:	88fb      	ldrh	r3, [r7, #6]
 800af02:	9302      	str	r3, [sp, #8]
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	9301      	str	r3, [sp, #4]
 800af08:	2301      	movs	r3, #1
 800af0a:	9300      	str	r3, [sp, #0]
 800af0c:	2302      	movs	r3, #2
 800af0e:	2200      	movs	r2, #0
 800af10:	68f8      	ldr	r0, [r7, #12]
 800af12:	f002 fd6e 	bl	800d9f2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800af16:	2300      	movs	r3, #0
}
 800af18:	4618      	mov	r0, r3
 800af1a:	3710      	adds	r7, #16
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}

0800af20 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b088      	sub	sp, #32
 800af24:	af04      	add	r7, sp, #16
 800af26:	60f8      	str	r0, [r7, #12]
 800af28:	60b9      	str	r1, [r7, #8]
 800af2a:	4611      	mov	r1, r2
 800af2c:	461a      	mov	r2, r3
 800af2e:	460b      	mov	r3, r1
 800af30:	80fb      	strh	r3, [r7, #6]
 800af32:	4613      	mov	r3, r2
 800af34:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800af36:	7979      	ldrb	r1, [r7, #5]
 800af38:	2300      	movs	r3, #0
 800af3a:	9303      	str	r3, [sp, #12]
 800af3c:	88fb      	ldrh	r3, [r7, #6]
 800af3e:	9302      	str	r3, [sp, #8]
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	9301      	str	r3, [sp, #4]
 800af44:	2301      	movs	r3, #1
 800af46:	9300      	str	r3, [sp, #0]
 800af48:	2302      	movs	r3, #2
 800af4a:	2201      	movs	r2, #1
 800af4c:	68f8      	ldr	r0, [r7, #12]
 800af4e:	f002 fd50 	bl	800d9f2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800af52:	2300      	movs	r3, #0
}
 800af54:	4618      	mov	r0, r3
 800af56:	3710      	adds	r7, #16
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}

0800af5c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b086      	sub	sp, #24
 800af60:	af04      	add	r7, sp, #16
 800af62:	6078      	str	r0, [r7, #4]
 800af64:	4608      	mov	r0, r1
 800af66:	4611      	mov	r1, r2
 800af68:	461a      	mov	r2, r3
 800af6a:	4603      	mov	r3, r0
 800af6c:	70fb      	strb	r3, [r7, #3]
 800af6e:	460b      	mov	r3, r1
 800af70:	70bb      	strb	r3, [r7, #2]
 800af72:	4613      	mov	r3, r2
 800af74:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800af76:	7878      	ldrb	r0, [r7, #1]
 800af78:	78ba      	ldrb	r2, [r7, #2]
 800af7a:	78f9      	ldrb	r1, [r7, #3]
 800af7c:	8b3b      	ldrh	r3, [r7, #24]
 800af7e:	9302      	str	r3, [sp, #8]
 800af80:	7d3b      	ldrb	r3, [r7, #20]
 800af82:	9301      	str	r3, [sp, #4]
 800af84:	7c3b      	ldrb	r3, [r7, #16]
 800af86:	9300      	str	r3, [sp, #0]
 800af88:	4603      	mov	r3, r0
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f002 fce3 	bl	800d956 <USBH_LL_OpenPipe>

  return USBH_OK;
 800af90:	2300      	movs	r3, #0
}
 800af92:	4618      	mov	r0, r3
 800af94:	3708      	adds	r7, #8
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}

0800af9a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800af9a:	b580      	push	{r7, lr}
 800af9c:	b082      	sub	sp, #8
 800af9e:	af00      	add	r7, sp, #0
 800afa0:	6078      	str	r0, [r7, #4]
 800afa2:	460b      	mov	r3, r1
 800afa4:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800afa6:	78fb      	ldrb	r3, [r7, #3]
 800afa8:	4619      	mov	r1, r3
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f002 fd02 	bl	800d9b4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800afb0:	2300      	movs	r3, #0
}
 800afb2:	4618      	mov	r0, r3
 800afb4:	3708      	adds	r7, #8
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bd80      	pop	{r7, pc}

0800afba <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800afba:	b580      	push	{r7, lr}
 800afbc:	b084      	sub	sp, #16
 800afbe:	af00      	add	r7, sp, #0
 800afc0:	6078      	str	r0, [r7, #4]
 800afc2:	460b      	mov	r3, r1
 800afc4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f000 f836 	bl	800b038 <USBH_GetFreePipe>
 800afcc:	4603      	mov	r3, r0
 800afce:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800afd0:	89fb      	ldrh	r3, [r7, #14]
 800afd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800afd6:	4293      	cmp	r3, r2
 800afd8:	d00a      	beq.n	800aff0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800afda:	78fa      	ldrb	r2, [r7, #3]
 800afdc:	89fb      	ldrh	r3, [r7, #14]
 800afde:	f003 030f 	and.w	r3, r3, #15
 800afe2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800afe6:	6879      	ldr	r1, [r7, #4]
 800afe8:	33e0      	adds	r3, #224	; 0xe0
 800afea:	009b      	lsls	r3, r3, #2
 800afec:	440b      	add	r3, r1
 800afee:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800aff0:	89fb      	ldrh	r3, [r7, #14]
 800aff2:	b2db      	uxtb	r3, r3
}
 800aff4:	4618      	mov	r0, r3
 800aff6:	3710      	adds	r7, #16
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd80      	pop	{r7, pc}

0800affc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800affc:	b480      	push	{r7}
 800affe:	b083      	sub	sp, #12
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
 800b004:	460b      	mov	r3, r1
 800b006:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800b008:	78fb      	ldrb	r3, [r7, #3]
 800b00a:	2b0a      	cmp	r3, #10
 800b00c:	d80d      	bhi.n	800b02a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b00e:	78fb      	ldrb	r3, [r7, #3]
 800b010:	687a      	ldr	r2, [r7, #4]
 800b012:	33e0      	adds	r3, #224	; 0xe0
 800b014:	009b      	lsls	r3, r3, #2
 800b016:	4413      	add	r3, r2
 800b018:	685a      	ldr	r2, [r3, #4]
 800b01a:	78fb      	ldrb	r3, [r7, #3]
 800b01c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b020:	6879      	ldr	r1, [r7, #4]
 800b022:	33e0      	adds	r3, #224	; 0xe0
 800b024:	009b      	lsls	r3, r3, #2
 800b026:	440b      	add	r3, r1
 800b028:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b02a:	2300      	movs	r3, #0
}
 800b02c:	4618      	mov	r0, r3
 800b02e:	370c      	adds	r7, #12
 800b030:	46bd      	mov	sp, r7
 800b032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b036:	4770      	bx	lr

0800b038 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b038:	b480      	push	{r7}
 800b03a:	b085      	sub	sp, #20
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b040:	2300      	movs	r3, #0
 800b042:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800b044:	2300      	movs	r3, #0
 800b046:	73fb      	strb	r3, [r7, #15]
 800b048:	e00f      	b.n	800b06a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b04a:	7bfb      	ldrb	r3, [r7, #15]
 800b04c:	687a      	ldr	r2, [r7, #4]
 800b04e:	33e0      	adds	r3, #224	; 0xe0
 800b050:	009b      	lsls	r3, r3, #2
 800b052:	4413      	add	r3, r2
 800b054:	685b      	ldr	r3, [r3, #4]
 800b056:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d102      	bne.n	800b064 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b05e:	7bfb      	ldrb	r3, [r7, #15]
 800b060:	b29b      	uxth	r3, r3
 800b062:	e007      	b.n	800b074 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800b064:	7bfb      	ldrb	r3, [r7, #15]
 800b066:	3301      	adds	r3, #1
 800b068:	73fb      	strb	r3, [r7, #15]
 800b06a:	7bfb      	ldrb	r3, [r7, #15]
 800b06c:	2b0a      	cmp	r3, #10
 800b06e:	d9ec      	bls.n	800b04a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b070:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800b074:	4618      	mov	r0, r3
 800b076:	3714      	adds	r7, #20
 800b078:	46bd      	mov	sp, r7
 800b07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07e:	4770      	bx	lr

0800b080 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b080:	b480      	push	{r7}
 800b082:	b085      	sub	sp, #20
 800b084:	af00      	add	r7, sp, #0
 800b086:	4603      	mov	r3, r0
 800b088:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b08a:	2300      	movs	r3, #0
 800b08c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b08e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b092:	2b84      	cmp	r3, #132	; 0x84
 800b094:	d005      	beq.n	800b0a2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b096:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	4413      	add	r3, r2
 800b09e:	3303      	adds	r3, #3
 800b0a0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	3714      	adds	r7, #20
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ae:	4770      	bx	lr

0800b0b0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800b0b0:	b480      	push	{r7}
 800b0b2:	b083      	sub	sp, #12
 800b0b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b0b6:	f3ef 8305 	mrs	r3, IPSR
 800b0ba:	607b      	str	r3, [r7, #4]
  return(result);
 800b0bc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	bf14      	ite	ne
 800b0c2:	2301      	movne	r3, #1
 800b0c4:	2300      	moveq	r3, #0
 800b0c6:	b2db      	uxtb	r3, r3
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	370c      	adds	r7, #12
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d2:	4770      	bx	lr

0800b0d4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b0d8:	f001 f916 	bl	800c308 <vTaskStartScheduler>
  
  return osOK;
 800b0dc:	2300      	movs	r3, #0
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	bd80      	pop	{r7, pc}

0800b0e2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b0e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0e4:	b089      	sub	sp, #36	; 0x24
 800b0e6:	af04      	add	r7, sp, #16
 800b0e8:	6078      	str	r0, [r7, #4]
 800b0ea:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	695b      	ldr	r3, [r3, #20]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d020      	beq.n	800b136 <osThreadCreate+0x54>
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	699b      	ldr	r3, [r3, #24]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d01c      	beq.n	800b136 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	685c      	ldr	r4, [r3, #4]
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681d      	ldr	r5, [r3, #0]
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	691e      	ldr	r6, [r3, #16]
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b10e:	4618      	mov	r0, r3
 800b110:	f7ff ffb6 	bl	800b080 <makeFreeRtosPriority>
 800b114:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	695b      	ldr	r3, [r3, #20]
 800b11a:	687a      	ldr	r2, [r7, #4]
 800b11c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b11e:	9202      	str	r2, [sp, #8]
 800b120:	9301      	str	r3, [sp, #4]
 800b122:	9100      	str	r1, [sp, #0]
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	4632      	mov	r2, r6
 800b128:	4629      	mov	r1, r5
 800b12a:	4620      	mov	r0, r4
 800b12c:	f000 ff0e 	bl	800bf4c <xTaskCreateStatic>
 800b130:	4603      	mov	r3, r0
 800b132:	60fb      	str	r3, [r7, #12]
 800b134:	e01c      	b.n	800b170 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	685c      	ldr	r4, [r3, #4]
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b142:	b29e      	uxth	r6, r3
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b14a:	4618      	mov	r0, r3
 800b14c:	f7ff ff98 	bl	800b080 <makeFreeRtosPriority>
 800b150:	4602      	mov	r2, r0
 800b152:	f107 030c 	add.w	r3, r7, #12
 800b156:	9301      	str	r3, [sp, #4]
 800b158:	9200      	str	r2, [sp, #0]
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	4632      	mov	r2, r6
 800b15e:	4629      	mov	r1, r5
 800b160:	4620      	mov	r0, r4
 800b162:	f000 ff50 	bl	800c006 <xTaskCreate>
 800b166:	4603      	mov	r3, r0
 800b168:	2b01      	cmp	r3, #1
 800b16a:	d001      	beq.n	800b170 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b16c:	2300      	movs	r3, #0
 800b16e:	e000      	b.n	800b172 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b170:	68fb      	ldr	r3, [r7, #12]
}
 800b172:	4618      	mov	r0, r3
 800b174:	3714      	adds	r7, #20
 800b176:	46bd      	mov	sp, r7
 800b178:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b17a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b17a:	b580      	push	{r7, lr}
 800b17c:	b084      	sub	sp, #16
 800b17e:	af00      	add	r7, sp, #0
 800b180:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d001      	beq.n	800b190 <osDelay+0x16>
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	e000      	b.n	800b192 <osDelay+0x18>
 800b190:	2301      	movs	r3, #1
 800b192:	4618      	mov	r0, r3
 800b194:	f001 f884 	bl	800c2a0 <vTaskDelay>
  
  return osOK;
 800b198:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	3710      	adds	r7, #16
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}

0800b1a2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800b1a2:	b590      	push	{r4, r7, lr}
 800b1a4:	b085      	sub	sp, #20
 800b1a6:	af02      	add	r7, sp, #8
 800b1a8:	6078      	str	r0, [r7, #4]
 800b1aa:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	689b      	ldr	r3, [r3, #8]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d011      	beq.n	800b1d8 <osMessageCreate+0x36>
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	68db      	ldr	r3, [r3, #12]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d00d      	beq.n	800b1d8 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6818      	ldr	r0, [r3, #0]
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	6859      	ldr	r1, [r3, #4]
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	689a      	ldr	r2, [r3, #8]
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	68db      	ldr	r3, [r3, #12]
 800b1cc:	2400      	movs	r4, #0
 800b1ce:	9400      	str	r4, [sp, #0]
 800b1d0:	f000 f9e0 	bl	800b594 <xQueueGenericCreateStatic>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	e008      	b.n	800b1ea <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	6818      	ldr	r0, [r3, #0]
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	685b      	ldr	r3, [r3, #4]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	4619      	mov	r1, r3
 800b1e4:	f000 fa4e 	bl	800b684 <xQueueGenericCreate>
 800b1e8:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	370c      	adds	r7, #12
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd90      	pop	{r4, r7, pc}
	...

0800b1f4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b086      	sub	sp, #24
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	60f8      	str	r0, [r7, #12]
 800b1fc:	60b9      	str	r1, [r7, #8]
 800b1fe:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800b200:	2300      	movs	r3, #0
 800b202:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800b208:	697b      	ldr	r3, [r7, #20]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d101      	bne.n	800b212 <osMessagePut+0x1e>
    ticks = 1;
 800b20e:	2301      	movs	r3, #1
 800b210:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800b212:	f7ff ff4d 	bl	800b0b0 <inHandlerMode>
 800b216:	4603      	mov	r3, r0
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d018      	beq.n	800b24e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800b21c:	f107 0210 	add.w	r2, r7, #16
 800b220:	f107 0108 	add.w	r1, r7, #8
 800b224:	2300      	movs	r3, #0
 800b226:	68f8      	ldr	r0, [r7, #12]
 800b228:	f000 fb84 	bl	800b934 <xQueueGenericSendFromISR>
 800b22c:	4603      	mov	r3, r0
 800b22e:	2b01      	cmp	r3, #1
 800b230:	d001      	beq.n	800b236 <osMessagePut+0x42>
      return osErrorOS;
 800b232:	23ff      	movs	r3, #255	; 0xff
 800b234:	e018      	b.n	800b268 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b236:	693b      	ldr	r3, [r7, #16]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d014      	beq.n	800b266 <osMessagePut+0x72>
 800b23c:	4b0c      	ldr	r3, [pc, #48]	; (800b270 <osMessagePut+0x7c>)
 800b23e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b242:	601a      	str	r2, [r3, #0]
 800b244:	f3bf 8f4f 	dsb	sy
 800b248:	f3bf 8f6f 	isb	sy
 800b24c:	e00b      	b.n	800b266 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800b24e:	f107 0108 	add.w	r1, r7, #8
 800b252:	2300      	movs	r3, #0
 800b254:	697a      	ldr	r2, [r7, #20]
 800b256:	68f8      	ldr	r0, [r7, #12]
 800b258:	f000 fa6e 	bl	800b738 <xQueueGenericSend>
 800b25c:	4603      	mov	r3, r0
 800b25e:	2b01      	cmp	r3, #1
 800b260:	d001      	beq.n	800b266 <osMessagePut+0x72>
      return osErrorOS;
 800b262:	23ff      	movs	r3, #255	; 0xff
 800b264:	e000      	b.n	800b268 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800b266:	2300      	movs	r3, #0
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3718      	adds	r7, #24
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}
 800b270:	e000ed04 	.word	0xe000ed04

0800b274 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800b274:	b590      	push	{r4, r7, lr}
 800b276:	b08b      	sub	sp, #44	; 0x2c
 800b278:	af00      	add	r7, sp, #0
 800b27a:	60f8      	str	r0, [r7, #12]
 800b27c:	60b9      	str	r1, [r7, #8]
 800b27e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800b284:	2300      	movs	r3, #0
 800b286:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d10a      	bne.n	800b2a4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800b28e:	2380      	movs	r3, #128	; 0x80
 800b290:	617b      	str	r3, [r7, #20]
    return event;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	461c      	mov	r4, r3
 800b296:	f107 0314 	add.w	r3, r7, #20
 800b29a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b29e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b2a2:	e054      	b.n	800b34e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2b2:	d103      	bne.n	800b2bc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800b2b4:	f04f 33ff 	mov.w	r3, #4294967295
 800b2b8:	627b      	str	r3, [r7, #36]	; 0x24
 800b2ba:	e009      	b.n	800b2d0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d006      	beq.n	800b2d0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800b2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d101      	bne.n	800b2d0 <osMessageGet+0x5c>
      ticks = 1;
 800b2cc:	2301      	movs	r3, #1
 800b2ce:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800b2d0:	f7ff feee 	bl	800b0b0 <inHandlerMode>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d01c      	beq.n	800b314 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800b2da:	f107 0220 	add.w	r2, r7, #32
 800b2de:	f107 0314 	add.w	r3, r7, #20
 800b2e2:	3304      	adds	r3, #4
 800b2e4:	4619      	mov	r1, r3
 800b2e6:	68b8      	ldr	r0, [r7, #8]
 800b2e8:	f000 fca0 	bl	800bc2c <xQueueReceiveFromISR>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	2b01      	cmp	r3, #1
 800b2f0:	d102      	bne.n	800b2f8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800b2f2:	2310      	movs	r3, #16
 800b2f4:	617b      	str	r3, [r7, #20]
 800b2f6:	e001      	b.n	800b2fc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b2fc:	6a3b      	ldr	r3, [r7, #32]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d01d      	beq.n	800b33e <osMessageGet+0xca>
 800b302:	4b15      	ldr	r3, [pc, #84]	; (800b358 <osMessageGet+0xe4>)
 800b304:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b308:	601a      	str	r2, [r3, #0]
 800b30a:	f3bf 8f4f 	dsb	sy
 800b30e:	f3bf 8f6f 	isb	sy
 800b312:	e014      	b.n	800b33e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800b314:	f107 0314 	add.w	r3, r7, #20
 800b318:	3304      	adds	r3, #4
 800b31a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b31c:	4619      	mov	r1, r3
 800b31e:	68b8      	ldr	r0, [r7, #8]
 800b320:	f000 fba4 	bl	800ba6c <xQueueReceive>
 800b324:	4603      	mov	r3, r0
 800b326:	2b01      	cmp	r3, #1
 800b328:	d102      	bne.n	800b330 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800b32a:	2310      	movs	r3, #16
 800b32c:	617b      	str	r3, [r7, #20]
 800b32e:	e006      	b.n	800b33e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800b330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b332:	2b00      	cmp	r3, #0
 800b334:	d101      	bne.n	800b33a <osMessageGet+0xc6>
 800b336:	2300      	movs	r3, #0
 800b338:	e000      	b.n	800b33c <osMessageGet+0xc8>
 800b33a:	2340      	movs	r3, #64	; 0x40
 800b33c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	461c      	mov	r4, r3
 800b342:	f107 0314 	add.w	r3, r7, #20
 800b346:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b34a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800b34e:	68f8      	ldr	r0, [r7, #12]
 800b350:	372c      	adds	r7, #44	; 0x2c
 800b352:	46bd      	mov	sp, r7
 800b354:	bd90      	pop	{r4, r7, pc}
 800b356:	bf00      	nop
 800b358:	e000ed04 	.word	0xe000ed04

0800b35c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b35c:	b480      	push	{r7}
 800b35e:	b083      	sub	sp, #12
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f103 0208 	add.w	r2, r3, #8
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	f04f 32ff 	mov.w	r2, #4294967295
 800b374:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f103 0208 	add.w	r2, r3, #8
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f103 0208 	add.w	r2, r3, #8
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2200      	movs	r2, #0
 800b38e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b390:	bf00      	nop
 800b392:	370c      	adds	r7, #12
 800b394:	46bd      	mov	sp, r7
 800b396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39a:	4770      	bx	lr

0800b39c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b39c:	b480      	push	{r7}
 800b39e:	b083      	sub	sp, #12
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b3aa:	bf00      	nop
 800b3ac:	370c      	adds	r7, #12
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b4:	4770      	bx	lr

0800b3b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b3b6:	b480      	push	{r7}
 800b3b8:	b085      	sub	sp, #20
 800b3ba:	af00      	add	r7, sp, #0
 800b3bc:	6078      	str	r0, [r7, #4]
 800b3be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	685b      	ldr	r3, [r3, #4]
 800b3c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	68fa      	ldr	r2, [r7, #12]
 800b3ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	689a      	ldr	r2, [r3, #8]
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	689b      	ldr	r3, [r3, #8]
 800b3d8:	683a      	ldr	r2, [r7, #0]
 800b3da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	683a      	ldr	r2, [r7, #0]
 800b3e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	687a      	ldr	r2, [r7, #4]
 800b3e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	1c5a      	adds	r2, r3, #1
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	601a      	str	r2, [r3, #0]
}
 800b3f2:	bf00      	nop
 800b3f4:	3714      	adds	r7, #20
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fc:	4770      	bx	lr

0800b3fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b3fe:	b480      	push	{r7}
 800b400:	b085      	sub	sp, #20
 800b402:	af00      	add	r7, sp, #0
 800b404:	6078      	str	r0, [r7, #4]
 800b406:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b414:	d103      	bne.n	800b41e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	691b      	ldr	r3, [r3, #16]
 800b41a:	60fb      	str	r3, [r7, #12]
 800b41c:	e00c      	b.n	800b438 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	3308      	adds	r3, #8
 800b422:	60fb      	str	r3, [r7, #12]
 800b424:	e002      	b.n	800b42c <vListInsert+0x2e>
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	685b      	ldr	r3, [r3, #4]
 800b42a:	60fb      	str	r3, [r7, #12]
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	685b      	ldr	r3, [r3, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	68ba      	ldr	r2, [r7, #8]
 800b434:	429a      	cmp	r2, r3
 800b436:	d2f6      	bcs.n	800b426 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	685a      	ldr	r2, [r3, #4]
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b440:	683b      	ldr	r3, [r7, #0]
 800b442:	685b      	ldr	r3, [r3, #4]
 800b444:	683a      	ldr	r2, [r7, #0]
 800b446:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	68fa      	ldr	r2, [r7, #12]
 800b44c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	683a      	ldr	r2, [r7, #0]
 800b452:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	687a      	ldr	r2, [r7, #4]
 800b458:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	1c5a      	adds	r2, r3, #1
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	601a      	str	r2, [r3, #0]
}
 800b464:	bf00      	nop
 800b466:	3714      	adds	r7, #20
 800b468:	46bd      	mov	sp, r7
 800b46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46e:	4770      	bx	lr

0800b470 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b470:	b480      	push	{r7}
 800b472:	b085      	sub	sp, #20
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	691b      	ldr	r3, [r3, #16]
 800b47c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	685b      	ldr	r3, [r3, #4]
 800b482:	687a      	ldr	r2, [r7, #4]
 800b484:	6892      	ldr	r2, [r2, #8]
 800b486:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	689b      	ldr	r3, [r3, #8]
 800b48c:	687a      	ldr	r2, [r7, #4]
 800b48e:	6852      	ldr	r2, [r2, #4]
 800b490:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	685b      	ldr	r3, [r3, #4]
 800b496:	687a      	ldr	r2, [r7, #4]
 800b498:	429a      	cmp	r2, r3
 800b49a:	d103      	bne.n	800b4a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	689a      	ldr	r2, [r3, #8]
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	1e5a      	subs	r2, r3, #1
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	681b      	ldr	r3, [r3, #0]
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	3714      	adds	r7, #20
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c2:	4770      	bx	lr

0800b4c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b084      	sub	sp, #16
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
 800b4cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d10a      	bne.n	800b4ee <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b4d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4dc:	f383 8811 	msr	BASEPRI, r3
 800b4e0:	f3bf 8f6f 	isb	sy
 800b4e4:	f3bf 8f4f 	dsb	sy
 800b4e8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b4ea:	bf00      	nop
 800b4ec:	e7fe      	b.n	800b4ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b4ee:	f001 fd51 	bl	800cf94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	681a      	ldr	r2, [r3, #0]
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4fa:	68f9      	ldr	r1, [r7, #12]
 800b4fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b4fe:	fb01 f303 	mul.w	r3, r1, r3
 800b502:	441a      	add	r2, r3
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	2200      	movs	r2, #0
 800b50c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	681a      	ldr	r2, [r3, #0]
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	681a      	ldr	r2, [r3, #0]
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b51e:	3b01      	subs	r3, #1
 800b520:	68f9      	ldr	r1, [r7, #12]
 800b522:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b524:	fb01 f303 	mul.w	r3, r1, r3
 800b528:	441a      	add	r2, r3
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	22ff      	movs	r2, #255	; 0xff
 800b532:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	22ff      	movs	r2, #255	; 0xff
 800b53a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d114      	bne.n	800b56e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	691b      	ldr	r3, [r3, #16]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d01a      	beq.n	800b582 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	3310      	adds	r3, #16
 800b550:	4618      	mov	r0, r3
 800b552:	f001 f92b 	bl	800c7ac <xTaskRemoveFromEventList>
 800b556:	4603      	mov	r3, r0
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d012      	beq.n	800b582 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b55c:	4b0c      	ldr	r3, [pc, #48]	; (800b590 <xQueueGenericReset+0xcc>)
 800b55e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b562:	601a      	str	r2, [r3, #0]
 800b564:	f3bf 8f4f 	dsb	sy
 800b568:	f3bf 8f6f 	isb	sy
 800b56c:	e009      	b.n	800b582 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	3310      	adds	r3, #16
 800b572:	4618      	mov	r0, r3
 800b574:	f7ff fef2 	bl	800b35c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	3324      	adds	r3, #36	; 0x24
 800b57c:	4618      	mov	r0, r3
 800b57e:	f7ff feed 	bl	800b35c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b582:	f001 fd37 	bl	800cff4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b586:	2301      	movs	r3, #1
}
 800b588:	4618      	mov	r0, r3
 800b58a:	3710      	adds	r7, #16
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}
 800b590:	e000ed04 	.word	0xe000ed04

0800b594 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b594:	b580      	push	{r7, lr}
 800b596:	b08e      	sub	sp, #56	; 0x38
 800b598:	af02      	add	r7, sp, #8
 800b59a:	60f8      	str	r0, [r7, #12]
 800b59c:	60b9      	str	r1, [r7, #8]
 800b59e:	607a      	str	r2, [r7, #4]
 800b5a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d10a      	bne.n	800b5be <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b5a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ac:	f383 8811 	msr	BASEPRI, r3
 800b5b0:	f3bf 8f6f 	isb	sy
 800b5b4:	f3bf 8f4f 	dsb	sy
 800b5b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b5ba:	bf00      	nop
 800b5bc:	e7fe      	b.n	800b5bc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d10a      	bne.n	800b5da <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b5c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c8:	f383 8811 	msr	BASEPRI, r3
 800b5cc:	f3bf 8f6f 	isb	sy
 800b5d0:	f3bf 8f4f 	dsb	sy
 800b5d4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b5d6:	bf00      	nop
 800b5d8:	e7fe      	b.n	800b5d8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d002      	beq.n	800b5e6 <xQueueGenericCreateStatic+0x52>
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d001      	beq.n	800b5ea <xQueueGenericCreateStatic+0x56>
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	e000      	b.n	800b5ec <xQueueGenericCreateStatic+0x58>
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d10a      	bne.n	800b606 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5f4:	f383 8811 	msr	BASEPRI, r3
 800b5f8:	f3bf 8f6f 	isb	sy
 800b5fc:	f3bf 8f4f 	dsb	sy
 800b600:	623b      	str	r3, [r7, #32]
}
 800b602:	bf00      	nop
 800b604:	e7fe      	b.n	800b604 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d102      	bne.n	800b612 <xQueueGenericCreateStatic+0x7e>
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d101      	bne.n	800b616 <xQueueGenericCreateStatic+0x82>
 800b612:	2301      	movs	r3, #1
 800b614:	e000      	b.n	800b618 <xQueueGenericCreateStatic+0x84>
 800b616:	2300      	movs	r3, #0
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d10a      	bne.n	800b632 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b61c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b620:	f383 8811 	msr	BASEPRI, r3
 800b624:	f3bf 8f6f 	isb	sy
 800b628:	f3bf 8f4f 	dsb	sy
 800b62c:	61fb      	str	r3, [r7, #28]
}
 800b62e:	bf00      	nop
 800b630:	e7fe      	b.n	800b630 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b632:	2348      	movs	r3, #72	; 0x48
 800b634:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b636:	697b      	ldr	r3, [r7, #20]
 800b638:	2b48      	cmp	r3, #72	; 0x48
 800b63a:	d00a      	beq.n	800b652 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b63c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b640:	f383 8811 	msr	BASEPRI, r3
 800b644:	f3bf 8f6f 	isb	sy
 800b648:	f3bf 8f4f 	dsb	sy
 800b64c:	61bb      	str	r3, [r7, #24]
}
 800b64e:	bf00      	nop
 800b650:	e7fe      	b.n	800b650 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b652:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d00d      	beq.n	800b67a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b65e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b660:	2201      	movs	r2, #1
 800b662:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b666:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b66c:	9300      	str	r3, [sp, #0]
 800b66e:	4613      	mov	r3, r2
 800b670:	687a      	ldr	r2, [r7, #4]
 800b672:	68b9      	ldr	r1, [r7, #8]
 800b674:	68f8      	ldr	r0, [r7, #12]
 800b676:	f000 f83f 	bl	800b6f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b67c:	4618      	mov	r0, r3
 800b67e:	3730      	adds	r7, #48	; 0x30
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}

0800b684 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b684:	b580      	push	{r7, lr}
 800b686:	b08a      	sub	sp, #40	; 0x28
 800b688:	af02      	add	r7, sp, #8
 800b68a:	60f8      	str	r0, [r7, #12]
 800b68c:	60b9      	str	r1, [r7, #8]
 800b68e:	4613      	mov	r3, r2
 800b690:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d10a      	bne.n	800b6ae <xQueueGenericCreate+0x2a>
	__asm volatile
 800b698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b69c:	f383 8811 	msr	BASEPRI, r3
 800b6a0:	f3bf 8f6f 	isb	sy
 800b6a4:	f3bf 8f4f 	dsb	sy
 800b6a8:	613b      	str	r3, [r7, #16]
}
 800b6aa:	bf00      	nop
 800b6ac:	e7fe      	b.n	800b6ac <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	68ba      	ldr	r2, [r7, #8]
 800b6b2:	fb02 f303 	mul.w	r3, r2, r3
 800b6b6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b6b8:	69fb      	ldr	r3, [r7, #28]
 800b6ba:	3348      	adds	r3, #72	; 0x48
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f001 fd8b 	bl	800d1d8 <pvPortMalloc>
 800b6c2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b6c4:	69bb      	ldr	r3, [r7, #24]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d011      	beq.n	800b6ee <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b6ca:	69bb      	ldr	r3, [r7, #24]
 800b6cc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b6ce:	697b      	ldr	r3, [r7, #20]
 800b6d0:	3348      	adds	r3, #72	; 0x48
 800b6d2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b6d4:	69bb      	ldr	r3, [r7, #24]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b6dc:	79fa      	ldrb	r2, [r7, #7]
 800b6de:	69bb      	ldr	r3, [r7, #24]
 800b6e0:	9300      	str	r3, [sp, #0]
 800b6e2:	4613      	mov	r3, r2
 800b6e4:	697a      	ldr	r2, [r7, #20]
 800b6e6:	68b9      	ldr	r1, [r7, #8]
 800b6e8:	68f8      	ldr	r0, [r7, #12]
 800b6ea:	f000 f805 	bl	800b6f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b6ee:	69bb      	ldr	r3, [r7, #24]
	}
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	3720      	adds	r7, #32
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}

0800b6f8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b084      	sub	sp, #16
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	60f8      	str	r0, [r7, #12]
 800b700:	60b9      	str	r1, [r7, #8]
 800b702:	607a      	str	r2, [r7, #4]
 800b704:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d103      	bne.n	800b714 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b70c:	69bb      	ldr	r3, [r7, #24]
 800b70e:	69ba      	ldr	r2, [r7, #24]
 800b710:	601a      	str	r2, [r3, #0]
 800b712:	e002      	b.n	800b71a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b714:	69bb      	ldr	r3, [r7, #24]
 800b716:	687a      	ldr	r2, [r7, #4]
 800b718:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b71a:	69bb      	ldr	r3, [r7, #24]
 800b71c:	68fa      	ldr	r2, [r7, #12]
 800b71e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b720:	69bb      	ldr	r3, [r7, #24]
 800b722:	68ba      	ldr	r2, [r7, #8]
 800b724:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b726:	2101      	movs	r1, #1
 800b728:	69b8      	ldr	r0, [r7, #24]
 800b72a:	f7ff fecb 	bl	800b4c4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b72e:	bf00      	nop
 800b730:	3710      	adds	r7, #16
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}
	...

0800b738 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b08e      	sub	sp, #56	; 0x38
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	60f8      	str	r0, [r7, #12]
 800b740:	60b9      	str	r1, [r7, #8]
 800b742:	607a      	str	r2, [r7, #4]
 800b744:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b746:	2300      	movs	r3, #0
 800b748:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b74e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b750:	2b00      	cmp	r3, #0
 800b752:	d10a      	bne.n	800b76a <xQueueGenericSend+0x32>
	__asm volatile
 800b754:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b758:	f383 8811 	msr	BASEPRI, r3
 800b75c:	f3bf 8f6f 	isb	sy
 800b760:	f3bf 8f4f 	dsb	sy
 800b764:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b766:	bf00      	nop
 800b768:	e7fe      	b.n	800b768 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b76a:	68bb      	ldr	r3, [r7, #8]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d103      	bne.n	800b778 <xQueueGenericSend+0x40>
 800b770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b774:	2b00      	cmp	r3, #0
 800b776:	d101      	bne.n	800b77c <xQueueGenericSend+0x44>
 800b778:	2301      	movs	r3, #1
 800b77a:	e000      	b.n	800b77e <xQueueGenericSend+0x46>
 800b77c:	2300      	movs	r3, #0
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d10a      	bne.n	800b798 <xQueueGenericSend+0x60>
	__asm volatile
 800b782:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b786:	f383 8811 	msr	BASEPRI, r3
 800b78a:	f3bf 8f6f 	isb	sy
 800b78e:	f3bf 8f4f 	dsb	sy
 800b792:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b794:	bf00      	nop
 800b796:	e7fe      	b.n	800b796 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	2b02      	cmp	r3, #2
 800b79c:	d103      	bne.n	800b7a6 <xQueueGenericSend+0x6e>
 800b79e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7a2:	2b01      	cmp	r3, #1
 800b7a4:	d101      	bne.n	800b7aa <xQueueGenericSend+0x72>
 800b7a6:	2301      	movs	r3, #1
 800b7a8:	e000      	b.n	800b7ac <xQueueGenericSend+0x74>
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d10a      	bne.n	800b7c6 <xQueueGenericSend+0x8e>
	__asm volatile
 800b7b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b4:	f383 8811 	msr	BASEPRI, r3
 800b7b8:	f3bf 8f6f 	isb	sy
 800b7bc:	f3bf 8f4f 	dsb	sy
 800b7c0:	623b      	str	r3, [r7, #32]
}
 800b7c2:	bf00      	nop
 800b7c4:	e7fe      	b.n	800b7c4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b7c6:	f001 f9b1 	bl	800cb2c <xTaskGetSchedulerState>
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d102      	bne.n	800b7d6 <xQueueGenericSend+0x9e>
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d101      	bne.n	800b7da <xQueueGenericSend+0xa2>
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	e000      	b.n	800b7dc <xQueueGenericSend+0xa4>
 800b7da:	2300      	movs	r3, #0
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d10a      	bne.n	800b7f6 <xQueueGenericSend+0xbe>
	__asm volatile
 800b7e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7e4:	f383 8811 	msr	BASEPRI, r3
 800b7e8:	f3bf 8f6f 	isb	sy
 800b7ec:	f3bf 8f4f 	dsb	sy
 800b7f0:	61fb      	str	r3, [r7, #28]
}
 800b7f2:	bf00      	nop
 800b7f4:	e7fe      	b.n	800b7f4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b7f6:	f001 fbcd 	bl	800cf94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b7fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b802:	429a      	cmp	r2, r3
 800b804:	d302      	bcc.n	800b80c <xQueueGenericSend+0xd4>
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	2b02      	cmp	r3, #2
 800b80a:	d129      	bne.n	800b860 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b80c:	683a      	ldr	r2, [r7, #0]
 800b80e:	68b9      	ldr	r1, [r7, #8]
 800b810:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b812:	f000 fa8b 	bl	800bd2c <prvCopyDataToQueue>
 800b816:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b81a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d010      	beq.n	800b842 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b822:	3324      	adds	r3, #36	; 0x24
 800b824:	4618      	mov	r0, r3
 800b826:	f000 ffc1 	bl	800c7ac <xTaskRemoveFromEventList>
 800b82a:	4603      	mov	r3, r0
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d013      	beq.n	800b858 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b830:	4b3f      	ldr	r3, [pc, #252]	; (800b930 <xQueueGenericSend+0x1f8>)
 800b832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b836:	601a      	str	r2, [r3, #0]
 800b838:	f3bf 8f4f 	dsb	sy
 800b83c:	f3bf 8f6f 	isb	sy
 800b840:	e00a      	b.n	800b858 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b844:	2b00      	cmp	r3, #0
 800b846:	d007      	beq.n	800b858 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b848:	4b39      	ldr	r3, [pc, #228]	; (800b930 <xQueueGenericSend+0x1f8>)
 800b84a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b84e:	601a      	str	r2, [r3, #0]
 800b850:	f3bf 8f4f 	dsb	sy
 800b854:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b858:	f001 fbcc 	bl	800cff4 <vPortExitCritical>
				return pdPASS;
 800b85c:	2301      	movs	r3, #1
 800b85e:	e063      	b.n	800b928 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d103      	bne.n	800b86e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b866:	f001 fbc5 	bl	800cff4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b86a:	2300      	movs	r3, #0
 800b86c:	e05c      	b.n	800b928 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b86e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b870:	2b00      	cmp	r3, #0
 800b872:	d106      	bne.n	800b882 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b874:	f107 0314 	add.w	r3, r7, #20
 800b878:	4618      	mov	r0, r3
 800b87a:	f000 fff9 	bl	800c870 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b87e:	2301      	movs	r3, #1
 800b880:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b882:	f001 fbb7 	bl	800cff4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b886:	f000 fda9 	bl	800c3dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b88a:	f001 fb83 	bl	800cf94 <vPortEnterCritical>
 800b88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b890:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b894:	b25b      	sxtb	r3, r3
 800b896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b89a:	d103      	bne.n	800b8a4 <xQueueGenericSend+0x16c>
 800b89c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b89e:	2200      	movs	r2, #0
 800b8a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b8a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b8aa:	b25b      	sxtb	r3, r3
 800b8ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8b0:	d103      	bne.n	800b8ba <xQueueGenericSend+0x182>
 800b8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b8ba:	f001 fb9b 	bl	800cff4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b8be:	1d3a      	adds	r2, r7, #4
 800b8c0:	f107 0314 	add.w	r3, r7, #20
 800b8c4:	4611      	mov	r1, r2
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f000 ffe8 	bl	800c89c <xTaskCheckForTimeOut>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d124      	bne.n	800b91c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b8d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8d4:	f000 fb22 	bl	800bf1c <prvIsQueueFull>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d018      	beq.n	800b910 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8e0:	3310      	adds	r3, #16
 800b8e2:	687a      	ldr	r2, [r7, #4]
 800b8e4:	4611      	mov	r1, r2
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f000 ff3c 	bl	800c764 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b8ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8ee:	f000 faad 	bl	800be4c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b8f2:	f000 fd81 	bl	800c3f8 <xTaskResumeAll>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	f47f af7c 	bne.w	800b7f6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b8fe:	4b0c      	ldr	r3, [pc, #48]	; (800b930 <xQueueGenericSend+0x1f8>)
 800b900:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b904:	601a      	str	r2, [r3, #0]
 800b906:	f3bf 8f4f 	dsb	sy
 800b90a:	f3bf 8f6f 	isb	sy
 800b90e:	e772      	b.n	800b7f6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b910:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b912:	f000 fa9b 	bl	800be4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b916:	f000 fd6f 	bl	800c3f8 <xTaskResumeAll>
 800b91a:	e76c      	b.n	800b7f6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b91c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b91e:	f000 fa95 	bl	800be4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b922:	f000 fd69 	bl	800c3f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b926:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b928:	4618      	mov	r0, r3
 800b92a:	3738      	adds	r7, #56	; 0x38
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}
 800b930:	e000ed04 	.word	0xe000ed04

0800b934 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b090      	sub	sp, #64	; 0x40
 800b938:	af00      	add	r7, sp, #0
 800b93a:	60f8      	str	r0, [r7, #12]
 800b93c:	60b9      	str	r1, [r7, #8]
 800b93e:	607a      	str	r2, [r7, #4]
 800b940:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d10a      	bne.n	800b962 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b94c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b950:	f383 8811 	msr	BASEPRI, r3
 800b954:	f3bf 8f6f 	isb	sy
 800b958:	f3bf 8f4f 	dsb	sy
 800b95c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b95e:	bf00      	nop
 800b960:	e7fe      	b.n	800b960 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b962:	68bb      	ldr	r3, [r7, #8]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d103      	bne.n	800b970 <xQueueGenericSendFromISR+0x3c>
 800b968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b96a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d101      	bne.n	800b974 <xQueueGenericSendFromISR+0x40>
 800b970:	2301      	movs	r3, #1
 800b972:	e000      	b.n	800b976 <xQueueGenericSendFromISR+0x42>
 800b974:	2300      	movs	r3, #0
 800b976:	2b00      	cmp	r3, #0
 800b978:	d10a      	bne.n	800b990 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b97a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b97e:	f383 8811 	msr	BASEPRI, r3
 800b982:	f3bf 8f6f 	isb	sy
 800b986:	f3bf 8f4f 	dsb	sy
 800b98a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b98c:	bf00      	nop
 800b98e:	e7fe      	b.n	800b98e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	2b02      	cmp	r3, #2
 800b994:	d103      	bne.n	800b99e <xQueueGenericSendFromISR+0x6a>
 800b996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b99a:	2b01      	cmp	r3, #1
 800b99c:	d101      	bne.n	800b9a2 <xQueueGenericSendFromISR+0x6e>
 800b99e:	2301      	movs	r3, #1
 800b9a0:	e000      	b.n	800b9a4 <xQueueGenericSendFromISR+0x70>
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d10a      	bne.n	800b9be <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b9a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ac:	f383 8811 	msr	BASEPRI, r3
 800b9b0:	f3bf 8f6f 	isb	sy
 800b9b4:	f3bf 8f4f 	dsb	sy
 800b9b8:	623b      	str	r3, [r7, #32]
}
 800b9ba:	bf00      	nop
 800b9bc:	e7fe      	b.n	800b9bc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b9be:	f001 fbcb 	bl	800d158 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b9c2:	f3ef 8211 	mrs	r2, BASEPRI
 800b9c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ca:	f383 8811 	msr	BASEPRI, r3
 800b9ce:	f3bf 8f6f 	isb	sy
 800b9d2:	f3bf 8f4f 	dsb	sy
 800b9d6:	61fa      	str	r2, [r7, #28]
 800b9d8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b9da:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b9dc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b9de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b9e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9e6:	429a      	cmp	r2, r3
 800b9e8:	d302      	bcc.n	800b9f0 <xQueueGenericSendFromISR+0xbc>
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	2b02      	cmp	r3, #2
 800b9ee:	d12f      	bne.n	800ba50 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b9f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b9f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b9fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9fe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ba00:	683a      	ldr	r2, [r7, #0]
 800ba02:	68b9      	ldr	r1, [r7, #8]
 800ba04:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ba06:	f000 f991 	bl	800bd2c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ba0a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ba0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba12:	d112      	bne.n	800ba3a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ba14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d016      	beq.n	800ba4a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ba1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba1e:	3324      	adds	r3, #36	; 0x24
 800ba20:	4618      	mov	r0, r3
 800ba22:	f000 fec3 	bl	800c7ac <xTaskRemoveFromEventList>
 800ba26:	4603      	mov	r3, r0
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d00e      	beq.n	800ba4a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d00b      	beq.n	800ba4a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2201      	movs	r2, #1
 800ba36:	601a      	str	r2, [r3, #0]
 800ba38:	e007      	b.n	800ba4a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ba3a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ba3e:	3301      	adds	r3, #1
 800ba40:	b2db      	uxtb	r3, r3
 800ba42:	b25a      	sxtb	r2, r3
 800ba44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ba4a:	2301      	movs	r3, #1
 800ba4c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ba4e:	e001      	b.n	800ba54 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ba50:	2300      	movs	r3, #0
 800ba52:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba56:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ba58:	697b      	ldr	r3, [r7, #20]
 800ba5a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ba5e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ba60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ba62:	4618      	mov	r0, r3
 800ba64:	3740      	adds	r7, #64	; 0x40
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}
	...

0800ba6c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b08c      	sub	sp, #48	; 0x30
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	60f8      	str	r0, [r7, #12]
 800ba74:	60b9      	str	r1, [r7, #8]
 800ba76:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ba78:	2300      	movs	r3, #0
 800ba7a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ba80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d10a      	bne.n	800ba9c <xQueueReceive+0x30>
	__asm volatile
 800ba86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba8a:	f383 8811 	msr	BASEPRI, r3
 800ba8e:	f3bf 8f6f 	isb	sy
 800ba92:	f3bf 8f4f 	dsb	sy
 800ba96:	623b      	str	r3, [r7, #32]
}
 800ba98:	bf00      	nop
 800ba9a:	e7fe      	b.n	800ba9a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ba9c:	68bb      	ldr	r3, [r7, #8]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d103      	bne.n	800baaa <xQueueReceive+0x3e>
 800baa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d101      	bne.n	800baae <xQueueReceive+0x42>
 800baaa:	2301      	movs	r3, #1
 800baac:	e000      	b.n	800bab0 <xQueueReceive+0x44>
 800baae:	2300      	movs	r3, #0
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d10a      	bne.n	800baca <xQueueReceive+0x5e>
	__asm volatile
 800bab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab8:	f383 8811 	msr	BASEPRI, r3
 800babc:	f3bf 8f6f 	isb	sy
 800bac0:	f3bf 8f4f 	dsb	sy
 800bac4:	61fb      	str	r3, [r7, #28]
}
 800bac6:	bf00      	nop
 800bac8:	e7fe      	b.n	800bac8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800baca:	f001 f82f 	bl	800cb2c <xTaskGetSchedulerState>
 800bace:	4603      	mov	r3, r0
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d102      	bne.n	800bada <xQueueReceive+0x6e>
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d101      	bne.n	800bade <xQueueReceive+0x72>
 800bada:	2301      	movs	r3, #1
 800badc:	e000      	b.n	800bae0 <xQueueReceive+0x74>
 800bade:	2300      	movs	r3, #0
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d10a      	bne.n	800bafa <xQueueReceive+0x8e>
	__asm volatile
 800bae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bae8:	f383 8811 	msr	BASEPRI, r3
 800baec:	f3bf 8f6f 	isb	sy
 800baf0:	f3bf 8f4f 	dsb	sy
 800baf4:	61bb      	str	r3, [r7, #24]
}
 800baf6:	bf00      	nop
 800baf8:	e7fe      	b.n	800baf8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bafa:	f001 fa4b 	bl	800cf94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bafe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb02:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bb04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d01f      	beq.n	800bb4a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bb0a:	68b9      	ldr	r1, [r7, #8]
 800bb0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb0e:	f000 f977 	bl	800be00 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bb12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb14:	1e5a      	subs	r2, r3, #1
 800bb16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb18:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb1c:	691b      	ldr	r3, [r3, #16]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d00f      	beq.n	800bb42 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb24:	3310      	adds	r3, #16
 800bb26:	4618      	mov	r0, r3
 800bb28:	f000 fe40 	bl	800c7ac <xTaskRemoveFromEventList>
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d007      	beq.n	800bb42 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bb32:	4b3d      	ldr	r3, [pc, #244]	; (800bc28 <xQueueReceive+0x1bc>)
 800bb34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb38:	601a      	str	r2, [r3, #0]
 800bb3a:	f3bf 8f4f 	dsb	sy
 800bb3e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bb42:	f001 fa57 	bl	800cff4 <vPortExitCritical>
				return pdPASS;
 800bb46:	2301      	movs	r3, #1
 800bb48:	e069      	b.n	800bc1e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d103      	bne.n	800bb58 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bb50:	f001 fa50 	bl	800cff4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bb54:	2300      	movs	r3, #0
 800bb56:	e062      	b.n	800bc1e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bb58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d106      	bne.n	800bb6c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bb5e:	f107 0310 	add.w	r3, r7, #16
 800bb62:	4618      	mov	r0, r3
 800bb64:	f000 fe84 	bl	800c870 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bb68:	2301      	movs	r3, #1
 800bb6a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bb6c:	f001 fa42 	bl	800cff4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bb70:	f000 fc34 	bl	800c3dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bb74:	f001 fa0e 	bl	800cf94 <vPortEnterCritical>
 800bb78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb7e:	b25b      	sxtb	r3, r3
 800bb80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb84:	d103      	bne.n	800bb8e <xQueueReceive+0x122>
 800bb86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb88:	2200      	movs	r2, #0
 800bb8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bb8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb94:	b25b      	sxtb	r3, r3
 800bb96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb9a:	d103      	bne.n	800bba4 <xQueueReceive+0x138>
 800bb9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb9e:	2200      	movs	r2, #0
 800bba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bba4:	f001 fa26 	bl	800cff4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bba8:	1d3a      	adds	r2, r7, #4
 800bbaa:	f107 0310 	add.w	r3, r7, #16
 800bbae:	4611      	mov	r1, r2
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	f000 fe73 	bl	800c89c <xTaskCheckForTimeOut>
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d123      	bne.n	800bc04 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bbbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbbe:	f000 f997 	bl	800bef0 <prvIsQueueEmpty>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d017      	beq.n	800bbf8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bbc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbca:	3324      	adds	r3, #36	; 0x24
 800bbcc:	687a      	ldr	r2, [r7, #4]
 800bbce:	4611      	mov	r1, r2
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	f000 fdc7 	bl	800c764 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bbd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbd8:	f000 f938 	bl	800be4c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bbdc:	f000 fc0c 	bl	800c3f8 <xTaskResumeAll>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d189      	bne.n	800bafa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800bbe6:	4b10      	ldr	r3, [pc, #64]	; (800bc28 <xQueueReceive+0x1bc>)
 800bbe8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbec:	601a      	str	r2, [r3, #0]
 800bbee:	f3bf 8f4f 	dsb	sy
 800bbf2:	f3bf 8f6f 	isb	sy
 800bbf6:	e780      	b.n	800bafa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bbf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbfa:	f000 f927 	bl	800be4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bbfe:	f000 fbfb 	bl	800c3f8 <xTaskResumeAll>
 800bc02:	e77a      	b.n	800bafa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bc04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc06:	f000 f921 	bl	800be4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bc0a:	f000 fbf5 	bl	800c3f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bc0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc10:	f000 f96e 	bl	800bef0 <prvIsQueueEmpty>
 800bc14:	4603      	mov	r3, r0
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	f43f af6f 	beq.w	800bafa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bc1c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bc1e:	4618      	mov	r0, r3
 800bc20:	3730      	adds	r7, #48	; 0x30
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd80      	pop	{r7, pc}
 800bc26:	bf00      	nop
 800bc28:	e000ed04 	.word	0xe000ed04

0800bc2c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b08e      	sub	sp, #56	; 0x38
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	60f8      	str	r0, [r7, #12]
 800bc34:	60b9      	str	r1, [r7, #8]
 800bc36:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bc3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d10a      	bne.n	800bc58 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800bc42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc46:	f383 8811 	msr	BASEPRI, r3
 800bc4a:	f3bf 8f6f 	isb	sy
 800bc4e:	f3bf 8f4f 	dsb	sy
 800bc52:	623b      	str	r3, [r7, #32]
}
 800bc54:	bf00      	nop
 800bc56:	e7fe      	b.n	800bc56 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bc58:	68bb      	ldr	r3, [r7, #8]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d103      	bne.n	800bc66 <xQueueReceiveFromISR+0x3a>
 800bc5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d101      	bne.n	800bc6a <xQueueReceiveFromISR+0x3e>
 800bc66:	2301      	movs	r3, #1
 800bc68:	e000      	b.n	800bc6c <xQueueReceiveFromISR+0x40>
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d10a      	bne.n	800bc86 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800bc70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc74:	f383 8811 	msr	BASEPRI, r3
 800bc78:	f3bf 8f6f 	isb	sy
 800bc7c:	f3bf 8f4f 	dsb	sy
 800bc80:	61fb      	str	r3, [r7, #28]
}
 800bc82:	bf00      	nop
 800bc84:	e7fe      	b.n	800bc84 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bc86:	f001 fa67 	bl	800d158 <vPortValidateInterruptPriority>
	__asm volatile
 800bc8a:	f3ef 8211 	mrs	r2, BASEPRI
 800bc8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc92:	f383 8811 	msr	BASEPRI, r3
 800bc96:	f3bf 8f6f 	isb	sy
 800bc9a:	f3bf 8f4f 	dsb	sy
 800bc9e:	61ba      	str	r2, [r7, #24]
 800bca0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800bca2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bca4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcaa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bcac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d02f      	beq.n	800bd12 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800bcb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bcb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bcbc:	68b9      	ldr	r1, [r7, #8]
 800bcbe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bcc0:	f000 f89e 	bl	800be00 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bcc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcc6:	1e5a      	subs	r2, r3, #1
 800bcc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcca:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800bccc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bcd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcd4:	d112      	bne.n	800bcfc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bcd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcd8:	691b      	ldr	r3, [r3, #16]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d016      	beq.n	800bd0c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bcde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bce0:	3310      	adds	r3, #16
 800bce2:	4618      	mov	r0, r3
 800bce4:	f000 fd62 	bl	800c7ac <xTaskRemoveFromEventList>
 800bce8:	4603      	mov	r3, r0
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d00e      	beq.n	800bd0c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d00b      	beq.n	800bd0c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2201      	movs	r2, #1
 800bcf8:	601a      	str	r2, [r3, #0]
 800bcfa:	e007      	b.n	800bd0c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800bcfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd00:	3301      	adds	r3, #1
 800bd02:	b2db      	uxtb	r3, r3
 800bd04:	b25a      	sxtb	r2, r3
 800bd06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800bd0c:	2301      	movs	r3, #1
 800bd0e:	637b      	str	r3, [r7, #52]	; 0x34
 800bd10:	e001      	b.n	800bd16 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800bd12:	2300      	movs	r3, #0
 800bd14:	637b      	str	r3, [r7, #52]	; 0x34
 800bd16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd18:	613b      	str	r3, [r7, #16]
	__asm volatile
 800bd1a:	693b      	ldr	r3, [r7, #16]
 800bd1c:	f383 8811 	msr	BASEPRI, r3
}
 800bd20:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bd22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bd24:	4618      	mov	r0, r3
 800bd26:	3738      	adds	r7, #56	; 0x38
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}

0800bd2c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b086      	sub	sp, #24
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	60f8      	str	r0, [r7, #12]
 800bd34:	60b9      	str	r1, [r7, #8]
 800bd36:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bd38:	2300      	movs	r3, #0
 800bd3a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd40:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d10d      	bne.n	800bd66 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d14d      	bne.n	800bdee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	689b      	ldr	r3, [r3, #8]
 800bd56:	4618      	mov	r0, r3
 800bd58:	f000 ff06 	bl	800cb68 <xTaskPriorityDisinherit>
 800bd5c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	2200      	movs	r2, #0
 800bd62:	609a      	str	r2, [r3, #8]
 800bd64:	e043      	b.n	800bdee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d119      	bne.n	800bda0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	6858      	ldr	r0, [r3, #4]
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd74:	461a      	mov	r2, r3
 800bd76:	68b9      	ldr	r1, [r7, #8]
 800bd78:	f001 ff56 	bl	800dc28 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	685a      	ldr	r2, [r3, #4]
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd84:	441a      	add	r2, r3
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	685a      	ldr	r2, [r3, #4]
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	689b      	ldr	r3, [r3, #8]
 800bd92:	429a      	cmp	r2, r3
 800bd94:	d32b      	bcc.n	800bdee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	681a      	ldr	r2, [r3, #0]
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	605a      	str	r2, [r3, #4]
 800bd9e:	e026      	b.n	800bdee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	68d8      	ldr	r0, [r3, #12]
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bda8:	461a      	mov	r2, r3
 800bdaa:	68b9      	ldr	r1, [r7, #8]
 800bdac:	f001 ff3c 	bl	800dc28 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	68da      	ldr	r2, [r3, #12]
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdb8:	425b      	negs	r3, r3
 800bdba:	441a      	add	r2, r3
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	68da      	ldr	r2, [r3, #12]
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	429a      	cmp	r2, r3
 800bdca:	d207      	bcs.n	800bddc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	689a      	ldr	r2, [r3, #8]
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdd4:	425b      	negs	r3, r3
 800bdd6:	441a      	add	r2, r3
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2b02      	cmp	r3, #2
 800bde0:	d105      	bne.n	800bdee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bde2:	693b      	ldr	r3, [r7, #16]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d002      	beq.n	800bdee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bde8:	693b      	ldr	r3, [r7, #16]
 800bdea:	3b01      	subs	r3, #1
 800bdec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bdee:	693b      	ldr	r3, [r7, #16]
 800bdf0:	1c5a      	adds	r2, r3, #1
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bdf6:	697b      	ldr	r3, [r7, #20]
}
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	3718      	adds	r7, #24
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	bd80      	pop	{r7, pc}

0800be00 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b082      	sub	sp, #8
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
 800be08:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d018      	beq.n	800be44 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	68da      	ldr	r2, [r3, #12]
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be1a:	441a      	add	r2, r3
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	68da      	ldr	r2, [r3, #12]
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	689b      	ldr	r3, [r3, #8]
 800be28:	429a      	cmp	r2, r3
 800be2a:	d303      	bcc.n	800be34 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681a      	ldr	r2, [r3, #0]
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	68d9      	ldr	r1, [r3, #12]
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be3c:	461a      	mov	r2, r3
 800be3e:	6838      	ldr	r0, [r7, #0]
 800be40:	f001 fef2 	bl	800dc28 <memcpy>
	}
}
 800be44:	bf00      	nop
 800be46:	3708      	adds	r7, #8
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd80      	pop	{r7, pc}

0800be4c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b084      	sub	sp, #16
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800be54:	f001 f89e 	bl	800cf94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be5e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800be60:	e011      	b.n	800be86 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be66:	2b00      	cmp	r3, #0
 800be68:	d012      	beq.n	800be90 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	3324      	adds	r3, #36	; 0x24
 800be6e:	4618      	mov	r0, r3
 800be70:	f000 fc9c 	bl	800c7ac <xTaskRemoveFromEventList>
 800be74:	4603      	mov	r3, r0
 800be76:	2b00      	cmp	r3, #0
 800be78:	d001      	beq.n	800be7e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800be7a:	f000 fd71 	bl	800c960 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800be7e:	7bfb      	ldrb	r3, [r7, #15]
 800be80:	3b01      	subs	r3, #1
 800be82:	b2db      	uxtb	r3, r3
 800be84:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800be86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	dce9      	bgt.n	800be62 <prvUnlockQueue+0x16>
 800be8e:	e000      	b.n	800be92 <prvUnlockQueue+0x46>
					break;
 800be90:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	22ff      	movs	r2, #255	; 0xff
 800be96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800be9a:	f001 f8ab 	bl	800cff4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800be9e:	f001 f879 	bl	800cf94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bea8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800beaa:	e011      	b.n	800bed0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	691b      	ldr	r3, [r3, #16]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d012      	beq.n	800beda <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	3310      	adds	r3, #16
 800beb8:	4618      	mov	r0, r3
 800beba:	f000 fc77 	bl	800c7ac <xTaskRemoveFromEventList>
 800bebe:	4603      	mov	r3, r0
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d001      	beq.n	800bec8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bec4:	f000 fd4c 	bl	800c960 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bec8:	7bbb      	ldrb	r3, [r7, #14]
 800beca:	3b01      	subs	r3, #1
 800becc:	b2db      	uxtb	r3, r3
 800bece:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bed0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	dce9      	bgt.n	800beac <prvUnlockQueue+0x60>
 800bed8:	e000      	b.n	800bedc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800beda:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	22ff      	movs	r2, #255	; 0xff
 800bee0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bee4:	f001 f886 	bl	800cff4 <vPortExitCritical>
}
 800bee8:	bf00      	nop
 800beea:	3710      	adds	r7, #16
 800beec:	46bd      	mov	sp, r7
 800beee:	bd80      	pop	{r7, pc}

0800bef0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b084      	sub	sp, #16
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bef8:	f001 f84c 	bl	800cf94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d102      	bne.n	800bf0a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bf04:	2301      	movs	r3, #1
 800bf06:	60fb      	str	r3, [r7, #12]
 800bf08:	e001      	b.n	800bf0e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bf0e:	f001 f871 	bl	800cff4 <vPortExitCritical>

	return xReturn;
 800bf12:	68fb      	ldr	r3, [r7, #12]
}
 800bf14:	4618      	mov	r0, r3
 800bf16:	3710      	adds	r7, #16
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}

0800bf1c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b084      	sub	sp, #16
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bf24:	f001 f836 	bl	800cf94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf30:	429a      	cmp	r2, r3
 800bf32:	d102      	bne.n	800bf3a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bf34:	2301      	movs	r3, #1
 800bf36:	60fb      	str	r3, [r7, #12]
 800bf38:	e001      	b.n	800bf3e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bf3e:	f001 f859 	bl	800cff4 <vPortExitCritical>

	return xReturn;
 800bf42:	68fb      	ldr	r3, [r7, #12]
}
 800bf44:	4618      	mov	r0, r3
 800bf46:	3710      	adds	r7, #16
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}

0800bf4c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b08e      	sub	sp, #56	; 0x38
 800bf50:	af04      	add	r7, sp, #16
 800bf52:	60f8      	str	r0, [r7, #12]
 800bf54:	60b9      	str	r1, [r7, #8]
 800bf56:	607a      	str	r2, [r7, #4]
 800bf58:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bf5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d10a      	bne.n	800bf76 <xTaskCreateStatic+0x2a>
	__asm volatile
 800bf60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf64:	f383 8811 	msr	BASEPRI, r3
 800bf68:	f3bf 8f6f 	isb	sy
 800bf6c:	f3bf 8f4f 	dsb	sy
 800bf70:	623b      	str	r3, [r7, #32]
}
 800bf72:	bf00      	nop
 800bf74:	e7fe      	b.n	800bf74 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bf76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d10a      	bne.n	800bf92 <xTaskCreateStatic+0x46>
	__asm volatile
 800bf7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf80:	f383 8811 	msr	BASEPRI, r3
 800bf84:	f3bf 8f6f 	isb	sy
 800bf88:	f3bf 8f4f 	dsb	sy
 800bf8c:	61fb      	str	r3, [r7, #28]
}
 800bf8e:	bf00      	nop
 800bf90:	e7fe      	b.n	800bf90 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bf92:	23b4      	movs	r3, #180	; 0xb4
 800bf94:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bf96:	693b      	ldr	r3, [r7, #16]
 800bf98:	2bb4      	cmp	r3, #180	; 0xb4
 800bf9a:	d00a      	beq.n	800bfb2 <xTaskCreateStatic+0x66>
	__asm volatile
 800bf9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfa0:	f383 8811 	msr	BASEPRI, r3
 800bfa4:	f3bf 8f6f 	isb	sy
 800bfa8:	f3bf 8f4f 	dsb	sy
 800bfac:	61bb      	str	r3, [r7, #24]
}
 800bfae:	bf00      	nop
 800bfb0:	e7fe      	b.n	800bfb0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bfb2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bfb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d01e      	beq.n	800bff8 <xTaskCreateStatic+0xac>
 800bfba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d01b      	beq.n	800bff8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bfc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfc2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bfc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bfc8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bfca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfcc:	2202      	movs	r2, #2
 800bfce:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	9303      	str	r3, [sp, #12]
 800bfd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfd8:	9302      	str	r3, [sp, #8]
 800bfda:	f107 0314 	add.w	r3, r7, #20
 800bfde:	9301      	str	r3, [sp, #4]
 800bfe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe2:	9300      	str	r3, [sp, #0]
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	687a      	ldr	r2, [r7, #4]
 800bfe8:	68b9      	ldr	r1, [r7, #8]
 800bfea:	68f8      	ldr	r0, [r7, #12]
 800bfec:	f000 f850 	bl	800c090 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bff0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bff2:	f000 f8eb 	bl	800c1cc <prvAddNewTaskToReadyList>
 800bff6:	e001      	b.n	800bffc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800bff8:	2300      	movs	r3, #0
 800bffa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bffc:	697b      	ldr	r3, [r7, #20]
	}
 800bffe:	4618      	mov	r0, r3
 800c000:	3728      	adds	r7, #40	; 0x28
 800c002:	46bd      	mov	sp, r7
 800c004:	bd80      	pop	{r7, pc}

0800c006 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c006:	b580      	push	{r7, lr}
 800c008:	b08c      	sub	sp, #48	; 0x30
 800c00a:	af04      	add	r7, sp, #16
 800c00c:	60f8      	str	r0, [r7, #12]
 800c00e:	60b9      	str	r1, [r7, #8]
 800c010:	603b      	str	r3, [r7, #0]
 800c012:	4613      	mov	r3, r2
 800c014:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c016:	88fb      	ldrh	r3, [r7, #6]
 800c018:	009b      	lsls	r3, r3, #2
 800c01a:	4618      	mov	r0, r3
 800c01c:	f001 f8dc 	bl	800d1d8 <pvPortMalloc>
 800c020:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c022:	697b      	ldr	r3, [r7, #20]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d00e      	beq.n	800c046 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c028:	20b4      	movs	r0, #180	; 0xb4
 800c02a:	f001 f8d5 	bl	800d1d8 <pvPortMalloc>
 800c02e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c030:	69fb      	ldr	r3, [r7, #28]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d003      	beq.n	800c03e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c036:	69fb      	ldr	r3, [r7, #28]
 800c038:	697a      	ldr	r2, [r7, #20]
 800c03a:	631a      	str	r2, [r3, #48]	; 0x30
 800c03c:	e005      	b.n	800c04a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c03e:	6978      	ldr	r0, [r7, #20]
 800c040:	f001 f996 	bl	800d370 <vPortFree>
 800c044:	e001      	b.n	800c04a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c046:	2300      	movs	r3, #0
 800c048:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c04a:	69fb      	ldr	r3, [r7, #28]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d017      	beq.n	800c080 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c050:	69fb      	ldr	r3, [r7, #28]
 800c052:	2200      	movs	r2, #0
 800c054:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c058:	88fa      	ldrh	r2, [r7, #6]
 800c05a:	2300      	movs	r3, #0
 800c05c:	9303      	str	r3, [sp, #12]
 800c05e:	69fb      	ldr	r3, [r7, #28]
 800c060:	9302      	str	r3, [sp, #8]
 800c062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c064:	9301      	str	r3, [sp, #4]
 800c066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c068:	9300      	str	r3, [sp, #0]
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	68b9      	ldr	r1, [r7, #8]
 800c06e:	68f8      	ldr	r0, [r7, #12]
 800c070:	f000 f80e 	bl	800c090 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c074:	69f8      	ldr	r0, [r7, #28]
 800c076:	f000 f8a9 	bl	800c1cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c07a:	2301      	movs	r3, #1
 800c07c:	61bb      	str	r3, [r7, #24]
 800c07e:	e002      	b.n	800c086 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c080:	f04f 33ff 	mov.w	r3, #4294967295
 800c084:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c086:	69bb      	ldr	r3, [r7, #24]
	}
 800c088:	4618      	mov	r0, r3
 800c08a:	3720      	adds	r7, #32
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bd80      	pop	{r7, pc}

0800c090 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b088      	sub	sp, #32
 800c094:	af00      	add	r7, sp, #0
 800c096:	60f8      	str	r0, [r7, #12]
 800c098:	60b9      	str	r1, [r7, #8]
 800c09a:	607a      	str	r2, [r7, #4]
 800c09c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c0a8:	3b01      	subs	r3, #1
 800c0aa:	009b      	lsls	r3, r3, #2
 800c0ac:	4413      	add	r3, r2
 800c0ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c0b0:	69bb      	ldr	r3, [r7, #24]
 800c0b2:	f023 0307 	bic.w	r3, r3, #7
 800c0b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c0b8:	69bb      	ldr	r3, [r7, #24]
 800c0ba:	f003 0307 	and.w	r3, r3, #7
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d00a      	beq.n	800c0d8 <prvInitialiseNewTask+0x48>
	__asm volatile
 800c0c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c6:	f383 8811 	msr	BASEPRI, r3
 800c0ca:	f3bf 8f6f 	isb	sy
 800c0ce:	f3bf 8f4f 	dsb	sy
 800c0d2:	617b      	str	r3, [r7, #20]
}
 800c0d4:	bf00      	nop
 800c0d6:	e7fe      	b.n	800c0d6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d01f      	beq.n	800c11e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c0de:	2300      	movs	r3, #0
 800c0e0:	61fb      	str	r3, [r7, #28]
 800c0e2:	e012      	b.n	800c10a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c0e4:	68ba      	ldr	r2, [r7, #8]
 800c0e6:	69fb      	ldr	r3, [r7, #28]
 800c0e8:	4413      	add	r3, r2
 800c0ea:	7819      	ldrb	r1, [r3, #0]
 800c0ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c0ee:	69fb      	ldr	r3, [r7, #28]
 800c0f0:	4413      	add	r3, r2
 800c0f2:	3334      	adds	r3, #52	; 0x34
 800c0f4:	460a      	mov	r2, r1
 800c0f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c0f8:	68ba      	ldr	r2, [r7, #8]
 800c0fa:	69fb      	ldr	r3, [r7, #28]
 800c0fc:	4413      	add	r3, r2
 800c0fe:	781b      	ldrb	r3, [r3, #0]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d006      	beq.n	800c112 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c104:	69fb      	ldr	r3, [r7, #28]
 800c106:	3301      	adds	r3, #1
 800c108:	61fb      	str	r3, [r7, #28]
 800c10a:	69fb      	ldr	r3, [r7, #28]
 800c10c:	2b0f      	cmp	r3, #15
 800c10e:	d9e9      	bls.n	800c0e4 <prvInitialiseNewTask+0x54>
 800c110:	e000      	b.n	800c114 <prvInitialiseNewTask+0x84>
			{
				break;
 800c112:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c116:	2200      	movs	r2, #0
 800c118:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c11c:	e003      	b.n	800c126 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c120:	2200      	movs	r2, #0
 800c122:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c128:	2b06      	cmp	r3, #6
 800c12a:	d901      	bls.n	800c130 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c12c:	2306      	movs	r3, #6
 800c12e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c132:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c134:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c138:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c13a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c13c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c13e:	2200      	movs	r2, #0
 800c140:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c144:	3304      	adds	r3, #4
 800c146:	4618      	mov	r0, r3
 800c148:	f7ff f928 	bl	800b39c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c14c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c14e:	3318      	adds	r3, #24
 800c150:	4618      	mov	r0, r3
 800c152:	f7ff f923 	bl	800b39c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c158:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c15a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c15e:	f1c3 0207 	rsb	r2, r3, #7
 800c162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c164:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c168:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c16a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c16c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c16e:	2200      	movs	r2, #0
 800c170:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c176:	2200      	movs	r2, #0
 800c178:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c17e:	334c      	adds	r3, #76	; 0x4c
 800c180:	2260      	movs	r2, #96	; 0x60
 800c182:	2100      	movs	r1, #0
 800c184:	4618      	mov	r0, r3
 800c186:	f001 fd5d 	bl	800dc44 <memset>
 800c18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c18c:	4a0c      	ldr	r2, [pc, #48]	; (800c1c0 <prvInitialiseNewTask+0x130>)
 800c18e:	651a      	str	r2, [r3, #80]	; 0x50
 800c190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c192:	4a0c      	ldr	r2, [pc, #48]	; (800c1c4 <prvInitialiseNewTask+0x134>)
 800c194:	655a      	str	r2, [r3, #84]	; 0x54
 800c196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c198:	4a0b      	ldr	r2, [pc, #44]	; (800c1c8 <prvInitialiseNewTask+0x138>)
 800c19a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c19c:	683a      	ldr	r2, [r7, #0]
 800c19e:	68f9      	ldr	r1, [r7, #12]
 800c1a0:	69b8      	ldr	r0, [r7, #24]
 800c1a2:	f000 fdcd 	bl	800cd40 <pxPortInitialiseStack>
 800c1a6:	4602      	mov	r2, r0
 800c1a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1aa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c1ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d002      	beq.n	800c1b8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c1b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c1b6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c1b8:	bf00      	nop
 800c1ba:	3720      	adds	r7, #32
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}
 800c1c0:	0800e6c4 	.word	0x0800e6c4
 800c1c4:	0800e6e4 	.word	0x0800e6e4
 800c1c8:	0800e6a4 	.word	0x0800e6a4

0800c1cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b082      	sub	sp, #8
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c1d4:	f000 fede 	bl	800cf94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c1d8:	4b2a      	ldr	r3, [pc, #168]	; (800c284 <prvAddNewTaskToReadyList+0xb8>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	3301      	adds	r3, #1
 800c1de:	4a29      	ldr	r2, [pc, #164]	; (800c284 <prvAddNewTaskToReadyList+0xb8>)
 800c1e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c1e2:	4b29      	ldr	r3, [pc, #164]	; (800c288 <prvAddNewTaskToReadyList+0xbc>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d109      	bne.n	800c1fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c1ea:	4a27      	ldr	r2, [pc, #156]	; (800c288 <prvAddNewTaskToReadyList+0xbc>)
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c1f0:	4b24      	ldr	r3, [pc, #144]	; (800c284 <prvAddNewTaskToReadyList+0xb8>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	2b01      	cmp	r3, #1
 800c1f6:	d110      	bne.n	800c21a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c1f8:	f000 fbd6 	bl	800c9a8 <prvInitialiseTaskLists>
 800c1fc:	e00d      	b.n	800c21a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c1fe:	4b23      	ldr	r3, [pc, #140]	; (800c28c <prvAddNewTaskToReadyList+0xc0>)
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d109      	bne.n	800c21a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c206:	4b20      	ldr	r3, [pc, #128]	; (800c288 <prvAddNewTaskToReadyList+0xbc>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c210:	429a      	cmp	r2, r3
 800c212:	d802      	bhi.n	800c21a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c214:	4a1c      	ldr	r2, [pc, #112]	; (800c288 <prvAddNewTaskToReadyList+0xbc>)
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c21a:	4b1d      	ldr	r3, [pc, #116]	; (800c290 <prvAddNewTaskToReadyList+0xc4>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	3301      	adds	r3, #1
 800c220:	4a1b      	ldr	r2, [pc, #108]	; (800c290 <prvAddNewTaskToReadyList+0xc4>)
 800c222:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c228:	2201      	movs	r2, #1
 800c22a:	409a      	lsls	r2, r3
 800c22c:	4b19      	ldr	r3, [pc, #100]	; (800c294 <prvAddNewTaskToReadyList+0xc8>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	4313      	orrs	r3, r2
 800c232:	4a18      	ldr	r2, [pc, #96]	; (800c294 <prvAddNewTaskToReadyList+0xc8>)
 800c234:	6013      	str	r3, [r2, #0]
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c23a:	4613      	mov	r3, r2
 800c23c:	009b      	lsls	r3, r3, #2
 800c23e:	4413      	add	r3, r2
 800c240:	009b      	lsls	r3, r3, #2
 800c242:	4a15      	ldr	r2, [pc, #84]	; (800c298 <prvAddNewTaskToReadyList+0xcc>)
 800c244:	441a      	add	r2, r3
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	3304      	adds	r3, #4
 800c24a:	4619      	mov	r1, r3
 800c24c:	4610      	mov	r0, r2
 800c24e:	f7ff f8b2 	bl	800b3b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c252:	f000 fecf 	bl	800cff4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c256:	4b0d      	ldr	r3, [pc, #52]	; (800c28c <prvAddNewTaskToReadyList+0xc0>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d00e      	beq.n	800c27c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c25e:	4b0a      	ldr	r3, [pc, #40]	; (800c288 <prvAddNewTaskToReadyList+0xbc>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c268:	429a      	cmp	r2, r3
 800c26a:	d207      	bcs.n	800c27c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c26c:	4b0b      	ldr	r3, [pc, #44]	; (800c29c <prvAddNewTaskToReadyList+0xd0>)
 800c26e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c272:	601a      	str	r2, [r3, #0]
 800c274:	f3bf 8f4f 	dsb	sy
 800c278:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c27c:	bf00      	nop
 800c27e:	3708      	adds	r7, #8
 800c280:	46bd      	mov	sp, r7
 800c282:	bd80      	pop	{r7, pc}
 800c284:	20000468 	.word	0x20000468
 800c288:	20000368 	.word	0x20000368
 800c28c:	20000474 	.word	0x20000474
 800c290:	20000484 	.word	0x20000484
 800c294:	20000470 	.word	0x20000470
 800c298:	2000036c 	.word	0x2000036c
 800c29c:	e000ed04 	.word	0xe000ed04

0800c2a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b084      	sub	sp, #16
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d017      	beq.n	800c2e2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c2b2:	4b13      	ldr	r3, [pc, #76]	; (800c300 <vTaskDelay+0x60>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d00a      	beq.n	800c2d0 <vTaskDelay+0x30>
	__asm volatile
 800c2ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2be:	f383 8811 	msr	BASEPRI, r3
 800c2c2:	f3bf 8f6f 	isb	sy
 800c2c6:	f3bf 8f4f 	dsb	sy
 800c2ca:	60bb      	str	r3, [r7, #8]
}
 800c2cc:	bf00      	nop
 800c2ce:	e7fe      	b.n	800c2ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c2d0:	f000 f884 	bl	800c3dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c2d4:	2100      	movs	r1, #0
 800c2d6:	6878      	ldr	r0, [r7, #4]
 800c2d8:	f000 fccc 	bl	800cc74 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c2dc:	f000 f88c 	bl	800c3f8 <xTaskResumeAll>
 800c2e0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d107      	bne.n	800c2f8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c2e8:	4b06      	ldr	r3, [pc, #24]	; (800c304 <vTaskDelay+0x64>)
 800c2ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2ee:	601a      	str	r2, [r3, #0]
 800c2f0:	f3bf 8f4f 	dsb	sy
 800c2f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c2f8:	bf00      	nop
 800c2fa:	3710      	adds	r7, #16
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	bd80      	pop	{r7, pc}
 800c300:	20000490 	.word	0x20000490
 800c304:	e000ed04 	.word	0xe000ed04

0800c308 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b08a      	sub	sp, #40	; 0x28
 800c30c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c30e:	2300      	movs	r3, #0
 800c310:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c312:	2300      	movs	r3, #0
 800c314:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c316:	463a      	mov	r2, r7
 800c318:	1d39      	adds	r1, r7, #4
 800c31a:	f107 0308 	add.w	r3, r7, #8
 800c31e:	4618      	mov	r0, r3
 800c320:	f7f4 fc30 	bl	8000b84 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c324:	6839      	ldr	r1, [r7, #0]
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	68ba      	ldr	r2, [r7, #8]
 800c32a:	9202      	str	r2, [sp, #8]
 800c32c:	9301      	str	r3, [sp, #4]
 800c32e:	2300      	movs	r3, #0
 800c330:	9300      	str	r3, [sp, #0]
 800c332:	2300      	movs	r3, #0
 800c334:	460a      	mov	r2, r1
 800c336:	4921      	ldr	r1, [pc, #132]	; (800c3bc <vTaskStartScheduler+0xb4>)
 800c338:	4821      	ldr	r0, [pc, #132]	; (800c3c0 <vTaskStartScheduler+0xb8>)
 800c33a:	f7ff fe07 	bl	800bf4c <xTaskCreateStatic>
 800c33e:	4603      	mov	r3, r0
 800c340:	4a20      	ldr	r2, [pc, #128]	; (800c3c4 <vTaskStartScheduler+0xbc>)
 800c342:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c344:	4b1f      	ldr	r3, [pc, #124]	; (800c3c4 <vTaskStartScheduler+0xbc>)
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d002      	beq.n	800c352 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c34c:	2301      	movs	r3, #1
 800c34e:	617b      	str	r3, [r7, #20]
 800c350:	e001      	b.n	800c356 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c352:	2300      	movs	r3, #0
 800c354:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c356:	697b      	ldr	r3, [r7, #20]
 800c358:	2b01      	cmp	r3, #1
 800c35a:	d11b      	bne.n	800c394 <vTaskStartScheduler+0x8c>
	__asm volatile
 800c35c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c360:	f383 8811 	msr	BASEPRI, r3
 800c364:	f3bf 8f6f 	isb	sy
 800c368:	f3bf 8f4f 	dsb	sy
 800c36c:	613b      	str	r3, [r7, #16]
}
 800c36e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c370:	4b15      	ldr	r3, [pc, #84]	; (800c3c8 <vTaskStartScheduler+0xc0>)
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	334c      	adds	r3, #76	; 0x4c
 800c376:	4a15      	ldr	r2, [pc, #84]	; (800c3cc <vTaskStartScheduler+0xc4>)
 800c378:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c37a:	4b15      	ldr	r3, [pc, #84]	; (800c3d0 <vTaskStartScheduler+0xc8>)
 800c37c:	f04f 32ff 	mov.w	r2, #4294967295
 800c380:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c382:	4b14      	ldr	r3, [pc, #80]	; (800c3d4 <vTaskStartScheduler+0xcc>)
 800c384:	2201      	movs	r2, #1
 800c386:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c388:	4b13      	ldr	r3, [pc, #76]	; (800c3d8 <vTaskStartScheduler+0xd0>)
 800c38a:	2200      	movs	r2, #0
 800c38c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c38e:	f000 fd5f 	bl	800ce50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c392:	e00e      	b.n	800c3b2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c394:	697b      	ldr	r3, [r7, #20]
 800c396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c39a:	d10a      	bne.n	800c3b2 <vTaskStartScheduler+0xaa>
	__asm volatile
 800c39c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a0:	f383 8811 	msr	BASEPRI, r3
 800c3a4:	f3bf 8f6f 	isb	sy
 800c3a8:	f3bf 8f4f 	dsb	sy
 800c3ac:	60fb      	str	r3, [r7, #12]
}
 800c3ae:	bf00      	nop
 800c3b0:	e7fe      	b.n	800c3b0 <vTaskStartScheduler+0xa8>
}
 800c3b2:	bf00      	nop
 800c3b4:	3718      	adds	r7, #24
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}
 800c3ba:	bf00      	nop
 800c3bc:	0800e67c 	.word	0x0800e67c
 800c3c0:	0800c979 	.word	0x0800c979
 800c3c4:	2000048c 	.word	0x2000048c
 800c3c8:	20000368 	.word	0x20000368
 800c3cc:	20000030 	.word	0x20000030
 800c3d0:	20000488 	.word	0x20000488
 800c3d4:	20000474 	.word	0x20000474
 800c3d8:	2000046c 	.word	0x2000046c

0800c3dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c3dc:	b480      	push	{r7}
 800c3de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c3e0:	4b04      	ldr	r3, [pc, #16]	; (800c3f4 <vTaskSuspendAll+0x18>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	3301      	adds	r3, #1
 800c3e6:	4a03      	ldr	r2, [pc, #12]	; (800c3f4 <vTaskSuspendAll+0x18>)
 800c3e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c3ea:	bf00      	nop
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f2:	4770      	bx	lr
 800c3f4:	20000490 	.word	0x20000490

0800c3f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b084      	sub	sp, #16
 800c3fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c3fe:	2300      	movs	r3, #0
 800c400:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c402:	2300      	movs	r3, #0
 800c404:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c406:	4b41      	ldr	r3, [pc, #260]	; (800c50c <xTaskResumeAll+0x114>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d10a      	bne.n	800c424 <xTaskResumeAll+0x2c>
	__asm volatile
 800c40e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c412:	f383 8811 	msr	BASEPRI, r3
 800c416:	f3bf 8f6f 	isb	sy
 800c41a:	f3bf 8f4f 	dsb	sy
 800c41e:	603b      	str	r3, [r7, #0]
}
 800c420:	bf00      	nop
 800c422:	e7fe      	b.n	800c422 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c424:	f000 fdb6 	bl	800cf94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c428:	4b38      	ldr	r3, [pc, #224]	; (800c50c <xTaskResumeAll+0x114>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	3b01      	subs	r3, #1
 800c42e:	4a37      	ldr	r2, [pc, #220]	; (800c50c <xTaskResumeAll+0x114>)
 800c430:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c432:	4b36      	ldr	r3, [pc, #216]	; (800c50c <xTaskResumeAll+0x114>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d161      	bne.n	800c4fe <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c43a:	4b35      	ldr	r3, [pc, #212]	; (800c510 <xTaskResumeAll+0x118>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d05d      	beq.n	800c4fe <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c442:	e02e      	b.n	800c4a2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c444:	4b33      	ldr	r3, [pc, #204]	; (800c514 <xTaskResumeAll+0x11c>)
 800c446:	68db      	ldr	r3, [r3, #12]
 800c448:	68db      	ldr	r3, [r3, #12]
 800c44a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	3318      	adds	r3, #24
 800c450:	4618      	mov	r0, r3
 800c452:	f7ff f80d 	bl	800b470 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	3304      	adds	r3, #4
 800c45a:	4618      	mov	r0, r3
 800c45c:	f7ff f808 	bl	800b470 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c464:	2201      	movs	r2, #1
 800c466:	409a      	lsls	r2, r3
 800c468:	4b2b      	ldr	r3, [pc, #172]	; (800c518 <xTaskResumeAll+0x120>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	4313      	orrs	r3, r2
 800c46e:	4a2a      	ldr	r2, [pc, #168]	; (800c518 <xTaskResumeAll+0x120>)
 800c470:	6013      	str	r3, [r2, #0]
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c476:	4613      	mov	r3, r2
 800c478:	009b      	lsls	r3, r3, #2
 800c47a:	4413      	add	r3, r2
 800c47c:	009b      	lsls	r3, r3, #2
 800c47e:	4a27      	ldr	r2, [pc, #156]	; (800c51c <xTaskResumeAll+0x124>)
 800c480:	441a      	add	r2, r3
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	3304      	adds	r3, #4
 800c486:	4619      	mov	r1, r3
 800c488:	4610      	mov	r0, r2
 800c48a:	f7fe ff94 	bl	800b3b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c492:	4b23      	ldr	r3, [pc, #140]	; (800c520 <xTaskResumeAll+0x128>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c498:	429a      	cmp	r2, r3
 800c49a:	d302      	bcc.n	800c4a2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800c49c:	4b21      	ldr	r3, [pc, #132]	; (800c524 <xTaskResumeAll+0x12c>)
 800c49e:	2201      	movs	r2, #1
 800c4a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c4a2:	4b1c      	ldr	r3, [pc, #112]	; (800c514 <xTaskResumeAll+0x11c>)
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d1cc      	bne.n	800c444 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d001      	beq.n	800c4b4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c4b0:	f000 fb1c 	bl	800caec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c4b4:	4b1c      	ldr	r3, [pc, #112]	; (800c528 <xTaskResumeAll+0x130>)
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d010      	beq.n	800c4e2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c4c0:	f000 f836 	bl	800c530 <xTaskIncrementTick>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d002      	beq.n	800c4d0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800c4ca:	4b16      	ldr	r3, [pc, #88]	; (800c524 <xTaskResumeAll+0x12c>)
 800c4cc:	2201      	movs	r2, #1
 800c4ce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	3b01      	subs	r3, #1
 800c4d4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d1f1      	bne.n	800c4c0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800c4dc:	4b12      	ldr	r3, [pc, #72]	; (800c528 <xTaskResumeAll+0x130>)
 800c4de:	2200      	movs	r2, #0
 800c4e0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c4e2:	4b10      	ldr	r3, [pc, #64]	; (800c524 <xTaskResumeAll+0x12c>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d009      	beq.n	800c4fe <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c4ea:	2301      	movs	r3, #1
 800c4ec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c4ee:	4b0f      	ldr	r3, [pc, #60]	; (800c52c <xTaskResumeAll+0x134>)
 800c4f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4f4:	601a      	str	r2, [r3, #0]
 800c4f6:	f3bf 8f4f 	dsb	sy
 800c4fa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c4fe:	f000 fd79 	bl	800cff4 <vPortExitCritical>

	return xAlreadyYielded;
 800c502:	68bb      	ldr	r3, [r7, #8]
}
 800c504:	4618      	mov	r0, r3
 800c506:	3710      	adds	r7, #16
 800c508:	46bd      	mov	sp, r7
 800c50a:	bd80      	pop	{r7, pc}
 800c50c:	20000490 	.word	0x20000490
 800c510:	20000468 	.word	0x20000468
 800c514:	20000428 	.word	0x20000428
 800c518:	20000470 	.word	0x20000470
 800c51c:	2000036c 	.word	0x2000036c
 800c520:	20000368 	.word	0x20000368
 800c524:	2000047c 	.word	0x2000047c
 800c528:	20000478 	.word	0x20000478
 800c52c:	e000ed04 	.word	0xe000ed04

0800c530 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b086      	sub	sp, #24
 800c534:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c536:	2300      	movs	r3, #0
 800c538:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c53a:	4b4e      	ldr	r3, [pc, #312]	; (800c674 <xTaskIncrementTick+0x144>)
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	f040 808e 	bne.w	800c660 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c544:	4b4c      	ldr	r3, [pc, #304]	; (800c678 <xTaskIncrementTick+0x148>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	3301      	adds	r3, #1
 800c54a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c54c:	4a4a      	ldr	r2, [pc, #296]	; (800c678 <xTaskIncrementTick+0x148>)
 800c54e:	693b      	ldr	r3, [r7, #16]
 800c550:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c552:	693b      	ldr	r3, [r7, #16]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d120      	bne.n	800c59a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c558:	4b48      	ldr	r3, [pc, #288]	; (800c67c <xTaskIncrementTick+0x14c>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d00a      	beq.n	800c578 <xTaskIncrementTick+0x48>
	__asm volatile
 800c562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c566:	f383 8811 	msr	BASEPRI, r3
 800c56a:	f3bf 8f6f 	isb	sy
 800c56e:	f3bf 8f4f 	dsb	sy
 800c572:	603b      	str	r3, [r7, #0]
}
 800c574:	bf00      	nop
 800c576:	e7fe      	b.n	800c576 <xTaskIncrementTick+0x46>
 800c578:	4b40      	ldr	r3, [pc, #256]	; (800c67c <xTaskIncrementTick+0x14c>)
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	60fb      	str	r3, [r7, #12]
 800c57e:	4b40      	ldr	r3, [pc, #256]	; (800c680 <xTaskIncrementTick+0x150>)
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	4a3e      	ldr	r2, [pc, #248]	; (800c67c <xTaskIncrementTick+0x14c>)
 800c584:	6013      	str	r3, [r2, #0]
 800c586:	4a3e      	ldr	r2, [pc, #248]	; (800c680 <xTaskIncrementTick+0x150>)
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	6013      	str	r3, [r2, #0]
 800c58c:	4b3d      	ldr	r3, [pc, #244]	; (800c684 <xTaskIncrementTick+0x154>)
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	3301      	adds	r3, #1
 800c592:	4a3c      	ldr	r2, [pc, #240]	; (800c684 <xTaskIncrementTick+0x154>)
 800c594:	6013      	str	r3, [r2, #0]
 800c596:	f000 faa9 	bl	800caec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c59a:	4b3b      	ldr	r3, [pc, #236]	; (800c688 <xTaskIncrementTick+0x158>)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	693a      	ldr	r2, [r7, #16]
 800c5a0:	429a      	cmp	r2, r3
 800c5a2:	d348      	bcc.n	800c636 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c5a4:	4b35      	ldr	r3, [pc, #212]	; (800c67c <xTaskIncrementTick+0x14c>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d104      	bne.n	800c5b8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c5ae:	4b36      	ldr	r3, [pc, #216]	; (800c688 <xTaskIncrementTick+0x158>)
 800c5b0:	f04f 32ff 	mov.w	r2, #4294967295
 800c5b4:	601a      	str	r2, [r3, #0]
					break;
 800c5b6:	e03e      	b.n	800c636 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c5b8:	4b30      	ldr	r3, [pc, #192]	; (800c67c <xTaskIncrementTick+0x14c>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	68db      	ldr	r3, [r3, #12]
 800c5be:	68db      	ldr	r3, [r3, #12]
 800c5c0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c5c2:	68bb      	ldr	r3, [r7, #8]
 800c5c4:	685b      	ldr	r3, [r3, #4]
 800c5c6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c5c8:	693a      	ldr	r2, [r7, #16]
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	429a      	cmp	r2, r3
 800c5ce:	d203      	bcs.n	800c5d8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c5d0:	4a2d      	ldr	r2, [pc, #180]	; (800c688 <xTaskIncrementTick+0x158>)
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c5d6:	e02e      	b.n	800c636 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	3304      	adds	r3, #4
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f7fe ff47 	bl	800b470 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c5e2:	68bb      	ldr	r3, [r7, #8]
 800c5e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d004      	beq.n	800c5f4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c5ea:	68bb      	ldr	r3, [r7, #8]
 800c5ec:	3318      	adds	r3, #24
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	f7fe ff3e 	bl	800b470 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5f8:	2201      	movs	r2, #1
 800c5fa:	409a      	lsls	r2, r3
 800c5fc:	4b23      	ldr	r3, [pc, #140]	; (800c68c <xTaskIncrementTick+0x15c>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	4313      	orrs	r3, r2
 800c602:	4a22      	ldr	r2, [pc, #136]	; (800c68c <xTaskIncrementTick+0x15c>)
 800c604:	6013      	str	r3, [r2, #0]
 800c606:	68bb      	ldr	r3, [r7, #8]
 800c608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c60a:	4613      	mov	r3, r2
 800c60c:	009b      	lsls	r3, r3, #2
 800c60e:	4413      	add	r3, r2
 800c610:	009b      	lsls	r3, r3, #2
 800c612:	4a1f      	ldr	r2, [pc, #124]	; (800c690 <xTaskIncrementTick+0x160>)
 800c614:	441a      	add	r2, r3
 800c616:	68bb      	ldr	r3, [r7, #8]
 800c618:	3304      	adds	r3, #4
 800c61a:	4619      	mov	r1, r3
 800c61c:	4610      	mov	r0, r2
 800c61e:	f7fe feca 	bl	800b3b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c622:	68bb      	ldr	r3, [r7, #8]
 800c624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c626:	4b1b      	ldr	r3, [pc, #108]	; (800c694 <xTaskIncrementTick+0x164>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c62c:	429a      	cmp	r2, r3
 800c62e:	d3b9      	bcc.n	800c5a4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c630:	2301      	movs	r3, #1
 800c632:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c634:	e7b6      	b.n	800c5a4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c636:	4b17      	ldr	r3, [pc, #92]	; (800c694 <xTaskIncrementTick+0x164>)
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c63c:	4914      	ldr	r1, [pc, #80]	; (800c690 <xTaskIncrementTick+0x160>)
 800c63e:	4613      	mov	r3, r2
 800c640:	009b      	lsls	r3, r3, #2
 800c642:	4413      	add	r3, r2
 800c644:	009b      	lsls	r3, r3, #2
 800c646:	440b      	add	r3, r1
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	2b01      	cmp	r3, #1
 800c64c:	d901      	bls.n	800c652 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800c64e:	2301      	movs	r3, #1
 800c650:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c652:	4b11      	ldr	r3, [pc, #68]	; (800c698 <xTaskIncrementTick+0x168>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d007      	beq.n	800c66a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800c65a:	2301      	movs	r3, #1
 800c65c:	617b      	str	r3, [r7, #20]
 800c65e:	e004      	b.n	800c66a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c660:	4b0e      	ldr	r3, [pc, #56]	; (800c69c <xTaskIncrementTick+0x16c>)
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	3301      	adds	r3, #1
 800c666:	4a0d      	ldr	r2, [pc, #52]	; (800c69c <xTaskIncrementTick+0x16c>)
 800c668:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c66a:	697b      	ldr	r3, [r7, #20]
}
 800c66c:	4618      	mov	r0, r3
 800c66e:	3718      	adds	r7, #24
 800c670:	46bd      	mov	sp, r7
 800c672:	bd80      	pop	{r7, pc}
 800c674:	20000490 	.word	0x20000490
 800c678:	2000046c 	.word	0x2000046c
 800c67c:	20000420 	.word	0x20000420
 800c680:	20000424 	.word	0x20000424
 800c684:	20000480 	.word	0x20000480
 800c688:	20000488 	.word	0x20000488
 800c68c:	20000470 	.word	0x20000470
 800c690:	2000036c 	.word	0x2000036c
 800c694:	20000368 	.word	0x20000368
 800c698:	2000047c 	.word	0x2000047c
 800c69c:	20000478 	.word	0x20000478

0800c6a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c6a0:	b480      	push	{r7}
 800c6a2:	b087      	sub	sp, #28
 800c6a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c6a6:	4b29      	ldr	r3, [pc, #164]	; (800c74c <vTaskSwitchContext+0xac>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d003      	beq.n	800c6b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c6ae:	4b28      	ldr	r3, [pc, #160]	; (800c750 <vTaskSwitchContext+0xb0>)
 800c6b0:	2201      	movs	r2, #1
 800c6b2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c6b4:	e044      	b.n	800c740 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800c6b6:	4b26      	ldr	r3, [pc, #152]	; (800c750 <vTaskSwitchContext+0xb0>)
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6bc:	4b25      	ldr	r3, [pc, #148]	; (800c754 <vTaskSwitchContext+0xb4>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	fab3 f383 	clz	r3, r3
 800c6c8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c6ca:	7afb      	ldrb	r3, [r7, #11]
 800c6cc:	f1c3 031f 	rsb	r3, r3, #31
 800c6d0:	617b      	str	r3, [r7, #20]
 800c6d2:	4921      	ldr	r1, [pc, #132]	; (800c758 <vTaskSwitchContext+0xb8>)
 800c6d4:	697a      	ldr	r2, [r7, #20]
 800c6d6:	4613      	mov	r3, r2
 800c6d8:	009b      	lsls	r3, r3, #2
 800c6da:	4413      	add	r3, r2
 800c6dc:	009b      	lsls	r3, r3, #2
 800c6de:	440b      	add	r3, r1
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d10a      	bne.n	800c6fc <vTaskSwitchContext+0x5c>
	__asm volatile
 800c6e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ea:	f383 8811 	msr	BASEPRI, r3
 800c6ee:	f3bf 8f6f 	isb	sy
 800c6f2:	f3bf 8f4f 	dsb	sy
 800c6f6:	607b      	str	r3, [r7, #4]
}
 800c6f8:	bf00      	nop
 800c6fa:	e7fe      	b.n	800c6fa <vTaskSwitchContext+0x5a>
 800c6fc:	697a      	ldr	r2, [r7, #20]
 800c6fe:	4613      	mov	r3, r2
 800c700:	009b      	lsls	r3, r3, #2
 800c702:	4413      	add	r3, r2
 800c704:	009b      	lsls	r3, r3, #2
 800c706:	4a14      	ldr	r2, [pc, #80]	; (800c758 <vTaskSwitchContext+0xb8>)
 800c708:	4413      	add	r3, r2
 800c70a:	613b      	str	r3, [r7, #16]
 800c70c:	693b      	ldr	r3, [r7, #16]
 800c70e:	685b      	ldr	r3, [r3, #4]
 800c710:	685a      	ldr	r2, [r3, #4]
 800c712:	693b      	ldr	r3, [r7, #16]
 800c714:	605a      	str	r2, [r3, #4]
 800c716:	693b      	ldr	r3, [r7, #16]
 800c718:	685a      	ldr	r2, [r3, #4]
 800c71a:	693b      	ldr	r3, [r7, #16]
 800c71c:	3308      	adds	r3, #8
 800c71e:	429a      	cmp	r2, r3
 800c720:	d104      	bne.n	800c72c <vTaskSwitchContext+0x8c>
 800c722:	693b      	ldr	r3, [r7, #16]
 800c724:	685b      	ldr	r3, [r3, #4]
 800c726:	685a      	ldr	r2, [r3, #4]
 800c728:	693b      	ldr	r3, [r7, #16]
 800c72a:	605a      	str	r2, [r3, #4]
 800c72c:	693b      	ldr	r3, [r7, #16]
 800c72e:	685b      	ldr	r3, [r3, #4]
 800c730:	68db      	ldr	r3, [r3, #12]
 800c732:	4a0a      	ldr	r2, [pc, #40]	; (800c75c <vTaskSwitchContext+0xbc>)
 800c734:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c736:	4b09      	ldr	r3, [pc, #36]	; (800c75c <vTaskSwitchContext+0xbc>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	334c      	adds	r3, #76	; 0x4c
 800c73c:	4a08      	ldr	r2, [pc, #32]	; (800c760 <vTaskSwitchContext+0xc0>)
 800c73e:	6013      	str	r3, [r2, #0]
}
 800c740:	bf00      	nop
 800c742:	371c      	adds	r7, #28
 800c744:	46bd      	mov	sp, r7
 800c746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74a:	4770      	bx	lr
 800c74c:	20000490 	.word	0x20000490
 800c750:	2000047c 	.word	0x2000047c
 800c754:	20000470 	.word	0x20000470
 800c758:	2000036c 	.word	0x2000036c
 800c75c:	20000368 	.word	0x20000368
 800c760:	20000030 	.word	0x20000030

0800c764 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b084      	sub	sp, #16
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
 800c76c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d10a      	bne.n	800c78a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c774:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c778:	f383 8811 	msr	BASEPRI, r3
 800c77c:	f3bf 8f6f 	isb	sy
 800c780:	f3bf 8f4f 	dsb	sy
 800c784:	60fb      	str	r3, [r7, #12]
}
 800c786:	bf00      	nop
 800c788:	e7fe      	b.n	800c788 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c78a:	4b07      	ldr	r3, [pc, #28]	; (800c7a8 <vTaskPlaceOnEventList+0x44>)
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	3318      	adds	r3, #24
 800c790:	4619      	mov	r1, r3
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	f7fe fe33 	bl	800b3fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c798:	2101      	movs	r1, #1
 800c79a:	6838      	ldr	r0, [r7, #0]
 800c79c:	f000 fa6a 	bl	800cc74 <prvAddCurrentTaskToDelayedList>
}
 800c7a0:	bf00      	nop
 800c7a2:	3710      	adds	r7, #16
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	bd80      	pop	{r7, pc}
 800c7a8:	20000368 	.word	0x20000368

0800c7ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b086      	sub	sp, #24
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	68db      	ldr	r3, [r3, #12]
 800c7b8:	68db      	ldr	r3, [r3, #12]
 800c7ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c7bc:	693b      	ldr	r3, [r7, #16]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d10a      	bne.n	800c7d8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c7c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7c6:	f383 8811 	msr	BASEPRI, r3
 800c7ca:	f3bf 8f6f 	isb	sy
 800c7ce:	f3bf 8f4f 	dsb	sy
 800c7d2:	60fb      	str	r3, [r7, #12]
}
 800c7d4:	bf00      	nop
 800c7d6:	e7fe      	b.n	800c7d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c7d8:	693b      	ldr	r3, [r7, #16]
 800c7da:	3318      	adds	r3, #24
 800c7dc:	4618      	mov	r0, r3
 800c7de:	f7fe fe47 	bl	800b470 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c7e2:	4b1d      	ldr	r3, [pc, #116]	; (800c858 <xTaskRemoveFromEventList+0xac>)
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d11c      	bne.n	800c824 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c7ea:	693b      	ldr	r3, [r7, #16]
 800c7ec:	3304      	adds	r3, #4
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	f7fe fe3e 	bl	800b470 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c7f4:	693b      	ldr	r3, [r7, #16]
 800c7f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7f8:	2201      	movs	r2, #1
 800c7fa:	409a      	lsls	r2, r3
 800c7fc:	4b17      	ldr	r3, [pc, #92]	; (800c85c <xTaskRemoveFromEventList+0xb0>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	4313      	orrs	r3, r2
 800c802:	4a16      	ldr	r2, [pc, #88]	; (800c85c <xTaskRemoveFromEventList+0xb0>)
 800c804:	6013      	str	r3, [r2, #0]
 800c806:	693b      	ldr	r3, [r7, #16]
 800c808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c80a:	4613      	mov	r3, r2
 800c80c:	009b      	lsls	r3, r3, #2
 800c80e:	4413      	add	r3, r2
 800c810:	009b      	lsls	r3, r3, #2
 800c812:	4a13      	ldr	r2, [pc, #76]	; (800c860 <xTaskRemoveFromEventList+0xb4>)
 800c814:	441a      	add	r2, r3
 800c816:	693b      	ldr	r3, [r7, #16]
 800c818:	3304      	adds	r3, #4
 800c81a:	4619      	mov	r1, r3
 800c81c:	4610      	mov	r0, r2
 800c81e:	f7fe fdca 	bl	800b3b6 <vListInsertEnd>
 800c822:	e005      	b.n	800c830 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c824:	693b      	ldr	r3, [r7, #16]
 800c826:	3318      	adds	r3, #24
 800c828:	4619      	mov	r1, r3
 800c82a:	480e      	ldr	r0, [pc, #56]	; (800c864 <xTaskRemoveFromEventList+0xb8>)
 800c82c:	f7fe fdc3 	bl	800b3b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c830:	693b      	ldr	r3, [r7, #16]
 800c832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c834:	4b0c      	ldr	r3, [pc, #48]	; (800c868 <xTaskRemoveFromEventList+0xbc>)
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c83a:	429a      	cmp	r2, r3
 800c83c:	d905      	bls.n	800c84a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c83e:	2301      	movs	r3, #1
 800c840:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c842:	4b0a      	ldr	r3, [pc, #40]	; (800c86c <xTaskRemoveFromEventList+0xc0>)
 800c844:	2201      	movs	r2, #1
 800c846:	601a      	str	r2, [r3, #0]
 800c848:	e001      	b.n	800c84e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800c84a:	2300      	movs	r3, #0
 800c84c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c84e:	697b      	ldr	r3, [r7, #20]
}
 800c850:	4618      	mov	r0, r3
 800c852:	3718      	adds	r7, #24
 800c854:	46bd      	mov	sp, r7
 800c856:	bd80      	pop	{r7, pc}
 800c858:	20000490 	.word	0x20000490
 800c85c:	20000470 	.word	0x20000470
 800c860:	2000036c 	.word	0x2000036c
 800c864:	20000428 	.word	0x20000428
 800c868:	20000368 	.word	0x20000368
 800c86c:	2000047c 	.word	0x2000047c

0800c870 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c870:	b480      	push	{r7}
 800c872:	b083      	sub	sp, #12
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c878:	4b06      	ldr	r3, [pc, #24]	; (800c894 <vTaskInternalSetTimeOutState+0x24>)
 800c87a:	681a      	ldr	r2, [r3, #0]
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c880:	4b05      	ldr	r3, [pc, #20]	; (800c898 <vTaskInternalSetTimeOutState+0x28>)
 800c882:	681a      	ldr	r2, [r3, #0]
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	605a      	str	r2, [r3, #4]
}
 800c888:	bf00      	nop
 800c88a:	370c      	adds	r7, #12
 800c88c:	46bd      	mov	sp, r7
 800c88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c892:	4770      	bx	lr
 800c894:	20000480 	.word	0x20000480
 800c898:	2000046c 	.word	0x2000046c

0800c89c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b088      	sub	sp, #32
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
 800c8a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d10a      	bne.n	800c8c2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8b0:	f383 8811 	msr	BASEPRI, r3
 800c8b4:	f3bf 8f6f 	isb	sy
 800c8b8:	f3bf 8f4f 	dsb	sy
 800c8bc:	613b      	str	r3, [r7, #16]
}
 800c8be:	bf00      	nop
 800c8c0:	e7fe      	b.n	800c8c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d10a      	bne.n	800c8de <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c8c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8cc:	f383 8811 	msr	BASEPRI, r3
 800c8d0:	f3bf 8f6f 	isb	sy
 800c8d4:	f3bf 8f4f 	dsb	sy
 800c8d8:	60fb      	str	r3, [r7, #12]
}
 800c8da:	bf00      	nop
 800c8dc:	e7fe      	b.n	800c8dc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c8de:	f000 fb59 	bl	800cf94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c8e2:	4b1d      	ldr	r3, [pc, #116]	; (800c958 <xTaskCheckForTimeOut+0xbc>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	685b      	ldr	r3, [r3, #4]
 800c8ec:	69ba      	ldr	r2, [r7, #24]
 800c8ee:	1ad3      	subs	r3, r2, r3
 800c8f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8fa:	d102      	bne.n	800c902 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	61fb      	str	r3, [r7, #28]
 800c900:	e023      	b.n	800c94a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681a      	ldr	r2, [r3, #0]
 800c906:	4b15      	ldr	r3, [pc, #84]	; (800c95c <xTaskCheckForTimeOut+0xc0>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	429a      	cmp	r2, r3
 800c90c:	d007      	beq.n	800c91e <xTaskCheckForTimeOut+0x82>
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	685b      	ldr	r3, [r3, #4]
 800c912:	69ba      	ldr	r2, [r7, #24]
 800c914:	429a      	cmp	r2, r3
 800c916:	d302      	bcc.n	800c91e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c918:	2301      	movs	r3, #1
 800c91a:	61fb      	str	r3, [r7, #28]
 800c91c:	e015      	b.n	800c94a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	697a      	ldr	r2, [r7, #20]
 800c924:	429a      	cmp	r2, r3
 800c926:	d20b      	bcs.n	800c940 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	681a      	ldr	r2, [r3, #0]
 800c92c:	697b      	ldr	r3, [r7, #20]
 800c92e:	1ad2      	subs	r2, r2, r3
 800c930:	683b      	ldr	r3, [r7, #0]
 800c932:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c934:	6878      	ldr	r0, [r7, #4]
 800c936:	f7ff ff9b 	bl	800c870 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c93a:	2300      	movs	r3, #0
 800c93c:	61fb      	str	r3, [r7, #28]
 800c93e:	e004      	b.n	800c94a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	2200      	movs	r2, #0
 800c944:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c946:	2301      	movs	r3, #1
 800c948:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c94a:	f000 fb53 	bl	800cff4 <vPortExitCritical>

	return xReturn;
 800c94e:	69fb      	ldr	r3, [r7, #28]
}
 800c950:	4618      	mov	r0, r3
 800c952:	3720      	adds	r7, #32
 800c954:	46bd      	mov	sp, r7
 800c956:	bd80      	pop	{r7, pc}
 800c958:	2000046c 	.word	0x2000046c
 800c95c:	20000480 	.word	0x20000480

0800c960 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c960:	b480      	push	{r7}
 800c962:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c964:	4b03      	ldr	r3, [pc, #12]	; (800c974 <vTaskMissedYield+0x14>)
 800c966:	2201      	movs	r2, #1
 800c968:	601a      	str	r2, [r3, #0]
}
 800c96a:	bf00      	nop
 800c96c:	46bd      	mov	sp, r7
 800c96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c972:	4770      	bx	lr
 800c974:	2000047c 	.word	0x2000047c

0800c978 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b082      	sub	sp, #8
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c980:	f000 f852 	bl	800ca28 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c984:	4b06      	ldr	r3, [pc, #24]	; (800c9a0 <prvIdleTask+0x28>)
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	2b01      	cmp	r3, #1
 800c98a:	d9f9      	bls.n	800c980 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c98c:	4b05      	ldr	r3, [pc, #20]	; (800c9a4 <prvIdleTask+0x2c>)
 800c98e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c992:	601a      	str	r2, [r3, #0]
 800c994:	f3bf 8f4f 	dsb	sy
 800c998:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c99c:	e7f0      	b.n	800c980 <prvIdleTask+0x8>
 800c99e:	bf00      	nop
 800c9a0:	2000036c 	.word	0x2000036c
 800c9a4:	e000ed04 	.word	0xe000ed04

0800c9a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b082      	sub	sp, #8
 800c9ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	607b      	str	r3, [r7, #4]
 800c9b2:	e00c      	b.n	800c9ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c9b4:	687a      	ldr	r2, [r7, #4]
 800c9b6:	4613      	mov	r3, r2
 800c9b8:	009b      	lsls	r3, r3, #2
 800c9ba:	4413      	add	r3, r2
 800c9bc:	009b      	lsls	r3, r3, #2
 800c9be:	4a12      	ldr	r2, [pc, #72]	; (800ca08 <prvInitialiseTaskLists+0x60>)
 800c9c0:	4413      	add	r3, r2
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	f7fe fcca 	bl	800b35c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	3301      	adds	r3, #1
 800c9cc:	607b      	str	r3, [r7, #4]
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	2b06      	cmp	r3, #6
 800c9d2:	d9ef      	bls.n	800c9b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c9d4:	480d      	ldr	r0, [pc, #52]	; (800ca0c <prvInitialiseTaskLists+0x64>)
 800c9d6:	f7fe fcc1 	bl	800b35c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c9da:	480d      	ldr	r0, [pc, #52]	; (800ca10 <prvInitialiseTaskLists+0x68>)
 800c9dc:	f7fe fcbe 	bl	800b35c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c9e0:	480c      	ldr	r0, [pc, #48]	; (800ca14 <prvInitialiseTaskLists+0x6c>)
 800c9e2:	f7fe fcbb 	bl	800b35c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c9e6:	480c      	ldr	r0, [pc, #48]	; (800ca18 <prvInitialiseTaskLists+0x70>)
 800c9e8:	f7fe fcb8 	bl	800b35c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c9ec:	480b      	ldr	r0, [pc, #44]	; (800ca1c <prvInitialiseTaskLists+0x74>)
 800c9ee:	f7fe fcb5 	bl	800b35c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c9f2:	4b0b      	ldr	r3, [pc, #44]	; (800ca20 <prvInitialiseTaskLists+0x78>)
 800c9f4:	4a05      	ldr	r2, [pc, #20]	; (800ca0c <prvInitialiseTaskLists+0x64>)
 800c9f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c9f8:	4b0a      	ldr	r3, [pc, #40]	; (800ca24 <prvInitialiseTaskLists+0x7c>)
 800c9fa:	4a05      	ldr	r2, [pc, #20]	; (800ca10 <prvInitialiseTaskLists+0x68>)
 800c9fc:	601a      	str	r2, [r3, #0]
}
 800c9fe:	bf00      	nop
 800ca00:	3708      	adds	r7, #8
 800ca02:	46bd      	mov	sp, r7
 800ca04:	bd80      	pop	{r7, pc}
 800ca06:	bf00      	nop
 800ca08:	2000036c 	.word	0x2000036c
 800ca0c:	200003f8 	.word	0x200003f8
 800ca10:	2000040c 	.word	0x2000040c
 800ca14:	20000428 	.word	0x20000428
 800ca18:	2000043c 	.word	0x2000043c
 800ca1c:	20000454 	.word	0x20000454
 800ca20:	20000420 	.word	0x20000420
 800ca24:	20000424 	.word	0x20000424

0800ca28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b082      	sub	sp, #8
 800ca2c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ca2e:	e019      	b.n	800ca64 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ca30:	f000 fab0 	bl	800cf94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca34:	4b10      	ldr	r3, [pc, #64]	; (800ca78 <prvCheckTasksWaitingTermination+0x50>)
 800ca36:	68db      	ldr	r3, [r3, #12]
 800ca38:	68db      	ldr	r3, [r3, #12]
 800ca3a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	3304      	adds	r3, #4
 800ca40:	4618      	mov	r0, r3
 800ca42:	f7fe fd15 	bl	800b470 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ca46:	4b0d      	ldr	r3, [pc, #52]	; (800ca7c <prvCheckTasksWaitingTermination+0x54>)
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	3b01      	subs	r3, #1
 800ca4c:	4a0b      	ldr	r2, [pc, #44]	; (800ca7c <prvCheckTasksWaitingTermination+0x54>)
 800ca4e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ca50:	4b0b      	ldr	r3, [pc, #44]	; (800ca80 <prvCheckTasksWaitingTermination+0x58>)
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	3b01      	subs	r3, #1
 800ca56:	4a0a      	ldr	r2, [pc, #40]	; (800ca80 <prvCheckTasksWaitingTermination+0x58>)
 800ca58:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ca5a:	f000 facb 	bl	800cff4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ca5e:	6878      	ldr	r0, [r7, #4]
 800ca60:	f000 f810 	bl	800ca84 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ca64:	4b06      	ldr	r3, [pc, #24]	; (800ca80 <prvCheckTasksWaitingTermination+0x58>)
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d1e1      	bne.n	800ca30 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ca6c:	bf00      	nop
 800ca6e:	bf00      	nop
 800ca70:	3708      	adds	r7, #8
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bd80      	pop	{r7, pc}
 800ca76:	bf00      	nop
 800ca78:	2000043c 	.word	0x2000043c
 800ca7c:	20000468 	.word	0x20000468
 800ca80:	20000450 	.word	0x20000450

0800ca84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b084      	sub	sp, #16
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	334c      	adds	r3, #76	; 0x4c
 800ca90:	4618      	mov	r0, r3
 800ca92:	f001 f997 	bl	800ddc4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d108      	bne.n	800cab2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800caa4:	4618      	mov	r0, r3
 800caa6:	f000 fc63 	bl	800d370 <vPortFree>
				vPortFree( pxTCB );
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	f000 fc60 	bl	800d370 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cab0:	e018      	b.n	800cae4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800cab8:	2b01      	cmp	r3, #1
 800caba:	d103      	bne.n	800cac4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800cabc:	6878      	ldr	r0, [r7, #4]
 800cabe:	f000 fc57 	bl	800d370 <vPortFree>
	}
 800cac2:	e00f      	b.n	800cae4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800caca:	2b02      	cmp	r3, #2
 800cacc:	d00a      	beq.n	800cae4 <prvDeleteTCB+0x60>
	__asm volatile
 800cace:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cad2:	f383 8811 	msr	BASEPRI, r3
 800cad6:	f3bf 8f6f 	isb	sy
 800cada:	f3bf 8f4f 	dsb	sy
 800cade:	60fb      	str	r3, [r7, #12]
}
 800cae0:	bf00      	nop
 800cae2:	e7fe      	b.n	800cae2 <prvDeleteTCB+0x5e>
	}
 800cae4:	bf00      	nop
 800cae6:	3710      	adds	r7, #16
 800cae8:	46bd      	mov	sp, r7
 800caea:	bd80      	pop	{r7, pc}

0800caec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800caec:	b480      	push	{r7}
 800caee:	b083      	sub	sp, #12
 800caf0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800caf2:	4b0c      	ldr	r3, [pc, #48]	; (800cb24 <prvResetNextTaskUnblockTime+0x38>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d104      	bne.n	800cb06 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cafc:	4b0a      	ldr	r3, [pc, #40]	; (800cb28 <prvResetNextTaskUnblockTime+0x3c>)
 800cafe:	f04f 32ff 	mov.w	r2, #4294967295
 800cb02:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cb04:	e008      	b.n	800cb18 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb06:	4b07      	ldr	r3, [pc, #28]	; (800cb24 <prvResetNextTaskUnblockTime+0x38>)
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	68db      	ldr	r3, [r3, #12]
 800cb0c:	68db      	ldr	r3, [r3, #12]
 800cb0e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	685b      	ldr	r3, [r3, #4]
 800cb14:	4a04      	ldr	r2, [pc, #16]	; (800cb28 <prvResetNextTaskUnblockTime+0x3c>)
 800cb16:	6013      	str	r3, [r2, #0]
}
 800cb18:	bf00      	nop
 800cb1a:	370c      	adds	r7, #12
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb22:	4770      	bx	lr
 800cb24:	20000420 	.word	0x20000420
 800cb28:	20000488 	.word	0x20000488

0800cb2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cb2c:	b480      	push	{r7}
 800cb2e:	b083      	sub	sp, #12
 800cb30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cb32:	4b0b      	ldr	r3, [pc, #44]	; (800cb60 <xTaskGetSchedulerState+0x34>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d102      	bne.n	800cb40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cb3a:	2301      	movs	r3, #1
 800cb3c:	607b      	str	r3, [r7, #4]
 800cb3e:	e008      	b.n	800cb52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb40:	4b08      	ldr	r3, [pc, #32]	; (800cb64 <xTaskGetSchedulerState+0x38>)
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d102      	bne.n	800cb4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cb48:	2302      	movs	r3, #2
 800cb4a:	607b      	str	r3, [r7, #4]
 800cb4c:	e001      	b.n	800cb52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cb4e:	2300      	movs	r3, #0
 800cb50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cb52:	687b      	ldr	r3, [r7, #4]
	}
 800cb54:	4618      	mov	r0, r3
 800cb56:	370c      	adds	r7, #12
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5e:	4770      	bx	lr
 800cb60:	20000474 	.word	0x20000474
 800cb64:	20000490 	.word	0x20000490

0800cb68 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b086      	sub	sp, #24
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cb74:	2300      	movs	r3, #0
 800cb76:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d06e      	beq.n	800cc5c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cb7e:	4b3a      	ldr	r3, [pc, #232]	; (800cc68 <xTaskPriorityDisinherit+0x100>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	693a      	ldr	r2, [r7, #16]
 800cb84:	429a      	cmp	r2, r3
 800cb86:	d00a      	beq.n	800cb9e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800cb88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb8c:	f383 8811 	msr	BASEPRI, r3
 800cb90:	f3bf 8f6f 	isb	sy
 800cb94:	f3bf 8f4f 	dsb	sy
 800cb98:	60fb      	str	r3, [r7, #12]
}
 800cb9a:	bf00      	nop
 800cb9c:	e7fe      	b.n	800cb9c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cb9e:	693b      	ldr	r3, [r7, #16]
 800cba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d10a      	bne.n	800cbbc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800cba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbaa:	f383 8811 	msr	BASEPRI, r3
 800cbae:	f3bf 8f6f 	isb	sy
 800cbb2:	f3bf 8f4f 	dsb	sy
 800cbb6:	60bb      	str	r3, [r7, #8]
}
 800cbb8:	bf00      	nop
 800cbba:	e7fe      	b.n	800cbba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800cbbc:	693b      	ldr	r3, [r7, #16]
 800cbbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cbc0:	1e5a      	subs	r2, r3, #1
 800cbc2:	693b      	ldr	r3, [r7, #16]
 800cbc4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cbc6:	693b      	ldr	r3, [r7, #16]
 800cbc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbca:	693b      	ldr	r3, [r7, #16]
 800cbcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbce:	429a      	cmp	r2, r3
 800cbd0:	d044      	beq.n	800cc5c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cbd2:	693b      	ldr	r3, [r7, #16]
 800cbd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d140      	bne.n	800cc5c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cbda:	693b      	ldr	r3, [r7, #16]
 800cbdc:	3304      	adds	r3, #4
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f7fe fc46 	bl	800b470 <uxListRemove>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d115      	bne.n	800cc16 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800cbea:	693b      	ldr	r3, [r7, #16]
 800cbec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbee:	491f      	ldr	r1, [pc, #124]	; (800cc6c <xTaskPriorityDisinherit+0x104>)
 800cbf0:	4613      	mov	r3, r2
 800cbf2:	009b      	lsls	r3, r3, #2
 800cbf4:	4413      	add	r3, r2
 800cbf6:	009b      	lsls	r3, r3, #2
 800cbf8:	440b      	add	r3, r1
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d10a      	bne.n	800cc16 <xTaskPriorityDisinherit+0xae>
 800cc00:	693b      	ldr	r3, [r7, #16]
 800cc02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc04:	2201      	movs	r2, #1
 800cc06:	fa02 f303 	lsl.w	r3, r2, r3
 800cc0a:	43da      	mvns	r2, r3
 800cc0c:	4b18      	ldr	r3, [pc, #96]	; (800cc70 <xTaskPriorityDisinherit+0x108>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	4013      	ands	r3, r2
 800cc12:	4a17      	ldr	r2, [pc, #92]	; (800cc70 <xTaskPriorityDisinherit+0x108>)
 800cc14:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cc16:	693b      	ldr	r3, [r7, #16]
 800cc18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cc1a:	693b      	ldr	r3, [r7, #16]
 800cc1c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc1e:	693b      	ldr	r3, [r7, #16]
 800cc20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc22:	f1c3 0207 	rsb	r2, r3, #7
 800cc26:	693b      	ldr	r3, [r7, #16]
 800cc28:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cc2a:	693b      	ldr	r3, [r7, #16]
 800cc2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc2e:	2201      	movs	r2, #1
 800cc30:	409a      	lsls	r2, r3
 800cc32:	4b0f      	ldr	r3, [pc, #60]	; (800cc70 <xTaskPriorityDisinherit+0x108>)
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	4313      	orrs	r3, r2
 800cc38:	4a0d      	ldr	r2, [pc, #52]	; (800cc70 <xTaskPriorityDisinherit+0x108>)
 800cc3a:	6013      	str	r3, [r2, #0]
 800cc3c:	693b      	ldr	r3, [r7, #16]
 800cc3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc40:	4613      	mov	r3, r2
 800cc42:	009b      	lsls	r3, r3, #2
 800cc44:	4413      	add	r3, r2
 800cc46:	009b      	lsls	r3, r3, #2
 800cc48:	4a08      	ldr	r2, [pc, #32]	; (800cc6c <xTaskPriorityDisinherit+0x104>)
 800cc4a:	441a      	add	r2, r3
 800cc4c:	693b      	ldr	r3, [r7, #16]
 800cc4e:	3304      	adds	r3, #4
 800cc50:	4619      	mov	r1, r3
 800cc52:	4610      	mov	r0, r2
 800cc54:	f7fe fbaf 	bl	800b3b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cc58:	2301      	movs	r3, #1
 800cc5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cc5c:	697b      	ldr	r3, [r7, #20]
	}
 800cc5e:	4618      	mov	r0, r3
 800cc60:	3718      	adds	r7, #24
 800cc62:	46bd      	mov	sp, r7
 800cc64:	bd80      	pop	{r7, pc}
 800cc66:	bf00      	nop
 800cc68:	20000368 	.word	0x20000368
 800cc6c:	2000036c 	.word	0x2000036c
 800cc70:	20000470 	.word	0x20000470

0800cc74 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b084      	sub	sp, #16
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
 800cc7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cc7e:	4b29      	ldr	r3, [pc, #164]	; (800cd24 <prvAddCurrentTaskToDelayedList+0xb0>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cc84:	4b28      	ldr	r3, [pc, #160]	; (800cd28 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	3304      	adds	r3, #4
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	f7fe fbf0 	bl	800b470 <uxListRemove>
 800cc90:	4603      	mov	r3, r0
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d10b      	bne.n	800ccae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800cc96:	4b24      	ldr	r3, [pc, #144]	; (800cd28 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc9c:	2201      	movs	r2, #1
 800cc9e:	fa02 f303 	lsl.w	r3, r2, r3
 800cca2:	43da      	mvns	r2, r3
 800cca4:	4b21      	ldr	r3, [pc, #132]	; (800cd2c <prvAddCurrentTaskToDelayedList+0xb8>)
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	4013      	ands	r3, r2
 800ccaa:	4a20      	ldr	r2, [pc, #128]	; (800cd2c <prvAddCurrentTaskToDelayedList+0xb8>)
 800ccac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccb4:	d10a      	bne.n	800cccc <prvAddCurrentTaskToDelayedList+0x58>
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d007      	beq.n	800cccc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ccbc:	4b1a      	ldr	r3, [pc, #104]	; (800cd28 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	3304      	adds	r3, #4
 800ccc2:	4619      	mov	r1, r3
 800ccc4:	481a      	ldr	r0, [pc, #104]	; (800cd30 <prvAddCurrentTaskToDelayedList+0xbc>)
 800ccc6:	f7fe fb76 	bl	800b3b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ccca:	e026      	b.n	800cd1a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cccc:	68fa      	ldr	r2, [r7, #12]
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	4413      	add	r3, r2
 800ccd2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ccd4:	4b14      	ldr	r3, [pc, #80]	; (800cd28 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	68ba      	ldr	r2, [r7, #8]
 800ccda:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ccdc:	68ba      	ldr	r2, [r7, #8]
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	429a      	cmp	r2, r3
 800cce2:	d209      	bcs.n	800ccf8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cce4:	4b13      	ldr	r3, [pc, #76]	; (800cd34 <prvAddCurrentTaskToDelayedList+0xc0>)
 800cce6:	681a      	ldr	r2, [r3, #0]
 800cce8:	4b0f      	ldr	r3, [pc, #60]	; (800cd28 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	3304      	adds	r3, #4
 800ccee:	4619      	mov	r1, r3
 800ccf0:	4610      	mov	r0, r2
 800ccf2:	f7fe fb84 	bl	800b3fe <vListInsert>
}
 800ccf6:	e010      	b.n	800cd1a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ccf8:	4b0f      	ldr	r3, [pc, #60]	; (800cd38 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ccfa:	681a      	ldr	r2, [r3, #0]
 800ccfc:	4b0a      	ldr	r3, [pc, #40]	; (800cd28 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	3304      	adds	r3, #4
 800cd02:	4619      	mov	r1, r3
 800cd04:	4610      	mov	r0, r2
 800cd06:	f7fe fb7a 	bl	800b3fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cd0a:	4b0c      	ldr	r3, [pc, #48]	; (800cd3c <prvAddCurrentTaskToDelayedList+0xc8>)
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	68ba      	ldr	r2, [r7, #8]
 800cd10:	429a      	cmp	r2, r3
 800cd12:	d202      	bcs.n	800cd1a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800cd14:	4a09      	ldr	r2, [pc, #36]	; (800cd3c <prvAddCurrentTaskToDelayedList+0xc8>)
 800cd16:	68bb      	ldr	r3, [r7, #8]
 800cd18:	6013      	str	r3, [r2, #0]
}
 800cd1a:	bf00      	nop
 800cd1c:	3710      	adds	r7, #16
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bd80      	pop	{r7, pc}
 800cd22:	bf00      	nop
 800cd24:	2000046c 	.word	0x2000046c
 800cd28:	20000368 	.word	0x20000368
 800cd2c:	20000470 	.word	0x20000470
 800cd30:	20000454 	.word	0x20000454
 800cd34:	20000424 	.word	0x20000424
 800cd38:	20000420 	.word	0x20000420
 800cd3c:	20000488 	.word	0x20000488

0800cd40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cd40:	b480      	push	{r7}
 800cd42:	b085      	sub	sp, #20
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	60f8      	str	r0, [r7, #12]
 800cd48:	60b9      	str	r1, [r7, #8]
 800cd4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	3b04      	subs	r3, #4
 800cd50:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cd58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	3b04      	subs	r3, #4
 800cd5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cd60:	68bb      	ldr	r3, [r7, #8]
 800cd62:	f023 0201 	bic.w	r2, r3, #1
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	3b04      	subs	r3, #4
 800cd6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cd70:	4a0c      	ldr	r2, [pc, #48]	; (800cda4 <pxPortInitialiseStack+0x64>)
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	3b14      	subs	r3, #20
 800cd7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cd7c:	687a      	ldr	r2, [r7, #4]
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	3b04      	subs	r3, #4
 800cd86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	f06f 0202 	mvn.w	r2, #2
 800cd8e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	3b20      	subs	r3, #32
 800cd94:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cd96:	68fb      	ldr	r3, [r7, #12]
}
 800cd98:	4618      	mov	r0, r3
 800cd9a:	3714      	adds	r7, #20
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda2:	4770      	bx	lr
 800cda4:	0800cda9 	.word	0x0800cda9

0800cda8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cda8:	b480      	push	{r7}
 800cdaa:	b085      	sub	sp, #20
 800cdac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cdae:	2300      	movs	r3, #0
 800cdb0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cdb2:	4b12      	ldr	r3, [pc, #72]	; (800cdfc <prvTaskExitError+0x54>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdba:	d00a      	beq.n	800cdd2 <prvTaskExitError+0x2a>
	__asm volatile
 800cdbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdc0:	f383 8811 	msr	BASEPRI, r3
 800cdc4:	f3bf 8f6f 	isb	sy
 800cdc8:	f3bf 8f4f 	dsb	sy
 800cdcc:	60fb      	str	r3, [r7, #12]
}
 800cdce:	bf00      	nop
 800cdd0:	e7fe      	b.n	800cdd0 <prvTaskExitError+0x28>
	__asm volatile
 800cdd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdd6:	f383 8811 	msr	BASEPRI, r3
 800cdda:	f3bf 8f6f 	isb	sy
 800cdde:	f3bf 8f4f 	dsb	sy
 800cde2:	60bb      	str	r3, [r7, #8]
}
 800cde4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cde6:	bf00      	nop
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d0fc      	beq.n	800cde8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cdee:	bf00      	nop
 800cdf0:	bf00      	nop
 800cdf2:	3714      	adds	r7, #20
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfa:	4770      	bx	lr
 800cdfc:	2000002c 	.word	0x2000002c

0800ce00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ce00:	4b07      	ldr	r3, [pc, #28]	; (800ce20 <pxCurrentTCBConst2>)
 800ce02:	6819      	ldr	r1, [r3, #0]
 800ce04:	6808      	ldr	r0, [r1, #0]
 800ce06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce0a:	f380 8809 	msr	PSP, r0
 800ce0e:	f3bf 8f6f 	isb	sy
 800ce12:	f04f 0000 	mov.w	r0, #0
 800ce16:	f380 8811 	msr	BASEPRI, r0
 800ce1a:	4770      	bx	lr
 800ce1c:	f3af 8000 	nop.w

0800ce20 <pxCurrentTCBConst2>:
 800ce20:	20000368 	.word	0x20000368
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ce24:	bf00      	nop
 800ce26:	bf00      	nop

0800ce28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ce28:	4808      	ldr	r0, [pc, #32]	; (800ce4c <prvPortStartFirstTask+0x24>)
 800ce2a:	6800      	ldr	r0, [r0, #0]
 800ce2c:	6800      	ldr	r0, [r0, #0]
 800ce2e:	f380 8808 	msr	MSP, r0
 800ce32:	f04f 0000 	mov.w	r0, #0
 800ce36:	f380 8814 	msr	CONTROL, r0
 800ce3a:	b662      	cpsie	i
 800ce3c:	b661      	cpsie	f
 800ce3e:	f3bf 8f4f 	dsb	sy
 800ce42:	f3bf 8f6f 	isb	sy
 800ce46:	df00      	svc	0
 800ce48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ce4a:	bf00      	nop
 800ce4c:	e000ed08 	.word	0xe000ed08

0800ce50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b086      	sub	sp, #24
 800ce54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ce56:	4b46      	ldr	r3, [pc, #280]	; (800cf70 <xPortStartScheduler+0x120>)
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	4a46      	ldr	r2, [pc, #280]	; (800cf74 <xPortStartScheduler+0x124>)
 800ce5c:	4293      	cmp	r3, r2
 800ce5e:	d10a      	bne.n	800ce76 <xPortStartScheduler+0x26>
	__asm volatile
 800ce60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce64:	f383 8811 	msr	BASEPRI, r3
 800ce68:	f3bf 8f6f 	isb	sy
 800ce6c:	f3bf 8f4f 	dsb	sy
 800ce70:	613b      	str	r3, [r7, #16]
}
 800ce72:	bf00      	nop
 800ce74:	e7fe      	b.n	800ce74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ce76:	4b3e      	ldr	r3, [pc, #248]	; (800cf70 <xPortStartScheduler+0x120>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	4a3f      	ldr	r2, [pc, #252]	; (800cf78 <xPortStartScheduler+0x128>)
 800ce7c:	4293      	cmp	r3, r2
 800ce7e:	d10a      	bne.n	800ce96 <xPortStartScheduler+0x46>
	__asm volatile
 800ce80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce84:	f383 8811 	msr	BASEPRI, r3
 800ce88:	f3bf 8f6f 	isb	sy
 800ce8c:	f3bf 8f4f 	dsb	sy
 800ce90:	60fb      	str	r3, [r7, #12]
}
 800ce92:	bf00      	nop
 800ce94:	e7fe      	b.n	800ce94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ce96:	4b39      	ldr	r3, [pc, #228]	; (800cf7c <xPortStartScheduler+0x12c>)
 800ce98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ce9a:	697b      	ldr	r3, [r7, #20]
 800ce9c:	781b      	ldrb	r3, [r3, #0]
 800ce9e:	b2db      	uxtb	r3, r3
 800cea0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cea2:	697b      	ldr	r3, [r7, #20]
 800cea4:	22ff      	movs	r2, #255	; 0xff
 800cea6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cea8:	697b      	ldr	r3, [r7, #20]
 800ceaa:	781b      	ldrb	r3, [r3, #0]
 800ceac:	b2db      	uxtb	r3, r3
 800ceae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ceb0:	78fb      	ldrb	r3, [r7, #3]
 800ceb2:	b2db      	uxtb	r3, r3
 800ceb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ceb8:	b2da      	uxtb	r2, r3
 800ceba:	4b31      	ldr	r3, [pc, #196]	; (800cf80 <xPortStartScheduler+0x130>)
 800cebc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cebe:	4b31      	ldr	r3, [pc, #196]	; (800cf84 <xPortStartScheduler+0x134>)
 800cec0:	2207      	movs	r2, #7
 800cec2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cec4:	e009      	b.n	800ceda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cec6:	4b2f      	ldr	r3, [pc, #188]	; (800cf84 <xPortStartScheduler+0x134>)
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	3b01      	subs	r3, #1
 800cecc:	4a2d      	ldr	r2, [pc, #180]	; (800cf84 <xPortStartScheduler+0x134>)
 800cece:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ced0:	78fb      	ldrb	r3, [r7, #3]
 800ced2:	b2db      	uxtb	r3, r3
 800ced4:	005b      	lsls	r3, r3, #1
 800ced6:	b2db      	uxtb	r3, r3
 800ced8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ceda:	78fb      	ldrb	r3, [r7, #3]
 800cedc:	b2db      	uxtb	r3, r3
 800cede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cee2:	2b80      	cmp	r3, #128	; 0x80
 800cee4:	d0ef      	beq.n	800cec6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cee6:	4b27      	ldr	r3, [pc, #156]	; (800cf84 <xPortStartScheduler+0x134>)
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	f1c3 0307 	rsb	r3, r3, #7
 800ceee:	2b04      	cmp	r3, #4
 800cef0:	d00a      	beq.n	800cf08 <xPortStartScheduler+0xb8>
	__asm volatile
 800cef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cef6:	f383 8811 	msr	BASEPRI, r3
 800cefa:	f3bf 8f6f 	isb	sy
 800cefe:	f3bf 8f4f 	dsb	sy
 800cf02:	60bb      	str	r3, [r7, #8]
}
 800cf04:	bf00      	nop
 800cf06:	e7fe      	b.n	800cf06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cf08:	4b1e      	ldr	r3, [pc, #120]	; (800cf84 <xPortStartScheduler+0x134>)
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	021b      	lsls	r3, r3, #8
 800cf0e:	4a1d      	ldr	r2, [pc, #116]	; (800cf84 <xPortStartScheduler+0x134>)
 800cf10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cf12:	4b1c      	ldr	r3, [pc, #112]	; (800cf84 <xPortStartScheduler+0x134>)
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cf1a:	4a1a      	ldr	r2, [pc, #104]	; (800cf84 <xPortStartScheduler+0x134>)
 800cf1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	b2da      	uxtb	r2, r3
 800cf22:	697b      	ldr	r3, [r7, #20]
 800cf24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cf26:	4b18      	ldr	r3, [pc, #96]	; (800cf88 <xPortStartScheduler+0x138>)
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	4a17      	ldr	r2, [pc, #92]	; (800cf88 <xPortStartScheduler+0x138>)
 800cf2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cf30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cf32:	4b15      	ldr	r3, [pc, #84]	; (800cf88 <xPortStartScheduler+0x138>)
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	4a14      	ldr	r2, [pc, #80]	; (800cf88 <xPortStartScheduler+0x138>)
 800cf38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cf3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cf3e:	f000 f8dd 	bl	800d0fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cf42:	4b12      	ldr	r3, [pc, #72]	; (800cf8c <xPortStartScheduler+0x13c>)
 800cf44:	2200      	movs	r2, #0
 800cf46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cf48:	f000 f8fc 	bl	800d144 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cf4c:	4b10      	ldr	r3, [pc, #64]	; (800cf90 <xPortStartScheduler+0x140>)
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	4a0f      	ldr	r2, [pc, #60]	; (800cf90 <xPortStartScheduler+0x140>)
 800cf52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cf56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cf58:	f7ff ff66 	bl	800ce28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cf5c:	f7ff fba0 	bl	800c6a0 <vTaskSwitchContext>
	prvTaskExitError();
 800cf60:	f7ff ff22 	bl	800cda8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cf64:	2300      	movs	r3, #0
}
 800cf66:	4618      	mov	r0, r3
 800cf68:	3718      	adds	r7, #24
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	bd80      	pop	{r7, pc}
 800cf6e:	bf00      	nop
 800cf70:	e000ed00 	.word	0xe000ed00
 800cf74:	410fc271 	.word	0x410fc271
 800cf78:	410fc270 	.word	0x410fc270
 800cf7c:	e000e400 	.word	0xe000e400
 800cf80:	20000494 	.word	0x20000494
 800cf84:	20000498 	.word	0x20000498
 800cf88:	e000ed20 	.word	0xe000ed20
 800cf8c:	2000002c 	.word	0x2000002c
 800cf90:	e000ef34 	.word	0xe000ef34

0800cf94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cf94:	b480      	push	{r7}
 800cf96:	b083      	sub	sp, #12
 800cf98:	af00      	add	r7, sp, #0
	__asm volatile
 800cf9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf9e:	f383 8811 	msr	BASEPRI, r3
 800cfa2:	f3bf 8f6f 	isb	sy
 800cfa6:	f3bf 8f4f 	dsb	sy
 800cfaa:	607b      	str	r3, [r7, #4]
}
 800cfac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cfae:	4b0f      	ldr	r3, [pc, #60]	; (800cfec <vPortEnterCritical+0x58>)
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	3301      	adds	r3, #1
 800cfb4:	4a0d      	ldr	r2, [pc, #52]	; (800cfec <vPortEnterCritical+0x58>)
 800cfb6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cfb8:	4b0c      	ldr	r3, [pc, #48]	; (800cfec <vPortEnterCritical+0x58>)
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	2b01      	cmp	r3, #1
 800cfbe:	d10f      	bne.n	800cfe0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cfc0:	4b0b      	ldr	r3, [pc, #44]	; (800cff0 <vPortEnterCritical+0x5c>)
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	b2db      	uxtb	r3, r3
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d00a      	beq.n	800cfe0 <vPortEnterCritical+0x4c>
	__asm volatile
 800cfca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfce:	f383 8811 	msr	BASEPRI, r3
 800cfd2:	f3bf 8f6f 	isb	sy
 800cfd6:	f3bf 8f4f 	dsb	sy
 800cfda:	603b      	str	r3, [r7, #0]
}
 800cfdc:	bf00      	nop
 800cfde:	e7fe      	b.n	800cfde <vPortEnterCritical+0x4a>
	}
}
 800cfe0:	bf00      	nop
 800cfe2:	370c      	adds	r7, #12
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfea:	4770      	bx	lr
 800cfec:	2000002c 	.word	0x2000002c
 800cff0:	e000ed04 	.word	0xe000ed04

0800cff4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cff4:	b480      	push	{r7}
 800cff6:	b083      	sub	sp, #12
 800cff8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cffa:	4b12      	ldr	r3, [pc, #72]	; (800d044 <vPortExitCritical+0x50>)
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d10a      	bne.n	800d018 <vPortExitCritical+0x24>
	__asm volatile
 800d002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d006:	f383 8811 	msr	BASEPRI, r3
 800d00a:	f3bf 8f6f 	isb	sy
 800d00e:	f3bf 8f4f 	dsb	sy
 800d012:	607b      	str	r3, [r7, #4]
}
 800d014:	bf00      	nop
 800d016:	e7fe      	b.n	800d016 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d018:	4b0a      	ldr	r3, [pc, #40]	; (800d044 <vPortExitCritical+0x50>)
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	3b01      	subs	r3, #1
 800d01e:	4a09      	ldr	r2, [pc, #36]	; (800d044 <vPortExitCritical+0x50>)
 800d020:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d022:	4b08      	ldr	r3, [pc, #32]	; (800d044 <vPortExitCritical+0x50>)
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d105      	bne.n	800d036 <vPortExitCritical+0x42>
 800d02a:	2300      	movs	r3, #0
 800d02c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	f383 8811 	msr	BASEPRI, r3
}
 800d034:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d036:	bf00      	nop
 800d038:	370c      	adds	r7, #12
 800d03a:	46bd      	mov	sp, r7
 800d03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d040:	4770      	bx	lr
 800d042:	bf00      	nop
 800d044:	2000002c 	.word	0x2000002c
	...

0800d050 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d050:	f3ef 8009 	mrs	r0, PSP
 800d054:	f3bf 8f6f 	isb	sy
 800d058:	4b15      	ldr	r3, [pc, #84]	; (800d0b0 <pxCurrentTCBConst>)
 800d05a:	681a      	ldr	r2, [r3, #0]
 800d05c:	f01e 0f10 	tst.w	lr, #16
 800d060:	bf08      	it	eq
 800d062:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d066:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d06a:	6010      	str	r0, [r2, #0]
 800d06c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d070:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d074:	f380 8811 	msr	BASEPRI, r0
 800d078:	f3bf 8f4f 	dsb	sy
 800d07c:	f3bf 8f6f 	isb	sy
 800d080:	f7ff fb0e 	bl	800c6a0 <vTaskSwitchContext>
 800d084:	f04f 0000 	mov.w	r0, #0
 800d088:	f380 8811 	msr	BASEPRI, r0
 800d08c:	bc09      	pop	{r0, r3}
 800d08e:	6819      	ldr	r1, [r3, #0]
 800d090:	6808      	ldr	r0, [r1, #0]
 800d092:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d096:	f01e 0f10 	tst.w	lr, #16
 800d09a:	bf08      	it	eq
 800d09c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d0a0:	f380 8809 	msr	PSP, r0
 800d0a4:	f3bf 8f6f 	isb	sy
 800d0a8:	4770      	bx	lr
 800d0aa:	bf00      	nop
 800d0ac:	f3af 8000 	nop.w

0800d0b0 <pxCurrentTCBConst>:
 800d0b0:	20000368 	.word	0x20000368
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d0b4:	bf00      	nop
 800d0b6:	bf00      	nop

0800d0b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b082      	sub	sp, #8
 800d0bc:	af00      	add	r7, sp, #0
	__asm volatile
 800d0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c2:	f383 8811 	msr	BASEPRI, r3
 800d0c6:	f3bf 8f6f 	isb	sy
 800d0ca:	f3bf 8f4f 	dsb	sy
 800d0ce:	607b      	str	r3, [r7, #4]
}
 800d0d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d0d2:	f7ff fa2d 	bl	800c530 <xTaskIncrementTick>
 800d0d6:	4603      	mov	r3, r0
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d003      	beq.n	800d0e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d0dc:	4b06      	ldr	r3, [pc, #24]	; (800d0f8 <SysTick_Handler+0x40>)
 800d0de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0e2:	601a      	str	r2, [r3, #0]
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d0e8:	683b      	ldr	r3, [r7, #0]
 800d0ea:	f383 8811 	msr	BASEPRI, r3
}
 800d0ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d0f0:	bf00      	nop
 800d0f2:	3708      	adds	r7, #8
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	bd80      	pop	{r7, pc}
 800d0f8:	e000ed04 	.word	0xe000ed04

0800d0fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d0fc:	b480      	push	{r7}
 800d0fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d100:	4b0b      	ldr	r3, [pc, #44]	; (800d130 <vPortSetupTimerInterrupt+0x34>)
 800d102:	2200      	movs	r2, #0
 800d104:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d106:	4b0b      	ldr	r3, [pc, #44]	; (800d134 <vPortSetupTimerInterrupt+0x38>)
 800d108:	2200      	movs	r2, #0
 800d10a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d10c:	4b0a      	ldr	r3, [pc, #40]	; (800d138 <vPortSetupTimerInterrupt+0x3c>)
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	4a0a      	ldr	r2, [pc, #40]	; (800d13c <vPortSetupTimerInterrupt+0x40>)
 800d112:	fba2 2303 	umull	r2, r3, r2, r3
 800d116:	099b      	lsrs	r3, r3, #6
 800d118:	4a09      	ldr	r2, [pc, #36]	; (800d140 <vPortSetupTimerInterrupt+0x44>)
 800d11a:	3b01      	subs	r3, #1
 800d11c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d11e:	4b04      	ldr	r3, [pc, #16]	; (800d130 <vPortSetupTimerInterrupt+0x34>)
 800d120:	2207      	movs	r2, #7
 800d122:	601a      	str	r2, [r3, #0]
}
 800d124:	bf00      	nop
 800d126:	46bd      	mov	sp, r7
 800d128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12c:	4770      	bx	lr
 800d12e:	bf00      	nop
 800d130:	e000e010 	.word	0xe000e010
 800d134:	e000e018 	.word	0xe000e018
 800d138:	20000000 	.word	0x20000000
 800d13c:	10624dd3 	.word	0x10624dd3
 800d140:	e000e014 	.word	0xe000e014

0800d144 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d144:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d154 <vPortEnableVFP+0x10>
 800d148:	6801      	ldr	r1, [r0, #0]
 800d14a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d14e:	6001      	str	r1, [r0, #0]
 800d150:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d152:	bf00      	nop
 800d154:	e000ed88 	.word	0xe000ed88

0800d158 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d158:	b480      	push	{r7}
 800d15a:	b085      	sub	sp, #20
 800d15c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d15e:	f3ef 8305 	mrs	r3, IPSR
 800d162:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	2b0f      	cmp	r3, #15
 800d168:	d914      	bls.n	800d194 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d16a:	4a17      	ldr	r2, [pc, #92]	; (800d1c8 <vPortValidateInterruptPriority+0x70>)
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	4413      	add	r3, r2
 800d170:	781b      	ldrb	r3, [r3, #0]
 800d172:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d174:	4b15      	ldr	r3, [pc, #84]	; (800d1cc <vPortValidateInterruptPriority+0x74>)
 800d176:	781b      	ldrb	r3, [r3, #0]
 800d178:	7afa      	ldrb	r2, [r7, #11]
 800d17a:	429a      	cmp	r2, r3
 800d17c:	d20a      	bcs.n	800d194 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d182:	f383 8811 	msr	BASEPRI, r3
 800d186:	f3bf 8f6f 	isb	sy
 800d18a:	f3bf 8f4f 	dsb	sy
 800d18e:	607b      	str	r3, [r7, #4]
}
 800d190:	bf00      	nop
 800d192:	e7fe      	b.n	800d192 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d194:	4b0e      	ldr	r3, [pc, #56]	; (800d1d0 <vPortValidateInterruptPriority+0x78>)
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d19c:	4b0d      	ldr	r3, [pc, #52]	; (800d1d4 <vPortValidateInterruptPriority+0x7c>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	429a      	cmp	r2, r3
 800d1a2:	d90a      	bls.n	800d1ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1a8:	f383 8811 	msr	BASEPRI, r3
 800d1ac:	f3bf 8f6f 	isb	sy
 800d1b0:	f3bf 8f4f 	dsb	sy
 800d1b4:	603b      	str	r3, [r7, #0]
}
 800d1b6:	bf00      	nop
 800d1b8:	e7fe      	b.n	800d1b8 <vPortValidateInterruptPriority+0x60>
	}
 800d1ba:	bf00      	nop
 800d1bc:	3714      	adds	r7, #20
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c4:	4770      	bx	lr
 800d1c6:	bf00      	nop
 800d1c8:	e000e3f0 	.word	0xe000e3f0
 800d1cc:	20000494 	.word	0x20000494
 800d1d0:	e000ed0c 	.word	0xe000ed0c
 800d1d4:	20000498 	.word	0x20000498

0800d1d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b08a      	sub	sp, #40	; 0x28
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d1e4:	f7ff f8fa 	bl	800c3dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d1e8:	4b5b      	ldr	r3, [pc, #364]	; (800d358 <pvPortMalloc+0x180>)
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d101      	bne.n	800d1f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d1f0:	f000 f920 	bl	800d434 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d1f4:	4b59      	ldr	r3, [pc, #356]	; (800d35c <pvPortMalloc+0x184>)
 800d1f6:	681a      	ldr	r2, [r3, #0]
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	4013      	ands	r3, r2
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	f040 8093 	bne.w	800d328 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d01d      	beq.n	800d244 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d208:	2208      	movs	r2, #8
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	4413      	add	r3, r2
 800d20e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	f003 0307 	and.w	r3, r3, #7
 800d216:	2b00      	cmp	r3, #0
 800d218:	d014      	beq.n	800d244 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	f023 0307 	bic.w	r3, r3, #7
 800d220:	3308      	adds	r3, #8
 800d222:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	f003 0307 	and.w	r3, r3, #7
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d00a      	beq.n	800d244 <pvPortMalloc+0x6c>
	__asm volatile
 800d22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d232:	f383 8811 	msr	BASEPRI, r3
 800d236:	f3bf 8f6f 	isb	sy
 800d23a:	f3bf 8f4f 	dsb	sy
 800d23e:	617b      	str	r3, [r7, #20]
}
 800d240:	bf00      	nop
 800d242:	e7fe      	b.n	800d242 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d06e      	beq.n	800d328 <pvPortMalloc+0x150>
 800d24a:	4b45      	ldr	r3, [pc, #276]	; (800d360 <pvPortMalloc+0x188>)
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	687a      	ldr	r2, [r7, #4]
 800d250:	429a      	cmp	r2, r3
 800d252:	d869      	bhi.n	800d328 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d254:	4b43      	ldr	r3, [pc, #268]	; (800d364 <pvPortMalloc+0x18c>)
 800d256:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d258:	4b42      	ldr	r3, [pc, #264]	; (800d364 <pvPortMalloc+0x18c>)
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d25e:	e004      	b.n	800d26a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d262:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d26c:	685b      	ldr	r3, [r3, #4]
 800d26e:	687a      	ldr	r2, [r7, #4]
 800d270:	429a      	cmp	r2, r3
 800d272:	d903      	bls.n	800d27c <pvPortMalloc+0xa4>
 800d274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d1f1      	bne.n	800d260 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d27c:	4b36      	ldr	r3, [pc, #216]	; (800d358 <pvPortMalloc+0x180>)
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d282:	429a      	cmp	r2, r3
 800d284:	d050      	beq.n	800d328 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d286:	6a3b      	ldr	r3, [r7, #32]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	2208      	movs	r2, #8
 800d28c:	4413      	add	r3, r2
 800d28e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d292:	681a      	ldr	r2, [r3, #0]
 800d294:	6a3b      	ldr	r3, [r7, #32]
 800d296:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d29a:	685a      	ldr	r2, [r3, #4]
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	1ad2      	subs	r2, r2, r3
 800d2a0:	2308      	movs	r3, #8
 800d2a2:	005b      	lsls	r3, r3, #1
 800d2a4:	429a      	cmp	r2, r3
 800d2a6:	d91f      	bls.n	800d2e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d2a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	4413      	add	r3, r2
 800d2ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d2b0:	69bb      	ldr	r3, [r7, #24]
 800d2b2:	f003 0307 	and.w	r3, r3, #7
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d00a      	beq.n	800d2d0 <pvPortMalloc+0xf8>
	__asm volatile
 800d2ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2be:	f383 8811 	msr	BASEPRI, r3
 800d2c2:	f3bf 8f6f 	isb	sy
 800d2c6:	f3bf 8f4f 	dsb	sy
 800d2ca:	613b      	str	r3, [r7, #16]
}
 800d2cc:	bf00      	nop
 800d2ce:	e7fe      	b.n	800d2ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2d2:	685a      	ldr	r2, [r3, #4]
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	1ad2      	subs	r2, r2, r3
 800d2d8:	69bb      	ldr	r3, [r7, #24]
 800d2da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2de:	687a      	ldr	r2, [r7, #4]
 800d2e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d2e2:	69b8      	ldr	r0, [r7, #24]
 800d2e4:	f000 f908 	bl	800d4f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d2e8:	4b1d      	ldr	r3, [pc, #116]	; (800d360 <pvPortMalloc+0x188>)
 800d2ea:	681a      	ldr	r2, [r3, #0]
 800d2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ee:	685b      	ldr	r3, [r3, #4]
 800d2f0:	1ad3      	subs	r3, r2, r3
 800d2f2:	4a1b      	ldr	r2, [pc, #108]	; (800d360 <pvPortMalloc+0x188>)
 800d2f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d2f6:	4b1a      	ldr	r3, [pc, #104]	; (800d360 <pvPortMalloc+0x188>)
 800d2f8:	681a      	ldr	r2, [r3, #0]
 800d2fa:	4b1b      	ldr	r3, [pc, #108]	; (800d368 <pvPortMalloc+0x190>)
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	429a      	cmp	r2, r3
 800d300:	d203      	bcs.n	800d30a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d302:	4b17      	ldr	r3, [pc, #92]	; (800d360 <pvPortMalloc+0x188>)
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	4a18      	ldr	r2, [pc, #96]	; (800d368 <pvPortMalloc+0x190>)
 800d308:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d30c:	685a      	ldr	r2, [r3, #4]
 800d30e:	4b13      	ldr	r3, [pc, #76]	; (800d35c <pvPortMalloc+0x184>)
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	431a      	orrs	r2, r3
 800d314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d316:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d31a:	2200      	movs	r2, #0
 800d31c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d31e:	4b13      	ldr	r3, [pc, #76]	; (800d36c <pvPortMalloc+0x194>)
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	3301      	adds	r3, #1
 800d324:	4a11      	ldr	r2, [pc, #68]	; (800d36c <pvPortMalloc+0x194>)
 800d326:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d328:	f7ff f866 	bl	800c3f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d32c:	69fb      	ldr	r3, [r7, #28]
 800d32e:	f003 0307 	and.w	r3, r3, #7
 800d332:	2b00      	cmp	r3, #0
 800d334:	d00a      	beq.n	800d34c <pvPortMalloc+0x174>
	__asm volatile
 800d336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d33a:	f383 8811 	msr	BASEPRI, r3
 800d33e:	f3bf 8f6f 	isb	sy
 800d342:	f3bf 8f4f 	dsb	sy
 800d346:	60fb      	str	r3, [r7, #12]
}
 800d348:	bf00      	nop
 800d34a:	e7fe      	b.n	800d34a <pvPortMalloc+0x172>
	return pvReturn;
 800d34c:	69fb      	ldr	r3, [r7, #28]
}
 800d34e:	4618      	mov	r0, r3
 800d350:	3728      	adds	r7, #40	; 0x28
 800d352:	46bd      	mov	sp, r7
 800d354:	bd80      	pop	{r7, pc}
 800d356:	bf00      	nop
 800d358:	200040a4 	.word	0x200040a4
 800d35c:	200040b8 	.word	0x200040b8
 800d360:	200040a8 	.word	0x200040a8
 800d364:	2000409c 	.word	0x2000409c
 800d368:	200040ac 	.word	0x200040ac
 800d36c:	200040b0 	.word	0x200040b0

0800d370 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b086      	sub	sp, #24
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d04d      	beq.n	800d41e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d382:	2308      	movs	r3, #8
 800d384:	425b      	negs	r3, r3
 800d386:	697a      	ldr	r2, [r7, #20]
 800d388:	4413      	add	r3, r2
 800d38a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d38c:	697b      	ldr	r3, [r7, #20]
 800d38e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d390:	693b      	ldr	r3, [r7, #16]
 800d392:	685a      	ldr	r2, [r3, #4]
 800d394:	4b24      	ldr	r3, [pc, #144]	; (800d428 <vPortFree+0xb8>)
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	4013      	ands	r3, r2
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d10a      	bne.n	800d3b4 <vPortFree+0x44>
	__asm volatile
 800d39e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3a2:	f383 8811 	msr	BASEPRI, r3
 800d3a6:	f3bf 8f6f 	isb	sy
 800d3aa:	f3bf 8f4f 	dsb	sy
 800d3ae:	60fb      	str	r3, [r7, #12]
}
 800d3b0:	bf00      	nop
 800d3b2:	e7fe      	b.n	800d3b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d3b4:	693b      	ldr	r3, [r7, #16]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d00a      	beq.n	800d3d2 <vPortFree+0x62>
	__asm volatile
 800d3bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3c0:	f383 8811 	msr	BASEPRI, r3
 800d3c4:	f3bf 8f6f 	isb	sy
 800d3c8:	f3bf 8f4f 	dsb	sy
 800d3cc:	60bb      	str	r3, [r7, #8]
}
 800d3ce:	bf00      	nop
 800d3d0:	e7fe      	b.n	800d3d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d3d2:	693b      	ldr	r3, [r7, #16]
 800d3d4:	685a      	ldr	r2, [r3, #4]
 800d3d6:	4b14      	ldr	r3, [pc, #80]	; (800d428 <vPortFree+0xb8>)
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	4013      	ands	r3, r2
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d01e      	beq.n	800d41e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d3e0:	693b      	ldr	r3, [r7, #16]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d11a      	bne.n	800d41e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d3e8:	693b      	ldr	r3, [r7, #16]
 800d3ea:	685a      	ldr	r2, [r3, #4]
 800d3ec:	4b0e      	ldr	r3, [pc, #56]	; (800d428 <vPortFree+0xb8>)
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	43db      	mvns	r3, r3
 800d3f2:	401a      	ands	r2, r3
 800d3f4:	693b      	ldr	r3, [r7, #16]
 800d3f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d3f8:	f7fe fff0 	bl	800c3dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d3fc:	693b      	ldr	r3, [r7, #16]
 800d3fe:	685a      	ldr	r2, [r3, #4]
 800d400:	4b0a      	ldr	r3, [pc, #40]	; (800d42c <vPortFree+0xbc>)
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	4413      	add	r3, r2
 800d406:	4a09      	ldr	r2, [pc, #36]	; (800d42c <vPortFree+0xbc>)
 800d408:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d40a:	6938      	ldr	r0, [r7, #16]
 800d40c:	f000 f874 	bl	800d4f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d410:	4b07      	ldr	r3, [pc, #28]	; (800d430 <vPortFree+0xc0>)
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	3301      	adds	r3, #1
 800d416:	4a06      	ldr	r2, [pc, #24]	; (800d430 <vPortFree+0xc0>)
 800d418:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d41a:	f7fe ffed 	bl	800c3f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d41e:	bf00      	nop
 800d420:	3718      	adds	r7, #24
 800d422:	46bd      	mov	sp, r7
 800d424:	bd80      	pop	{r7, pc}
 800d426:	bf00      	nop
 800d428:	200040b8 	.word	0x200040b8
 800d42c:	200040a8 	.word	0x200040a8
 800d430:	200040b4 	.word	0x200040b4

0800d434 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d434:	b480      	push	{r7}
 800d436:	b085      	sub	sp, #20
 800d438:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d43a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d43e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d440:	4b27      	ldr	r3, [pc, #156]	; (800d4e0 <prvHeapInit+0xac>)
 800d442:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	f003 0307 	and.w	r3, r3, #7
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d00c      	beq.n	800d468 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	3307      	adds	r3, #7
 800d452:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	f023 0307 	bic.w	r3, r3, #7
 800d45a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d45c:	68ba      	ldr	r2, [r7, #8]
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	1ad3      	subs	r3, r2, r3
 800d462:	4a1f      	ldr	r2, [pc, #124]	; (800d4e0 <prvHeapInit+0xac>)
 800d464:	4413      	add	r3, r2
 800d466:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d46c:	4a1d      	ldr	r2, [pc, #116]	; (800d4e4 <prvHeapInit+0xb0>)
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d472:	4b1c      	ldr	r3, [pc, #112]	; (800d4e4 <prvHeapInit+0xb0>)
 800d474:	2200      	movs	r2, #0
 800d476:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	68ba      	ldr	r2, [r7, #8]
 800d47c:	4413      	add	r3, r2
 800d47e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d480:	2208      	movs	r2, #8
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	1a9b      	subs	r3, r3, r2
 800d486:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	f023 0307 	bic.w	r3, r3, #7
 800d48e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	4a15      	ldr	r2, [pc, #84]	; (800d4e8 <prvHeapInit+0xb4>)
 800d494:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d496:	4b14      	ldr	r3, [pc, #80]	; (800d4e8 <prvHeapInit+0xb4>)
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	2200      	movs	r2, #0
 800d49c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d49e:	4b12      	ldr	r3, [pc, #72]	; (800d4e8 <prvHeapInit+0xb4>)
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	68fa      	ldr	r2, [r7, #12]
 800d4ae:	1ad2      	subs	r2, r2, r3
 800d4b0:	683b      	ldr	r3, [r7, #0]
 800d4b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d4b4:	4b0c      	ldr	r3, [pc, #48]	; (800d4e8 <prvHeapInit+0xb4>)
 800d4b6:	681a      	ldr	r2, [r3, #0]
 800d4b8:	683b      	ldr	r3, [r7, #0]
 800d4ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	685b      	ldr	r3, [r3, #4]
 800d4c0:	4a0a      	ldr	r2, [pc, #40]	; (800d4ec <prvHeapInit+0xb8>)
 800d4c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d4c4:	683b      	ldr	r3, [r7, #0]
 800d4c6:	685b      	ldr	r3, [r3, #4]
 800d4c8:	4a09      	ldr	r2, [pc, #36]	; (800d4f0 <prvHeapInit+0xbc>)
 800d4ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d4cc:	4b09      	ldr	r3, [pc, #36]	; (800d4f4 <prvHeapInit+0xc0>)
 800d4ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d4d2:	601a      	str	r2, [r3, #0]
}
 800d4d4:	bf00      	nop
 800d4d6:	3714      	adds	r7, #20
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4de:	4770      	bx	lr
 800d4e0:	2000049c 	.word	0x2000049c
 800d4e4:	2000409c 	.word	0x2000409c
 800d4e8:	200040a4 	.word	0x200040a4
 800d4ec:	200040ac 	.word	0x200040ac
 800d4f0:	200040a8 	.word	0x200040a8
 800d4f4:	200040b8 	.word	0x200040b8

0800d4f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d4f8:	b480      	push	{r7}
 800d4fa:	b085      	sub	sp, #20
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d500:	4b28      	ldr	r3, [pc, #160]	; (800d5a4 <prvInsertBlockIntoFreeList+0xac>)
 800d502:	60fb      	str	r3, [r7, #12]
 800d504:	e002      	b.n	800d50c <prvInsertBlockIntoFreeList+0x14>
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	60fb      	str	r3, [r7, #12]
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	687a      	ldr	r2, [r7, #4]
 800d512:	429a      	cmp	r2, r3
 800d514:	d8f7      	bhi.n	800d506 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	685b      	ldr	r3, [r3, #4]
 800d51e:	68ba      	ldr	r2, [r7, #8]
 800d520:	4413      	add	r3, r2
 800d522:	687a      	ldr	r2, [r7, #4]
 800d524:	429a      	cmp	r2, r3
 800d526:	d108      	bne.n	800d53a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	685a      	ldr	r2, [r3, #4]
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	685b      	ldr	r3, [r3, #4]
 800d530:	441a      	add	r2, r3
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	685b      	ldr	r3, [r3, #4]
 800d542:	68ba      	ldr	r2, [r7, #8]
 800d544:	441a      	add	r2, r3
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	429a      	cmp	r2, r3
 800d54c:	d118      	bne.n	800d580 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	681a      	ldr	r2, [r3, #0]
 800d552:	4b15      	ldr	r3, [pc, #84]	; (800d5a8 <prvInsertBlockIntoFreeList+0xb0>)
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	429a      	cmp	r2, r3
 800d558:	d00d      	beq.n	800d576 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	685a      	ldr	r2, [r3, #4]
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	685b      	ldr	r3, [r3, #4]
 800d564:	441a      	add	r2, r3
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	681a      	ldr	r2, [r3, #0]
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	601a      	str	r2, [r3, #0]
 800d574:	e008      	b.n	800d588 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d576:	4b0c      	ldr	r3, [pc, #48]	; (800d5a8 <prvInsertBlockIntoFreeList+0xb0>)
 800d578:	681a      	ldr	r2, [r3, #0]
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	601a      	str	r2, [r3, #0]
 800d57e:	e003      	b.n	800d588 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	681a      	ldr	r2, [r3, #0]
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d588:	68fa      	ldr	r2, [r7, #12]
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	429a      	cmp	r2, r3
 800d58e:	d002      	beq.n	800d596 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	687a      	ldr	r2, [r7, #4]
 800d594:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d596:	bf00      	nop
 800d598:	3714      	adds	r7, #20
 800d59a:	46bd      	mov	sp, r7
 800d59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a0:	4770      	bx	lr
 800d5a2:	bf00      	nop
 800d5a4:	2000409c 	.word	0x2000409c
 800d5a8:	200040a4 	.word	0x200040a4

0800d5ac <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800d5b0:	2201      	movs	r2, #1
 800d5b2:	490e      	ldr	r1, [pc, #56]	; (800d5ec <MX_USB_HOST_Init+0x40>)
 800d5b4:	480e      	ldr	r0, [pc, #56]	; (800d5f0 <MX_USB_HOST_Init+0x44>)
 800d5b6:	f7fb ffd7 	bl	8009568 <USBH_Init>
 800d5ba:	4603      	mov	r3, r0
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d001      	beq.n	800d5c4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800d5c0:	f7f4 f81e 	bl	8001600 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800d5c4:	490b      	ldr	r1, [pc, #44]	; (800d5f4 <MX_USB_HOST_Init+0x48>)
 800d5c6:	480a      	ldr	r0, [pc, #40]	; (800d5f0 <MX_USB_HOST_Init+0x44>)
 800d5c8:	f7fc f884 	bl	80096d4 <USBH_RegisterClass>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d001      	beq.n	800d5d6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800d5d2:	f7f4 f815 	bl	8001600 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800d5d6:	4806      	ldr	r0, [pc, #24]	; (800d5f0 <MX_USB_HOST_Init+0x44>)
 800d5d8:	f7fc f908 	bl	80097ec <USBH_Start>
 800d5dc:	4603      	mov	r3, r0
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d001      	beq.n	800d5e6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800d5e2:	f7f4 f80d 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800d5e6:	bf00      	nop
 800d5e8:	bd80      	pop	{r7, pc}
 800d5ea:	bf00      	nop
 800d5ec:	0800d5f9 	.word	0x0800d5f9
 800d5f0:	200044d4 	.word	0x200044d4
 800d5f4:	2000000c 	.word	0x2000000c

0800d5f8 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800d5f8:	b480      	push	{r7}
 800d5fa:	b083      	sub	sp, #12
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
 800d600:	460b      	mov	r3, r1
 800d602:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800d604:	78fb      	ldrb	r3, [r7, #3]
 800d606:	3b01      	subs	r3, #1
 800d608:	2b04      	cmp	r3, #4
 800d60a:	d819      	bhi.n	800d640 <USBH_UserProcess+0x48>
 800d60c:	a201      	add	r2, pc, #4	; (adr r2, 800d614 <USBH_UserProcess+0x1c>)
 800d60e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d612:	bf00      	nop
 800d614:	0800d641 	.word	0x0800d641
 800d618:	0800d631 	.word	0x0800d631
 800d61c:	0800d641 	.word	0x0800d641
 800d620:	0800d639 	.word	0x0800d639
 800d624:	0800d629 	.word	0x0800d629
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800d628:	4b09      	ldr	r3, [pc, #36]	; (800d650 <USBH_UserProcess+0x58>)
 800d62a:	2203      	movs	r2, #3
 800d62c:	701a      	strb	r2, [r3, #0]
  break;
 800d62e:	e008      	b.n	800d642 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800d630:	4b07      	ldr	r3, [pc, #28]	; (800d650 <USBH_UserProcess+0x58>)
 800d632:	2202      	movs	r2, #2
 800d634:	701a      	strb	r2, [r3, #0]
  break;
 800d636:	e004      	b.n	800d642 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800d638:	4b05      	ldr	r3, [pc, #20]	; (800d650 <USBH_UserProcess+0x58>)
 800d63a:	2201      	movs	r2, #1
 800d63c:	701a      	strb	r2, [r3, #0]
  break;
 800d63e:	e000      	b.n	800d642 <USBH_UserProcess+0x4a>

  default:
  break;
 800d640:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800d642:	bf00      	nop
 800d644:	370c      	adds	r7, #12
 800d646:	46bd      	mov	sp, r7
 800d648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64c:	4770      	bx	lr
 800d64e:	bf00      	nop
 800d650:	200040bc 	.word	0x200040bc

0800d654 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b08a      	sub	sp, #40	; 0x28
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d65c:	f107 0314 	add.w	r3, r7, #20
 800d660:	2200      	movs	r2, #0
 800d662:	601a      	str	r2, [r3, #0]
 800d664:	605a      	str	r2, [r3, #4]
 800d666:	609a      	str	r2, [r3, #8]
 800d668:	60da      	str	r2, [r3, #12]
 800d66a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d674:	d147      	bne.n	800d706 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d676:	2300      	movs	r3, #0
 800d678:	613b      	str	r3, [r7, #16]
 800d67a:	4b25      	ldr	r3, [pc, #148]	; (800d710 <HAL_HCD_MspInit+0xbc>)
 800d67c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d67e:	4a24      	ldr	r2, [pc, #144]	; (800d710 <HAL_HCD_MspInit+0xbc>)
 800d680:	f043 0301 	orr.w	r3, r3, #1
 800d684:	6313      	str	r3, [r2, #48]	; 0x30
 800d686:	4b22      	ldr	r3, [pc, #136]	; (800d710 <HAL_HCD_MspInit+0xbc>)
 800d688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d68a:	f003 0301 	and.w	r3, r3, #1
 800d68e:	613b      	str	r3, [r7, #16]
 800d690:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800d692:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d696:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d698:	2300      	movs	r3, #0
 800d69a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d69c:	2300      	movs	r3, #0
 800d69e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800d6a0:	f107 0314 	add.w	r3, r7, #20
 800d6a4:	4619      	mov	r1, r3
 800d6a6:	481b      	ldr	r0, [pc, #108]	; (800d714 <HAL_HCD_MspInit+0xc0>)
 800d6a8:	f7f6 fa72 	bl	8003b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800d6ac:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800d6b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d6b2:	2302      	movs	r3, #2
 800d6b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d6be:	230a      	movs	r3, #10
 800d6c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d6c2:	f107 0314 	add.w	r3, r7, #20
 800d6c6:	4619      	mov	r1, r3
 800d6c8:	4812      	ldr	r0, [pc, #72]	; (800d714 <HAL_HCD_MspInit+0xc0>)
 800d6ca:	f7f6 fa61 	bl	8003b90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d6ce:	4b10      	ldr	r3, [pc, #64]	; (800d710 <HAL_HCD_MspInit+0xbc>)
 800d6d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6d2:	4a0f      	ldr	r2, [pc, #60]	; (800d710 <HAL_HCD_MspInit+0xbc>)
 800d6d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d6d8:	6353      	str	r3, [r2, #52]	; 0x34
 800d6da:	2300      	movs	r3, #0
 800d6dc:	60fb      	str	r3, [r7, #12]
 800d6de:	4b0c      	ldr	r3, [pc, #48]	; (800d710 <HAL_HCD_MspInit+0xbc>)
 800d6e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d6e2:	4a0b      	ldr	r2, [pc, #44]	; (800d710 <HAL_HCD_MspInit+0xbc>)
 800d6e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d6e8:	6453      	str	r3, [r2, #68]	; 0x44
 800d6ea:	4b09      	ldr	r3, [pc, #36]	; (800d710 <HAL_HCD_MspInit+0xbc>)
 800d6ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d6ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d6f2:	60fb      	str	r3, [r7, #12]
 800d6f4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	2105      	movs	r1, #5
 800d6fa:	2043      	movs	r0, #67	; 0x43
 800d6fc:	f7f5 feae 	bl	800345c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d700:	2043      	movs	r0, #67	; 0x43
 800d702:	f7f5 fec7 	bl	8003494 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d706:	bf00      	nop
 800d708:	3728      	adds	r7, #40	; 0x28
 800d70a:	46bd      	mov	sp, r7
 800d70c:	bd80      	pop	{r7, pc}
 800d70e:	bf00      	nop
 800d710:	40023800 	.word	0x40023800
 800d714:	40020000 	.word	0x40020000

0800d718 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b082      	sub	sp, #8
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d726:	4618      	mov	r0, r3
 800d728:	f7fc fd0d 	bl	800a146 <USBH_LL_IncTimer>
}
 800d72c:	bf00      	nop
 800d72e:	3708      	adds	r7, #8
 800d730:	46bd      	mov	sp, r7
 800d732:	bd80      	pop	{r7, pc}

0800d734 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b082      	sub	sp, #8
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d742:	4618      	mov	r0, r3
 800d744:	f7fc fd51 	bl	800a1ea <USBH_LL_Connect>
}
 800d748:	bf00      	nop
 800d74a:	3708      	adds	r7, #8
 800d74c:	46bd      	mov	sp, r7
 800d74e:	bd80      	pop	{r7, pc}

0800d750 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b082      	sub	sp, #8
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d75e:	4618      	mov	r0, r3
 800d760:	f7fc fd66 	bl	800a230 <USBH_LL_Disconnect>
}
 800d764:	bf00      	nop
 800d766:	3708      	adds	r7, #8
 800d768:	46bd      	mov	sp, r7
 800d76a:	bd80      	pop	{r7, pc}

0800d76c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b082      	sub	sp, #8
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
 800d774:	460b      	mov	r3, r1
 800d776:	70fb      	strb	r3, [r7, #3]
 800d778:	4613      	mov	r3, r2
 800d77a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d782:	4618      	mov	r0, r3
 800d784:	f7fc fd9b 	bl	800a2be <USBH_LL_NotifyURBChange>
#endif
}
 800d788:	bf00      	nop
 800d78a:	3708      	adds	r7, #8
 800d78c:	46bd      	mov	sp, r7
 800d78e:	bd80      	pop	{r7, pc}

0800d790 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d790:	b580      	push	{r7, lr}
 800d792:	b082      	sub	sp, #8
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f7fc fcfb 	bl	800a19a <USBH_LL_PortEnabled>
}
 800d7a4:	bf00      	nop
 800d7a6:	3708      	adds	r7, #8
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	bd80      	pop	{r7, pc}

0800d7ac <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b082      	sub	sp, #8
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	f7fc fd07 	bl	800a1ce <USBH_LL_PortDisabled>
}
 800d7c0:	bf00      	nop
 800d7c2:	3708      	adds	r7, #8
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	bd80      	pop	{r7, pc}

0800d7c8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b082      	sub	sp, #8
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800d7d6:	2b01      	cmp	r3, #1
 800d7d8:	d12a      	bne.n	800d830 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800d7da:	4a18      	ldr	r2, [pc, #96]	; (800d83c <USBH_LL_Init+0x74>)
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	4a15      	ldr	r2, [pc, #84]	; (800d83c <USBH_LL_Init+0x74>)
 800d7e6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d7ea:	4b14      	ldr	r3, [pc, #80]	; (800d83c <USBH_LL_Init+0x74>)
 800d7ec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d7f0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800d7f2:	4b12      	ldr	r3, [pc, #72]	; (800d83c <USBH_LL_Init+0x74>)
 800d7f4:	2208      	movs	r2, #8
 800d7f6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800d7f8:	4b10      	ldr	r3, [pc, #64]	; (800d83c <USBH_LL_Init+0x74>)
 800d7fa:	2201      	movs	r2, #1
 800d7fc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d7fe:	4b0f      	ldr	r3, [pc, #60]	; (800d83c <USBH_LL_Init+0x74>)
 800d800:	2200      	movs	r2, #0
 800d802:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800d804:	4b0d      	ldr	r3, [pc, #52]	; (800d83c <USBH_LL_Init+0x74>)
 800d806:	2202      	movs	r2, #2
 800d808:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d80a:	4b0c      	ldr	r3, [pc, #48]	; (800d83c <USBH_LL_Init+0x74>)
 800d80c:	2200      	movs	r2, #0
 800d80e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800d810:	480a      	ldr	r0, [pc, #40]	; (800d83c <USBH_LL_Init+0x74>)
 800d812:	f7f6 fba4 	bl	8003f5e <HAL_HCD_Init>
 800d816:	4603      	mov	r3, r0
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d001      	beq.n	800d820 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800d81c:	f7f3 fef0 	bl	8001600 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800d820:	4806      	ldr	r0, [pc, #24]	; (800d83c <USBH_LL_Init+0x74>)
 800d822:	f7f6 ff88 	bl	8004736 <HAL_HCD_GetCurrentFrame>
 800d826:	4603      	mov	r3, r0
 800d828:	4619      	mov	r1, r3
 800d82a:	6878      	ldr	r0, [r7, #4]
 800d82c:	f7fc fc7c 	bl	800a128 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800d830:	2300      	movs	r3, #0
}
 800d832:	4618      	mov	r0, r3
 800d834:	3708      	adds	r7, #8
 800d836:	46bd      	mov	sp, r7
 800d838:	bd80      	pop	{r7, pc}
 800d83a:	bf00      	nop
 800d83c:	200048b8 	.word	0x200048b8

0800d840 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b084      	sub	sp, #16
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d848:	2300      	movs	r3, #0
 800d84a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d84c:	2300      	movs	r3, #0
 800d84e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d856:	4618      	mov	r0, r3
 800d858:	f7f6 fef7 	bl	800464a <HAL_HCD_Start>
 800d85c:	4603      	mov	r3, r0
 800d85e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d860:	7bfb      	ldrb	r3, [r7, #15]
 800d862:	4618      	mov	r0, r3
 800d864:	f000 f95c 	bl	800db20 <USBH_Get_USB_Status>
 800d868:	4603      	mov	r3, r0
 800d86a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d86c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d86e:	4618      	mov	r0, r3
 800d870:	3710      	adds	r7, #16
 800d872:	46bd      	mov	sp, r7
 800d874:	bd80      	pop	{r7, pc}

0800d876 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800d876:	b580      	push	{r7, lr}
 800d878:	b084      	sub	sp, #16
 800d87a:	af00      	add	r7, sp, #0
 800d87c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d87e:	2300      	movs	r3, #0
 800d880:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d882:	2300      	movs	r3, #0
 800d884:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d88c:	4618      	mov	r0, r3
 800d88e:	f7f6 feff 	bl	8004690 <HAL_HCD_Stop>
 800d892:	4603      	mov	r3, r0
 800d894:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d896:	7bfb      	ldrb	r3, [r7, #15]
 800d898:	4618      	mov	r0, r3
 800d89a:	f000 f941 	bl	800db20 <USBH_Get_USB_Status>
 800d89e:	4603      	mov	r3, r0
 800d8a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d8a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	3710      	adds	r7, #16
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	bd80      	pop	{r7, pc}

0800d8ac <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b084      	sub	sp, #16
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800d8b4:	2301      	movs	r3, #1
 800d8b6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d8be:	4618      	mov	r0, r3
 800d8c0:	f7f6 ff47 	bl	8004752 <HAL_HCD_GetCurrentSpeed>
 800d8c4:	4603      	mov	r3, r0
 800d8c6:	2b02      	cmp	r3, #2
 800d8c8:	d00c      	beq.n	800d8e4 <USBH_LL_GetSpeed+0x38>
 800d8ca:	2b02      	cmp	r3, #2
 800d8cc:	d80d      	bhi.n	800d8ea <USBH_LL_GetSpeed+0x3e>
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d002      	beq.n	800d8d8 <USBH_LL_GetSpeed+0x2c>
 800d8d2:	2b01      	cmp	r3, #1
 800d8d4:	d003      	beq.n	800d8de <USBH_LL_GetSpeed+0x32>
 800d8d6:	e008      	b.n	800d8ea <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800d8d8:	2300      	movs	r3, #0
 800d8da:	73fb      	strb	r3, [r7, #15]
    break;
 800d8dc:	e008      	b.n	800d8f0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800d8de:	2301      	movs	r3, #1
 800d8e0:	73fb      	strb	r3, [r7, #15]
    break;
 800d8e2:	e005      	b.n	800d8f0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800d8e4:	2302      	movs	r3, #2
 800d8e6:	73fb      	strb	r3, [r7, #15]
    break;
 800d8e8:	e002      	b.n	800d8f0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800d8ea:	2301      	movs	r3, #1
 800d8ec:	73fb      	strb	r3, [r7, #15]
    break;
 800d8ee:	bf00      	nop
  }
  return  speed;
 800d8f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	3710      	adds	r7, #16
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	bd80      	pop	{r7, pc}

0800d8fa <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800d8fa:	b580      	push	{r7, lr}
 800d8fc:	b084      	sub	sp, #16
 800d8fe:	af00      	add	r7, sp, #0
 800d900:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d902:	2300      	movs	r3, #0
 800d904:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d906:	2300      	movs	r3, #0
 800d908:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d910:	4618      	mov	r0, r3
 800d912:	f7f6 feda 	bl	80046ca <HAL_HCD_ResetPort>
 800d916:	4603      	mov	r3, r0
 800d918:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d91a:	7bfb      	ldrb	r3, [r7, #15]
 800d91c:	4618      	mov	r0, r3
 800d91e:	f000 f8ff 	bl	800db20 <USBH_Get_USB_Status>
 800d922:	4603      	mov	r3, r0
 800d924:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d926:	7bbb      	ldrb	r3, [r7, #14]
}
 800d928:	4618      	mov	r0, r3
 800d92a:	3710      	adds	r7, #16
 800d92c:	46bd      	mov	sp, r7
 800d92e:	bd80      	pop	{r7, pc}

0800d930 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d930:	b580      	push	{r7, lr}
 800d932:	b082      	sub	sp, #8
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
 800d938:	460b      	mov	r3, r1
 800d93a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d942:	78fa      	ldrb	r2, [r7, #3]
 800d944:	4611      	mov	r1, r2
 800d946:	4618      	mov	r0, r3
 800d948:	f7f6 fee1 	bl	800470e <HAL_HCD_HC_GetXferCount>
 800d94c:	4603      	mov	r3, r0
}
 800d94e:	4618      	mov	r0, r3
 800d950:	3708      	adds	r7, #8
 800d952:	46bd      	mov	sp, r7
 800d954:	bd80      	pop	{r7, pc}

0800d956 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d956:	b590      	push	{r4, r7, lr}
 800d958:	b089      	sub	sp, #36	; 0x24
 800d95a:	af04      	add	r7, sp, #16
 800d95c:	6078      	str	r0, [r7, #4]
 800d95e:	4608      	mov	r0, r1
 800d960:	4611      	mov	r1, r2
 800d962:	461a      	mov	r2, r3
 800d964:	4603      	mov	r3, r0
 800d966:	70fb      	strb	r3, [r7, #3]
 800d968:	460b      	mov	r3, r1
 800d96a:	70bb      	strb	r3, [r7, #2]
 800d96c:	4613      	mov	r3, r2
 800d96e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d970:	2300      	movs	r3, #0
 800d972:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d974:	2300      	movs	r3, #0
 800d976:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d97e:	787c      	ldrb	r4, [r7, #1]
 800d980:	78ba      	ldrb	r2, [r7, #2]
 800d982:	78f9      	ldrb	r1, [r7, #3]
 800d984:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d986:	9302      	str	r3, [sp, #8]
 800d988:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d98c:	9301      	str	r3, [sp, #4]
 800d98e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d992:	9300      	str	r3, [sp, #0]
 800d994:	4623      	mov	r3, r4
 800d996:	f7f6 fb44 	bl	8004022 <HAL_HCD_HC_Init>
 800d99a:	4603      	mov	r3, r0
 800d99c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800d99e:	7bfb      	ldrb	r3, [r7, #15]
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	f000 f8bd 	bl	800db20 <USBH_Get_USB_Status>
 800d9a6:	4603      	mov	r3, r0
 800d9a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d9aa:	7bbb      	ldrb	r3, [r7, #14]
}
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	3714      	adds	r7, #20
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	bd90      	pop	{r4, r7, pc}

0800d9b4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b084      	sub	sp, #16
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
 800d9bc:	460b      	mov	r3, r1
 800d9be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d9ce:	78fa      	ldrb	r2, [r7, #3]
 800d9d0:	4611      	mov	r1, r2
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	f7f6 fbb4 	bl	8004140 <HAL_HCD_HC_Halt>
 800d9d8:	4603      	mov	r3, r0
 800d9da:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d9dc:	7bfb      	ldrb	r3, [r7, #15]
 800d9de:	4618      	mov	r0, r3
 800d9e0:	f000 f89e 	bl	800db20 <USBH_Get_USB_Status>
 800d9e4:	4603      	mov	r3, r0
 800d9e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d9e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	3710      	adds	r7, #16
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	bd80      	pop	{r7, pc}

0800d9f2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800d9f2:	b590      	push	{r4, r7, lr}
 800d9f4:	b089      	sub	sp, #36	; 0x24
 800d9f6:	af04      	add	r7, sp, #16
 800d9f8:	6078      	str	r0, [r7, #4]
 800d9fa:	4608      	mov	r0, r1
 800d9fc:	4611      	mov	r1, r2
 800d9fe:	461a      	mov	r2, r3
 800da00:	4603      	mov	r3, r0
 800da02:	70fb      	strb	r3, [r7, #3]
 800da04:	460b      	mov	r3, r1
 800da06:	70bb      	strb	r3, [r7, #2]
 800da08:	4613      	mov	r3, r2
 800da0a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da0c:	2300      	movs	r3, #0
 800da0e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800da10:	2300      	movs	r3, #0
 800da12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800da1a:	787c      	ldrb	r4, [r7, #1]
 800da1c:	78ba      	ldrb	r2, [r7, #2]
 800da1e:	78f9      	ldrb	r1, [r7, #3]
 800da20:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800da24:	9303      	str	r3, [sp, #12]
 800da26:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800da28:	9302      	str	r3, [sp, #8]
 800da2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da2c:	9301      	str	r3, [sp, #4]
 800da2e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800da32:	9300      	str	r3, [sp, #0]
 800da34:	4623      	mov	r3, r4
 800da36:	f7f6 fba7 	bl	8004188 <HAL_HCD_HC_SubmitRequest>
 800da3a:	4603      	mov	r3, r0
 800da3c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800da3e:	7bfb      	ldrb	r3, [r7, #15]
 800da40:	4618      	mov	r0, r3
 800da42:	f000 f86d 	bl	800db20 <USBH_Get_USB_Status>
 800da46:	4603      	mov	r3, r0
 800da48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da4a:	7bbb      	ldrb	r3, [r7, #14]
}
 800da4c:	4618      	mov	r0, r3
 800da4e:	3714      	adds	r7, #20
 800da50:	46bd      	mov	sp, r7
 800da52:	bd90      	pop	{r4, r7, pc}

0800da54 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b082      	sub	sp, #8
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
 800da5c:	460b      	mov	r3, r1
 800da5e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800da66:	78fa      	ldrb	r2, [r7, #3]
 800da68:	4611      	mov	r1, r2
 800da6a:	4618      	mov	r0, r3
 800da6c:	f7f6 fe3b 	bl	80046e6 <HAL_HCD_HC_GetURBState>
 800da70:	4603      	mov	r3, r0
}
 800da72:	4618      	mov	r0, r3
 800da74:	3708      	adds	r7, #8
 800da76:	46bd      	mov	sp, r7
 800da78:	bd80      	pop	{r7, pc}

0800da7a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800da7a:	b580      	push	{r7, lr}
 800da7c:	b082      	sub	sp, #8
 800da7e:	af00      	add	r7, sp, #0
 800da80:	6078      	str	r0, [r7, #4]
 800da82:	460b      	mov	r3, r1
 800da84:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800da8c:	2b01      	cmp	r3, #1
 800da8e:	d103      	bne.n	800da98 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800da90:	78fb      	ldrb	r3, [r7, #3]
 800da92:	4618      	mov	r0, r3
 800da94:	f000 f870 	bl	800db78 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800da98:	20c8      	movs	r0, #200	; 0xc8
 800da9a:	f7f4 fa69 	bl	8001f70 <HAL_Delay>
  return USBH_OK;
 800da9e:	2300      	movs	r3, #0
}
 800daa0:	4618      	mov	r0, r3
 800daa2:	3708      	adds	r7, #8
 800daa4:	46bd      	mov	sp, r7
 800daa6:	bd80      	pop	{r7, pc}

0800daa8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800daa8:	b480      	push	{r7}
 800daaa:	b085      	sub	sp, #20
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
 800dab0:	460b      	mov	r3, r1
 800dab2:	70fb      	strb	r3, [r7, #3]
 800dab4:	4613      	mov	r3, r2
 800dab6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dabe:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800dac0:	78fb      	ldrb	r3, [r7, #3]
 800dac2:	68fa      	ldr	r2, [r7, #12]
 800dac4:	212c      	movs	r1, #44	; 0x2c
 800dac6:	fb01 f303 	mul.w	r3, r1, r3
 800daca:	4413      	add	r3, r2
 800dacc:	333b      	adds	r3, #59	; 0x3b
 800dace:	781b      	ldrb	r3, [r3, #0]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d009      	beq.n	800dae8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800dad4:	78fb      	ldrb	r3, [r7, #3]
 800dad6:	68fa      	ldr	r2, [r7, #12]
 800dad8:	212c      	movs	r1, #44	; 0x2c
 800dada:	fb01 f303 	mul.w	r3, r1, r3
 800dade:	4413      	add	r3, r2
 800dae0:	3354      	adds	r3, #84	; 0x54
 800dae2:	78ba      	ldrb	r2, [r7, #2]
 800dae4:	701a      	strb	r2, [r3, #0]
 800dae6:	e008      	b.n	800dafa <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800dae8:	78fb      	ldrb	r3, [r7, #3]
 800daea:	68fa      	ldr	r2, [r7, #12]
 800daec:	212c      	movs	r1, #44	; 0x2c
 800daee:	fb01 f303 	mul.w	r3, r1, r3
 800daf2:	4413      	add	r3, r2
 800daf4:	3355      	adds	r3, #85	; 0x55
 800daf6:	78ba      	ldrb	r2, [r7, #2]
 800daf8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800dafa:	2300      	movs	r3, #0
}
 800dafc:	4618      	mov	r0, r3
 800dafe:	3714      	adds	r7, #20
 800db00:	46bd      	mov	sp, r7
 800db02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db06:	4770      	bx	lr

0800db08 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b082      	sub	sp, #8
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800db10:	6878      	ldr	r0, [r7, #4]
 800db12:	f7f4 fa2d 	bl	8001f70 <HAL_Delay>
}
 800db16:	bf00      	nop
 800db18:	3708      	adds	r7, #8
 800db1a:	46bd      	mov	sp, r7
 800db1c:	bd80      	pop	{r7, pc}
	...

0800db20 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800db20:	b480      	push	{r7}
 800db22:	b085      	sub	sp, #20
 800db24:	af00      	add	r7, sp, #0
 800db26:	4603      	mov	r3, r0
 800db28:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800db2a:	2300      	movs	r3, #0
 800db2c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800db2e:	79fb      	ldrb	r3, [r7, #7]
 800db30:	2b03      	cmp	r3, #3
 800db32:	d817      	bhi.n	800db64 <USBH_Get_USB_Status+0x44>
 800db34:	a201      	add	r2, pc, #4	; (adr r2, 800db3c <USBH_Get_USB_Status+0x1c>)
 800db36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db3a:	bf00      	nop
 800db3c:	0800db4d 	.word	0x0800db4d
 800db40:	0800db53 	.word	0x0800db53
 800db44:	0800db59 	.word	0x0800db59
 800db48:	0800db5f 	.word	0x0800db5f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800db4c:	2300      	movs	r3, #0
 800db4e:	73fb      	strb	r3, [r7, #15]
    break;
 800db50:	e00b      	b.n	800db6a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800db52:	2302      	movs	r3, #2
 800db54:	73fb      	strb	r3, [r7, #15]
    break;
 800db56:	e008      	b.n	800db6a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800db58:	2301      	movs	r3, #1
 800db5a:	73fb      	strb	r3, [r7, #15]
    break;
 800db5c:	e005      	b.n	800db6a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800db5e:	2302      	movs	r3, #2
 800db60:	73fb      	strb	r3, [r7, #15]
    break;
 800db62:	e002      	b.n	800db6a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800db64:	2302      	movs	r3, #2
 800db66:	73fb      	strb	r3, [r7, #15]
    break;
 800db68:	bf00      	nop
  }
  return usb_status;
 800db6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800db6c:	4618      	mov	r0, r3
 800db6e:	3714      	adds	r7, #20
 800db70:	46bd      	mov	sp, r7
 800db72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db76:	4770      	bx	lr

0800db78 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800db78:	b580      	push	{r7, lr}
 800db7a:	b084      	sub	sp, #16
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	4603      	mov	r3, r0
 800db80:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800db82:	79fb      	ldrb	r3, [r7, #7]
 800db84:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800db86:	79fb      	ldrb	r3, [r7, #7]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d102      	bne.n	800db92 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800db8c:	2301      	movs	r3, #1
 800db8e:	73fb      	strb	r3, [r7, #15]
 800db90:	e001      	b.n	800db96 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800db92:	2300      	movs	r3, #0
 800db94:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800db96:	7bfb      	ldrb	r3, [r7, #15]
 800db98:	461a      	mov	r2, r3
 800db9a:	2101      	movs	r1, #1
 800db9c:	4803      	ldr	r0, [pc, #12]	; (800dbac <MX_DriverVbusFS+0x34>)
 800db9e:	f7f6 f9ab 	bl	8003ef8 <HAL_GPIO_WritePin>
}
 800dba2:	bf00      	nop
 800dba4:	3710      	adds	r7, #16
 800dba6:	46bd      	mov	sp, r7
 800dba8:	bd80      	pop	{r7, pc}
 800dbaa:	bf00      	nop
 800dbac:	40020800 	.word	0x40020800

0800dbb0 <__errno>:
 800dbb0:	4b01      	ldr	r3, [pc, #4]	; (800dbb8 <__errno+0x8>)
 800dbb2:	6818      	ldr	r0, [r3, #0]
 800dbb4:	4770      	bx	lr
 800dbb6:	bf00      	nop
 800dbb8:	20000030 	.word	0x20000030

0800dbbc <__libc_init_array>:
 800dbbc:	b570      	push	{r4, r5, r6, lr}
 800dbbe:	4d0d      	ldr	r5, [pc, #52]	; (800dbf4 <__libc_init_array+0x38>)
 800dbc0:	4c0d      	ldr	r4, [pc, #52]	; (800dbf8 <__libc_init_array+0x3c>)
 800dbc2:	1b64      	subs	r4, r4, r5
 800dbc4:	10a4      	asrs	r4, r4, #2
 800dbc6:	2600      	movs	r6, #0
 800dbc8:	42a6      	cmp	r6, r4
 800dbca:	d109      	bne.n	800dbe0 <__libc_init_array+0x24>
 800dbcc:	4d0b      	ldr	r5, [pc, #44]	; (800dbfc <__libc_init_array+0x40>)
 800dbce:	4c0c      	ldr	r4, [pc, #48]	; (800dc00 <__libc_init_array+0x44>)
 800dbd0:	f000 fcc8 	bl	800e564 <_init>
 800dbd4:	1b64      	subs	r4, r4, r5
 800dbd6:	10a4      	asrs	r4, r4, #2
 800dbd8:	2600      	movs	r6, #0
 800dbda:	42a6      	cmp	r6, r4
 800dbdc:	d105      	bne.n	800dbea <__libc_init_array+0x2e>
 800dbde:	bd70      	pop	{r4, r5, r6, pc}
 800dbe0:	f855 3b04 	ldr.w	r3, [r5], #4
 800dbe4:	4798      	blx	r3
 800dbe6:	3601      	adds	r6, #1
 800dbe8:	e7ee      	b.n	800dbc8 <__libc_init_array+0xc>
 800dbea:	f855 3b04 	ldr.w	r3, [r5], #4
 800dbee:	4798      	blx	r3
 800dbf0:	3601      	adds	r6, #1
 800dbf2:	e7f2      	b.n	800dbda <__libc_init_array+0x1e>
 800dbf4:	0800e740 	.word	0x0800e740
 800dbf8:	0800e740 	.word	0x0800e740
 800dbfc:	0800e740 	.word	0x0800e740
 800dc00:	0800e744 	.word	0x0800e744

0800dc04 <__retarget_lock_acquire_recursive>:
 800dc04:	4770      	bx	lr

0800dc06 <__retarget_lock_release_recursive>:
 800dc06:	4770      	bx	lr

0800dc08 <malloc>:
 800dc08:	4b02      	ldr	r3, [pc, #8]	; (800dc14 <malloc+0xc>)
 800dc0a:	4601      	mov	r1, r0
 800dc0c:	6818      	ldr	r0, [r3, #0]
 800dc0e:	f000 b871 	b.w	800dcf4 <_malloc_r>
 800dc12:	bf00      	nop
 800dc14:	20000030 	.word	0x20000030

0800dc18 <free>:
 800dc18:	4b02      	ldr	r3, [pc, #8]	; (800dc24 <free+0xc>)
 800dc1a:	4601      	mov	r1, r0
 800dc1c:	6818      	ldr	r0, [r3, #0]
 800dc1e:	f000 b819 	b.w	800dc54 <_free_r>
 800dc22:	bf00      	nop
 800dc24:	20000030 	.word	0x20000030

0800dc28 <memcpy>:
 800dc28:	440a      	add	r2, r1
 800dc2a:	4291      	cmp	r1, r2
 800dc2c:	f100 33ff 	add.w	r3, r0, #4294967295
 800dc30:	d100      	bne.n	800dc34 <memcpy+0xc>
 800dc32:	4770      	bx	lr
 800dc34:	b510      	push	{r4, lr}
 800dc36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dc3e:	4291      	cmp	r1, r2
 800dc40:	d1f9      	bne.n	800dc36 <memcpy+0xe>
 800dc42:	bd10      	pop	{r4, pc}

0800dc44 <memset>:
 800dc44:	4402      	add	r2, r0
 800dc46:	4603      	mov	r3, r0
 800dc48:	4293      	cmp	r3, r2
 800dc4a:	d100      	bne.n	800dc4e <memset+0xa>
 800dc4c:	4770      	bx	lr
 800dc4e:	f803 1b01 	strb.w	r1, [r3], #1
 800dc52:	e7f9      	b.n	800dc48 <memset+0x4>

0800dc54 <_free_r>:
 800dc54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dc56:	2900      	cmp	r1, #0
 800dc58:	d048      	beq.n	800dcec <_free_r+0x98>
 800dc5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc5e:	9001      	str	r0, [sp, #4]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	f1a1 0404 	sub.w	r4, r1, #4
 800dc66:	bfb8      	it	lt
 800dc68:	18e4      	addlt	r4, r4, r3
 800dc6a:	f000 f937 	bl	800dedc <__malloc_lock>
 800dc6e:	4a20      	ldr	r2, [pc, #128]	; (800dcf0 <_free_r+0x9c>)
 800dc70:	9801      	ldr	r0, [sp, #4]
 800dc72:	6813      	ldr	r3, [r2, #0]
 800dc74:	4615      	mov	r5, r2
 800dc76:	b933      	cbnz	r3, 800dc86 <_free_r+0x32>
 800dc78:	6063      	str	r3, [r4, #4]
 800dc7a:	6014      	str	r4, [r2, #0]
 800dc7c:	b003      	add	sp, #12
 800dc7e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dc82:	f000 b931 	b.w	800dee8 <__malloc_unlock>
 800dc86:	42a3      	cmp	r3, r4
 800dc88:	d90b      	bls.n	800dca2 <_free_r+0x4e>
 800dc8a:	6821      	ldr	r1, [r4, #0]
 800dc8c:	1862      	adds	r2, r4, r1
 800dc8e:	4293      	cmp	r3, r2
 800dc90:	bf04      	itt	eq
 800dc92:	681a      	ldreq	r2, [r3, #0]
 800dc94:	685b      	ldreq	r3, [r3, #4]
 800dc96:	6063      	str	r3, [r4, #4]
 800dc98:	bf04      	itt	eq
 800dc9a:	1852      	addeq	r2, r2, r1
 800dc9c:	6022      	streq	r2, [r4, #0]
 800dc9e:	602c      	str	r4, [r5, #0]
 800dca0:	e7ec      	b.n	800dc7c <_free_r+0x28>
 800dca2:	461a      	mov	r2, r3
 800dca4:	685b      	ldr	r3, [r3, #4]
 800dca6:	b10b      	cbz	r3, 800dcac <_free_r+0x58>
 800dca8:	42a3      	cmp	r3, r4
 800dcaa:	d9fa      	bls.n	800dca2 <_free_r+0x4e>
 800dcac:	6811      	ldr	r1, [r2, #0]
 800dcae:	1855      	adds	r5, r2, r1
 800dcb0:	42a5      	cmp	r5, r4
 800dcb2:	d10b      	bne.n	800dccc <_free_r+0x78>
 800dcb4:	6824      	ldr	r4, [r4, #0]
 800dcb6:	4421      	add	r1, r4
 800dcb8:	1854      	adds	r4, r2, r1
 800dcba:	42a3      	cmp	r3, r4
 800dcbc:	6011      	str	r1, [r2, #0]
 800dcbe:	d1dd      	bne.n	800dc7c <_free_r+0x28>
 800dcc0:	681c      	ldr	r4, [r3, #0]
 800dcc2:	685b      	ldr	r3, [r3, #4]
 800dcc4:	6053      	str	r3, [r2, #4]
 800dcc6:	4421      	add	r1, r4
 800dcc8:	6011      	str	r1, [r2, #0]
 800dcca:	e7d7      	b.n	800dc7c <_free_r+0x28>
 800dccc:	d902      	bls.n	800dcd4 <_free_r+0x80>
 800dcce:	230c      	movs	r3, #12
 800dcd0:	6003      	str	r3, [r0, #0]
 800dcd2:	e7d3      	b.n	800dc7c <_free_r+0x28>
 800dcd4:	6825      	ldr	r5, [r4, #0]
 800dcd6:	1961      	adds	r1, r4, r5
 800dcd8:	428b      	cmp	r3, r1
 800dcda:	bf04      	itt	eq
 800dcdc:	6819      	ldreq	r1, [r3, #0]
 800dcde:	685b      	ldreq	r3, [r3, #4]
 800dce0:	6063      	str	r3, [r4, #4]
 800dce2:	bf04      	itt	eq
 800dce4:	1949      	addeq	r1, r1, r5
 800dce6:	6021      	streq	r1, [r4, #0]
 800dce8:	6054      	str	r4, [r2, #4]
 800dcea:	e7c7      	b.n	800dc7c <_free_r+0x28>
 800dcec:	b003      	add	sp, #12
 800dcee:	bd30      	pop	{r4, r5, pc}
 800dcf0:	200040c0 	.word	0x200040c0

0800dcf4 <_malloc_r>:
 800dcf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcf6:	1ccd      	adds	r5, r1, #3
 800dcf8:	f025 0503 	bic.w	r5, r5, #3
 800dcfc:	3508      	adds	r5, #8
 800dcfe:	2d0c      	cmp	r5, #12
 800dd00:	bf38      	it	cc
 800dd02:	250c      	movcc	r5, #12
 800dd04:	2d00      	cmp	r5, #0
 800dd06:	4606      	mov	r6, r0
 800dd08:	db01      	blt.n	800dd0e <_malloc_r+0x1a>
 800dd0a:	42a9      	cmp	r1, r5
 800dd0c:	d903      	bls.n	800dd16 <_malloc_r+0x22>
 800dd0e:	230c      	movs	r3, #12
 800dd10:	6033      	str	r3, [r6, #0]
 800dd12:	2000      	movs	r0, #0
 800dd14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd16:	f000 f8e1 	bl	800dedc <__malloc_lock>
 800dd1a:	4921      	ldr	r1, [pc, #132]	; (800dda0 <_malloc_r+0xac>)
 800dd1c:	680a      	ldr	r2, [r1, #0]
 800dd1e:	4614      	mov	r4, r2
 800dd20:	b99c      	cbnz	r4, 800dd4a <_malloc_r+0x56>
 800dd22:	4f20      	ldr	r7, [pc, #128]	; (800dda4 <_malloc_r+0xb0>)
 800dd24:	683b      	ldr	r3, [r7, #0]
 800dd26:	b923      	cbnz	r3, 800dd32 <_malloc_r+0x3e>
 800dd28:	4621      	mov	r1, r4
 800dd2a:	4630      	mov	r0, r6
 800dd2c:	f000 f8a6 	bl	800de7c <_sbrk_r>
 800dd30:	6038      	str	r0, [r7, #0]
 800dd32:	4629      	mov	r1, r5
 800dd34:	4630      	mov	r0, r6
 800dd36:	f000 f8a1 	bl	800de7c <_sbrk_r>
 800dd3a:	1c43      	adds	r3, r0, #1
 800dd3c:	d123      	bne.n	800dd86 <_malloc_r+0x92>
 800dd3e:	230c      	movs	r3, #12
 800dd40:	6033      	str	r3, [r6, #0]
 800dd42:	4630      	mov	r0, r6
 800dd44:	f000 f8d0 	bl	800dee8 <__malloc_unlock>
 800dd48:	e7e3      	b.n	800dd12 <_malloc_r+0x1e>
 800dd4a:	6823      	ldr	r3, [r4, #0]
 800dd4c:	1b5b      	subs	r3, r3, r5
 800dd4e:	d417      	bmi.n	800dd80 <_malloc_r+0x8c>
 800dd50:	2b0b      	cmp	r3, #11
 800dd52:	d903      	bls.n	800dd5c <_malloc_r+0x68>
 800dd54:	6023      	str	r3, [r4, #0]
 800dd56:	441c      	add	r4, r3
 800dd58:	6025      	str	r5, [r4, #0]
 800dd5a:	e004      	b.n	800dd66 <_malloc_r+0x72>
 800dd5c:	6863      	ldr	r3, [r4, #4]
 800dd5e:	42a2      	cmp	r2, r4
 800dd60:	bf0c      	ite	eq
 800dd62:	600b      	streq	r3, [r1, #0]
 800dd64:	6053      	strne	r3, [r2, #4]
 800dd66:	4630      	mov	r0, r6
 800dd68:	f000 f8be 	bl	800dee8 <__malloc_unlock>
 800dd6c:	f104 000b 	add.w	r0, r4, #11
 800dd70:	1d23      	adds	r3, r4, #4
 800dd72:	f020 0007 	bic.w	r0, r0, #7
 800dd76:	1ac2      	subs	r2, r0, r3
 800dd78:	d0cc      	beq.n	800dd14 <_malloc_r+0x20>
 800dd7a:	1a1b      	subs	r3, r3, r0
 800dd7c:	50a3      	str	r3, [r4, r2]
 800dd7e:	e7c9      	b.n	800dd14 <_malloc_r+0x20>
 800dd80:	4622      	mov	r2, r4
 800dd82:	6864      	ldr	r4, [r4, #4]
 800dd84:	e7cc      	b.n	800dd20 <_malloc_r+0x2c>
 800dd86:	1cc4      	adds	r4, r0, #3
 800dd88:	f024 0403 	bic.w	r4, r4, #3
 800dd8c:	42a0      	cmp	r0, r4
 800dd8e:	d0e3      	beq.n	800dd58 <_malloc_r+0x64>
 800dd90:	1a21      	subs	r1, r4, r0
 800dd92:	4630      	mov	r0, r6
 800dd94:	f000 f872 	bl	800de7c <_sbrk_r>
 800dd98:	3001      	adds	r0, #1
 800dd9a:	d1dd      	bne.n	800dd58 <_malloc_r+0x64>
 800dd9c:	e7cf      	b.n	800dd3e <_malloc_r+0x4a>
 800dd9e:	bf00      	nop
 800dda0:	200040c0 	.word	0x200040c0
 800dda4:	200040c4 	.word	0x200040c4

0800dda8 <cleanup_glue>:
 800dda8:	b538      	push	{r3, r4, r5, lr}
 800ddaa:	460c      	mov	r4, r1
 800ddac:	6809      	ldr	r1, [r1, #0]
 800ddae:	4605      	mov	r5, r0
 800ddb0:	b109      	cbz	r1, 800ddb6 <cleanup_glue+0xe>
 800ddb2:	f7ff fff9 	bl	800dda8 <cleanup_glue>
 800ddb6:	4621      	mov	r1, r4
 800ddb8:	4628      	mov	r0, r5
 800ddba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ddbe:	f7ff bf49 	b.w	800dc54 <_free_r>
	...

0800ddc4 <_reclaim_reent>:
 800ddc4:	4b2c      	ldr	r3, [pc, #176]	; (800de78 <_reclaim_reent+0xb4>)
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	4283      	cmp	r3, r0
 800ddca:	b570      	push	{r4, r5, r6, lr}
 800ddcc:	4604      	mov	r4, r0
 800ddce:	d051      	beq.n	800de74 <_reclaim_reent+0xb0>
 800ddd0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ddd2:	b143      	cbz	r3, 800dde6 <_reclaim_reent+0x22>
 800ddd4:	68db      	ldr	r3, [r3, #12]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d14a      	bne.n	800de70 <_reclaim_reent+0xac>
 800ddda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dddc:	6819      	ldr	r1, [r3, #0]
 800ddde:	b111      	cbz	r1, 800dde6 <_reclaim_reent+0x22>
 800dde0:	4620      	mov	r0, r4
 800dde2:	f7ff ff37 	bl	800dc54 <_free_r>
 800dde6:	6961      	ldr	r1, [r4, #20]
 800dde8:	b111      	cbz	r1, 800ddf0 <_reclaim_reent+0x2c>
 800ddea:	4620      	mov	r0, r4
 800ddec:	f7ff ff32 	bl	800dc54 <_free_r>
 800ddf0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ddf2:	b111      	cbz	r1, 800ddfa <_reclaim_reent+0x36>
 800ddf4:	4620      	mov	r0, r4
 800ddf6:	f7ff ff2d 	bl	800dc54 <_free_r>
 800ddfa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ddfc:	b111      	cbz	r1, 800de04 <_reclaim_reent+0x40>
 800ddfe:	4620      	mov	r0, r4
 800de00:	f7ff ff28 	bl	800dc54 <_free_r>
 800de04:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800de06:	b111      	cbz	r1, 800de0e <_reclaim_reent+0x4a>
 800de08:	4620      	mov	r0, r4
 800de0a:	f7ff ff23 	bl	800dc54 <_free_r>
 800de0e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800de10:	b111      	cbz	r1, 800de18 <_reclaim_reent+0x54>
 800de12:	4620      	mov	r0, r4
 800de14:	f7ff ff1e 	bl	800dc54 <_free_r>
 800de18:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800de1a:	b111      	cbz	r1, 800de22 <_reclaim_reent+0x5e>
 800de1c:	4620      	mov	r0, r4
 800de1e:	f7ff ff19 	bl	800dc54 <_free_r>
 800de22:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800de24:	b111      	cbz	r1, 800de2c <_reclaim_reent+0x68>
 800de26:	4620      	mov	r0, r4
 800de28:	f7ff ff14 	bl	800dc54 <_free_r>
 800de2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800de2e:	b111      	cbz	r1, 800de36 <_reclaim_reent+0x72>
 800de30:	4620      	mov	r0, r4
 800de32:	f7ff ff0f 	bl	800dc54 <_free_r>
 800de36:	69a3      	ldr	r3, [r4, #24]
 800de38:	b1e3      	cbz	r3, 800de74 <_reclaim_reent+0xb0>
 800de3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800de3c:	4620      	mov	r0, r4
 800de3e:	4798      	blx	r3
 800de40:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800de42:	b1b9      	cbz	r1, 800de74 <_reclaim_reent+0xb0>
 800de44:	4620      	mov	r0, r4
 800de46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800de4a:	f7ff bfad 	b.w	800dda8 <cleanup_glue>
 800de4e:	5949      	ldr	r1, [r1, r5]
 800de50:	b941      	cbnz	r1, 800de64 <_reclaim_reent+0xa0>
 800de52:	3504      	adds	r5, #4
 800de54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de56:	2d80      	cmp	r5, #128	; 0x80
 800de58:	68d9      	ldr	r1, [r3, #12]
 800de5a:	d1f8      	bne.n	800de4e <_reclaim_reent+0x8a>
 800de5c:	4620      	mov	r0, r4
 800de5e:	f7ff fef9 	bl	800dc54 <_free_r>
 800de62:	e7ba      	b.n	800ddda <_reclaim_reent+0x16>
 800de64:	680e      	ldr	r6, [r1, #0]
 800de66:	4620      	mov	r0, r4
 800de68:	f7ff fef4 	bl	800dc54 <_free_r>
 800de6c:	4631      	mov	r1, r6
 800de6e:	e7ef      	b.n	800de50 <_reclaim_reent+0x8c>
 800de70:	2500      	movs	r5, #0
 800de72:	e7ef      	b.n	800de54 <_reclaim_reent+0x90>
 800de74:	bd70      	pop	{r4, r5, r6, pc}
 800de76:	bf00      	nop
 800de78:	20000030 	.word	0x20000030

0800de7c <_sbrk_r>:
 800de7c:	b538      	push	{r3, r4, r5, lr}
 800de7e:	4d06      	ldr	r5, [pc, #24]	; (800de98 <_sbrk_r+0x1c>)
 800de80:	2300      	movs	r3, #0
 800de82:	4604      	mov	r4, r0
 800de84:	4608      	mov	r0, r1
 800de86:	602b      	str	r3, [r5, #0]
 800de88:	f7f3 ffbe 	bl	8001e08 <_sbrk>
 800de8c:	1c43      	adds	r3, r0, #1
 800de8e:	d102      	bne.n	800de96 <_sbrk_r+0x1a>
 800de90:	682b      	ldr	r3, [r5, #0]
 800de92:	b103      	cbz	r3, 800de96 <_sbrk_r+0x1a>
 800de94:	6023      	str	r3, [r4, #0]
 800de96:	bd38      	pop	{r3, r4, r5, pc}
 800de98:	20004bc8 	.word	0x20004bc8

0800de9c <siprintf>:
 800de9c:	b40e      	push	{r1, r2, r3}
 800de9e:	b500      	push	{lr}
 800dea0:	b09c      	sub	sp, #112	; 0x70
 800dea2:	ab1d      	add	r3, sp, #116	; 0x74
 800dea4:	9002      	str	r0, [sp, #8]
 800dea6:	9006      	str	r0, [sp, #24]
 800dea8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800deac:	4809      	ldr	r0, [pc, #36]	; (800ded4 <siprintf+0x38>)
 800deae:	9107      	str	r1, [sp, #28]
 800deb0:	9104      	str	r1, [sp, #16]
 800deb2:	4909      	ldr	r1, [pc, #36]	; (800ded8 <siprintf+0x3c>)
 800deb4:	f853 2b04 	ldr.w	r2, [r3], #4
 800deb8:	9105      	str	r1, [sp, #20]
 800deba:	6800      	ldr	r0, [r0, #0]
 800debc:	9301      	str	r3, [sp, #4]
 800debe:	a902      	add	r1, sp, #8
 800dec0:	f000 f874 	bl	800dfac <_svfiprintf_r>
 800dec4:	9b02      	ldr	r3, [sp, #8]
 800dec6:	2200      	movs	r2, #0
 800dec8:	701a      	strb	r2, [r3, #0]
 800deca:	b01c      	add	sp, #112	; 0x70
 800decc:	f85d eb04 	ldr.w	lr, [sp], #4
 800ded0:	b003      	add	sp, #12
 800ded2:	4770      	bx	lr
 800ded4:	20000030 	.word	0x20000030
 800ded8:	ffff0208 	.word	0xffff0208

0800dedc <__malloc_lock>:
 800dedc:	4801      	ldr	r0, [pc, #4]	; (800dee4 <__malloc_lock+0x8>)
 800dede:	f7ff be91 	b.w	800dc04 <__retarget_lock_acquire_recursive>
 800dee2:	bf00      	nop
 800dee4:	20004bc0 	.word	0x20004bc0

0800dee8 <__malloc_unlock>:
 800dee8:	4801      	ldr	r0, [pc, #4]	; (800def0 <__malloc_unlock+0x8>)
 800deea:	f7ff be8c 	b.w	800dc06 <__retarget_lock_release_recursive>
 800deee:	bf00      	nop
 800def0:	20004bc0 	.word	0x20004bc0

0800def4 <__ssputs_r>:
 800def4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800def8:	688e      	ldr	r6, [r1, #8]
 800defa:	429e      	cmp	r6, r3
 800defc:	4682      	mov	sl, r0
 800defe:	460c      	mov	r4, r1
 800df00:	4690      	mov	r8, r2
 800df02:	461f      	mov	r7, r3
 800df04:	d838      	bhi.n	800df78 <__ssputs_r+0x84>
 800df06:	898a      	ldrh	r2, [r1, #12]
 800df08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800df0c:	d032      	beq.n	800df74 <__ssputs_r+0x80>
 800df0e:	6825      	ldr	r5, [r4, #0]
 800df10:	6909      	ldr	r1, [r1, #16]
 800df12:	eba5 0901 	sub.w	r9, r5, r1
 800df16:	6965      	ldr	r5, [r4, #20]
 800df18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800df1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800df20:	3301      	adds	r3, #1
 800df22:	444b      	add	r3, r9
 800df24:	106d      	asrs	r5, r5, #1
 800df26:	429d      	cmp	r5, r3
 800df28:	bf38      	it	cc
 800df2a:	461d      	movcc	r5, r3
 800df2c:	0553      	lsls	r3, r2, #21
 800df2e:	d531      	bpl.n	800df94 <__ssputs_r+0xa0>
 800df30:	4629      	mov	r1, r5
 800df32:	f7ff fedf 	bl	800dcf4 <_malloc_r>
 800df36:	4606      	mov	r6, r0
 800df38:	b950      	cbnz	r0, 800df50 <__ssputs_r+0x5c>
 800df3a:	230c      	movs	r3, #12
 800df3c:	f8ca 3000 	str.w	r3, [sl]
 800df40:	89a3      	ldrh	r3, [r4, #12]
 800df42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df46:	81a3      	strh	r3, [r4, #12]
 800df48:	f04f 30ff 	mov.w	r0, #4294967295
 800df4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df50:	6921      	ldr	r1, [r4, #16]
 800df52:	464a      	mov	r2, r9
 800df54:	f7ff fe68 	bl	800dc28 <memcpy>
 800df58:	89a3      	ldrh	r3, [r4, #12]
 800df5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800df5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df62:	81a3      	strh	r3, [r4, #12]
 800df64:	6126      	str	r6, [r4, #16]
 800df66:	6165      	str	r5, [r4, #20]
 800df68:	444e      	add	r6, r9
 800df6a:	eba5 0509 	sub.w	r5, r5, r9
 800df6e:	6026      	str	r6, [r4, #0]
 800df70:	60a5      	str	r5, [r4, #8]
 800df72:	463e      	mov	r6, r7
 800df74:	42be      	cmp	r6, r7
 800df76:	d900      	bls.n	800df7a <__ssputs_r+0x86>
 800df78:	463e      	mov	r6, r7
 800df7a:	4632      	mov	r2, r6
 800df7c:	6820      	ldr	r0, [r4, #0]
 800df7e:	4641      	mov	r1, r8
 800df80:	f000 faa8 	bl	800e4d4 <memmove>
 800df84:	68a3      	ldr	r3, [r4, #8]
 800df86:	6822      	ldr	r2, [r4, #0]
 800df88:	1b9b      	subs	r3, r3, r6
 800df8a:	4432      	add	r2, r6
 800df8c:	60a3      	str	r3, [r4, #8]
 800df8e:	6022      	str	r2, [r4, #0]
 800df90:	2000      	movs	r0, #0
 800df92:	e7db      	b.n	800df4c <__ssputs_r+0x58>
 800df94:	462a      	mov	r2, r5
 800df96:	f000 fab7 	bl	800e508 <_realloc_r>
 800df9a:	4606      	mov	r6, r0
 800df9c:	2800      	cmp	r0, #0
 800df9e:	d1e1      	bne.n	800df64 <__ssputs_r+0x70>
 800dfa0:	6921      	ldr	r1, [r4, #16]
 800dfa2:	4650      	mov	r0, sl
 800dfa4:	f7ff fe56 	bl	800dc54 <_free_r>
 800dfa8:	e7c7      	b.n	800df3a <__ssputs_r+0x46>
	...

0800dfac <_svfiprintf_r>:
 800dfac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfb0:	4698      	mov	r8, r3
 800dfb2:	898b      	ldrh	r3, [r1, #12]
 800dfb4:	061b      	lsls	r3, r3, #24
 800dfb6:	b09d      	sub	sp, #116	; 0x74
 800dfb8:	4607      	mov	r7, r0
 800dfba:	460d      	mov	r5, r1
 800dfbc:	4614      	mov	r4, r2
 800dfbe:	d50e      	bpl.n	800dfde <_svfiprintf_r+0x32>
 800dfc0:	690b      	ldr	r3, [r1, #16]
 800dfc2:	b963      	cbnz	r3, 800dfde <_svfiprintf_r+0x32>
 800dfc4:	2140      	movs	r1, #64	; 0x40
 800dfc6:	f7ff fe95 	bl	800dcf4 <_malloc_r>
 800dfca:	6028      	str	r0, [r5, #0]
 800dfcc:	6128      	str	r0, [r5, #16]
 800dfce:	b920      	cbnz	r0, 800dfda <_svfiprintf_r+0x2e>
 800dfd0:	230c      	movs	r3, #12
 800dfd2:	603b      	str	r3, [r7, #0]
 800dfd4:	f04f 30ff 	mov.w	r0, #4294967295
 800dfd8:	e0d1      	b.n	800e17e <_svfiprintf_r+0x1d2>
 800dfda:	2340      	movs	r3, #64	; 0x40
 800dfdc:	616b      	str	r3, [r5, #20]
 800dfde:	2300      	movs	r3, #0
 800dfe0:	9309      	str	r3, [sp, #36]	; 0x24
 800dfe2:	2320      	movs	r3, #32
 800dfe4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dfe8:	f8cd 800c 	str.w	r8, [sp, #12]
 800dfec:	2330      	movs	r3, #48	; 0x30
 800dfee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e198 <_svfiprintf_r+0x1ec>
 800dff2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dff6:	f04f 0901 	mov.w	r9, #1
 800dffa:	4623      	mov	r3, r4
 800dffc:	469a      	mov	sl, r3
 800dffe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e002:	b10a      	cbz	r2, 800e008 <_svfiprintf_r+0x5c>
 800e004:	2a25      	cmp	r2, #37	; 0x25
 800e006:	d1f9      	bne.n	800dffc <_svfiprintf_r+0x50>
 800e008:	ebba 0b04 	subs.w	fp, sl, r4
 800e00c:	d00b      	beq.n	800e026 <_svfiprintf_r+0x7a>
 800e00e:	465b      	mov	r3, fp
 800e010:	4622      	mov	r2, r4
 800e012:	4629      	mov	r1, r5
 800e014:	4638      	mov	r0, r7
 800e016:	f7ff ff6d 	bl	800def4 <__ssputs_r>
 800e01a:	3001      	adds	r0, #1
 800e01c:	f000 80aa 	beq.w	800e174 <_svfiprintf_r+0x1c8>
 800e020:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e022:	445a      	add	r2, fp
 800e024:	9209      	str	r2, [sp, #36]	; 0x24
 800e026:	f89a 3000 	ldrb.w	r3, [sl]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	f000 80a2 	beq.w	800e174 <_svfiprintf_r+0x1c8>
 800e030:	2300      	movs	r3, #0
 800e032:	f04f 32ff 	mov.w	r2, #4294967295
 800e036:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e03a:	f10a 0a01 	add.w	sl, sl, #1
 800e03e:	9304      	str	r3, [sp, #16]
 800e040:	9307      	str	r3, [sp, #28]
 800e042:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e046:	931a      	str	r3, [sp, #104]	; 0x68
 800e048:	4654      	mov	r4, sl
 800e04a:	2205      	movs	r2, #5
 800e04c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e050:	4851      	ldr	r0, [pc, #324]	; (800e198 <_svfiprintf_r+0x1ec>)
 800e052:	f7f2 f8c5 	bl	80001e0 <memchr>
 800e056:	9a04      	ldr	r2, [sp, #16]
 800e058:	b9d8      	cbnz	r0, 800e092 <_svfiprintf_r+0xe6>
 800e05a:	06d0      	lsls	r0, r2, #27
 800e05c:	bf44      	itt	mi
 800e05e:	2320      	movmi	r3, #32
 800e060:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e064:	0711      	lsls	r1, r2, #28
 800e066:	bf44      	itt	mi
 800e068:	232b      	movmi	r3, #43	; 0x2b
 800e06a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e06e:	f89a 3000 	ldrb.w	r3, [sl]
 800e072:	2b2a      	cmp	r3, #42	; 0x2a
 800e074:	d015      	beq.n	800e0a2 <_svfiprintf_r+0xf6>
 800e076:	9a07      	ldr	r2, [sp, #28]
 800e078:	4654      	mov	r4, sl
 800e07a:	2000      	movs	r0, #0
 800e07c:	f04f 0c0a 	mov.w	ip, #10
 800e080:	4621      	mov	r1, r4
 800e082:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e086:	3b30      	subs	r3, #48	; 0x30
 800e088:	2b09      	cmp	r3, #9
 800e08a:	d94e      	bls.n	800e12a <_svfiprintf_r+0x17e>
 800e08c:	b1b0      	cbz	r0, 800e0bc <_svfiprintf_r+0x110>
 800e08e:	9207      	str	r2, [sp, #28]
 800e090:	e014      	b.n	800e0bc <_svfiprintf_r+0x110>
 800e092:	eba0 0308 	sub.w	r3, r0, r8
 800e096:	fa09 f303 	lsl.w	r3, r9, r3
 800e09a:	4313      	orrs	r3, r2
 800e09c:	9304      	str	r3, [sp, #16]
 800e09e:	46a2      	mov	sl, r4
 800e0a0:	e7d2      	b.n	800e048 <_svfiprintf_r+0x9c>
 800e0a2:	9b03      	ldr	r3, [sp, #12]
 800e0a4:	1d19      	adds	r1, r3, #4
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	9103      	str	r1, [sp, #12]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	bfbb      	ittet	lt
 800e0ae:	425b      	neglt	r3, r3
 800e0b0:	f042 0202 	orrlt.w	r2, r2, #2
 800e0b4:	9307      	strge	r3, [sp, #28]
 800e0b6:	9307      	strlt	r3, [sp, #28]
 800e0b8:	bfb8      	it	lt
 800e0ba:	9204      	strlt	r2, [sp, #16]
 800e0bc:	7823      	ldrb	r3, [r4, #0]
 800e0be:	2b2e      	cmp	r3, #46	; 0x2e
 800e0c0:	d10c      	bne.n	800e0dc <_svfiprintf_r+0x130>
 800e0c2:	7863      	ldrb	r3, [r4, #1]
 800e0c4:	2b2a      	cmp	r3, #42	; 0x2a
 800e0c6:	d135      	bne.n	800e134 <_svfiprintf_r+0x188>
 800e0c8:	9b03      	ldr	r3, [sp, #12]
 800e0ca:	1d1a      	adds	r2, r3, #4
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	9203      	str	r2, [sp, #12]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	bfb8      	it	lt
 800e0d4:	f04f 33ff 	movlt.w	r3, #4294967295
 800e0d8:	3402      	adds	r4, #2
 800e0da:	9305      	str	r3, [sp, #20]
 800e0dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e1a8 <_svfiprintf_r+0x1fc>
 800e0e0:	7821      	ldrb	r1, [r4, #0]
 800e0e2:	2203      	movs	r2, #3
 800e0e4:	4650      	mov	r0, sl
 800e0e6:	f7f2 f87b 	bl	80001e0 <memchr>
 800e0ea:	b140      	cbz	r0, 800e0fe <_svfiprintf_r+0x152>
 800e0ec:	2340      	movs	r3, #64	; 0x40
 800e0ee:	eba0 000a 	sub.w	r0, r0, sl
 800e0f2:	fa03 f000 	lsl.w	r0, r3, r0
 800e0f6:	9b04      	ldr	r3, [sp, #16]
 800e0f8:	4303      	orrs	r3, r0
 800e0fa:	3401      	adds	r4, #1
 800e0fc:	9304      	str	r3, [sp, #16]
 800e0fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e102:	4826      	ldr	r0, [pc, #152]	; (800e19c <_svfiprintf_r+0x1f0>)
 800e104:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e108:	2206      	movs	r2, #6
 800e10a:	f7f2 f869 	bl	80001e0 <memchr>
 800e10e:	2800      	cmp	r0, #0
 800e110:	d038      	beq.n	800e184 <_svfiprintf_r+0x1d8>
 800e112:	4b23      	ldr	r3, [pc, #140]	; (800e1a0 <_svfiprintf_r+0x1f4>)
 800e114:	bb1b      	cbnz	r3, 800e15e <_svfiprintf_r+0x1b2>
 800e116:	9b03      	ldr	r3, [sp, #12]
 800e118:	3307      	adds	r3, #7
 800e11a:	f023 0307 	bic.w	r3, r3, #7
 800e11e:	3308      	adds	r3, #8
 800e120:	9303      	str	r3, [sp, #12]
 800e122:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e124:	4433      	add	r3, r6
 800e126:	9309      	str	r3, [sp, #36]	; 0x24
 800e128:	e767      	b.n	800dffa <_svfiprintf_r+0x4e>
 800e12a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e12e:	460c      	mov	r4, r1
 800e130:	2001      	movs	r0, #1
 800e132:	e7a5      	b.n	800e080 <_svfiprintf_r+0xd4>
 800e134:	2300      	movs	r3, #0
 800e136:	3401      	adds	r4, #1
 800e138:	9305      	str	r3, [sp, #20]
 800e13a:	4619      	mov	r1, r3
 800e13c:	f04f 0c0a 	mov.w	ip, #10
 800e140:	4620      	mov	r0, r4
 800e142:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e146:	3a30      	subs	r2, #48	; 0x30
 800e148:	2a09      	cmp	r2, #9
 800e14a:	d903      	bls.n	800e154 <_svfiprintf_r+0x1a8>
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d0c5      	beq.n	800e0dc <_svfiprintf_r+0x130>
 800e150:	9105      	str	r1, [sp, #20]
 800e152:	e7c3      	b.n	800e0dc <_svfiprintf_r+0x130>
 800e154:	fb0c 2101 	mla	r1, ip, r1, r2
 800e158:	4604      	mov	r4, r0
 800e15a:	2301      	movs	r3, #1
 800e15c:	e7f0      	b.n	800e140 <_svfiprintf_r+0x194>
 800e15e:	ab03      	add	r3, sp, #12
 800e160:	9300      	str	r3, [sp, #0]
 800e162:	462a      	mov	r2, r5
 800e164:	4b0f      	ldr	r3, [pc, #60]	; (800e1a4 <_svfiprintf_r+0x1f8>)
 800e166:	a904      	add	r1, sp, #16
 800e168:	4638      	mov	r0, r7
 800e16a:	f3af 8000 	nop.w
 800e16e:	1c42      	adds	r2, r0, #1
 800e170:	4606      	mov	r6, r0
 800e172:	d1d6      	bne.n	800e122 <_svfiprintf_r+0x176>
 800e174:	89ab      	ldrh	r3, [r5, #12]
 800e176:	065b      	lsls	r3, r3, #25
 800e178:	f53f af2c 	bmi.w	800dfd4 <_svfiprintf_r+0x28>
 800e17c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e17e:	b01d      	add	sp, #116	; 0x74
 800e180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e184:	ab03      	add	r3, sp, #12
 800e186:	9300      	str	r3, [sp, #0]
 800e188:	462a      	mov	r2, r5
 800e18a:	4b06      	ldr	r3, [pc, #24]	; (800e1a4 <_svfiprintf_r+0x1f8>)
 800e18c:	a904      	add	r1, sp, #16
 800e18e:	4638      	mov	r0, r7
 800e190:	f000 f87a 	bl	800e288 <_printf_i>
 800e194:	e7eb      	b.n	800e16e <_svfiprintf_r+0x1c2>
 800e196:	bf00      	nop
 800e198:	0800e704 	.word	0x0800e704
 800e19c:	0800e70e 	.word	0x0800e70e
 800e1a0:	00000000 	.word	0x00000000
 800e1a4:	0800def5 	.word	0x0800def5
 800e1a8:	0800e70a 	.word	0x0800e70a

0800e1ac <_printf_common>:
 800e1ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1b0:	4616      	mov	r6, r2
 800e1b2:	4699      	mov	r9, r3
 800e1b4:	688a      	ldr	r2, [r1, #8]
 800e1b6:	690b      	ldr	r3, [r1, #16]
 800e1b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e1bc:	4293      	cmp	r3, r2
 800e1be:	bfb8      	it	lt
 800e1c0:	4613      	movlt	r3, r2
 800e1c2:	6033      	str	r3, [r6, #0]
 800e1c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e1c8:	4607      	mov	r7, r0
 800e1ca:	460c      	mov	r4, r1
 800e1cc:	b10a      	cbz	r2, 800e1d2 <_printf_common+0x26>
 800e1ce:	3301      	adds	r3, #1
 800e1d0:	6033      	str	r3, [r6, #0]
 800e1d2:	6823      	ldr	r3, [r4, #0]
 800e1d4:	0699      	lsls	r1, r3, #26
 800e1d6:	bf42      	ittt	mi
 800e1d8:	6833      	ldrmi	r3, [r6, #0]
 800e1da:	3302      	addmi	r3, #2
 800e1dc:	6033      	strmi	r3, [r6, #0]
 800e1de:	6825      	ldr	r5, [r4, #0]
 800e1e0:	f015 0506 	ands.w	r5, r5, #6
 800e1e4:	d106      	bne.n	800e1f4 <_printf_common+0x48>
 800e1e6:	f104 0a19 	add.w	sl, r4, #25
 800e1ea:	68e3      	ldr	r3, [r4, #12]
 800e1ec:	6832      	ldr	r2, [r6, #0]
 800e1ee:	1a9b      	subs	r3, r3, r2
 800e1f0:	42ab      	cmp	r3, r5
 800e1f2:	dc26      	bgt.n	800e242 <_printf_common+0x96>
 800e1f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e1f8:	1e13      	subs	r3, r2, #0
 800e1fa:	6822      	ldr	r2, [r4, #0]
 800e1fc:	bf18      	it	ne
 800e1fe:	2301      	movne	r3, #1
 800e200:	0692      	lsls	r2, r2, #26
 800e202:	d42b      	bmi.n	800e25c <_printf_common+0xb0>
 800e204:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e208:	4649      	mov	r1, r9
 800e20a:	4638      	mov	r0, r7
 800e20c:	47c0      	blx	r8
 800e20e:	3001      	adds	r0, #1
 800e210:	d01e      	beq.n	800e250 <_printf_common+0xa4>
 800e212:	6823      	ldr	r3, [r4, #0]
 800e214:	68e5      	ldr	r5, [r4, #12]
 800e216:	6832      	ldr	r2, [r6, #0]
 800e218:	f003 0306 	and.w	r3, r3, #6
 800e21c:	2b04      	cmp	r3, #4
 800e21e:	bf08      	it	eq
 800e220:	1aad      	subeq	r5, r5, r2
 800e222:	68a3      	ldr	r3, [r4, #8]
 800e224:	6922      	ldr	r2, [r4, #16]
 800e226:	bf0c      	ite	eq
 800e228:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e22c:	2500      	movne	r5, #0
 800e22e:	4293      	cmp	r3, r2
 800e230:	bfc4      	itt	gt
 800e232:	1a9b      	subgt	r3, r3, r2
 800e234:	18ed      	addgt	r5, r5, r3
 800e236:	2600      	movs	r6, #0
 800e238:	341a      	adds	r4, #26
 800e23a:	42b5      	cmp	r5, r6
 800e23c:	d11a      	bne.n	800e274 <_printf_common+0xc8>
 800e23e:	2000      	movs	r0, #0
 800e240:	e008      	b.n	800e254 <_printf_common+0xa8>
 800e242:	2301      	movs	r3, #1
 800e244:	4652      	mov	r2, sl
 800e246:	4649      	mov	r1, r9
 800e248:	4638      	mov	r0, r7
 800e24a:	47c0      	blx	r8
 800e24c:	3001      	adds	r0, #1
 800e24e:	d103      	bne.n	800e258 <_printf_common+0xac>
 800e250:	f04f 30ff 	mov.w	r0, #4294967295
 800e254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e258:	3501      	adds	r5, #1
 800e25a:	e7c6      	b.n	800e1ea <_printf_common+0x3e>
 800e25c:	18e1      	adds	r1, r4, r3
 800e25e:	1c5a      	adds	r2, r3, #1
 800e260:	2030      	movs	r0, #48	; 0x30
 800e262:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e266:	4422      	add	r2, r4
 800e268:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e26c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e270:	3302      	adds	r3, #2
 800e272:	e7c7      	b.n	800e204 <_printf_common+0x58>
 800e274:	2301      	movs	r3, #1
 800e276:	4622      	mov	r2, r4
 800e278:	4649      	mov	r1, r9
 800e27a:	4638      	mov	r0, r7
 800e27c:	47c0      	blx	r8
 800e27e:	3001      	adds	r0, #1
 800e280:	d0e6      	beq.n	800e250 <_printf_common+0xa4>
 800e282:	3601      	adds	r6, #1
 800e284:	e7d9      	b.n	800e23a <_printf_common+0x8e>
	...

0800e288 <_printf_i>:
 800e288:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e28c:	460c      	mov	r4, r1
 800e28e:	4691      	mov	r9, r2
 800e290:	7e27      	ldrb	r7, [r4, #24]
 800e292:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e294:	2f78      	cmp	r7, #120	; 0x78
 800e296:	4680      	mov	r8, r0
 800e298:	469a      	mov	sl, r3
 800e29a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e29e:	d807      	bhi.n	800e2b0 <_printf_i+0x28>
 800e2a0:	2f62      	cmp	r7, #98	; 0x62
 800e2a2:	d80a      	bhi.n	800e2ba <_printf_i+0x32>
 800e2a4:	2f00      	cmp	r7, #0
 800e2a6:	f000 80d8 	beq.w	800e45a <_printf_i+0x1d2>
 800e2aa:	2f58      	cmp	r7, #88	; 0x58
 800e2ac:	f000 80a3 	beq.w	800e3f6 <_printf_i+0x16e>
 800e2b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e2b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e2b8:	e03a      	b.n	800e330 <_printf_i+0xa8>
 800e2ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e2be:	2b15      	cmp	r3, #21
 800e2c0:	d8f6      	bhi.n	800e2b0 <_printf_i+0x28>
 800e2c2:	a001      	add	r0, pc, #4	; (adr r0, 800e2c8 <_printf_i+0x40>)
 800e2c4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e2c8:	0800e321 	.word	0x0800e321
 800e2cc:	0800e335 	.word	0x0800e335
 800e2d0:	0800e2b1 	.word	0x0800e2b1
 800e2d4:	0800e2b1 	.word	0x0800e2b1
 800e2d8:	0800e2b1 	.word	0x0800e2b1
 800e2dc:	0800e2b1 	.word	0x0800e2b1
 800e2e0:	0800e335 	.word	0x0800e335
 800e2e4:	0800e2b1 	.word	0x0800e2b1
 800e2e8:	0800e2b1 	.word	0x0800e2b1
 800e2ec:	0800e2b1 	.word	0x0800e2b1
 800e2f0:	0800e2b1 	.word	0x0800e2b1
 800e2f4:	0800e441 	.word	0x0800e441
 800e2f8:	0800e365 	.word	0x0800e365
 800e2fc:	0800e423 	.word	0x0800e423
 800e300:	0800e2b1 	.word	0x0800e2b1
 800e304:	0800e2b1 	.word	0x0800e2b1
 800e308:	0800e463 	.word	0x0800e463
 800e30c:	0800e2b1 	.word	0x0800e2b1
 800e310:	0800e365 	.word	0x0800e365
 800e314:	0800e2b1 	.word	0x0800e2b1
 800e318:	0800e2b1 	.word	0x0800e2b1
 800e31c:	0800e42b 	.word	0x0800e42b
 800e320:	680b      	ldr	r3, [r1, #0]
 800e322:	1d1a      	adds	r2, r3, #4
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	600a      	str	r2, [r1, #0]
 800e328:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e32c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e330:	2301      	movs	r3, #1
 800e332:	e0a3      	b.n	800e47c <_printf_i+0x1f4>
 800e334:	6825      	ldr	r5, [r4, #0]
 800e336:	6808      	ldr	r0, [r1, #0]
 800e338:	062e      	lsls	r6, r5, #24
 800e33a:	f100 0304 	add.w	r3, r0, #4
 800e33e:	d50a      	bpl.n	800e356 <_printf_i+0xce>
 800e340:	6805      	ldr	r5, [r0, #0]
 800e342:	600b      	str	r3, [r1, #0]
 800e344:	2d00      	cmp	r5, #0
 800e346:	da03      	bge.n	800e350 <_printf_i+0xc8>
 800e348:	232d      	movs	r3, #45	; 0x2d
 800e34a:	426d      	negs	r5, r5
 800e34c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e350:	485e      	ldr	r0, [pc, #376]	; (800e4cc <_printf_i+0x244>)
 800e352:	230a      	movs	r3, #10
 800e354:	e019      	b.n	800e38a <_printf_i+0x102>
 800e356:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e35a:	6805      	ldr	r5, [r0, #0]
 800e35c:	600b      	str	r3, [r1, #0]
 800e35e:	bf18      	it	ne
 800e360:	b22d      	sxthne	r5, r5
 800e362:	e7ef      	b.n	800e344 <_printf_i+0xbc>
 800e364:	680b      	ldr	r3, [r1, #0]
 800e366:	6825      	ldr	r5, [r4, #0]
 800e368:	1d18      	adds	r0, r3, #4
 800e36a:	6008      	str	r0, [r1, #0]
 800e36c:	0628      	lsls	r0, r5, #24
 800e36e:	d501      	bpl.n	800e374 <_printf_i+0xec>
 800e370:	681d      	ldr	r5, [r3, #0]
 800e372:	e002      	b.n	800e37a <_printf_i+0xf2>
 800e374:	0669      	lsls	r1, r5, #25
 800e376:	d5fb      	bpl.n	800e370 <_printf_i+0xe8>
 800e378:	881d      	ldrh	r5, [r3, #0]
 800e37a:	4854      	ldr	r0, [pc, #336]	; (800e4cc <_printf_i+0x244>)
 800e37c:	2f6f      	cmp	r7, #111	; 0x6f
 800e37e:	bf0c      	ite	eq
 800e380:	2308      	moveq	r3, #8
 800e382:	230a      	movne	r3, #10
 800e384:	2100      	movs	r1, #0
 800e386:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e38a:	6866      	ldr	r6, [r4, #4]
 800e38c:	60a6      	str	r6, [r4, #8]
 800e38e:	2e00      	cmp	r6, #0
 800e390:	bfa2      	ittt	ge
 800e392:	6821      	ldrge	r1, [r4, #0]
 800e394:	f021 0104 	bicge.w	r1, r1, #4
 800e398:	6021      	strge	r1, [r4, #0]
 800e39a:	b90d      	cbnz	r5, 800e3a0 <_printf_i+0x118>
 800e39c:	2e00      	cmp	r6, #0
 800e39e:	d04d      	beq.n	800e43c <_printf_i+0x1b4>
 800e3a0:	4616      	mov	r6, r2
 800e3a2:	fbb5 f1f3 	udiv	r1, r5, r3
 800e3a6:	fb03 5711 	mls	r7, r3, r1, r5
 800e3aa:	5dc7      	ldrb	r7, [r0, r7]
 800e3ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e3b0:	462f      	mov	r7, r5
 800e3b2:	42bb      	cmp	r3, r7
 800e3b4:	460d      	mov	r5, r1
 800e3b6:	d9f4      	bls.n	800e3a2 <_printf_i+0x11a>
 800e3b8:	2b08      	cmp	r3, #8
 800e3ba:	d10b      	bne.n	800e3d4 <_printf_i+0x14c>
 800e3bc:	6823      	ldr	r3, [r4, #0]
 800e3be:	07df      	lsls	r7, r3, #31
 800e3c0:	d508      	bpl.n	800e3d4 <_printf_i+0x14c>
 800e3c2:	6923      	ldr	r3, [r4, #16]
 800e3c4:	6861      	ldr	r1, [r4, #4]
 800e3c6:	4299      	cmp	r1, r3
 800e3c8:	bfde      	ittt	le
 800e3ca:	2330      	movle	r3, #48	; 0x30
 800e3cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e3d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e3d4:	1b92      	subs	r2, r2, r6
 800e3d6:	6122      	str	r2, [r4, #16]
 800e3d8:	f8cd a000 	str.w	sl, [sp]
 800e3dc:	464b      	mov	r3, r9
 800e3de:	aa03      	add	r2, sp, #12
 800e3e0:	4621      	mov	r1, r4
 800e3e2:	4640      	mov	r0, r8
 800e3e4:	f7ff fee2 	bl	800e1ac <_printf_common>
 800e3e8:	3001      	adds	r0, #1
 800e3ea:	d14c      	bne.n	800e486 <_printf_i+0x1fe>
 800e3ec:	f04f 30ff 	mov.w	r0, #4294967295
 800e3f0:	b004      	add	sp, #16
 800e3f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3f6:	4835      	ldr	r0, [pc, #212]	; (800e4cc <_printf_i+0x244>)
 800e3f8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e3fc:	6823      	ldr	r3, [r4, #0]
 800e3fe:	680e      	ldr	r6, [r1, #0]
 800e400:	061f      	lsls	r7, r3, #24
 800e402:	f856 5b04 	ldr.w	r5, [r6], #4
 800e406:	600e      	str	r6, [r1, #0]
 800e408:	d514      	bpl.n	800e434 <_printf_i+0x1ac>
 800e40a:	07d9      	lsls	r1, r3, #31
 800e40c:	bf44      	itt	mi
 800e40e:	f043 0320 	orrmi.w	r3, r3, #32
 800e412:	6023      	strmi	r3, [r4, #0]
 800e414:	b91d      	cbnz	r5, 800e41e <_printf_i+0x196>
 800e416:	6823      	ldr	r3, [r4, #0]
 800e418:	f023 0320 	bic.w	r3, r3, #32
 800e41c:	6023      	str	r3, [r4, #0]
 800e41e:	2310      	movs	r3, #16
 800e420:	e7b0      	b.n	800e384 <_printf_i+0xfc>
 800e422:	6823      	ldr	r3, [r4, #0]
 800e424:	f043 0320 	orr.w	r3, r3, #32
 800e428:	6023      	str	r3, [r4, #0]
 800e42a:	2378      	movs	r3, #120	; 0x78
 800e42c:	4828      	ldr	r0, [pc, #160]	; (800e4d0 <_printf_i+0x248>)
 800e42e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e432:	e7e3      	b.n	800e3fc <_printf_i+0x174>
 800e434:	065e      	lsls	r6, r3, #25
 800e436:	bf48      	it	mi
 800e438:	b2ad      	uxthmi	r5, r5
 800e43a:	e7e6      	b.n	800e40a <_printf_i+0x182>
 800e43c:	4616      	mov	r6, r2
 800e43e:	e7bb      	b.n	800e3b8 <_printf_i+0x130>
 800e440:	680b      	ldr	r3, [r1, #0]
 800e442:	6826      	ldr	r6, [r4, #0]
 800e444:	6960      	ldr	r0, [r4, #20]
 800e446:	1d1d      	adds	r5, r3, #4
 800e448:	600d      	str	r5, [r1, #0]
 800e44a:	0635      	lsls	r5, r6, #24
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	d501      	bpl.n	800e454 <_printf_i+0x1cc>
 800e450:	6018      	str	r0, [r3, #0]
 800e452:	e002      	b.n	800e45a <_printf_i+0x1d2>
 800e454:	0671      	lsls	r1, r6, #25
 800e456:	d5fb      	bpl.n	800e450 <_printf_i+0x1c8>
 800e458:	8018      	strh	r0, [r3, #0]
 800e45a:	2300      	movs	r3, #0
 800e45c:	6123      	str	r3, [r4, #16]
 800e45e:	4616      	mov	r6, r2
 800e460:	e7ba      	b.n	800e3d8 <_printf_i+0x150>
 800e462:	680b      	ldr	r3, [r1, #0]
 800e464:	1d1a      	adds	r2, r3, #4
 800e466:	600a      	str	r2, [r1, #0]
 800e468:	681e      	ldr	r6, [r3, #0]
 800e46a:	6862      	ldr	r2, [r4, #4]
 800e46c:	2100      	movs	r1, #0
 800e46e:	4630      	mov	r0, r6
 800e470:	f7f1 feb6 	bl	80001e0 <memchr>
 800e474:	b108      	cbz	r0, 800e47a <_printf_i+0x1f2>
 800e476:	1b80      	subs	r0, r0, r6
 800e478:	6060      	str	r0, [r4, #4]
 800e47a:	6863      	ldr	r3, [r4, #4]
 800e47c:	6123      	str	r3, [r4, #16]
 800e47e:	2300      	movs	r3, #0
 800e480:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e484:	e7a8      	b.n	800e3d8 <_printf_i+0x150>
 800e486:	6923      	ldr	r3, [r4, #16]
 800e488:	4632      	mov	r2, r6
 800e48a:	4649      	mov	r1, r9
 800e48c:	4640      	mov	r0, r8
 800e48e:	47d0      	blx	sl
 800e490:	3001      	adds	r0, #1
 800e492:	d0ab      	beq.n	800e3ec <_printf_i+0x164>
 800e494:	6823      	ldr	r3, [r4, #0]
 800e496:	079b      	lsls	r3, r3, #30
 800e498:	d413      	bmi.n	800e4c2 <_printf_i+0x23a>
 800e49a:	68e0      	ldr	r0, [r4, #12]
 800e49c:	9b03      	ldr	r3, [sp, #12]
 800e49e:	4298      	cmp	r0, r3
 800e4a0:	bfb8      	it	lt
 800e4a2:	4618      	movlt	r0, r3
 800e4a4:	e7a4      	b.n	800e3f0 <_printf_i+0x168>
 800e4a6:	2301      	movs	r3, #1
 800e4a8:	4632      	mov	r2, r6
 800e4aa:	4649      	mov	r1, r9
 800e4ac:	4640      	mov	r0, r8
 800e4ae:	47d0      	blx	sl
 800e4b0:	3001      	adds	r0, #1
 800e4b2:	d09b      	beq.n	800e3ec <_printf_i+0x164>
 800e4b4:	3501      	adds	r5, #1
 800e4b6:	68e3      	ldr	r3, [r4, #12]
 800e4b8:	9903      	ldr	r1, [sp, #12]
 800e4ba:	1a5b      	subs	r3, r3, r1
 800e4bc:	42ab      	cmp	r3, r5
 800e4be:	dcf2      	bgt.n	800e4a6 <_printf_i+0x21e>
 800e4c0:	e7eb      	b.n	800e49a <_printf_i+0x212>
 800e4c2:	2500      	movs	r5, #0
 800e4c4:	f104 0619 	add.w	r6, r4, #25
 800e4c8:	e7f5      	b.n	800e4b6 <_printf_i+0x22e>
 800e4ca:	bf00      	nop
 800e4cc:	0800e715 	.word	0x0800e715
 800e4d0:	0800e726 	.word	0x0800e726

0800e4d4 <memmove>:
 800e4d4:	4288      	cmp	r0, r1
 800e4d6:	b510      	push	{r4, lr}
 800e4d8:	eb01 0402 	add.w	r4, r1, r2
 800e4dc:	d902      	bls.n	800e4e4 <memmove+0x10>
 800e4de:	4284      	cmp	r4, r0
 800e4e0:	4623      	mov	r3, r4
 800e4e2:	d807      	bhi.n	800e4f4 <memmove+0x20>
 800e4e4:	1e43      	subs	r3, r0, #1
 800e4e6:	42a1      	cmp	r1, r4
 800e4e8:	d008      	beq.n	800e4fc <memmove+0x28>
 800e4ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e4ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e4f2:	e7f8      	b.n	800e4e6 <memmove+0x12>
 800e4f4:	4402      	add	r2, r0
 800e4f6:	4601      	mov	r1, r0
 800e4f8:	428a      	cmp	r2, r1
 800e4fa:	d100      	bne.n	800e4fe <memmove+0x2a>
 800e4fc:	bd10      	pop	{r4, pc}
 800e4fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e502:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e506:	e7f7      	b.n	800e4f8 <memmove+0x24>

0800e508 <_realloc_r>:
 800e508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e50a:	4607      	mov	r7, r0
 800e50c:	4614      	mov	r4, r2
 800e50e:	460e      	mov	r6, r1
 800e510:	b921      	cbnz	r1, 800e51c <_realloc_r+0x14>
 800e512:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e516:	4611      	mov	r1, r2
 800e518:	f7ff bbec 	b.w	800dcf4 <_malloc_r>
 800e51c:	b922      	cbnz	r2, 800e528 <_realloc_r+0x20>
 800e51e:	f7ff fb99 	bl	800dc54 <_free_r>
 800e522:	4625      	mov	r5, r4
 800e524:	4628      	mov	r0, r5
 800e526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e528:	f000 f814 	bl	800e554 <_malloc_usable_size_r>
 800e52c:	42a0      	cmp	r0, r4
 800e52e:	d20f      	bcs.n	800e550 <_realloc_r+0x48>
 800e530:	4621      	mov	r1, r4
 800e532:	4638      	mov	r0, r7
 800e534:	f7ff fbde 	bl	800dcf4 <_malloc_r>
 800e538:	4605      	mov	r5, r0
 800e53a:	2800      	cmp	r0, #0
 800e53c:	d0f2      	beq.n	800e524 <_realloc_r+0x1c>
 800e53e:	4631      	mov	r1, r6
 800e540:	4622      	mov	r2, r4
 800e542:	f7ff fb71 	bl	800dc28 <memcpy>
 800e546:	4631      	mov	r1, r6
 800e548:	4638      	mov	r0, r7
 800e54a:	f7ff fb83 	bl	800dc54 <_free_r>
 800e54e:	e7e9      	b.n	800e524 <_realloc_r+0x1c>
 800e550:	4635      	mov	r5, r6
 800e552:	e7e7      	b.n	800e524 <_realloc_r+0x1c>

0800e554 <_malloc_usable_size_r>:
 800e554:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e558:	1f18      	subs	r0, r3, #4
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	bfbc      	itt	lt
 800e55e:	580b      	ldrlt	r3, [r1, r0]
 800e560:	18c0      	addlt	r0, r0, r3
 800e562:	4770      	bx	lr

0800e564 <_init>:
 800e564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e566:	bf00      	nop
 800e568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e56a:	bc08      	pop	{r3}
 800e56c:	469e      	mov	lr, r3
 800e56e:	4770      	bx	lr

0800e570 <_fini>:
 800e570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e572:	bf00      	nop
 800e574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e576:	bc08      	pop	{r3}
 800e578:	469e      	mov	lr, r3
 800e57a:	4770      	bx	lr
