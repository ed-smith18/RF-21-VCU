
RF21_VCU_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c8bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  0800ca4c  0800ca4c  0001ca4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb5c  0800cb5c  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800cb5c  0800cb5c  0001cb5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cb64  0800cb64  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb64  0800cb64  0001cb64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cb68  0800cb68  0001cb68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800cb6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          00004ad8  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004b6c  20004b6c  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00031b94  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000060b1  00000000  00000000  00051c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002180  00000000  00000000  00057d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001f70  00000000  00000000  00059e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029bec  00000000  00000000  0005be00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002af06  00000000  00000000  000859ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee75e  00000000  00000000  000b08f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0019f050  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000091a0  00000000  00000000  0019f0a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ca34 	.word	0x0800ca34

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800ca34 	.word	0x0800ca34

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	4a07      	ldr	r2, [pc, #28]	; (80004f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80004d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	4a06      	ldr	r2, [pc, #24]	; (80004f8 <vApplicationGetIdleTaskMemory+0x30>)
 80004de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2280      	movs	r2, #128	; 0x80
 80004e4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004e6:	bf00      	nop
 80004e8:	3714      	adds	r7, #20
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	200000b0 	.word	0x200000b0
 80004f8:	20000164 	.word	0x20000164

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b5b0      	push	{r4, r5, r7, lr}
 80004fe:	b08e      	sub	sp, #56	; 0x38
 8000500:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000502:	f001 f86d 	bl	80015e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000506:	f000 f843 	bl	8000590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050a:	f000 fac5 	bl	8000a98 <MX_GPIO_Init>
  MX_I2C1_Init();
 800050e:	f000 f9d5 	bl	80008bc <MX_I2C1_Init>
  MX_I2S3_Init();
 8000512:	f000 fa01 	bl	8000918 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000516:	f000 fa2f 	bl	8000978 <MX_SPI1_Init>
  MX_DMA_Init();
 800051a:	f000 fa8d 	bl	8000a38 <MX_DMA_Init>
  MX_ADC1_Init();
 800051e:	f000 f8a1 	bl	8000664 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000522:	f000 fa5f 	bl	80009e4 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 8000526:	f000 f8ef 	bl	8000708 <MX_ADC2_Init>
  MX_ADC3_Init();
 800052a:	f000 f93f 	bl	80007ac <MX_ADC3_Init>
  MX_CAN1_Init();
 800052e:	f000 f98f 	bl	8000850 <MX_CAN1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ledTask */
  osThreadDef(ledTask, startLEDTask, osPriorityNormal, 0, 128);
 8000532:	4b13      	ldr	r3, [pc, #76]	; (8000580 <main+0x84>)
 8000534:	f107 041c 	add.w	r4, r7, #28
 8000538:	461d      	mov	r5, r3
 800053a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800053c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800053e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000542:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ledTaskHandle = osThreadCreate(osThread(ledTask), NULL);
 8000546:	f107 031c 	add.w	r3, r7, #28
 800054a:	2100      	movs	r1, #0
 800054c:	4618      	mov	r0, r3
 800054e:	f009 fb86 	bl	8009c5e <osThreadCreate>
 8000552:	4603      	mov	r3, r0
 8000554:	4a0b      	ldr	r2, [pc, #44]	; (8000584 <main+0x88>)
 8000556:	6013      	str	r3, [r2, #0]

  /* definition and creation of uartTask */
  osThreadDef(uartTask, startUART_Task, osPriorityNormal, 0, 256);
 8000558:	4b0b      	ldr	r3, [pc, #44]	; (8000588 <main+0x8c>)
 800055a:	463c      	mov	r4, r7
 800055c:	461d      	mov	r5, r3
 800055e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000560:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000562:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000566:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uartTaskHandle = osThreadCreate(osThread(uartTask), NULL);
 800056a:	463b      	mov	r3, r7
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f009 fb75 	bl	8009c5e <osThreadCreate>
 8000574:	4603      	mov	r3, r0
 8000576:	4a05      	ldr	r2, [pc, #20]	; (800058c <main+0x90>)
 8000578:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800057a:	f009 fb69 	bl	8009c50 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800057e:	e7fe      	b.n	800057e <main+0x82>
 8000580:	0800ca60 	.word	0x0800ca60
 8000584:	20004164 	.word	0x20004164
 8000588:	0800ca7c 	.word	0x0800ca7c
 800058c:	200041c8 	.word	0x200041c8

08000590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b094      	sub	sp, #80	; 0x50
 8000594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000596:	f107 0320 	add.w	r3, r7, #32
 800059a:	2230      	movs	r2, #48	; 0x30
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f00c f910 	bl	800c7c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a4:	f107 030c 	add.w	r3, r7, #12
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b4:	2300      	movs	r3, #0
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	4b28      	ldr	r3, [pc, #160]	; (800065c <SystemClock_Config+0xcc>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005bc:	4a27      	ldr	r2, [pc, #156]	; (800065c <SystemClock_Config+0xcc>)
 80005be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c2:	6413      	str	r3, [r2, #64]	; 0x40
 80005c4:	4b25      	ldr	r3, [pc, #148]	; (800065c <SystemClock_Config+0xcc>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d0:	2300      	movs	r3, #0
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	4b22      	ldr	r3, [pc, #136]	; (8000660 <SystemClock_Config+0xd0>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a21      	ldr	r2, [pc, #132]	; (8000660 <SystemClock_Config+0xd0>)
 80005da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005de:	6013      	str	r3, [r2, #0]
 80005e0:	4b1f      	ldr	r3, [pc, #124]	; (8000660 <SystemClock_Config+0xd0>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ec:	2301      	movs	r3, #1
 80005ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f6:	2302      	movs	r3, #2
 80005f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000600:	2308      	movs	r3, #8
 8000602:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000604:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000608:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800060a:	2302      	movs	r3, #2
 800060c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800060e:	2307      	movs	r3, #7
 8000610:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000612:	f107 0320 	add.w	r3, r7, #32
 8000616:	4618      	mov	r0, r3
 8000618:	f004 feb4 	bl	8005384 <HAL_RCC_OscConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000622:	f000 fb67 	bl	8000cf4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000626:	230f      	movs	r3, #15
 8000628:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062a:	2302      	movs	r3, #2
 800062c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062e:	2300      	movs	r3, #0
 8000630:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000632:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000636:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000638:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800063e:	f107 030c 	add.w	r3, r7, #12
 8000642:	2105      	movs	r1, #5
 8000644:	4618      	mov	r0, r3
 8000646:	f005 f915 	bl	8005874 <HAL_RCC_ClockConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000650:	f000 fb50 	bl	8000cf4 <Error_Handler>
  }
}
 8000654:	bf00      	nop
 8000656:	3750      	adds	r7, #80	; 0x50
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40023800 	.word	0x40023800
 8000660:	40007000 	.word	0x40007000

08000664 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800066a:	463b      	mov	r3, r7
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000676:	4b21      	ldr	r3, [pc, #132]	; (80006fc <MX_ADC1_Init+0x98>)
 8000678:	4a21      	ldr	r2, [pc, #132]	; (8000700 <MX_ADC1_Init+0x9c>)
 800067a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800067c:	4b1f      	ldr	r3, [pc, #124]	; (80006fc <MX_ADC1_Init+0x98>)
 800067e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000682:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000684:	4b1d      	ldr	r3, [pc, #116]	; (80006fc <MX_ADC1_Init+0x98>)
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800068a:	4b1c      	ldr	r3, [pc, #112]	; (80006fc <MX_ADC1_Init+0x98>)
 800068c:	2200      	movs	r2, #0
 800068e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000690:	4b1a      	ldr	r3, [pc, #104]	; (80006fc <MX_ADC1_Init+0x98>)
 8000692:	2201      	movs	r2, #1
 8000694:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000696:	4b19      	ldr	r3, [pc, #100]	; (80006fc <MX_ADC1_Init+0x98>)
 8000698:	2200      	movs	r2, #0
 800069a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800069e:	4b17      	ldr	r3, [pc, #92]	; (80006fc <MX_ADC1_Init+0x98>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006a4:	4b15      	ldr	r3, [pc, #84]	; (80006fc <MX_ADC1_Init+0x98>)
 80006a6:	4a17      	ldr	r2, [pc, #92]	; (8000704 <MX_ADC1_Init+0xa0>)
 80006a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006aa:	4b14      	ldr	r3, [pc, #80]	; (80006fc <MX_ADC1_Init+0x98>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006b0:	4b12      	ldr	r3, [pc, #72]	; (80006fc <MX_ADC1_Init+0x98>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <MX_ADC1_Init+0x98>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <MX_ADC1_Init+0x98>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006c4:	480d      	ldr	r0, [pc, #52]	; (80006fc <MX_ADC1_Init+0x98>)
 80006c6:	f000 fff1 	bl	80016ac <HAL_ADC_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006d0:	f000 fb10 	bl	8000cf4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006d4:	2301      	movs	r3, #1
 80006d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006d8:	2301      	movs	r3, #1
 80006da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006dc:	2300      	movs	r3, #0
 80006de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e0:	463b      	mov	r3, r7
 80006e2:	4619      	mov	r1, r3
 80006e4:	4805      	ldr	r0, [pc, #20]	; (80006fc <MX_ADC1_Init+0x98>)
 80006e6:	f001 f825 	bl	8001734 <HAL_ADC_ConfigChannel>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006f0:	f000 fb00 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006f4:	bf00      	nop
 80006f6:	3710      	adds	r7, #16
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	200041cc 	.word	0x200041cc
 8000700:	40012000 	.word	0x40012000
 8000704:	0f000001 	.word	0x0f000001

08000708 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800070e:	463b      	mov	r3, r7
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800071a:	4b21      	ldr	r3, [pc, #132]	; (80007a0 <MX_ADC2_Init+0x98>)
 800071c:	4a21      	ldr	r2, [pc, #132]	; (80007a4 <MX_ADC2_Init+0x9c>)
 800071e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000720:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <MX_ADC2_Init+0x98>)
 8000722:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000726:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000728:	4b1d      	ldr	r3, [pc, #116]	; (80007a0 <MX_ADC2_Init+0x98>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800072e:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <MX_ADC2_Init+0x98>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000734:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <MX_ADC2_Init+0x98>)
 8000736:	2201      	movs	r2, #1
 8000738:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800073a:	4b19      	ldr	r3, [pc, #100]	; (80007a0 <MX_ADC2_Init+0x98>)
 800073c:	2200      	movs	r2, #0
 800073e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000742:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <MX_ADC2_Init+0x98>)
 8000744:	2200      	movs	r2, #0
 8000746:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000748:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <MX_ADC2_Init+0x98>)
 800074a:	4a17      	ldr	r2, [pc, #92]	; (80007a8 <MX_ADC2_Init+0xa0>)
 800074c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800074e:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <MX_ADC2_Init+0x98>)
 8000750:	2200      	movs	r2, #0
 8000752:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000754:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <MX_ADC2_Init+0x98>)
 8000756:	2201      	movs	r2, #1
 8000758:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <MX_ADC2_Init+0x98>)
 800075c:	2201      	movs	r2, #1
 800075e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000762:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <MX_ADC2_Init+0x98>)
 8000764:	2201      	movs	r2, #1
 8000766:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000768:	480d      	ldr	r0, [pc, #52]	; (80007a0 <MX_ADC2_Init+0x98>)
 800076a:	f000 ff9f 	bl	80016ac <HAL_ADC_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000774:	f000 fabe 	bl	8000cf4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000778:	2303      	movs	r3, #3
 800077a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800077c:	2301      	movs	r3, #1
 800077e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000780:	2300      	movs	r3, #0
 8000782:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000784:	463b      	mov	r3, r7
 8000786:	4619      	mov	r1, r3
 8000788:	4805      	ldr	r0, [pc, #20]	; (80007a0 <MX_ADC2_Init+0x98>)
 800078a:	f000 ffd3 	bl	8001734 <HAL_ADC_ConfigChannel>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000794:	f000 faae 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000798:	bf00      	nop
 800079a:	3710      	adds	r7, #16
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	200040c8 	.word	0x200040c8
 80007a4:	40012100 	.word	0x40012100
 80007a8:	0f000001 	.word	0x0f000001

080007ac <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007b2:	463b      	mov	r3, r7
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80007be:	4b21      	ldr	r3, [pc, #132]	; (8000844 <MX_ADC3_Init+0x98>)
 80007c0:	4a21      	ldr	r2, [pc, #132]	; (8000848 <MX_ADC3_Init+0x9c>)
 80007c2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007c4:	4b1f      	ldr	r3, [pc, #124]	; (8000844 <MX_ADC3_Init+0x98>)
 80007c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007ca:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80007cc:	4b1d      	ldr	r3, [pc, #116]	; (8000844 <MX_ADC3_Init+0x98>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80007d2:	4b1c      	ldr	r3, [pc, #112]	; (8000844 <MX_ADC3_Init+0x98>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80007d8:	4b1a      	ldr	r3, [pc, #104]	; (8000844 <MX_ADC3_Init+0x98>)
 80007da:	2201      	movs	r2, #1
 80007dc:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80007de:	4b19      	ldr	r3, [pc, #100]	; (8000844 <MX_ADC3_Init+0x98>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007e6:	4b17      	ldr	r3, [pc, #92]	; (8000844 <MX_ADC3_Init+0x98>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007ec:	4b15      	ldr	r3, [pc, #84]	; (8000844 <MX_ADC3_Init+0x98>)
 80007ee:	4a17      	ldr	r2, [pc, #92]	; (800084c <MX_ADC3_Init+0xa0>)
 80007f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007f2:	4b14      	ldr	r3, [pc, #80]	; (8000844 <MX_ADC3_Init+0x98>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80007f8:	4b12      	ldr	r3, [pc, #72]	; (8000844 <MX_ADC3_Init+0x98>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80007fe:	4b11      	ldr	r3, [pc, #68]	; (8000844 <MX_ADC3_Init+0x98>)
 8000800:	2201      	movs	r2, #1
 8000802:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000806:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <MX_ADC3_Init+0x98>)
 8000808:	2201      	movs	r2, #1
 800080a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800080c:	480d      	ldr	r0, [pc, #52]	; (8000844 <MX_ADC3_Init+0x98>)
 800080e:	f000 ff4d 	bl	80016ac <HAL_ADC_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000818:	f000 fa6c 	bl	8000cf4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800081c:	230c      	movs	r3, #12
 800081e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000820:	2301      	movs	r3, #1
 8000822:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000824:	2300      	movs	r3, #0
 8000826:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000828:	463b      	mov	r3, r7
 800082a:	4619      	mov	r1, r3
 800082c:	4805      	ldr	r0, [pc, #20]	; (8000844 <MX_ADC3_Init+0x98>)
 800082e:	f000 ff81 	bl	8001734 <HAL_ADC_ConfigChannel>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000838:	f000 fa5c 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800083c:	bf00      	nop
 800083e:	3710      	adds	r7, #16
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20004214 	.word	0x20004214
 8000848:	40012200 	.word	0x40012200
 800084c:	0f000001 	.word	0x0f000001

08000850 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000854:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <MX_CAN1_Init+0x64>)
 8000856:	4a18      	ldr	r2, [pc, #96]	; (80008b8 <MX_CAN1_Init+0x68>)
 8000858:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 14;
 800085a:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <MX_CAN1_Init+0x64>)
 800085c:	220e      	movs	r2, #14
 800085e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000860:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <MX_CAN1_Init+0x64>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000866:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <MX_CAN1_Init+0x64>)
 8000868:	2200      	movs	r2, #0
 800086a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800086c:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_CAN1_Init+0x64>)
 800086e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000872:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000874:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <MX_CAN1_Init+0x64>)
 8000876:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800087a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800087c:	4b0d      	ldr	r3, [pc, #52]	; (80008b4 <MX_CAN1_Init+0x64>)
 800087e:	2200      	movs	r2, #0
 8000880:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000882:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <MX_CAN1_Init+0x64>)
 8000884:	2200      	movs	r2, #0
 8000886:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000888:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <MX_CAN1_Init+0x64>)
 800088a:	2200      	movs	r2, #0
 800088c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800088e:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_CAN1_Init+0x64>)
 8000890:	2200      	movs	r2, #0
 8000892:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000894:	4b07      	ldr	r3, [pc, #28]	; (80008b4 <MX_CAN1_Init+0x64>)
 8000896:	2200      	movs	r2, #0
 8000898:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800089a:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <MX_CAN1_Init+0x64>)
 800089c:	2200      	movs	r2, #0
 800089e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80008a0:	4804      	ldr	r0, [pc, #16]	; (80008b4 <MX_CAN1_Init+0x64>)
 80008a2:	f001 f965 	bl	8001b70 <HAL_CAN_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80008ac:	f000 fa22 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80008b0:	bf00      	nop
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	200043b8 	.word	0x200043b8
 80008b8:	40006400 	.word	0x40006400

080008bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008c0:	4b12      	ldr	r3, [pc, #72]	; (800090c <MX_I2C1_Init+0x50>)
 80008c2:	4a13      	ldr	r2, [pc, #76]	; (8000910 <MX_I2C1_Init+0x54>)
 80008c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008c6:	4b11      	ldr	r3, [pc, #68]	; (800090c <MX_I2C1_Init+0x50>)
 80008c8:	4a12      	ldr	r2, [pc, #72]	; (8000914 <MX_I2C1_Init+0x58>)
 80008ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008cc:	4b0f      	ldr	r3, [pc, #60]	; (800090c <MX_I2C1_Init+0x50>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <MX_I2C1_Init+0x50>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <MX_I2C1_Init+0x50>)
 80008da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008e0:	4b0a      	ldr	r3, [pc, #40]	; (800090c <MX_I2C1_Init+0x50>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008e6:	4b09      	ldr	r3, [pc, #36]	; (800090c <MX_I2C1_Init+0x50>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ec:	4b07      	ldr	r3, [pc, #28]	; (800090c <MX_I2C1_Init+0x50>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <MX_I2C1_Init+0x50>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008f8:	4804      	ldr	r0, [pc, #16]	; (800090c <MX_I2C1_Init+0x50>)
 80008fa:	f003 ff5f 	bl	80047bc <HAL_I2C_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000904:	f000 f9f6 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20004110 	.word	0x20004110
 8000910:	40005400 	.word	0x40005400
 8000914:	000186a0 	.word	0x000186a0

08000918 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800091c:	4b13      	ldr	r3, [pc, #76]	; (800096c <MX_I2S3_Init+0x54>)
 800091e:	4a14      	ldr	r2, [pc, #80]	; (8000970 <MX_I2S3_Init+0x58>)
 8000920:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000922:	4b12      	ldr	r3, [pc, #72]	; (800096c <MX_I2S3_Init+0x54>)
 8000924:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000928:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800092a:	4b10      	ldr	r3, [pc, #64]	; (800096c <MX_I2S3_Init+0x54>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000930:	4b0e      	ldr	r3, [pc, #56]	; (800096c <MX_I2S3_Init+0x54>)
 8000932:	2200      	movs	r2, #0
 8000934:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000936:	4b0d      	ldr	r3, [pc, #52]	; (800096c <MX_I2S3_Init+0x54>)
 8000938:	f44f 7200 	mov.w	r2, #512	; 0x200
 800093c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <MX_I2S3_Init+0x54>)
 8000940:	4a0c      	ldr	r2, [pc, #48]	; (8000974 <MX_I2S3_Init+0x5c>)
 8000942:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000944:	4b09      	ldr	r3, [pc, #36]	; (800096c <MX_I2S3_Init+0x54>)
 8000946:	2200      	movs	r2, #0
 8000948:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800094a:	4b08      	ldr	r3, [pc, #32]	; (800096c <MX_I2S3_Init+0x54>)
 800094c:	2200      	movs	r2, #0
 800094e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000950:	4b06      	ldr	r3, [pc, #24]	; (800096c <MX_I2S3_Init+0x54>)
 8000952:	2200      	movs	r2, #0
 8000954:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000956:	4805      	ldr	r0, [pc, #20]	; (800096c <MX_I2S3_Init+0x54>)
 8000958:	f004 f874 	bl	8004a44 <HAL_I2S_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000962:	f000 f9c7 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	200043e0 	.word	0x200043e0
 8000970:	40003c00 	.word	0x40003c00
 8000974:	00017700 	.word	0x00017700

08000978 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800097c:	4b17      	ldr	r3, [pc, #92]	; (80009dc <MX_SPI1_Init+0x64>)
 800097e:	4a18      	ldr	r2, [pc, #96]	; (80009e0 <MX_SPI1_Init+0x68>)
 8000980:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000982:	4b16      	ldr	r3, [pc, #88]	; (80009dc <MX_SPI1_Init+0x64>)
 8000984:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000988:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800098a:	4b14      	ldr	r3, [pc, #80]	; (80009dc <MX_SPI1_Init+0x64>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000990:	4b12      	ldr	r3, [pc, #72]	; (80009dc <MX_SPI1_Init+0x64>)
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000996:	4b11      	ldr	r3, [pc, #68]	; (80009dc <MX_SPI1_Init+0x64>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800099c:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <MX_SPI1_Init+0x64>)
 800099e:	2200      	movs	r2, #0
 80009a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <MX_SPI1_Init+0x64>)
 80009a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009aa:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <MX_SPI1_Init+0x64>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009b0:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <MX_SPI1_Init+0x64>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009b6:	4b09      	ldr	r3, [pc, #36]	; (80009dc <MX_SPI1_Init+0x64>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009bc:	4b07      	ldr	r3, [pc, #28]	; (80009dc <MX_SPI1_Init+0x64>)
 80009be:	2200      	movs	r2, #0
 80009c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80009c2:	4b06      	ldr	r3, [pc, #24]	; (80009dc <MX_SPI1_Init+0x64>)
 80009c4:	220a      	movs	r2, #10
 80009c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009c8:	4804      	ldr	r0, [pc, #16]	; (80009dc <MX_SPI1_Init+0x64>)
 80009ca:	f005 fac1 	bl	8005f50 <HAL_SPI_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009d4:	f000 f98e 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	200042bc 	.word	0x200042bc
 80009e0:	40013000 	.word	0x40013000

080009e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009e8:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MX_USART2_UART_Init+0x4c>)
 80009ea:	4a12      	ldr	r2, [pc, #72]	; (8000a34 <MX_USART2_UART_Init+0x50>)
 80009ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 256000;
 80009ee:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <MX_USART2_UART_Init+0x4c>)
 80009f0:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
 80009f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <MX_USART2_UART_Init+0x4c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <MX_USART2_UART_Init+0x4c>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <MX_USART2_UART_Init+0x4c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a08:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <MX_USART2_UART_Init+0x4c>)
 8000a0a:	220c      	movs	r2, #12
 8000a0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0e:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <MX_USART2_UART_Init+0x4c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <MX_USART2_UART_Init+0x4c>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a1a:	4805      	ldr	r0, [pc, #20]	; (8000a30 <MX_USART2_UART_Init+0x4c>)
 8000a1c:	f005 fdce 	bl	80065bc <HAL_UART_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a26:	f000 f965 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20004314 	.word	0x20004314
 8000a34:	40004400 	.word	0x40004400

08000a38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <MX_DMA_Init+0x5c>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a13      	ldr	r2, [pc, #76]	; (8000a94 <MX_DMA_Init+0x5c>)
 8000a48:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <MX_DMA_Init+0x5c>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2105      	movs	r1, #5
 8000a5e:	2038      	movs	r0, #56	; 0x38
 8000a60:	f001 fc72 	bl	8002348 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a64:	2038      	movs	r0, #56	; 0x38
 8000a66:	f001 fc8b 	bl	8002380 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2105      	movs	r1, #5
 8000a6e:	2039      	movs	r0, #57	; 0x39
 8000a70:	f001 fc6a 	bl	8002348 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000a74:	2039      	movs	r0, #57	; 0x39
 8000a76:	f001 fc83 	bl	8002380 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2105      	movs	r1, #5
 8000a7e:	203a      	movs	r0, #58	; 0x3a
 8000a80:	f001 fc62 	bl	8002348 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000a84:	203a      	movs	r0, #58	; 0x3a
 8000a86:	f001 fc7b 	bl	8002380 <HAL_NVIC_EnableIRQ>

}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40023800 	.word	0x40023800

08000a98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08c      	sub	sp, #48	; 0x30
 8000a9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9e:	f107 031c 	add.w	r3, r7, #28
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
 8000aa8:	609a      	str	r2, [r3, #8]
 8000aaa:	60da      	str	r2, [r3, #12]
 8000aac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61bb      	str	r3, [r7, #24]
 8000ab2:	4b78      	ldr	r3, [pc, #480]	; (8000c94 <MX_GPIO_Init+0x1fc>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a77      	ldr	r2, [pc, #476]	; (8000c94 <MX_GPIO_Init+0x1fc>)
 8000ab8:	f043 0310 	orr.w	r3, r3, #16
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b75      	ldr	r3, [pc, #468]	; (8000c94 <MX_GPIO_Init+0x1fc>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0310 	and.w	r3, r3, #16
 8000ac6:	61bb      	str	r3, [r7, #24]
 8000ac8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	617b      	str	r3, [r7, #20]
 8000ace:	4b71      	ldr	r3, [pc, #452]	; (8000c94 <MX_GPIO_Init+0x1fc>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a70      	ldr	r2, [pc, #448]	; (8000c94 <MX_GPIO_Init+0x1fc>)
 8000ad4:	f043 0304 	orr.w	r3, r3, #4
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b6e      	ldr	r3, [pc, #440]	; (8000c94 <MX_GPIO_Init+0x1fc>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0304 	and.w	r3, r3, #4
 8000ae2:	617b      	str	r3, [r7, #20]
 8000ae4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]
 8000aea:	4b6a      	ldr	r3, [pc, #424]	; (8000c94 <MX_GPIO_Init+0x1fc>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a69      	ldr	r2, [pc, #420]	; (8000c94 <MX_GPIO_Init+0x1fc>)
 8000af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	4b67      	ldr	r3, [pc, #412]	; (8000c94 <MX_GPIO_Init+0x1fc>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000afe:	613b      	str	r3, [r7, #16]
 8000b00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	4b63      	ldr	r3, [pc, #396]	; (8000c94 <MX_GPIO_Init+0x1fc>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	4a62      	ldr	r2, [pc, #392]	; (8000c94 <MX_GPIO_Init+0x1fc>)
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	6313      	str	r3, [r2, #48]	; 0x30
 8000b12:	4b60      	ldr	r3, [pc, #384]	; (8000c94 <MX_GPIO_Init+0x1fc>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60bb      	str	r3, [r7, #8]
 8000b22:	4b5c      	ldr	r3, [pc, #368]	; (8000c94 <MX_GPIO_Init+0x1fc>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a5b      	ldr	r2, [pc, #364]	; (8000c94 <MX_GPIO_Init+0x1fc>)
 8000b28:	f043 0302 	orr.w	r3, r3, #2
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b59      	ldr	r3, [pc, #356]	; (8000c94 <MX_GPIO_Init+0x1fc>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f003 0302 	and.w	r3, r3, #2
 8000b36:	60bb      	str	r3, [r7, #8]
 8000b38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	607b      	str	r3, [r7, #4]
 8000b3e:	4b55      	ldr	r3, [pc, #340]	; (8000c94 <MX_GPIO_Init+0x1fc>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a54      	ldr	r2, [pc, #336]	; (8000c94 <MX_GPIO_Init+0x1fc>)
 8000b44:	f043 0308 	orr.w	r3, r3, #8
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b52      	ldr	r3, [pc, #328]	; (8000c94 <MX_GPIO_Init+0x1fc>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0308 	and.w	r3, r3, #8
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2108      	movs	r1, #8
 8000b5a:	484f      	ldr	r0, [pc, #316]	; (8000c98 <MX_GPIO_Init+0x200>)
 8000b5c:	f002 f8a4 	bl	8002ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000b60:	2201      	movs	r2, #1
 8000b62:	2101      	movs	r1, #1
 8000b64:	484d      	ldr	r0, [pc, #308]	; (8000c9c <MX_GPIO_Init+0x204>)
 8000b66:	f002 f89f 	bl	8002ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000b70:	484b      	ldr	r0, [pc, #300]	; (8000ca0 <MX_GPIO_Init+0x208>)
 8000b72:	f002 f899 	bl	8002ca8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b76:	2308      	movs	r3, #8
 8000b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b82:	2300      	movs	r3, #0
 8000b84:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b86:	f107 031c 	add.w	r3, r7, #28
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4842      	ldr	r0, [pc, #264]	; (8000c98 <MX_GPIO_Init+0x200>)
 8000b8e:	f001 feef 	bl	8002970 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000b92:	2301      	movs	r3, #1
 8000b94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b96:	2301      	movs	r3, #1
 8000b98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ba2:	f107 031c 	add.w	r3, r7, #28
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	483c      	ldr	r0, [pc, #240]	; (8000c9c <MX_GPIO_Init+0x204>)
 8000baa:	f001 fee1 	bl	8002970 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bba:	f107 031c 	add.w	r3, r7, #28
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4836      	ldr	r0, [pc, #216]	; (8000c9c <MX_GPIO_Init+0x204>)
 8000bc2:	f001 fed5 	bl	8002970 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000bc6:	2308      	movs	r3, #8
 8000bc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bd6:	2305      	movs	r3, #5
 8000bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000bda:	f107 031c 	add.w	r3, r7, #28
 8000bde:	4619      	mov	r1, r3
 8000be0:	482e      	ldr	r0, [pc, #184]	; (8000c9c <MX_GPIO_Init+0x204>)
 8000be2:	f001 fec5 	bl	8002970 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000be6:	2301      	movs	r3, #1
 8000be8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bea:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000bee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bf4:	f107 031c 	add.w	r3, r7, #28
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	482a      	ldr	r0, [pc, #168]	; (8000ca4 <MX_GPIO_Init+0x20c>)
 8000bfc:	f001 feb8 	bl	8002970 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c00:	2304      	movs	r3, #4
 8000c02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c04:	2300      	movs	r3, #0
 8000c06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0c:	f107 031c 	add.w	r3, r7, #28
 8000c10:	4619      	mov	r1, r3
 8000c12:	4825      	ldr	r0, [pc, #148]	; (8000ca8 <MX_GPIO_Init+0x210>)
 8000c14:	f001 feac 	bl	8002970 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000c18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c26:	2300      	movs	r3, #0
 8000c28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c2a:	2305      	movs	r3, #5
 8000c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000c2e:	f107 031c 	add.w	r3, r7, #28
 8000c32:	4619      	mov	r1, r3
 8000c34:	481c      	ldr	r0, [pc, #112]	; (8000ca8 <MX_GPIO_Init+0x210>)
 8000c36:	f001 fe9b 	bl	8002970 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000c3a:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000c3e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c40:	2301      	movs	r3, #1
 8000c42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c4c:	f107 031c 	add.w	r3, r7, #28
 8000c50:	4619      	mov	r1, r3
 8000c52:	4813      	ldr	r0, [pc, #76]	; (8000ca0 <MX_GPIO_Init+0x208>)
 8000c54:	f001 fe8c 	bl	8002970 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000c58:	2320      	movs	r3, #32
 8000c5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c64:	f107 031c 	add.w	r3, r7, #28
 8000c68:	4619      	mov	r1, r3
 8000c6a:	480d      	ldr	r0, [pc, #52]	; (8000ca0 <MX_GPIO_Init+0x208>)
 8000c6c:	f001 fe80 	bl	8002970 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000c70:	2302      	movs	r3, #2
 8000c72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c74:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000c7e:	f107 031c 	add.w	r3, r7, #28
 8000c82:	4619      	mov	r1, r3
 8000c84:	4804      	ldr	r0, [pc, #16]	; (8000c98 <MX_GPIO_Init+0x200>)
 8000c86:	f001 fe73 	bl	8002970 <HAL_GPIO_Init>

}
 8000c8a:	bf00      	nop
 8000c8c:	3730      	adds	r7, #48	; 0x30
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40021000 	.word	0x40021000
 8000c9c:	40020800 	.word	0x40020800
 8000ca0:	40020c00 	.word	0x40020c00
 8000ca4:	40020000 	.word	0x40020000
 8000ca8:	40020400 	.word	0x40020400

08000cac <startLEDTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startLEDTask */
void startLEDTask(void const * argument)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000cb4:	f00b fa3a 	bl	800c12c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000cb8:	2001      	movs	r0, #1
 8000cba:	f009 f81c 	bl	8009cf6 <osDelay>
 8000cbe:	e7fb      	b.n	8000cb8 <startLEDTask+0xc>

08000cc0 <startUART_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startUART_Task */
void startUART_Task(void const * argument)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startUART_Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000cc8:	2001      	movs	r0, #1
 8000cca:	f009 f814 	bl	8009cf6 <osDelay>
 8000cce:	e7fb      	b.n	8000cc8 <startUART_Task+0x8>

08000cd0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a04      	ldr	r2, [pc, #16]	; (8000cf0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d101      	bne.n	8000ce6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ce2:	f000 fc9f 	bl	8001624 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40010000 	.word	0x40010000

08000cf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf8:	b672      	cpsid	i
}
 8000cfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <Error_Handler+0x8>
	...

08000d00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <HAL_MspInit+0x54>)
 8000d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0e:	4a11      	ldr	r2, [pc, #68]	; (8000d54 <HAL_MspInit+0x54>)
 8000d10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d14:	6453      	str	r3, [r2, #68]	; 0x44
 8000d16:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <HAL_MspInit+0x54>)
 8000d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	603b      	str	r3, [r7, #0]
 8000d26:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <HAL_MspInit+0x54>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <HAL_MspInit+0x54>)
 8000d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d30:	6413      	str	r3, [r2, #64]	; 0x40
 8000d32:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <HAL_MspInit+0x54>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d3a:	603b      	str	r3, [r7, #0]
 8000d3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	210f      	movs	r1, #15
 8000d42:	f06f 0001 	mvn.w	r0, #1
 8000d46:	f001 faff 	bl	8002348 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40023800 	.word	0x40023800

08000d58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08e      	sub	sp, #56	; 0x38
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a9b      	ldr	r2, [pc, #620]	; (8000fe4 <HAL_ADC_MspInit+0x28c>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d161      	bne.n	8000e3e <HAL_ADC_MspInit+0xe6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	623b      	str	r3, [r7, #32]
 8000d7e:	4b9a      	ldr	r3, [pc, #616]	; (8000fe8 <HAL_ADC_MspInit+0x290>)
 8000d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d82:	4a99      	ldr	r2, [pc, #612]	; (8000fe8 <HAL_ADC_MspInit+0x290>)
 8000d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d88:	6453      	str	r3, [r2, #68]	; 0x44
 8000d8a:	4b97      	ldr	r3, [pc, #604]	; (8000fe8 <HAL_ADC_MspInit+0x290>)
 8000d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d92:	623b      	str	r3, [r7, #32]
 8000d94:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	61fb      	str	r3, [r7, #28]
 8000d9a:	4b93      	ldr	r3, [pc, #588]	; (8000fe8 <HAL_ADC_MspInit+0x290>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	4a92      	ldr	r2, [pc, #584]	; (8000fe8 <HAL_ADC_MspInit+0x290>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	6313      	str	r3, [r2, #48]	; 0x30
 8000da6:	4b90      	ldr	r3, [pc, #576]	; (8000fe8 <HAL_ADC_MspInit+0x290>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	61fb      	str	r3, [r7, #28]
 8000db0:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000db2:	2302      	movs	r3, #2
 8000db4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000db6:	2303      	movs	r3, #3
 8000db8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4889      	ldr	r0, [pc, #548]	; (8000fec <HAL_ADC_MspInit+0x294>)
 8000dc6:	f001 fdd3 	bl	8002970 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000dca:	4b89      	ldr	r3, [pc, #548]	; (8000ff0 <HAL_ADC_MspInit+0x298>)
 8000dcc:	4a89      	ldr	r2, [pc, #548]	; (8000ff4 <HAL_ADC_MspInit+0x29c>)
 8000dce:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000dd0:	4b87      	ldr	r3, [pc, #540]	; (8000ff0 <HAL_ADC_MspInit+0x298>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dd6:	4b86      	ldr	r3, [pc, #536]	; (8000ff0 <HAL_ADC_MspInit+0x298>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ddc:	4b84      	ldr	r3, [pc, #528]	; (8000ff0 <HAL_ADC_MspInit+0x298>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000de2:	4b83      	ldr	r3, [pc, #524]	; (8000ff0 <HAL_ADC_MspInit+0x298>)
 8000de4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000de8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000dea:	4b81      	ldr	r3, [pc, #516]	; (8000ff0 <HAL_ADC_MspInit+0x298>)
 8000dec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000df0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000df2:	4b7f      	ldr	r3, [pc, #508]	; (8000ff0 <HAL_ADC_MspInit+0x298>)
 8000df4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000df8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000dfa:	4b7d      	ldr	r3, [pc, #500]	; (8000ff0 <HAL_ADC_MspInit+0x298>)
 8000dfc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e00:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e02:	4b7b      	ldr	r3, [pc, #492]	; (8000ff0 <HAL_ADC_MspInit+0x298>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000e08:	4b79      	ldr	r3, [pc, #484]	; (8000ff0 <HAL_ADC_MspInit+0x298>)
 8000e0a:	2204      	movs	r2, #4
 8000e0c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000e0e:	4b78      	ldr	r3, [pc, #480]	; (8000ff0 <HAL_ADC_MspInit+0x298>)
 8000e10:	2203      	movs	r2, #3
 8000e12:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8000e14:	4b76      	ldr	r3, [pc, #472]	; (8000ff0 <HAL_ADC_MspInit+0x298>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000e1a:	4b75      	ldr	r3, [pc, #468]	; (8000ff0 <HAL_ADC_MspInit+0x298>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e20:	4873      	ldr	r0, [pc, #460]	; (8000ff0 <HAL_ADC_MspInit+0x298>)
 8000e22:	f001 fabb 	bl	800239c <HAL_DMA_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <HAL_ADC_MspInit+0xd8>
    {
      Error_Handler();
 8000e2c:	f7ff ff62 	bl	8000cf4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	4a6f      	ldr	r2, [pc, #444]	; (8000ff0 <HAL_ADC_MspInit+0x298>)
 8000e34:	639a      	str	r2, [r3, #56]	; 0x38
 8000e36:	4a6e      	ldr	r2, [pc, #440]	; (8000ff0 <HAL_ADC_MspInit+0x298>)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000e3c:	e0ce      	b.n	8000fdc <HAL_ADC_MspInit+0x284>
  else if(hadc->Instance==ADC2)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a6d      	ldr	r2, [pc, #436]	; (8000ff8 <HAL_ADC_MspInit+0x2a0>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d162      	bne.n	8000f0e <HAL_ADC_MspInit+0x1b6>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000e48:	2300      	movs	r3, #0
 8000e4a:	61bb      	str	r3, [r7, #24]
 8000e4c:	4b66      	ldr	r3, [pc, #408]	; (8000fe8 <HAL_ADC_MspInit+0x290>)
 8000e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e50:	4a65      	ldr	r2, [pc, #404]	; (8000fe8 <HAL_ADC_MspInit+0x290>)
 8000e52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e56:	6453      	str	r3, [r2, #68]	; 0x44
 8000e58:	4b63      	ldr	r3, [pc, #396]	; (8000fe8 <HAL_ADC_MspInit+0x290>)
 8000e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e60:	61bb      	str	r3, [r7, #24]
 8000e62:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]
 8000e68:	4b5f      	ldr	r3, [pc, #380]	; (8000fe8 <HAL_ADC_MspInit+0x290>)
 8000e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6c:	4a5e      	ldr	r2, [pc, #376]	; (8000fe8 <HAL_ADC_MspInit+0x290>)
 8000e6e:	f043 0301 	orr.w	r3, r3, #1
 8000e72:	6313      	str	r3, [r2, #48]	; 0x30
 8000e74:	4b5c      	ldr	r3, [pc, #368]	; (8000fe8 <HAL_ADC_MspInit+0x290>)
 8000e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e78:	f003 0301 	and.w	r3, r3, #1
 8000e7c:	617b      	str	r3, [r7, #20]
 8000e7e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e80:	2308      	movs	r3, #8
 8000e82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e84:	2303      	movs	r3, #3
 8000e86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e90:	4619      	mov	r1, r3
 8000e92:	4856      	ldr	r0, [pc, #344]	; (8000fec <HAL_ADC_MspInit+0x294>)
 8000e94:	f001 fd6c 	bl	8002970 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8000e98:	4b58      	ldr	r3, [pc, #352]	; (8000ffc <HAL_ADC_MspInit+0x2a4>)
 8000e9a:	4a59      	ldr	r2, [pc, #356]	; (8001000 <HAL_ADC_MspInit+0x2a8>)
 8000e9c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8000e9e:	4b57      	ldr	r3, [pc, #348]	; (8000ffc <HAL_ADC_MspInit+0x2a4>)
 8000ea0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000ea4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ea6:	4b55      	ldr	r3, [pc, #340]	; (8000ffc <HAL_ADC_MspInit+0x2a4>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eac:	4b53      	ldr	r3, [pc, #332]	; (8000ffc <HAL_ADC_MspInit+0x2a4>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000eb2:	4b52      	ldr	r3, [pc, #328]	; (8000ffc <HAL_ADC_MspInit+0x2a4>)
 8000eb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eb8:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000eba:	4b50      	ldr	r3, [pc, #320]	; (8000ffc <HAL_ADC_MspInit+0x2a4>)
 8000ebc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ec0:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ec2:	4b4e      	ldr	r3, [pc, #312]	; (8000ffc <HAL_ADC_MspInit+0x2a4>)
 8000ec4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ec8:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000eca:	4b4c      	ldr	r3, [pc, #304]	; (8000ffc <HAL_ADC_MspInit+0x2a4>)
 8000ecc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ed0:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000ed2:	4b4a      	ldr	r3, [pc, #296]	; (8000ffc <HAL_ADC_MspInit+0x2a4>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000ed8:	4b48      	ldr	r3, [pc, #288]	; (8000ffc <HAL_ADC_MspInit+0x2a4>)
 8000eda:	2204      	movs	r2, #4
 8000edc:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000ede:	4b47      	ldr	r3, [pc, #284]	; (8000ffc <HAL_ADC_MspInit+0x2a4>)
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc2.Init.MemBurst = DMA_MBURST_SINGLE;
 8000ee4:	4b45      	ldr	r3, [pc, #276]	; (8000ffc <HAL_ADC_MspInit+0x2a4>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000eea:	4b44      	ldr	r3, [pc, #272]	; (8000ffc <HAL_ADC_MspInit+0x2a4>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000ef0:	4842      	ldr	r0, [pc, #264]	; (8000ffc <HAL_ADC_MspInit+0x2a4>)
 8000ef2:	f001 fa53 	bl	800239c <HAL_DMA_Init>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <HAL_ADC_MspInit+0x1a8>
      Error_Handler();
 8000efc:	f7ff fefa 	bl	8000cf4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4a3e      	ldr	r2, [pc, #248]	; (8000ffc <HAL_ADC_MspInit+0x2a4>)
 8000f04:	639a      	str	r2, [r3, #56]	; 0x38
 8000f06:	4a3d      	ldr	r2, [pc, #244]	; (8000ffc <HAL_ADC_MspInit+0x2a4>)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000f0c:	e066      	b.n	8000fdc <HAL_ADC_MspInit+0x284>
  else if(hadc->Instance==ADC3)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a3c      	ldr	r2, [pc, #240]	; (8001004 <HAL_ADC_MspInit+0x2ac>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d161      	bne.n	8000fdc <HAL_ADC_MspInit+0x284>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000f18:	2300      	movs	r3, #0
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	4b32      	ldr	r3, [pc, #200]	; (8000fe8 <HAL_ADC_MspInit+0x290>)
 8000f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f20:	4a31      	ldr	r2, [pc, #196]	; (8000fe8 <HAL_ADC_MspInit+0x290>)
 8000f22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f26:	6453      	str	r3, [r2, #68]	; 0x44
 8000f28:	4b2f      	ldr	r3, [pc, #188]	; (8000fe8 <HAL_ADC_MspInit+0x290>)
 8000f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f30:	613b      	str	r3, [r7, #16]
 8000f32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f34:	2300      	movs	r3, #0
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	4b2b      	ldr	r3, [pc, #172]	; (8000fe8 <HAL_ADC_MspInit+0x290>)
 8000f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3c:	4a2a      	ldr	r2, [pc, #168]	; (8000fe8 <HAL_ADC_MspInit+0x290>)
 8000f3e:	f043 0304 	orr.w	r3, r3, #4
 8000f42:	6313      	str	r3, [r2, #48]	; 0x30
 8000f44:	4b28      	ldr	r3, [pc, #160]	; (8000fe8 <HAL_ADC_MspInit+0x290>)
 8000f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f48:	f003 0304 	and.w	r3, r3, #4
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f50:	2304      	movs	r3, #4
 8000f52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f54:	2303      	movs	r3, #3
 8000f56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f60:	4619      	mov	r1, r3
 8000f62:	4829      	ldr	r0, [pc, #164]	; (8001008 <HAL_ADC_MspInit+0x2b0>)
 8000f64:	f001 fd04 	bl	8002970 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8000f68:	4b28      	ldr	r3, [pc, #160]	; (800100c <HAL_ADC_MspInit+0x2b4>)
 8000f6a:	4a29      	ldr	r2, [pc, #164]	; (8001010 <HAL_ADC_MspInit+0x2b8>)
 8000f6c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8000f6e:	4b27      	ldr	r3, [pc, #156]	; (800100c <HAL_ADC_MspInit+0x2b4>)
 8000f70:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000f74:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f76:	4b25      	ldr	r3, [pc, #148]	; (800100c <HAL_ADC_MspInit+0x2b4>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f7c:	4b23      	ldr	r3, [pc, #140]	; (800100c <HAL_ADC_MspInit+0x2b4>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000f82:	4b22      	ldr	r3, [pc, #136]	; (800100c <HAL_ADC_MspInit+0x2b4>)
 8000f84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f88:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f8a:	4b20      	ldr	r3, [pc, #128]	; (800100c <HAL_ADC_MspInit+0x2b4>)
 8000f8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f90:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f92:	4b1e      	ldr	r3, [pc, #120]	; (800100c <HAL_ADC_MspInit+0x2b4>)
 8000f94:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f98:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000f9a:	4b1c      	ldr	r3, [pc, #112]	; (800100c <HAL_ADC_MspInit+0x2b4>)
 8000f9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fa0:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000fa2:	4b1a      	ldr	r3, [pc, #104]	; (800100c <HAL_ADC_MspInit+0x2b4>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000fa8:	4b18      	ldr	r3, [pc, #96]	; (800100c <HAL_ADC_MspInit+0x2b4>)
 8000faa:	2204      	movs	r2, #4
 8000fac:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000fae:	4b17      	ldr	r3, [pc, #92]	; (800100c <HAL_ADC_MspInit+0x2b4>)
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc3.Init.MemBurst = DMA_MBURST_SINGLE;
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <HAL_ADC_MspInit+0x2b4>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000fba:	4b14      	ldr	r3, [pc, #80]	; (800100c <HAL_ADC_MspInit+0x2b4>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000fc0:	4812      	ldr	r0, [pc, #72]	; (800100c <HAL_ADC_MspInit+0x2b4>)
 8000fc2:	f001 f9eb 	bl	800239c <HAL_DMA_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <HAL_ADC_MspInit+0x278>
      Error_Handler();
 8000fcc:	f7ff fe92 	bl	8000cf4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4a0e      	ldr	r2, [pc, #56]	; (800100c <HAL_ADC_MspInit+0x2b4>)
 8000fd4:	639a      	str	r2, [r3, #56]	; 0x38
 8000fd6:	4a0d      	ldr	r2, [pc, #52]	; (800100c <HAL_ADC_MspInit+0x2b4>)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000fdc:	bf00      	nop
 8000fde:	3738      	adds	r7, #56	; 0x38
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40012000 	.word	0x40012000
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	40020000 	.word	0x40020000
 8000ff0:	2000425c 	.word	0x2000425c
 8000ff4:	40026410 	.word	0x40026410
 8000ff8:	40012100 	.word	0x40012100
 8000ffc:	20004358 	.word	0x20004358
 8001000:	40026440 	.word	0x40026440
 8001004:	40012200 	.word	0x40012200
 8001008:	40020800 	.word	0x40020800
 800100c:	20004168 	.word	0x20004168
 8001010:	40026428 	.word	0x40026428

08001014 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08a      	sub	sp, #40	; 0x28
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101c:	f107 0314 	add.w	r3, r7, #20
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a1d      	ldr	r2, [pc, #116]	; (80010a8 <HAL_CAN_MspInit+0x94>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d133      	bne.n	800109e <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
 800103a:	4b1c      	ldr	r3, [pc, #112]	; (80010ac <HAL_CAN_MspInit+0x98>)
 800103c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103e:	4a1b      	ldr	r2, [pc, #108]	; (80010ac <HAL_CAN_MspInit+0x98>)
 8001040:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001044:	6413      	str	r3, [r2, #64]	; 0x40
 8001046:	4b19      	ldr	r3, [pc, #100]	; (80010ac <HAL_CAN_MspInit+0x98>)
 8001048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800104e:	613b      	str	r3, [r7, #16]
 8001050:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	4b15      	ldr	r3, [pc, #84]	; (80010ac <HAL_CAN_MspInit+0x98>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	4a14      	ldr	r2, [pc, #80]	; (80010ac <HAL_CAN_MspInit+0x98>)
 800105c:	f043 0308 	orr.w	r3, r3, #8
 8001060:	6313      	str	r3, [r2, #48]	; 0x30
 8001062:	4b12      	ldr	r3, [pc, #72]	; (80010ac <HAL_CAN_MspInit+0x98>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	f003 0308 	and.w	r3, r3, #8
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800106e:	2303      	movs	r3, #3
 8001070:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001072:	2302      	movs	r3, #2
 8001074:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107a:	2303      	movs	r3, #3
 800107c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800107e:	2309      	movs	r3, #9
 8001080:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001082:	f107 0314 	add.w	r3, r7, #20
 8001086:	4619      	mov	r1, r3
 8001088:	4809      	ldr	r0, [pc, #36]	; (80010b0 <HAL_CAN_MspInit+0x9c>)
 800108a:	f001 fc71 	bl	8002970 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800108e:	2200      	movs	r2, #0
 8001090:	2105      	movs	r1, #5
 8001092:	2014      	movs	r0, #20
 8001094:	f001 f958 	bl	8002348 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001098:	2014      	movs	r0, #20
 800109a:	f001 f971 	bl	8002380 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800109e:	bf00      	nop
 80010a0:	3728      	adds	r7, #40	; 0x28
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40006400 	.word	0x40006400
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40020c00 	.word	0x40020c00

080010b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08a      	sub	sp, #40	; 0x28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a19      	ldr	r2, [pc, #100]	; (8001138 <HAL_I2C_MspInit+0x84>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d12c      	bne.n	8001130 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
 80010da:	4b18      	ldr	r3, [pc, #96]	; (800113c <HAL_I2C_MspInit+0x88>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	4a17      	ldr	r2, [pc, #92]	; (800113c <HAL_I2C_MspInit+0x88>)
 80010e0:	f043 0302 	orr.w	r3, r3, #2
 80010e4:	6313      	str	r3, [r2, #48]	; 0x30
 80010e6:	4b15      	ldr	r3, [pc, #84]	; (800113c <HAL_I2C_MspInit+0x88>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80010f2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80010f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010f8:	2312      	movs	r3, #18
 80010fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010fc:	2301      	movs	r3, #1
 80010fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001100:	2300      	movs	r3, #0
 8001102:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001104:	2304      	movs	r3, #4
 8001106:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	4619      	mov	r1, r3
 800110e:	480c      	ldr	r0, [pc, #48]	; (8001140 <HAL_I2C_MspInit+0x8c>)
 8001110:	f001 fc2e 	bl	8002970 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001114:	2300      	movs	r3, #0
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	4b08      	ldr	r3, [pc, #32]	; (800113c <HAL_I2C_MspInit+0x88>)
 800111a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111c:	4a07      	ldr	r2, [pc, #28]	; (800113c <HAL_I2C_MspInit+0x88>)
 800111e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001122:	6413      	str	r3, [r2, #64]	; 0x40
 8001124:	4b05      	ldr	r3, [pc, #20]	; (800113c <HAL_I2C_MspInit+0x88>)
 8001126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001128:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001130:	bf00      	nop
 8001132:	3728      	adds	r7, #40	; 0x28
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40005400 	.word	0x40005400
 800113c:	40023800 	.word	0x40023800
 8001140:	40020400 	.word	0x40020400

08001144 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08e      	sub	sp, #56	; 0x38
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a31      	ldr	r2, [pc, #196]	; (8001234 <HAL_I2S_MspInit+0xf0>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d15a      	bne.n	800122a <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001174:	2301      	movs	r3, #1
 8001176:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001178:	23c0      	movs	r3, #192	; 0xc0
 800117a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800117c:	2302      	movs	r3, #2
 800117e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001180:	f107 0314 	add.w	r3, r7, #20
 8001184:	4618      	mov	r0, r3
 8001186:	f004 fda3 	bl	8005cd0 <HAL_RCCEx_PeriphCLKConfig>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001190:	f7ff fdb0 	bl	8000cf4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001194:	2300      	movs	r3, #0
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	4b27      	ldr	r3, [pc, #156]	; (8001238 <HAL_I2S_MspInit+0xf4>)
 800119a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119c:	4a26      	ldr	r2, [pc, #152]	; (8001238 <HAL_I2S_MspInit+0xf4>)
 800119e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011a2:	6413      	str	r3, [r2, #64]	; 0x40
 80011a4:	4b24      	ldr	r3, [pc, #144]	; (8001238 <HAL_I2S_MspInit+0xf4>)
 80011a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011ac:	613b      	str	r3, [r7, #16]
 80011ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b0:	2300      	movs	r3, #0
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	4b20      	ldr	r3, [pc, #128]	; (8001238 <HAL_I2S_MspInit+0xf4>)
 80011b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b8:	4a1f      	ldr	r2, [pc, #124]	; (8001238 <HAL_I2S_MspInit+0xf4>)
 80011ba:	f043 0301 	orr.w	r3, r3, #1
 80011be:	6313      	str	r3, [r2, #48]	; 0x30
 80011c0:	4b1d      	ldr	r3, [pc, #116]	; (8001238 <HAL_I2S_MspInit+0xf4>)
 80011c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011cc:	2300      	movs	r3, #0
 80011ce:	60bb      	str	r3, [r7, #8]
 80011d0:	4b19      	ldr	r3, [pc, #100]	; (8001238 <HAL_I2S_MspInit+0xf4>)
 80011d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d4:	4a18      	ldr	r2, [pc, #96]	; (8001238 <HAL_I2S_MspInit+0xf4>)
 80011d6:	f043 0304 	orr.w	r3, r3, #4
 80011da:	6313      	str	r3, [r2, #48]	; 0x30
 80011dc:	4b16      	ldr	r3, [pc, #88]	; (8001238 <HAL_I2S_MspInit+0xf4>)
 80011de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e0:	f003 0304 	and.w	r3, r3, #4
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80011e8:	2310      	movs	r3, #16
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ec:	2302      	movs	r3, #2
 80011ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f4:	2300      	movs	r3, #0
 80011f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011f8:	2306      	movs	r3, #6
 80011fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80011fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001200:	4619      	mov	r1, r3
 8001202:	480e      	ldr	r0, [pc, #56]	; (800123c <HAL_I2S_MspInit+0xf8>)
 8001204:	f001 fbb4 	bl	8002970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001208:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800120c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120e:	2302      	movs	r3, #2
 8001210:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001216:	2300      	movs	r3, #0
 8001218:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800121a:	2306      	movs	r3, #6
 800121c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800121e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001222:	4619      	mov	r1, r3
 8001224:	4806      	ldr	r0, [pc, #24]	; (8001240 <HAL_I2S_MspInit+0xfc>)
 8001226:	f001 fba3 	bl	8002970 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800122a:	bf00      	nop
 800122c:	3738      	adds	r7, #56	; 0x38
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40003c00 	.word	0x40003c00
 8001238:	40023800 	.word	0x40023800
 800123c:	40020000 	.word	0x40020000
 8001240:	40020800 	.word	0x40020800

08001244 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08a      	sub	sp, #40	; 0x28
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a19      	ldr	r2, [pc, #100]	; (80012c8 <HAL_SPI_MspInit+0x84>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d12b      	bne.n	80012be <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	613b      	str	r3, [r7, #16]
 800126a:	4b18      	ldr	r3, [pc, #96]	; (80012cc <HAL_SPI_MspInit+0x88>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126e:	4a17      	ldr	r2, [pc, #92]	; (80012cc <HAL_SPI_MspInit+0x88>)
 8001270:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001274:	6453      	str	r3, [r2, #68]	; 0x44
 8001276:	4b15      	ldr	r3, [pc, #84]	; (80012cc <HAL_SPI_MspInit+0x88>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	4b11      	ldr	r3, [pc, #68]	; (80012cc <HAL_SPI_MspInit+0x88>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	4a10      	ldr	r2, [pc, #64]	; (80012cc <HAL_SPI_MspInit+0x88>)
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	6313      	str	r3, [r2, #48]	; 0x30
 8001292:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <HAL_SPI_MspInit+0x88>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800129e:	23e0      	movs	r3, #224	; 0xe0
 80012a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a2:	2302      	movs	r3, #2
 80012a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012aa:	2300      	movs	r3, #0
 80012ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012ae:	2305      	movs	r3, #5
 80012b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b2:	f107 0314 	add.w	r3, r7, #20
 80012b6:	4619      	mov	r1, r3
 80012b8:	4805      	ldr	r0, [pc, #20]	; (80012d0 <HAL_SPI_MspInit+0x8c>)
 80012ba:	f001 fb59 	bl	8002970 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80012be:	bf00      	nop
 80012c0:	3728      	adds	r7, #40	; 0x28
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40013000 	.word	0x40013000
 80012cc:	40023800 	.word	0x40023800
 80012d0:	40020000 	.word	0x40020000

080012d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08a      	sub	sp, #40	; 0x28
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
 80012ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a28      	ldr	r2, [pc, #160]	; (8001394 <HAL_UART_MspInit+0xc0>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d149      	bne.n	800138a <HAL_UART_MspInit+0xb6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	613b      	str	r3, [r7, #16]
 80012fa:	4b27      	ldr	r3, [pc, #156]	; (8001398 <HAL_UART_MspInit+0xc4>)
 80012fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fe:	4a26      	ldr	r2, [pc, #152]	; (8001398 <HAL_UART_MspInit+0xc4>)
 8001300:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001304:	6413      	str	r3, [r2, #64]	; 0x40
 8001306:	4b24      	ldr	r3, [pc, #144]	; (8001398 <HAL_UART_MspInit+0xc4>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	4b20      	ldr	r3, [pc, #128]	; (8001398 <HAL_UART_MspInit+0xc4>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a1f      	ldr	r2, [pc, #124]	; (8001398 <HAL_UART_MspInit+0xc4>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b1d      	ldr	r3, [pc, #116]	; (8001398 <HAL_UART_MspInit+0xc4>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	4b19      	ldr	r3, [pc, #100]	; (8001398 <HAL_UART_MspInit+0xc4>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	4a18      	ldr	r2, [pc, #96]	; (8001398 <HAL_UART_MspInit+0xc4>)
 8001338:	f043 0308 	orr.w	r3, r3, #8
 800133c:	6313      	str	r3, [r2, #48]	; 0x30
 800133e:	4b16      	ldr	r3, [pc, #88]	; (8001398 <HAL_UART_MspInit+0xc4>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0308 	and.w	r3, r3, #8
 8001346:	60bb      	str	r3, [r7, #8]
 8001348:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800134a:	2304      	movs	r3, #4
 800134c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134e:	2302      	movs	r3, #2
 8001350:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001356:	2303      	movs	r3, #3
 8001358:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800135a:	2307      	movs	r3, #7
 800135c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	4619      	mov	r1, r3
 8001364:	480d      	ldr	r0, [pc, #52]	; (800139c <HAL_UART_MspInit+0xc8>)
 8001366:	f001 fb03 	bl	8002970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800136a:	2340      	movs	r3, #64	; 0x40
 800136c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136e:	2302      	movs	r3, #2
 8001370:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001376:	2303      	movs	r3, #3
 8001378:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800137a:	2307      	movs	r3, #7
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800137e:	f107 0314 	add.w	r3, r7, #20
 8001382:	4619      	mov	r1, r3
 8001384:	4806      	ldr	r0, [pc, #24]	; (80013a0 <HAL_UART_MspInit+0xcc>)
 8001386:	f001 faf3 	bl	8002970 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800138a:	bf00      	nop
 800138c:	3728      	adds	r7, #40	; 0x28
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40004400 	.word	0x40004400
 8001398:	40023800 	.word	0x40023800
 800139c:	40020000 	.word	0x40020000
 80013a0:	40020c00 	.word	0x40020c00

080013a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08c      	sub	sp, #48	; 0x30
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80013b4:	2200      	movs	r2, #0
 80013b6:	6879      	ldr	r1, [r7, #4]
 80013b8:	2019      	movs	r0, #25
 80013ba:	f000 ffc5 	bl	8002348 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80013be:	2019      	movs	r0, #25
 80013c0:	f000 ffde 	bl	8002380 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80013c4:	2300      	movs	r3, #0
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	4b1f      	ldr	r3, [pc, #124]	; (8001448 <HAL_InitTick+0xa4>)
 80013ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013cc:	4a1e      	ldr	r2, [pc, #120]	; (8001448 <HAL_InitTick+0xa4>)
 80013ce:	f043 0301 	orr.w	r3, r3, #1
 80013d2:	6453      	str	r3, [r2, #68]	; 0x44
 80013d4:	4b1c      	ldr	r3, [pc, #112]	; (8001448 <HAL_InitTick+0xa4>)
 80013d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013e0:	f107 0210 	add.w	r2, r7, #16
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	4611      	mov	r1, r2
 80013ea:	4618      	mov	r0, r3
 80013ec:	f004 fc3e 	bl	8005c6c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80013f0:	f004 fc28 	bl	8005c44 <HAL_RCC_GetPCLK2Freq>
 80013f4:	4603      	mov	r3, r0
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013fc:	4a13      	ldr	r2, [pc, #76]	; (800144c <HAL_InitTick+0xa8>)
 80013fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001402:	0c9b      	lsrs	r3, r3, #18
 8001404:	3b01      	subs	r3, #1
 8001406:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001408:	4b11      	ldr	r3, [pc, #68]	; (8001450 <HAL_InitTick+0xac>)
 800140a:	4a12      	ldr	r2, [pc, #72]	; (8001454 <HAL_InitTick+0xb0>)
 800140c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800140e:	4b10      	ldr	r3, [pc, #64]	; (8001450 <HAL_InitTick+0xac>)
 8001410:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001414:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001416:	4a0e      	ldr	r2, [pc, #56]	; (8001450 <HAL_InitTick+0xac>)
 8001418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800141a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800141c:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <HAL_InitTick+0xac>)
 800141e:	2200      	movs	r2, #0
 8001420:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001422:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <HAL_InitTick+0xac>)
 8001424:	2200      	movs	r2, #0
 8001426:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001428:	4809      	ldr	r0, [pc, #36]	; (8001450 <HAL_InitTick+0xac>)
 800142a:	f004 fe1a 	bl	8006062 <HAL_TIM_Base_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d104      	bne.n	800143e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001434:	4806      	ldr	r0, [pc, #24]	; (8001450 <HAL_InitTick+0xac>)
 8001436:	f004 fe6d 	bl	8006114 <HAL_TIM_Base_Start_IT>
 800143a:	4603      	mov	r3, r0
 800143c:	e000      	b.n	8001440 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
}
 8001440:	4618      	mov	r0, r3
 8001442:	3730      	adds	r7, #48	; 0x30
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40023800 	.word	0x40023800
 800144c:	431bde83 	.word	0x431bde83
 8001450:	20004428 	.word	0x20004428
 8001454:	40010000 	.word	0x40010000

08001458 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800145c:	e7fe      	b.n	800145c <NMI_Handler+0x4>

0800145e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001462:	e7fe      	b.n	8001462 <HardFault_Handler+0x4>

08001464 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001468:	e7fe      	b.n	8001468 <MemManage_Handler+0x4>

0800146a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800146e:	e7fe      	b.n	800146e <BusFault_Handler+0x4>

08001470 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001474:	e7fe      	b.n	8001474 <UsageFault_Handler+0x4>

08001476 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001488:	4802      	ldr	r0, [pc, #8]	; (8001494 <CAN1_RX0_IRQHandler+0x10>)
 800148a:	f000 fc6c 	bl	8001d66 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	200043b8 	.word	0x200043b8

08001498 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800149c:	4802      	ldr	r0, [pc, #8]	; (80014a8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800149e:	f004 fea9 	bl	80061f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20004428 	.word	0x20004428

080014ac <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80014b0:	4802      	ldr	r0, [pc, #8]	; (80014bc <DMA2_Stream0_IRQHandler+0x10>)
 80014b2:	f001 f821 	bl	80024f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	2000425c 	.word	0x2000425c

080014c0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80014c4:	4802      	ldr	r0, [pc, #8]	; (80014d0 <DMA2_Stream1_IRQHandler+0x10>)
 80014c6:	f001 f817 	bl	80024f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20004168 	.word	0x20004168

080014d4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80014d8:	4802      	ldr	r0, [pc, #8]	; (80014e4 <DMA2_Stream2_IRQHandler+0x10>)
 80014da:	f001 f80d 	bl	80024f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20004358 	.word	0x20004358

080014e8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80014ec:	4802      	ldr	r0, [pc, #8]	; (80014f8 <OTG_FS_IRQHandler+0x10>)
 80014ee:	f001 fe5f 	bl	80031b0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20004858 	.word	0x20004858

080014fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001504:	4a14      	ldr	r2, [pc, #80]	; (8001558 <_sbrk+0x5c>)
 8001506:	4b15      	ldr	r3, [pc, #84]	; (800155c <_sbrk+0x60>)
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001510:	4b13      	ldr	r3, [pc, #76]	; (8001560 <_sbrk+0x64>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d102      	bne.n	800151e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001518:	4b11      	ldr	r3, [pc, #68]	; (8001560 <_sbrk+0x64>)
 800151a:	4a12      	ldr	r2, [pc, #72]	; (8001564 <_sbrk+0x68>)
 800151c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800151e:	4b10      	ldr	r3, [pc, #64]	; (8001560 <_sbrk+0x64>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4413      	add	r3, r2
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	429a      	cmp	r2, r3
 800152a:	d207      	bcs.n	800153c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800152c:	f00b f900 	bl	800c730 <__errno>
 8001530:	4603      	mov	r3, r0
 8001532:	220c      	movs	r2, #12
 8001534:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001536:	f04f 33ff 	mov.w	r3, #4294967295
 800153a:	e009      	b.n	8001550 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800153c:	4b08      	ldr	r3, [pc, #32]	; (8001560 <_sbrk+0x64>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001542:	4b07      	ldr	r3, [pc, #28]	; (8001560 <_sbrk+0x64>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4413      	add	r3, r2
 800154a:	4a05      	ldr	r2, [pc, #20]	; (8001560 <_sbrk+0x64>)
 800154c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800154e:	68fb      	ldr	r3, [r7, #12]
}
 8001550:	4618      	mov	r0, r3
 8001552:	3718      	adds	r7, #24
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20020000 	.word	0x20020000
 800155c:	00000400 	.word	0x00000400
 8001560:	20000364 	.word	0x20000364
 8001564:	20004b70 	.word	0x20004b70

08001568 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <SystemInit+0x20>)
 800156e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001572:	4a05      	ldr	r2, [pc, #20]	; (8001588 <SystemInit+0x20>)
 8001574:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001578:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800158c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001590:	480d      	ldr	r0, [pc, #52]	; (80015c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001592:	490e      	ldr	r1, [pc, #56]	; (80015cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001594:	4a0e      	ldr	r2, [pc, #56]	; (80015d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001596:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001598:	e002      	b.n	80015a0 <LoopCopyDataInit>

0800159a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800159a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800159c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800159e:	3304      	adds	r3, #4

080015a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015a4:	d3f9      	bcc.n	800159a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015a6:	4a0b      	ldr	r2, [pc, #44]	; (80015d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015a8:	4c0b      	ldr	r4, [pc, #44]	; (80015d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015ac:	e001      	b.n	80015b2 <LoopFillZerobss>

080015ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015b0:	3204      	adds	r2, #4

080015b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015b4:	d3fb      	bcc.n	80015ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80015b6:	f7ff ffd7 	bl	8001568 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015ba:	f00b f8bf 	bl	800c73c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015be:	f7fe ff9d 	bl	80004fc <main>
  bx  lr    
 80015c2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80015c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015cc:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80015d0:	0800cb6c 	.word	0x0800cb6c
  ldr r2, =_sbss
 80015d4:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80015d8:	20004b6c 	.word	0x20004b6c

080015dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015dc:	e7fe      	b.n	80015dc <ADC_IRQHandler>
	...

080015e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015e4:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <HAL_Init+0x40>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a0d      	ldr	r2, [pc, #52]	; (8001620 <HAL_Init+0x40>)
 80015ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015f0:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <HAL_Init+0x40>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a0a      	ldr	r2, [pc, #40]	; (8001620 <HAL_Init+0x40>)
 80015f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015fc:	4b08      	ldr	r3, [pc, #32]	; (8001620 <HAL_Init+0x40>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a07      	ldr	r2, [pc, #28]	; (8001620 <HAL_Init+0x40>)
 8001602:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001606:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001608:	2003      	movs	r0, #3
 800160a:	f000 fe92 	bl	8002332 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800160e:	200f      	movs	r0, #15
 8001610:	f7ff fec8 	bl	80013a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001614:	f7ff fb74 	bl	8000d00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40023c00 	.word	0x40023c00

08001624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001628:	4b06      	ldr	r3, [pc, #24]	; (8001644 <HAL_IncTick+0x20>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	461a      	mov	r2, r3
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_IncTick+0x24>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4413      	add	r3, r2
 8001634:	4a04      	ldr	r2, [pc, #16]	; (8001648 <HAL_IncTick+0x24>)
 8001636:	6013      	str	r3, [r2, #0]
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	20000008 	.word	0x20000008
 8001648:	20004470 	.word	0x20004470

0800164c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  return uwTick;
 8001650:	4b03      	ldr	r3, [pc, #12]	; (8001660 <HAL_GetTick+0x14>)
 8001652:	681b      	ldr	r3, [r3, #0]
}
 8001654:	4618      	mov	r0, r3
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	20004470 	.word	0x20004470

08001664 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800166c:	f7ff ffee 	bl	800164c <HAL_GetTick>
 8001670:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800167c:	d005      	beq.n	800168a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800167e:	4b0a      	ldr	r3, [pc, #40]	; (80016a8 <HAL_Delay+0x44>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	461a      	mov	r2, r3
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	4413      	add	r3, r2
 8001688:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800168a:	bf00      	nop
 800168c:	f7ff ffde 	bl	800164c <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	429a      	cmp	r2, r3
 800169a:	d8f7      	bhi.n	800168c <HAL_Delay+0x28>
  {
  }
}
 800169c:	bf00      	nop
 800169e:	bf00      	nop
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20000008 	.word	0x20000008

080016ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016b4:	2300      	movs	r3, #0
 80016b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d101      	bne.n	80016c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e033      	b.n	800172a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d109      	bne.n	80016de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f7ff fb44 	bl	8000d58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	f003 0310 	and.w	r3, r3, #16
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d118      	bne.n	800171c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016f2:	f023 0302 	bic.w	r3, r3, #2
 80016f6:	f043 0202 	orr.w	r2, r3, #2
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f000 f93a 	bl	8001978 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170e:	f023 0303 	bic.w	r3, r3, #3
 8001712:	f043 0201 	orr.w	r2, r3, #1
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	641a      	str	r2, [r3, #64]	; 0x40
 800171a:	e001      	b.n	8001720 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001728:	7bfb      	ldrb	r3, [r7, #15]
}
 800172a:	4618      	mov	r0, r3
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
	...

08001734 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800173e:	2300      	movs	r3, #0
 8001740:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001748:	2b01      	cmp	r3, #1
 800174a:	d101      	bne.n	8001750 <HAL_ADC_ConfigChannel+0x1c>
 800174c:	2302      	movs	r3, #2
 800174e:	e105      	b.n	800195c <HAL_ADC_ConfigChannel+0x228>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2201      	movs	r2, #1
 8001754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b09      	cmp	r3, #9
 800175e:	d925      	bls.n	80017ac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	68d9      	ldr	r1, [r3, #12]
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	b29b      	uxth	r3, r3
 800176c:	461a      	mov	r2, r3
 800176e:	4613      	mov	r3, r2
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	4413      	add	r3, r2
 8001774:	3b1e      	subs	r3, #30
 8001776:	2207      	movs	r2, #7
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	43da      	mvns	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	400a      	ands	r2, r1
 8001784:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	68d9      	ldr	r1, [r3, #12]
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	689a      	ldr	r2, [r3, #8]
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	b29b      	uxth	r3, r3
 8001796:	4618      	mov	r0, r3
 8001798:	4603      	mov	r3, r0
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	4403      	add	r3, r0
 800179e:	3b1e      	subs	r3, #30
 80017a0:	409a      	lsls	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	430a      	orrs	r2, r1
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	e022      	b.n	80017f2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6919      	ldr	r1, [r3, #16]
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	461a      	mov	r2, r3
 80017ba:	4613      	mov	r3, r2
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	4413      	add	r3, r2
 80017c0:	2207      	movs	r2, #7
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43da      	mvns	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	400a      	ands	r2, r1
 80017ce:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6919      	ldr	r1, [r3, #16]
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	689a      	ldr	r2, [r3, #8]
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	b29b      	uxth	r3, r3
 80017e0:	4618      	mov	r0, r3
 80017e2:	4603      	mov	r3, r0
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	4403      	add	r3, r0
 80017e8:	409a      	lsls	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	430a      	orrs	r2, r1
 80017f0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b06      	cmp	r3, #6
 80017f8:	d824      	bhi.n	8001844 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685a      	ldr	r2, [r3, #4]
 8001804:	4613      	mov	r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	4413      	add	r3, r2
 800180a:	3b05      	subs	r3, #5
 800180c:	221f      	movs	r2, #31
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43da      	mvns	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	400a      	ands	r2, r1
 800181a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	b29b      	uxth	r3, r3
 8001828:	4618      	mov	r0, r3
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	4613      	mov	r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4413      	add	r3, r2
 8001834:	3b05      	subs	r3, #5
 8001836:	fa00 f203 	lsl.w	r2, r0, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	430a      	orrs	r2, r1
 8001840:	635a      	str	r2, [r3, #52]	; 0x34
 8001842:	e04c      	b.n	80018de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	2b0c      	cmp	r3, #12
 800184a:	d824      	bhi.n	8001896 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685a      	ldr	r2, [r3, #4]
 8001856:	4613      	mov	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	4413      	add	r3, r2
 800185c:	3b23      	subs	r3, #35	; 0x23
 800185e:	221f      	movs	r2, #31
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	43da      	mvns	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	400a      	ands	r2, r1
 800186c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	b29b      	uxth	r3, r3
 800187a:	4618      	mov	r0, r3
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685a      	ldr	r2, [r3, #4]
 8001880:	4613      	mov	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	4413      	add	r3, r2
 8001886:	3b23      	subs	r3, #35	; 0x23
 8001888:	fa00 f203 	lsl.w	r2, r0, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	430a      	orrs	r2, r1
 8001892:	631a      	str	r2, [r3, #48]	; 0x30
 8001894:	e023      	b.n	80018de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685a      	ldr	r2, [r3, #4]
 80018a0:	4613      	mov	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	4413      	add	r3, r2
 80018a6:	3b41      	subs	r3, #65	; 0x41
 80018a8:	221f      	movs	r2, #31
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	43da      	mvns	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	400a      	ands	r2, r1
 80018b6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	4618      	mov	r0, r3
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685a      	ldr	r2, [r3, #4]
 80018ca:	4613      	mov	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	4413      	add	r3, r2
 80018d0:	3b41      	subs	r3, #65	; 0x41
 80018d2:	fa00 f203 	lsl.w	r2, r0, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	430a      	orrs	r2, r1
 80018dc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018de:	4b22      	ldr	r3, [pc, #136]	; (8001968 <HAL_ADC_ConfigChannel+0x234>)
 80018e0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a21      	ldr	r2, [pc, #132]	; (800196c <HAL_ADC_ConfigChannel+0x238>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d109      	bne.n	8001900 <HAL_ADC_ConfigChannel+0x1cc>
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2b12      	cmp	r3, #18
 80018f2:	d105      	bne.n	8001900 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a19      	ldr	r2, [pc, #100]	; (800196c <HAL_ADC_ConfigChannel+0x238>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d123      	bne.n	8001952 <HAL_ADC_ConfigChannel+0x21e>
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2b10      	cmp	r3, #16
 8001910:	d003      	beq.n	800191a <HAL_ADC_ConfigChannel+0x1e6>
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2b11      	cmp	r3, #17
 8001918:	d11b      	bne.n	8001952 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2b10      	cmp	r3, #16
 800192c:	d111      	bne.n	8001952 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800192e:	4b10      	ldr	r3, [pc, #64]	; (8001970 <HAL_ADC_ConfigChannel+0x23c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a10      	ldr	r2, [pc, #64]	; (8001974 <HAL_ADC_ConfigChannel+0x240>)
 8001934:	fba2 2303 	umull	r2, r3, r2, r3
 8001938:	0c9a      	lsrs	r2, r3, #18
 800193a:	4613      	mov	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4413      	add	r3, r2
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001944:	e002      	b.n	800194c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	3b01      	subs	r3, #1
 800194a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1f9      	bne.n	8001946 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	3714      	adds	r7, #20
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	40012300 	.word	0x40012300
 800196c:	40012000 	.word	0x40012000
 8001970:	20000000 	.word	0x20000000
 8001974:	431bde83 	.word	0x431bde83

08001978 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001980:	4b79      	ldr	r3, [pc, #484]	; (8001b68 <ADC_Init+0x1f0>)
 8001982:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	685a      	ldr	r2, [r3, #4]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	431a      	orrs	r2, r3
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	685a      	ldr	r2, [r3, #4]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	6859      	ldr	r1, [r3, #4]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	021a      	lsls	r2, r3, #8
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	430a      	orrs	r2, r1
 80019c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	685a      	ldr	r2, [r3, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80019d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6859      	ldr	r1, [r3, #4]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689a      	ldr	r2, [r3, #8]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	430a      	orrs	r2, r1
 80019e2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	689a      	ldr	r2, [r3, #8]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6899      	ldr	r1, [r3, #8]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	68da      	ldr	r2, [r3, #12]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	430a      	orrs	r2, r1
 8001a04:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0a:	4a58      	ldr	r2, [pc, #352]	; (8001b6c <ADC_Init+0x1f4>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d022      	beq.n	8001a56 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	689a      	ldr	r2, [r3, #8]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a1e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	6899      	ldr	r1, [r3, #8]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	689a      	ldr	r2, [r3, #8]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a40:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6899      	ldr	r1, [r3, #8]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	430a      	orrs	r2, r1
 8001a52:	609a      	str	r2, [r3, #8]
 8001a54:	e00f      	b.n	8001a76 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	689a      	ldr	r2, [r3, #8]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a74:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	689a      	ldr	r2, [r3, #8]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f022 0202 	bic.w	r2, r2, #2
 8001a84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	6899      	ldr	r1, [r3, #8]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	7e1b      	ldrb	r3, [r3, #24]
 8001a90:	005a      	lsls	r2, r3, #1
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	430a      	orrs	r2, r1
 8001a98:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d01b      	beq.n	8001adc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	685a      	ldr	r2, [r3, #4]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ab2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	685a      	ldr	r2, [r3, #4]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001ac2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	6859      	ldr	r1, [r3, #4]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	035a      	lsls	r2, r3, #13
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	e007      	b.n	8001aec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	685a      	ldr	r2, [r3, #4]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001aea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001afa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	3b01      	subs	r3, #1
 8001b08:	051a      	lsls	r2, r3, #20
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	6899      	ldr	r1, [r3, #8]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b2e:	025a      	lsls	r2, r3, #9
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	430a      	orrs	r2, r1
 8001b36:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	689a      	ldr	r2, [r3, #8]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6899      	ldr	r1, [r3, #8]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	695b      	ldr	r3, [r3, #20]
 8001b52:	029a      	lsls	r2, r3, #10
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	609a      	str	r2, [r3, #8]
}
 8001b5c:	bf00      	nop
 8001b5e:	3714      	adds	r7, #20
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	40012300 	.word	0x40012300
 8001b6c:	0f000001 	.word	0x0f000001

08001b70 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e0ed      	b.n	8001d5e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d102      	bne.n	8001b94 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff fa40 	bl	8001014 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f042 0201 	orr.w	r2, r2, #1
 8001ba2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ba4:	f7ff fd52 	bl	800164c <HAL_GetTick>
 8001ba8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001baa:	e012      	b.n	8001bd2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001bac:	f7ff fd4e 	bl	800164c <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b0a      	cmp	r3, #10
 8001bb8:	d90b      	bls.n	8001bd2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2205      	movs	r2, #5
 8001bca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e0c5      	b.n	8001d5e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 0301 	and.w	r3, r3, #1
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d0e5      	beq.n	8001bac <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f022 0202 	bic.w	r2, r2, #2
 8001bee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bf0:	f7ff fd2c 	bl	800164c <HAL_GetTick>
 8001bf4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001bf6:	e012      	b.n	8001c1e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001bf8:	f7ff fd28 	bl	800164c <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b0a      	cmp	r3, #10
 8001c04:	d90b      	bls.n	8001c1e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2205      	movs	r2, #5
 8001c16:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e09f      	b.n	8001d5e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d1e5      	bne.n	8001bf8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	7e1b      	ldrb	r3, [r3, #24]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d108      	bne.n	8001c46 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	e007      	b.n	8001c56 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c54:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	7e5b      	ldrb	r3, [r3, #25]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d108      	bne.n	8001c70 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	e007      	b.n	8001c80 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	7e9b      	ldrb	r3, [r3, #26]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d108      	bne.n	8001c9a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f042 0220 	orr.w	r2, r2, #32
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	e007      	b.n	8001caa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f022 0220 	bic.w	r2, r2, #32
 8001ca8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	7edb      	ldrb	r3, [r3, #27]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d108      	bne.n	8001cc4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 0210 	bic.w	r2, r2, #16
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	e007      	b.n	8001cd4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f042 0210 	orr.w	r2, r2, #16
 8001cd2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	7f1b      	ldrb	r3, [r3, #28]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d108      	bne.n	8001cee <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f042 0208 	orr.w	r2, r2, #8
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	e007      	b.n	8001cfe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f022 0208 	bic.w	r2, r2, #8
 8001cfc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	7f5b      	ldrb	r3, [r3, #29]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d108      	bne.n	8001d18 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f042 0204 	orr.w	r2, r2, #4
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	e007      	b.n	8001d28 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f022 0204 	bic.w	r2, r2, #4
 8001d26:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	431a      	orrs	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	431a      	orrs	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	695b      	ldr	r3, [r3, #20]
 8001d3c:	ea42 0103 	orr.w	r1, r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	1e5a      	subs	r2, r3, #1
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b08a      	sub	sp, #40	; 0x28
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	695b      	ldr	r3, [r3, #20]
 8001d78:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001da2:	6a3b      	ldr	r3, [r7, #32]
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d07c      	beq.n	8001ea6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d023      	beq.n	8001dfe <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d003      	beq.n	8001dd0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f000 f983 	bl	80020d4 <HAL_CAN_TxMailbox0CompleteCallback>
 8001dce:	e016      	b.n	8001dfe <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	f003 0304 	and.w	r3, r3, #4
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d004      	beq.n	8001de4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ddc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24
 8001de2:	e00c      	b.n	8001dfe <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	f003 0308 	and.w	r3, r3, #8
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d004      	beq.n	8001df8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001df4:	627b      	str	r3, [r7, #36]	; 0x24
 8001df6:	e002      	b.n	8001dfe <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f000 f989 	bl	8002110 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d024      	beq.n	8001e52 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e10:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d003      	beq.n	8001e24 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f000 f963 	bl	80020e8 <HAL_CAN_TxMailbox1CompleteCallback>
 8001e22:	e016      	b.n	8001e52 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d004      	beq.n	8001e38 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e30:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e34:	627b      	str	r3, [r7, #36]	; 0x24
 8001e36:	e00c      	b.n	8001e52 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d004      	beq.n	8001e4c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24
 8001e4a:	e002      	b.n	8001e52 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f000 f969 	bl	8002124 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d024      	beq.n	8001ea6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e64:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d003      	beq.n	8001e78 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 f943 	bl	80020fc <HAL_CAN_TxMailbox2CompleteCallback>
 8001e76:	e016      	b.n	8001ea6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d004      	beq.n	8001e8c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e88:	627b      	str	r3, [r7, #36]	; 0x24
 8001e8a:	e00c      	b.n	8001ea6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d004      	beq.n	8001ea0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e9e:	e002      	b.n	8001ea6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 f949 	bl	8002138 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001ea6:	6a3b      	ldr	r3, [r7, #32]
 8001ea8:	f003 0308 	and.w	r3, r3, #8
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d00c      	beq.n	8001eca <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	f003 0310 	and.w	r3, r3, #16
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d007      	beq.n	8001eca <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ec0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2210      	movs	r2, #16
 8001ec8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001eca:	6a3b      	ldr	r3, [r7, #32]
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d00b      	beq.n	8001eec <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	f003 0308 	and.w	r3, r3, #8
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d006      	beq.n	8001eec <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2208      	movs	r2, #8
 8001ee4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 f93a 	bl	8002160 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001eec:	6a3b      	ldr	r3, [r7, #32]
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d009      	beq.n	8001f0a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	f003 0303 	and.w	r3, r3, #3
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d002      	beq.n	8001f0a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 f921 	bl	800214c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001f0a:	6a3b      	ldr	r3, [r7, #32]
 8001f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d00c      	beq.n	8001f2e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	f003 0310 	and.w	r3, r3, #16
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d007      	beq.n	8001f2e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f20:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f24:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2210      	movs	r2, #16
 8001f2c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001f2e:	6a3b      	ldr	r3, [r7, #32]
 8001f30:	f003 0320 	and.w	r3, r3, #32
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d00b      	beq.n	8001f50 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d006      	beq.n	8001f50 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2208      	movs	r2, #8
 8001f48:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f91c 	bl	8002188 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001f50:	6a3b      	ldr	r3, [r7, #32]
 8001f52:	f003 0310 	and.w	r3, r3, #16
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d009      	beq.n	8001f6e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	f003 0303 	and.w	r3, r3, #3
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d002      	beq.n	8001f6e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 f903 	bl	8002174 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001f6e:	6a3b      	ldr	r3, [r7, #32]
 8001f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d00b      	beq.n	8001f90 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	f003 0310 	and.w	r3, r3, #16
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d006      	beq.n	8001f90 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2210      	movs	r2, #16
 8001f88:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f906 	bl	800219c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001f90:	6a3b      	ldr	r3, [r7, #32]
 8001f92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00b      	beq.n	8001fb2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	f003 0308 	and.w	r3, r3, #8
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d006      	beq.n	8001fb2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2208      	movs	r2, #8
 8001faa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f000 f8ff 	bl	80021b0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001fb2:	6a3b      	ldr	r3, [r7, #32]
 8001fb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d07b      	beq.n	80020b4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	f003 0304 	and.w	r3, r3, #4
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d072      	beq.n	80020ac <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001fc6:	6a3b      	ldr	r3, [r7, #32]
 8001fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d008      	beq.n	8001fe2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001fe2:	6a3b      	ldr	r3, [r7, #32]
 8001fe4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d008      	beq.n	8001ffe <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff8:	f043 0302 	orr.w	r3, r3, #2
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ffe:	6a3b      	ldr	r3, [r7, #32]
 8002000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002004:	2b00      	cmp	r3, #0
 8002006:	d008      	beq.n	800201a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002014:	f043 0304 	orr.w	r3, r3, #4
 8002018:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800201a:	6a3b      	ldr	r3, [r7, #32]
 800201c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002020:	2b00      	cmp	r3, #0
 8002022:	d043      	beq.n	80020ac <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800202a:	2b00      	cmp	r3, #0
 800202c:	d03e      	beq.n	80020ac <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002034:	2b60      	cmp	r3, #96	; 0x60
 8002036:	d02b      	beq.n	8002090 <HAL_CAN_IRQHandler+0x32a>
 8002038:	2b60      	cmp	r3, #96	; 0x60
 800203a:	d82e      	bhi.n	800209a <HAL_CAN_IRQHandler+0x334>
 800203c:	2b50      	cmp	r3, #80	; 0x50
 800203e:	d022      	beq.n	8002086 <HAL_CAN_IRQHandler+0x320>
 8002040:	2b50      	cmp	r3, #80	; 0x50
 8002042:	d82a      	bhi.n	800209a <HAL_CAN_IRQHandler+0x334>
 8002044:	2b40      	cmp	r3, #64	; 0x40
 8002046:	d019      	beq.n	800207c <HAL_CAN_IRQHandler+0x316>
 8002048:	2b40      	cmp	r3, #64	; 0x40
 800204a:	d826      	bhi.n	800209a <HAL_CAN_IRQHandler+0x334>
 800204c:	2b30      	cmp	r3, #48	; 0x30
 800204e:	d010      	beq.n	8002072 <HAL_CAN_IRQHandler+0x30c>
 8002050:	2b30      	cmp	r3, #48	; 0x30
 8002052:	d822      	bhi.n	800209a <HAL_CAN_IRQHandler+0x334>
 8002054:	2b10      	cmp	r3, #16
 8002056:	d002      	beq.n	800205e <HAL_CAN_IRQHandler+0x2f8>
 8002058:	2b20      	cmp	r3, #32
 800205a:	d005      	beq.n	8002068 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800205c:	e01d      	b.n	800209a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002060:	f043 0308 	orr.w	r3, r3, #8
 8002064:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002066:	e019      	b.n	800209c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206a:	f043 0310 	orr.w	r3, r3, #16
 800206e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002070:	e014      	b.n	800209c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	f043 0320 	orr.w	r3, r3, #32
 8002078:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800207a:	e00f      	b.n	800209c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800207c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002082:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002084:	e00a      	b.n	800209c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800208c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800208e:	e005      	b.n	800209c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002092:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002096:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002098:	e000      	b.n	800209c <HAL_CAN_IRQHandler+0x336>
            break;
 800209a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	699a      	ldr	r2, [r3, #24]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80020aa:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2204      	movs	r2, #4
 80020b2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80020b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d008      	beq.n	80020cc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	431a      	orrs	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f87c 	bl	80021c4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80020cc:	bf00      	nop
 80020ce:	3728      	adds	r7, #40	; 0x28
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021e8:	4b0c      	ldr	r3, [pc, #48]	; (800221c <__NVIC_SetPriorityGrouping+0x44>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021f4:	4013      	ands	r3, r2
 80021f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002200:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002208:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800220a:	4a04      	ldr	r2, [pc, #16]	; (800221c <__NVIC_SetPriorityGrouping+0x44>)
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	60d3      	str	r3, [r2, #12]
}
 8002210:	bf00      	nop
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	e000ed00 	.word	0xe000ed00

08002220 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002224:	4b04      	ldr	r3, [pc, #16]	; (8002238 <__NVIC_GetPriorityGrouping+0x18>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	0a1b      	lsrs	r3, r3, #8
 800222a:	f003 0307 	and.w	r3, r3, #7
}
 800222e:	4618      	mov	r0, r3
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	e000ed00 	.word	0xe000ed00

0800223c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224a:	2b00      	cmp	r3, #0
 800224c:	db0b      	blt.n	8002266 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800224e:	79fb      	ldrb	r3, [r7, #7]
 8002250:	f003 021f 	and.w	r2, r3, #31
 8002254:	4907      	ldr	r1, [pc, #28]	; (8002274 <__NVIC_EnableIRQ+0x38>)
 8002256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225a:	095b      	lsrs	r3, r3, #5
 800225c:	2001      	movs	r0, #1
 800225e:	fa00 f202 	lsl.w	r2, r0, r2
 8002262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	e000e100 	.word	0xe000e100

08002278 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	6039      	str	r1, [r7, #0]
 8002282:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002288:	2b00      	cmp	r3, #0
 800228a:	db0a      	blt.n	80022a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	b2da      	uxtb	r2, r3
 8002290:	490c      	ldr	r1, [pc, #48]	; (80022c4 <__NVIC_SetPriority+0x4c>)
 8002292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002296:	0112      	lsls	r2, r2, #4
 8002298:	b2d2      	uxtb	r2, r2
 800229a:	440b      	add	r3, r1
 800229c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022a0:	e00a      	b.n	80022b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	4908      	ldr	r1, [pc, #32]	; (80022c8 <__NVIC_SetPriority+0x50>)
 80022a8:	79fb      	ldrb	r3, [r7, #7]
 80022aa:	f003 030f 	and.w	r3, r3, #15
 80022ae:	3b04      	subs	r3, #4
 80022b0:	0112      	lsls	r2, r2, #4
 80022b2:	b2d2      	uxtb	r2, r2
 80022b4:	440b      	add	r3, r1
 80022b6:	761a      	strb	r2, [r3, #24]
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	e000e100 	.word	0xe000e100
 80022c8:	e000ed00 	.word	0xe000ed00

080022cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b089      	sub	sp, #36	; 0x24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	f1c3 0307 	rsb	r3, r3, #7
 80022e6:	2b04      	cmp	r3, #4
 80022e8:	bf28      	it	cs
 80022ea:	2304      	movcs	r3, #4
 80022ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	3304      	adds	r3, #4
 80022f2:	2b06      	cmp	r3, #6
 80022f4:	d902      	bls.n	80022fc <NVIC_EncodePriority+0x30>
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	3b03      	subs	r3, #3
 80022fa:	e000      	b.n	80022fe <NVIC_EncodePriority+0x32>
 80022fc:	2300      	movs	r3, #0
 80022fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002300:	f04f 32ff 	mov.w	r2, #4294967295
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	43da      	mvns	r2, r3
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	401a      	ands	r2, r3
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002314:	f04f 31ff 	mov.w	r1, #4294967295
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	fa01 f303 	lsl.w	r3, r1, r3
 800231e:	43d9      	mvns	r1, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002324:	4313      	orrs	r3, r2
         );
}
 8002326:	4618      	mov	r0, r3
 8002328:	3724      	adds	r7, #36	; 0x24
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b082      	sub	sp, #8
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f7ff ff4c 	bl	80021d8 <__NVIC_SetPriorityGrouping>
}
 8002340:	bf00      	nop
 8002342:	3708      	adds	r7, #8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	4603      	mov	r3, r0
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
 8002354:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002356:	2300      	movs	r3, #0
 8002358:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800235a:	f7ff ff61 	bl	8002220 <__NVIC_GetPriorityGrouping>
 800235e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	68b9      	ldr	r1, [r7, #8]
 8002364:	6978      	ldr	r0, [r7, #20]
 8002366:	f7ff ffb1 	bl	80022cc <NVIC_EncodePriority>
 800236a:	4602      	mov	r2, r0
 800236c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002370:	4611      	mov	r1, r2
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff ff80 	bl	8002278 <__NVIC_SetPriority>
}
 8002378:	bf00      	nop
 800237a:	3718      	adds	r7, #24
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	4603      	mov	r3, r0
 8002388:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800238a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff ff54 	bl	800223c <__NVIC_EnableIRQ>
}
 8002394:	bf00      	nop
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023a4:	2300      	movs	r3, #0
 80023a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80023a8:	f7ff f950 	bl	800164c <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d101      	bne.n	80023b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e099      	b.n	80024ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2202      	movs	r2, #2
 80023bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 0201 	bic.w	r2, r2, #1
 80023d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023d8:	e00f      	b.n	80023fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023da:	f7ff f937 	bl	800164c <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b05      	cmp	r3, #5
 80023e6:	d908      	bls.n	80023fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2220      	movs	r2, #32
 80023ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2203      	movs	r2, #3
 80023f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e078      	b.n	80024ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1e8      	bne.n	80023da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002410:	697a      	ldr	r2, [r7, #20]
 8002412:	4b38      	ldr	r3, [pc, #224]	; (80024f4 <HAL_DMA_Init+0x158>)
 8002414:	4013      	ands	r3, r2
 8002416:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685a      	ldr	r2, [r3, #4]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002426:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002432:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800243e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	4313      	orrs	r3, r2
 800244a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002450:	2b04      	cmp	r3, #4
 8002452:	d107      	bne.n	8002464 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245c:	4313      	orrs	r3, r2
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	4313      	orrs	r3, r2
 8002462:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	697a      	ldr	r2, [r7, #20]
 800246a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	f023 0307 	bic.w	r3, r3, #7
 800247a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002480:	697a      	ldr	r2, [r7, #20]
 8002482:	4313      	orrs	r3, r2
 8002484:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248a:	2b04      	cmp	r3, #4
 800248c:	d117      	bne.n	80024be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	4313      	orrs	r3, r2
 8002496:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00e      	beq.n	80024be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 f9e9 	bl	8002878 <DMA_CheckFifoParam>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d008      	beq.n	80024be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2240      	movs	r2, #64	; 0x40
 80024b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2201      	movs	r2, #1
 80024b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80024ba:	2301      	movs	r3, #1
 80024bc:	e016      	b.n	80024ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 f9a0 	bl	800280c <DMA_CalcBaseAndBitshift>
 80024cc:	4603      	mov	r3, r0
 80024ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d4:	223f      	movs	r2, #63	; 0x3f
 80024d6:	409a      	lsls	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2201      	movs	r2, #1
 80024e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3718      	adds	r7, #24
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	f010803f 	.word	0xf010803f

080024f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002500:	2300      	movs	r3, #0
 8002502:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002504:	4b92      	ldr	r3, [pc, #584]	; (8002750 <HAL_DMA_IRQHandler+0x258>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a92      	ldr	r2, [pc, #584]	; (8002754 <HAL_DMA_IRQHandler+0x25c>)
 800250a:	fba2 2303 	umull	r2, r3, r2, r3
 800250e:	0a9b      	lsrs	r3, r3, #10
 8002510:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002516:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002522:	2208      	movs	r2, #8
 8002524:	409a      	lsls	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	4013      	ands	r3, r2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d01a      	beq.n	8002564 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0304 	and.w	r3, r3, #4
 8002538:	2b00      	cmp	r3, #0
 800253a:	d013      	beq.n	8002564 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f022 0204 	bic.w	r2, r2, #4
 800254a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002550:	2208      	movs	r2, #8
 8002552:	409a      	lsls	r2, r3
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800255c:	f043 0201 	orr.w	r2, r3, #1
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002568:	2201      	movs	r2, #1
 800256a:	409a      	lsls	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	4013      	ands	r3, r2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d012      	beq.n	800259a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00b      	beq.n	800259a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002586:	2201      	movs	r2, #1
 8002588:	409a      	lsls	r2, r3
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002592:	f043 0202 	orr.w	r2, r3, #2
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800259e:	2204      	movs	r2, #4
 80025a0:	409a      	lsls	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	4013      	ands	r3, r2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d012      	beq.n	80025d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00b      	beq.n	80025d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025bc:	2204      	movs	r2, #4
 80025be:	409a      	lsls	r2, r3
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c8:	f043 0204 	orr.w	r2, r3, #4
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d4:	2210      	movs	r2, #16
 80025d6:	409a      	lsls	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	4013      	ands	r3, r2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d043      	beq.n	8002668 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0308 	and.w	r3, r3, #8
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d03c      	beq.n	8002668 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f2:	2210      	movs	r2, #16
 80025f4:	409a      	lsls	r2, r3
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d018      	beq.n	800263a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d108      	bne.n	8002628 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	2b00      	cmp	r3, #0
 800261c:	d024      	beq.n	8002668 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	4798      	blx	r3
 8002626:	e01f      	b.n	8002668 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800262c:	2b00      	cmp	r3, #0
 800262e:	d01b      	beq.n	8002668 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	4798      	blx	r3
 8002638:	e016      	b.n	8002668 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002644:	2b00      	cmp	r3, #0
 8002646:	d107      	bne.n	8002658 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f022 0208 	bic.w	r2, r2, #8
 8002656:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265c:	2b00      	cmp	r3, #0
 800265e:	d003      	beq.n	8002668 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800266c:	2220      	movs	r2, #32
 800266e:	409a      	lsls	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	4013      	ands	r3, r2
 8002674:	2b00      	cmp	r3, #0
 8002676:	f000 808e 	beq.w	8002796 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0310 	and.w	r3, r3, #16
 8002684:	2b00      	cmp	r3, #0
 8002686:	f000 8086 	beq.w	8002796 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800268e:	2220      	movs	r2, #32
 8002690:	409a      	lsls	r2, r3
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b05      	cmp	r3, #5
 80026a0:	d136      	bne.n	8002710 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f022 0216 	bic.w	r2, r2, #22
 80026b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	695a      	ldr	r2, [r3, #20]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d103      	bne.n	80026d2 <HAL_DMA_IRQHandler+0x1da>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d007      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 0208 	bic.w	r2, r2, #8
 80026e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e6:	223f      	movs	r2, #63	; 0x3f
 80026e8:	409a      	lsls	r2, r3
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002702:	2b00      	cmp	r3, #0
 8002704:	d07d      	beq.n	8002802 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	4798      	blx	r3
        }
        return;
 800270e:	e078      	b.n	8002802 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d01c      	beq.n	8002758 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d108      	bne.n	800273e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002730:	2b00      	cmp	r3, #0
 8002732:	d030      	beq.n	8002796 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	4798      	blx	r3
 800273c:	e02b      	b.n	8002796 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002742:	2b00      	cmp	r3, #0
 8002744:	d027      	beq.n	8002796 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	4798      	blx	r3
 800274e:	e022      	b.n	8002796 <HAL_DMA_IRQHandler+0x29e>
 8002750:	20000000 	.word	0x20000000
 8002754:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10f      	bne.n	8002786 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f022 0210 	bic.w	r2, r2, #16
 8002774:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800279a:	2b00      	cmp	r3, #0
 800279c:	d032      	beq.n	8002804 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d022      	beq.n	80027f0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2205      	movs	r2, #5
 80027ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 0201 	bic.w	r2, r2, #1
 80027c0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	3301      	adds	r3, #1
 80027c6:	60bb      	str	r3, [r7, #8]
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d307      	bcc.n	80027de <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1f2      	bne.n	80027c2 <HAL_DMA_IRQHandler+0x2ca>
 80027dc:	e000      	b.n	80027e0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80027de:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d005      	beq.n	8002804 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	4798      	blx	r3
 8002800:	e000      	b.n	8002804 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002802:	bf00      	nop
    }
  }
}
 8002804:	3718      	adds	r7, #24
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop

0800280c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	b2db      	uxtb	r3, r3
 800281a:	3b10      	subs	r3, #16
 800281c:	4a14      	ldr	r2, [pc, #80]	; (8002870 <DMA_CalcBaseAndBitshift+0x64>)
 800281e:	fba2 2303 	umull	r2, r3, r2, r3
 8002822:	091b      	lsrs	r3, r3, #4
 8002824:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002826:	4a13      	ldr	r2, [pc, #76]	; (8002874 <DMA_CalcBaseAndBitshift+0x68>)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	4413      	add	r3, r2
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	461a      	mov	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2b03      	cmp	r3, #3
 8002838:	d909      	bls.n	800284e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002842:	f023 0303 	bic.w	r3, r3, #3
 8002846:	1d1a      	adds	r2, r3, #4
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	659a      	str	r2, [r3, #88]	; 0x58
 800284c:	e007      	b.n	800285e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002856:	f023 0303 	bic.w	r3, r3, #3
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002862:	4618      	mov	r0, r3
 8002864:	3714      	adds	r7, #20
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	aaaaaaab 	.word	0xaaaaaaab
 8002874:	0800caf4 	.word	0x0800caf4

08002878 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002880:	2300      	movs	r3, #0
 8002882:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002888:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d11f      	bne.n	80028d2 <DMA_CheckFifoParam+0x5a>
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	2b03      	cmp	r3, #3
 8002896:	d856      	bhi.n	8002946 <DMA_CheckFifoParam+0xce>
 8002898:	a201      	add	r2, pc, #4	; (adr r2, 80028a0 <DMA_CheckFifoParam+0x28>)
 800289a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800289e:	bf00      	nop
 80028a0:	080028b1 	.word	0x080028b1
 80028a4:	080028c3 	.word	0x080028c3
 80028a8:	080028b1 	.word	0x080028b1
 80028ac:	08002947 	.word	0x08002947
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d046      	beq.n	800294a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028c0:	e043      	b.n	800294a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028ca:	d140      	bne.n	800294e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028d0:	e03d      	b.n	800294e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028da:	d121      	bne.n	8002920 <DMA_CheckFifoParam+0xa8>
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	2b03      	cmp	r3, #3
 80028e0:	d837      	bhi.n	8002952 <DMA_CheckFifoParam+0xda>
 80028e2:	a201      	add	r2, pc, #4	; (adr r2, 80028e8 <DMA_CheckFifoParam+0x70>)
 80028e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028e8:	080028f9 	.word	0x080028f9
 80028ec:	080028ff 	.word	0x080028ff
 80028f0:	080028f9 	.word	0x080028f9
 80028f4:	08002911 	.word	0x08002911
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	73fb      	strb	r3, [r7, #15]
      break;
 80028fc:	e030      	b.n	8002960 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002902:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d025      	beq.n	8002956 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800290e:	e022      	b.n	8002956 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002914:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002918:	d11f      	bne.n	800295a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800291e:	e01c      	b.n	800295a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	2b02      	cmp	r3, #2
 8002924:	d903      	bls.n	800292e <DMA_CheckFifoParam+0xb6>
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	2b03      	cmp	r3, #3
 800292a:	d003      	beq.n	8002934 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800292c:	e018      	b.n	8002960 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	73fb      	strb	r3, [r7, #15]
      break;
 8002932:	e015      	b.n	8002960 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002938:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00e      	beq.n	800295e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	73fb      	strb	r3, [r7, #15]
      break;
 8002944:	e00b      	b.n	800295e <DMA_CheckFifoParam+0xe6>
      break;
 8002946:	bf00      	nop
 8002948:	e00a      	b.n	8002960 <DMA_CheckFifoParam+0xe8>
      break;
 800294a:	bf00      	nop
 800294c:	e008      	b.n	8002960 <DMA_CheckFifoParam+0xe8>
      break;
 800294e:	bf00      	nop
 8002950:	e006      	b.n	8002960 <DMA_CheckFifoParam+0xe8>
      break;
 8002952:	bf00      	nop
 8002954:	e004      	b.n	8002960 <DMA_CheckFifoParam+0xe8>
      break;
 8002956:	bf00      	nop
 8002958:	e002      	b.n	8002960 <DMA_CheckFifoParam+0xe8>
      break;   
 800295a:	bf00      	nop
 800295c:	e000      	b.n	8002960 <DMA_CheckFifoParam+0xe8>
      break;
 800295e:	bf00      	nop
    }
  } 
  
  return status; 
 8002960:	7bfb      	ldrb	r3, [r7, #15]
}
 8002962:	4618      	mov	r0, r3
 8002964:	3714      	adds	r7, #20
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop

08002970 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002970:	b480      	push	{r7}
 8002972:	b089      	sub	sp, #36	; 0x24
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800297a:	2300      	movs	r3, #0
 800297c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800297e:	2300      	movs	r3, #0
 8002980:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002982:	2300      	movs	r3, #0
 8002984:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002986:	2300      	movs	r3, #0
 8002988:	61fb      	str	r3, [r7, #28]
 800298a:	e16b      	b.n	8002c64 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800298c:	2201      	movs	r2, #1
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	4013      	ands	r3, r2
 800299e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	f040 815a 	bne.w	8002c5e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f003 0303 	and.w	r3, r3, #3
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d005      	beq.n	80029c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d130      	bne.n	8002a24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	2203      	movs	r2, #3
 80029ce:	fa02 f303 	lsl.w	r3, r2, r3
 80029d2:	43db      	mvns	r3, r3
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	4013      	ands	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	68da      	ldr	r2, [r3, #12]
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	fa02 f303 	lsl.w	r3, r2, r3
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029f8:	2201      	movs	r2, #1
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	43db      	mvns	r3, r3
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	4013      	ands	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	091b      	lsrs	r3, r3, #4
 8002a0e:	f003 0201 	and.w	r2, r3, #1
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f003 0303 	and.w	r3, r3, #3
 8002a2c:	2b03      	cmp	r3, #3
 8002a2e:	d017      	beq.n	8002a60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	2203      	movs	r2, #3
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	43db      	mvns	r3, r3
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4013      	ands	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f003 0303 	and.w	r3, r3, #3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d123      	bne.n	8002ab4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	08da      	lsrs	r2, r3, #3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	3208      	adds	r2, #8
 8002a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	f003 0307 	and.w	r3, r3, #7
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	220f      	movs	r2, #15
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	691a      	ldr	r2, [r3, #16]
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	f003 0307 	and.w	r3, r3, #7
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	08da      	lsrs	r2, r3, #3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	3208      	adds	r2, #8
 8002aae:	69b9      	ldr	r1, [r7, #24]
 8002ab0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	2203      	movs	r2, #3
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f003 0203 	and.w	r2, r3, #3
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f000 80b4 	beq.w	8002c5e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002af6:	2300      	movs	r3, #0
 8002af8:	60fb      	str	r3, [r7, #12]
 8002afa:	4b60      	ldr	r3, [pc, #384]	; (8002c7c <HAL_GPIO_Init+0x30c>)
 8002afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afe:	4a5f      	ldr	r2, [pc, #380]	; (8002c7c <HAL_GPIO_Init+0x30c>)
 8002b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b04:	6453      	str	r3, [r2, #68]	; 0x44
 8002b06:	4b5d      	ldr	r3, [pc, #372]	; (8002c7c <HAL_GPIO_Init+0x30c>)
 8002b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b12:	4a5b      	ldr	r2, [pc, #364]	; (8002c80 <HAL_GPIO_Init+0x310>)
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	089b      	lsrs	r3, r3, #2
 8002b18:	3302      	adds	r3, #2
 8002b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	f003 0303 	and.w	r3, r3, #3
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	220f      	movs	r2, #15
 8002b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2e:	43db      	mvns	r3, r3
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	4013      	ands	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a52      	ldr	r2, [pc, #328]	; (8002c84 <HAL_GPIO_Init+0x314>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d02b      	beq.n	8002b96 <HAL_GPIO_Init+0x226>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a51      	ldr	r2, [pc, #324]	; (8002c88 <HAL_GPIO_Init+0x318>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d025      	beq.n	8002b92 <HAL_GPIO_Init+0x222>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a50      	ldr	r2, [pc, #320]	; (8002c8c <HAL_GPIO_Init+0x31c>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d01f      	beq.n	8002b8e <HAL_GPIO_Init+0x21e>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a4f      	ldr	r2, [pc, #316]	; (8002c90 <HAL_GPIO_Init+0x320>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d019      	beq.n	8002b8a <HAL_GPIO_Init+0x21a>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a4e      	ldr	r2, [pc, #312]	; (8002c94 <HAL_GPIO_Init+0x324>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d013      	beq.n	8002b86 <HAL_GPIO_Init+0x216>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a4d      	ldr	r2, [pc, #308]	; (8002c98 <HAL_GPIO_Init+0x328>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d00d      	beq.n	8002b82 <HAL_GPIO_Init+0x212>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a4c      	ldr	r2, [pc, #304]	; (8002c9c <HAL_GPIO_Init+0x32c>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d007      	beq.n	8002b7e <HAL_GPIO_Init+0x20e>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a4b      	ldr	r2, [pc, #300]	; (8002ca0 <HAL_GPIO_Init+0x330>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d101      	bne.n	8002b7a <HAL_GPIO_Init+0x20a>
 8002b76:	2307      	movs	r3, #7
 8002b78:	e00e      	b.n	8002b98 <HAL_GPIO_Init+0x228>
 8002b7a:	2308      	movs	r3, #8
 8002b7c:	e00c      	b.n	8002b98 <HAL_GPIO_Init+0x228>
 8002b7e:	2306      	movs	r3, #6
 8002b80:	e00a      	b.n	8002b98 <HAL_GPIO_Init+0x228>
 8002b82:	2305      	movs	r3, #5
 8002b84:	e008      	b.n	8002b98 <HAL_GPIO_Init+0x228>
 8002b86:	2304      	movs	r3, #4
 8002b88:	e006      	b.n	8002b98 <HAL_GPIO_Init+0x228>
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e004      	b.n	8002b98 <HAL_GPIO_Init+0x228>
 8002b8e:	2302      	movs	r3, #2
 8002b90:	e002      	b.n	8002b98 <HAL_GPIO_Init+0x228>
 8002b92:	2301      	movs	r3, #1
 8002b94:	e000      	b.n	8002b98 <HAL_GPIO_Init+0x228>
 8002b96:	2300      	movs	r3, #0
 8002b98:	69fa      	ldr	r2, [r7, #28]
 8002b9a:	f002 0203 	and.w	r2, r2, #3
 8002b9e:	0092      	lsls	r2, r2, #2
 8002ba0:	4093      	lsls	r3, r2
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ba8:	4935      	ldr	r1, [pc, #212]	; (8002c80 <HAL_GPIO_Init+0x310>)
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	089b      	lsrs	r3, r3, #2
 8002bae:	3302      	adds	r3, #2
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bb6:	4b3b      	ldr	r3, [pc, #236]	; (8002ca4 <HAL_GPIO_Init+0x334>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	43db      	mvns	r3, r3
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bda:	4a32      	ldr	r2, [pc, #200]	; (8002ca4 <HAL_GPIO_Init+0x334>)
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002be0:	4b30      	ldr	r3, [pc, #192]	; (8002ca4 <HAL_GPIO_Init+0x334>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	43db      	mvns	r3, r3
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	4013      	ands	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d003      	beq.n	8002c04 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c04:	4a27      	ldr	r2, [pc, #156]	; (8002ca4 <HAL_GPIO_Init+0x334>)
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c0a:	4b26      	ldr	r3, [pc, #152]	; (8002ca4 <HAL_GPIO_Init+0x334>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	43db      	mvns	r3, r3
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	4013      	ands	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d003      	beq.n	8002c2e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c2e:	4a1d      	ldr	r2, [pc, #116]	; (8002ca4 <HAL_GPIO_Init+0x334>)
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c34:	4b1b      	ldr	r3, [pc, #108]	; (8002ca4 <HAL_GPIO_Init+0x334>)
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	4013      	ands	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d003      	beq.n	8002c58 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c58:	4a12      	ldr	r2, [pc, #72]	; (8002ca4 <HAL_GPIO_Init+0x334>)
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	3301      	adds	r3, #1
 8002c62:	61fb      	str	r3, [r7, #28]
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	2b0f      	cmp	r3, #15
 8002c68:	f67f ae90 	bls.w	800298c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c6c:	bf00      	nop
 8002c6e:	bf00      	nop
 8002c70:	3724      	adds	r7, #36	; 0x24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	40023800 	.word	0x40023800
 8002c80:	40013800 	.word	0x40013800
 8002c84:	40020000 	.word	0x40020000
 8002c88:	40020400 	.word	0x40020400
 8002c8c:	40020800 	.word	0x40020800
 8002c90:	40020c00 	.word	0x40020c00
 8002c94:	40021000 	.word	0x40021000
 8002c98:	40021400 	.word	0x40021400
 8002c9c:	40021800 	.word	0x40021800
 8002ca0:	40021c00 	.word	0x40021c00
 8002ca4:	40013c00 	.word	0x40013c00

08002ca8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	807b      	strh	r3, [r7, #2]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cb8:	787b      	ldrb	r3, [r7, #1]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cbe:	887a      	ldrh	r2, [r7, #2]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cc4:	e003      	b.n	8002cce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cc6:	887b      	ldrh	r3, [r7, #2]
 8002cc8:	041a      	lsls	r2, r3, #16
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	619a      	str	r2, [r3, #24]
}
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr

08002cda <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002cda:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cdc:	b08f      	sub	sp, #60	; 0x3c
 8002cde:	af0a      	add	r7, sp, #40	; 0x28
 8002ce0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d101      	bne.n	8002cec <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e054      	b.n	8002d96 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d106      	bne.n	8002d0c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f009 fa64 	bl	800c1d4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2203      	movs	r2, #3
 8002d10:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d102      	bne.n	8002d26 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f003 fece 	bl	8006acc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	603b      	str	r3, [r7, #0]
 8002d36:	687e      	ldr	r6, [r7, #4]
 8002d38:	466d      	mov	r5, sp
 8002d3a:	f106 0410 	add.w	r4, r6, #16
 8002d3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d46:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d4a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d4e:	1d33      	adds	r3, r6, #4
 8002d50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d52:	6838      	ldr	r0, [r7, #0]
 8002d54:	f003 fe48 	bl	80069e8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f003 fec5 	bl	8006aee <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	603b      	str	r3, [r7, #0]
 8002d6a:	687e      	ldr	r6, [r7, #4]
 8002d6c:	466d      	mov	r5, sp
 8002d6e:	f106 0410 	add.w	r4, r6, #16
 8002d72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d7a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d7e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d82:	1d33      	adds	r3, r6, #4
 8002d84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d86:	6838      	ldr	r0, [r7, #0]
 8002d88:	f004 f82c 	bl	8006de4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3714      	adds	r7, #20
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d9e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002d9e:	b590      	push	{r4, r7, lr}
 8002da0:	b089      	sub	sp, #36	; 0x24
 8002da2:	af04      	add	r7, sp, #16
 8002da4:	6078      	str	r0, [r7, #4]
 8002da6:	4608      	mov	r0, r1
 8002da8:	4611      	mov	r1, r2
 8002daa:	461a      	mov	r2, r3
 8002dac:	4603      	mov	r3, r0
 8002dae:	70fb      	strb	r3, [r7, #3]
 8002db0:	460b      	mov	r3, r1
 8002db2:	70bb      	strb	r3, [r7, #2]
 8002db4:	4613      	mov	r3, r2
 8002db6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d101      	bne.n	8002dc6 <HAL_HCD_HC_Init+0x28>
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	e076      	b.n	8002eb4 <HAL_HCD_HC_Init+0x116>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002dce:	78fb      	ldrb	r3, [r7, #3]
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	212c      	movs	r1, #44	; 0x2c
 8002dd4:	fb01 f303 	mul.w	r3, r1, r3
 8002dd8:	4413      	add	r3, r2
 8002dda:	333d      	adds	r3, #61	; 0x3d
 8002ddc:	2200      	movs	r2, #0
 8002dde:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002de0:	78fb      	ldrb	r3, [r7, #3]
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	212c      	movs	r1, #44	; 0x2c
 8002de6:	fb01 f303 	mul.w	r3, r1, r3
 8002dea:	4413      	add	r3, r2
 8002dec:	3338      	adds	r3, #56	; 0x38
 8002dee:	787a      	ldrb	r2, [r7, #1]
 8002df0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002df2:	78fb      	ldrb	r3, [r7, #3]
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	212c      	movs	r1, #44	; 0x2c
 8002df8:	fb01 f303 	mul.w	r3, r1, r3
 8002dfc:	4413      	add	r3, r2
 8002dfe:	3340      	adds	r3, #64	; 0x40
 8002e00:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002e02:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002e04:	78fb      	ldrb	r3, [r7, #3]
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	212c      	movs	r1, #44	; 0x2c
 8002e0a:	fb01 f303 	mul.w	r3, r1, r3
 8002e0e:	4413      	add	r3, r2
 8002e10:	3339      	adds	r3, #57	; 0x39
 8002e12:	78fa      	ldrb	r2, [r7, #3]
 8002e14:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002e16:	78fb      	ldrb	r3, [r7, #3]
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	212c      	movs	r1, #44	; 0x2c
 8002e1c:	fb01 f303 	mul.w	r3, r1, r3
 8002e20:	4413      	add	r3, r2
 8002e22:	333f      	adds	r3, #63	; 0x3f
 8002e24:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002e28:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002e2a:	78fb      	ldrb	r3, [r7, #3]
 8002e2c:	78ba      	ldrb	r2, [r7, #2]
 8002e2e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e32:	b2d0      	uxtb	r0, r2
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	212c      	movs	r1, #44	; 0x2c
 8002e38:	fb01 f303 	mul.w	r3, r1, r3
 8002e3c:	4413      	add	r3, r2
 8002e3e:	333a      	adds	r3, #58	; 0x3a
 8002e40:	4602      	mov	r2, r0
 8002e42:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002e44:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	da09      	bge.n	8002e60 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002e4c:	78fb      	ldrb	r3, [r7, #3]
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	212c      	movs	r1, #44	; 0x2c
 8002e52:	fb01 f303 	mul.w	r3, r1, r3
 8002e56:	4413      	add	r3, r2
 8002e58:	333b      	adds	r3, #59	; 0x3b
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	701a      	strb	r2, [r3, #0]
 8002e5e:	e008      	b.n	8002e72 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002e60:	78fb      	ldrb	r3, [r7, #3]
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	212c      	movs	r1, #44	; 0x2c
 8002e66:	fb01 f303 	mul.w	r3, r1, r3
 8002e6a:	4413      	add	r3, r2
 8002e6c:	333b      	adds	r3, #59	; 0x3b
 8002e6e:	2200      	movs	r2, #0
 8002e70:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002e72:	78fb      	ldrb	r3, [r7, #3]
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	212c      	movs	r1, #44	; 0x2c
 8002e78:	fb01 f303 	mul.w	r3, r1, r3
 8002e7c:	4413      	add	r3, r2
 8002e7e:	333c      	adds	r3, #60	; 0x3c
 8002e80:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002e84:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6818      	ldr	r0, [r3, #0]
 8002e8a:	787c      	ldrb	r4, [r7, #1]
 8002e8c:	78ba      	ldrb	r2, [r7, #2]
 8002e8e:	78f9      	ldrb	r1, [r7, #3]
 8002e90:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002e92:	9302      	str	r3, [sp, #8]
 8002e94:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002e98:	9301      	str	r3, [sp, #4]
 8002e9a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002e9e:	9300      	str	r3, [sp, #0]
 8002ea0:	4623      	mov	r3, r4
 8002ea2:	f004 f919 	bl	80070d8 <USB_HC_Init>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3714      	adds	r7, #20
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd90      	pop	{r4, r7, pc}

08002ebc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d101      	bne.n	8002eda <HAL_HCD_HC_Halt+0x1e>
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	e00f      	b.n	8002efa <HAL_HCD_HC_Halt+0x3e>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	78fa      	ldrb	r2, [r7, #3]
 8002ee8:	4611      	mov	r1, r2
 8002eea:	4618      	mov	r0, r3
 8002eec:	f004 fb55 	bl	800759a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
	...

08002f04 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	4608      	mov	r0, r1
 8002f0e:	4611      	mov	r1, r2
 8002f10:	461a      	mov	r2, r3
 8002f12:	4603      	mov	r3, r0
 8002f14:	70fb      	strb	r3, [r7, #3]
 8002f16:	460b      	mov	r3, r1
 8002f18:	70bb      	strb	r3, [r7, #2]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002f1e:	78fb      	ldrb	r3, [r7, #3]
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	212c      	movs	r1, #44	; 0x2c
 8002f24:	fb01 f303 	mul.w	r3, r1, r3
 8002f28:	4413      	add	r3, r2
 8002f2a:	333b      	adds	r3, #59	; 0x3b
 8002f2c:	78ba      	ldrb	r2, [r7, #2]
 8002f2e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002f30:	78fb      	ldrb	r3, [r7, #3]
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	212c      	movs	r1, #44	; 0x2c
 8002f36:	fb01 f303 	mul.w	r3, r1, r3
 8002f3a:	4413      	add	r3, r2
 8002f3c:	333f      	adds	r3, #63	; 0x3f
 8002f3e:	787a      	ldrb	r2, [r7, #1]
 8002f40:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002f42:	7c3b      	ldrb	r3, [r7, #16]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d112      	bne.n	8002f6e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002f48:	78fb      	ldrb	r3, [r7, #3]
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	212c      	movs	r1, #44	; 0x2c
 8002f4e:	fb01 f303 	mul.w	r3, r1, r3
 8002f52:	4413      	add	r3, r2
 8002f54:	3342      	adds	r3, #66	; 0x42
 8002f56:	2203      	movs	r2, #3
 8002f58:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002f5a:	78fb      	ldrb	r3, [r7, #3]
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	212c      	movs	r1, #44	; 0x2c
 8002f60:	fb01 f303 	mul.w	r3, r1, r3
 8002f64:	4413      	add	r3, r2
 8002f66:	333d      	adds	r3, #61	; 0x3d
 8002f68:	7f3a      	ldrb	r2, [r7, #28]
 8002f6a:	701a      	strb	r2, [r3, #0]
 8002f6c:	e008      	b.n	8002f80 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f6e:	78fb      	ldrb	r3, [r7, #3]
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	212c      	movs	r1, #44	; 0x2c
 8002f74:	fb01 f303 	mul.w	r3, r1, r3
 8002f78:	4413      	add	r3, r2
 8002f7a:	3342      	adds	r3, #66	; 0x42
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002f80:	787b      	ldrb	r3, [r7, #1]
 8002f82:	2b03      	cmp	r3, #3
 8002f84:	f200 80c6 	bhi.w	8003114 <HAL_HCD_HC_SubmitRequest+0x210>
 8002f88:	a201      	add	r2, pc, #4	; (adr r2, 8002f90 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f8e:	bf00      	nop
 8002f90:	08002fa1 	.word	0x08002fa1
 8002f94:	08003101 	.word	0x08003101
 8002f98:	08003005 	.word	0x08003005
 8002f9c:	08003083 	.word	0x08003083
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002fa0:	7c3b      	ldrb	r3, [r7, #16]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	f040 80b8 	bne.w	8003118 <HAL_HCD_HC_SubmitRequest+0x214>
 8002fa8:	78bb      	ldrb	r3, [r7, #2]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f040 80b4 	bne.w	8003118 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002fb0:	8b3b      	ldrh	r3, [r7, #24]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d108      	bne.n	8002fc8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002fb6:	78fb      	ldrb	r3, [r7, #3]
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	212c      	movs	r1, #44	; 0x2c
 8002fbc:	fb01 f303 	mul.w	r3, r1, r3
 8002fc0:	4413      	add	r3, r2
 8002fc2:	3355      	adds	r3, #85	; 0x55
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002fc8:	78fb      	ldrb	r3, [r7, #3]
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	212c      	movs	r1, #44	; 0x2c
 8002fce:	fb01 f303 	mul.w	r3, r1, r3
 8002fd2:	4413      	add	r3, r2
 8002fd4:	3355      	adds	r3, #85	; 0x55
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d109      	bne.n	8002ff0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002fdc:	78fb      	ldrb	r3, [r7, #3]
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	212c      	movs	r1, #44	; 0x2c
 8002fe2:	fb01 f303 	mul.w	r3, r1, r3
 8002fe6:	4413      	add	r3, r2
 8002fe8:	3342      	adds	r3, #66	; 0x42
 8002fea:	2200      	movs	r2, #0
 8002fec:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002fee:	e093      	b.n	8003118 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002ff0:	78fb      	ldrb	r3, [r7, #3]
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	212c      	movs	r1, #44	; 0x2c
 8002ff6:	fb01 f303 	mul.w	r3, r1, r3
 8002ffa:	4413      	add	r3, r2
 8002ffc:	3342      	adds	r3, #66	; 0x42
 8002ffe:	2202      	movs	r2, #2
 8003000:	701a      	strb	r2, [r3, #0]
      break;
 8003002:	e089      	b.n	8003118 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003004:	78bb      	ldrb	r3, [r7, #2]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d11d      	bne.n	8003046 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800300a:	78fb      	ldrb	r3, [r7, #3]
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	212c      	movs	r1, #44	; 0x2c
 8003010:	fb01 f303 	mul.w	r3, r1, r3
 8003014:	4413      	add	r3, r2
 8003016:	3355      	adds	r3, #85	; 0x55
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d109      	bne.n	8003032 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800301e:	78fb      	ldrb	r3, [r7, #3]
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	212c      	movs	r1, #44	; 0x2c
 8003024:	fb01 f303 	mul.w	r3, r1, r3
 8003028:	4413      	add	r3, r2
 800302a:	3342      	adds	r3, #66	; 0x42
 800302c:	2200      	movs	r2, #0
 800302e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003030:	e073      	b.n	800311a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003032:	78fb      	ldrb	r3, [r7, #3]
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	212c      	movs	r1, #44	; 0x2c
 8003038:	fb01 f303 	mul.w	r3, r1, r3
 800303c:	4413      	add	r3, r2
 800303e:	3342      	adds	r3, #66	; 0x42
 8003040:	2202      	movs	r2, #2
 8003042:	701a      	strb	r2, [r3, #0]
      break;
 8003044:	e069      	b.n	800311a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003046:	78fb      	ldrb	r3, [r7, #3]
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	212c      	movs	r1, #44	; 0x2c
 800304c:	fb01 f303 	mul.w	r3, r1, r3
 8003050:	4413      	add	r3, r2
 8003052:	3354      	adds	r3, #84	; 0x54
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d109      	bne.n	800306e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800305a:	78fb      	ldrb	r3, [r7, #3]
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	212c      	movs	r1, #44	; 0x2c
 8003060:	fb01 f303 	mul.w	r3, r1, r3
 8003064:	4413      	add	r3, r2
 8003066:	3342      	adds	r3, #66	; 0x42
 8003068:	2200      	movs	r2, #0
 800306a:	701a      	strb	r2, [r3, #0]
      break;
 800306c:	e055      	b.n	800311a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800306e:	78fb      	ldrb	r3, [r7, #3]
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	212c      	movs	r1, #44	; 0x2c
 8003074:	fb01 f303 	mul.w	r3, r1, r3
 8003078:	4413      	add	r3, r2
 800307a:	3342      	adds	r3, #66	; 0x42
 800307c:	2202      	movs	r2, #2
 800307e:	701a      	strb	r2, [r3, #0]
      break;
 8003080:	e04b      	b.n	800311a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003082:	78bb      	ldrb	r3, [r7, #2]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d11d      	bne.n	80030c4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003088:	78fb      	ldrb	r3, [r7, #3]
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	212c      	movs	r1, #44	; 0x2c
 800308e:	fb01 f303 	mul.w	r3, r1, r3
 8003092:	4413      	add	r3, r2
 8003094:	3355      	adds	r3, #85	; 0x55
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d109      	bne.n	80030b0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800309c:	78fb      	ldrb	r3, [r7, #3]
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	212c      	movs	r1, #44	; 0x2c
 80030a2:	fb01 f303 	mul.w	r3, r1, r3
 80030a6:	4413      	add	r3, r2
 80030a8:	3342      	adds	r3, #66	; 0x42
 80030aa:	2200      	movs	r2, #0
 80030ac:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80030ae:	e034      	b.n	800311a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80030b0:	78fb      	ldrb	r3, [r7, #3]
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	212c      	movs	r1, #44	; 0x2c
 80030b6:	fb01 f303 	mul.w	r3, r1, r3
 80030ba:	4413      	add	r3, r2
 80030bc:	3342      	adds	r3, #66	; 0x42
 80030be:	2202      	movs	r2, #2
 80030c0:	701a      	strb	r2, [r3, #0]
      break;
 80030c2:	e02a      	b.n	800311a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80030c4:	78fb      	ldrb	r3, [r7, #3]
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	212c      	movs	r1, #44	; 0x2c
 80030ca:	fb01 f303 	mul.w	r3, r1, r3
 80030ce:	4413      	add	r3, r2
 80030d0:	3354      	adds	r3, #84	; 0x54
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d109      	bne.n	80030ec <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80030d8:	78fb      	ldrb	r3, [r7, #3]
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	212c      	movs	r1, #44	; 0x2c
 80030de:	fb01 f303 	mul.w	r3, r1, r3
 80030e2:	4413      	add	r3, r2
 80030e4:	3342      	adds	r3, #66	; 0x42
 80030e6:	2200      	movs	r2, #0
 80030e8:	701a      	strb	r2, [r3, #0]
      break;
 80030ea:	e016      	b.n	800311a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80030ec:	78fb      	ldrb	r3, [r7, #3]
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	212c      	movs	r1, #44	; 0x2c
 80030f2:	fb01 f303 	mul.w	r3, r1, r3
 80030f6:	4413      	add	r3, r2
 80030f8:	3342      	adds	r3, #66	; 0x42
 80030fa:	2202      	movs	r2, #2
 80030fc:	701a      	strb	r2, [r3, #0]
      break;
 80030fe:	e00c      	b.n	800311a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003100:	78fb      	ldrb	r3, [r7, #3]
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	212c      	movs	r1, #44	; 0x2c
 8003106:	fb01 f303 	mul.w	r3, r1, r3
 800310a:	4413      	add	r3, r2
 800310c:	3342      	adds	r3, #66	; 0x42
 800310e:	2200      	movs	r2, #0
 8003110:	701a      	strb	r2, [r3, #0]
      break;
 8003112:	e002      	b.n	800311a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003114:	bf00      	nop
 8003116:	e000      	b.n	800311a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003118:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800311a:	78fb      	ldrb	r3, [r7, #3]
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	212c      	movs	r1, #44	; 0x2c
 8003120:	fb01 f303 	mul.w	r3, r1, r3
 8003124:	4413      	add	r3, r2
 8003126:	3344      	adds	r3, #68	; 0x44
 8003128:	697a      	ldr	r2, [r7, #20]
 800312a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800312c:	78fb      	ldrb	r3, [r7, #3]
 800312e:	8b3a      	ldrh	r2, [r7, #24]
 8003130:	6879      	ldr	r1, [r7, #4]
 8003132:	202c      	movs	r0, #44	; 0x2c
 8003134:	fb00 f303 	mul.w	r3, r0, r3
 8003138:	440b      	add	r3, r1
 800313a:	334c      	adds	r3, #76	; 0x4c
 800313c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800313e:	78fb      	ldrb	r3, [r7, #3]
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	212c      	movs	r1, #44	; 0x2c
 8003144:	fb01 f303 	mul.w	r3, r1, r3
 8003148:	4413      	add	r3, r2
 800314a:	3360      	adds	r3, #96	; 0x60
 800314c:	2200      	movs	r2, #0
 800314e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003150:	78fb      	ldrb	r3, [r7, #3]
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	212c      	movs	r1, #44	; 0x2c
 8003156:	fb01 f303 	mul.w	r3, r1, r3
 800315a:	4413      	add	r3, r2
 800315c:	3350      	adds	r3, #80	; 0x50
 800315e:	2200      	movs	r2, #0
 8003160:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003162:	78fb      	ldrb	r3, [r7, #3]
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	212c      	movs	r1, #44	; 0x2c
 8003168:	fb01 f303 	mul.w	r3, r1, r3
 800316c:	4413      	add	r3, r2
 800316e:	3339      	adds	r3, #57	; 0x39
 8003170:	78fa      	ldrb	r2, [r7, #3]
 8003172:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003174:	78fb      	ldrb	r3, [r7, #3]
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	212c      	movs	r1, #44	; 0x2c
 800317a:	fb01 f303 	mul.w	r3, r1, r3
 800317e:	4413      	add	r3, r2
 8003180:	3361      	adds	r3, #97	; 0x61
 8003182:	2200      	movs	r2, #0
 8003184:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6818      	ldr	r0, [r3, #0]
 800318a:	78fb      	ldrb	r3, [r7, #3]
 800318c:	222c      	movs	r2, #44	; 0x2c
 800318e:	fb02 f303 	mul.w	r3, r2, r3
 8003192:	3338      	adds	r3, #56	; 0x38
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	18d1      	adds	r1, r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	b2db      	uxtb	r3, r3
 800319e:	461a      	mov	r2, r3
 80031a0:	f004 f8a8 	bl	80072f4 <USB_HC_StartXfer>
 80031a4:	4603      	mov	r3, r0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop

080031b0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f003 fdcb 	bl	8006d62 <USB_GetMode>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	f040 80f6 	bne.w	80033c0 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4618      	mov	r0, r3
 80031da:	f003 fdaf 	bl	8006d3c <USB_ReadInterrupts>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f000 80ec 	beq.w	80033be <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f003 fda6 	bl	8006d3c <USB_ReadInterrupts>
 80031f0:	4603      	mov	r3, r0
 80031f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031fa:	d104      	bne.n	8003206 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003204:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4618      	mov	r0, r3
 800320c:	f003 fd96 	bl	8006d3c <USB_ReadInterrupts>
 8003210:	4603      	mov	r3, r0
 8003212:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003216:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800321a:	d104      	bne.n	8003226 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003224:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f003 fd86 	bl	8006d3c <USB_ReadInterrupts>
 8003230:	4603      	mov	r3, r0
 8003232:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003236:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800323a:	d104      	bne.n	8003246 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003244:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4618      	mov	r0, r3
 800324c:	f003 fd76 	bl	8006d3c <USB_ReadInterrupts>
 8003250:	4603      	mov	r3, r0
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b02      	cmp	r3, #2
 8003258:	d103      	bne.n	8003262 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2202      	movs	r2, #2
 8003260:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f003 fd68 	bl	8006d3c <USB_ReadInterrupts>
 800326c:	4603      	mov	r3, r0
 800326e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003272:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003276:	d11c      	bne.n	80032b2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003280:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b00      	cmp	r3, #0
 8003290:	d10f      	bne.n	80032b2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003292:	2110      	movs	r1, #16
 8003294:	6938      	ldr	r0, [r7, #16]
 8003296:	f003 fc77 	bl	8006b88 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800329a:	6938      	ldr	r0, [r7, #16]
 800329c:	f003 fc98 	bl	8006bd0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2101      	movs	r1, #1
 80032a6:	4618      	mov	r0, r3
 80032a8:	f003 fe50 	bl	8006f4c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f009 f80f 	bl	800c2d0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f003 fd40 	bl	8006d3c <USB_ReadInterrupts>
 80032bc:	4603      	mov	r3, r0
 80032be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032c6:	d102      	bne.n	80032ce <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f001 fa03 	bl	80046d4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f003 fd32 	bl	8006d3c <USB_ReadInterrupts>
 80032d8:	4603      	mov	r3, r0
 80032da:	f003 0308 	and.w	r3, r3, #8
 80032de:	2b08      	cmp	r3, #8
 80032e0:	d106      	bne.n	80032f0 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f008 ffd8 	bl	800c298 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2208      	movs	r2, #8
 80032ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f003 fd21 	bl	8006d3c <USB_ReadInterrupts>
 80032fa:	4603      	mov	r3, r0
 80032fc:	f003 0310 	and.w	r3, r3, #16
 8003300:	2b10      	cmp	r3, #16
 8003302:	d101      	bne.n	8003308 <HAL_HCD_IRQHandler+0x158>
 8003304:	2301      	movs	r3, #1
 8003306:	e000      	b.n	800330a <HAL_HCD_IRQHandler+0x15a>
 8003308:	2300      	movs	r3, #0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d012      	beq.n	8003334 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	699a      	ldr	r2, [r3, #24]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 0210 	bic.w	r2, r2, #16
 800331c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f001 f906 	bl	8004530 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	699a      	ldr	r2, [r3, #24]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f042 0210 	orr.w	r2, r2, #16
 8003332:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4618      	mov	r0, r3
 800333a:	f003 fcff 	bl	8006d3c <USB_ReadInterrupts>
 800333e:	4603      	mov	r3, r0
 8003340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003344:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003348:	d13a      	bne.n	80033c0 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4618      	mov	r0, r3
 8003350:	f004 f912 	bl	8007578 <USB_HC_ReadInterrupt>
 8003354:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003356:	2300      	movs	r3, #0
 8003358:	617b      	str	r3, [r7, #20]
 800335a:	e025      	b.n	80033a8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	f003 030f 	and.w	r3, r3, #15
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	fa22 f303 	lsr.w	r3, r2, r3
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	2b00      	cmp	r3, #0
 800336e:	d018      	beq.n	80033a2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	015a      	lsls	r2, r3, #5
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	4413      	add	r3, r2
 8003378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003382:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003386:	d106      	bne.n	8003396 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	b2db      	uxtb	r3, r3
 800338c:	4619      	mov	r1, r3
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 f8ab 	bl	80034ea <HCD_HC_IN_IRQHandler>
 8003394:	e005      	b.n	80033a2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	b2db      	uxtb	r3, r3
 800339a:	4619      	mov	r1, r3
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 fcc6 	bl	8003d2e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	3301      	adds	r3, #1
 80033a6:	617b      	str	r3, [r7, #20]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	697a      	ldr	r2, [r7, #20]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d3d4      	bcc.n	800335c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033ba:	615a      	str	r2, [r3, #20]
 80033bc:	e000      	b.n	80033c0 <HAL_HCD_IRQHandler+0x210>
      return;
 80033be:	bf00      	nop
    }
  }
}
 80033c0:	3718      	adds	r7, #24
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b082      	sub	sp, #8
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d101      	bne.n	80033dc <HAL_HCD_Start+0x16>
 80033d8:	2302      	movs	r3, #2
 80033da:	e013      	b.n	8003404 <HAL_HCD_Start+0x3e>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2101      	movs	r1, #1
 80033ea:	4618      	mov	r0, r3
 80033ec:	f003 fe12 	bl	8007014 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f003 fb58 	bl	8006aaa <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	3708      	adds	r7, #8
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800341a:	2b01      	cmp	r3, #1
 800341c:	d101      	bne.n	8003422 <HAL_HCD_Stop+0x16>
 800341e:	2302      	movs	r3, #2
 8003420:	e00d      	b.n	800343e <HAL_HCD_Stop+0x32>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4618      	mov	r0, r3
 8003430:	f004 fa0c 	bl	800784c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b082      	sub	sp, #8
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4618      	mov	r0, r3
 8003454:	f003 fdb4 	bl	8006fc0 <USB_ResetPort>
 8003458:	4603      	mov	r3, r0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003462:	b480      	push	{r7}
 8003464:	b083      	sub	sp, #12
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
 800346a:	460b      	mov	r3, r1
 800346c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800346e:	78fb      	ldrb	r3, [r7, #3]
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	212c      	movs	r1, #44	; 0x2c
 8003474:	fb01 f303 	mul.w	r3, r1, r3
 8003478:	4413      	add	r3, r2
 800347a:	3360      	adds	r3, #96	; 0x60
 800347c:	781b      	ldrb	r3, [r3, #0]
}
 800347e:	4618      	mov	r0, r3
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr

0800348a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800348a:	b480      	push	{r7}
 800348c:	b083      	sub	sp, #12
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
 8003492:	460b      	mov	r3, r1
 8003494:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003496:	78fb      	ldrb	r3, [r7, #3]
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	212c      	movs	r1, #44	; 0x2c
 800349c:	fb01 f303 	mul.w	r3, r1, r3
 80034a0:	4413      	add	r3, r2
 80034a2:	3350      	adds	r3, #80	; 0x50
 80034a4:	681b      	ldr	r3, [r3, #0]
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr

080034b2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b082      	sub	sp, #8
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4618      	mov	r0, r3
 80034c0:	f003 fdf8 	bl	80070b4 <USB_GetCurrentFrame>
 80034c4:	4603      	mov	r3, r0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b082      	sub	sp, #8
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4618      	mov	r0, r3
 80034dc:	f003 fdd3 	bl	8007086 <USB_GetHostSpeed>
 80034e0:	4603      	mov	r3, r0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3708      	adds	r7, #8
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b086      	sub	sp, #24
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
 80034f2:	460b      	mov	r3, r1
 80034f4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003500:	78fb      	ldrb	r3, [r7, #3]
 8003502:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	015a      	lsls	r2, r3, #5
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	4413      	add	r3, r2
 800350c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f003 0304 	and.w	r3, r3, #4
 8003516:	2b04      	cmp	r3, #4
 8003518:	d119      	bne.n	800354e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	015a      	lsls	r2, r3, #5
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	4413      	add	r3, r2
 8003522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003526:	461a      	mov	r2, r3
 8003528:	2304      	movs	r3, #4
 800352a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	015a      	lsls	r2, r3, #5
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	4413      	add	r3, r2
 8003534:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	0151      	lsls	r1, r2, #5
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	440a      	add	r2, r1
 8003542:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003546:	f043 0302 	orr.w	r3, r3, #2
 800354a:	60d3      	str	r3, [r2, #12]
 800354c:	e101      	b.n	8003752 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	015a      	lsls	r2, r3, #5
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	4413      	add	r3, r2
 8003556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003560:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003564:	d12b      	bne.n	80035be <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	015a      	lsls	r2, r3, #5
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	4413      	add	r3, r2
 800356e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003572:	461a      	mov	r2, r3
 8003574:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003578:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	212c      	movs	r1, #44	; 0x2c
 8003580:	fb01 f303 	mul.w	r3, r1, r3
 8003584:	4413      	add	r3, r2
 8003586:	3361      	adds	r3, #97	; 0x61
 8003588:	2207      	movs	r2, #7
 800358a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	015a      	lsls	r2, r3, #5
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	4413      	add	r3, r2
 8003594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	0151      	lsls	r1, r2, #5
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	440a      	add	r2, r1
 80035a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035a6:	f043 0302 	orr.w	r3, r3, #2
 80035aa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	b2d2      	uxtb	r2, r2
 80035b4:	4611      	mov	r1, r2
 80035b6:	4618      	mov	r0, r3
 80035b8:	f003 ffef 	bl	800759a <USB_HC_Halt>
 80035bc:	e0c9      	b.n	8003752 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	015a      	lsls	r2, r3, #5
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	4413      	add	r3, r2
 80035c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f003 0320 	and.w	r3, r3, #32
 80035d0:	2b20      	cmp	r3, #32
 80035d2:	d109      	bne.n	80035e8 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	015a      	lsls	r2, r3, #5
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	4413      	add	r3, r2
 80035dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035e0:	461a      	mov	r2, r3
 80035e2:	2320      	movs	r3, #32
 80035e4:	6093      	str	r3, [r2, #8]
 80035e6:	e0b4      	b.n	8003752 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	015a      	lsls	r2, r3, #5
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	4413      	add	r3, r2
 80035f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f003 0308 	and.w	r3, r3, #8
 80035fa:	2b08      	cmp	r3, #8
 80035fc:	d133      	bne.n	8003666 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	015a      	lsls	r2, r3, #5
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	4413      	add	r3, r2
 8003606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	0151      	lsls	r1, r2, #5
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	440a      	add	r2, r1
 8003614:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003618:	f043 0302 	orr.w	r3, r3, #2
 800361c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	212c      	movs	r1, #44	; 0x2c
 8003624:	fb01 f303 	mul.w	r3, r1, r3
 8003628:	4413      	add	r3, r2
 800362a:	3361      	adds	r3, #97	; 0x61
 800362c:	2205      	movs	r2, #5
 800362e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	015a      	lsls	r2, r3, #5
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	4413      	add	r3, r2
 8003638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800363c:	461a      	mov	r2, r3
 800363e:	2310      	movs	r3, #16
 8003640:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	015a      	lsls	r2, r3, #5
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	4413      	add	r3, r2
 800364a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800364e:	461a      	mov	r2, r3
 8003650:	2308      	movs	r3, #8
 8003652:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	b2d2      	uxtb	r2, r2
 800365c:	4611      	mov	r1, r2
 800365e:	4618      	mov	r0, r3
 8003660:	f003 ff9b 	bl	800759a <USB_HC_Halt>
 8003664:	e075      	b.n	8003752 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	015a      	lsls	r2, r3, #5
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	4413      	add	r3, r2
 800366e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800367c:	d134      	bne.n	80036e8 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	015a      	lsls	r2, r3, #5
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	4413      	add	r3, r2
 8003686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	0151      	lsls	r1, r2, #5
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	440a      	add	r2, r1
 8003694:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003698:	f043 0302 	orr.w	r3, r3, #2
 800369c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	212c      	movs	r1, #44	; 0x2c
 80036a4:	fb01 f303 	mul.w	r3, r1, r3
 80036a8:	4413      	add	r3, r2
 80036aa:	3361      	adds	r3, #97	; 0x61
 80036ac:	2208      	movs	r2, #8
 80036ae:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	015a      	lsls	r2, r3, #5
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	4413      	add	r3, r2
 80036b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036bc:	461a      	mov	r2, r3
 80036be:	2310      	movs	r3, #16
 80036c0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	015a      	lsls	r2, r3, #5
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	4413      	add	r3, r2
 80036ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ce:	461a      	mov	r2, r3
 80036d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036d4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	b2d2      	uxtb	r2, r2
 80036de:	4611      	mov	r1, r2
 80036e0:	4618      	mov	r0, r3
 80036e2:	f003 ff5a 	bl	800759a <USB_HC_Halt>
 80036e6:	e034      	b.n	8003752 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	015a      	lsls	r2, r3, #5
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	4413      	add	r3, r2
 80036f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036fa:	2b80      	cmp	r3, #128	; 0x80
 80036fc:	d129      	bne.n	8003752 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	015a      	lsls	r2, r3, #5
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	4413      	add	r3, r2
 8003706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	0151      	lsls	r1, r2, #5
 8003710:	693a      	ldr	r2, [r7, #16]
 8003712:	440a      	add	r2, r1
 8003714:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003718:	f043 0302 	orr.w	r3, r3, #2
 800371c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	212c      	movs	r1, #44	; 0x2c
 8003724:	fb01 f303 	mul.w	r3, r1, r3
 8003728:	4413      	add	r3, r2
 800372a:	3361      	adds	r3, #97	; 0x61
 800372c:	2206      	movs	r2, #6
 800372e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	b2d2      	uxtb	r2, r2
 8003738:	4611      	mov	r1, r2
 800373a:	4618      	mov	r0, r3
 800373c:	f003 ff2d 	bl	800759a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	015a      	lsls	r2, r3, #5
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	4413      	add	r3, r2
 8003748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800374c:	461a      	mov	r2, r3
 800374e:	2380      	movs	r3, #128	; 0x80
 8003750:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	015a      	lsls	r2, r3, #5
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	4413      	add	r3, r2
 800375a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003764:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003768:	d122      	bne.n	80037b0 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	015a      	lsls	r2, r3, #5
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	4413      	add	r3, r2
 8003772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	0151      	lsls	r1, r2, #5
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	440a      	add	r2, r1
 8003780:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003784:	f043 0302 	orr.w	r3, r3, #2
 8003788:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	b2d2      	uxtb	r2, r2
 8003792:	4611      	mov	r1, r2
 8003794:	4618      	mov	r0, r3
 8003796:	f003 ff00 	bl	800759a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	015a      	lsls	r2, r3, #5
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	4413      	add	r3, r2
 80037a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037a6:	461a      	mov	r2, r3
 80037a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037ac:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80037ae:	e2ba      	b.n	8003d26 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	015a      	lsls	r2, r3, #5
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	4413      	add	r3, r2
 80037b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	f040 811b 	bne.w	80039fe <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d019      	beq.n	8003804 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	212c      	movs	r1, #44	; 0x2c
 80037d6:	fb01 f303 	mul.w	r3, r1, r3
 80037da:	4413      	add	r3, r2
 80037dc:	3348      	adds	r3, #72	; 0x48
 80037de:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	0159      	lsls	r1, r3, #5
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	440b      	add	r3, r1
 80037e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80037f2:	1ad2      	subs	r2, r2, r3
 80037f4:	6879      	ldr	r1, [r7, #4]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	202c      	movs	r0, #44	; 0x2c
 80037fa:	fb00 f303 	mul.w	r3, r0, r3
 80037fe:	440b      	add	r3, r1
 8003800:	3350      	adds	r3, #80	; 0x50
 8003802:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	212c      	movs	r1, #44	; 0x2c
 800380a:	fb01 f303 	mul.w	r3, r1, r3
 800380e:	4413      	add	r3, r2
 8003810:	3361      	adds	r3, #97	; 0x61
 8003812:	2201      	movs	r2, #1
 8003814:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	212c      	movs	r1, #44	; 0x2c
 800381c:	fb01 f303 	mul.w	r3, r1, r3
 8003820:	4413      	add	r3, r2
 8003822:	335c      	adds	r3, #92	; 0x5c
 8003824:	2200      	movs	r2, #0
 8003826:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	015a      	lsls	r2, r3, #5
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	4413      	add	r3, r2
 8003830:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003834:	461a      	mov	r2, r3
 8003836:	2301      	movs	r3, #1
 8003838:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	212c      	movs	r1, #44	; 0x2c
 8003840:	fb01 f303 	mul.w	r3, r1, r3
 8003844:	4413      	add	r3, r2
 8003846:	333f      	adds	r3, #63	; 0x3f
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d009      	beq.n	8003862 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	212c      	movs	r1, #44	; 0x2c
 8003854:	fb01 f303 	mul.w	r3, r1, r3
 8003858:	4413      	add	r3, r2
 800385a:	333f      	adds	r3, #63	; 0x3f
 800385c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800385e:	2b02      	cmp	r3, #2
 8003860:	d121      	bne.n	80038a6 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	015a      	lsls	r2, r3, #5
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	4413      	add	r3, r2
 800386a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	0151      	lsls	r1, r2, #5
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	440a      	add	r2, r1
 8003878:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800387c:	f043 0302 	orr.w	r3, r3, #2
 8003880:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	b2d2      	uxtb	r2, r2
 800388a:	4611      	mov	r1, r2
 800388c:	4618      	mov	r0, r3
 800388e:	f003 fe84 	bl	800759a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	015a      	lsls	r2, r3, #5
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	4413      	add	r3, r2
 800389a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800389e:	461a      	mov	r2, r3
 80038a0:	2310      	movs	r3, #16
 80038a2:	6093      	str	r3, [r2, #8]
 80038a4:	e066      	b.n	8003974 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	212c      	movs	r1, #44	; 0x2c
 80038ac:	fb01 f303 	mul.w	r3, r1, r3
 80038b0:	4413      	add	r3, r2
 80038b2:	333f      	adds	r3, #63	; 0x3f
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	2b03      	cmp	r3, #3
 80038b8:	d127      	bne.n	800390a <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	015a      	lsls	r2, r3, #5
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	4413      	add	r3, r2
 80038c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	0151      	lsls	r1, r2, #5
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	440a      	add	r2, r1
 80038d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80038d8:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	212c      	movs	r1, #44	; 0x2c
 80038e0:	fb01 f303 	mul.w	r3, r1, r3
 80038e4:	4413      	add	r3, r2
 80038e6:	3360      	adds	r3, #96	; 0x60
 80038e8:	2201      	movs	r2, #1
 80038ea:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	b2d9      	uxtb	r1, r3
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	202c      	movs	r0, #44	; 0x2c
 80038f6:	fb00 f303 	mul.w	r3, r0, r3
 80038fa:	4413      	add	r3, r2
 80038fc:	3360      	adds	r3, #96	; 0x60
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	461a      	mov	r2, r3
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f008 fcf2 	bl	800c2ec <HAL_HCD_HC_NotifyURBChange_Callback>
 8003908:	e034      	b.n	8003974 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	212c      	movs	r1, #44	; 0x2c
 8003910:	fb01 f303 	mul.w	r3, r1, r3
 8003914:	4413      	add	r3, r2
 8003916:	333f      	adds	r3, #63	; 0x3f
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d12a      	bne.n	8003974 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	212c      	movs	r1, #44	; 0x2c
 8003924:	fb01 f303 	mul.w	r3, r1, r3
 8003928:	4413      	add	r3, r2
 800392a:	3360      	adds	r3, #96	; 0x60
 800392c:	2201      	movs	r2, #1
 800392e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	212c      	movs	r1, #44	; 0x2c
 8003936:	fb01 f303 	mul.w	r3, r1, r3
 800393a:	4413      	add	r3, r2
 800393c:	3354      	adds	r3, #84	; 0x54
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	f083 0301 	eor.w	r3, r3, #1
 8003944:	b2d8      	uxtb	r0, r3
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	212c      	movs	r1, #44	; 0x2c
 800394c:	fb01 f303 	mul.w	r3, r1, r3
 8003950:	4413      	add	r3, r2
 8003952:	3354      	adds	r3, #84	; 0x54
 8003954:	4602      	mov	r2, r0
 8003956:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	b2d9      	uxtb	r1, r3
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	202c      	movs	r0, #44	; 0x2c
 8003962:	fb00 f303 	mul.w	r3, r0, r3
 8003966:	4413      	add	r3, r2
 8003968:	3360      	adds	r3, #96	; 0x60
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	461a      	mov	r2, r3
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f008 fcbc 	bl	800c2ec <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d12b      	bne.n	80039d4 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	212c      	movs	r1, #44	; 0x2c
 8003982:	fb01 f303 	mul.w	r3, r1, r3
 8003986:	4413      	add	r3, r2
 8003988:	3348      	adds	r3, #72	; 0x48
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6879      	ldr	r1, [r7, #4]
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	202c      	movs	r0, #44	; 0x2c
 8003992:	fb00 f202 	mul.w	r2, r0, r2
 8003996:	440a      	add	r2, r1
 8003998:	3240      	adds	r2, #64	; 0x40
 800399a:	8812      	ldrh	r2, [r2, #0]
 800399c:	fbb3 f3f2 	udiv	r3, r3, r2
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f000 81be 	beq.w	8003d26 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	212c      	movs	r1, #44	; 0x2c
 80039b0:	fb01 f303 	mul.w	r3, r1, r3
 80039b4:	4413      	add	r3, r2
 80039b6:	3354      	adds	r3, #84	; 0x54
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	f083 0301 	eor.w	r3, r3, #1
 80039be:	b2d8      	uxtb	r0, r3
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	212c      	movs	r1, #44	; 0x2c
 80039c6:	fb01 f303 	mul.w	r3, r1, r3
 80039ca:	4413      	add	r3, r2
 80039cc:	3354      	adds	r3, #84	; 0x54
 80039ce:	4602      	mov	r2, r0
 80039d0:	701a      	strb	r2, [r3, #0]
}
 80039d2:	e1a8      	b.n	8003d26 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	212c      	movs	r1, #44	; 0x2c
 80039da:	fb01 f303 	mul.w	r3, r1, r3
 80039de:	4413      	add	r3, r2
 80039e0:	3354      	adds	r3, #84	; 0x54
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	f083 0301 	eor.w	r3, r3, #1
 80039e8:	b2d8      	uxtb	r0, r3
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	212c      	movs	r1, #44	; 0x2c
 80039f0:	fb01 f303 	mul.w	r3, r1, r3
 80039f4:	4413      	add	r3, r2
 80039f6:	3354      	adds	r3, #84	; 0x54
 80039f8:	4602      	mov	r2, r0
 80039fa:	701a      	strb	r2, [r3, #0]
}
 80039fc:	e193      	b.n	8003d26 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	015a      	lsls	r2, r3, #5
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	4413      	add	r3, r2
 8003a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f003 0302 	and.w	r3, r3, #2
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	f040 8106 	bne.w	8003c22 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	015a      	lsls	r2, r3, #5
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	0151      	lsls	r1, r2, #5
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	440a      	add	r2, r1
 8003a2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a30:	f023 0302 	bic.w	r3, r3, #2
 8003a34:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	212c      	movs	r1, #44	; 0x2c
 8003a3c:	fb01 f303 	mul.w	r3, r1, r3
 8003a40:	4413      	add	r3, r2
 8003a42:	3361      	adds	r3, #97	; 0x61
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d109      	bne.n	8003a5e <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	212c      	movs	r1, #44	; 0x2c
 8003a50:	fb01 f303 	mul.w	r3, r1, r3
 8003a54:	4413      	add	r3, r2
 8003a56:	3360      	adds	r3, #96	; 0x60
 8003a58:	2201      	movs	r2, #1
 8003a5a:	701a      	strb	r2, [r3, #0]
 8003a5c:	e0c9      	b.n	8003bf2 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	212c      	movs	r1, #44	; 0x2c
 8003a64:	fb01 f303 	mul.w	r3, r1, r3
 8003a68:	4413      	add	r3, r2
 8003a6a:	3361      	adds	r3, #97	; 0x61
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	2b05      	cmp	r3, #5
 8003a70:	d109      	bne.n	8003a86 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	212c      	movs	r1, #44	; 0x2c
 8003a78:	fb01 f303 	mul.w	r3, r1, r3
 8003a7c:	4413      	add	r3, r2
 8003a7e:	3360      	adds	r3, #96	; 0x60
 8003a80:	2205      	movs	r2, #5
 8003a82:	701a      	strb	r2, [r3, #0]
 8003a84:	e0b5      	b.n	8003bf2 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	212c      	movs	r1, #44	; 0x2c
 8003a8c:	fb01 f303 	mul.w	r3, r1, r3
 8003a90:	4413      	add	r3, r2
 8003a92:	3361      	adds	r3, #97	; 0x61
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	2b06      	cmp	r3, #6
 8003a98:	d009      	beq.n	8003aae <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	212c      	movs	r1, #44	; 0x2c
 8003aa0:	fb01 f303 	mul.w	r3, r1, r3
 8003aa4:	4413      	add	r3, r2
 8003aa6:	3361      	adds	r3, #97	; 0x61
 8003aa8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003aaa:	2b08      	cmp	r3, #8
 8003aac:	d150      	bne.n	8003b50 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	212c      	movs	r1, #44	; 0x2c
 8003ab4:	fb01 f303 	mul.w	r3, r1, r3
 8003ab8:	4413      	add	r3, r2
 8003aba:	335c      	adds	r3, #92	; 0x5c
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	1c5a      	adds	r2, r3, #1
 8003ac0:	6879      	ldr	r1, [r7, #4]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	202c      	movs	r0, #44	; 0x2c
 8003ac6:	fb00 f303 	mul.w	r3, r0, r3
 8003aca:	440b      	add	r3, r1
 8003acc:	335c      	adds	r3, #92	; 0x5c
 8003ace:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	212c      	movs	r1, #44	; 0x2c
 8003ad6:	fb01 f303 	mul.w	r3, r1, r3
 8003ada:	4413      	add	r3, r2
 8003adc:	335c      	adds	r3, #92	; 0x5c
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d912      	bls.n	8003b0a <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	212c      	movs	r1, #44	; 0x2c
 8003aea:	fb01 f303 	mul.w	r3, r1, r3
 8003aee:	4413      	add	r3, r2
 8003af0:	335c      	adds	r3, #92	; 0x5c
 8003af2:	2200      	movs	r2, #0
 8003af4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	212c      	movs	r1, #44	; 0x2c
 8003afc:	fb01 f303 	mul.w	r3, r1, r3
 8003b00:	4413      	add	r3, r2
 8003b02:	3360      	adds	r3, #96	; 0x60
 8003b04:	2204      	movs	r2, #4
 8003b06:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003b08:	e073      	b.n	8003bf2 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	212c      	movs	r1, #44	; 0x2c
 8003b10:	fb01 f303 	mul.w	r3, r1, r3
 8003b14:	4413      	add	r3, r2
 8003b16:	3360      	adds	r3, #96	; 0x60
 8003b18:	2202      	movs	r2, #2
 8003b1a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	015a      	lsls	r2, r3, #5
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	4413      	add	r3, r2
 8003b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b32:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b3a:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	015a      	lsls	r2, r3, #5
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	4413      	add	r3, r2
 8003b44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b48:	461a      	mov	r2, r3
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003b4e:	e050      	b.n	8003bf2 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	212c      	movs	r1, #44	; 0x2c
 8003b56:	fb01 f303 	mul.w	r3, r1, r3
 8003b5a:	4413      	add	r3, r2
 8003b5c:	3361      	adds	r3, #97	; 0x61
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	2b03      	cmp	r3, #3
 8003b62:	d122      	bne.n	8003baa <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	212c      	movs	r1, #44	; 0x2c
 8003b6a:	fb01 f303 	mul.w	r3, r1, r3
 8003b6e:	4413      	add	r3, r2
 8003b70:	3360      	adds	r3, #96	; 0x60
 8003b72:	2202      	movs	r2, #2
 8003b74:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	015a      	lsls	r2, r3, #5
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b8c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b94:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	015a      	lsls	r2, r3, #5
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	6013      	str	r3, [r2, #0]
 8003ba8:	e023      	b.n	8003bf2 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	212c      	movs	r1, #44	; 0x2c
 8003bb0:	fb01 f303 	mul.w	r3, r1, r3
 8003bb4:	4413      	add	r3, r2
 8003bb6:	3361      	adds	r3, #97	; 0x61
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	2b07      	cmp	r3, #7
 8003bbc:	d119      	bne.n	8003bf2 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	212c      	movs	r1, #44	; 0x2c
 8003bc4:	fb01 f303 	mul.w	r3, r1, r3
 8003bc8:	4413      	add	r3, r2
 8003bca:	335c      	adds	r3, #92	; 0x5c
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	1c5a      	adds	r2, r3, #1
 8003bd0:	6879      	ldr	r1, [r7, #4]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	202c      	movs	r0, #44	; 0x2c
 8003bd6:	fb00 f303 	mul.w	r3, r0, r3
 8003bda:	440b      	add	r3, r1
 8003bdc:	335c      	adds	r3, #92	; 0x5c
 8003bde:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	212c      	movs	r1, #44	; 0x2c
 8003be6:	fb01 f303 	mul.w	r3, r1, r3
 8003bea:	4413      	add	r3, r2
 8003bec:	3360      	adds	r3, #96	; 0x60
 8003bee:	2204      	movs	r2, #4
 8003bf0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	015a      	lsls	r2, r3, #5
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bfe:	461a      	mov	r2, r3
 8003c00:	2302      	movs	r3, #2
 8003c02:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	b2d9      	uxtb	r1, r3
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	202c      	movs	r0, #44	; 0x2c
 8003c0e:	fb00 f303 	mul.w	r3, r0, r3
 8003c12:	4413      	add	r3, r2
 8003c14:	3360      	adds	r3, #96	; 0x60
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	461a      	mov	r2, r3
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f008 fb66 	bl	800c2ec <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003c20:	e081      	b.n	8003d26 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	015a      	lsls	r2, r3, #5
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	4413      	add	r3, r2
 8003c2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f003 0310 	and.w	r3, r3, #16
 8003c34:	2b10      	cmp	r3, #16
 8003c36:	d176      	bne.n	8003d26 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	212c      	movs	r1, #44	; 0x2c
 8003c3e:	fb01 f303 	mul.w	r3, r1, r3
 8003c42:	4413      	add	r3, r2
 8003c44:	333f      	adds	r3, #63	; 0x3f
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	2b03      	cmp	r3, #3
 8003c4a:	d121      	bne.n	8003c90 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	212c      	movs	r1, #44	; 0x2c
 8003c52:	fb01 f303 	mul.w	r3, r1, r3
 8003c56:	4413      	add	r3, r2
 8003c58:	335c      	adds	r3, #92	; 0x5c
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	015a      	lsls	r2, r3, #5
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	4413      	add	r3, r2
 8003c66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	0151      	lsls	r1, r2, #5
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	440a      	add	r2, r1
 8003c74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c78:	f043 0302 	orr.w	r3, r3, #2
 8003c7c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	b2d2      	uxtb	r2, r2
 8003c86:	4611      	mov	r1, r2
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f003 fc86 	bl	800759a <USB_HC_Halt>
 8003c8e:	e041      	b.n	8003d14 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	212c      	movs	r1, #44	; 0x2c
 8003c96:	fb01 f303 	mul.w	r3, r1, r3
 8003c9a:	4413      	add	r3, r2
 8003c9c:	333f      	adds	r3, #63	; 0x3f
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d009      	beq.n	8003cb8 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	212c      	movs	r1, #44	; 0x2c
 8003caa:	fb01 f303 	mul.w	r3, r1, r3
 8003cae:	4413      	add	r3, r2
 8003cb0:	333f      	adds	r3, #63	; 0x3f
 8003cb2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d12d      	bne.n	8003d14 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	212c      	movs	r1, #44	; 0x2c
 8003cbe:	fb01 f303 	mul.w	r3, r1, r3
 8003cc2:	4413      	add	r3, r2
 8003cc4:	335c      	adds	r3, #92	; 0x5c
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d120      	bne.n	8003d14 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	212c      	movs	r1, #44	; 0x2c
 8003cd8:	fb01 f303 	mul.w	r3, r1, r3
 8003cdc:	4413      	add	r3, r2
 8003cde:	3361      	adds	r3, #97	; 0x61
 8003ce0:	2203      	movs	r2, #3
 8003ce2:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	015a      	lsls	r2, r3, #5
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	4413      	add	r3, r2
 8003cec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	0151      	lsls	r1, r2, #5
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	440a      	add	r2, r1
 8003cfa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003cfe:	f043 0302 	orr.w	r3, r3, #2
 8003d02:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	b2d2      	uxtb	r2, r2
 8003d0c:	4611      	mov	r1, r2
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f003 fc43 	bl	800759a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	015a      	lsls	r2, r3, #5
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d20:	461a      	mov	r2, r3
 8003d22:	2310      	movs	r3, #16
 8003d24:	6093      	str	r3, [r2, #8]
}
 8003d26:	bf00      	nop
 8003d28:	3718      	adds	r7, #24
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b088      	sub	sp, #32
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
 8003d36:	460b      	mov	r3, r1
 8003d38:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003d44:	78fb      	ldrb	r3, [r7, #3]
 8003d46:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	015a      	lsls	r2, r3, #5
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	4413      	add	r3, r2
 8003d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f003 0304 	and.w	r3, r3, #4
 8003d5a:	2b04      	cmp	r3, #4
 8003d5c:	d119      	bne.n	8003d92 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	015a      	lsls	r2, r3, #5
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	4413      	add	r3, r2
 8003d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	2304      	movs	r3, #4
 8003d6e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	015a      	lsls	r2, r3, #5
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	4413      	add	r3, r2
 8003d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	0151      	lsls	r1, r2, #5
 8003d82:	69ba      	ldr	r2, [r7, #24]
 8003d84:	440a      	add	r2, r1
 8003d86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d8a:	f043 0302 	orr.w	r3, r3, #2
 8003d8e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003d90:	e3ca      	b.n	8004528 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	015a      	lsls	r2, r3, #5
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	4413      	add	r3, r2
 8003d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f003 0320 	and.w	r3, r3, #32
 8003da4:	2b20      	cmp	r3, #32
 8003da6:	d13e      	bne.n	8003e26 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	015a      	lsls	r2, r3, #5
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	4413      	add	r3, r2
 8003db0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003db4:	461a      	mov	r2, r3
 8003db6:	2320      	movs	r3, #32
 8003db8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	212c      	movs	r1, #44	; 0x2c
 8003dc0:	fb01 f303 	mul.w	r3, r1, r3
 8003dc4:	4413      	add	r3, r2
 8003dc6:	333d      	adds	r3, #61	; 0x3d
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	f040 83ac 	bne.w	8004528 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	212c      	movs	r1, #44	; 0x2c
 8003dd6:	fb01 f303 	mul.w	r3, r1, r3
 8003dda:	4413      	add	r3, r2
 8003ddc:	333d      	adds	r3, #61	; 0x3d
 8003dde:	2200      	movs	r2, #0
 8003de0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	212c      	movs	r1, #44	; 0x2c
 8003de8:	fb01 f303 	mul.w	r3, r1, r3
 8003dec:	4413      	add	r3, r2
 8003dee:	3360      	adds	r3, #96	; 0x60
 8003df0:	2202      	movs	r2, #2
 8003df2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	015a      	lsls	r2, r3, #5
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	697a      	ldr	r2, [r7, #20]
 8003e04:	0151      	lsls	r1, r2, #5
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	440a      	add	r2, r1
 8003e0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e0e:	f043 0302 	orr.w	r3, r3, #2
 8003e12:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	b2d2      	uxtb	r2, r2
 8003e1c:	4611      	mov	r1, r2
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f003 fbbb 	bl	800759a <USB_HC_Halt>
}
 8003e24:	e380      	b.n	8004528 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	015a      	lsls	r2, r3, #5
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e3c:	d122      	bne.n	8003e84 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	015a      	lsls	r2, r3, #5
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	4413      	add	r3, r2
 8003e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	697a      	ldr	r2, [r7, #20]
 8003e4e:	0151      	lsls	r1, r2, #5
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	440a      	add	r2, r1
 8003e54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e58:	f043 0302 	orr.w	r3, r3, #2
 8003e5c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	b2d2      	uxtb	r2, r2
 8003e66:	4611      	mov	r1, r2
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f003 fb96 	bl	800759a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	015a      	lsls	r2, r3, #5
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	4413      	add	r3, r2
 8003e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e80:	6093      	str	r3, [r2, #8]
}
 8003e82:	e351      	b.n	8004528 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	015a      	lsls	r2, r3, #5
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d150      	bne.n	8003f3c <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	212c      	movs	r1, #44	; 0x2c
 8003ea0:	fb01 f303 	mul.w	r3, r1, r3
 8003ea4:	4413      	add	r3, r2
 8003ea6:	335c      	adds	r3, #92	; 0x5c
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	015a      	lsls	r2, r3, #5
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ebe:	2b40      	cmp	r3, #64	; 0x40
 8003ec0:	d111      	bne.n	8003ee6 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	212c      	movs	r1, #44	; 0x2c
 8003ec8:	fb01 f303 	mul.w	r3, r1, r3
 8003ecc:	4413      	add	r3, r2
 8003ece:	333d      	adds	r3, #61	; 0x3d
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	015a      	lsls	r2, r3, #5
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	4413      	add	r3, r2
 8003edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	2340      	movs	r3, #64	; 0x40
 8003ee4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	015a      	lsls	r2, r3, #5
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	4413      	add	r3, r2
 8003eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	0151      	lsls	r1, r2, #5
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	440a      	add	r2, r1
 8003efc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f00:	f043 0302 	orr.w	r3, r3, #2
 8003f04:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	b2d2      	uxtb	r2, r2
 8003f0e:	4611      	mov	r1, r2
 8003f10:	4618      	mov	r0, r3
 8003f12:	f003 fb42 	bl	800759a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	015a      	lsls	r2, r3, #5
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f22:	461a      	mov	r2, r3
 8003f24:	2301      	movs	r3, #1
 8003f26:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	212c      	movs	r1, #44	; 0x2c
 8003f2e:	fb01 f303 	mul.w	r3, r1, r3
 8003f32:	4413      	add	r3, r2
 8003f34:	3361      	adds	r3, #97	; 0x61
 8003f36:	2201      	movs	r2, #1
 8003f38:	701a      	strb	r2, [r3, #0]
}
 8003f3a:	e2f5      	b.n	8004528 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	015a      	lsls	r2, r3, #5
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	4413      	add	r3, r2
 8003f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f4e:	2b40      	cmp	r3, #64	; 0x40
 8003f50:	d13c      	bne.n	8003fcc <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	212c      	movs	r1, #44	; 0x2c
 8003f58:	fb01 f303 	mul.w	r3, r1, r3
 8003f5c:	4413      	add	r3, r2
 8003f5e:	3361      	adds	r3, #97	; 0x61
 8003f60:	2204      	movs	r2, #4
 8003f62:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	212c      	movs	r1, #44	; 0x2c
 8003f6a:	fb01 f303 	mul.w	r3, r1, r3
 8003f6e:	4413      	add	r3, r2
 8003f70:	333d      	adds	r3, #61	; 0x3d
 8003f72:	2201      	movs	r2, #1
 8003f74:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	212c      	movs	r1, #44	; 0x2c
 8003f7c:	fb01 f303 	mul.w	r3, r1, r3
 8003f80:	4413      	add	r3, r2
 8003f82:	335c      	adds	r3, #92	; 0x5c
 8003f84:	2200      	movs	r2, #0
 8003f86:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	015a      	lsls	r2, r3, #5
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	4413      	add	r3, r2
 8003f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	0151      	lsls	r1, r2, #5
 8003f9a:	69ba      	ldr	r2, [r7, #24]
 8003f9c:	440a      	add	r2, r1
 8003f9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fa2:	f043 0302 	orr.w	r3, r3, #2
 8003fa6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	697a      	ldr	r2, [r7, #20]
 8003fae:	b2d2      	uxtb	r2, r2
 8003fb0:	4611      	mov	r1, r2
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f003 faf1 	bl	800759a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	015a      	lsls	r2, r3, #5
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	2340      	movs	r3, #64	; 0x40
 8003fc8:	6093      	str	r3, [r2, #8]
}
 8003fca:	e2ad      	b.n	8004528 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	015a      	lsls	r2, r3, #5
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f003 0308 	and.w	r3, r3, #8
 8003fde:	2b08      	cmp	r3, #8
 8003fe0:	d12a      	bne.n	8004038 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	015a      	lsls	r2, r3, #5
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	4413      	add	r3, r2
 8003fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fee:	461a      	mov	r2, r3
 8003ff0:	2308      	movs	r3, #8
 8003ff2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	015a      	lsls	r2, r3, #5
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	0151      	lsls	r1, r2, #5
 8004006:	69ba      	ldr	r2, [r7, #24]
 8004008:	440a      	add	r2, r1
 800400a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800400e:	f043 0302 	orr.w	r3, r3, #2
 8004012:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	697a      	ldr	r2, [r7, #20]
 800401a:	b2d2      	uxtb	r2, r2
 800401c:	4611      	mov	r1, r2
 800401e:	4618      	mov	r0, r3
 8004020:	f003 fabb 	bl	800759a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	212c      	movs	r1, #44	; 0x2c
 800402a:	fb01 f303 	mul.w	r3, r1, r3
 800402e:	4413      	add	r3, r2
 8004030:	3361      	adds	r3, #97	; 0x61
 8004032:	2205      	movs	r2, #5
 8004034:	701a      	strb	r2, [r3, #0]
}
 8004036:	e277      	b.n	8004528 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	015a      	lsls	r2, r3, #5
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	4413      	add	r3, r2
 8004040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f003 0310 	and.w	r3, r3, #16
 800404a:	2b10      	cmp	r3, #16
 800404c:	d150      	bne.n	80040f0 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	212c      	movs	r1, #44	; 0x2c
 8004054:	fb01 f303 	mul.w	r3, r1, r3
 8004058:	4413      	add	r3, r2
 800405a:	335c      	adds	r3, #92	; 0x5c
 800405c:	2200      	movs	r2, #0
 800405e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	212c      	movs	r1, #44	; 0x2c
 8004066:	fb01 f303 	mul.w	r3, r1, r3
 800406a:	4413      	add	r3, r2
 800406c:	3361      	adds	r3, #97	; 0x61
 800406e:	2203      	movs	r2, #3
 8004070:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	212c      	movs	r1, #44	; 0x2c
 8004078:	fb01 f303 	mul.w	r3, r1, r3
 800407c:	4413      	add	r3, r2
 800407e:	333d      	adds	r3, #61	; 0x3d
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d112      	bne.n	80040ac <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	212c      	movs	r1, #44	; 0x2c
 800408c:	fb01 f303 	mul.w	r3, r1, r3
 8004090:	4413      	add	r3, r2
 8004092:	333c      	adds	r3, #60	; 0x3c
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d108      	bne.n	80040ac <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	212c      	movs	r1, #44	; 0x2c
 80040a0:	fb01 f303 	mul.w	r3, r1, r3
 80040a4:	4413      	add	r3, r2
 80040a6:	333d      	adds	r3, #61	; 0x3d
 80040a8:	2201      	movs	r2, #1
 80040aa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	015a      	lsls	r2, r3, #5
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	4413      	add	r3, r2
 80040b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	0151      	lsls	r1, r2, #5
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	440a      	add	r2, r1
 80040c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040c6:	f043 0302 	orr.w	r3, r3, #2
 80040ca:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	b2d2      	uxtb	r2, r2
 80040d4:	4611      	mov	r1, r2
 80040d6:	4618      	mov	r0, r3
 80040d8:	f003 fa5f 	bl	800759a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	015a      	lsls	r2, r3, #5
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	4413      	add	r3, r2
 80040e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040e8:	461a      	mov	r2, r3
 80040ea:	2310      	movs	r3, #16
 80040ec:	6093      	str	r3, [r2, #8]
}
 80040ee:	e21b      	b.n	8004528 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	015a      	lsls	r2, r3, #5
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	4413      	add	r3, r2
 80040f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004102:	2b80      	cmp	r3, #128	; 0x80
 8004104:	d174      	bne.n	80041f0 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d121      	bne.n	8004152 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	212c      	movs	r1, #44	; 0x2c
 8004114:	fb01 f303 	mul.w	r3, r1, r3
 8004118:	4413      	add	r3, r2
 800411a:	3361      	adds	r3, #97	; 0x61
 800411c:	2206      	movs	r2, #6
 800411e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	015a      	lsls	r2, r3, #5
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	4413      	add	r3, r2
 8004128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	0151      	lsls	r1, r2, #5
 8004132:	69ba      	ldr	r2, [r7, #24]
 8004134:	440a      	add	r2, r1
 8004136:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800413a:	f043 0302 	orr.w	r3, r3, #2
 800413e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	b2d2      	uxtb	r2, r2
 8004148:	4611      	mov	r1, r2
 800414a:	4618      	mov	r0, r3
 800414c:	f003 fa25 	bl	800759a <USB_HC_Halt>
 8004150:	e044      	b.n	80041dc <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	212c      	movs	r1, #44	; 0x2c
 8004158:	fb01 f303 	mul.w	r3, r1, r3
 800415c:	4413      	add	r3, r2
 800415e:	335c      	adds	r3, #92	; 0x5c
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	1c5a      	adds	r2, r3, #1
 8004164:	6879      	ldr	r1, [r7, #4]
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	202c      	movs	r0, #44	; 0x2c
 800416a:	fb00 f303 	mul.w	r3, r0, r3
 800416e:	440b      	add	r3, r1
 8004170:	335c      	adds	r3, #92	; 0x5c
 8004172:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	212c      	movs	r1, #44	; 0x2c
 800417a:	fb01 f303 	mul.w	r3, r1, r3
 800417e:	4413      	add	r3, r2
 8004180:	335c      	adds	r3, #92	; 0x5c
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2b02      	cmp	r3, #2
 8004186:	d920      	bls.n	80041ca <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	212c      	movs	r1, #44	; 0x2c
 800418e:	fb01 f303 	mul.w	r3, r1, r3
 8004192:	4413      	add	r3, r2
 8004194:	335c      	adds	r3, #92	; 0x5c
 8004196:	2200      	movs	r2, #0
 8004198:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	212c      	movs	r1, #44	; 0x2c
 80041a0:	fb01 f303 	mul.w	r3, r1, r3
 80041a4:	4413      	add	r3, r2
 80041a6:	3360      	adds	r3, #96	; 0x60
 80041a8:	2204      	movs	r2, #4
 80041aa:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	b2d9      	uxtb	r1, r3
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	202c      	movs	r0, #44	; 0x2c
 80041b6:	fb00 f303 	mul.w	r3, r0, r3
 80041ba:	4413      	add	r3, r2
 80041bc:	3360      	adds	r3, #96	; 0x60
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	461a      	mov	r2, r3
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f008 f892 	bl	800c2ec <HAL_HCD_HC_NotifyURBChange_Callback>
 80041c8:	e008      	b.n	80041dc <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	212c      	movs	r1, #44	; 0x2c
 80041d0:	fb01 f303 	mul.w	r3, r1, r3
 80041d4:	4413      	add	r3, r2
 80041d6:	3360      	adds	r3, #96	; 0x60
 80041d8:	2202      	movs	r2, #2
 80041da:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	015a      	lsls	r2, r3, #5
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	4413      	add	r3, r2
 80041e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041e8:	461a      	mov	r2, r3
 80041ea:	2380      	movs	r3, #128	; 0x80
 80041ec:	6093      	str	r3, [r2, #8]
}
 80041ee:	e19b      	b.n	8004528 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	015a      	lsls	r2, r3, #5
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	4413      	add	r3, r2
 80041f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004202:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004206:	d134      	bne.n	8004272 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	015a      	lsls	r2, r3, #5
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	4413      	add	r3, r2
 8004210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	0151      	lsls	r1, r2, #5
 800421a:	69ba      	ldr	r2, [r7, #24]
 800421c:	440a      	add	r2, r1
 800421e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004222:	f043 0302 	orr.w	r3, r3, #2
 8004226:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	b2d2      	uxtb	r2, r2
 8004230:	4611      	mov	r1, r2
 8004232:	4618      	mov	r0, r3
 8004234:	f003 f9b1 	bl	800759a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	015a      	lsls	r2, r3, #5
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	4413      	add	r3, r2
 8004240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004244:	461a      	mov	r2, r3
 8004246:	2310      	movs	r3, #16
 8004248:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	015a      	lsls	r2, r3, #5
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	4413      	add	r3, r2
 8004252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004256:	461a      	mov	r2, r3
 8004258:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800425c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	212c      	movs	r1, #44	; 0x2c
 8004264:	fb01 f303 	mul.w	r3, r1, r3
 8004268:	4413      	add	r3, r2
 800426a:	3361      	adds	r3, #97	; 0x61
 800426c:	2208      	movs	r2, #8
 800426e:	701a      	strb	r2, [r3, #0]
}
 8004270:	e15a      	b.n	8004528 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	015a      	lsls	r2, r3, #5
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	4413      	add	r3, r2
 800427a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f003 0302 	and.w	r3, r3, #2
 8004284:	2b02      	cmp	r3, #2
 8004286:	f040 814f 	bne.w	8004528 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	015a      	lsls	r2, r3, #5
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	4413      	add	r3, r2
 8004292:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	0151      	lsls	r1, r2, #5
 800429c:	69ba      	ldr	r2, [r7, #24]
 800429e:	440a      	add	r2, r1
 80042a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042a4:	f023 0302 	bic.w	r3, r3, #2
 80042a8:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	212c      	movs	r1, #44	; 0x2c
 80042b0:	fb01 f303 	mul.w	r3, r1, r3
 80042b4:	4413      	add	r3, r2
 80042b6:	3361      	adds	r3, #97	; 0x61
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d17d      	bne.n	80043ba <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	212c      	movs	r1, #44	; 0x2c
 80042c4:	fb01 f303 	mul.w	r3, r1, r3
 80042c8:	4413      	add	r3, r2
 80042ca:	3360      	adds	r3, #96	; 0x60
 80042cc:	2201      	movs	r2, #1
 80042ce:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	212c      	movs	r1, #44	; 0x2c
 80042d6:	fb01 f303 	mul.w	r3, r1, r3
 80042da:	4413      	add	r3, r2
 80042dc:	333f      	adds	r3, #63	; 0x3f
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d00a      	beq.n	80042fa <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	212c      	movs	r1, #44	; 0x2c
 80042ea:	fb01 f303 	mul.w	r3, r1, r3
 80042ee:	4413      	add	r3, r2
 80042f0:	333f      	adds	r3, #63	; 0x3f
 80042f2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80042f4:	2b03      	cmp	r3, #3
 80042f6:	f040 8100 	bne.w	80044fa <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d113      	bne.n	800432a <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	212c      	movs	r1, #44	; 0x2c
 8004308:	fb01 f303 	mul.w	r3, r1, r3
 800430c:	4413      	add	r3, r2
 800430e:	3355      	adds	r3, #85	; 0x55
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	f083 0301 	eor.w	r3, r3, #1
 8004316:	b2d8      	uxtb	r0, r3
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	212c      	movs	r1, #44	; 0x2c
 800431e:	fb01 f303 	mul.w	r3, r1, r3
 8004322:	4413      	add	r3, r2
 8004324:	3355      	adds	r3, #85	; 0x55
 8004326:	4602      	mov	r2, r0
 8004328:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	2b01      	cmp	r3, #1
 8004330:	f040 80e3 	bne.w	80044fa <HCD_HC_OUT_IRQHandler+0x7cc>
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	212c      	movs	r1, #44	; 0x2c
 800433a:	fb01 f303 	mul.w	r3, r1, r3
 800433e:	4413      	add	r3, r2
 8004340:	334c      	adds	r3, #76	; 0x4c
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	f000 80d8 	beq.w	80044fa <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	212c      	movs	r1, #44	; 0x2c
 8004350:	fb01 f303 	mul.w	r3, r1, r3
 8004354:	4413      	add	r3, r2
 8004356:	334c      	adds	r3, #76	; 0x4c
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6879      	ldr	r1, [r7, #4]
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	202c      	movs	r0, #44	; 0x2c
 8004360:	fb00 f202 	mul.w	r2, r0, r2
 8004364:	440a      	add	r2, r1
 8004366:	3240      	adds	r2, #64	; 0x40
 8004368:	8812      	ldrh	r2, [r2, #0]
 800436a:	4413      	add	r3, r2
 800436c:	3b01      	subs	r3, #1
 800436e:	6879      	ldr	r1, [r7, #4]
 8004370:	697a      	ldr	r2, [r7, #20]
 8004372:	202c      	movs	r0, #44	; 0x2c
 8004374:	fb00 f202 	mul.w	r2, r0, r2
 8004378:	440a      	add	r2, r1
 800437a:	3240      	adds	r2, #64	; 0x40
 800437c:	8812      	ldrh	r2, [r2, #0]
 800437e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004382:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b00      	cmp	r3, #0
 800438c:	f000 80b5 	beq.w	80044fa <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	212c      	movs	r1, #44	; 0x2c
 8004396:	fb01 f303 	mul.w	r3, r1, r3
 800439a:	4413      	add	r3, r2
 800439c:	3355      	adds	r3, #85	; 0x55
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	f083 0301 	eor.w	r3, r3, #1
 80043a4:	b2d8      	uxtb	r0, r3
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	212c      	movs	r1, #44	; 0x2c
 80043ac:	fb01 f303 	mul.w	r3, r1, r3
 80043b0:	4413      	add	r3, r2
 80043b2:	3355      	adds	r3, #85	; 0x55
 80043b4:	4602      	mov	r2, r0
 80043b6:	701a      	strb	r2, [r3, #0]
 80043b8:	e09f      	b.n	80044fa <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	212c      	movs	r1, #44	; 0x2c
 80043c0:	fb01 f303 	mul.w	r3, r1, r3
 80043c4:	4413      	add	r3, r2
 80043c6:	3361      	adds	r3, #97	; 0x61
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	2b03      	cmp	r3, #3
 80043cc:	d109      	bne.n	80043e2 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	212c      	movs	r1, #44	; 0x2c
 80043d4:	fb01 f303 	mul.w	r3, r1, r3
 80043d8:	4413      	add	r3, r2
 80043da:	3360      	adds	r3, #96	; 0x60
 80043dc:	2202      	movs	r2, #2
 80043de:	701a      	strb	r2, [r3, #0]
 80043e0:	e08b      	b.n	80044fa <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	212c      	movs	r1, #44	; 0x2c
 80043e8:	fb01 f303 	mul.w	r3, r1, r3
 80043ec:	4413      	add	r3, r2
 80043ee:	3361      	adds	r3, #97	; 0x61
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	2b04      	cmp	r3, #4
 80043f4:	d109      	bne.n	800440a <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	212c      	movs	r1, #44	; 0x2c
 80043fc:	fb01 f303 	mul.w	r3, r1, r3
 8004400:	4413      	add	r3, r2
 8004402:	3360      	adds	r3, #96	; 0x60
 8004404:	2202      	movs	r2, #2
 8004406:	701a      	strb	r2, [r3, #0]
 8004408:	e077      	b.n	80044fa <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	212c      	movs	r1, #44	; 0x2c
 8004410:	fb01 f303 	mul.w	r3, r1, r3
 8004414:	4413      	add	r3, r2
 8004416:	3361      	adds	r3, #97	; 0x61
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	2b05      	cmp	r3, #5
 800441c:	d109      	bne.n	8004432 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	212c      	movs	r1, #44	; 0x2c
 8004424:	fb01 f303 	mul.w	r3, r1, r3
 8004428:	4413      	add	r3, r2
 800442a:	3360      	adds	r3, #96	; 0x60
 800442c:	2205      	movs	r2, #5
 800442e:	701a      	strb	r2, [r3, #0]
 8004430:	e063      	b.n	80044fa <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	212c      	movs	r1, #44	; 0x2c
 8004438:	fb01 f303 	mul.w	r3, r1, r3
 800443c:	4413      	add	r3, r2
 800443e:	3361      	adds	r3, #97	; 0x61
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	2b06      	cmp	r3, #6
 8004444:	d009      	beq.n	800445a <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	212c      	movs	r1, #44	; 0x2c
 800444c:	fb01 f303 	mul.w	r3, r1, r3
 8004450:	4413      	add	r3, r2
 8004452:	3361      	adds	r3, #97	; 0x61
 8004454:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004456:	2b08      	cmp	r3, #8
 8004458:	d14f      	bne.n	80044fa <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	212c      	movs	r1, #44	; 0x2c
 8004460:	fb01 f303 	mul.w	r3, r1, r3
 8004464:	4413      	add	r3, r2
 8004466:	335c      	adds	r3, #92	; 0x5c
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	1c5a      	adds	r2, r3, #1
 800446c:	6879      	ldr	r1, [r7, #4]
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	202c      	movs	r0, #44	; 0x2c
 8004472:	fb00 f303 	mul.w	r3, r0, r3
 8004476:	440b      	add	r3, r1
 8004478:	335c      	adds	r3, #92	; 0x5c
 800447a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	212c      	movs	r1, #44	; 0x2c
 8004482:	fb01 f303 	mul.w	r3, r1, r3
 8004486:	4413      	add	r3, r2
 8004488:	335c      	adds	r3, #92	; 0x5c
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2b02      	cmp	r3, #2
 800448e:	d912      	bls.n	80044b6 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	212c      	movs	r1, #44	; 0x2c
 8004496:	fb01 f303 	mul.w	r3, r1, r3
 800449a:	4413      	add	r3, r2
 800449c:	335c      	adds	r3, #92	; 0x5c
 800449e:	2200      	movs	r2, #0
 80044a0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	212c      	movs	r1, #44	; 0x2c
 80044a8:	fb01 f303 	mul.w	r3, r1, r3
 80044ac:	4413      	add	r3, r2
 80044ae:	3360      	adds	r3, #96	; 0x60
 80044b0:	2204      	movs	r2, #4
 80044b2:	701a      	strb	r2, [r3, #0]
 80044b4:	e021      	b.n	80044fa <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	212c      	movs	r1, #44	; 0x2c
 80044bc:	fb01 f303 	mul.w	r3, r1, r3
 80044c0:	4413      	add	r3, r2
 80044c2:	3360      	adds	r3, #96	; 0x60
 80044c4:	2202      	movs	r2, #2
 80044c6:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	015a      	lsls	r2, r3, #5
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	4413      	add	r3, r2
 80044d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80044de:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80044e6:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	015a      	lsls	r2, r3, #5
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	4413      	add	r3, r2
 80044f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044f4:	461a      	mov	r2, r3
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	015a      	lsls	r2, r3, #5
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	4413      	add	r3, r2
 8004502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004506:	461a      	mov	r2, r3
 8004508:	2302      	movs	r3, #2
 800450a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	b2d9      	uxtb	r1, r3
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	202c      	movs	r0, #44	; 0x2c
 8004516:	fb00 f303 	mul.w	r3, r0, r3
 800451a:	4413      	add	r3, r2
 800451c:	3360      	adds	r3, #96	; 0x60
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	461a      	mov	r2, r3
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f007 fee2 	bl	800c2ec <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004528:	bf00      	nop
 800452a:	3720      	adds	r7, #32
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b08a      	sub	sp, #40	; 0x28
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800453e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004540:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	f003 030f 	and.w	r3, r3, #15
 8004550:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	0c5b      	lsrs	r3, r3, #17
 8004556:	f003 030f 	and.w	r3, r3, #15
 800455a:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	091b      	lsrs	r3, r3, #4
 8004560:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004564:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	2b02      	cmp	r3, #2
 800456a:	d004      	beq.n	8004576 <HCD_RXQLVL_IRQHandler+0x46>
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	2b05      	cmp	r3, #5
 8004570:	f000 80a9 	beq.w	80046c6 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004574:	e0aa      	b.n	80046cc <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	2b00      	cmp	r3, #0
 800457a:	f000 80a6 	beq.w	80046ca <HCD_RXQLVL_IRQHandler+0x19a>
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	212c      	movs	r1, #44	; 0x2c
 8004584:	fb01 f303 	mul.w	r3, r1, r3
 8004588:	4413      	add	r3, r2
 800458a:	3344      	adds	r3, #68	; 0x44
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	f000 809b 	beq.w	80046ca <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	212c      	movs	r1, #44	; 0x2c
 800459a:	fb01 f303 	mul.w	r3, r1, r3
 800459e:	4413      	add	r3, r2
 80045a0:	3350      	adds	r3, #80	; 0x50
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	441a      	add	r2, r3
 80045a8:	6879      	ldr	r1, [r7, #4]
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	202c      	movs	r0, #44	; 0x2c
 80045ae:	fb00 f303 	mul.w	r3, r0, r3
 80045b2:	440b      	add	r3, r1
 80045b4:	334c      	adds	r3, #76	; 0x4c
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d87a      	bhi.n	80046b2 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6818      	ldr	r0, [r3, #0]
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	212c      	movs	r1, #44	; 0x2c
 80045c6:	fb01 f303 	mul.w	r3, r1, r3
 80045ca:	4413      	add	r3, r2
 80045cc:	3344      	adds	r3, #68	; 0x44
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	b292      	uxth	r2, r2
 80045d4:	4619      	mov	r1, r3
 80045d6:	f002 fb59 	bl	8006c8c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	212c      	movs	r1, #44	; 0x2c
 80045e0:	fb01 f303 	mul.w	r3, r1, r3
 80045e4:	4413      	add	r3, r2
 80045e6:	3344      	adds	r3, #68	; 0x44
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	441a      	add	r2, r3
 80045ee:	6879      	ldr	r1, [r7, #4]
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	202c      	movs	r0, #44	; 0x2c
 80045f4:	fb00 f303 	mul.w	r3, r0, r3
 80045f8:	440b      	add	r3, r1
 80045fa:	3344      	adds	r3, #68	; 0x44
 80045fc:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	212c      	movs	r1, #44	; 0x2c
 8004604:	fb01 f303 	mul.w	r3, r1, r3
 8004608:	4413      	add	r3, r2
 800460a:	3350      	adds	r3, #80	; 0x50
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	441a      	add	r2, r3
 8004612:	6879      	ldr	r1, [r7, #4]
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	202c      	movs	r0, #44	; 0x2c
 8004618:	fb00 f303 	mul.w	r3, r0, r3
 800461c:	440b      	add	r3, r1
 800461e:	3350      	adds	r3, #80	; 0x50
 8004620:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	015a      	lsls	r2, r3, #5
 8004626:	6a3b      	ldr	r3, [r7, #32]
 8004628:	4413      	add	r3, r2
 800462a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800462e:	691b      	ldr	r3, [r3, #16]
 8004630:	0cdb      	lsrs	r3, r3, #19
 8004632:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004636:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	212c      	movs	r1, #44	; 0x2c
 800463e:	fb01 f303 	mul.w	r3, r1, r3
 8004642:	4413      	add	r3, r2
 8004644:	3340      	adds	r3, #64	; 0x40
 8004646:	881b      	ldrh	r3, [r3, #0]
 8004648:	461a      	mov	r2, r3
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	4293      	cmp	r3, r2
 800464e:	d13c      	bne.n	80046ca <HCD_RXQLVL_IRQHandler+0x19a>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d039      	beq.n	80046ca <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	015a      	lsls	r2, r3, #5
 800465a:	6a3b      	ldr	r3, [r7, #32]
 800465c:	4413      	add	r3, r2
 800465e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800466c:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004674:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	015a      	lsls	r2, r3, #5
 800467a:	6a3b      	ldr	r3, [r7, #32]
 800467c:	4413      	add	r3, r2
 800467e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004682:	461a      	mov	r2, r3
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	212c      	movs	r1, #44	; 0x2c
 800468e:	fb01 f303 	mul.w	r3, r1, r3
 8004692:	4413      	add	r3, r2
 8004694:	3354      	adds	r3, #84	; 0x54
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	f083 0301 	eor.w	r3, r3, #1
 800469c:	b2d8      	uxtb	r0, r3
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	212c      	movs	r1, #44	; 0x2c
 80046a4:	fb01 f303 	mul.w	r3, r1, r3
 80046a8:	4413      	add	r3, r2
 80046aa:	3354      	adds	r3, #84	; 0x54
 80046ac:	4602      	mov	r2, r0
 80046ae:	701a      	strb	r2, [r3, #0]
      break;
 80046b0:	e00b      	b.n	80046ca <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	212c      	movs	r1, #44	; 0x2c
 80046b8:	fb01 f303 	mul.w	r3, r1, r3
 80046bc:	4413      	add	r3, r2
 80046be:	3360      	adds	r3, #96	; 0x60
 80046c0:	2204      	movs	r2, #4
 80046c2:	701a      	strb	r2, [r3, #0]
      break;
 80046c4:	e001      	b.n	80046ca <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80046c6:	bf00      	nop
 80046c8:	e000      	b.n	80046cc <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80046ca:	bf00      	nop
  }
}
 80046cc:	bf00      	nop
 80046ce:	3728      	adds	r7, #40	; 0x28
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b086      	sub	sp, #24
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004700:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	2b02      	cmp	r3, #2
 800470a:	d10b      	bne.n	8004724 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	2b01      	cmp	r3, #1
 8004714:	d102      	bne.n	800471c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f007 fdcc 	bl	800c2b4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	f043 0302 	orr.w	r3, r3, #2
 8004722:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f003 0308 	and.w	r3, r3, #8
 800472a:	2b08      	cmp	r3, #8
 800472c:	d132      	bne.n	8004794 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	f043 0308 	orr.w	r3, r3, #8
 8004734:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f003 0304 	and.w	r3, r3, #4
 800473c:	2b04      	cmp	r3, #4
 800473e:	d126      	bne.n	800478e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	699b      	ldr	r3, [r3, #24]
 8004744:	2b02      	cmp	r3, #2
 8004746:	d113      	bne.n	8004770 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800474e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004752:	d106      	bne.n	8004762 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2102      	movs	r1, #2
 800475a:	4618      	mov	r0, r3
 800475c:	f002 fbf6 	bl	8006f4c <USB_InitFSLSPClkSel>
 8004760:	e011      	b.n	8004786 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2101      	movs	r1, #1
 8004768:	4618      	mov	r0, r3
 800476a:	f002 fbef 	bl	8006f4c <USB_InitFSLSPClkSel>
 800476e:	e00a      	b.n	8004786 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d106      	bne.n	8004786 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800477e:	461a      	mov	r2, r3
 8004780:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004784:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f007 fdc2 	bl	800c310 <HAL_HCD_PortEnabled_Callback>
 800478c:	e002      	b.n	8004794 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f007 fdcc 	bl	800c32c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f003 0320 	and.w	r3, r3, #32
 800479a:	2b20      	cmp	r3, #32
 800479c:	d103      	bne.n	80047a6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	f043 0320 	orr.w	r3, r3, #32
 80047a4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80047ac:	461a      	mov	r2, r3
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	6013      	str	r3, [r2, #0]
}
 80047b2:	bf00      	nop
 80047b4:	3718      	adds	r7, #24
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
	...

080047bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d101      	bne.n	80047ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e12b      	b.n	8004a26 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d106      	bne.n	80047e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f7fc fc66 	bl	80010b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2224      	movs	r2, #36	; 0x24
 80047ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f022 0201 	bic.w	r2, r2, #1
 80047fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800480e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800481e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004820:	f001 f9fc 	bl	8005c1c <HAL_RCC_GetPCLK1Freq>
 8004824:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	4a81      	ldr	r2, [pc, #516]	; (8004a30 <HAL_I2C_Init+0x274>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d807      	bhi.n	8004840 <HAL_I2C_Init+0x84>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	4a80      	ldr	r2, [pc, #512]	; (8004a34 <HAL_I2C_Init+0x278>)
 8004834:	4293      	cmp	r3, r2
 8004836:	bf94      	ite	ls
 8004838:	2301      	movls	r3, #1
 800483a:	2300      	movhi	r3, #0
 800483c:	b2db      	uxtb	r3, r3
 800483e:	e006      	b.n	800484e <HAL_I2C_Init+0x92>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	4a7d      	ldr	r2, [pc, #500]	; (8004a38 <HAL_I2C_Init+0x27c>)
 8004844:	4293      	cmp	r3, r2
 8004846:	bf94      	ite	ls
 8004848:	2301      	movls	r3, #1
 800484a:	2300      	movhi	r3, #0
 800484c:	b2db      	uxtb	r3, r3
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e0e7      	b.n	8004a26 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	4a78      	ldr	r2, [pc, #480]	; (8004a3c <HAL_I2C_Init+0x280>)
 800485a:	fba2 2303 	umull	r2, r3, r2, r3
 800485e:	0c9b      	lsrs	r3, r3, #18
 8004860:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68ba      	ldr	r2, [r7, #8]
 8004872:	430a      	orrs	r2, r1
 8004874:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	6a1b      	ldr	r3, [r3, #32]
 800487c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	4a6a      	ldr	r2, [pc, #424]	; (8004a30 <HAL_I2C_Init+0x274>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d802      	bhi.n	8004890 <HAL_I2C_Init+0xd4>
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	3301      	adds	r3, #1
 800488e:	e009      	b.n	80048a4 <HAL_I2C_Init+0xe8>
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004896:	fb02 f303 	mul.w	r3, r2, r3
 800489a:	4a69      	ldr	r2, [pc, #420]	; (8004a40 <HAL_I2C_Init+0x284>)
 800489c:	fba2 2303 	umull	r2, r3, r2, r3
 80048a0:	099b      	lsrs	r3, r3, #6
 80048a2:	3301      	adds	r3, #1
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	6812      	ldr	r2, [r2, #0]
 80048a8:	430b      	orrs	r3, r1
 80048aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	69db      	ldr	r3, [r3, #28]
 80048b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80048b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	495c      	ldr	r1, [pc, #368]	; (8004a30 <HAL_I2C_Init+0x274>)
 80048c0:	428b      	cmp	r3, r1
 80048c2:	d819      	bhi.n	80048f8 <HAL_I2C_Init+0x13c>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	1e59      	subs	r1, r3, #1
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	005b      	lsls	r3, r3, #1
 80048ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80048d2:	1c59      	adds	r1, r3, #1
 80048d4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80048d8:	400b      	ands	r3, r1
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00a      	beq.n	80048f4 <HAL_I2C_Init+0x138>
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	1e59      	subs	r1, r3, #1
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	005b      	lsls	r3, r3, #1
 80048e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80048ec:	3301      	adds	r3, #1
 80048ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048f2:	e051      	b.n	8004998 <HAL_I2C_Init+0x1dc>
 80048f4:	2304      	movs	r3, #4
 80048f6:	e04f      	b.n	8004998 <HAL_I2C_Init+0x1dc>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d111      	bne.n	8004924 <HAL_I2C_Init+0x168>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	1e58      	subs	r0, r3, #1
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6859      	ldr	r1, [r3, #4]
 8004908:	460b      	mov	r3, r1
 800490a:	005b      	lsls	r3, r3, #1
 800490c:	440b      	add	r3, r1
 800490e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004912:	3301      	adds	r3, #1
 8004914:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004918:	2b00      	cmp	r3, #0
 800491a:	bf0c      	ite	eq
 800491c:	2301      	moveq	r3, #1
 800491e:	2300      	movne	r3, #0
 8004920:	b2db      	uxtb	r3, r3
 8004922:	e012      	b.n	800494a <HAL_I2C_Init+0x18e>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	1e58      	subs	r0, r3, #1
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6859      	ldr	r1, [r3, #4]
 800492c:	460b      	mov	r3, r1
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	440b      	add	r3, r1
 8004932:	0099      	lsls	r1, r3, #2
 8004934:	440b      	add	r3, r1
 8004936:	fbb0 f3f3 	udiv	r3, r0, r3
 800493a:	3301      	adds	r3, #1
 800493c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004940:	2b00      	cmp	r3, #0
 8004942:	bf0c      	ite	eq
 8004944:	2301      	moveq	r3, #1
 8004946:	2300      	movne	r3, #0
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d001      	beq.n	8004952 <HAL_I2C_Init+0x196>
 800494e:	2301      	movs	r3, #1
 8004950:	e022      	b.n	8004998 <HAL_I2C_Init+0x1dc>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10e      	bne.n	8004978 <HAL_I2C_Init+0x1bc>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	1e58      	subs	r0, r3, #1
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6859      	ldr	r1, [r3, #4]
 8004962:	460b      	mov	r3, r1
 8004964:	005b      	lsls	r3, r3, #1
 8004966:	440b      	add	r3, r1
 8004968:	fbb0 f3f3 	udiv	r3, r0, r3
 800496c:	3301      	adds	r3, #1
 800496e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004972:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004976:	e00f      	b.n	8004998 <HAL_I2C_Init+0x1dc>
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	1e58      	subs	r0, r3, #1
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6859      	ldr	r1, [r3, #4]
 8004980:	460b      	mov	r3, r1
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	440b      	add	r3, r1
 8004986:	0099      	lsls	r1, r3, #2
 8004988:	440b      	add	r3, r1
 800498a:	fbb0 f3f3 	udiv	r3, r0, r3
 800498e:	3301      	adds	r3, #1
 8004990:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004994:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004998:	6879      	ldr	r1, [r7, #4]
 800499a:	6809      	ldr	r1, [r1, #0]
 800499c:	4313      	orrs	r3, r2
 800499e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	69da      	ldr	r2, [r3, #28]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a1b      	ldr	r3, [r3, #32]
 80049b2:	431a      	orrs	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	430a      	orrs	r2, r1
 80049ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80049c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	6911      	ldr	r1, [r2, #16]
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	68d2      	ldr	r2, [r2, #12]
 80049d2:	4311      	orrs	r1, r2
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	6812      	ldr	r2, [r2, #0]
 80049d8:	430b      	orrs	r3, r1
 80049da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	695a      	ldr	r2, [r3, #20]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	431a      	orrs	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	430a      	orrs	r2, r1
 80049f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f042 0201 	orr.w	r2, r2, #1
 8004a06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2220      	movs	r2, #32
 8004a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	000186a0 	.word	0x000186a0
 8004a34:	001e847f 	.word	0x001e847f
 8004a38:	003d08ff 	.word	0x003d08ff
 8004a3c:	431bde83 	.word	0x431bde83
 8004a40:	10624dd3 	.word	0x10624dd3

08004a44 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b088      	sub	sp, #32
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e128      	b.n	8004ca8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d109      	bne.n	8004a76 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a90      	ldr	r2, [pc, #576]	; (8004cb0 <HAL_I2S_Init+0x26c>)
 8004a6e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f7fc fb67 	bl	8001144 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2202      	movs	r2, #2
 8004a7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	69db      	ldr	r3, [r3, #28]
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	6812      	ldr	r2, [r2, #0]
 8004a88:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004a8c:	f023 030f 	bic.w	r3, r3, #15
 8004a90:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2202      	movs	r2, #2
 8004a98:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d060      	beq.n	8004b64 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d102      	bne.n	8004ab0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004aaa:	2310      	movs	r3, #16
 8004aac:	617b      	str	r3, [r7, #20]
 8004aae:	e001      	b.n	8004ab4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004ab0:	2320      	movs	r3, #32
 8004ab2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	2b20      	cmp	r3, #32
 8004aba:	d802      	bhi.n	8004ac2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	005b      	lsls	r3, r3, #1
 8004ac0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004ac2:	2001      	movs	r0, #1
 8004ac4:	f001 f9e6 	bl	8005e94 <HAL_RCCEx_GetPeriphCLKFreq>
 8004ac8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ad2:	d125      	bne.n	8004b20 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d010      	beq.n	8004afe <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	4413      	add	r3, r2
 8004aec:	005b      	lsls	r3, r3, #1
 8004aee:	461a      	mov	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af8:	3305      	adds	r3, #5
 8004afa:	613b      	str	r3, [r7, #16]
 8004afc:	e01f      	b.n	8004b3e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	00db      	lsls	r3, r3, #3
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b08:	4613      	mov	r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	4413      	add	r3, r2
 8004b0e:	005b      	lsls	r3, r3, #1
 8004b10:	461a      	mov	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	695b      	ldr	r3, [r3, #20]
 8004b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b1a:	3305      	adds	r3, #5
 8004b1c:	613b      	str	r3, [r7, #16]
 8004b1e:	e00e      	b.n	8004b3e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b28:	4613      	mov	r3, r2
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	4413      	add	r3, r2
 8004b2e:	005b      	lsls	r3, r3, #1
 8004b30:	461a      	mov	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b3a:	3305      	adds	r3, #5
 8004b3c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	4a5c      	ldr	r2, [pc, #368]	; (8004cb4 <HAL_I2S_Init+0x270>)
 8004b42:	fba2 2303 	umull	r2, r3, r2, r3
 8004b46:	08db      	lsrs	r3, r3, #3
 8004b48:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	f003 0301 	and.w	r3, r3, #1
 8004b50:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	085b      	lsrs	r3, r3, #1
 8004b5a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	021b      	lsls	r3, r3, #8
 8004b60:	61bb      	str	r3, [r7, #24]
 8004b62:	e003      	b.n	8004b6c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004b64:	2302      	movs	r3, #2
 8004b66:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d902      	bls.n	8004b78 <HAL_I2S_Init+0x134>
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	2bff      	cmp	r3, #255	; 0xff
 8004b76:	d907      	bls.n	8004b88 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b7c:	f043 0210 	orr.w	r2, r3, #16
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e08f      	b.n	8004ca8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	691a      	ldr	r2, [r3, #16]
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	ea42 0103 	orr.w	r1, r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	69fa      	ldr	r2, [r7, #28]
 8004b98:	430a      	orrs	r2, r1
 8004b9a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	69db      	ldr	r3, [r3, #28]
 8004ba2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004ba6:	f023 030f 	bic.w	r3, r3, #15
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	6851      	ldr	r1, [r2, #4]
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	6892      	ldr	r2, [r2, #8]
 8004bb2:	4311      	orrs	r1, r2
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	68d2      	ldr	r2, [r2, #12]
 8004bb8:	4311      	orrs	r1, r2
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	6992      	ldr	r2, [r2, #24]
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	431a      	orrs	r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bca:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a1b      	ldr	r3, [r3, #32]
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d161      	bne.n	8004c98 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a38      	ldr	r2, [pc, #224]	; (8004cb8 <HAL_I2S_Init+0x274>)
 8004bd8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a37      	ldr	r2, [pc, #220]	; (8004cbc <HAL_I2S_Init+0x278>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d101      	bne.n	8004be8 <HAL_I2S_Init+0x1a4>
 8004be4:	4b36      	ldr	r3, [pc, #216]	; (8004cc0 <HAL_I2S_Init+0x27c>)
 8004be6:	e001      	b.n	8004bec <HAL_I2S_Init+0x1a8>
 8004be8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bec:	69db      	ldr	r3, [r3, #28]
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	6812      	ldr	r2, [r2, #0]
 8004bf2:	4932      	ldr	r1, [pc, #200]	; (8004cbc <HAL_I2S_Init+0x278>)
 8004bf4:	428a      	cmp	r2, r1
 8004bf6:	d101      	bne.n	8004bfc <HAL_I2S_Init+0x1b8>
 8004bf8:	4a31      	ldr	r2, [pc, #196]	; (8004cc0 <HAL_I2S_Init+0x27c>)
 8004bfa:	e001      	b.n	8004c00 <HAL_I2S_Init+0x1bc>
 8004bfc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004c00:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004c04:	f023 030f 	bic.w	r3, r3, #15
 8004c08:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a2b      	ldr	r2, [pc, #172]	; (8004cbc <HAL_I2S_Init+0x278>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d101      	bne.n	8004c18 <HAL_I2S_Init+0x1d4>
 8004c14:	4b2a      	ldr	r3, [pc, #168]	; (8004cc0 <HAL_I2S_Init+0x27c>)
 8004c16:	e001      	b.n	8004c1c <HAL_I2S_Init+0x1d8>
 8004c18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c1c:	2202      	movs	r2, #2
 8004c1e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a25      	ldr	r2, [pc, #148]	; (8004cbc <HAL_I2S_Init+0x278>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d101      	bne.n	8004c2e <HAL_I2S_Init+0x1ea>
 8004c2a:	4b25      	ldr	r3, [pc, #148]	; (8004cc0 <HAL_I2S_Init+0x27c>)
 8004c2c:	e001      	b.n	8004c32 <HAL_I2S_Init+0x1ee>
 8004c2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c32:	69db      	ldr	r3, [r3, #28]
 8004c34:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c3e:	d003      	beq.n	8004c48 <HAL_I2S_Init+0x204>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d103      	bne.n	8004c50 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004c48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c4c:	613b      	str	r3, [r7, #16]
 8004c4e:	e001      	b.n	8004c54 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004c50:	2300      	movs	r3, #0
 8004c52:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004c72:	4313      	orrs	r3, r2
 8004c74:	b29a      	uxth	r2, r3
 8004c76:	897b      	ldrh	r3, [r7, #10]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004c80:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a0d      	ldr	r2, [pc, #52]	; (8004cbc <HAL_I2S_Init+0x278>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d101      	bne.n	8004c90 <HAL_I2S_Init+0x24c>
 8004c8c:	4b0c      	ldr	r3, [pc, #48]	; (8004cc0 <HAL_I2S_Init+0x27c>)
 8004c8e:	e001      	b.n	8004c94 <HAL_I2S_Init+0x250>
 8004c90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c94:	897a      	ldrh	r2, [r7, #10]
 8004c96:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3720      	adds	r7, #32
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	08004dbb 	.word	0x08004dbb
 8004cb4:	cccccccd 	.word	0xcccccccd
 8004cb8:	08004ed1 	.word	0x08004ed1
 8004cbc:	40003800 	.word	0x40003800
 8004cc0:	40003400 	.word	0x40003400

08004cc4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004ccc:	bf00      	nop
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0c:	881a      	ldrh	r2, [r3, #0]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d18:	1c9a      	adds	r2, r3, #2
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	3b01      	subs	r3, #1
 8004d26:	b29a      	uxth	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10e      	bne.n	8004d54 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	685a      	ldr	r2, [r3, #4]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004d44:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f7ff ffb8 	bl	8004cc4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004d54:	bf00      	nop
 8004d56:	3708      	adds	r7, #8
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68da      	ldr	r2, [r3, #12]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6e:	b292      	uxth	r2, r2
 8004d70:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d76:	1c9a      	adds	r2, r3, #2
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	3b01      	subs	r3, #1
 8004d84:	b29a      	uxth	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d10e      	bne.n	8004db2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	685a      	ldr	r2, [r3, #4]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004da2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f7ff ff93 	bl	8004cd8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004db2:	bf00      	nop
 8004db4:	3708      	adds	r7, #8
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}

08004dba <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004dba:	b580      	push	{r7, lr}
 8004dbc:	b086      	sub	sp, #24
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b04      	cmp	r3, #4
 8004dd4:	d13a      	bne.n	8004e4c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	f003 0301 	and.w	r3, r3, #1
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d109      	bne.n	8004df4 <I2S_IRQHandler+0x3a>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dea:	2b40      	cmp	r3, #64	; 0x40
 8004dec:	d102      	bne.n	8004df4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f7ff ffb4 	bl	8004d5c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dfa:	2b40      	cmp	r3, #64	; 0x40
 8004dfc:	d126      	bne.n	8004e4c <I2S_IRQHandler+0x92>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f003 0320 	and.w	r3, r3, #32
 8004e08:	2b20      	cmp	r3, #32
 8004e0a:	d11f      	bne.n	8004e4c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	685a      	ldr	r2, [r3, #4]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e1a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	613b      	str	r3, [r7, #16]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	613b      	str	r3, [r7, #16]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	613b      	str	r3, [r7, #16]
 8004e30:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2201      	movs	r2, #1
 8004e36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e3e:	f043 0202 	orr.w	r2, r3, #2
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f7ff ff50 	bl	8004cec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	2b03      	cmp	r3, #3
 8004e56:	d136      	bne.n	8004ec6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	f003 0302 	and.w	r3, r3, #2
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d109      	bne.n	8004e76 <I2S_IRQHandler+0xbc>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e6c:	2b80      	cmp	r3, #128	; 0x80
 8004e6e:	d102      	bne.n	8004e76 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f7ff ff45 	bl	8004d00 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	f003 0308 	and.w	r3, r3, #8
 8004e7c:	2b08      	cmp	r3, #8
 8004e7e:	d122      	bne.n	8004ec6 <I2S_IRQHandler+0x10c>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f003 0320 	and.w	r3, r3, #32
 8004e8a:	2b20      	cmp	r3, #32
 8004e8c:	d11b      	bne.n	8004ec6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	685a      	ldr	r2, [r3, #4]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e9c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	60fb      	str	r3, [r7, #12]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	60fb      	str	r3, [r7, #12]
 8004eaa:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb8:	f043 0204 	orr.w	r2, r3, #4
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f7ff ff13 	bl	8004cec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004ec6:	bf00      	nop
 8004ec8:	3718      	adds	r7, #24
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
	...

08004ed0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b088      	sub	sp, #32
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4aa2      	ldr	r2, [pc, #648]	; (8005170 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d101      	bne.n	8004eee <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004eea:	4ba2      	ldr	r3, [pc, #648]	; (8005174 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004eec:	e001      	b.n	8004ef2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004eee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a9b      	ldr	r2, [pc, #620]	; (8005170 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d101      	bne.n	8004f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004f08:	4b9a      	ldr	r3, [pc, #616]	; (8005174 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004f0a:	e001      	b.n	8004f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004f0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f1c:	d004      	beq.n	8004f28 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	f040 8099 	bne.w	800505a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d107      	bne.n	8004f42 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d002      	beq.n	8004f42 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f000 f925 	bl	800518c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	f003 0301 	and.w	r3, r3, #1
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d107      	bne.n	8004f5c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d002      	beq.n	8004f5c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 f9c8 	bl	80052ec <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f62:	2b40      	cmp	r3, #64	; 0x40
 8004f64:	d13a      	bne.n	8004fdc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	f003 0320 	and.w	r3, r3, #32
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d035      	beq.n	8004fdc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a7e      	ldr	r2, [pc, #504]	; (8005170 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d101      	bne.n	8004f7e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004f7a:	4b7e      	ldr	r3, [pc, #504]	; (8005174 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004f7c:	e001      	b.n	8004f82 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004f7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f82:	685a      	ldr	r2, [r3, #4]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4979      	ldr	r1, [pc, #484]	; (8005170 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004f8a:	428b      	cmp	r3, r1
 8004f8c:	d101      	bne.n	8004f92 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004f8e:	4b79      	ldr	r3, [pc, #484]	; (8005174 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004f90:	e001      	b.n	8004f96 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004f92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f96:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004f9a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	685a      	ldr	r2, [r3, #4]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004faa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004fac:	2300      	movs	r3, #0
 8004fae:	60fb      	str	r3, [r7, #12]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	60fb      	str	r3, [r7, #12]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	60fb      	str	r3, [r7, #12]
 8004fc0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fce:	f043 0202 	orr.w	r2, r3, #2
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f7ff fe88 	bl	8004cec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	f003 0308 	and.w	r3, r3, #8
 8004fe2:	2b08      	cmp	r3, #8
 8004fe4:	f040 80be 	bne.w	8005164 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	f003 0320 	and.w	r3, r3, #32
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	f000 80b8 	beq.w	8005164 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	685a      	ldr	r2, [r3, #4]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005002:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a59      	ldr	r2, [pc, #356]	; (8005170 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d101      	bne.n	8005012 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800500e:	4b59      	ldr	r3, [pc, #356]	; (8005174 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005010:	e001      	b.n	8005016 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005012:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005016:	685a      	ldr	r2, [r3, #4]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4954      	ldr	r1, [pc, #336]	; (8005170 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800501e:	428b      	cmp	r3, r1
 8005020:	d101      	bne.n	8005026 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005022:	4b54      	ldr	r3, [pc, #336]	; (8005174 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005024:	e001      	b.n	800502a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005026:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800502a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800502e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005030:	2300      	movs	r3, #0
 8005032:	60bb      	str	r3, [r7, #8]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	60bb      	str	r3, [r7, #8]
 800503c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800504a:	f043 0204 	orr.w	r2, r3, #4
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f7ff fe4a 	bl	8004cec <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005058:	e084      	b.n	8005164 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	f003 0302 	and.w	r3, r3, #2
 8005060:	2b02      	cmp	r3, #2
 8005062:	d107      	bne.n	8005074 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800506a:	2b00      	cmp	r3, #0
 800506c:	d002      	beq.n	8005074 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 f8be 	bl	80051f0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	f003 0301 	and.w	r3, r3, #1
 800507a:	2b01      	cmp	r3, #1
 800507c:	d107      	bne.n	800508e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005084:	2b00      	cmp	r3, #0
 8005086:	d002      	beq.n	800508e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f000 f8fd 	bl	8005288 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005094:	2b40      	cmp	r3, #64	; 0x40
 8005096:	d12f      	bne.n	80050f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	f003 0320 	and.w	r3, r3, #32
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d02a      	beq.n	80050f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	685a      	ldr	r2, [r3, #4]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80050b0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a2e      	ldr	r2, [pc, #184]	; (8005170 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d101      	bne.n	80050c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80050bc:	4b2d      	ldr	r3, [pc, #180]	; (8005174 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80050be:	e001      	b.n	80050c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80050c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050c4:	685a      	ldr	r2, [r3, #4]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4929      	ldr	r1, [pc, #164]	; (8005170 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80050cc:	428b      	cmp	r3, r1
 80050ce:	d101      	bne.n	80050d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80050d0:	4b28      	ldr	r3, [pc, #160]	; (8005174 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80050d2:	e001      	b.n	80050d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80050d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80050dc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ea:	f043 0202 	orr.w	r2, r3, #2
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f7ff fdfa 	bl	8004cec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	f003 0308 	and.w	r3, r3, #8
 80050fe:	2b08      	cmp	r3, #8
 8005100:	d131      	bne.n	8005166 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	f003 0320 	and.w	r3, r3, #32
 8005108:	2b00      	cmp	r3, #0
 800510a:	d02c      	beq.n	8005166 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a17      	ldr	r2, [pc, #92]	; (8005170 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d101      	bne.n	800511a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005116:	4b17      	ldr	r3, [pc, #92]	; (8005174 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005118:	e001      	b.n	800511e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800511a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4912      	ldr	r1, [pc, #72]	; (8005170 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005126:	428b      	cmp	r3, r1
 8005128:	d101      	bne.n	800512e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800512a:	4b12      	ldr	r3, [pc, #72]	; (8005174 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800512c:	e001      	b.n	8005132 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800512e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005132:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005136:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	685a      	ldr	r2, [r3, #4]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005146:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005154:	f043 0204 	orr.w	r2, r3, #4
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f7ff fdc5 	bl	8004cec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005162:	e000      	b.n	8005166 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005164:	bf00      	nop
}
 8005166:	bf00      	nop
 8005168:	3720      	adds	r7, #32
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	40003800 	.word	0x40003800
 8005174:	40003400 	.word	0x40003400

08005178 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005180:	bf00      	nop
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005198:	1c99      	adds	r1, r3, #2
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	6251      	str	r1, [r2, #36]	; 0x24
 800519e:	881a      	ldrh	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	3b01      	subs	r3, #1
 80051ae:	b29a      	uxth	r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d113      	bne.n	80051e6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	685a      	ldr	r2, [r3, #4]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80051cc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d106      	bne.n	80051e6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f7ff ffc9 	bl	8005178 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80051e6:	bf00      	nop
 80051e8:	3708      	adds	r7, #8
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
	...

080051f0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fc:	1c99      	adds	r1, r3, #2
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	6251      	str	r1, [r2, #36]	; 0x24
 8005202:	8819      	ldrh	r1, [r3, #0]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a1d      	ldr	r2, [pc, #116]	; (8005280 <I2SEx_TxISR_I2SExt+0x90>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d101      	bne.n	8005212 <I2SEx_TxISR_I2SExt+0x22>
 800520e:	4b1d      	ldr	r3, [pc, #116]	; (8005284 <I2SEx_TxISR_I2SExt+0x94>)
 8005210:	e001      	b.n	8005216 <I2SEx_TxISR_I2SExt+0x26>
 8005212:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005216:	460a      	mov	r2, r1
 8005218:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800521e:	b29b      	uxth	r3, r3
 8005220:	3b01      	subs	r3, #1
 8005222:	b29a      	uxth	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800522c:	b29b      	uxth	r3, r3
 800522e:	2b00      	cmp	r3, #0
 8005230:	d121      	bne.n	8005276 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a12      	ldr	r2, [pc, #72]	; (8005280 <I2SEx_TxISR_I2SExt+0x90>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d101      	bne.n	8005240 <I2SEx_TxISR_I2SExt+0x50>
 800523c:	4b11      	ldr	r3, [pc, #68]	; (8005284 <I2SEx_TxISR_I2SExt+0x94>)
 800523e:	e001      	b.n	8005244 <I2SEx_TxISR_I2SExt+0x54>
 8005240:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005244:	685a      	ldr	r2, [r3, #4]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	490d      	ldr	r1, [pc, #52]	; (8005280 <I2SEx_TxISR_I2SExt+0x90>)
 800524c:	428b      	cmp	r3, r1
 800524e:	d101      	bne.n	8005254 <I2SEx_TxISR_I2SExt+0x64>
 8005250:	4b0c      	ldr	r3, [pc, #48]	; (8005284 <I2SEx_TxISR_I2SExt+0x94>)
 8005252:	e001      	b.n	8005258 <I2SEx_TxISR_I2SExt+0x68>
 8005254:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005258:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800525c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005262:	b29b      	uxth	r3, r3
 8005264:	2b00      	cmp	r3, #0
 8005266:	d106      	bne.n	8005276 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f7ff ff81 	bl	8005178 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005276:	bf00      	nop
 8005278:	3708      	adds	r7, #8
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	40003800 	.word	0x40003800
 8005284:	40003400 	.word	0x40003400

08005288 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68d8      	ldr	r0, [r3, #12]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800529a:	1c99      	adds	r1, r3, #2
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	62d1      	str	r1, [r2, #44]	; 0x2c
 80052a0:	b282      	uxth	r2, r0
 80052a2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	3b01      	subs	r3, #1
 80052ac:	b29a      	uxth	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d113      	bne.n	80052e4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	685a      	ldr	r2, [r3, #4]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80052ca:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d106      	bne.n	80052e4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f7ff ff4a 	bl	8005178 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80052e4:	bf00      	nop
 80052e6:	3708      	adds	r7, #8
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a20      	ldr	r2, [pc, #128]	; (800537c <I2SEx_RxISR_I2SExt+0x90>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d101      	bne.n	8005302 <I2SEx_RxISR_I2SExt+0x16>
 80052fe:	4b20      	ldr	r3, [pc, #128]	; (8005380 <I2SEx_RxISR_I2SExt+0x94>)
 8005300:	e001      	b.n	8005306 <I2SEx_RxISR_I2SExt+0x1a>
 8005302:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005306:	68d8      	ldr	r0, [r3, #12]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530c:	1c99      	adds	r1, r3, #2
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005312:	b282      	uxth	r2, r0
 8005314:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800531a:	b29b      	uxth	r3, r3
 800531c:	3b01      	subs	r3, #1
 800531e:	b29a      	uxth	r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005328:	b29b      	uxth	r3, r3
 800532a:	2b00      	cmp	r3, #0
 800532c:	d121      	bne.n	8005372 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a12      	ldr	r2, [pc, #72]	; (800537c <I2SEx_RxISR_I2SExt+0x90>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d101      	bne.n	800533c <I2SEx_RxISR_I2SExt+0x50>
 8005338:	4b11      	ldr	r3, [pc, #68]	; (8005380 <I2SEx_RxISR_I2SExt+0x94>)
 800533a:	e001      	b.n	8005340 <I2SEx_RxISR_I2SExt+0x54>
 800533c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005340:	685a      	ldr	r2, [r3, #4]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	490d      	ldr	r1, [pc, #52]	; (800537c <I2SEx_RxISR_I2SExt+0x90>)
 8005348:	428b      	cmp	r3, r1
 800534a:	d101      	bne.n	8005350 <I2SEx_RxISR_I2SExt+0x64>
 800534c:	4b0c      	ldr	r3, [pc, #48]	; (8005380 <I2SEx_RxISR_I2SExt+0x94>)
 800534e:	e001      	b.n	8005354 <I2SEx_RxISR_I2SExt+0x68>
 8005350:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005354:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005358:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800535e:	b29b      	uxth	r3, r3
 8005360:	2b00      	cmp	r3, #0
 8005362:	d106      	bne.n	8005372 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f7ff ff03 	bl	8005178 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005372:	bf00      	nop
 8005374:	3708      	adds	r7, #8
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	40003800 	.word	0x40003800
 8005380:	40003400 	.word	0x40003400

08005384 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b086      	sub	sp, #24
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d101      	bne.n	8005396 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e264      	b.n	8005860 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0301 	and.w	r3, r3, #1
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d075      	beq.n	800548e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053a2:	4ba3      	ldr	r3, [pc, #652]	; (8005630 <HAL_RCC_OscConfig+0x2ac>)
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f003 030c 	and.w	r3, r3, #12
 80053aa:	2b04      	cmp	r3, #4
 80053ac:	d00c      	beq.n	80053c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053ae:	4ba0      	ldr	r3, [pc, #640]	; (8005630 <HAL_RCC_OscConfig+0x2ac>)
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053b6:	2b08      	cmp	r3, #8
 80053b8:	d112      	bne.n	80053e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053ba:	4b9d      	ldr	r3, [pc, #628]	; (8005630 <HAL_RCC_OscConfig+0x2ac>)
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053c6:	d10b      	bne.n	80053e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053c8:	4b99      	ldr	r3, [pc, #612]	; (8005630 <HAL_RCC_OscConfig+0x2ac>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d05b      	beq.n	800548c <HAL_RCC_OscConfig+0x108>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d157      	bne.n	800548c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e23f      	b.n	8005860 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053e8:	d106      	bne.n	80053f8 <HAL_RCC_OscConfig+0x74>
 80053ea:	4b91      	ldr	r3, [pc, #580]	; (8005630 <HAL_RCC_OscConfig+0x2ac>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a90      	ldr	r2, [pc, #576]	; (8005630 <HAL_RCC_OscConfig+0x2ac>)
 80053f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053f4:	6013      	str	r3, [r2, #0]
 80053f6:	e01d      	b.n	8005434 <HAL_RCC_OscConfig+0xb0>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005400:	d10c      	bne.n	800541c <HAL_RCC_OscConfig+0x98>
 8005402:	4b8b      	ldr	r3, [pc, #556]	; (8005630 <HAL_RCC_OscConfig+0x2ac>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a8a      	ldr	r2, [pc, #552]	; (8005630 <HAL_RCC_OscConfig+0x2ac>)
 8005408:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800540c:	6013      	str	r3, [r2, #0]
 800540e:	4b88      	ldr	r3, [pc, #544]	; (8005630 <HAL_RCC_OscConfig+0x2ac>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a87      	ldr	r2, [pc, #540]	; (8005630 <HAL_RCC_OscConfig+0x2ac>)
 8005414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005418:	6013      	str	r3, [r2, #0]
 800541a:	e00b      	b.n	8005434 <HAL_RCC_OscConfig+0xb0>
 800541c:	4b84      	ldr	r3, [pc, #528]	; (8005630 <HAL_RCC_OscConfig+0x2ac>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a83      	ldr	r2, [pc, #524]	; (8005630 <HAL_RCC_OscConfig+0x2ac>)
 8005422:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005426:	6013      	str	r3, [r2, #0]
 8005428:	4b81      	ldr	r3, [pc, #516]	; (8005630 <HAL_RCC_OscConfig+0x2ac>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a80      	ldr	r2, [pc, #512]	; (8005630 <HAL_RCC_OscConfig+0x2ac>)
 800542e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005432:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d013      	beq.n	8005464 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800543c:	f7fc f906 	bl	800164c <HAL_GetTick>
 8005440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005442:	e008      	b.n	8005456 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005444:	f7fc f902 	bl	800164c <HAL_GetTick>
 8005448:	4602      	mov	r2, r0
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	2b64      	cmp	r3, #100	; 0x64
 8005450:	d901      	bls.n	8005456 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005452:	2303      	movs	r3, #3
 8005454:	e204      	b.n	8005860 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005456:	4b76      	ldr	r3, [pc, #472]	; (8005630 <HAL_RCC_OscConfig+0x2ac>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800545e:	2b00      	cmp	r3, #0
 8005460:	d0f0      	beq.n	8005444 <HAL_RCC_OscConfig+0xc0>
 8005462:	e014      	b.n	800548e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005464:	f7fc f8f2 	bl	800164c <HAL_GetTick>
 8005468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800546a:	e008      	b.n	800547e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800546c:	f7fc f8ee 	bl	800164c <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	2b64      	cmp	r3, #100	; 0x64
 8005478:	d901      	bls.n	800547e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e1f0      	b.n	8005860 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800547e:	4b6c      	ldr	r3, [pc, #432]	; (8005630 <HAL_RCC_OscConfig+0x2ac>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1f0      	bne.n	800546c <HAL_RCC_OscConfig+0xe8>
 800548a:	e000      	b.n	800548e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800548c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0302 	and.w	r3, r3, #2
 8005496:	2b00      	cmp	r3, #0
 8005498:	d063      	beq.n	8005562 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800549a:	4b65      	ldr	r3, [pc, #404]	; (8005630 <HAL_RCC_OscConfig+0x2ac>)
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	f003 030c 	and.w	r3, r3, #12
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00b      	beq.n	80054be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054a6:	4b62      	ldr	r3, [pc, #392]	; (8005630 <HAL_RCC_OscConfig+0x2ac>)
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054ae:	2b08      	cmp	r3, #8
 80054b0:	d11c      	bne.n	80054ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054b2:	4b5f      	ldr	r3, [pc, #380]	; (8005630 <HAL_RCC_OscConfig+0x2ac>)
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d116      	bne.n	80054ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054be:	4b5c      	ldr	r3, [pc, #368]	; (8005630 <HAL_RCC_OscConfig+0x2ac>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0302 	and.w	r3, r3, #2
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d005      	beq.n	80054d6 <HAL_RCC_OscConfig+0x152>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d001      	beq.n	80054d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e1c4      	b.n	8005860 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054d6:	4b56      	ldr	r3, [pc, #344]	; (8005630 <HAL_RCC_OscConfig+0x2ac>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	00db      	lsls	r3, r3, #3
 80054e4:	4952      	ldr	r1, [pc, #328]	; (8005630 <HAL_RCC_OscConfig+0x2ac>)
 80054e6:	4313      	orrs	r3, r2
 80054e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054ea:	e03a      	b.n	8005562 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d020      	beq.n	8005536 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054f4:	4b4f      	ldr	r3, [pc, #316]	; (8005634 <HAL_RCC_OscConfig+0x2b0>)
 80054f6:	2201      	movs	r2, #1
 80054f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054fa:	f7fc f8a7 	bl	800164c <HAL_GetTick>
 80054fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005500:	e008      	b.n	8005514 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005502:	f7fc f8a3 	bl	800164c <HAL_GetTick>
 8005506:	4602      	mov	r2, r0
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	1ad3      	subs	r3, r2, r3
 800550c:	2b02      	cmp	r3, #2
 800550e:	d901      	bls.n	8005514 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005510:	2303      	movs	r3, #3
 8005512:	e1a5      	b.n	8005860 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005514:	4b46      	ldr	r3, [pc, #280]	; (8005630 <HAL_RCC_OscConfig+0x2ac>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 0302 	and.w	r3, r3, #2
 800551c:	2b00      	cmp	r3, #0
 800551e:	d0f0      	beq.n	8005502 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005520:	4b43      	ldr	r3, [pc, #268]	; (8005630 <HAL_RCC_OscConfig+0x2ac>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	00db      	lsls	r3, r3, #3
 800552e:	4940      	ldr	r1, [pc, #256]	; (8005630 <HAL_RCC_OscConfig+0x2ac>)
 8005530:	4313      	orrs	r3, r2
 8005532:	600b      	str	r3, [r1, #0]
 8005534:	e015      	b.n	8005562 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005536:	4b3f      	ldr	r3, [pc, #252]	; (8005634 <HAL_RCC_OscConfig+0x2b0>)
 8005538:	2200      	movs	r2, #0
 800553a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800553c:	f7fc f886 	bl	800164c <HAL_GetTick>
 8005540:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005542:	e008      	b.n	8005556 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005544:	f7fc f882 	bl	800164c <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	2b02      	cmp	r3, #2
 8005550:	d901      	bls.n	8005556 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e184      	b.n	8005860 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005556:	4b36      	ldr	r3, [pc, #216]	; (8005630 <HAL_RCC_OscConfig+0x2ac>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0302 	and.w	r3, r3, #2
 800555e:	2b00      	cmp	r3, #0
 8005560:	d1f0      	bne.n	8005544 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0308 	and.w	r3, r3, #8
 800556a:	2b00      	cmp	r3, #0
 800556c:	d030      	beq.n	80055d0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d016      	beq.n	80055a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005576:	4b30      	ldr	r3, [pc, #192]	; (8005638 <HAL_RCC_OscConfig+0x2b4>)
 8005578:	2201      	movs	r2, #1
 800557a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800557c:	f7fc f866 	bl	800164c <HAL_GetTick>
 8005580:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005582:	e008      	b.n	8005596 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005584:	f7fc f862 	bl	800164c <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	2b02      	cmp	r3, #2
 8005590:	d901      	bls.n	8005596 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e164      	b.n	8005860 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005596:	4b26      	ldr	r3, [pc, #152]	; (8005630 <HAL_RCC_OscConfig+0x2ac>)
 8005598:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800559a:	f003 0302 	and.w	r3, r3, #2
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d0f0      	beq.n	8005584 <HAL_RCC_OscConfig+0x200>
 80055a2:	e015      	b.n	80055d0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055a4:	4b24      	ldr	r3, [pc, #144]	; (8005638 <HAL_RCC_OscConfig+0x2b4>)
 80055a6:	2200      	movs	r2, #0
 80055a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055aa:	f7fc f84f 	bl	800164c <HAL_GetTick>
 80055ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055b0:	e008      	b.n	80055c4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055b2:	f7fc f84b 	bl	800164c <HAL_GetTick>
 80055b6:	4602      	mov	r2, r0
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d901      	bls.n	80055c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e14d      	b.n	8005860 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055c4:	4b1a      	ldr	r3, [pc, #104]	; (8005630 <HAL_RCC_OscConfig+0x2ac>)
 80055c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055c8:	f003 0302 	and.w	r3, r3, #2
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d1f0      	bne.n	80055b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0304 	and.w	r3, r3, #4
 80055d8:	2b00      	cmp	r3, #0
 80055da:	f000 80a0 	beq.w	800571e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055de:	2300      	movs	r3, #0
 80055e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055e2:	4b13      	ldr	r3, [pc, #76]	; (8005630 <HAL_RCC_OscConfig+0x2ac>)
 80055e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d10f      	bne.n	800560e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055ee:	2300      	movs	r3, #0
 80055f0:	60bb      	str	r3, [r7, #8]
 80055f2:	4b0f      	ldr	r3, [pc, #60]	; (8005630 <HAL_RCC_OscConfig+0x2ac>)
 80055f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f6:	4a0e      	ldr	r2, [pc, #56]	; (8005630 <HAL_RCC_OscConfig+0x2ac>)
 80055f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055fc:	6413      	str	r3, [r2, #64]	; 0x40
 80055fe:	4b0c      	ldr	r3, [pc, #48]	; (8005630 <HAL_RCC_OscConfig+0x2ac>)
 8005600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005606:	60bb      	str	r3, [r7, #8]
 8005608:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800560a:	2301      	movs	r3, #1
 800560c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800560e:	4b0b      	ldr	r3, [pc, #44]	; (800563c <HAL_RCC_OscConfig+0x2b8>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005616:	2b00      	cmp	r3, #0
 8005618:	d121      	bne.n	800565e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800561a:	4b08      	ldr	r3, [pc, #32]	; (800563c <HAL_RCC_OscConfig+0x2b8>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a07      	ldr	r2, [pc, #28]	; (800563c <HAL_RCC_OscConfig+0x2b8>)
 8005620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005624:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005626:	f7fc f811 	bl	800164c <HAL_GetTick>
 800562a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800562c:	e011      	b.n	8005652 <HAL_RCC_OscConfig+0x2ce>
 800562e:	bf00      	nop
 8005630:	40023800 	.word	0x40023800
 8005634:	42470000 	.word	0x42470000
 8005638:	42470e80 	.word	0x42470e80
 800563c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005640:	f7fc f804 	bl	800164c <HAL_GetTick>
 8005644:	4602      	mov	r2, r0
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	2b02      	cmp	r3, #2
 800564c:	d901      	bls.n	8005652 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800564e:	2303      	movs	r3, #3
 8005650:	e106      	b.n	8005860 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005652:	4b85      	ldr	r3, [pc, #532]	; (8005868 <HAL_RCC_OscConfig+0x4e4>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800565a:	2b00      	cmp	r3, #0
 800565c:	d0f0      	beq.n	8005640 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	2b01      	cmp	r3, #1
 8005664:	d106      	bne.n	8005674 <HAL_RCC_OscConfig+0x2f0>
 8005666:	4b81      	ldr	r3, [pc, #516]	; (800586c <HAL_RCC_OscConfig+0x4e8>)
 8005668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800566a:	4a80      	ldr	r2, [pc, #512]	; (800586c <HAL_RCC_OscConfig+0x4e8>)
 800566c:	f043 0301 	orr.w	r3, r3, #1
 8005670:	6713      	str	r3, [r2, #112]	; 0x70
 8005672:	e01c      	b.n	80056ae <HAL_RCC_OscConfig+0x32a>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	2b05      	cmp	r3, #5
 800567a:	d10c      	bne.n	8005696 <HAL_RCC_OscConfig+0x312>
 800567c:	4b7b      	ldr	r3, [pc, #492]	; (800586c <HAL_RCC_OscConfig+0x4e8>)
 800567e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005680:	4a7a      	ldr	r2, [pc, #488]	; (800586c <HAL_RCC_OscConfig+0x4e8>)
 8005682:	f043 0304 	orr.w	r3, r3, #4
 8005686:	6713      	str	r3, [r2, #112]	; 0x70
 8005688:	4b78      	ldr	r3, [pc, #480]	; (800586c <HAL_RCC_OscConfig+0x4e8>)
 800568a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800568c:	4a77      	ldr	r2, [pc, #476]	; (800586c <HAL_RCC_OscConfig+0x4e8>)
 800568e:	f043 0301 	orr.w	r3, r3, #1
 8005692:	6713      	str	r3, [r2, #112]	; 0x70
 8005694:	e00b      	b.n	80056ae <HAL_RCC_OscConfig+0x32a>
 8005696:	4b75      	ldr	r3, [pc, #468]	; (800586c <HAL_RCC_OscConfig+0x4e8>)
 8005698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800569a:	4a74      	ldr	r2, [pc, #464]	; (800586c <HAL_RCC_OscConfig+0x4e8>)
 800569c:	f023 0301 	bic.w	r3, r3, #1
 80056a0:	6713      	str	r3, [r2, #112]	; 0x70
 80056a2:	4b72      	ldr	r3, [pc, #456]	; (800586c <HAL_RCC_OscConfig+0x4e8>)
 80056a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a6:	4a71      	ldr	r2, [pc, #452]	; (800586c <HAL_RCC_OscConfig+0x4e8>)
 80056a8:	f023 0304 	bic.w	r3, r3, #4
 80056ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d015      	beq.n	80056e2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056b6:	f7fb ffc9 	bl	800164c <HAL_GetTick>
 80056ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056bc:	e00a      	b.n	80056d4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056be:	f7fb ffc5 	bl	800164c <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d901      	bls.n	80056d4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e0c5      	b.n	8005860 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056d4:	4b65      	ldr	r3, [pc, #404]	; (800586c <HAL_RCC_OscConfig+0x4e8>)
 80056d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d8:	f003 0302 	and.w	r3, r3, #2
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d0ee      	beq.n	80056be <HAL_RCC_OscConfig+0x33a>
 80056e0:	e014      	b.n	800570c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056e2:	f7fb ffb3 	bl	800164c <HAL_GetTick>
 80056e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056e8:	e00a      	b.n	8005700 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056ea:	f7fb ffaf 	bl	800164c <HAL_GetTick>
 80056ee:	4602      	mov	r2, r0
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d901      	bls.n	8005700 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e0af      	b.n	8005860 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005700:	4b5a      	ldr	r3, [pc, #360]	; (800586c <HAL_RCC_OscConfig+0x4e8>)
 8005702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005704:	f003 0302 	and.w	r3, r3, #2
 8005708:	2b00      	cmp	r3, #0
 800570a:	d1ee      	bne.n	80056ea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800570c:	7dfb      	ldrb	r3, [r7, #23]
 800570e:	2b01      	cmp	r3, #1
 8005710:	d105      	bne.n	800571e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005712:	4b56      	ldr	r3, [pc, #344]	; (800586c <HAL_RCC_OscConfig+0x4e8>)
 8005714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005716:	4a55      	ldr	r2, [pc, #340]	; (800586c <HAL_RCC_OscConfig+0x4e8>)
 8005718:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800571c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	699b      	ldr	r3, [r3, #24]
 8005722:	2b00      	cmp	r3, #0
 8005724:	f000 809b 	beq.w	800585e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005728:	4b50      	ldr	r3, [pc, #320]	; (800586c <HAL_RCC_OscConfig+0x4e8>)
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	f003 030c 	and.w	r3, r3, #12
 8005730:	2b08      	cmp	r3, #8
 8005732:	d05c      	beq.n	80057ee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	699b      	ldr	r3, [r3, #24]
 8005738:	2b02      	cmp	r3, #2
 800573a:	d141      	bne.n	80057c0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800573c:	4b4c      	ldr	r3, [pc, #304]	; (8005870 <HAL_RCC_OscConfig+0x4ec>)
 800573e:	2200      	movs	r2, #0
 8005740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005742:	f7fb ff83 	bl	800164c <HAL_GetTick>
 8005746:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005748:	e008      	b.n	800575c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800574a:	f7fb ff7f 	bl	800164c <HAL_GetTick>
 800574e:	4602      	mov	r2, r0
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	1ad3      	subs	r3, r2, r3
 8005754:	2b02      	cmp	r3, #2
 8005756:	d901      	bls.n	800575c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005758:	2303      	movs	r3, #3
 800575a:	e081      	b.n	8005860 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800575c:	4b43      	ldr	r3, [pc, #268]	; (800586c <HAL_RCC_OscConfig+0x4e8>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005764:	2b00      	cmp	r3, #0
 8005766:	d1f0      	bne.n	800574a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	69da      	ldr	r2, [r3, #28]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6a1b      	ldr	r3, [r3, #32]
 8005770:	431a      	orrs	r2, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005776:	019b      	lsls	r3, r3, #6
 8005778:	431a      	orrs	r2, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800577e:	085b      	lsrs	r3, r3, #1
 8005780:	3b01      	subs	r3, #1
 8005782:	041b      	lsls	r3, r3, #16
 8005784:	431a      	orrs	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578a:	061b      	lsls	r3, r3, #24
 800578c:	4937      	ldr	r1, [pc, #220]	; (800586c <HAL_RCC_OscConfig+0x4e8>)
 800578e:	4313      	orrs	r3, r2
 8005790:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005792:	4b37      	ldr	r3, [pc, #220]	; (8005870 <HAL_RCC_OscConfig+0x4ec>)
 8005794:	2201      	movs	r2, #1
 8005796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005798:	f7fb ff58 	bl	800164c <HAL_GetTick>
 800579c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800579e:	e008      	b.n	80057b2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057a0:	f7fb ff54 	bl	800164c <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d901      	bls.n	80057b2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e056      	b.n	8005860 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057b2:	4b2e      	ldr	r3, [pc, #184]	; (800586c <HAL_RCC_OscConfig+0x4e8>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d0f0      	beq.n	80057a0 <HAL_RCC_OscConfig+0x41c>
 80057be:	e04e      	b.n	800585e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057c0:	4b2b      	ldr	r3, [pc, #172]	; (8005870 <HAL_RCC_OscConfig+0x4ec>)
 80057c2:	2200      	movs	r2, #0
 80057c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057c6:	f7fb ff41 	bl	800164c <HAL_GetTick>
 80057ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057cc:	e008      	b.n	80057e0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057ce:	f7fb ff3d 	bl	800164c <HAL_GetTick>
 80057d2:	4602      	mov	r2, r0
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d901      	bls.n	80057e0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80057dc:	2303      	movs	r3, #3
 80057de:	e03f      	b.n	8005860 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057e0:	4b22      	ldr	r3, [pc, #136]	; (800586c <HAL_RCC_OscConfig+0x4e8>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1f0      	bne.n	80057ce <HAL_RCC_OscConfig+0x44a>
 80057ec:	e037      	b.n	800585e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	699b      	ldr	r3, [r3, #24]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d101      	bne.n	80057fa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e032      	b.n	8005860 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80057fa:	4b1c      	ldr	r3, [pc, #112]	; (800586c <HAL_RCC_OscConfig+0x4e8>)
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	699b      	ldr	r3, [r3, #24]
 8005804:	2b01      	cmp	r3, #1
 8005806:	d028      	beq.n	800585a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005812:	429a      	cmp	r2, r3
 8005814:	d121      	bne.n	800585a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005820:	429a      	cmp	r2, r3
 8005822:	d11a      	bne.n	800585a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800582a:	4013      	ands	r3, r2
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005830:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005832:	4293      	cmp	r3, r2
 8005834:	d111      	bne.n	800585a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005840:	085b      	lsrs	r3, r3, #1
 8005842:	3b01      	subs	r3, #1
 8005844:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005846:	429a      	cmp	r2, r3
 8005848:	d107      	bne.n	800585a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005854:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005856:	429a      	cmp	r2, r3
 8005858:	d001      	beq.n	800585e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e000      	b.n	8005860 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	3718      	adds	r7, #24
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	40007000 	.word	0x40007000
 800586c:	40023800 	.word	0x40023800
 8005870:	42470060 	.word	0x42470060

08005874 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d101      	bne.n	8005888 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e0cc      	b.n	8005a22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005888:	4b68      	ldr	r3, [pc, #416]	; (8005a2c <HAL_RCC_ClockConfig+0x1b8>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 0307 	and.w	r3, r3, #7
 8005890:	683a      	ldr	r2, [r7, #0]
 8005892:	429a      	cmp	r2, r3
 8005894:	d90c      	bls.n	80058b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005896:	4b65      	ldr	r3, [pc, #404]	; (8005a2c <HAL_RCC_ClockConfig+0x1b8>)
 8005898:	683a      	ldr	r2, [r7, #0]
 800589a:	b2d2      	uxtb	r2, r2
 800589c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800589e:	4b63      	ldr	r3, [pc, #396]	; (8005a2c <HAL_RCC_ClockConfig+0x1b8>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0307 	and.w	r3, r3, #7
 80058a6:	683a      	ldr	r2, [r7, #0]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d001      	beq.n	80058b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	e0b8      	b.n	8005a22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0302 	and.w	r3, r3, #2
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d020      	beq.n	80058fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 0304 	and.w	r3, r3, #4
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d005      	beq.n	80058d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058c8:	4b59      	ldr	r3, [pc, #356]	; (8005a30 <HAL_RCC_ClockConfig+0x1bc>)
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	4a58      	ldr	r2, [pc, #352]	; (8005a30 <HAL_RCC_ClockConfig+0x1bc>)
 80058ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80058d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0308 	and.w	r3, r3, #8
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d005      	beq.n	80058ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058e0:	4b53      	ldr	r3, [pc, #332]	; (8005a30 <HAL_RCC_ClockConfig+0x1bc>)
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	4a52      	ldr	r2, [pc, #328]	; (8005a30 <HAL_RCC_ClockConfig+0x1bc>)
 80058e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80058ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058ec:	4b50      	ldr	r3, [pc, #320]	; (8005a30 <HAL_RCC_ClockConfig+0x1bc>)
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	494d      	ldr	r1, [pc, #308]	; (8005a30 <HAL_RCC_ClockConfig+0x1bc>)
 80058fa:	4313      	orrs	r3, r2
 80058fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0301 	and.w	r3, r3, #1
 8005906:	2b00      	cmp	r3, #0
 8005908:	d044      	beq.n	8005994 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	2b01      	cmp	r3, #1
 8005910:	d107      	bne.n	8005922 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005912:	4b47      	ldr	r3, [pc, #284]	; (8005a30 <HAL_RCC_ClockConfig+0x1bc>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d119      	bne.n	8005952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e07f      	b.n	8005a22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	2b02      	cmp	r3, #2
 8005928:	d003      	beq.n	8005932 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800592e:	2b03      	cmp	r3, #3
 8005930:	d107      	bne.n	8005942 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005932:	4b3f      	ldr	r3, [pc, #252]	; (8005a30 <HAL_RCC_ClockConfig+0x1bc>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d109      	bne.n	8005952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e06f      	b.n	8005a22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005942:	4b3b      	ldr	r3, [pc, #236]	; (8005a30 <HAL_RCC_ClockConfig+0x1bc>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0302 	and.w	r3, r3, #2
 800594a:	2b00      	cmp	r3, #0
 800594c:	d101      	bne.n	8005952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e067      	b.n	8005a22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005952:	4b37      	ldr	r3, [pc, #220]	; (8005a30 <HAL_RCC_ClockConfig+0x1bc>)
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	f023 0203 	bic.w	r2, r3, #3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	4934      	ldr	r1, [pc, #208]	; (8005a30 <HAL_RCC_ClockConfig+0x1bc>)
 8005960:	4313      	orrs	r3, r2
 8005962:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005964:	f7fb fe72 	bl	800164c <HAL_GetTick>
 8005968:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800596a:	e00a      	b.n	8005982 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800596c:	f7fb fe6e 	bl	800164c <HAL_GetTick>
 8005970:	4602      	mov	r2, r0
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	f241 3288 	movw	r2, #5000	; 0x1388
 800597a:	4293      	cmp	r3, r2
 800597c:	d901      	bls.n	8005982 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	e04f      	b.n	8005a22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005982:	4b2b      	ldr	r3, [pc, #172]	; (8005a30 <HAL_RCC_ClockConfig+0x1bc>)
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f003 020c 	and.w	r2, r3, #12
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	429a      	cmp	r2, r3
 8005992:	d1eb      	bne.n	800596c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005994:	4b25      	ldr	r3, [pc, #148]	; (8005a2c <HAL_RCC_ClockConfig+0x1b8>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0307 	and.w	r3, r3, #7
 800599c:	683a      	ldr	r2, [r7, #0]
 800599e:	429a      	cmp	r2, r3
 80059a0:	d20c      	bcs.n	80059bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059a2:	4b22      	ldr	r3, [pc, #136]	; (8005a2c <HAL_RCC_ClockConfig+0x1b8>)
 80059a4:	683a      	ldr	r2, [r7, #0]
 80059a6:	b2d2      	uxtb	r2, r2
 80059a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059aa:	4b20      	ldr	r3, [pc, #128]	; (8005a2c <HAL_RCC_ClockConfig+0x1b8>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0307 	and.w	r3, r3, #7
 80059b2:	683a      	ldr	r2, [r7, #0]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d001      	beq.n	80059bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e032      	b.n	8005a22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0304 	and.w	r3, r3, #4
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d008      	beq.n	80059da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059c8:	4b19      	ldr	r3, [pc, #100]	; (8005a30 <HAL_RCC_ClockConfig+0x1bc>)
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	4916      	ldr	r1, [pc, #88]	; (8005a30 <HAL_RCC_ClockConfig+0x1bc>)
 80059d6:	4313      	orrs	r3, r2
 80059d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0308 	and.w	r3, r3, #8
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d009      	beq.n	80059fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059e6:	4b12      	ldr	r3, [pc, #72]	; (8005a30 <HAL_RCC_ClockConfig+0x1bc>)
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	00db      	lsls	r3, r3, #3
 80059f4:	490e      	ldr	r1, [pc, #56]	; (8005a30 <HAL_RCC_ClockConfig+0x1bc>)
 80059f6:	4313      	orrs	r3, r2
 80059f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80059fa:	f000 f821 	bl	8005a40 <HAL_RCC_GetSysClockFreq>
 80059fe:	4602      	mov	r2, r0
 8005a00:	4b0b      	ldr	r3, [pc, #44]	; (8005a30 <HAL_RCC_ClockConfig+0x1bc>)
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	091b      	lsrs	r3, r3, #4
 8005a06:	f003 030f 	and.w	r3, r3, #15
 8005a0a:	490a      	ldr	r1, [pc, #40]	; (8005a34 <HAL_RCC_ClockConfig+0x1c0>)
 8005a0c:	5ccb      	ldrb	r3, [r1, r3]
 8005a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8005a12:	4a09      	ldr	r2, [pc, #36]	; (8005a38 <HAL_RCC_ClockConfig+0x1c4>)
 8005a14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a16:	4b09      	ldr	r3, [pc, #36]	; (8005a3c <HAL_RCC_ClockConfig+0x1c8>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f7fb fcc2 	bl	80013a4 <HAL_InitTick>

  return HAL_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3710      	adds	r7, #16
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	40023c00 	.word	0x40023c00
 8005a30:	40023800 	.word	0x40023800
 8005a34:	0800cadc 	.word	0x0800cadc
 8005a38:	20000000 	.word	0x20000000
 8005a3c:	20000004 	.word	0x20000004

08005a40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a40:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005a44:	b084      	sub	sp, #16
 8005a46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	607b      	str	r3, [r7, #4]
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	60fb      	str	r3, [r7, #12]
 8005a50:	2300      	movs	r3, #0
 8005a52:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005a54:	2300      	movs	r3, #0
 8005a56:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a58:	4b67      	ldr	r3, [pc, #412]	; (8005bf8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	f003 030c 	and.w	r3, r3, #12
 8005a60:	2b08      	cmp	r3, #8
 8005a62:	d00d      	beq.n	8005a80 <HAL_RCC_GetSysClockFreq+0x40>
 8005a64:	2b08      	cmp	r3, #8
 8005a66:	f200 80bd 	bhi.w	8005be4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d002      	beq.n	8005a74 <HAL_RCC_GetSysClockFreq+0x34>
 8005a6e:	2b04      	cmp	r3, #4
 8005a70:	d003      	beq.n	8005a7a <HAL_RCC_GetSysClockFreq+0x3a>
 8005a72:	e0b7      	b.n	8005be4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a74:	4b61      	ldr	r3, [pc, #388]	; (8005bfc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005a76:	60bb      	str	r3, [r7, #8]
       break;
 8005a78:	e0b7      	b.n	8005bea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a7a:	4b61      	ldr	r3, [pc, #388]	; (8005c00 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005a7c:	60bb      	str	r3, [r7, #8]
      break;
 8005a7e:	e0b4      	b.n	8005bea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a80:	4b5d      	ldr	r3, [pc, #372]	; (8005bf8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a88:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a8a:	4b5b      	ldr	r3, [pc, #364]	; (8005bf8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d04d      	beq.n	8005b32 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a96:	4b58      	ldr	r3, [pc, #352]	; (8005bf8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	099b      	lsrs	r3, r3, #6
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	f04f 0300 	mov.w	r3, #0
 8005aa2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005aa6:	f04f 0100 	mov.w	r1, #0
 8005aaa:	ea02 0800 	and.w	r8, r2, r0
 8005aae:	ea03 0901 	and.w	r9, r3, r1
 8005ab2:	4640      	mov	r0, r8
 8005ab4:	4649      	mov	r1, r9
 8005ab6:	f04f 0200 	mov.w	r2, #0
 8005aba:	f04f 0300 	mov.w	r3, #0
 8005abe:	014b      	lsls	r3, r1, #5
 8005ac0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005ac4:	0142      	lsls	r2, r0, #5
 8005ac6:	4610      	mov	r0, r2
 8005ac8:	4619      	mov	r1, r3
 8005aca:	ebb0 0008 	subs.w	r0, r0, r8
 8005ace:	eb61 0109 	sbc.w	r1, r1, r9
 8005ad2:	f04f 0200 	mov.w	r2, #0
 8005ad6:	f04f 0300 	mov.w	r3, #0
 8005ada:	018b      	lsls	r3, r1, #6
 8005adc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005ae0:	0182      	lsls	r2, r0, #6
 8005ae2:	1a12      	subs	r2, r2, r0
 8005ae4:	eb63 0301 	sbc.w	r3, r3, r1
 8005ae8:	f04f 0000 	mov.w	r0, #0
 8005aec:	f04f 0100 	mov.w	r1, #0
 8005af0:	00d9      	lsls	r1, r3, #3
 8005af2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005af6:	00d0      	lsls	r0, r2, #3
 8005af8:	4602      	mov	r2, r0
 8005afa:	460b      	mov	r3, r1
 8005afc:	eb12 0208 	adds.w	r2, r2, r8
 8005b00:	eb43 0309 	adc.w	r3, r3, r9
 8005b04:	f04f 0000 	mov.w	r0, #0
 8005b08:	f04f 0100 	mov.w	r1, #0
 8005b0c:	0259      	lsls	r1, r3, #9
 8005b0e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005b12:	0250      	lsls	r0, r2, #9
 8005b14:	4602      	mov	r2, r0
 8005b16:	460b      	mov	r3, r1
 8005b18:	4610      	mov	r0, r2
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	461a      	mov	r2, r3
 8005b20:	f04f 0300 	mov.w	r3, #0
 8005b24:	f7fa fb54 	bl	80001d0 <__aeabi_uldivmod>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	60fb      	str	r3, [r7, #12]
 8005b30:	e04a      	b.n	8005bc8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b32:	4b31      	ldr	r3, [pc, #196]	; (8005bf8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	099b      	lsrs	r3, r3, #6
 8005b38:	461a      	mov	r2, r3
 8005b3a:	f04f 0300 	mov.w	r3, #0
 8005b3e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005b42:	f04f 0100 	mov.w	r1, #0
 8005b46:	ea02 0400 	and.w	r4, r2, r0
 8005b4a:	ea03 0501 	and.w	r5, r3, r1
 8005b4e:	4620      	mov	r0, r4
 8005b50:	4629      	mov	r1, r5
 8005b52:	f04f 0200 	mov.w	r2, #0
 8005b56:	f04f 0300 	mov.w	r3, #0
 8005b5a:	014b      	lsls	r3, r1, #5
 8005b5c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005b60:	0142      	lsls	r2, r0, #5
 8005b62:	4610      	mov	r0, r2
 8005b64:	4619      	mov	r1, r3
 8005b66:	1b00      	subs	r0, r0, r4
 8005b68:	eb61 0105 	sbc.w	r1, r1, r5
 8005b6c:	f04f 0200 	mov.w	r2, #0
 8005b70:	f04f 0300 	mov.w	r3, #0
 8005b74:	018b      	lsls	r3, r1, #6
 8005b76:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005b7a:	0182      	lsls	r2, r0, #6
 8005b7c:	1a12      	subs	r2, r2, r0
 8005b7e:	eb63 0301 	sbc.w	r3, r3, r1
 8005b82:	f04f 0000 	mov.w	r0, #0
 8005b86:	f04f 0100 	mov.w	r1, #0
 8005b8a:	00d9      	lsls	r1, r3, #3
 8005b8c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b90:	00d0      	lsls	r0, r2, #3
 8005b92:	4602      	mov	r2, r0
 8005b94:	460b      	mov	r3, r1
 8005b96:	1912      	adds	r2, r2, r4
 8005b98:	eb45 0303 	adc.w	r3, r5, r3
 8005b9c:	f04f 0000 	mov.w	r0, #0
 8005ba0:	f04f 0100 	mov.w	r1, #0
 8005ba4:	0299      	lsls	r1, r3, #10
 8005ba6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005baa:	0290      	lsls	r0, r2, #10
 8005bac:	4602      	mov	r2, r0
 8005bae:	460b      	mov	r3, r1
 8005bb0:	4610      	mov	r0, r2
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	f04f 0300 	mov.w	r3, #0
 8005bbc:	f7fa fb08 	bl	80001d0 <__aeabi_uldivmod>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005bc8:	4b0b      	ldr	r3, [pc, #44]	; (8005bf8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	0c1b      	lsrs	r3, r3, #16
 8005bce:	f003 0303 	and.w	r3, r3, #3
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	005b      	lsls	r3, r3, #1
 8005bd6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005be0:	60bb      	str	r3, [r7, #8]
      break;
 8005be2:	e002      	b.n	8005bea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005be4:	4b05      	ldr	r3, [pc, #20]	; (8005bfc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005be6:	60bb      	str	r3, [r7, #8]
      break;
 8005be8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005bea:	68bb      	ldr	r3, [r7, #8]
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3710      	adds	r7, #16
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005bf6:	bf00      	nop
 8005bf8:	40023800 	.word	0x40023800
 8005bfc:	00f42400 	.word	0x00f42400
 8005c00:	007a1200 	.word	0x007a1200

08005c04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c04:	b480      	push	{r7}
 8005c06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c08:	4b03      	ldr	r3, [pc, #12]	; (8005c18 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	20000000 	.word	0x20000000

08005c1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c20:	f7ff fff0 	bl	8005c04 <HAL_RCC_GetHCLKFreq>
 8005c24:	4602      	mov	r2, r0
 8005c26:	4b05      	ldr	r3, [pc, #20]	; (8005c3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	0a9b      	lsrs	r3, r3, #10
 8005c2c:	f003 0307 	and.w	r3, r3, #7
 8005c30:	4903      	ldr	r1, [pc, #12]	; (8005c40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c32:	5ccb      	ldrb	r3, [r1, r3]
 8005c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	bd80      	pop	{r7, pc}
 8005c3c:	40023800 	.word	0x40023800
 8005c40:	0800caec 	.word	0x0800caec

08005c44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005c48:	f7ff ffdc 	bl	8005c04 <HAL_RCC_GetHCLKFreq>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	4b05      	ldr	r3, [pc, #20]	; (8005c64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	0b5b      	lsrs	r3, r3, #13
 8005c54:	f003 0307 	and.w	r3, r3, #7
 8005c58:	4903      	ldr	r1, [pc, #12]	; (8005c68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c5a:	5ccb      	ldrb	r3, [r1, r3]
 8005c5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	40023800 	.word	0x40023800
 8005c68:	0800caec 	.word	0x0800caec

08005c6c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	220f      	movs	r2, #15
 8005c7a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005c7c:	4b12      	ldr	r3, [pc, #72]	; (8005cc8 <HAL_RCC_GetClockConfig+0x5c>)
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f003 0203 	and.w	r2, r3, #3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005c88:	4b0f      	ldr	r3, [pc, #60]	; (8005cc8 <HAL_RCC_GetClockConfig+0x5c>)
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005c94:	4b0c      	ldr	r3, [pc, #48]	; (8005cc8 <HAL_RCC_GetClockConfig+0x5c>)
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005ca0:	4b09      	ldr	r3, [pc, #36]	; (8005cc8 <HAL_RCC_GetClockConfig+0x5c>)
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	08db      	lsrs	r3, r3, #3
 8005ca6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005cae:	4b07      	ldr	r3, [pc, #28]	; (8005ccc <HAL_RCC_GetClockConfig+0x60>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 0207 	and.w	r2, r3, #7
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	601a      	str	r2, [r3, #0]
}
 8005cba:	bf00      	nop
 8005cbc:	370c      	adds	r7, #12
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr
 8005cc6:	bf00      	nop
 8005cc8:	40023800 	.word	0x40023800
 8005ccc:	40023c00 	.word	0x40023c00

08005cd0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b086      	sub	sp, #24
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0301 	and.w	r3, r3, #1
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d105      	bne.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d035      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005cf8:	4b62      	ldr	r3, [pc, #392]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005cfe:	f7fb fca5 	bl	800164c <HAL_GetTick>
 8005d02:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d04:	e008      	b.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005d06:	f7fb fca1 	bl	800164c <HAL_GetTick>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	1ad3      	subs	r3, r2, r3
 8005d10:	2b02      	cmp	r3, #2
 8005d12:	d901      	bls.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d14:	2303      	movs	r3, #3
 8005d16:	e0b0      	b.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d18:	4b5b      	ldr	r3, [pc, #364]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d1f0      	bne.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	019a      	lsls	r2, r3, #6
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	071b      	lsls	r3, r3, #28
 8005d30:	4955      	ldr	r1, [pc, #340]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d32:	4313      	orrs	r3, r2
 8005d34:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005d38:	4b52      	ldr	r3, [pc, #328]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d3e:	f7fb fc85 	bl	800164c <HAL_GetTick>
 8005d42:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d44:	e008      	b.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005d46:	f7fb fc81 	bl	800164c <HAL_GetTick>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	2b02      	cmp	r3, #2
 8005d52:	d901      	bls.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d54:	2303      	movs	r3, #3
 8005d56:	e090      	b.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d58:	4b4b      	ldr	r3, [pc, #300]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d0f0      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 0302 	and.w	r3, r3, #2
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f000 8083 	beq.w	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d72:	2300      	movs	r3, #0
 8005d74:	60fb      	str	r3, [r7, #12]
 8005d76:	4b44      	ldr	r3, [pc, #272]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7a:	4a43      	ldr	r2, [pc, #268]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d80:	6413      	str	r3, [r2, #64]	; 0x40
 8005d82:	4b41      	ldr	r3, [pc, #260]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d8a:	60fb      	str	r3, [r7, #12]
 8005d8c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005d8e:	4b3f      	ldr	r3, [pc, #252]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a3e      	ldr	r2, [pc, #248]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d98:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d9a:	f7fb fc57 	bl	800164c <HAL_GetTick>
 8005d9e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005da0:	e008      	b.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005da2:	f7fb fc53 	bl	800164c <HAL_GetTick>
 8005da6:	4602      	mov	r2, r0
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d901      	bls.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005db0:	2303      	movs	r3, #3
 8005db2:	e062      	b.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005db4:	4b35      	ldr	r3, [pc, #212]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d0f0      	beq.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005dc0:	4b31      	ldr	r3, [pc, #196]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dc8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d02f      	beq.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d028      	beq.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005dde:	4b2a      	ldr	r3, [pc, #168]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005de2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005de6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005de8:	4b29      	ldr	r3, [pc, #164]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005dea:	2201      	movs	r2, #1
 8005dec:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005dee:	4b28      	ldr	r3, [pc, #160]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005df0:	2200      	movs	r2, #0
 8005df2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005df4:	4a24      	ldr	r2, [pc, #144]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005dfa:	4b23      	ldr	r3, [pc, #140]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dfe:	f003 0301 	and.w	r3, r3, #1
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d114      	bne.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005e06:	f7fb fc21 	bl	800164c <HAL_GetTick>
 8005e0a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e0c:	e00a      	b.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e0e:	f7fb fc1d 	bl	800164c <HAL_GetTick>
 8005e12:	4602      	mov	r2, r0
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d901      	bls.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005e20:	2303      	movs	r3, #3
 8005e22:	e02a      	b.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e24:	4b18      	ldr	r3, [pc, #96]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e28:	f003 0302 	and.w	r3, r3, #2
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d0ee      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e3c:	d10d      	bne.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005e3e:	4b12      	ldr	r3, [pc, #72]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e52:	490d      	ldr	r1, [pc, #52]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e54:	4313      	orrs	r3, r2
 8005e56:	608b      	str	r3, [r1, #8]
 8005e58:	e005      	b.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005e5a:	4b0b      	ldr	r3, [pc, #44]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	4a0a      	ldr	r2, [pc, #40]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e60:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005e64:	6093      	str	r3, [r2, #8]
 8005e66:	4b08      	ldr	r3, [pc, #32]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e68:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e72:	4905      	ldr	r1, [pc, #20]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e74:	4313      	orrs	r3, r2
 8005e76:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3718      	adds	r7, #24
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	42470068 	.word	0x42470068
 8005e88:	40023800 	.word	0x40023800
 8005e8c:	40007000 	.word	0x40007000
 8005e90:	42470e40 	.word	0x42470e40

08005e94 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b087      	sub	sp, #28
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d13e      	bne.n	8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005eb2:	4b23      	ldr	r3, [pc, #140]	; (8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005eba:	60fb      	str	r3, [r7, #12]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d005      	beq.n	8005ece <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d12f      	bne.n	8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005ec8:	4b1e      	ldr	r3, [pc, #120]	; (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005eca:	617b      	str	r3, [r7, #20]
          break;
 8005ecc:	e02f      	b.n	8005f2e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005ece:	4b1c      	ldr	r3, [pc, #112]	; (8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ed6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005eda:	d108      	bne.n	8005eee <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005edc:	4b18      	ldr	r3, [pc, #96]	; (8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ee4:	4a18      	ldr	r2, [pc, #96]	; (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eea:	613b      	str	r3, [r7, #16]
 8005eec:	e007      	b.n	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005eee:	4b14      	ldr	r3, [pc, #80]	; (8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ef6:	4a15      	ldr	r2, [pc, #84]	; (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005efc:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005efe:	4b10      	ldr	r3, [pc, #64]	; (8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005f00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f04:	099b      	lsrs	r3, r3, #6
 8005f06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	fb02 f303 	mul.w	r3, r2, r3
 8005f10:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005f12:	4b0b      	ldr	r3, [pc, #44]	; (8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005f14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f18:	0f1b      	lsrs	r3, r3, #28
 8005f1a:	f003 0307 	and.w	r3, r3, #7
 8005f1e:	68ba      	ldr	r2, [r7, #8]
 8005f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f24:	617b      	str	r3, [r7, #20]
          break;
 8005f26:	e002      	b.n	8005f2e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	617b      	str	r3, [r7, #20]
          break;
 8005f2c:	bf00      	nop
        }
      }
      break;
 8005f2e:	bf00      	nop
    }
  }
  return frequency;
 8005f30:	697b      	ldr	r3, [r7, #20]
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	371c      	adds	r7, #28
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr
 8005f3e:	bf00      	nop
 8005f40:	40023800 	.word	0x40023800
 8005f44:	00bb8000 	.word	0x00bb8000
 8005f48:	007a1200 	.word	0x007a1200
 8005f4c:	00f42400 	.word	0x00f42400

08005f50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d101      	bne.n	8005f62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e07b      	b.n	800605a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d108      	bne.n	8005f7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f72:	d009      	beq.n	8005f88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	61da      	str	r2, [r3, #28]
 8005f7a:	e005      	b.n	8005f88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d106      	bne.n	8005fa8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f7fb f94e 	bl	8001244 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2202      	movs	r2, #2
 8005fac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fbe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005fd0:	431a      	orrs	r2, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fda:	431a      	orrs	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	f003 0302 	and.w	r3, r3, #2
 8005fe4:	431a      	orrs	r2, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	695b      	ldr	r3, [r3, #20]
 8005fea:	f003 0301 	and.w	r3, r3, #1
 8005fee:	431a      	orrs	r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	699b      	ldr	r3, [r3, #24]
 8005ff4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ff8:	431a      	orrs	r2, r3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	69db      	ldr	r3, [r3, #28]
 8005ffe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006002:	431a      	orrs	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6a1b      	ldr	r3, [r3, #32]
 8006008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800600c:	ea42 0103 	orr.w	r1, r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006014:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	430a      	orrs	r2, r1
 800601e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	699b      	ldr	r3, [r3, #24]
 8006024:	0c1b      	lsrs	r3, r3, #16
 8006026:	f003 0104 	and.w	r1, r3, #4
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602e:	f003 0210 	and.w	r2, r3, #16
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	430a      	orrs	r2, r1
 8006038:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	69da      	ldr	r2, [r3, #28]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006048:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3708      	adds	r7, #8
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}

08006062 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006062:	b580      	push	{r7, lr}
 8006064:	b082      	sub	sp, #8
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d101      	bne.n	8006074 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e041      	b.n	80060f8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800607a:	b2db      	uxtb	r3, r3
 800607c:	2b00      	cmp	r3, #0
 800607e:	d106      	bne.n	800608e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 f839 	bl	8006100 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2202      	movs	r2, #2
 8006092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	3304      	adds	r3, #4
 800609e:	4619      	mov	r1, r3
 80060a0:	4610      	mov	r0, r2
 80060a2:	f000 f9d7 	bl	8006454 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2201      	movs	r2, #1
 80060aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2201      	movs	r2, #1
 80060c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2201      	movs	r2, #1
 80060ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2201      	movs	r2, #1
 80060da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2201      	movs	r2, #1
 80060e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2201      	movs	r2, #1
 80060ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2201      	movs	r2, #1
 80060f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3708      	adds	r7, #8
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006108:	bf00      	nop
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006122:	b2db      	uxtb	r3, r3
 8006124:	2b01      	cmp	r3, #1
 8006126:	d001      	beq.n	800612c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	e04e      	b.n	80061ca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2202      	movs	r2, #2
 8006130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68da      	ldr	r2, [r3, #12]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f042 0201 	orr.w	r2, r2, #1
 8006142:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a23      	ldr	r2, [pc, #140]	; (80061d8 <HAL_TIM_Base_Start_IT+0xc4>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d022      	beq.n	8006194 <HAL_TIM_Base_Start_IT+0x80>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006156:	d01d      	beq.n	8006194 <HAL_TIM_Base_Start_IT+0x80>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a1f      	ldr	r2, [pc, #124]	; (80061dc <HAL_TIM_Base_Start_IT+0xc8>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d018      	beq.n	8006194 <HAL_TIM_Base_Start_IT+0x80>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a1e      	ldr	r2, [pc, #120]	; (80061e0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d013      	beq.n	8006194 <HAL_TIM_Base_Start_IT+0x80>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a1c      	ldr	r2, [pc, #112]	; (80061e4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d00e      	beq.n	8006194 <HAL_TIM_Base_Start_IT+0x80>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a1b      	ldr	r2, [pc, #108]	; (80061e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d009      	beq.n	8006194 <HAL_TIM_Base_Start_IT+0x80>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a19      	ldr	r2, [pc, #100]	; (80061ec <HAL_TIM_Base_Start_IT+0xd8>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d004      	beq.n	8006194 <HAL_TIM_Base_Start_IT+0x80>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a18      	ldr	r2, [pc, #96]	; (80061f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d111      	bne.n	80061b8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	f003 0307 	and.w	r3, r3, #7
 800619e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2b06      	cmp	r3, #6
 80061a4:	d010      	beq.n	80061c8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f042 0201 	orr.w	r2, r2, #1
 80061b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061b6:	e007      	b.n	80061c8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f042 0201 	orr.w	r2, r2, #1
 80061c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3714      	adds	r7, #20
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr
 80061d6:	bf00      	nop
 80061d8:	40010000 	.word	0x40010000
 80061dc:	40000400 	.word	0x40000400
 80061e0:	40000800 	.word	0x40000800
 80061e4:	40000c00 	.word	0x40000c00
 80061e8:	40010400 	.word	0x40010400
 80061ec:	40014000 	.word	0x40014000
 80061f0:	40001800 	.word	0x40001800

080061f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b082      	sub	sp, #8
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	f003 0302 	and.w	r3, r3, #2
 8006206:	2b02      	cmp	r3, #2
 8006208:	d122      	bne.n	8006250 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	f003 0302 	and.w	r3, r3, #2
 8006214:	2b02      	cmp	r3, #2
 8006216:	d11b      	bne.n	8006250 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f06f 0202 	mvn.w	r2, #2
 8006220:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2201      	movs	r2, #1
 8006226:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	f003 0303 	and.w	r3, r3, #3
 8006232:	2b00      	cmp	r3, #0
 8006234:	d003      	beq.n	800623e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 f8ee 	bl	8006418 <HAL_TIM_IC_CaptureCallback>
 800623c:	e005      	b.n	800624a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f8e0 	bl	8006404 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 f8f1 	bl	800642c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	f003 0304 	and.w	r3, r3, #4
 800625a:	2b04      	cmp	r3, #4
 800625c:	d122      	bne.n	80062a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	f003 0304 	and.w	r3, r3, #4
 8006268:	2b04      	cmp	r3, #4
 800626a:	d11b      	bne.n	80062a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f06f 0204 	mvn.w	r2, #4
 8006274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2202      	movs	r2, #2
 800627a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	699b      	ldr	r3, [r3, #24]
 8006282:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006286:	2b00      	cmp	r3, #0
 8006288:	d003      	beq.n	8006292 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 f8c4 	bl	8006418 <HAL_TIM_IC_CaptureCallback>
 8006290:	e005      	b.n	800629e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 f8b6 	bl	8006404 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 f8c7 	bl	800642c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	f003 0308 	and.w	r3, r3, #8
 80062ae:	2b08      	cmp	r3, #8
 80062b0:	d122      	bne.n	80062f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	f003 0308 	and.w	r3, r3, #8
 80062bc:	2b08      	cmp	r3, #8
 80062be:	d11b      	bne.n	80062f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f06f 0208 	mvn.w	r2, #8
 80062c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2204      	movs	r2, #4
 80062ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	69db      	ldr	r3, [r3, #28]
 80062d6:	f003 0303 	and.w	r3, r3, #3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d003      	beq.n	80062e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 f89a 	bl	8006418 <HAL_TIM_IC_CaptureCallback>
 80062e4:	e005      	b.n	80062f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 f88c 	bl	8006404 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 f89d 	bl	800642c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	f003 0310 	and.w	r3, r3, #16
 8006302:	2b10      	cmp	r3, #16
 8006304:	d122      	bne.n	800634c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	f003 0310 	and.w	r3, r3, #16
 8006310:	2b10      	cmp	r3, #16
 8006312:	d11b      	bne.n	800634c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f06f 0210 	mvn.w	r2, #16
 800631c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2208      	movs	r2, #8
 8006322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	69db      	ldr	r3, [r3, #28]
 800632a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800632e:	2b00      	cmp	r3, #0
 8006330:	d003      	beq.n	800633a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 f870 	bl	8006418 <HAL_TIM_IC_CaptureCallback>
 8006338:	e005      	b.n	8006346 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 f862 	bl	8006404 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 f873 	bl	800642c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	f003 0301 	and.w	r3, r3, #1
 8006356:	2b01      	cmp	r3, #1
 8006358:	d10e      	bne.n	8006378 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	f003 0301 	and.w	r3, r3, #1
 8006364:	2b01      	cmp	r3, #1
 8006366:	d107      	bne.n	8006378 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f06f 0201 	mvn.w	r2, #1
 8006370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f7fa fcac 	bl	8000cd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006382:	2b80      	cmp	r3, #128	; 0x80
 8006384:	d10e      	bne.n	80063a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006390:	2b80      	cmp	r3, #128	; 0x80
 8006392:	d107      	bne.n	80063a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800639c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 f902 	bl	80065a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ae:	2b40      	cmp	r3, #64	; 0x40
 80063b0:	d10e      	bne.n	80063d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063bc:	2b40      	cmp	r3, #64	; 0x40
 80063be:	d107      	bne.n	80063d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80063c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 f838 	bl	8006440 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	f003 0320 	and.w	r3, r3, #32
 80063da:	2b20      	cmp	r3, #32
 80063dc:	d10e      	bne.n	80063fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	f003 0320 	and.w	r3, r3, #32
 80063e8:	2b20      	cmp	r3, #32
 80063ea:	d107      	bne.n	80063fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f06f 0220 	mvn.w	r2, #32
 80063f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 f8cc 	bl	8006594 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80063fc:	bf00      	nop
 80063fe:	3708      	adds	r7, #8
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800640c:	bf00      	nop
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006420:	bf00      	nop
 8006422:	370c      	adds	r7, #12
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006434:	bf00      	nop
 8006436:	370c      	adds	r7, #12
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006448:	bf00      	nop
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006454:	b480      	push	{r7}
 8006456:	b085      	sub	sp, #20
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4a40      	ldr	r2, [pc, #256]	; (8006568 <TIM_Base_SetConfig+0x114>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d013      	beq.n	8006494 <TIM_Base_SetConfig+0x40>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006472:	d00f      	beq.n	8006494 <TIM_Base_SetConfig+0x40>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a3d      	ldr	r2, [pc, #244]	; (800656c <TIM_Base_SetConfig+0x118>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d00b      	beq.n	8006494 <TIM_Base_SetConfig+0x40>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a3c      	ldr	r2, [pc, #240]	; (8006570 <TIM_Base_SetConfig+0x11c>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d007      	beq.n	8006494 <TIM_Base_SetConfig+0x40>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a3b      	ldr	r2, [pc, #236]	; (8006574 <TIM_Base_SetConfig+0x120>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d003      	beq.n	8006494 <TIM_Base_SetConfig+0x40>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a3a      	ldr	r2, [pc, #232]	; (8006578 <TIM_Base_SetConfig+0x124>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d108      	bne.n	80064a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800649a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a2f      	ldr	r2, [pc, #188]	; (8006568 <TIM_Base_SetConfig+0x114>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d02b      	beq.n	8006506 <TIM_Base_SetConfig+0xb2>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064b4:	d027      	beq.n	8006506 <TIM_Base_SetConfig+0xb2>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a2c      	ldr	r2, [pc, #176]	; (800656c <TIM_Base_SetConfig+0x118>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d023      	beq.n	8006506 <TIM_Base_SetConfig+0xb2>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4a2b      	ldr	r2, [pc, #172]	; (8006570 <TIM_Base_SetConfig+0x11c>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d01f      	beq.n	8006506 <TIM_Base_SetConfig+0xb2>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4a2a      	ldr	r2, [pc, #168]	; (8006574 <TIM_Base_SetConfig+0x120>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d01b      	beq.n	8006506 <TIM_Base_SetConfig+0xb2>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a29      	ldr	r2, [pc, #164]	; (8006578 <TIM_Base_SetConfig+0x124>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d017      	beq.n	8006506 <TIM_Base_SetConfig+0xb2>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a28      	ldr	r2, [pc, #160]	; (800657c <TIM_Base_SetConfig+0x128>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d013      	beq.n	8006506 <TIM_Base_SetConfig+0xb2>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a27      	ldr	r2, [pc, #156]	; (8006580 <TIM_Base_SetConfig+0x12c>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d00f      	beq.n	8006506 <TIM_Base_SetConfig+0xb2>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a26      	ldr	r2, [pc, #152]	; (8006584 <TIM_Base_SetConfig+0x130>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d00b      	beq.n	8006506 <TIM_Base_SetConfig+0xb2>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a25      	ldr	r2, [pc, #148]	; (8006588 <TIM_Base_SetConfig+0x134>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d007      	beq.n	8006506 <TIM_Base_SetConfig+0xb2>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a24      	ldr	r2, [pc, #144]	; (800658c <TIM_Base_SetConfig+0x138>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d003      	beq.n	8006506 <TIM_Base_SetConfig+0xb2>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a23      	ldr	r2, [pc, #140]	; (8006590 <TIM_Base_SetConfig+0x13c>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d108      	bne.n	8006518 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800650c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	68db      	ldr	r3, [r3, #12]
 8006512:	68fa      	ldr	r2, [r7, #12]
 8006514:	4313      	orrs	r3, r2
 8006516:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	695b      	ldr	r3, [r3, #20]
 8006522:	4313      	orrs	r3, r2
 8006524:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	68fa      	ldr	r2, [r7, #12]
 800652a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	689a      	ldr	r2, [r3, #8]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a0a      	ldr	r2, [pc, #40]	; (8006568 <TIM_Base_SetConfig+0x114>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d003      	beq.n	800654c <TIM_Base_SetConfig+0xf8>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a0c      	ldr	r2, [pc, #48]	; (8006578 <TIM_Base_SetConfig+0x124>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d103      	bne.n	8006554 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	691a      	ldr	r2, [r3, #16]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	615a      	str	r2, [r3, #20]
}
 800655a:	bf00      	nop
 800655c:	3714      	adds	r7, #20
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr
 8006566:	bf00      	nop
 8006568:	40010000 	.word	0x40010000
 800656c:	40000400 	.word	0x40000400
 8006570:	40000800 	.word	0x40000800
 8006574:	40000c00 	.word	0x40000c00
 8006578:	40010400 	.word	0x40010400
 800657c:	40014000 	.word	0x40014000
 8006580:	40014400 	.word	0x40014400
 8006584:	40014800 	.word	0x40014800
 8006588:	40001800 	.word	0x40001800
 800658c:	40001c00 	.word	0x40001c00
 8006590:	40002000 	.word	0x40002000

08006594 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800659c:	bf00      	nop
 800659e:	370c      	adds	r7, #12
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065b0:	bf00      	nop
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b082      	sub	sp, #8
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d101      	bne.n	80065ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e03f      	b.n	800664e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d106      	bne.n	80065e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f7fa fe76 	bl	80012d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2224      	movs	r2, #36	; 0x24
 80065ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	68da      	ldr	r2, [r3, #12]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f000 f829 	bl	8006658 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	691a      	ldr	r2, [r3, #16]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006614:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	695a      	ldr	r2, [r3, #20]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006624:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68da      	ldr	r2, [r3, #12]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006634:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2220      	movs	r2, #32
 8006640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2220      	movs	r2, #32
 8006648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800664c:	2300      	movs	r3, #0
}
 800664e:	4618      	mov	r0, r3
 8006650:	3708      	adds	r7, #8
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
	...

08006658 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800665c:	b09f      	sub	sp, #124	; 0x7c
 800665e:	af00      	add	r7, sp, #0
 8006660:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006662:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800666c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800666e:	68d9      	ldr	r1, [r3, #12]
 8006670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	ea40 0301 	orr.w	r3, r0, r1
 8006678:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800667a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800667c:	689a      	ldr	r2, [r3, #8]
 800667e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006680:	691b      	ldr	r3, [r3, #16]
 8006682:	431a      	orrs	r2, r3
 8006684:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006686:	695b      	ldr	r3, [r3, #20]
 8006688:	431a      	orrs	r2, r3
 800668a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800668c:	69db      	ldr	r3, [r3, #28]
 800668e:	4313      	orrs	r3, r2
 8006690:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800669c:	f021 010c 	bic.w	r1, r1, #12
 80066a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066a6:	430b      	orrs	r3, r1
 80066a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80066aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	695b      	ldr	r3, [r3, #20]
 80066b0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80066b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066b6:	6999      	ldr	r1, [r3, #24]
 80066b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	ea40 0301 	orr.w	r3, r0, r1
 80066c0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80066c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	4bc5      	ldr	r3, [pc, #788]	; (80069dc <UART_SetConfig+0x384>)
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d004      	beq.n	80066d6 <UART_SetConfig+0x7e>
 80066cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	4bc3      	ldr	r3, [pc, #780]	; (80069e0 <UART_SetConfig+0x388>)
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d103      	bne.n	80066de <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80066d6:	f7ff fab5 	bl	8005c44 <HAL_RCC_GetPCLK2Freq>
 80066da:	6778      	str	r0, [r7, #116]	; 0x74
 80066dc:	e002      	b.n	80066e4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80066de:	f7ff fa9d 	bl	8005c1c <HAL_RCC_GetPCLK1Freq>
 80066e2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066e6:	69db      	ldr	r3, [r3, #28]
 80066e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066ec:	f040 80b6 	bne.w	800685c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80066f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066f2:	461c      	mov	r4, r3
 80066f4:	f04f 0500 	mov.w	r5, #0
 80066f8:	4622      	mov	r2, r4
 80066fa:	462b      	mov	r3, r5
 80066fc:	1891      	adds	r1, r2, r2
 80066fe:	6439      	str	r1, [r7, #64]	; 0x40
 8006700:	415b      	adcs	r3, r3
 8006702:	647b      	str	r3, [r7, #68]	; 0x44
 8006704:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006708:	1912      	adds	r2, r2, r4
 800670a:	eb45 0303 	adc.w	r3, r5, r3
 800670e:	f04f 0000 	mov.w	r0, #0
 8006712:	f04f 0100 	mov.w	r1, #0
 8006716:	00d9      	lsls	r1, r3, #3
 8006718:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800671c:	00d0      	lsls	r0, r2, #3
 800671e:	4602      	mov	r2, r0
 8006720:	460b      	mov	r3, r1
 8006722:	1911      	adds	r1, r2, r4
 8006724:	6639      	str	r1, [r7, #96]	; 0x60
 8006726:	416b      	adcs	r3, r5
 8006728:	667b      	str	r3, [r7, #100]	; 0x64
 800672a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	461a      	mov	r2, r3
 8006730:	f04f 0300 	mov.w	r3, #0
 8006734:	1891      	adds	r1, r2, r2
 8006736:	63b9      	str	r1, [r7, #56]	; 0x38
 8006738:	415b      	adcs	r3, r3
 800673a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800673c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006740:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006744:	f7f9 fd44 	bl	80001d0 <__aeabi_uldivmod>
 8006748:	4602      	mov	r2, r0
 800674a:	460b      	mov	r3, r1
 800674c:	4ba5      	ldr	r3, [pc, #660]	; (80069e4 <UART_SetConfig+0x38c>)
 800674e:	fba3 2302 	umull	r2, r3, r3, r2
 8006752:	095b      	lsrs	r3, r3, #5
 8006754:	011e      	lsls	r6, r3, #4
 8006756:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006758:	461c      	mov	r4, r3
 800675a:	f04f 0500 	mov.w	r5, #0
 800675e:	4622      	mov	r2, r4
 8006760:	462b      	mov	r3, r5
 8006762:	1891      	adds	r1, r2, r2
 8006764:	6339      	str	r1, [r7, #48]	; 0x30
 8006766:	415b      	adcs	r3, r3
 8006768:	637b      	str	r3, [r7, #52]	; 0x34
 800676a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800676e:	1912      	adds	r2, r2, r4
 8006770:	eb45 0303 	adc.w	r3, r5, r3
 8006774:	f04f 0000 	mov.w	r0, #0
 8006778:	f04f 0100 	mov.w	r1, #0
 800677c:	00d9      	lsls	r1, r3, #3
 800677e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006782:	00d0      	lsls	r0, r2, #3
 8006784:	4602      	mov	r2, r0
 8006786:	460b      	mov	r3, r1
 8006788:	1911      	adds	r1, r2, r4
 800678a:	65b9      	str	r1, [r7, #88]	; 0x58
 800678c:	416b      	adcs	r3, r5
 800678e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	461a      	mov	r2, r3
 8006796:	f04f 0300 	mov.w	r3, #0
 800679a:	1891      	adds	r1, r2, r2
 800679c:	62b9      	str	r1, [r7, #40]	; 0x28
 800679e:	415b      	adcs	r3, r3
 80067a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80067a6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80067aa:	f7f9 fd11 	bl	80001d0 <__aeabi_uldivmod>
 80067ae:	4602      	mov	r2, r0
 80067b0:	460b      	mov	r3, r1
 80067b2:	4b8c      	ldr	r3, [pc, #560]	; (80069e4 <UART_SetConfig+0x38c>)
 80067b4:	fba3 1302 	umull	r1, r3, r3, r2
 80067b8:	095b      	lsrs	r3, r3, #5
 80067ba:	2164      	movs	r1, #100	; 0x64
 80067bc:	fb01 f303 	mul.w	r3, r1, r3
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	00db      	lsls	r3, r3, #3
 80067c4:	3332      	adds	r3, #50	; 0x32
 80067c6:	4a87      	ldr	r2, [pc, #540]	; (80069e4 <UART_SetConfig+0x38c>)
 80067c8:	fba2 2303 	umull	r2, r3, r2, r3
 80067cc:	095b      	lsrs	r3, r3, #5
 80067ce:	005b      	lsls	r3, r3, #1
 80067d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80067d4:	441e      	add	r6, r3
 80067d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067d8:	4618      	mov	r0, r3
 80067da:	f04f 0100 	mov.w	r1, #0
 80067de:	4602      	mov	r2, r0
 80067e0:	460b      	mov	r3, r1
 80067e2:	1894      	adds	r4, r2, r2
 80067e4:	623c      	str	r4, [r7, #32]
 80067e6:	415b      	adcs	r3, r3
 80067e8:	627b      	str	r3, [r7, #36]	; 0x24
 80067ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80067ee:	1812      	adds	r2, r2, r0
 80067f0:	eb41 0303 	adc.w	r3, r1, r3
 80067f4:	f04f 0400 	mov.w	r4, #0
 80067f8:	f04f 0500 	mov.w	r5, #0
 80067fc:	00dd      	lsls	r5, r3, #3
 80067fe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006802:	00d4      	lsls	r4, r2, #3
 8006804:	4622      	mov	r2, r4
 8006806:	462b      	mov	r3, r5
 8006808:	1814      	adds	r4, r2, r0
 800680a:	653c      	str	r4, [r7, #80]	; 0x50
 800680c:	414b      	adcs	r3, r1
 800680e:	657b      	str	r3, [r7, #84]	; 0x54
 8006810:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	461a      	mov	r2, r3
 8006816:	f04f 0300 	mov.w	r3, #0
 800681a:	1891      	adds	r1, r2, r2
 800681c:	61b9      	str	r1, [r7, #24]
 800681e:	415b      	adcs	r3, r3
 8006820:	61fb      	str	r3, [r7, #28]
 8006822:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006826:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800682a:	f7f9 fcd1 	bl	80001d0 <__aeabi_uldivmod>
 800682e:	4602      	mov	r2, r0
 8006830:	460b      	mov	r3, r1
 8006832:	4b6c      	ldr	r3, [pc, #432]	; (80069e4 <UART_SetConfig+0x38c>)
 8006834:	fba3 1302 	umull	r1, r3, r3, r2
 8006838:	095b      	lsrs	r3, r3, #5
 800683a:	2164      	movs	r1, #100	; 0x64
 800683c:	fb01 f303 	mul.w	r3, r1, r3
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	00db      	lsls	r3, r3, #3
 8006844:	3332      	adds	r3, #50	; 0x32
 8006846:	4a67      	ldr	r2, [pc, #412]	; (80069e4 <UART_SetConfig+0x38c>)
 8006848:	fba2 2303 	umull	r2, r3, r2, r3
 800684c:	095b      	lsrs	r3, r3, #5
 800684e:	f003 0207 	and.w	r2, r3, #7
 8006852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4432      	add	r2, r6
 8006858:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800685a:	e0b9      	b.n	80069d0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800685c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800685e:	461c      	mov	r4, r3
 8006860:	f04f 0500 	mov.w	r5, #0
 8006864:	4622      	mov	r2, r4
 8006866:	462b      	mov	r3, r5
 8006868:	1891      	adds	r1, r2, r2
 800686a:	6139      	str	r1, [r7, #16]
 800686c:	415b      	adcs	r3, r3
 800686e:	617b      	str	r3, [r7, #20]
 8006870:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006874:	1912      	adds	r2, r2, r4
 8006876:	eb45 0303 	adc.w	r3, r5, r3
 800687a:	f04f 0000 	mov.w	r0, #0
 800687e:	f04f 0100 	mov.w	r1, #0
 8006882:	00d9      	lsls	r1, r3, #3
 8006884:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006888:	00d0      	lsls	r0, r2, #3
 800688a:	4602      	mov	r2, r0
 800688c:	460b      	mov	r3, r1
 800688e:	eb12 0804 	adds.w	r8, r2, r4
 8006892:	eb43 0905 	adc.w	r9, r3, r5
 8006896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	4618      	mov	r0, r3
 800689c:	f04f 0100 	mov.w	r1, #0
 80068a0:	f04f 0200 	mov.w	r2, #0
 80068a4:	f04f 0300 	mov.w	r3, #0
 80068a8:	008b      	lsls	r3, r1, #2
 80068aa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80068ae:	0082      	lsls	r2, r0, #2
 80068b0:	4640      	mov	r0, r8
 80068b2:	4649      	mov	r1, r9
 80068b4:	f7f9 fc8c 	bl	80001d0 <__aeabi_uldivmod>
 80068b8:	4602      	mov	r2, r0
 80068ba:	460b      	mov	r3, r1
 80068bc:	4b49      	ldr	r3, [pc, #292]	; (80069e4 <UART_SetConfig+0x38c>)
 80068be:	fba3 2302 	umull	r2, r3, r3, r2
 80068c2:	095b      	lsrs	r3, r3, #5
 80068c4:	011e      	lsls	r6, r3, #4
 80068c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068c8:	4618      	mov	r0, r3
 80068ca:	f04f 0100 	mov.w	r1, #0
 80068ce:	4602      	mov	r2, r0
 80068d0:	460b      	mov	r3, r1
 80068d2:	1894      	adds	r4, r2, r2
 80068d4:	60bc      	str	r4, [r7, #8]
 80068d6:	415b      	adcs	r3, r3
 80068d8:	60fb      	str	r3, [r7, #12]
 80068da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80068de:	1812      	adds	r2, r2, r0
 80068e0:	eb41 0303 	adc.w	r3, r1, r3
 80068e4:	f04f 0400 	mov.w	r4, #0
 80068e8:	f04f 0500 	mov.w	r5, #0
 80068ec:	00dd      	lsls	r5, r3, #3
 80068ee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80068f2:	00d4      	lsls	r4, r2, #3
 80068f4:	4622      	mov	r2, r4
 80068f6:	462b      	mov	r3, r5
 80068f8:	1814      	adds	r4, r2, r0
 80068fa:	64bc      	str	r4, [r7, #72]	; 0x48
 80068fc:	414b      	adcs	r3, r1
 80068fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006900:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	4618      	mov	r0, r3
 8006906:	f04f 0100 	mov.w	r1, #0
 800690a:	f04f 0200 	mov.w	r2, #0
 800690e:	f04f 0300 	mov.w	r3, #0
 8006912:	008b      	lsls	r3, r1, #2
 8006914:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006918:	0082      	lsls	r2, r0, #2
 800691a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800691e:	f7f9 fc57 	bl	80001d0 <__aeabi_uldivmod>
 8006922:	4602      	mov	r2, r0
 8006924:	460b      	mov	r3, r1
 8006926:	4b2f      	ldr	r3, [pc, #188]	; (80069e4 <UART_SetConfig+0x38c>)
 8006928:	fba3 1302 	umull	r1, r3, r3, r2
 800692c:	095b      	lsrs	r3, r3, #5
 800692e:	2164      	movs	r1, #100	; 0x64
 8006930:	fb01 f303 	mul.w	r3, r1, r3
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	011b      	lsls	r3, r3, #4
 8006938:	3332      	adds	r3, #50	; 0x32
 800693a:	4a2a      	ldr	r2, [pc, #168]	; (80069e4 <UART_SetConfig+0x38c>)
 800693c:	fba2 2303 	umull	r2, r3, r2, r3
 8006940:	095b      	lsrs	r3, r3, #5
 8006942:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006946:	441e      	add	r6, r3
 8006948:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800694a:	4618      	mov	r0, r3
 800694c:	f04f 0100 	mov.w	r1, #0
 8006950:	4602      	mov	r2, r0
 8006952:	460b      	mov	r3, r1
 8006954:	1894      	adds	r4, r2, r2
 8006956:	603c      	str	r4, [r7, #0]
 8006958:	415b      	adcs	r3, r3
 800695a:	607b      	str	r3, [r7, #4]
 800695c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006960:	1812      	adds	r2, r2, r0
 8006962:	eb41 0303 	adc.w	r3, r1, r3
 8006966:	f04f 0400 	mov.w	r4, #0
 800696a:	f04f 0500 	mov.w	r5, #0
 800696e:	00dd      	lsls	r5, r3, #3
 8006970:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006974:	00d4      	lsls	r4, r2, #3
 8006976:	4622      	mov	r2, r4
 8006978:	462b      	mov	r3, r5
 800697a:	eb12 0a00 	adds.w	sl, r2, r0
 800697e:	eb43 0b01 	adc.w	fp, r3, r1
 8006982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	4618      	mov	r0, r3
 8006988:	f04f 0100 	mov.w	r1, #0
 800698c:	f04f 0200 	mov.w	r2, #0
 8006990:	f04f 0300 	mov.w	r3, #0
 8006994:	008b      	lsls	r3, r1, #2
 8006996:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800699a:	0082      	lsls	r2, r0, #2
 800699c:	4650      	mov	r0, sl
 800699e:	4659      	mov	r1, fp
 80069a0:	f7f9 fc16 	bl	80001d0 <__aeabi_uldivmod>
 80069a4:	4602      	mov	r2, r0
 80069a6:	460b      	mov	r3, r1
 80069a8:	4b0e      	ldr	r3, [pc, #56]	; (80069e4 <UART_SetConfig+0x38c>)
 80069aa:	fba3 1302 	umull	r1, r3, r3, r2
 80069ae:	095b      	lsrs	r3, r3, #5
 80069b0:	2164      	movs	r1, #100	; 0x64
 80069b2:	fb01 f303 	mul.w	r3, r1, r3
 80069b6:	1ad3      	subs	r3, r2, r3
 80069b8:	011b      	lsls	r3, r3, #4
 80069ba:	3332      	adds	r3, #50	; 0x32
 80069bc:	4a09      	ldr	r2, [pc, #36]	; (80069e4 <UART_SetConfig+0x38c>)
 80069be:	fba2 2303 	umull	r2, r3, r2, r3
 80069c2:	095b      	lsrs	r3, r3, #5
 80069c4:	f003 020f 	and.w	r2, r3, #15
 80069c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4432      	add	r2, r6
 80069ce:	609a      	str	r2, [r3, #8]
}
 80069d0:	bf00      	nop
 80069d2:	377c      	adds	r7, #124	; 0x7c
 80069d4:	46bd      	mov	sp, r7
 80069d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069da:	bf00      	nop
 80069dc:	40011000 	.word	0x40011000
 80069e0:	40011400 	.word	0x40011400
 80069e4:	51eb851f 	.word	0x51eb851f

080069e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80069e8:	b084      	sub	sp, #16
 80069ea:	b580      	push	{r7, lr}
 80069ec:	b084      	sub	sp, #16
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
 80069f2:	f107 001c 	add.w	r0, r7, #28
 80069f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80069fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d122      	bne.n	8006a46 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006a14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006a28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d105      	bne.n	8006a3a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	68db      	ldr	r3, [r3, #12]
 8006a32:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 f9a0 	bl	8006d80 <USB_CoreReset>
 8006a40:	4603      	mov	r3, r0
 8006a42:	73fb      	strb	r3, [r7, #15]
 8006a44:	e01a      	b.n	8006a7c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 f994 	bl	8006d80 <USB_CoreReset>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006a5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d106      	bne.n	8006a70 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a66:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	639a      	str	r2, [r3, #56]	; 0x38
 8006a6e:	e005      	b.n	8006a7c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a74:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d10b      	bne.n	8006a9a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	f043 0206 	orr.w	r2, r3, #6
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	f043 0220 	orr.w	r2, r3, #32
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3710      	adds	r7, #16
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006aa6:	b004      	add	sp, #16
 8006aa8:	4770      	bx	lr

08006aaa <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006aaa:	b480      	push	{r7}
 8006aac:	b083      	sub	sp, #12
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	f043 0201 	orr.w	r2, r3, #1
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006abe:	2300      	movs	r3, #0
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	370c      	adds	r7, #12
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr

08006acc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	f023 0201 	bic.w	r2, r3, #1
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	370c      	adds	r7, #12
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr

08006aee <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006aee:	b580      	push	{r7, lr}
 8006af0:	b084      	sub	sp, #16
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
 8006af6:	460b      	mov	r3, r1
 8006af8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006afa:	2300      	movs	r3, #0
 8006afc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006b0a:	78fb      	ldrb	r3, [r7, #3]
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d115      	bne.n	8006b3c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006b1c:	2001      	movs	r0, #1
 8006b1e:	f7fa fda1 	bl	8001664 <HAL_Delay>
      ms++;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	3301      	adds	r3, #1
 8006b26:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 f91a 	bl	8006d62 <USB_GetMode>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d01e      	beq.n	8006b72 <USB_SetCurrentMode+0x84>
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2b31      	cmp	r3, #49	; 0x31
 8006b38:	d9f0      	bls.n	8006b1c <USB_SetCurrentMode+0x2e>
 8006b3a:	e01a      	b.n	8006b72 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006b3c:	78fb      	ldrb	r3, [r7, #3]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d115      	bne.n	8006b6e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006b4e:	2001      	movs	r0, #1
 8006b50:	f7fa fd88 	bl	8001664 <HAL_Delay>
      ms++;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	3301      	adds	r3, #1
 8006b58:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 f901 	bl	8006d62 <USB_GetMode>
 8006b60:	4603      	mov	r3, r0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d005      	beq.n	8006b72 <USB_SetCurrentMode+0x84>
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2b31      	cmp	r3, #49	; 0x31
 8006b6a:	d9f0      	bls.n	8006b4e <USB_SetCurrentMode+0x60>
 8006b6c:	e001      	b.n	8006b72 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e005      	b.n	8006b7e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2b32      	cmp	r3, #50	; 0x32
 8006b76:	d101      	bne.n	8006b7c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e000      	b.n	8006b7e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3710      	adds	r7, #16
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
	...

08006b88 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b085      	sub	sp, #20
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006b92:	2300      	movs	r3, #0
 8006b94:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	019b      	lsls	r3, r3, #6
 8006b9a:	f043 0220 	orr.w	r2, r3, #32
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	60fb      	str	r3, [r7, #12]
 8006ba8:	4a08      	ldr	r2, [pc, #32]	; (8006bcc <USB_FlushTxFifo+0x44>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d901      	bls.n	8006bb2 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8006bae:	2303      	movs	r3, #3
 8006bb0:	e006      	b.n	8006bc0 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	f003 0320 	and.w	r3, r3, #32
 8006bba:	2b20      	cmp	r3, #32
 8006bbc:	d0f1      	beq.n	8006ba2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3714      	adds	r7, #20
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr
 8006bcc:	00030d40 	.word	0x00030d40

08006bd0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b085      	sub	sp, #20
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2210      	movs	r2, #16
 8006be0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	3301      	adds	r3, #1
 8006be6:	60fb      	str	r3, [r7, #12]
 8006be8:	4a08      	ldr	r2, [pc, #32]	; (8006c0c <USB_FlushRxFifo+0x3c>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d901      	bls.n	8006bf2 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8006bee:	2303      	movs	r3, #3
 8006bf0:	e006      	b.n	8006c00 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	f003 0310 	and.w	r3, r3, #16
 8006bfa:	2b10      	cmp	r3, #16
 8006bfc:	d0f1      	beq.n	8006be2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006bfe:	2300      	movs	r3, #0
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3714      	adds	r7, #20
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr
 8006c0c:	00030d40 	.word	0x00030d40

08006c10 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b089      	sub	sp, #36	; 0x24
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	4611      	mov	r1, r2
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	460b      	mov	r3, r1
 8006c20:	71fb      	strb	r3, [r7, #7]
 8006c22:	4613      	mov	r3, r2
 8006c24:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006c2e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d123      	bne.n	8006c7e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006c36:	88bb      	ldrh	r3, [r7, #4]
 8006c38:	3303      	adds	r3, #3
 8006c3a:	089b      	lsrs	r3, r3, #2
 8006c3c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006c3e:	2300      	movs	r3, #0
 8006c40:	61bb      	str	r3, [r7, #24]
 8006c42:	e018      	b.n	8006c76 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006c44:	79fb      	ldrb	r3, [r7, #7]
 8006c46:	031a      	lsls	r2, r3, #12
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c50:	461a      	mov	r2, r3
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	3301      	adds	r3, #1
 8006c62:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	3301      	adds	r3, #1
 8006c68:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006c70:	69bb      	ldr	r3, [r7, #24]
 8006c72:	3301      	adds	r3, #1
 8006c74:	61bb      	str	r3, [r7, #24]
 8006c76:	69ba      	ldr	r2, [r7, #24]
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d3e2      	bcc.n	8006c44 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3724      	adds	r7, #36	; 0x24
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b08b      	sub	sp, #44	; 0x2c
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	4613      	mov	r3, r2
 8006c98:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006ca2:	88fb      	ldrh	r3, [r7, #6]
 8006ca4:	089b      	lsrs	r3, r3, #2
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006caa:	88fb      	ldrh	r3, [r7, #6]
 8006cac:	f003 0303 	and.w	r3, r3, #3
 8006cb0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	623b      	str	r3, [r7, #32]
 8006cb6:	e014      	b.n	8006ce2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc2:	601a      	str	r2, [r3, #0]
    pDest++;
 8006cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ccc:	3301      	adds	r3, #1
 8006cce:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd8:	3301      	adds	r3, #1
 8006cda:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006cdc:	6a3b      	ldr	r3, [r7, #32]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	623b      	str	r3, [r7, #32]
 8006ce2:	6a3a      	ldr	r2, [r7, #32]
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d3e6      	bcc.n	8006cb8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006cea:	8bfb      	ldrh	r3, [r7, #30]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d01e      	beq.n	8006d2e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	f107 0310 	add.w	r3, r7, #16
 8006d00:	6812      	ldr	r2, [r2, #0]
 8006d02:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006d04:	693a      	ldr	r2, [r7, #16]
 8006d06:	6a3b      	ldr	r3, [r7, #32]
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	00db      	lsls	r3, r3, #3
 8006d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8006d10:	b2da      	uxtb	r2, r3
 8006d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d14:	701a      	strb	r2, [r3, #0]
      i++;
 8006d16:	6a3b      	ldr	r3, [r7, #32]
 8006d18:	3301      	adds	r3, #1
 8006d1a:	623b      	str	r3, [r7, #32]
      pDest++;
 8006d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1e:	3301      	adds	r3, #1
 8006d20:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006d22:	8bfb      	ldrh	r3, [r7, #30]
 8006d24:	3b01      	subs	r3, #1
 8006d26:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006d28:	8bfb      	ldrh	r3, [r7, #30]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d1ea      	bne.n	8006d04 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	372c      	adds	r7, #44	; 0x2c
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b085      	sub	sp, #20
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	695b      	ldr	r3, [r3, #20]
 8006d48:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	699b      	ldr	r3, [r3, #24]
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	4013      	ands	r3, r2
 8006d52:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006d54:	68fb      	ldr	r3, [r7, #12]
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3714      	adds	r7, #20
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr

08006d62 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006d62:	b480      	push	{r7}
 8006d64:	b083      	sub	sp, #12
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	695b      	ldr	r3, [r3, #20]
 8006d6e:	f003 0301 	and.w	r3, r3, #1
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	370c      	adds	r7, #12
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr
	...

08006d80 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	3301      	adds	r3, #1
 8006d90:	60fb      	str	r3, [r7, #12]
 8006d92:	4a13      	ldr	r2, [pc, #76]	; (8006de0 <USB_CoreReset+0x60>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d901      	bls.n	8006d9c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006d98:	2303      	movs	r3, #3
 8006d9a:	e01a      	b.n	8006dd2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	691b      	ldr	r3, [r3, #16]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	daf3      	bge.n	8006d8c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006da4:	2300      	movs	r3, #0
 8006da6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	691b      	ldr	r3, [r3, #16]
 8006dac:	f043 0201 	orr.w	r2, r3, #1
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	3301      	adds	r3, #1
 8006db8:	60fb      	str	r3, [r7, #12]
 8006dba:	4a09      	ldr	r2, [pc, #36]	; (8006de0 <USB_CoreReset+0x60>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d901      	bls.n	8006dc4 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	e006      	b.n	8006dd2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	691b      	ldr	r3, [r3, #16]
 8006dc8:	f003 0301 	and.w	r3, r3, #1
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d0f1      	beq.n	8006db4 <USB_CoreReset+0x34>

  return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3714      	adds	r7, #20
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr
 8006dde:	bf00      	nop
 8006de0:	00030d40 	.word	0x00030d40

08006de4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006de4:	b084      	sub	sp, #16
 8006de6:	b580      	push	{r7, lr}
 8006de8:	b084      	sub	sp, #16
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
 8006dee:	f107 001c 	add.w	r0, r7, #28
 8006df2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006e00:	461a      	mov	r2, r3
 8006e02:	2300      	movs	r3, #0
 8006e04:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e0a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e16:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e22:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d018      	beq.n	8006e68 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d10a      	bne.n	8006e52 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	68ba      	ldr	r2, [r7, #8]
 8006e46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006e4a:	f043 0304 	orr.w	r3, r3, #4
 8006e4e:	6013      	str	r3, [r2, #0]
 8006e50:	e014      	b.n	8006e7c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	68ba      	ldr	r2, [r7, #8]
 8006e5c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006e60:	f023 0304 	bic.w	r3, r3, #4
 8006e64:	6013      	str	r3, [r2, #0]
 8006e66:	e009      	b.n	8006e7c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	68ba      	ldr	r2, [r7, #8]
 8006e72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006e76:	f023 0304 	bic.w	r3, r3, #4
 8006e7a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006e7c:	2110      	movs	r1, #16
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f7ff fe82 	bl	8006b88 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f7ff fea3 	bl	8006bd0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	60fb      	str	r3, [r7, #12]
 8006e8e:	e015      	b.n	8006ebc <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	015a      	lsls	r2, r3, #5
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	4413      	add	r3, r2
 8006e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8006ea2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	015a      	lsls	r2, r3, #5
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	4413      	add	r3, r2
 8006eac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	3301      	adds	r3, #1
 8006eba:	60fb      	str	r3, [r7, #12]
 8006ebc:	6a3b      	ldr	r3, [r7, #32]
 8006ebe:	68fa      	ldr	r2, [r7, #12]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d3e5      	bcc.n	8006e90 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8006ed0:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00b      	beq.n	8006ef6 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ee4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4a13      	ldr	r2, [pc, #76]	; (8006f38 <USB_HostInit+0x154>)
 8006eea:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	4a13      	ldr	r2, [pc, #76]	; (8006f3c <USB_HostInit+0x158>)
 8006ef0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006ef4:	e009      	b.n	8006f0a <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2280      	movs	r2, #128	; 0x80
 8006efa:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	4a10      	ldr	r2, [pc, #64]	; (8006f40 <USB_HostInit+0x15c>)
 8006f00:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4a0f      	ldr	r2, [pc, #60]	; (8006f44 <USB_HostInit+0x160>)
 8006f06:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d105      	bne.n	8006f1c <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	699b      	ldr	r3, [r3, #24]
 8006f14:	f043 0210 	orr.w	r2, r3, #16
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	699a      	ldr	r2, [r3, #24]
 8006f20:	4b09      	ldr	r3, [pc, #36]	; (8006f48 <USB_HostInit+0x164>)
 8006f22:	4313      	orrs	r3, r2
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8006f28:	2300      	movs	r3, #0
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3710      	adds	r7, #16
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f34:	b004      	add	sp, #16
 8006f36:	4770      	bx	lr
 8006f38:	01000200 	.word	0x01000200
 8006f3c:	00e00300 	.word	0x00e00300
 8006f40:	00600080 	.word	0x00600080
 8006f44:	004000e0 	.word	0x004000e0
 8006f48:	a3200008 	.word	0xa3200008

08006f4c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b085      	sub	sp, #20
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	460b      	mov	r3, r1
 8006f56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	68fa      	ldr	r2, [r7, #12]
 8006f66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f6a:	f023 0303 	bic.w	r3, r3, #3
 8006f6e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	78fb      	ldrb	r3, [r7, #3]
 8006f7a:	f003 0303 	and.w	r3, r3, #3
 8006f7e:	68f9      	ldr	r1, [r7, #12]
 8006f80:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006f84:	4313      	orrs	r3, r2
 8006f86:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006f88:	78fb      	ldrb	r3, [r7, #3]
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d107      	bne.n	8006f9e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f94:	461a      	mov	r2, r3
 8006f96:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006f9a:	6053      	str	r3, [r2, #4]
 8006f9c:	e009      	b.n	8006fb2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006f9e:	78fb      	ldrb	r3, [r7, #3]
 8006fa0:	2b02      	cmp	r3, #2
 8006fa2:	d106      	bne.n	8006fb2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006faa:	461a      	mov	r2, r3
 8006fac:	f241 7370 	movw	r3, #6000	; 0x1770
 8006fb0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3714      	adds	r7, #20
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006fe0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006fea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fee:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006ff0:	2064      	movs	r0, #100	; 0x64
 8006ff2:	f7fa fb37 	bl	8001664 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006ffe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007002:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007004:	200a      	movs	r0, #10
 8007006:	f7fa fb2d 	bl	8001664 <HAL_Delay>

  return HAL_OK;
 800700a:	2300      	movs	r3, #0
}
 800700c:	4618      	mov	r0, r3
 800700e:	3710      	adds	r7, #16
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007014:	b480      	push	{r7}
 8007016:	b085      	sub	sp, #20
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	460b      	mov	r3, r1
 800701e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007024:	2300      	movs	r3, #0
 8007026:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007038:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007040:	2b00      	cmp	r3, #0
 8007042:	d109      	bne.n	8007058 <USB_DriveVbus+0x44>
 8007044:	78fb      	ldrb	r3, [r7, #3]
 8007046:	2b01      	cmp	r3, #1
 8007048:	d106      	bne.n	8007058 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	68fa      	ldr	r2, [r7, #12]
 800704e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007052:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007056:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800705e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007062:	d109      	bne.n	8007078 <USB_DriveVbus+0x64>
 8007064:	78fb      	ldrb	r3, [r7, #3]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d106      	bne.n	8007078 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	68fa      	ldr	r2, [r7, #12]
 800706e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007072:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007076:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007078:	2300      	movs	r3, #0
}
 800707a:	4618      	mov	r0, r3
 800707c:	3714      	adds	r7, #20
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr

08007086 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007086:	b480      	push	{r7}
 8007088:	b085      	sub	sp, #20
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007092:	2300      	movs	r3, #0
 8007094:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	0c5b      	lsrs	r3, r3, #17
 80070a4:	f003 0303 	and.w	r3, r3, #3
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3714      	adds	r7, #20
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr

080070b4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b085      	sub	sp, #20
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	b29b      	uxth	r3, r3
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3714      	adds	r7, #20
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr
	...

080070d8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b088      	sub	sp, #32
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	4608      	mov	r0, r1
 80070e2:	4611      	mov	r1, r2
 80070e4:	461a      	mov	r2, r3
 80070e6:	4603      	mov	r3, r0
 80070e8:	70fb      	strb	r3, [r7, #3]
 80070ea:	460b      	mov	r3, r1
 80070ec:	70bb      	strb	r3, [r7, #2]
 80070ee:	4613      	mov	r3, r2
 80070f0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80070f2:	2300      	movs	r3, #0
 80070f4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80070fa:	78fb      	ldrb	r3, [r7, #3]
 80070fc:	015a      	lsls	r2, r3, #5
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	4413      	add	r3, r2
 8007102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007106:	461a      	mov	r2, r3
 8007108:	f04f 33ff 	mov.w	r3, #4294967295
 800710c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800710e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007112:	2b03      	cmp	r3, #3
 8007114:	d87e      	bhi.n	8007214 <USB_HC_Init+0x13c>
 8007116:	a201      	add	r2, pc, #4	; (adr r2, 800711c <USB_HC_Init+0x44>)
 8007118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800711c:	0800712d 	.word	0x0800712d
 8007120:	080071d7 	.word	0x080071d7
 8007124:	0800712d 	.word	0x0800712d
 8007128:	08007199 	.word	0x08007199
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800712c:	78fb      	ldrb	r3, [r7, #3]
 800712e:	015a      	lsls	r2, r3, #5
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	4413      	add	r3, r2
 8007134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007138:	461a      	mov	r2, r3
 800713a:	f240 439d 	movw	r3, #1181	; 0x49d
 800713e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007140:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007144:	2b00      	cmp	r3, #0
 8007146:	da10      	bge.n	800716a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007148:	78fb      	ldrb	r3, [r7, #3]
 800714a:	015a      	lsls	r2, r3, #5
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	4413      	add	r3, r2
 8007150:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007154:	68db      	ldr	r3, [r3, #12]
 8007156:	78fa      	ldrb	r2, [r7, #3]
 8007158:	0151      	lsls	r1, r2, #5
 800715a:	693a      	ldr	r2, [r7, #16]
 800715c:	440a      	add	r2, r1
 800715e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007162:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007166:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007168:	e057      	b.n	800721a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800716e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007172:	2b00      	cmp	r3, #0
 8007174:	d051      	beq.n	800721a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007176:	78fb      	ldrb	r3, [r7, #3]
 8007178:	015a      	lsls	r2, r3, #5
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	4413      	add	r3, r2
 800717e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	78fa      	ldrb	r2, [r7, #3]
 8007186:	0151      	lsls	r1, r2, #5
 8007188:	693a      	ldr	r2, [r7, #16]
 800718a:	440a      	add	r2, r1
 800718c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007190:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007194:	60d3      	str	r3, [r2, #12]
      break;
 8007196:	e040      	b.n	800721a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007198:	78fb      	ldrb	r3, [r7, #3]
 800719a:	015a      	lsls	r2, r3, #5
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	4413      	add	r3, r2
 80071a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071a4:	461a      	mov	r2, r3
 80071a6:	f240 639d 	movw	r3, #1693	; 0x69d
 80071aa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80071ac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	da34      	bge.n	800721e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80071b4:	78fb      	ldrb	r3, [r7, #3]
 80071b6:	015a      	lsls	r2, r3, #5
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	4413      	add	r3, r2
 80071bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071c0:	68db      	ldr	r3, [r3, #12]
 80071c2:	78fa      	ldrb	r2, [r7, #3]
 80071c4:	0151      	lsls	r1, r2, #5
 80071c6:	693a      	ldr	r2, [r7, #16]
 80071c8:	440a      	add	r2, r1
 80071ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071d2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80071d4:	e023      	b.n	800721e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80071d6:	78fb      	ldrb	r3, [r7, #3]
 80071d8:	015a      	lsls	r2, r3, #5
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	4413      	add	r3, r2
 80071de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071e2:	461a      	mov	r2, r3
 80071e4:	f240 2325 	movw	r3, #549	; 0x225
 80071e8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80071ea:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	da17      	bge.n	8007222 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80071f2:	78fb      	ldrb	r3, [r7, #3]
 80071f4:	015a      	lsls	r2, r3, #5
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	4413      	add	r3, r2
 80071fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071fe:	68db      	ldr	r3, [r3, #12]
 8007200:	78fa      	ldrb	r2, [r7, #3]
 8007202:	0151      	lsls	r1, r2, #5
 8007204:	693a      	ldr	r2, [r7, #16]
 8007206:	440a      	add	r2, r1
 8007208:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800720c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007210:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007212:	e006      	b.n	8007222 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	77fb      	strb	r3, [r7, #31]
      break;
 8007218:	e004      	b.n	8007224 <USB_HC_Init+0x14c>
      break;
 800721a:	bf00      	nop
 800721c:	e002      	b.n	8007224 <USB_HC_Init+0x14c>
      break;
 800721e:	bf00      	nop
 8007220:	e000      	b.n	8007224 <USB_HC_Init+0x14c>
      break;
 8007222:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800722a:	699a      	ldr	r2, [r3, #24]
 800722c:	78fb      	ldrb	r3, [r7, #3]
 800722e:	f003 030f 	and.w	r3, r3, #15
 8007232:	2101      	movs	r1, #1
 8007234:	fa01 f303 	lsl.w	r3, r1, r3
 8007238:	6939      	ldr	r1, [r7, #16]
 800723a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800723e:	4313      	orrs	r3, r2
 8007240:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	699b      	ldr	r3, [r3, #24]
 8007246:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800724e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007252:	2b00      	cmp	r3, #0
 8007254:	da03      	bge.n	800725e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007256:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800725a:	61bb      	str	r3, [r7, #24]
 800725c:	e001      	b.n	8007262 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800725e:	2300      	movs	r3, #0
 8007260:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f7ff ff0f 	bl	8007086 <USB_GetHostSpeed>
 8007268:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800726a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800726e:	2b02      	cmp	r3, #2
 8007270:	d106      	bne.n	8007280 <USB_HC_Init+0x1a8>
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2b02      	cmp	r3, #2
 8007276:	d003      	beq.n	8007280 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007278:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800727c:	617b      	str	r3, [r7, #20]
 800727e:	e001      	b.n	8007284 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007280:	2300      	movs	r3, #0
 8007282:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007284:	787b      	ldrb	r3, [r7, #1]
 8007286:	059b      	lsls	r3, r3, #22
 8007288:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800728c:	78bb      	ldrb	r3, [r7, #2]
 800728e:	02db      	lsls	r3, r3, #11
 8007290:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007294:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007296:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800729a:	049b      	lsls	r3, r3, #18
 800729c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80072a0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80072a2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80072a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80072a8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80072aa:	69bb      	ldr	r3, [r7, #24]
 80072ac:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80072ae:	78fb      	ldrb	r3, [r7, #3]
 80072b0:	0159      	lsls	r1, r3, #5
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	440b      	add	r3, r1
 80072b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072ba:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80072c0:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80072c2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80072c6:	2b03      	cmp	r3, #3
 80072c8:	d10f      	bne.n	80072ea <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80072ca:	78fb      	ldrb	r3, [r7, #3]
 80072cc:	015a      	lsls	r2, r3, #5
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	4413      	add	r3, r2
 80072d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	78fa      	ldrb	r2, [r7, #3]
 80072da:	0151      	lsls	r1, r2, #5
 80072dc:	693a      	ldr	r2, [r7, #16]
 80072de:	440a      	add	r2, r1
 80072e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80072e8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80072ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3720      	adds	r7, #32
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b08c      	sub	sp, #48	; 0x30
 80072f8:	af02      	add	r7, sp, #8
 80072fa:	60f8      	str	r0, [r7, #12]
 80072fc:	60b9      	str	r1, [r7, #8]
 80072fe:	4613      	mov	r3, r2
 8007300:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	785b      	ldrb	r3, [r3, #1]
 800730a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800730c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007310:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800731a:	2b00      	cmp	r3, #0
 800731c:	d02d      	beq.n	800737a <USB_HC_StartXfer+0x86>
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	791b      	ldrb	r3, [r3, #4]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d129      	bne.n	800737a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007326:	79fb      	ldrb	r3, [r7, #7]
 8007328:	2b01      	cmp	r3, #1
 800732a:	d117      	bne.n	800735c <USB_HC_StartXfer+0x68>
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	79db      	ldrb	r3, [r3, #7]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d003      	beq.n	800733c <USB_HC_StartXfer+0x48>
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	79db      	ldrb	r3, [r3, #7]
 8007338:	2b02      	cmp	r3, #2
 800733a:	d10f      	bne.n	800735c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	015a      	lsls	r2, r3, #5
 8007340:	6a3b      	ldr	r3, [r7, #32]
 8007342:	4413      	add	r3, r2
 8007344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	69fa      	ldr	r2, [r7, #28]
 800734c:	0151      	lsls	r1, r2, #5
 800734e:	6a3a      	ldr	r2, [r7, #32]
 8007350:	440a      	add	r2, r1
 8007352:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800735a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800735c:	79fb      	ldrb	r3, [r7, #7]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d10b      	bne.n	800737a <USB_HC_StartXfer+0x86>
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	795b      	ldrb	r3, [r3, #5]
 8007366:	2b01      	cmp	r3, #1
 8007368:	d107      	bne.n	800737a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	785b      	ldrb	r3, [r3, #1]
 800736e:	4619      	mov	r1, r3
 8007370:	68f8      	ldr	r0, [r7, #12]
 8007372:	f000 fa2f 	bl	80077d4 <USB_DoPing>
      return HAL_OK;
 8007376:	2300      	movs	r3, #0
 8007378:	e0f8      	b.n	800756c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	695b      	ldr	r3, [r3, #20]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d018      	beq.n	80073b4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	695b      	ldr	r3, [r3, #20]
 8007386:	68ba      	ldr	r2, [r7, #8]
 8007388:	8912      	ldrh	r2, [r2, #8]
 800738a:	4413      	add	r3, r2
 800738c:	3b01      	subs	r3, #1
 800738e:	68ba      	ldr	r2, [r7, #8]
 8007390:	8912      	ldrh	r2, [r2, #8]
 8007392:	fbb3 f3f2 	udiv	r3, r3, r2
 8007396:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007398:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800739a:	8b7b      	ldrh	r3, [r7, #26]
 800739c:	429a      	cmp	r2, r3
 800739e:	d90b      	bls.n	80073b8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80073a0:	8b7b      	ldrh	r3, [r7, #26]
 80073a2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80073a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80073a6:	68ba      	ldr	r2, [r7, #8]
 80073a8:	8912      	ldrh	r2, [r2, #8]
 80073aa:	fb02 f203 	mul.w	r2, r2, r3
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	611a      	str	r2, [r3, #16]
 80073b2:	e001      	b.n	80073b8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80073b4:	2301      	movs	r3, #1
 80073b6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	78db      	ldrb	r3, [r3, #3]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d007      	beq.n	80073d0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80073c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80073c2:	68ba      	ldr	r2, [r7, #8]
 80073c4:	8912      	ldrh	r2, [r2, #8]
 80073c6:	fb02 f203 	mul.w	r2, r2, r3
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	611a      	str	r2, [r3, #16]
 80073ce:	e003      	b.n	80073d8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	695a      	ldr	r2, [r3, #20]
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	691b      	ldr	r3, [r3, #16]
 80073dc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80073e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80073e2:	04d9      	lsls	r1, r3, #19
 80073e4:	4b63      	ldr	r3, [pc, #396]	; (8007574 <USB_HC_StartXfer+0x280>)
 80073e6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80073e8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	7a9b      	ldrb	r3, [r3, #10]
 80073ee:	075b      	lsls	r3, r3, #29
 80073f0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80073f4:	69f9      	ldr	r1, [r7, #28]
 80073f6:	0148      	lsls	r0, r1, #5
 80073f8:	6a39      	ldr	r1, [r7, #32]
 80073fa:	4401      	add	r1, r0
 80073fc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007400:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007402:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007404:	79fb      	ldrb	r3, [r7, #7]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d009      	beq.n	800741e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	68d9      	ldr	r1, [r3, #12]
 800740e:	69fb      	ldr	r3, [r7, #28]
 8007410:	015a      	lsls	r2, r3, #5
 8007412:	6a3b      	ldr	r3, [r7, #32]
 8007414:	4413      	add	r3, r2
 8007416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800741a:	460a      	mov	r2, r1
 800741c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800741e:	6a3b      	ldr	r3, [r7, #32]
 8007420:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	f003 0301 	and.w	r3, r3, #1
 800742a:	2b00      	cmp	r3, #0
 800742c:	bf0c      	ite	eq
 800742e:	2301      	moveq	r3, #1
 8007430:	2300      	movne	r3, #0
 8007432:	b2db      	uxtb	r3, r3
 8007434:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007436:	69fb      	ldr	r3, [r7, #28]
 8007438:	015a      	lsls	r2, r3, #5
 800743a:	6a3b      	ldr	r3, [r7, #32]
 800743c:	4413      	add	r3, r2
 800743e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	69fa      	ldr	r2, [r7, #28]
 8007446:	0151      	lsls	r1, r2, #5
 8007448:	6a3a      	ldr	r2, [r7, #32]
 800744a:	440a      	add	r2, r1
 800744c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007450:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007454:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007456:	69fb      	ldr	r3, [r7, #28]
 8007458:	015a      	lsls	r2, r3, #5
 800745a:	6a3b      	ldr	r3, [r7, #32]
 800745c:	4413      	add	r3, r2
 800745e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	7e7b      	ldrb	r3, [r7, #25]
 8007466:	075b      	lsls	r3, r3, #29
 8007468:	69f9      	ldr	r1, [r7, #28]
 800746a:	0148      	lsls	r0, r1, #5
 800746c:	6a39      	ldr	r1, [r7, #32]
 800746e:	4401      	add	r1, r0
 8007470:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007474:	4313      	orrs	r3, r2
 8007476:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007478:	69fb      	ldr	r3, [r7, #28]
 800747a:	015a      	lsls	r2, r3, #5
 800747c:	6a3b      	ldr	r3, [r7, #32]
 800747e:	4413      	add	r3, r2
 8007480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800748e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	78db      	ldrb	r3, [r3, #3]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d004      	beq.n	80074a2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800749e:	613b      	str	r3, [r7, #16]
 80074a0:	e003      	b.n	80074aa <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80074a8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80074b0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	015a      	lsls	r2, r3, #5
 80074b6:	6a3b      	ldr	r3, [r7, #32]
 80074b8:	4413      	add	r3, r2
 80074ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074be:	461a      	mov	r2, r3
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80074c4:	79fb      	ldrb	r3, [r7, #7]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d001      	beq.n	80074ce <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80074ca:	2300      	movs	r3, #0
 80074cc:	e04e      	b.n	800756c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	78db      	ldrb	r3, [r3, #3]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d149      	bne.n	800756a <USB_HC_StartXfer+0x276>
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	695b      	ldr	r3, [r3, #20]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d045      	beq.n	800756a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	79db      	ldrb	r3, [r3, #7]
 80074e2:	2b03      	cmp	r3, #3
 80074e4:	d830      	bhi.n	8007548 <USB_HC_StartXfer+0x254>
 80074e6:	a201      	add	r2, pc, #4	; (adr r2, 80074ec <USB_HC_StartXfer+0x1f8>)
 80074e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ec:	080074fd 	.word	0x080074fd
 80074f0:	08007521 	.word	0x08007521
 80074f4:	080074fd 	.word	0x080074fd
 80074f8:	08007521 	.word	0x08007521
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	695b      	ldr	r3, [r3, #20]
 8007500:	3303      	adds	r3, #3
 8007502:	089b      	lsrs	r3, r3, #2
 8007504:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007506:	8afa      	ldrh	r2, [r7, #22]
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800750c:	b29b      	uxth	r3, r3
 800750e:	429a      	cmp	r2, r3
 8007510:	d91c      	bls.n	800754c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	699b      	ldr	r3, [r3, #24]
 8007516:	f043 0220 	orr.w	r2, r3, #32
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	619a      	str	r2, [r3, #24]
        }
        break;
 800751e:	e015      	b.n	800754c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	695b      	ldr	r3, [r3, #20]
 8007524:	3303      	adds	r3, #3
 8007526:	089b      	lsrs	r3, r3, #2
 8007528:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800752a:	8afa      	ldrh	r2, [r7, #22]
 800752c:	6a3b      	ldr	r3, [r7, #32]
 800752e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007532:	691b      	ldr	r3, [r3, #16]
 8007534:	b29b      	uxth	r3, r3
 8007536:	429a      	cmp	r2, r3
 8007538:	d90a      	bls.n	8007550 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	699b      	ldr	r3, [r3, #24]
 800753e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	619a      	str	r2, [r3, #24]
        }
        break;
 8007546:	e003      	b.n	8007550 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007548:	bf00      	nop
 800754a:	e002      	b.n	8007552 <USB_HC_StartXfer+0x25e>
        break;
 800754c:	bf00      	nop
 800754e:	e000      	b.n	8007552 <USB_HC_StartXfer+0x25e>
        break;
 8007550:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	68d9      	ldr	r1, [r3, #12]
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	785a      	ldrb	r2, [r3, #1]
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	695b      	ldr	r3, [r3, #20]
 800755e:	b29b      	uxth	r3, r3
 8007560:	2000      	movs	r0, #0
 8007562:	9000      	str	r0, [sp, #0]
 8007564:	68f8      	ldr	r0, [r7, #12]
 8007566:	f7ff fb53 	bl	8006c10 <USB_WritePacket>
  }

  return HAL_OK;
 800756a:	2300      	movs	r3, #0
}
 800756c:	4618      	mov	r0, r3
 800756e:	3728      	adds	r7, #40	; 0x28
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}
 8007574:	1ff80000 	.word	0x1ff80000

08007578 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007578:	b480      	push	{r7}
 800757a:	b085      	sub	sp, #20
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800758a:	695b      	ldr	r3, [r3, #20]
 800758c:	b29b      	uxth	r3, r3
}
 800758e:	4618      	mov	r0, r3
 8007590:	3714      	adds	r7, #20
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr

0800759a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800759a:	b480      	push	{r7}
 800759c:	b089      	sub	sp, #36	; 0x24
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
 80075a2:	460b      	mov	r3, r1
 80075a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80075aa:	78fb      	ldrb	r3, [r7, #3]
 80075ac:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80075ae:	2300      	movs	r3, #0
 80075b0:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	015a      	lsls	r2, r3, #5
 80075b6:	69bb      	ldr	r3, [r7, #24]
 80075b8:	4413      	add	r3, r2
 80075ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	0c9b      	lsrs	r3, r3, #18
 80075c2:	f003 0303 	and.w	r3, r3, #3
 80075c6:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	015a      	lsls	r2, r3, #5
 80075cc:	69bb      	ldr	r3, [r7, #24]
 80075ce:	4413      	add	r3, r2
 80075d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	0fdb      	lsrs	r3, r3, #31
 80075d8:	f003 0301 	and.w	r3, r3, #1
 80075dc:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	f003 0320 	and.w	r3, r3, #32
 80075e6:	2b20      	cmp	r3, #32
 80075e8:	d104      	bne.n	80075f4 <USB_HC_Halt+0x5a>
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d101      	bne.n	80075f4 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80075f0:	2300      	movs	r3, #0
 80075f2:	e0e8      	b.n	80077c6 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d002      	beq.n	8007600 <USB_HC_Halt+0x66>
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	2b02      	cmp	r3, #2
 80075fe:	d173      	bne.n	80076e8 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	015a      	lsls	r2, r3, #5
 8007604:	69bb      	ldr	r3, [r7, #24]
 8007606:	4413      	add	r3, r2
 8007608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	697a      	ldr	r2, [r7, #20]
 8007610:	0151      	lsls	r1, r2, #5
 8007612:	69ba      	ldr	r2, [r7, #24]
 8007614:	440a      	add	r2, r1
 8007616:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800761a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800761e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	f003 0320 	and.w	r3, r3, #32
 8007628:	2b00      	cmp	r3, #0
 800762a:	f040 80cb 	bne.w	80077c4 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007632:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007636:	2b00      	cmp	r3, #0
 8007638:	d143      	bne.n	80076c2 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	015a      	lsls	r2, r3, #5
 800763e:	69bb      	ldr	r3, [r7, #24]
 8007640:	4413      	add	r3, r2
 8007642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	697a      	ldr	r2, [r7, #20]
 800764a:	0151      	lsls	r1, r2, #5
 800764c:	69ba      	ldr	r2, [r7, #24]
 800764e:	440a      	add	r2, r1
 8007650:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007654:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007658:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	015a      	lsls	r2, r3, #5
 800765e:	69bb      	ldr	r3, [r7, #24]
 8007660:	4413      	add	r3, r2
 8007662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	697a      	ldr	r2, [r7, #20]
 800766a:	0151      	lsls	r1, r2, #5
 800766c:	69ba      	ldr	r2, [r7, #24]
 800766e:	440a      	add	r2, r1
 8007670:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007674:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007678:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	015a      	lsls	r2, r3, #5
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	4413      	add	r3, r2
 8007682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	697a      	ldr	r2, [r7, #20]
 800768a:	0151      	lsls	r1, r2, #5
 800768c:	69ba      	ldr	r2, [r7, #24]
 800768e:	440a      	add	r2, r1
 8007690:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007694:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007698:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800769a:	69fb      	ldr	r3, [r7, #28]
 800769c:	3301      	adds	r3, #1
 800769e:	61fb      	str	r3, [r7, #28]
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80076a6:	d81d      	bhi.n	80076e4 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	015a      	lsls	r2, r3, #5
 80076ac:	69bb      	ldr	r3, [r7, #24]
 80076ae:	4413      	add	r3, r2
 80076b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076be:	d0ec      	beq.n	800769a <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80076c0:	e080      	b.n	80077c4 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	015a      	lsls	r2, r3, #5
 80076c6:	69bb      	ldr	r3, [r7, #24]
 80076c8:	4413      	add	r3, r2
 80076ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	697a      	ldr	r2, [r7, #20]
 80076d2:	0151      	lsls	r1, r2, #5
 80076d4:	69ba      	ldr	r2, [r7, #24]
 80076d6:	440a      	add	r2, r1
 80076d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80076e0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80076e2:	e06f      	b.n	80077c4 <USB_HC_Halt+0x22a>
            break;
 80076e4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80076e6:	e06d      	b.n	80077c4 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	015a      	lsls	r2, r3, #5
 80076ec:	69bb      	ldr	r3, [r7, #24]
 80076ee:	4413      	add	r3, r2
 80076f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	697a      	ldr	r2, [r7, #20]
 80076f8:	0151      	lsls	r1, r2, #5
 80076fa:	69ba      	ldr	r2, [r7, #24]
 80076fc:	440a      	add	r2, r1
 80076fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007702:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007706:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007708:	69bb      	ldr	r3, [r7, #24]
 800770a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800770e:	691b      	ldr	r3, [r3, #16]
 8007710:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007714:	2b00      	cmp	r3, #0
 8007716:	d143      	bne.n	80077a0 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	015a      	lsls	r2, r3, #5
 800771c:	69bb      	ldr	r3, [r7, #24]
 800771e:	4413      	add	r3, r2
 8007720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	697a      	ldr	r2, [r7, #20]
 8007728:	0151      	lsls	r1, r2, #5
 800772a:	69ba      	ldr	r2, [r7, #24]
 800772c:	440a      	add	r2, r1
 800772e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007732:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007736:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	015a      	lsls	r2, r3, #5
 800773c:	69bb      	ldr	r3, [r7, #24]
 800773e:	4413      	add	r3, r2
 8007740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	697a      	ldr	r2, [r7, #20]
 8007748:	0151      	lsls	r1, r2, #5
 800774a:	69ba      	ldr	r2, [r7, #24]
 800774c:	440a      	add	r2, r1
 800774e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007752:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007756:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	015a      	lsls	r2, r3, #5
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	4413      	add	r3, r2
 8007760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	697a      	ldr	r2, [r7, #20]
 8007768:	0151      	lsls	r1, r2, #5
 800776a:	69ba      	ldr	r2, [r7, #24]
 800776c:	440a      	add	r2, r1
 800776e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007772:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007776:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007778:	69fb      	ldr	r3, [r7, #28]
 800777a:	3301      	adds	r3, #1
 800777c:	61fb      	str	r3, [r7, #28]
 800777e:	69fb      	ldr	r3, [r7, #28]
 8007780:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007784:	d81d      	bhi.n	80077c2 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	015a      	lsls	r2, r3, #5
 800778a:	69bb      	ldr	r3, [r7, #24]
 800778c:	4413      	add	r3, r2
 800778e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007798:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800779c:	d0ec      	beq.n	8007778 <USB_HC_Halt+0x1de>
 800779e:	e011      	b.n	80077c4 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	015a      	lsls	r2, r3, #5
 80077a4:	69bb      	ldr	r3, [r7, #24]
 80077a6:	4413      	add	r3, r2
 80077a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	697a      	ldr	r2, [r7, #20]
 80077b0:	0151      	lsls	r1, r2, #5
 80077b2:	69ba      	ldr	r2, [r7, #24]
 80077b4:	440a      	add	r2, r1
 80077b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80077be:	6013      	str	r3, [r2, #0]
 80077c0:	e000      	b.n	80077c4 <USB_HC_Halt+0x22a>
          break;
 80077c2:	bf00      	nop
    }
  }

  return HAL_OK;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3724      	adds	r7, #36	; 0x24
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr
	...

080077d4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b087      	sub	sp, #28
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	460b      	mov	r3, r1
 80077de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80077e4:	78fb      	ldrb	r3, [r7, #3]
 80077e6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80077e8:	2301      	movs	r3, #1
 80077ea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	04da      	lsls	r2, r3, #19
 80077f0:	4b15      	ldr	r3, [pc, #84]	; (8007848 <USB_DoPing+0x74>)
 80077f2:	4013      	ands	r3, r2
 80077f4:	693a      	ldr	r2, [r7, #16]
 80077f6:	0151      	lsls	r1, r2, #5
 80077f8:	697a      	ldr	r2, [r7, #20]
 80077fa:	440a      	add	r2, r1
 80077fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007800:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007804:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	015a      	lsls	r2, r3, #5
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	4413      	add	r3, r2
 800780e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800781c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007824:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	015a      	lsls	r2, r3, #5
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	4413      	add	r3, r2
 800782e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007832:	461a      	mov	r2, r3
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007838:	2300      	movs	r3, #0
}
 800783a:	4618      	mov	r0, r3
 800783c:	371c      	adds	r7, #28
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr
 8007846:	bf00      	nop
 8007848:	1ff80000 	.word	0x1ff80000

0800784c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b086      	sub	sp, #24
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8007858:	2300      	movs	r3, #0
 800785a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f7ff f935 	bl	8006acc <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8007862:	2110      	movs	r1, #16
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f7ff f98f 	bl	8006b88 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f7ff f9b0 	bl	8006bd0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007870:	2300      	movs	r3, #0
 8007872:	613b      	str	r3, [r7, #16]
 8007874:	e01f      	b.n	80078b6 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	015a      	lsls	r2, r3, #5
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	4413      	add	r3, r2
 800787e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800788c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007894:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800789c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	015a      	lsls	r2, r3, #5
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	4413      	add	r3, r2
 80078a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078aa:	461a      	mov	r2, r3
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	3301      	adds	r3, #1
 80078b4:	613b      	str	r3, [r7, #16]
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	2b0f      	cmp	r3, #15
 80078ba:	d9dc      	bls.n	8007876 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80078bc:	2300      	movs	r3, #0
 80078be:	613b      	str	r3, [r7, #16]
 80078c0:	e034      	b.n	800792c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	015a      	lsls	r2, r3, #5
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	4413      	add	r3, r2
 80078ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80078d8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80078e0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80078e8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	015a      	lsls	r2, r3, #5
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	4413      	add	r3, r2
 80078f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078f6:	461a      	mov	r2, r3
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	3301      	adds	r3, #1
 8007900:	617b      	str	r3, [r7, #20]
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007908:	d80c      	bhi.n	8007924 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	015a      	lsls	r2, r3, #5
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	4413      	add	r3, r2
 8007912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800791c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007920:	d0ec      	beq.n	80078fc <USB_StopHost+0xb0>
 8007922:	e000      	b.n	8007926 <USB_StopHost+0xda>
        break;
 8007924:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	3301      	adds	r3, #1
 800792a:	613b      	str	r3, [r7, #16]
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	2b0f      	cmp	r3, #15
 8007930:	d9c7      	bls.n	80078c2 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007938:	461a      	mov	r2, r3
 800793a:	f04f 33ff 	mov.w	r3, #4294967295
 800793e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f04f 32ff 	mov.w	r2, #4294967295
 8007946:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f7ff f8ae 	bl	8006aaa <USB_EnableGlobalInt>

  return HAL_OK;
 800794e:	2300      	movs	r3, #0
}
 8007950:	4618      	mov	r0, r3
 8007952:	3718      	adds	r7, #24
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007958:	b590      	push	{r4, r7, lr}
 800795a:	b089      	sub	sp, #36	; 0x24
 800795c:	af04      	add	r7, sp, #16
 800795e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007960:	2301      	movs	r3, #1
 8007962:	2202      	movs	r2, #2
 8007964:	2102      	movs	r1, #2
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f000 fcb8 	bl	80082dc <USBH_FindInterface>
 800796c:	4603      	mov	r3, r0
 800796e:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007970:	7bfb      	ldrb	r3, [r7, #15]
 8007972:	2bff      	cmp	r3, #255	; 0xff
 8007974:	d002      	beq.n	800797c <USBH_CDC_InterfaceInit+0x24>
 8007976:	7bfb      	ldrb	r3, [r7, #15]
 8007978:	2b01      	cmp	r3, #1
 800797a:	d901      	bls.n	8007980 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800797c:	2302      	movs	r3, #2
 800797e:	e13d      	b.n	8007bfc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007980:	7bfb      	ldrb	r3, [r7, #15]
 8007982:	4619      	mov	r1, r3
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 fc8d 	bl	80082a4 <USBH_SelectInterface>
 800798a:	4603      	mov	r3, r0
 800798c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800798e:	7bbb      	ldrb	r3, [r7, #14]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d001      	beq.n	8007998 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007994:	2302      	movs	r3, #2
 8007996:	e131      	b.n	8007bfc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800799e:	2050      	movs	r0, #80	; 0x50
 80079a0:	f004 fef2 	bl	800c788 <malloc>
 80079a4:	4603      	mov	r3, r0
 80079a6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079ae:	69db      	ldr	r3, [r3, #28]
 80079b0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d101      	bne.n	80079bc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80079b8:	2302      	movs	r3, #2
 80079ba:	e11f      	b.n	8007bfc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80079bc:	2250      	movs	r2, #80	; 0x50
 80079be:	2100      	movs	r1, #0
 80079c0:	68b8      	ldr	r0, [r7, #8]
 80079c2:	f004 feff 	bl	800c7c4 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80079c6:	7bfb      	ldrb	r3, [r7, #15]
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	211a      	movs	r1, #26
 80079cc:	fb01 f303 	mul.w	r3, r1, r3
 80079d0:	4413      	add	r3, r2
 80079d2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	b25b      	sxtb	r3, r3
 80079da:	2b00      	cmp	r3, #0
 80079dc:	da15      	bge.n	8007a0a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80079de:	7bfb      	ldrb	r3, [r7, #15]
 80079e0:	687a      	ldr	r2, [r7, #4]
 80079e2:	211a      	movs	r1, #26
 80079e4:	fb01 f303 	mul.w	r3, r1, r3
 80079e8:	4413      	add	r3, r2
 80079ea:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80079ee:	781a      	ldrb	r2, [r3, #0]
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80079f4:	7bfb      	ldrb	r3, [r7, #15]
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	211a      	movs	r1, #26
 80079fa:	fb01 f303 	mul.w	r3, r1, r3
 80079fe:	4413      	add	r3, r2
 8007a00:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007a04:	881a      	ldrh	r2, [r3, #0]
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	785b      	ldrb	r3, [r3, #1]
 8007a0e:	4619      	mov	r1, r3
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f002 f890 	bl	8009b36 <USBH_AllocPipe>
 8007a16:	4603      	mov	r3, r0
 8007a18:	461a      	mov	r2, r3
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	7819      	ldrb	r1, [r3, #0]
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	7858      	ldrb	r0, [r3, #1]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007a32:	68ba      	ldr	r2, [r7, #8]
 8007a34:	8952      	ldrh	r2, [r2, #10]
 8007a36:	9202      	str	r2, [sp, #8]
 8007a38:	2203      	movs	r2, #3
 8007a3a:	9201      	str	r2, [sp, #4]
 8007a3c:	9300      	str	r3, [sp, #0]
 8007a3e:	4623      	mov	r3, r4
 8007a40:	4602      	mov	r2, r0
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f002 f848 	bl	8009ad8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	4619      	mov	r1, r3
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f004 fde9 	bl	800c628 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007a56:	2300      	movs	r3, #0
 8007a58:	2200      	movs	r2, #0
 8007a5a:	210a      	movs	r1, #10
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 fc3d 	bl	80082dc <USBH_FindInterface>
 8007a62:	4603      	mov	r3, r0
 8007a64:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007a66:	7bfb      	ldrb	r3, [r7, #15]
 8007a68:	2bff      	cmp	r3, #255	; 0xff
 8007a6a:	d002      	beq.n	8007a72 <USBH_CDC_InterfaceInit+0x11a>
 8007a6c:	7bfb      	ldrb	r3, [r7, #15]
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d901      	bls.n	8007a76 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007a72:	2302      	movs	r3, #2
 8007a74:	e0c2      	b.n	8007bfc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007a76:	7bfb      	ldrb	r3, [r7, #15]
 8007a78:	687a      	ldr	r2, [r7, #4]
 8007a7a:	211a      	movs	r1, #26
 8007a7c:	fb01 f303 	mul.w	r3, r1, r3
 8007a80:	4413      	add	r3, r2
 8007a82:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	b25b      	sxtb	r3, r3
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	da16      	bge.n	8007abc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007a8e:	7bfb      	ldrb	r3, [r7, #15]
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	211a      	movs	r1, #26
 8007a94:	fb01 f303 	mul.w	r3, r1, r3
 8007a98:	4413      	add	r3, r2
 8007a9a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007a9e:	781a      	ldrb	r2, [r3, #0]
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007aa4:	7bfb      	ldrb	r3, [r7, #15]
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	211a      	movs	r1, #26
 8007aaa:	fb01 f303 	mul.w	r3, r1, r3
 8007aae:	4413      	add	r3, r2
 8007ab0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007ab4:	881a      	ldrh	r2, [r3, #0]
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	835a      	strh	r2, [r3, #26]
 8007aba:	e015      	b.n	8007ae8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007abc:	7bfb      	ldrb	r3, [r7, #15]
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	211a      	movs	r1, #26
 8007ac2:	fb01 f303 	mul.w	r3, r1, r3
 8007ac6:	4413      	add	r3, r2
 8007ac8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007acc:	781a      	ldrb	r2, [r3, #0]
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007ad2:	7bfb      	ldrb	r3, [r7, #15]
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	211a      	movs	r1, #26
 8007ad8:	fb01 f303 	mul.w	r3, r1, r3
 8007adc:	4413      	add	r3, r2
 8007ade:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007ae2:	881a      	ldrh	r2, [r3, #0]
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8007ae8:	7bfb      	ldrb	r3, [r7, #15]
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	211a      	movs	r1, #26
 8007aee:	fb01 f303 	mul.w	r3, r1, r3
 8007af2:	4413      	add	r3, r2
 8007af4:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	b25b      	sxtb	r3, r3
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	da16      	bge.n	8007b2e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007b00:	7bfb      	ldrb	r3, [r7, #15]
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	211a      	movs	r1, #26
 8007b06:	fb01 f303 	mul.w	r3, r1, r3
 8007b0a:	4413      	add	r3, r2
 8007b0c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007b10:	781a      	ldrb	r2, [r3, #0]
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007b16:	7bfb      	ldrb	r3, [r7, #15]
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	211a      	movs	r1, #26
 8007b1c:	fb01 f303 	mul.w	r3, r1, r3
 8007b20:	4413      	add	r3, r2
 8007b22:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007b26:	881a      	ldrh	r2, [r3, #0]
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	835a      	strh	r2, [r3, #26]
 8007b2c:	e015      	b.n	8007b5a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007b2e:	7bfb      	ldrb	r3, [r7, #15]
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	211a      	movs	r1, #26
 8007b34:	fb01 f303 	mul.w	r3, r1, r3
 8007b38:	4413      	add	r3, r2
 8007b3a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007b3e:	781a      	ldrb	r2, [r3, #0]
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007b44:	7bfb      	ldrb	r3, [r7, #15]
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	211a      	movs	r1, #26
 8007b4a:	fb01 f303 	mul.w	r3, r1, r3
 8007b4e:	4413      	add	r3, r2
 8007b50:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007b54:	881a      	ldrh	r2, [r3, #0]
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	7b9b      	ldrb	r3, [r3, #14]
 8007b5e:	4619      	mov	r1, r3
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f001 ffe8 	bl	8009b36 <USBH_AllocPipe>
 8007b66:	4603      	mov	r3, r0
 8007b68:	461a      	mov	r2, r3
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	7bdb      	ldrb	r3, [r3, #15]
 8007b72:	4619      	mov	r1, r3
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f001 ffde 	bl	8009b36 <USBH_AllocPipe>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	7b59      	ldrb	r1, [r3, #13]
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	7b98      	ldrb	r0, [r3, #14]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007b96:	68ba      	ldr	r2, [r7, #8]
 8007b98:	8b12      	ldrh	r2, [r2, #24]
 8007b9a:	9202      	str	r2, [sp, #8]
 8007b9c:	2202      	movs	r2, #2
 8007b9e:	9201      	str	r2, [sp, #4]
 8007ba0:	9300      	str	r3, [sp, #0]
 8007ba2:	4623      	mov	r3, r4
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f001 ff96 	bl	8009ad8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	7b19      	ldrb	r1, [r3, #12]
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	7bd8      	ldrb	r0, [r3, #15]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007bc0:	68ba      	ldr	r2, [r7, #8]
 8007bc2:	8b52      	ldrh	r2, [r2, #26]
 8007bc4:	9202      	str	r2, [sp, #8]
 8007bc6:	2202      	movs	r2, #2
 8007bc8:	9201      	str	r2, [sp, #4]
 8007bca:	9300      	str	r3, [sp, #0]
 8007bcc:	4623      	mov	r3, r4
 8007bce:	4602      	mov	r2, r0
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f001 ff81 	bl	8009ad8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	7b5b      	ldrb	r3, [r3, #13]
 8007be2:	2200      	movs	r2, #0
 8007be4:	4619      	mov	r1, r3
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f004 fd1e 	bl	800c628 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	7b1b      	ldrb	r3, [r3, #12]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f004 fd17 	bl	800c628 <USBH_LL_SetToggle>

  return USBH_OK;
 8007bfa:	2300      	movs	r3, #0
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3714      	adds	r7, #20
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd90      	pop	{r4, r7, pc}

08007c04 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c12:	69db      	ldr	r3, [r3, #28]
 8007c14:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d00e      	beq.n	8007c3c <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	4619      	mov	r1, r3
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f001 ff76 	bl	8009b16 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	4619      	mov	r1, r3
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f001 ffa1 	bl	8009b78 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	7b1b      	ldrb	r3, [r3, #12]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d00e      	beq.n	8007c62 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	7b1b      	ldrb	r3, [r3, #12]
 8007c48:	4619      	mov	r1, r3
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f001 ff63 	bl	8009b16 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	7b1b      	ldrb	r3, [r3, #12]
 8007c54:	4619      	mov	r1, r3
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f001 ff8e 	bl	8009b78 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	7b5b      	ldrb	r3, [r3, #13]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d00e      	beq.n	8007c88 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	7b5b      	ldrb	r3, [r3, #13]
 8007c6e:	4619      	mov	r1, r3
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f001 ff50 	bl	8009b16 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	7b5b      	ldrb	r3, [r3, #13]
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f001 ff7b 	bl	8009b78 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2200      	movs	r2, #0
 8007c86:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c8e:	69db      	ldr	r3, [r3, #28]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d00b      	beq.n	8007cac <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c9a:	69db      	ldr	r3, [r3, #28]
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f004 fd7b 	bl	800c798 <free>
    phost->pActiveClass->pData = 0U;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ca8:	2200      	movs	r2, #0
 8007caa:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007cac:	2300      	movs	r3, #0
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3710      	adds	r7, #16
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}

08007cb6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007cb6:	b580      	push	{r7, lr}
 8007cb8:	b084      	sub	sp, #16
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007cc4:	69db      	ldr	r3, [r3, #28]
 8007cc6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	3340      	adds	r3, #64	; 0x40
 8007ccc:	4619      	mov	r1, r3
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 f8b1 	bl	8007e36 <GetLineCoding>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007cd8:	7afb      	ldrb	r3, [r7, #11]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d105      	bne.n	8007cea <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007ce4:	2102      	movs	r1, #2
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007cea:	7afb      	ldrb	r3, [r7, #11]
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3710      	adds	r7, #16
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007d00:	2300      	movs	r3, #0
 8007d02:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d0a:	69db      	ldr	r3, [r3, #28]
 8007d0c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007d14:	2b04      	cmp	r3, #4
 8007d16:	d877      	bhi.n	8007e08 <USBH_CDC_Process+0x114>
 8007d18:	a201      	add	r2, pc, #4	; (adr r2, 8007d20 <USBH_CDC_Process+0x2c>)
 8007d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d1e:	bf00      	nop
 8007d20:	08007d35 	.word	0x08007d35
 8007d24:	08007d3b 	.word	0x08007d3b
 8007d28:	08007d6b 	.word	0x08007d6b
 8007d2c:	08007ddf 	.word	0x08007ddf
 8007d30:	08007ded 	.word	0x08007ded
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007d34:	2300      	movs	r3, #0
 8007d36:	73fb      	strb	r3, [r7, #15]
      break;
 8007d38:	e06d      	b.n	8007e16 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d3e:	4619      	mov	r1, r3
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 f897 	bl	8007e74 <SetLineCoding>
 8007d46:	4603      	mov	r3, r0
 8007d48:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007d4a:	7bbb      	ldrb	r3, [r7, #14]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d104      	bne.n	8007d5a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	2202      	movs	r2, #2
 8007d54:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007d58:	e058      	b.n	8007e0c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007d5a:	7bbb      	ldrb	r3, [r7, #14]
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d055      	beq.n	8007e0c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	2204      	movs	r2, #4
 8007d64:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007d68:	e050      	b.n	8007e0c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	3340      	adds	r3, #64	; 0x40
 8007d6e:	4619      	mov	r1, r3
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 f860 	bl	8007e36 <GetLineCoding>
 8007d76:	4603      	mov	r3, r0
 8007d78:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007d7a:	7bbb      	ldrb	r3, [r7, #14]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d126      	bne.n	8007dce <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	2200      	movs	r2, #0
 8007d84:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d92:	791b      	ldrb	r3, [r3, #4]
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d13b      	bne.n	8007e10 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007da2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d133      	bne.n	8007e10 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007db2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d12b      	bne.n	8007e10 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007dc0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d124      	bne.n	8007e10 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 f982 	bl	80080d0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007dcc:	e020      	b.n	8007e10 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007dce:	7bbb      	ldrb	r3, [r7, #14]
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	d01d      	beq.n	8007e10 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	2204      	movs	r2, #4
 8007dd8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007ddc:	e018      	b.n	8007e10 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 f867 	bl	8007eb2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 f8f6 	bl	8007fd6 <CDC_ProcessReception>
      break;
 8007dea:	e014      	b.n	8007e16 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007dec:	2100      	movs	r1, #0
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f001 f951 	bl	8009096 <USBH_ClrFeature>
 8007df4:	4603      	mov	r3, r0
 8007df6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007df8:	7bbb      	ldrb	r3, [r7, #14]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d10a      	bne.n	8007e14 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	2200      	movs	r2, #0
 8007e02:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007e06:	e005      	b.n	8007e14 <USBH_CDC_Process+0x120>

    default:
      break;
 8007e08:	bf00      	nop
 8007e0a:	e004      	b.n	8007e16 <USBH_CDC_Process+0x122>
      break;
 8007e0c:	bf00      	nop
 8007e0e:	e002      	b.n	8007e16 <USBH_CDC_Process+0x122>
      break;
 8007e10:	bf00      	nop
 8007e12:	e000      	b.n	8007e16 <USBH_CDC_Process+0x122>
      break;
 8007e14:	bf00      	nop

  }

  return status;
 8007e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3710      	adds	r7, #16
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b083      	sub	sp, #12
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007e28:	2300      	movs	r3, #0
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	370c      	adds	r7, #12
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr

08007e36 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007e36:	b580      	push	{r7, lr}
 8007e38:	b082      	sub	sp, #8
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
 8007e3e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	22a1      	movs	r2, #161	; 0xa1
 8007e44:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2221      	movs	r2, #33	; 0x21
 8007e4a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2207      	movs	r2, #7
 8007e5c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	2207      	movs	r2, #7
 8007e62:	4619      	mov	r1, r3
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f001 faf6 	bl	8009456 <USBH_CtlReq>
 8007e6a:	4603      	mov	r3, r0
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3708      	adds	r7, #8
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b082      	sub	sp, #8
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2221      	movs	r2, #33	; 0x21
 8007e82:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2220      	movs	r2, #32
 8007e88:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2207      	movs	r2, #7
 8007e9a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	2207      	movs	r2, #7
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f001 fad7 	bl	8009456 <USBH_CtlReq>
 8007ea8:	4603      	mov	r3, r0
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3708      	adds	r7, #8
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007eb2:	b580      	push	{r7, lr}
 8007eb4:	b086      	sub	sp, #24
 8007eb6:	af02      	add	r7, sp, #8
 8007eb8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ec0:	69db      	ldr	r3, [r3, #28]
 8007ec2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007ece:	2b01      	cmp	r3, #1
 8007ed0:	d002      	beq.n	8007ed8 <CDC_ProcessTransmission+0x26>
 8007ed2:	2b02      	cmp	r3, #2
 8007ed4:	d023      	beq.n	8007f1e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007ed6:	e07a      	b.n	8007fce <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007edc:	68fa      	ldr	r2, [r7, #12]
 8007ede:	8b12      	ldrh	r2, [r2, #24]
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d90b      	bls.n	8007efc <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	69d9      	ldr	r1, [r3, #28]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	8b1a      	ldrh	r2, [r3, #24]
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	7b5b      	ldrb	r3, [r3, #13]
 8007ef0:	2001      	movs	r0, #1
 8007ef2:	9000      	str	r0, [sp, #0]
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f001 fdac 	bl	8009a52 <USBH_BulkSendData>
 8007efa:	e00b      	b.n	8007f14 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8007f04:	b29a      	uxth	r2, r3
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	7b5b      	ldrb	r3, [r3, #13]
 8007f0a:	2001      	movs	r0, #1
 8007f0c:	9000      	str	r0, [sp, #0]
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f001 fd9f 	bl	8009a52 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2202      	movs	r2, #2
 8007f18:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007f1c:	e057      	b.n	8007fce <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	7b5b      	ldrb	r3, [r3, #13]
 8007f22:	4619      	mov	r1, r3
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f004 fb55 	bl	800c5d4 <USBH_LL_GetURBState>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007f2e:	7afb      	ldrb	r3, [r7, #11]
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d136      	bne.n	8007fa2 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f38:	68fa      	ldr	r2, [r7, #12]
 8007f3a:	8b12      	ldrh	r2, [r2, #24]
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d90e      	bls.n	8007f5e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f44:	68fa      	ldr	r2, [r7, #12]
 8007f46:	8b12      	ldrh	r2, [r2, #24]
 8007f48:	1a9a      	subs	r2, r3, r2
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	69db      	ldr	r3, [r3, #28]
 8007f52:	68fa      	ldr	r2, [r7, #12]
 8007f54:	8b12      	ldrh	r2, [r2, #24]
 8007f56:	441a      	add	r2, r3
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	61da      	str	r2, [r3, #28]
 8007f5c:	e002      	b.n	8007f64 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2200      	movs	r2, #0
 8007f62:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d004      	beq.n	8007f76 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8007f74:	e006      	b.n	8007f84 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 f892 	bl	80080a8 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2204      	movs	r2, #4
 8007f88:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007f98:	2200      	movs	r2, #0
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	f001 fee8 	bl	8009d70 <osMessagePut>
      break;
 8007fa0:	e014      	b.n	8007fcc <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8007fa2:	7afb      	ldrb	r3, [r7, #11]
 8007fa4:	2b02      	cmp	r3, #2
 8007fa6:	d111      	bne.n	8007fcc <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2201      	movs	r2, #1
 8007fac:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2204      	movs	r2, #4
 8007fb4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	f001 fed2 	bl	8009d70 <osMessagePut>
      break;
 8007fcc:	bf00      	nop
  }
}
 8007fce:	bf00      	nop
 8007fd0:	3710      	adds	r7, #16
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}

08007fd6 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007fd6:	b580      	push	{r7, lr}
 8007fd8:	b086      	sub	sp, #24
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007fe4:	69db      	ldr	r3, [r3, #28]
 8007fe6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007ff2:	2b03      	cmp	r3, #3
 8007ff4:	d002      	beq.n	8007ffc <CDC_ProcessReception+0x26>
 8007ff6:	2b04      	cmp	r3, #4
 8007ff8:	d00e      	beq.n	8008018 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007ffa:	e051      	b.n	80080a0 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	6a19      	ldr	r1, [r3, #32]
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	8b5a      	ldrh	r2, [r3, #26]
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	7b1b      	ldrb	r3, [r3, #12]
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f001 fd47 	bl	8009a9c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	2204      	movs	r2, #4
 8008012:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008016:	e043      	b.n	80080a0 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	7b1b      	ldrb	r3, [r3, #12]
 800801c:	4619      	mov	r1, r3
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f004 fad8 	bl	800c5d4 <USBH_LL_GetURBState>
 8008024:	4603      	mov	r3, r0
 8008026:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008028:	7cfb      	ldrb	r3, [r7, #19]
 800802a:	2b01      	cmp	r3, #1
 800802c:	d137      	bne.n	800809e <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	7b1b      	ldrb	r3, [r3, #12]
 8008032:	4619      	mov	r1, r3
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f004 fa3b 	bl	800c4b0 <USBH_LL_GetLastXferSize>
 800803a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008040:	68fa      	ldr	r2, [r7, #12]
 8008042:	429a      	cmp	r2, r3
 8008044:	d016      	beq.n	8008074 <CDC_ProcessReception+0x9e>
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	8b5b      	ldrh	r3, [r3, #26]
 800804a:	461a      	mov	r2, r3
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	4293      	cmp	r3, r2
 8008050:	d910      	bls.n	8008074 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	1ad2      	subs	r2, r2, r3
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	6a1a      	ldr	r2, [r3, #32]
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	441a      	add	r2, r3
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	2203      	movs	r2, #3
 800806e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8008072:	e006      	b.n	8008082 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	2200      	movs	r2, #0
 8008078:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 f81d 	bl	80080bc <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2204      	movs	r2, #4
 8008086:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008096:	2200      	movs	r2, #0
 8008098:	4619      	mov	r1, r3
 800809a:	f001 fe69 	bl	8009d70 <osMessagePut>
      break;
 800809e:	bf00      	nop
  }
}
 80080a0:	bf00      	nop
 80080a2:	3718      	adds	r7, #24
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b083      	sub	sp, #12
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80080b0:	bf00      	nop
 80080b2:	370c      	adds	r7, #12
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr

080080bc <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80080bc:	b480      	push	{r7}
 80080be:	b083      	sub	sp, #12
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80080c4:	bf00      	nop
 80080c6:	370c      	adds	r7, #12
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr

080080d0 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80080d8:	bf00      	nop
 80080da:	370c      	adds	r7, #12
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr

080080e4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80080e4:	b5b0      	push	{r4, r5, r7, lr}
 80080e6:	b090      	sub	sp, #64	; 0x40
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	60f8      	str	r0, [r7, #12]
 80080ec:	60b9      	str	r1, [r7, #8]
 80080ee:	4613      	mov	r3, r2
 80080f0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d101      	bne.n	80080fc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80080f8:	2302      	movs	r3, #2
 80080fa:	e04d      	b.n	8008198 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	79fa      	ldrb	r2, [r7, #7]
 8008100:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2200      	movs	r2, #0
 8008108:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2200      	movs	r2, #0
 8008110:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8008114:	68f8      	ldr	r0, [r7, #12]
 8008116:	f000 f847 	bl	80081a8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2200      	movs	r2, #0
 800811e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2200      	movs	r2, #0
 8008126:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2200      	movs	r2, #0
 800812e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2200      	movs	r2, #0
 8008136:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d003      	beq.n	8008148 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	68ba      	ldr	r2, [r7, #8]
 8008144:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8008148:	4b15      	ldr	r3, [pc, #84]	; (80081a0 <USBH_Init+0xbc>)
 800814a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800814e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008150:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8008154:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008158:	2100      	movs	r1, #0
 800815a:	4618      	mov	r0, r3
 800815c:	f001 fddf 	bl	8009d1e <osMessageCreate>
 8008160:	4602      	mov	r2, r0
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8008168:	4b0e      	ldr	r3, [pc, #56]	; (80081a4 <USBH_Init+0xc0>)
 800816a:	f107 0414 	add.w	r4, r7, #20
 800816e:	461d      	mov	r5, r3
 8008170:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008172:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008174:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008178:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800817c:	f107 0314 	add.w	r3, r7, #20
 8008180:	68f9      	ldr	r1, [r7, #12]
 8008182:	4618      	mov	r0, r3
 8008184:	f001 fd6b 	bl	8009c5e <osThreadCreate>
 8008188:	4602      	mov	r2, r0
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8008190:	68f8      	ldr	r0, [r7, #12]
 8008192:	f004 f8d9 	bl	800c348 <USBH_LL_Init>

  return USBH_OK;
 8008196:	2300      	movs	r3, #0
}
 8008198:	4618      	mov	r0, r3
 800819a:	3740      	adds	r7, #64	; 0x40
 800819c:	46bd      	mov	sp, r7
 800819e:	bdb0      	pop	{r4, r5, r7, pc}
 80081a0:	0800caa8 	.word	0x0800caa8
 80081a4:	0800cab8 	.word	0x0800cab8

080081a8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b085      	sub	sp, #20
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80081b0:	2300      	movs	r3, #0
 80081b2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80081b4:	2300      	movs	r3, #0
 80081b6:	60fb      	str	r3, [r7, #12]
 80081b8:	e009      	b.n	80081ce <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	33e0      	adds	r3, #224	; 0xe0
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	4413      	add	r3, r2
 80081c4:	2200      	movs	r2, #0
 80081c6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	3301      	adds	r3, #1
 80081cc:	60fb      	str	r3, [r7, #12]
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2b0e      	cmp	r3, #14
 80081d2:	d9f2      	bls.n	80081ba <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80081d4:	2300      	movs	r3, #0
 80081d6:	60fb      	str	r3, [r7, #12]
 80081d8:	e009      	b.n	80081ee <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80081da:	687a      	ldr	r2, [r7, #4]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	4413      	add	r3, r2
 80081e0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80081e4:	2200      	movs	r2, #0
 80081e6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	3301      	adds	r3, #1
 80081ec:	60fb      	str	r3, [r7, #12]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081f4:	d3f1      	bcc.n	80081da <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2200      	movs	r2, #0
 80081fa:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2200      	movs	r2, #0
 8008200:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2201      	movs	r2, #1
 8008206:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2200      	movs	r2, #0
 800820c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2201      	movs	r2, #1
 8008214:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2240      	movs	r2, #64	; 0x40
 800821a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2201      	movs	r2, #1
 800822e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2200      	movs	r2, #0
 8008236:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8008242:	2300      	movs	r3, #0
}
 8008244:	4618      	mov	r0, r3
 8008246:	3714      	adds	r7, #20
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr

08008250 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008250:	b480      	push	{r7}
 8008252:	b085      	sub	sp, #20
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800825a:	2300      	movs	r3, #0
 800825c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d016      	beq.n	8008292 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800826a:	2b00      	cmp	r3, #0
 800826c:	d10e      	bne.n	800828c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008274:	1c59      	adds	r1, r3, #1
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	33de      	adds	r3, #222	; 0xde
 8008280:	6839      	ldr	r1, [r7, #0]
 8008282:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008286:	2300      	movs	r3, #0
 8008288:	73fb      	strb	r3, [r7, #15]
 800828a:	e004      	b.n	8008296 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800828c:	2302      	movs	r3, #2
 800828e:	73fb      	strb	r3, [r7, #15]
 8008290:	e001      	b.n	8008296 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008292:	2302      	movs	r3, #2
 8008294:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008296:	7bfb      	ldrb	r3, [r7, #15]
}
 8008298:	4618      	mov	r0, r3
 800829a:	3714      	adds	r7, #20
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr

080082a4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b085      	sub	sp, #20
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	460b      	mov	r3, r1
 80082ae:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80082b0:	2300      	movs	r3, #0
 80082b2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80082ba:	78fa      	ldrb	r2, [r7, #3]
 80082bc:	429a      	cmp	r2, r3
 80082be:	d204      	bcs.n	80082ca <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	78fa      	ldrb	r2, [r7, #3]
 80082c4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80082c8:	e001      	b.n	80082ce <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80082ca:	2302      	movs	r3, #2
 80082cc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80082ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3714      	adds	r7, #20
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr

080082dc <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80082dc:	b480      	push	{r7}
 80082de:	b087      	sub	sp, #28
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	4608      	mov	r0, r1
 80082e6:	4611      	mov	r1, r2
 80082e8:	461a      	mov	r2, r3
 80082ea:	4603      	mov	r3, r0
 80082ec:	70fb      	strb	r3, [r7, #3]
 80082ee:	460b      	mov	r3, r1
 80082f0:	70bb      	strb	r3, [r7, #2]
 80082f2:	4613      	mov	r3, r2
 80082f4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80082f6:	2300      	movs	r3, #0
 80082f8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80082fa:	2300      	movs	r3, #0
 80082fc:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008304:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008306:	e025      	b.n	8008354 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008308:	7dfb      	ldrb	r3, [r7, #23]
 800830a:	221a      	movs	r2, #26
 800830c:	fb02 f303 	mul.w	r3, r2, r3
 8008310:	3308      	adds	r3, #8
 8008312:	68fa      	ldr	r2, [r7, #12]
 8008314:	4413      	add	r3, r2
 8008316:	3302      	adds	r3, #2
 8008318:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	795b      	ldrb	r3, [r3, #5]
 800831e:	78fa      	ldrb	r2, [r7, #3]
 8008320:	429a      	cmp	r2, r3
 8008322:	d002      	beq.n	800832a <USBH_FindInterface+0x4e>
 8008324:	78fb      	ldrb	r3, [r7, #3]
 8008326:	2bff      	cmp	r3, #255	; 0xff
 8008328:	d111      	bne.n	800834e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800832e:	78ba      	ldrb	r2, [r7, #2]
 8008330:	429a      	cmp	r2, r3
 8008332:	d002      	beq.n	800833a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008334:	78bb      	ldrb	r3, [r7, #2]
 8008336:	2bff      	cmp	r3, #255	; 0xff
 8008338:	d109      	bne.n	800834e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800833e:	787a      	ldrb	r2, [r7, #1]
 8008340:	429a      	cmp	r2, r3
 8008342:	d002      	beq.n	800834a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008344:	787b      	ldrb	r3, [r7, #1]
 8008346:	2bff      	cmp	r3, #255	; 0xff
 8008348:	d101      	bne.n	800834e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800834a:	7dfb      	ldrb	r3, [r7, #23]
 800834c:	e006      	b.n	800835c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800834e:	7dfb      	ldrb	r3, [r7, #23]
 8008350:	3301      	adds	r3, #1
 8008352:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008354:	7dfb      	ldrb	r3, [r7, #23]
 8008356:	2b01      	cmp	r3, #1
 8008358:	d9d6      	bls.n	8008308 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800835a:	23ff      	movs	r3, #255	; 0xff
}
 800835c:	4618      	mov	r0, r3
 800835e:	371c      	adds	r7, #28
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b082      	sub	sp, #8
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f004 f825 	bl	800c3c0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8008376:	2101      	movs	r1, #1
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f004 f93e 	bl	800c5fa <USBH_LL_DriverVBUS>

  return USBH_OK;
 800837e:	2300      	movs	r3, #0
}
 8008380:	4618      	mov	r0, r3
 8008382:	3708      	adds	r7, #8
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b088      	sub	sp, #32
 800838c:	af04      	add	r7, sp, #16
 800838e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008390:	2302      	movs	r3, #2
 8008392:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008394:	2300      	movs	r3, #0
 8008396:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d102      	bne.n	80083aa <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2203      	movs	r2, #3
 80083a8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	b2db      	uxtb	r3, r3
 80083b0:	2b0b      	cmp	r3, #11
 80083b2:	f200 823c 	bhi.w	800882e <USBH_Process+0x4a6>
 80083b6:	a201      	add	r2, pc, #4	; (adr r2, 80083bc <USBH_Process+0x34>)
 80083b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083bc:	080083ed 	.word	0x080083ed
 80083c0:	0800843b 	.word	0x0800843b
 80083c4:	080084bf 	.word	0x080084bf
 80083c8:	080087ad 	.word	0x080087ad
 80083cc:	0800882f 	.word	0x0800882f
 80083d0:	0800857f 	.word	0x0800857f
 80083d4:	08008737 	.word	0x08008737
 80083d8:	080085d1 	.word	0x080085d1
 80083dc:	0800860d 	.word	0x0800860d
 80083e0:	08008647 	.word	0x08008647
 80083e4:	0800868f 	.word	0x0800868f
 80083e8:	08008795 	.word	0x08008795
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	f000 821c 	beq.w	8008832 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2201      	movs	r2, #1
 80083fe:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008400:	20c8      	movs	r0, #200	; 0xc8
 8008402:	f004 f941 	bl	800c688 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f004 f837 	bl	800c47a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2200      	movs	r2, #0
 8008418:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2201      	movs	r2, #1
 8008420:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008430:	2200      	movs	r2, #0
 8008432:	4619      	mov	r1, r3
 8008434:	f001 fc9c 	bl	8009d70 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008438:	e1fb      	b.n	8008832 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008440:	2b01      	cmp	r3, #1
 8008442:	d107      	bne.n	8008454 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2200      	movs	r2, #0
 8008448:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2202      	movs	r2, #2
 8008450:	701a      	strb	r2, [r3, #0]
 8008452:	e025      	b.n	80084a0 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800845a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800845e:	d914      	bls.n	800848a <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008466:	3301      	adds	r3, #1
 8008468:	b2da      	uxtb	r2, r3
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008476:	2b03      	cmp	r3, #3
 8008478:	d903      	bls.n	8008482 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	220d      	movs	r2, #13
 800847e:	701a      	strb	r2, [r3, #0]
 8008480:	e00e      	b.n	80084a0 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	701a      	strb	r2, [r3, #0]
 8008488:	e00a      	b.n	80084a0 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008490:	f103 020a 	add.w	r2, r3, #10
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800849a:	200a      	movs	r0, #10
 800849c:	f004 f8f4 	bl	800c688 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2201      	movs	r2, #1
 80084a4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80084b4:	2200      	movs	r2, #0
 80084b6:	4619      	mov	r1, r3
 80084b8:	f001 fc5a 	bl	8009d70 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80084bc:	e1c0      	b.n	8008840 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d005      	beq.n	80084d4 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80084ce:	2104      	movs	r1, #4
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80084d4:	2064      	movs	r0, #100	; 0x64
 80084d6:	f004 f8d7 	bl	800c688 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f003 ffa6 	bl	800c42c <USBH_LL_GetSpeed>
 80084e0:	4603      	mov	r3, r0
 80084e2:	461a      	mov	r2, r3
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2205      	movs	r2, #5
 80084ee:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80084f0:	2100      	movs	r1, #0
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f001 fb1f 	bl	8009b36 <USBH_AllocPipe>
 80084f8:	4603      	mov	r3, r0
 80084fa:	461a      	mov	r2, r3
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008500:	2180      	movs	r1, #128	; 0x80
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f001 fb17 	bl	8009b36 <USBH_AllocPipe>
 8008508:	4603      	mov	r3, r0
 800850a:	461a      	mov	r2, r3
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	7919      	ldrb	r1, [r3, #4]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008524:	b292      	uxth	r2, r2
 8008526:	9202      	str	r2, [sp, #8]
 8008528:	2200      	movs	r2, #0
 800852a:	9201      	str	r2, [sp, #4]
 800852c:	9300      	str	r3, [sp, #0]
 800852e:	4603      	mov	r3, r0
 8008530:	2280      	movs	r2, #128	; 0x80
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f001 fad0 	bl	8009ad8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	7959      	ldrb	r1, [r3, #5]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800854c:	b292      	uxth	r2, r2
 800854e:	9202      	str	r2, [sp, #8]
 8008550:	2200      	movs	r2, #0
 8008552:	9201      	str	r2, [sp, #4]
 8008554:	9300      	str	r3, [sp, #0]
 8008556:	4603      	mov	r3, r0
 8008558:	2200      	movs	r2, #0
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f001 fabc 	bl	8009ad8 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2201      	movs	r2, #1
 8008564:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008574:	2200      	movs	r2, #0
 8008576:	4619      	mov	r1, r3
 8008578:	f001 fbfa 	bl	8009d70 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800857c:	e160      	b.n	8008840 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 f964 	bl	800884c <USBH_HandleEnum>
 8008584:	4603      	mov	r3, r0
 8008586:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008588:	7bbb      	ldrb	r3, [r7, #14]
 800858a:	b2db      	uxtb	r3, r3
 800858c:	2b00      	cmp	r3, #0
 800858e:	f040 8152 	bne.w	8008836 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2200      	movs	r2, #0
 8008596:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	d103      	bne.n	80085ac <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2208      	movs	r2, #8
 80085a8:	701a      	strb	r2, [r3, #0]
 80085aa:	e002      	b.n	80085b2 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2207      	movs	r2, #7
 80085b0:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2205      	movs	r2, #5
 80085b6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80085c6:	2200      	movs	r2, #0
 80085c8:	4619      	mov	r1, r3
 80085ca:	f001 fbd1 	bl	8009d70 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80085ce:	e132      	b.n	8008836 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	f000 812f 	beq.w	800883a <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80085e2:	2101      	movs	r1, #1
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2208      	movs	r2, #8
 80085ec:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2205      	movs	r2, #5
 80085f2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008602:	2200      	movs	r2, #0
 8008604:	4619      	mov	r1, r3
 8008606:	f001 fbb3 	bl	8009d70 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800860a:	e116      	b.n	800883a <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008612:	b29b      	uxth	r3, r3
 8008614:	4619      	mov	r1, r3
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 fcf6 	bl	8009008 <USBH_SetCfg>
 800861c:	4603      	mov	r3, r0
 800861e:	2b00      	cmp	r3, #0
 8008620:	d102      	bne.n	8008628 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2209      	movs	r2, #9
 8008626:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2201      	movs	r2, #1
 800862c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800863c:	2200      	movs	r2, #0
 800863e:	4619      	mov	r1, r3
 8008640:	f001 fb96 	bl	8009d70 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008644:	e0fc      	b.n	8008840 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800864c:	f003 0320 	and.w	r3, r3, #32
 8008650:	2b00      	cmp	r3, #0
 8008652:	d00a      	beq.n	800866a <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8008654:	2101      	movs	r1, #1
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 fcf9 	bl	800904e <USBH_SetFeature>
 800865c:	4603      	mov	r3, r0
 800865e:	2b00      	cmp	r3, #0
 8008660:	d106      	bne.n	8008670 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	220a      	movs	r2, #10
 8008666:	701a      	strb	r2, [r3, #0]
 8008668:	e002      	b.n	8008670 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	220a      	movs	r2, #10
 800866e:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2201      	movs	r2, #1
 8008674:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008684:	2200      	movs	r2, #0
 8008686:	4619      	mov	r1, r3
 8008688:	f001 fb72 	bl	8009d70 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800868c:	e0d8      	b.n	8008840 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008694:	2b00      	cmp	r3, #0
 8008696:	d03f      	beq.n	8008718 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2200      	movs	r2, #0
 800869c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80086a0:	2300      	movs	r3, #0
 80086a2:	73fb      	strb	r3, [r7, #15]
 80086a4:	e016      	b.n	80086d4 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80086a6:	7bfa      	ldrb	r2, [r7, #15]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	32de      	adds	r2, #222	; 0xde
 80086ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086b0:	791a      	ldrb	r2, [r3, #4]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d108      	bne.n	80086ce <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 80086bc:	7bfa      	ldrb	r2, [r7, #15]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	32de      	adds	r2, #222	; 0xde
 80086c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80086cc:	e005      	b.n	80086da <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80086ce:	7bfb      	ldrb	r3, [r7, #15]
 80086d0:	3301      	adds	r3, #1
 80086d2:	73fb      	strb	r3, [r7, #15]
 80086d4:	7bfb      	ldrb	r3, [r7, #15]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d0e5      	beq.n	80086a6 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d016      	beq.n	8008712 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80086ea:	689b      	ldr	r3, [r3, #8]
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	4798      	blx	r3
 80086f0:	4603      	mov	r3, r0
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d109      	bne.n	800870a <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2206      	movs	r2, #6
 80086fa:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008702:	2103      	movs	r1, #3
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	4798      	blx	r3
 8008708:	e006      	b.n	8008718 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	220d      	movs	r2, #13
 800870e:	701a      	strb	r2, [r3, #0]
 8008710:	e002      	b.n	8008718 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	220d      	movs	r2, #13
 8008716:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2205      	movs	r2, #5
 800871c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800872c:	2200      	movs	r2, #0
 800872e:	4619      	mov	r1, r3
 8008730:	f001 fb1e 	bl	8009d70 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008734:	e084      	b.n	8008840 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800873c:	2b00      	cmp	r3, #0
 800873e:	d017      	beq.n	8008770 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008746:	691b      	ldr	r3, [r3, #16]
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	4798      	blx	r3
 800874c:	4603      	mov	r3, r0
 800874e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008750:	7bbb      	ldrb	r3, [r7, #14]
 8008752:	b2db      	uxtb	r3, r3
 8008754:	2b00      	cmp	r3, #0
 8008756:	d103      	bne.n	8008760 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	220b      	movs	r2, #11
 800875c:	701a      	strb	r2, [r3, #0]
 800875e:	e00a      	b.n	8008776 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 8008760:	7bbb      	ldrb	r3, [r7, #14]
 8008762:	b2db      	uxtb	r3, r3
 8008764:	2b02      	cmp	r3, #2
 8008766:	d106      	bne.n	8008776 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	220d      	movs	r2, #13
 800876c:	701a      	strb	r2, [r3, #0]
 800876e:	e002      	b.n	8008776 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	220d      	movs	r2, #13
 8008774:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2205      	movs	r2, #5
 800877a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800878a:	2200      	movs	r2, #0
 800878c:	4619      	mov	r1, r3
 800878e:	f001 faef 	bl	8009d70 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008792:	e055      	b.n	8008840 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800879a:	2b00      	cmp	r3, #0
 800879c:	d04f      	beq.n	800883e <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087a4:	695b      	ldr	r3, [r3, #20]
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	4798      	blx	r3
      }
      break;
 80087aa:	e048      	b.n	800883e <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2200      	movs	r2, #0
 80087b0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f7ff fcf7 	bl	80081a8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d009      	beq.n	80087d8 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087ca:	68db      	ldr	r3, [r3, #12]
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d005      	beq.n	80087ee <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80087e8:	2105      	movs	r1, #5
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80087f4:	b2db      	uxtb	r3, r3
 80087f6:	2b01      	cmp	r3, #1
 80087f8:	d107      	bne.n	800880a <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2200      	movs	r2, #0
 80087fe:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f7ff fdb0 	bl	8008368 <USBH_Start>
 8008808:	e002      	b.n	8008810 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f003 fdd8 	bl	800c3c0 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2201      	movs	r2, #1
 8008814:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008824:	2200      	movs	r2, #0
 8008826:	4619      	mov	r1, r3
 8008828:	f001 faa2 	bl	8009d70 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800882c:	e008      	b.n	8008840 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800882e:	bf00      	nop
 8008830:	e006      	b.n	8008840 <USBH_Process+0x4b8>
      break;
 8008832:	bf00      	nop
 8008834:	e004      	b.n	8008840 <USBH_Process+0x4b8>
      break;
 8008836:	bf00      	nop
 8008838:	e002      	b.n	8008840 <USBH_Process+0x4b8>
    break;
 800883a:	bf00      	nop
 800883c:	e000      	b.n	8008840 <USBH_Process+0x4b8>
      break;
 800883e:	bf00      	nop
  }
  return USBH_OK;
 8008840:	2300      	movs	r3, #0
}
 8008842:	4618      	mov	r0, r3
 8008844:	3710      	adds	r7, #16
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}
 800884a:	bf00      	nop

0800884c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b088      	sub	sp, #32
 8008850:	af04      	add	r7, sp, #16
 8008852:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008854:	2301      	movs	r3, #1
 8008856:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008858:	2301      	movs	r3, #1
 800885a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	785b      	ldrb	r3, [r3, #1]
 8008860:	2b07      	cmp	r3, #7
 8008862:	f200 8208 	bhi.w	8008c76 <USBH_HandleEnum+0x42a>
 8008866:	a201      	add	r2, pc, #4	; (adr r2, 800886c <USBH_HandleEnum+0x20>)
 8008868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800886c:	0800888d 	.word	0x0800888d
 8008870:	0800894b 	.word	0x0800894b
 8008874:	080089b5 	.word	0x080089b5
 8008878:	08008a43 	.word	0x08008a43
 800887c:	08008aad 	.word	0x08008aad
 8008880:	08008b1d 	.word	0x08008b1d
 8008884:	08008bb9 	.word	0x08008bb9
 8008888:	08008c37 	.word	0x08008c37
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800888c:	2108      	movs	r1, #8
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 faea 	bl	8008e68 <USBH_Get_DevDesc>
 8008894:	4603      	mov	r3, r0
 8008896:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008898:	7bbb      	ldrb	r3, [r7, #14]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d130      	bne.n	8008900 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2201      	movs	r2, #1
 80088ac:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	7919      	ldrb	r1, [r3, #4]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80088be:	687a      	ldr	r2, [r7, #4]
 80088c0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80088c2:	b292      	uxth	r2, r2
 80088c4:	9202      	str	r2, [sp, #8]
 80088c6:	2200      	movs	r2, #0
 80088c8:	9201      	str	r2, [sp, #4]
 80088ca:	9300      	str	r3, [sp, #0]
 80088cc:	4603      	mov	r3, r0
 80088ce:	2280      	movs	r2, #128	; 0x80
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f001 f901 	bl	8009ad8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	7959      	ldrb	r1, [r3, #5]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80088e6:	687a      	ldr	r2, [r7, #4]
 80088e8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80088ea:	b292      	uxth	r2, r2
 80088ec:	9202      	str	r2, [sp, #8]
 80088ee:	2200      	movs	r2, #0
 80088f0:	9201      	str	r2, [sp, #4]
 80088f2:	9300      	str	r3, [sp, #0]
 80088f4:	4603      	mov	r3, r0
 80088f6:	2200      	movs	r2, #0
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f001 f8ed 	bl	8009ad8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80088fe:	e1bc      	b.n	8008c7a <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008900:	7bbb      	ldrb	r3, [r7, #14]
 8008902:	2b03      	cmp	r3, #3
 8008904:	f040 81b9 	bne.w	8008c7a <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800890e:	3301      	adds	r3, #1
 8008910:	b2da      	uxtb	r2, r3
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800891e:	2b03      	cmp	r3, #3
 8008920:	d903      	bls.n	800892a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	220d      	movs	r2, #13
 8008926:	701a      	strb	r2, [r3, #0]
      break;
 8008928:	e1a7      	b.n	8008c7a <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	795b      	ldrb	r3, [r3, #5]
 800892e:	4619      	mov	r1, r3
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f001 f921 	bl	8009b78 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	791b      	ldrb	r3, [r3, #4]
 800893a:	4619      	mov	r1, r3
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f001 f91b 	bl	8009b78 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2200      	movs	r2, #0
 8008946:	701a      	strb	r2, [r3, #0]
      break;
 8008948:	e197      	b.n	8008c7a <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800894a:	2112      	movs	r1, #18
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f000 fa8b 	bl	8008e68 <USBH_Get_DevDesc>
 8008952:	4603      	mov	r3, r0
 8008954:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008956:	7bbb      	ldrb	r3, [r7, #14]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d103      	bne.n	8008964 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2202      	movs	r2, #2
 8008960:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008962:	e18c      	b.n	8008c7e <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008964:	7bbb      	ldrb	r3, [r7, #14]
 8008966:	2b03      	cmp	r3, #3
 8008968:	f040 8189 	bne.w	8008c7e <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008972:	3301      	adds	r3, #1
 8008974:	b2da      	uxtb	r2, r3
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008982:	2b03      	cmp	r3, #3
 8008984:	d903      	bls.n	800898e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	220d      	movs	r2, #13
 800898a:	701a      	strb	r2, [r3, #0]
      break;
 800898c:	e177      	b.n	8008c7e <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	795b      	ldrb	r3, [r3, #5]
 8008992:	4619      	mov	r1, r3
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f001 f8ef 	bl	8009b78 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	791b      	ldrb	r3, [r3, #4]
 800899e:	4619      	mov	r1, r3
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f001 f8e9 	bl	8009b78 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2200      	movs	r2, #0
 80089aa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2200      	movs	r2, #0
 80089b0:	701a      	strb	r2, [r3, #0]
      break;
 80089b2:	e164      	b.n	8008c7e <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80089b4:	2101      	movs	r1, #1
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 fb02 	bl	8008fc0 <USBH_SetAddress>
 80089bc:	4603      	mov	r3, r0
 80089be:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80089c0:	7bbb      	ldrb	r3, [r7, #14]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d132      	bne.n	8008a2c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80089c6:	2002      	movs	r0, #2
 80089c8:	f003 fe5e 	bl	800c688 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2201      	movs	r2, #1
 80089d0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2203      	movs	r2, #3
 80089d8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	7919      	ldrb	r1, [r3, #4]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80089ee:	b292      	uxth	r2, r2
 80089f0:	9202      	str	r2, [sp, #8]
 80089f2:	2200      	movs	r2, #0
 80089f4:	9201      	str	r2, [sp, #4]
 80089f6:	9300      	str	r3, [sp, #0]
 80089f8:	4603      	mov	r3, r0
 80089fa:	2280      	movs	r2, #128	; 0x80
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f001 f86b 	bl	8009ad8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	7959      	ldrb	r1, [r3, #5]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008a16:	b292      	uxth	r2, r2
 8008a18:	9202      	str	r2, [sp, #8]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	9201      	str	r2, [sp, #4]
 8008a1e:	9300      	str	r3, [sp, #0]
 8008a20:	4603      	mov	r3, r0
 8008a22:	2200      	movs	r2, #0
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f001 f857 	bl	8009ad8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008a2a:	e12a      	b.n	8008c82 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008a2c:	7bbb      	ldrb	r3, [r7, #14]
 8008a2e:	2b03      	cmp	r3, #3
 8008a30:	f040 8127 	bne.w	8008c82 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	220d      	movs	r2, #13
 8008a38:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	705a      	strb	r2, [r3, #1]
      break;
 8008a40:	e11f      	b.n	8008c82 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008a42:	2109      	movs	r1, #9
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f000 fa37 	bl	8008eb8 <USBH_Get_CfgDesc>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008a4e:	7bbb      	ldrb	r3, [r7, #14]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d103      	bne.n	8008a5c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2204      	movs	r2, #4
 8008a58:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008a5a:	e114      	b.n	8008c86 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008a5c:	7bbb      	ldrb	r3, [r7, #14]
 8008a5e:	2b03      	cmp	r3, #3
 8008a60:	f040 8111 	bne.w	8008c86 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	b2da      	uxtb	r2, r3
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008a7a:	2b03      	cmp	r3, #3
 8008a7c:	d903      	bls.n	8008a86 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	220d      	movs	r2, #13
 8008a82:	701a      	strb	r2, [r3, #0]
      break;
 8008a84:	e0ff      	b.n	8008c86 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	795b      	ldrb	r3, [r3, #5]
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f001 f873 	bl	8009b78 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	791b      	ldrb	r3, [r3, #4]
 8008a96:	4619      	mov	r1, r3
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f001 f86d 	bl	8009b78 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	701a      	strb	r2, [r3, #0]
      break;
 8008aaa:	e0ec      	b.n	8008c86 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8008ab2:	4619      	mov	r1, r3
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f000 f9ff 	bl	8008eb8 <USBH_Get_CfgDesc>
 8008aba:	4603      	mov	r3, r0
 8008abc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008abe:	7bbb      	ldrb	r3, [r7, #14]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d103      	bne.n	8008acc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2205      	movs	r2, #5
 8008ac8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008aca:	e0de      	b.n	8008c8a <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008acc:	7bbb      	ldrb	r3, [r7, #14]
 8008ace:	2b03      	cmp	r3, #3
 8008ad0:	f040 80db 	bne.w	8008c8a <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008ada:	3301      	adds	r3, #1
 8008adc:	b2da      	uxtb	r2, r3
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008aea:	2b03      	cmp	r3, #3
 8008aec:	d903      	bls.n	8008af6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	220d      	movs	r2, #13
 8008af2:	701a      	strb	r2, [r3, #0]
      break;
 8008af4:	e0c9      	b.n	8008c8a <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	795b      	ldrb	r3, [r3, #5]
 8008afa:	4619      	mov	r1, r3
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f001 f83b 	bl	8009b78 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	791b      	ldrb	r3, [r3, #4]
 8008b06:	4619      	mov	r1, r3
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f001 f835 	bl	8009b78 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2200      	movs	r2, #0
 8008b12:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2200      	movs	r2, #0
 8008b18:	701a      	strb	r2, [r3, #0]
      break;
 8008b1a:	e0b6      	b.n	8008c8a <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d036      	beq.n	8008b94 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008b32:	23ff      	movs	r3, #255	; 0xff
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f000 f9e3 	bl	8008f00 <USBH_Get_StringDesc>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008b3e:	7bbb      	ldrb	r3, [r7, #14]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d111      	bne.n	8008b68 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2206      	movs	r2, #6
 8008b48:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2205      	movs	r2, #5
 8008b4e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008b5e:	2200      	movs	r2, #0
 8008b60:	4619      	mov	r1, r3
 8008b62:	f001 f905 	bl	8009d70 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008b66:	e092      	b.n	8008c8e <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008b68:	7bbb      	ldrb	r3, [r7, #14]
 8008b6a:	2b03      	cmp	r3, #3
 8008b6c:	f040 808f 	bne.w	8008c8e <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2206      	movs	r2, #6
 8008b74:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2205      	movs	r2, #5
 8008b7a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	f001 f8ef 	bl	8009d70 <osMessagePut>
      break;
 8008b92:	e07c      	b.n	8008c8e <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2206      	movs	r2, #6
 8008b98:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2205      	movs	r2, #5
 8008b9e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008bae:	2200      	movs	r2, #0
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	f001 f8dd 	bl	8009d70 <osMessagePut>
      break;
 8008bb6:	e06a      	b.n	8008c8e <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d027      	beq.n	8008c12 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008bce:	23ff      	movs	r3, #255	; 0xff
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 f995 	bl	8008f00 <USBH_Get_StringDesc>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008bda:	7bbb      	ldrb	r3, [r7, #14]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d103      	bne.n	8008be8 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2207      	movs	r2, #7
 8008be4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008be6:	e054      	b.n	8008c92 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008be8:	7bbb      	ldrb	r3, [r7, #14]
 8008bea:	2b03      	cmp	r3, #3
 8008bec:	d151      	bne.n	8008c92 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2207      	movs	r2, #7
 8008bf2:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2205      	movs	r2, #5
 8008bf8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008c08:	2200      	movs	r2, #0
 8008c0a:	4619      	mov	r1, r3
 8008c0c:	f001 f8b0 	bl	8009d70 <osMessagePut>
      break;
 8008c10:	e03f      	b.n	8008c92 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2207      	movs	r2, #7
 8008c16:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2205      	movs	r2, #5
 8008c1c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	4619      	mov	r1, r3
 8008c30:	f001 f89e 	bl	8009d70 <osMessagePut>
      break;
 8008c34:	e02d      	b.n	8008c92 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d017      	beq.n	8008c70 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008c4c:	23ff      	movs	r3, #255	; 0xff
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f000 f956 	bl	8008f00 <USBH_Get_StringDesc>
 8008c54:	4603      	mov	r3, r0
 8008c56:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008c58:	7bbb      	ldrb	r3, [r7, #14]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d102      	bne.n	8008c64 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008c62:	e018      	b.n	8008c96 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008c64:	7bbb      	ldrb	r3, [r7, #14]
 8008c66:	2b03      	cmp	r3, #3
 8008c68:	d115      	bne.n	8008c96 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	73fb      	strb	r3, [r7, #15]
      break;
 8008c6e:	e012      	b.n	8008c96 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 8008c70:	2300      	movs	r3, #0
 8008c72:	73fb      	strb	r3, [r7, #15]
      break;
 8008c74:	e00f      	b.n	8008c96 <USBH_HandleEnum+0x44a>

    default:
      break;
 8008c76:	bf00      	nop
 8008c78:	e00e      	b.n	8008c98 <USBH_HandleEnum+0x44c>
      break;
 8008c7a:	bf00      	nop
 8008c7c:	e00c      	b.n	8008c98 <USBH_HandleEnum+0x44c>
      break;
 8008c7e:	bf00      	nop
 8008c80:	e00a      	b.n	8008c98 <USBH_HandleEnum+0x44c>
      break;
 8008c82:	bf00      	nop
 8008c84:	e008      	b.n	8008c98 <USBH_HandleEnum+0x44c>
      break;
 8008c86:	bf00      	nop
 8008c88:	e006      	b.n	8008c98 <USBH_HandleEnum+0x44c>
      break;
 8008c8a:	bf00      	nop
 8008c8c:	e004      	b.n	8008c98 <USBH_HandleEnum+0x44c>
      break;
 8008c8e:	bf00      	nop
 8008c90:	e002      	b.n	8008c98 <USBH_HandleEnum+0x44c>
      break;
 8008c92:	bf00      	nop
 8008c94:	e000      	b.n	8008c98 <USBH_HandleEnum+0x44c>
      break;
 8008c96:	bf00      	nop
  }
  return Status;
 8008c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3710      	adds	r7, #16
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
 8008ca2:	bf00      	nop

08008ca4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b083      	sub	sp, #12
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	683a      	ldr	r2, [r7, #0]
 8008cb2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008cb6:	bf00      	nop
 8008cb8:	370c      	adds	r7, #12
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr

08008cc2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008cc2:	b580      	push	{r7, lr}
 8008cc4:	b082      	sub	sp, #8
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008cd0:	1c5a      	adds	r2, r3, #1
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 f804 	bl	8008ce6 <USBH_HandleSof>
}
 8008cde:	bf00      	nop
 8008ce0:	3708      	adds	r7, #8
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}

08008ce6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008ce6:	b580      	push	{r7, lr}
 8008ce8:	b082      	sub	sp, #8
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	2b0b      	cmp	r3, #11
 8008cf6:	d10a      	bne.n	8008d0e <USBH_HandleSof+0x28>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d005      	beq.n	8008d0e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d08:	699b      	ldr	r3, [r3, #24]
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	4798      	blx	r3
  }
}
 8008d0e:	bf00      	nop
 8008d10:	3708      	adds	r7, #8
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}

08008d16 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008d16:	b580      	push	{r7, lr}
 8008d18:	b082      	sub	sp, #8
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2201      	movs	r2, #1
 8008d22:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2201      	movs	r2, #1
 8008d2a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	f001 f817 	bl	8009d70 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8008d42:	bf00      	nop
}
 8008d44:	3708      	adds	r7, #8
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}

08008d4a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008d4a:	b480      	push	{r7}
 8008d4c:	b083      	sub	sp, #12
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2200      	movs	r2, #0
 8008d56:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008d5a:	bf00      	nop
}
 8008d5c:	370c      	adds	r7, #12
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d64:	4770      	bx	lr

08008d66 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008d66:	b580      	push	{r7, lr}
 8008d68:	b082      	sub	sp, #8
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2201      	movs	r2, #1
 8008d72:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2200      	movs	r2, #0
 8008d82:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2201      	movs	r2, #1
 8008d8a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	4619      	mov	r1, r3
 8008d9e:	f000 ffe7 	bl	8009d70 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008da2:	2300      	movs	r3, #0
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3708      	adds	r7, #8
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}

08008dac <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b082      	sub	sp, #8
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2201      	movs	r2, #1
 8008db8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f003 fb12 	bl	800c3f6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	791b      	ldrb	r3, [r3, #4]
 8008dd6:	4619      	mov	r1, r3
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 fecd 	bl	8009b78 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	795b      	ldrb	r3, [r3, #5]
 8008de2:	4619      	mov	r1, r3
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 fec7 	bl	8009b78 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2201      	movs	r2, #1
 8008dee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008dfe:	2200      	movs	r2, #0
 8008e00:	4619      	mov	r1, r3
 8008e02:	f000 ffb5 	bl	8009d70 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008e06:	2300      	movs	r3, #0
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3708      	adds	r7, #8
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b086      	sub	sp, #24
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 8008e1e:	f107 030c 	add.w	r3, r7, #12
 8008e22:	f04f 32ff 	mov.w	r2, #4294967295
 8008e26:	4618      	mov	r0, r3
 8008e28:	f000 ffe2 	bl	8009df0 <osMessageGet>
    if (event.status == osEventMessage)
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2b10      	cmp	r3, #16
 8008e30:	d1f2      	bne.n	8008e18 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f7ff faa8 	bl	8008388 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8008e38:	e7ee      	b.n	8008e18 <USBH_Process_OS+0x8>

08008e3a <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8008e3a:	b580      	push	{r7, lr}
 8008e3c:	b082      	sub	sp, #8
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2201      	movs	r2, #1
 8008e46:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008e56:	2200      	movs	r2, #0
 8008e58:	4619      	mov	r1, r3
 8008e5a:	f000 ff89 	bl	8009d70 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 8008e5e:	2300      	movs	r3, #0
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3708      	adds	r7, #8
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b086      	sub	sp, #24
 8008e6c:	af02      	add	r7, sp, #8
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	460b      	mov	r3, r1
 8008e72:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008e7a:	78fb      	ldrb	r3, [r7, #3]
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	9300      	str	r3, [sp, #0]
 8008e80:	4613      	mov	r3, r2
 8008e82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008e86:	2100      	movs	r1, #0
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f000 f864 	bl	8008f56 <USBH_GetDescriptor>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	73fb      	strb	r3, [r7, #15]
 8008e92:	7bfb      	ldrb	r3, [r7, #15]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d10a      	bne.n	8008eae <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008ea4:	78fa      	ldrb	r2, [r7, #3]
 8008ea6:	b292      	uxth	r2, r2
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	f000 f918 	bl	80090de <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3710      	adds	r7, #16
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}

08008eb8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b086      	sub	sp, #24
 8008ebc:	af02      	add	r7, sp, #8
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	331c      	adds	r3, #28
 8008ec8:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008eca:	887b      	ldrh	r3, [r7, #2]
 8008ecc:	9300      	str	r3, [sp, #0]
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ed4:	2100      	movs	r1, #0
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 f83d 	bl	8008f56 <USBH_GetDescriptor>
 8008edc:	4603      	mov	r3, r0
 8008ede:	72fb      	strb	r3, [r7, #11]
 8008ee0:	7afb      	ldrb	r3, [r7, #11]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d107      	bne.n	8008ef6 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008eec:	887a      	ldrh	r2, [r7, #2]
 8008eee:	68f9      	ldr	r1, [r7, #12]
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f000 f964 	bl	80091be <USBH_ParseCfgDesc>
  }

  return status;
 8008ef6:	7afb      	ldrb	r3, [r7, #11]
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3710      	adds	r7, #16
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}

08008f00 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b088      	sub	sp, #32
 8008f04:	af02      	add	r7, sp, #8
 8008f06:	60f8      	str	r0, [r7, #12]
 8008f08:	607a      	str	r2, [r7, #4]
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	460b      	mov	r3, r1
 8008f0e:	72fb      	strb	r3, [r7, #11]
 8008f10:	4613      	mov	r3, r2
 8008f12:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8008f14:	7afb      	ldrb	r3, [r7, #11]
 8008f16:	b29b      	uxth	r3, r3
 8008f18:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008f1c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008f24:	893b      	ldrh	r3, [r7, #8]
 8008f26:	9300      	str	r3, [sp, #0]
 8008f28:	460b      	mov	r3, r1
 8008f2a:	2100      	movs	r1, #0
 8008f2c:	68f8      	ldr	r0, [r7, #12]
 8008f2e:	f000 f812 	bl	8008f56 <USBH_GetDescriptor>
 8008f32:	4603      	mov	r3, r0
 8008f34:	75fb      	strb	r3, [r7, #23]
 8008f36:	7dfb      	ldrb	r3, [r7, #23]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d107      	bne.n	8008f4c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008f42:	893a      	ldrh	r2, [r7, #8]
 8008f44:	6879      	ldr	r1, [r7, #4]
 8008f46:	4618      	mov	r0, r3
 8008f48:	f000 fa37 	bl	80093ba <USBH_ParseStringDesc>
  }

  return status;
 8008f4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3718      	adds	r7, #24
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}

08008f56 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b084      	sub	sp, #16
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	60f8      	str	r0, [r7, #12]
 8008f5e:	607b      	str	r3, [r7, #4]
 8008f60:	460b      	mov	r3, r1
 8008f62:	72fb      	strb	r3, [r7, #11]
 8008f64:	4613      	mov	r3, r2
 8008f66:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	789b      	ldrb	r3, [r3, #2]
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d11c      	bne.n	8008faa <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008f70:	7afb      	ldrb	r3, [r7, #11]
 8008f72:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008f76:	b2da      	uxtb	r2, r3
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	2206      	movs	r2, #6
 8008f80:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	893a      	ldrh	r2, [r7, #8]
 8008f86:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008f88:	893b      	ldrh	r3, [r7, #8]
 8008f8a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008f8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f92:	d104      	bne.n	8008f9e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f240 4209 	movw	r2, #1033	; 0x409
 8008f9a:	829a      	strh	r2, [r3, #20]
 8008f9c:	e002      	b.n	8008fa4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	8b3a      	ldrh	r2, [r7, #24]
 8008fa8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008faa:	8b3b      	ldrh	r3, [r7, #24]
 8008fac:	461a      	mov	r2, r3
 8008fae:	6879      	ldr	r1, [r7, #4]
 8008fb0:	68f8      	ldr	r0, [r7, #12]
 8008fb2:	f000 fa50 	bl	8009456 <USBH_CtlReq>
 8008fb6:	4603      	mov	r3, r0
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3710      	adds	r7, #16
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	460b      	mov	r3, r1
 8008fca:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	789b      	ldrb	r3, [r3, #2]
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d10f      	bne.n	8008ff4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2205      	movs	r2, #5
 8008fde:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008fe0:	78fb      	ldrb	r3, [r7, #3]
 8008fe2:	b29a      	uxth	r2, r3
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2200      	movs	r2, #0
 8008fec:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	2100      	movs	r1, #0
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f000 fa2c 	bl	8009456 <USBH_CtlReq>
 8008ffe:	4603      	mov	r3, r0
}
 8009000:	4618      	mov	r0, r3
 8009002:	3708      	adds	r7, #8
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}

08009008 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b082      	sub	sp, #8
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	460b      	mov	r3, r1
 8009012:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	789b      	ldrb	r3, [r3, #2]
 8009018:	2b01      	cmp	r3, #1
 800901a:	d10e      	bne.n	800903a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2200      	movs	r2, #0
 8009020:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2209      	movs	r2, #9
 8009026:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	887a      	ldrh	r2, [r7, #2]
 800902c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2200      	movs	r2, #0
 8009032:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2200      	movs	r2, #0
 8009038:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800903a:	2200      	movs	r2, #0
 800903c:	2100      	movs	r1, #0
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 fa09 	bl	8009456 <USBH_CtlReq>
 8009044:	4603      	mov	r3, r0
}
 8009046:	4618      	mov	r0, r3
 8009048:	3708      	adds	r7, #8
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}

0800904e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800904e:	b580      	push	{r7, lr}
 8009050:	b082      	sub	sp, #8
 8009052:	af00      	add	r7, sp, #0
 8009054:	6078      	str	r0, [r7, #4]
 8009056:	460b      	mov	r3, r1
 8009058:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	789b      	ldrb	r3, [r3, #2]
 800905e:	2b01      	cmp	r3, #1
 8009060:	d10f      	bne.n	8009082 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2200      	movs	r2, #0
 8009066:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2203      	movs	r2, #3
 800906c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800906e:	78fb      	ldrb	r3, [r7, #3]
 8009070:	b29a      	uxth	r2, r3
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2200      	movs	r2, #0
 800907a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2200      	movs	r2, #0
 8009080:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009082:	2200      	movs	r2, #0
 8009084:	2100      	movs	r1, #0
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 f9e5 	bl	8009456 <USBH_CtlReq>
 800908c:	4603      	mov	r3, r0
}
 800908e:	4618      	mov	r0, r3
 8009090:	3708      	adds	r7, #8
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}

08009096 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009096:	b580      	push	{r7, lr}
 8009098:	b082      	sub	sp, #8
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
 800909e:	460b      	mov	r3, r1
 80090a0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	789b      	ldrb	r3, [r3, #2]
 80090a6:	2b01      	cmp	r3, #1
 80090a8:	d10f      	bne.n	80090ca <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2202      	movs	r2, #2
 80090ae:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2201      	movs	r2, #1
 80090b4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2200      	movs	r2, #0
 80090ba:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80090bc:	78fb      	ldrb	r3, [r7, #3]
 80090be:	b29a      	uxth	r2, r3
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2200      	movs	r2, #0
 80090c8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80090ca:	2200      	movs	r2, #0
 80090cc:	2100      	movs	r1, #0
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 f9c1 	bl	8009456 <USBH_CtlReq>
 80090d4:	4603      	mov	r3, r0
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3708      	adds	r7, #8
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}

080090de <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80090de:	b480      	push	{r7}
 80090e0:	b085      	sub	sp, #20
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	60f8      	str	r0, [r7, #12]
 80090e6:	60b9      	str	r1, [r7, #8]
 80090e8:	4613      	mov	r3, r2
 80090ea:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	781a      	ldrb	r2, [r3, #0]
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	785a      	ldrb	r2, [r3, #1]
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	3302      	adds	r3, #2
 8009100:	781b      	ldrb	r3, [r3, #0]
 8009102:	b29a      	uxth	r2, r3
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	3303      	adds	r3, #3
 8009108:	781b      	ldrb	r3, [r3, #0]
 800910a:	b29b      	uxth	r3, r3
 800910c:	021b      	lsls	r3, r3, #8
 800910e:	b29b      	uxth	r3, r3
 8009110:	4313      	orrs	r3, r2
 8009112:	b29a      	uxth	r2, r3
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	791a      	ldrb	r2, [r3, #4]
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	795a      	ldrb	r2, [r3, #5]
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	799a      	ldrb	r2, [r3, #6]
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	79da      	ldrb	r2, [r3, #7]
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8009138:	88fb      	ldrh	r3, [r7, #6]
 800913a:	2b08      	cmp	r3, #8
 800913c:	d939      	bls.n	80091b2 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	3308      	adds	r3, #8
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	b29a      	uxth	r2, r3
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	3309      	adds	r3, #9
 800914a:	781b      	ldrb	r3, [r3, #0]
 800914c:	b29b      	uxth	r3, r3
 800914e:	021b      	lsls	r3, r3, #8
 8009150:	b29b      	uxth	r3, r3
 8009152:	4313      	orrs	r3, r2
 8009154:	b29a      	uxth	r2, r3
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	330a      	adds	r3, #10
 800915e:	781b      	ldrb	r3, [r3, #0]
 8009160:	b29a      	uxth	r2, r3
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	330b      	adds	r3, #11
 8009166:	781b      	ldrb	r3, [r3, #0]
 8009168:	b29b      	uxth	r3, r3
 800916a:	021b      	lsls	r3, r3, #8
 800916c:	b29b      	uxth	r3, r3
 800916e:	4313      	orrs	r3, r2
 8009170:	b29a      	uxth	r2, r3
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	330c      	adds	r3, #12
 800917a:	781b      	ldrb	r3, [r3, #0]
 800917c:	b29a      	uxth	r2, r3
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	330d      	adds	r3, #13
 8009182:	781b      	ldrb	r3, [r3, #0]
 8009184:	b29b      	uxth	r3, r3
 8009186:	021b      	lsls	r3, r3, #8
 8009188:	b29b      	uxth	r3, r3
 800918a:	4313      	orrs	r3, r2
 800918c:	b29a      	uxth	r2, r3
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	7b9a      	ldrb	r2, [r3, #14]
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	7bda      	ldrb	r2, [r3, #15]
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	7c1a      	ldrb	r2, [r3, #16]
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	7c5a      	ldrb	r2, [r3, #17]
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	745a      	strb	r2, [r3, #17]
  }
}
 80091b2:	bf00      	nop
 80091b4:	3714      	adds	r7, #20
 80091b6:	46bd      	mov	sp, r7
 80091b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091bc:	4770      	bx	lr

080091be <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80091be:	b580      	push	{r7, lr}
 80091c0:	b08a      	sub	sp, #40	; 0x28
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	60f8      	str	r0, [r7, #12]
 80091c6:	60b9      	str	r1, [r7, #8]
 80091c8:	4613      	mov	r3, r2
 80091ca:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80091d0:	2300      	movs	r3, #0
 80091d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80091d6:	2300      	movs	r3, #0
 80091d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	781a      	ldrb	r2, [r3, #0]
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	785a      	ldrb	r2, [r3, #1]
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	3302      	adds	r3, #2
 80091f4:	781b      	ldrb	r3, [r3, #0]
 80091f6:	b29a      	uxth	r2, r3
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	3303      	adds	r3, #3
 80091fc:	781b      	ldrb	r3, [r3, #0]
 80091fe:	b29b      	uxth	r3, r3
 8009200:	021b      	lsls	r3, r3, #8
 8009202:	b29b      	uxth	r3, r3
 8009204:	4313      	orrs	r3, r2
 8009206:	b29a      	uxth	r2, r3
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	791a      	ldrb	r2, [r3, #4]
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	795a      	ldrb	r2, [r3, #5]
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	799a      	ldrb	r2, [r3, #6]
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	79da      	ldrb	r2, [r3, #7]
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	7a1a      	ldrb	r2, [r3, #8]
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009234:	88fb      	ldrh	r3, [r7, #6]
 8009236:	2b09      	cmp	r3, #9
 8009238:	d95f      	bls.n	80092fa <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800923a:	2309      	movs	r3, #9
 800923c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800923e:	2300      	movs	r3, #0
 8009240:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009242:	e051      	b.n	80092e8 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009244:	f107 0316 	add.w	r3, r7, #22
 8009248:	4619      	mov	r1, r3
 800924a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800924c:	f000 f8e8 	bl	8009420 <USBH_GetNextDesc>
 8009250:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8009252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009254:	785b      	ldrb	r3, [r3, #1]
 8009256:	2b04      	cmp	r3, #4
 8009258:	d146      	bne.n	80092e8 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800925a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800925e:	221a      	movs	r2, #26
 8009260:	fb02 f303 	mul.w	r3, r2, r3
 8009264:	3308      	adds	r3, #8
 8009266:	68fa      	ldr	r2, [r7, #12]
 8009268:	4413      	add	r3, r2
 800926a:	3302      	adds	r3, #2
 800926c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800926e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009270:	69f8      	ldr	r0, [r7, #28]
 8009272:	f000 f846 	bl	8009302 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009276:	2300      	movs	r3, #0
 8009278:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800927c:	2300      	movs	r3, #0
 800927e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009280:	e022      	b.n	80092c8 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009282:	f107 0316 	add.w	r3, r7, #22
 8009286:	4619      	mov	r1, r3
 8009288:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800928a:	f000 f8c9 	bl	8009420 <USBH_GetNextDesc>
 800928e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8009290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009292:	785b      	ldrb	r3, [r3, #1]
 8009294:	2b05      	cmp	r3, #5
 8009296:	d117      	bne.n	80092c8 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009298:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800929c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80092a0:	3201      	adds	r2, #1
 80092a2:	00d2      	lsls	r2, r2, #3
 80092a4:	211a      	movs	r1, #26
 80092a6:	fb01 f303 	mul.w	r3, r1, r3
 80092aa:	4413      	add	r3, r2
 80092ac:	3308      	adds	r3, #8
 80092ae:	68fa      	ldr	r2, [r7, #12]
 80092b0:	4413      	add	r3, r2
 80092b2:	3304      	adds	r3, #4
 80092b4:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80092b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80092b8:	69b8      	ldr	r0, [r7, #24]
 80092ba:	f000 f851 	bl	8009360 <USBH_ParseEPDesc>
            ep_ix++;
 80092be:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80092c2:	3301      	adds	r3, #1
 80092c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80092c8:	69fb      	ldr	r3, [r7, #28]
 80092ca:	791b      	ldrb	r3, [r3, #4]
 80092cc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d204      	bcs.n	80092de <USBH_ParseCfgDesc+0x120>
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	885a      	ldrh	r2, [r3, #2]
 80092d8:	8afb      	ldrh	r3, [r7, #22]
 80092da:	429a      	cmp	r2, r3
 80092dc:	d8d1      	bhi.n	8009282 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80092de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80092e2:	3301      	adds	r3, #1
 80092e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80092e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80092ec:	2b01      	cmp	r3, #1
 80092ee:	d804      	bhi.n	80092fa <USBH_ParseCfgDesc+0x13c>
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	885a      	ldrh	r2, [r3, #2]
 80092f4:	8afb      	ldrh	r3, [r7, #22]
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d8a4      	bhi.n	8009244 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80092fa:	bf00      	nop
 80092fc:	3728      	adds	r7, #40	; 0x28
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}

08009302 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8009302:	b480      	push	{r7}
 8009304:	b083      	sub	sp, #12
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
 800930a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	781a      	ldrb	r2, [r3, #0]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	785a      	ldrb	r2, [r3, #1]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	789a      	ldrb	r2, [r3, #2]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	78da      	ldrb	r2, [r3, #3]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	791a      	ldrb	r2, [r3, #4]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	795a      	ldrb	r2, [r3, #5]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	799a      	ldrb	r2, [r3, #6]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	79da      	ldrb	r2, [r3, #7]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	7a1a      	ldrb	r2, [r3, #8]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	721a      	strb	r2, [r3, #8]
}
 8009354:	bf00      	nop
 8009356:	370c      	adds	r7, #12
 8009358:	46bd      	mov	sp, r7
 800935a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935e:	4770      	bx	lr

08009360 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8009360:	b480      	push	{r7}
 8009362:	b083      	sub	sp, #12
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	781a      	ldrb	r2, [r3, #0]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	785a      	ldrb	r2, [r3, #1]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	789a      	ldrb	r2, [r3, #2]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	78da      	ldrb	r2, [r3, #3]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	3304      	adds	r3, #4
 800938e:	781b      	ldrb	r3, [r3, #0]
 8009390:	b29a      	uxth	r2, r3
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	3305      	adds	r3, #5
 8009396:	781b      	ldrb	r3, [r3, #0]
 8009398:	b29b      	uxth	r3, r3
 800939a:	021b      	lsls	r3, r3, #8
 800939c:	b29b      	uxth	r3, r3
 800939e:	4313      	orrs	r3, r2
 80093a0:	b29a      	uxth	r2, r3
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	799a      	ldrb	r2, [r3, #6]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	719a      	strb	r2, [r3, #6]
}
 80093ae:	bf00      	nop
 80093b0:	370c      	adds	r7, #12
 80093b2:	46bd      	mov	sp, r7
 80093b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b8:	4770      	bx	lr

080093ba <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80093ba:	b480      	push	{r7}
 80093bc:	b087      	sub	sp, #28
 80093be:	af00      	add	r7, sp, #0
 80093c0:	60f8      	str	r0, [r7, #12]
 80093c2:	60b9      	str	r1, [r7, #8]
 80093c4:	4613      	mov	r3, r2
 80093c6:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	3301      	adds	r3, #1
 80093cc:	781b      	ldrb	r3, [r3, #0]
 80093ce:	2b03      	cmp	r3, #3
 80093d0:	d120      	bne.n	8009414 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	781b      	ldrb	r3, [r3, #0]
 80093d6:	1e9a      	subs	r2, r3, #2
 80093d8:	88fb      	ldrh	r3, [r7, #6]
 80093da:	4293      	cmp	r3, r2
 80093dc:	bf28      	it	cs
 80093de:	4613      	movcs	r3, r2
 80093e0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	3302      	adds	r3, #2
 80093e6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80093e8:	2300      	movs	r3, #0
 80093ea:	82fb      	strh	r3, [r7, #22]
 80093ec:	e00b      	b.n	8009406 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80093ee:	8afb      	ldrh	r3, [r7, #22]
 80093f0:	68fa      	ldr	r2, [r7, #12]
 80093f2:	4413      	add	r3, r2
 80093f4:	781a      	ldrb	r2, [r3, #0]
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	701a      	strb	r2, [r3, #0]
      pdest++;
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	3301      	adds	r3, #1
 80093fe:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009400:	8afb      	ldrh	r3, [r7, #22]
 8009402:	3302      	adds	r3, #2
 8009404:	82fb      	strh	r3, [r7, #22]
 8009406:	8afa      	ldrh	r2, [r7, #22]
 8009408:	8abb      	ldrh	r3, [r7, #20]
 800940a:	429a      	cmp	r2, r3
 800940c:	d3ef      	bcc.n	80093ee <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	2200      	movs	r2, #0
 8009412:	701a      	strb	r2, [r3, #0]
  }
}
 8009414:	bf00      	nop
 8009416:	371c      	adds	r7, #28
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr

08009420 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8009420:	b480      	push	{r7}
 8009422:	b085      	sub	sp, #20
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	881a      	ldrh	r2, [r3, #0]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	781b      	ldrb	r3, [r3, #0]
 8009432:	b29b      	uxth	r3, r3
 8009434:	4413      	add	r3, r2
 8009436:	b29a      	uxth	r2, r3
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	781b      	ldrb	r3, [r3, #0]
 8009440:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	4413      	add	r3, r2
 8009446:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009448:	68fb      	ldr	r3, [r7, #12]
}
 800944a:	4618      	mov	r0, r3
 800944c:	3714      	adds	r7, #20
 800944e:	46bd      	mov	sp, r7
 8009450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009454:	4770      	bx	lr

08009456 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009456:	b580      	push	{r7, lr}
 8009458:	b086      	sub	sp, #24
 800945a:	af00      	add	r7, sp, #0
 800945c:	60f8      	str	r0, [r7, #12]
 800945e:	60b9      	str	r1, [r7, #8]
 8009460:	4613      	mov	r3, r2
 8009462:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009464:	2301      	movs	r3, #1
 8009466:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	789b      	ldrb	r3, [r3, #2]
 800946c:	2b01      	cmp	r3, #1
 800946e:	d002      	beq.n	8009476 <USBH_CtlReq+0x20>
 8009470:	2b02      	cmp	r3, #2
 8009472:	d01d      	beq.n	80094b0 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8009474:	e043      	b.n	80094fe <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	68ba      	ldr	r2, [r7, #8]
 800947a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	88fa      	ldrh	r2, [r7, #6]
 8009480:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2201      	movs	r2, #1
 8009486:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2202      	movs	r2, #2
 800948c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800948e:	2301      	movs	r3, #1
 8009490:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	2203      	movs	r2, #3
 8009496:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80094a6:	2200      	movs	r2, #0
 80094a8:	4619      	mov	r1, r3
 80094aa:	f000 fc61 	bl	8009d70 <osMessagePut>
      break;
 80094ae:	e026      	b.n	80094fe <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 80094b0:	68f8      	ldr	r0, [r7, #12]
 80094b2:	f000 f829 	bl	8009508 <USBH_HandleControl>
 80094b6:	4603      	mov	r3, r0
 80094b8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80094ba:	7dfb      	ldrb	r3, [r7, #23]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d002      	beq.n	80094c6 <USBH_CtlReq+0x70>
 80094c0:	7dfb      	ldrb	r3, [r7, #23]
 80094c2:	2b03      	cmp	r3, #3
 80094c4:	d106      	bne.n	80094d4 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2201      	movs	r2, #1
 80094ca:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	2200      	movs	r2, #0
 80094d0:	761a      	strb	r2, [r3, #24]
 80094d2:	e005      	b.n	80094e0 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 80094d4:	7dfb      	ldrb	r3, [r7, #23]
 80094d6:	2b02      	cmp	r3, #2
 80094d8:	d102      	bne.n	80094e0 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2201      	movs	r2, #1
 80094de:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2203      	movs	r2, #3
 80094e4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80094f4:	2200      	movs	r2, #0
 80094f6:	4619      	mov	r1, r3
 80094f8:	f000 fc3a 	bl	8009d70 <osMessagePut>
      break;
 80094fc:	bf00      	nop
  }
  return status;
 80094fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009500:	4618      	mov	r0, r3
 8009502:	3718      	adds	r7, #24
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}

08009508 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b086      	sub	sp, #24
 800950c:	af02      	add	r7, sp, #8
 800950e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009510:	2301      	movs	r3, #1
 8009512:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009514:	2300      	movs	r3, #0
 8009516:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	7e1b      	ldrb	r3, [r3, #24]
 800951c:	3b01      	subs	r3, #1
 800951e:	2b0a      	cmp	r3, #10
 8009520:	f200 8229 	bhi.w	8009976 <USBH_HandleControl+0x46e>
 8009524:	a201      	add	r2, pc, #4	; (adr r2, 800952c <USBH_HandleControl+0x24>)
 8009526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800952a:	bf00      	nop
 800952c:	08009559 	.word	0x08009559
 8009530:	08009573 	.word	0x08009573
 8009534:	08009615 	.word	0x08009615
 8009538:	0800963b 	.word	0x0800963b
 800953c:	080096c7 	.word	0x080096c7
 8009540:	080096f1 	.word	0x080096f1
 8009544:	080097b3 	.word	0x080097b3
 8009548:	080097d5 	.word	0x080097d5
 800954c:	08009867 	.word	0x08009867
 8009550:	0800988d 	.word	0x0800988d
 8009554:	0800991f 	.word	0x0800991f
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f103 0110 	add.w	r1, r3, #16
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	795b      	ldrb	r3, [r3, #5]
 8009562:	461a      	mov	r2, r3
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f000 fa17 	bl	8009998 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2202      	movs	r2, #2
 800956e:	761a      	strb	r2, [r3, #24]
      break;
 8009570:	e20c      	b.n	800998c <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	795b      	ldrb	r3, [r3, #5]
 8009576:	4619      	mov	r1, r3
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f003 f82b 	bl	800c5d4 <USBH_LL_GetURBState>
 800957e:	4603      	mov	r3, r0
 8009580:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009582:	7bbb      	ldrb	r3, [r7, #14]
 8009584:	2b01      	cmp	r3, #1
 8009586:	d12c      	bne.n	80095e2 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	7c1b      	ldrb	r3, [r3, #16]
 800958c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009590:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	8adb      	ldrh	r3, [r3, #22]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d00a      	beq.n	80095b0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800959a:	7b7b      	ldrb	r3, [r7, #13]
 800959c:	2b80      	cmp	r3, #128	; 0x80
 800959e:	d103      	bne.n	80095a8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2203      	movs	r2, #3
 80095a4:	761a      	strb	r2, [r3, #24]
 80095a6:	e00d      	b.n	80095c4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2205      	movs	r2, #5
 80095ac:	761a      	strb	r2, [r3, #24]
 80095ae:	e009      	b.n	80095c4 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 80095b0:	7b7b      	ldrb	r3, [r7, #13]
 80095b2:	2b80      	cmp	r3, #128	; 0x80
 80095b4:	d103      	bne.n	80095be <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2209      	movs	r2, #9
 80095ba:	761a      	strb	r2, [r3, #24]
 80095bc:	e002      	b.n	80095c4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2207      	movs	r2, #7
 80095c2:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2203      	movs	r2, #3
 80095c8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80095d8:	2200      	movs	r2, #0
 80095da:	4619      	mov	r1, r3
 80095dc:	f000 fbc8 	bl	8009d70 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80095e0:	e1cb      	b.n	800997a <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80095e2:	7bbb      	ldrb	r3, [r7, #14]
 80095e4:	2b04      	cmp	r3, #4
 80095e6:	d003      	beq.n	80095f0 <USBH_HandleControl+0xe8>
 80095e8:	7bbb      	ldrb	r3, [r7, #14]
 80095ea:	2b02      	cmp	r3, #2
 80095ec:	f040 81c5 	bne.w	800997a <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	220b      	movs	r2, #11
 80095f4:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2203      	movs	r2, #3
 80095fa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800960a:	2200      	movs	r2, #0
 800960c:	4619      	mov	r1, r3
 800960e:	f000 fbaf 	bl	8009d70 <osMessagePut>
      break;
 8009612:	e1b2      	b.n	800997a <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800961a:	b29a      	uxth	r2, r3
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6899      	ldr	r1, [r3, #8]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	899a      	ldrh	r2, [r3, #12]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	791b      	ldrb	r3, [r3, #4]
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f000 f9f2 	bl	8009a16 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2204      	movs	r2, #4
 8009636:	761a      	strb	r2, [r3, #24]
      break;
 8009638:	e1a8      	b.n	800998c <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	791b      	ldrb	r3, [r3, #4]
 800963e:	4619      	mov	r1, r3
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f002 ffc7 	bl	800c5d4 <USBH_LL_GetURBState>
 8009646:	4603      	mov	r3, r0
 8009648:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800964a:	7bbb      	ldrb	r3, [r7, #14]
 800964c:	2b01      	cmp	r3, #1
 800964e:	d110      	bne.n	8009672 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2209      	movs	r2, #9
 8009654:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2203      	movs	r2, #3
 800965a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800966a:	2200      	movs	r2, #0
 800966c:	4619      	mov	r1, r3
 800966e:	f000 fb7f 	bl	8009d70 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009672:	7bbb      	ldrb	r3, [r7, #14]
 8009674:	2b05      	cmp	r3, #5
 8009676:	d110      	bne.n	800969a <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009678:	2303      	movs	r3, #3
 800967a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2203      	movs	r2, #3
 8009680:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009690:	2200      	movs	r2, #0
 8009692:	4619      	mov	r1, r3
 8009694:	f000 fb6c 	bl	8009d70 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009698:	e171      	b.n	800997e <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800969a:	7bbb      	ldrb	r3, [r7, #14]
 800969c:	2b04      	cmp	r3, #4
 800969e:	f040 816e 	bne.w	800997e <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	220b      	movs	r2, #11
 80096a6:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2203      	movs	r2, #3
 80096ac:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80096bc:	2200      	movs	r2, #0
 80096be:	4619      	mov	r1, r3
 80096c0:	f000 fb56 	bl	8009d70 <osMessagePut>
      break;
 80096c4:	e15b      	b.n	800997e <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6899      	ldr	r1, [r3, #8]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	899a      	ldrh	r2, [r3, #12]
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	795b      	ldrb	r3, [r3, #5]
 80096d2:	2001      	movs	r0, #1
 80096d4:	9000      	str	r0, [sp, #0]
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 f978 	bl	80099cc <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80096e2:	b29a      	uxth	r2, r3
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2206      	movs	r2, #6
 80096ec:	761a      	strb	r2, [r3, #24]
      break;
 80096ee:	e14d      	b.n	800998c <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	795b      	ldrb	r3, [r3, #5]
 80096f4:	4619      	mov	r1, r3
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f002 ff6c 	bl	800c5d4 <USBH_LL_GetURBState>
 80096fc:	4603      	mov	r3, r0
 80096fe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009700:	7bbb      	ldrb	r3, [r7, #14]
 8009702:	2b01      	cmp	r3, #1
 8009704:	d111      	bne.n	800972a <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2207      	movs	r2, #7
 800970a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2203      	movs	r2, #3
 8009710:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009720:	2200      	movs	r2, #0
 8009722:	4619      	mov	r1, r3
 8009724:	f000 fb24 	bl	8009d70 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009728:	e12b      	b.n	8009982 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800972a:	7bbb      	ldrb	r3, [r7, #14]
 800972c:	2b05      	cmp	r3, #5
 800972e:	d113      	bne.n	8009758 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	220c      	movs	r2, #12
 8009734:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009736:	2303      	movs	r3, #3
 8009738:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2203      	movs	r2, #3
 800973e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800974e:	2200      	movs	r2, #0
 8009750:	4619      	mov	r1, r3
 8009752:	f000 fb0d 	bl	8009d70 <osMessagePut>
      break;
 8009756:	e114      	b.n	8009982 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009758:	7bbb      	ldrb	r3, [r7, #14]
 800975a:	2b02      	cmp	r3, #2
 800975c:	d111      	bne.n	8009782 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2205      	movs	r2, #5
 8009762:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2203      	movs	r2, #3
 8009768:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009778:	2200      	movs	r2, #0
 800977a:	4619      	mov	r1, r3
 800977c:	f000 faf8 	bl	8009d70 <osMessagePut>
      break;
 8009780:	e0ff      	b.n	8009982 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8009782:	7bbb      	ldrb	r3, [r7, #14]
 8009784:	2b04      	cmp	r3, #4
 8009786:	f040 80fc 	bne.w	8009982 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	220b      	movs	r2, #11
 800978e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009790:	2302      	movs	r3, #2
 8009792:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2203      	movs	r2, #3
 8009798:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80097a8:	2200      	movs	r2, #0
 80097aa:	4619      	mov	r1, r3
 80097ac:	f000 fae0 	bl	8009d70 <osMessagePut>
      break;
 80097b0:	e0e7      	b.n	8009982 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	791b      	ldrb	r3, [r3, #4]
 80097b6:	2200      	movs	r2, #0
 80097b8:	2100      	movs	r1, #0
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f000 f92b 	bl	8009a16 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80097c6:	b29a      	uxth	r2, r3
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2208      	movs	r2, #8
 80097d0:	761a      	strb	r2, [r3, #24]

      break;
 80097d2:	e0db      	b.n	800998c <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	791b      	ldrb	r3, [r3, #4]
 80097d8:	4619      	mov	r1, r3
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f002 fefa 	bl	800c5d4 <USBH_LL_GetURBState>
 80097e0:	4603      	mov	r3, r0
 80097e2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80097e4:	7bbb      	ldrb	r3, [r7, #14]
 80097e6:	2b01      	cmp	r3, #1
 80097e8:	d113      	bne.n	8009812 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	220d      	movs	r2, #13
 80097ee:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80097f0:	2300      	movs	r3, #0
 80097f2:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2203      	movs	r2, #3
 80097f8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009808:	2200      	movs	r2, #0
 800980a:	4619      	mov	r1, r3
 800980c:	f000 fab0 	bl	8009d70 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009810:	e0b9      	b.n	8009986 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 8009812:	7bbb      	ldrb	r3, [r7, #14]
 8009814:	2b04      	cmp	r3, #4
 8009816:	d111      	bne.n	800983c <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	220b      	movs	r2, #11
 800981c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2203      	movs	r2, #3
 8009822:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009832:	2200      	movs	r2, #0
 8009834:	4619      	mov	r1, r3
 8009836:	f000 fa9b 	bl	8009d70 <osMessagePut>
      break;
 800983a:	e0a4      	b.n	8009986 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800983c:	7bbb      	ldrb	r3, [r7, #14]
 800983e:	2b05      	cmp	r3, #5
 8009840:	f040 80a1 	bne.w	8009986 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 8009844:	2303      	movs	r3, #3
 8009846:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2203      	movs	r2, #3
 800984c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800985c:	2200      	movs	r2, #0
 800985e:	4619      	mov	r1, r3
 8009860:	f000 fa86 	bl	8009d70 <osMessagePut>
      break;
 8009864:	e08f      	b.n	8009986 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	795b      	ldrb	r3, [r3, #5]
 800986a:	2201      	movs	r2, #1
 800986c:	9200      	str	r2, [sp, #0]
 800986e:	2200      	movs	r2, #0
 8009870:	2100      	movs	r1, #0
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f000 f8aa 	bl	80099cc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800987e:	b29a      	uxth	r2, r3
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	220a      	movs	r2, #10
 8009888:	761a      	strb	r2, [r3, #24]
      break;
 800988a:	e07f      	b.n	800998c <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	795b      	ldrb	r3, [r3, #5]
 8009890:	4619      	mov	r1, r3
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f002 fe9e 	bl	800c5d4 <USBH_LL_GetURBState>
 8009898:	4603      	mov	r3, r0
 800989a:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800989c:	7bbb      	ldrb	r3, [r7, #14]
 800989e:	2b01      	cmp	r3, #1
 80098a0:	d113      	bne.n	80098ca <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 80098a2:	2300      	movs	r3, #0
 80098a4:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	220d      	movs	r2, #13
 80098aa:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2203      	movs	r2, #3
 80098b0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80098c0:	2200      	movs	r2, #0
 80098c2:	4619      	mov	r1, r3
 80098c4:	f000 fa54 	bl	8009d70 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80098c8:	e05f      	b.n	800998a <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 80098ca:	7bbb      	ldrb	r3, [r7, #14]
 80098cc:	2b02      	cmp	r3, #2
 80098ce:	d111      	bne.n	80098f4 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2209      	movs	r2, #9
 80098d4:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2203      	movs	r2, #3
 80098da:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80098ea:	2200      	movs	r2, #0
 80098ec:	4619      	mov	r1, r3
 80098ee:	f000 fa3f 	bl	8009d70 <osMessagePut>
      break;
 80098f2:	e04a      	b.n	800998a <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 80098f4:	7bbb      	ldrb	r3, [r7, #14]
 80098f6:	2b04      	cmp	r3, #4
 80098f8:	d147      	bne.n	800998a <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	220b      	movs	r2, #11
 80098fe:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2203      	movs	r2, #3
 8009904:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009914:	2200      	movs	r2, #0
 8009916:	4619      	mov	r1, r3
 8009918:	f000 fa2a 	bl	8009d70 <osMessagePut>
      break;
 800991c:	e035      	b.n	800998a <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	7e5b      	ldrb	r3, [r3, #25]
 8009922:	3301      	adds	r3, #1
 8009924:	b2da      	uxtb	r2, r3
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	765a      	strb	r2, [r3, #25]
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	7e5b      	ldrb	r3, [r3, #25]
 800992e:	2b02      	cmp	r3, #2
 8009930:	d806      	bhi.n	8009940 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2201      	movs	r2, #1
 8009936:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2201      	movs	r2, #1
 800993c:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800993e:	e025      	b.n	800998c <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009946:	2106      	movs	r1, #6
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2200      	movs	r2, #0
 8009950:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	795b      	ldrb	r3, [r3, #5]
 8009956:	4619      	mov	r1, r3
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f000 f90d 	bl	8009b78 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	791b      	ldrb	r3, [r3, #4]
 8009962:	4619      	mov	r1, r3
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f000 f907 	bl	8009b78 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2200      	movs	r2, #0
 800996e:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009970:	2302      	movs	r3, #2
 8009972:	73fb      	strb	r3, [r7, #15]
      break;
 8009974:	e00a      	b.n	800998c <USBH_HandleControl+0x484>

    default:
      break;
 8009976:	bf00      	nop
 8009978:	e008      	b.n	800998c <USBH_HandleControl+0x484>
      break;
 800997a:	bf00      	nop
 800997c:	e006      	b.n	800998c <USBH_HandleControl+0x484>
      break;
 800997e:	bf00      	nop
 8009980:	e004      	b.n	800998c <USBH_HandleControl+0x484>
      break;
 8009982:	bf00      	nop
 8009984:	e002      	b.n	800998c <USBH_HandleControl+0x484>
      break;
 8009986:	bf00      	nop
 8009988:	e000      	b.n	800998c <USBH_HandleControl+0x484>
      break;
 800998a:	bf00      	nop
  }

  return status;
 800998c:	7bfb      	ldrb	r3, [r7, #15]
}
 800998e:	4618      	mov	r0, r3
 8009990:	3710      	adds	r7, #16
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}
 8009996:	bf00      	nop

08009998 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b088      	sub	sp, #32
 800999c:	af04      	add	r7, sp, #16
 800999e:	60f8      	str	r0, [r7, #12]
 80099a0:	60b9      	str	r1, [r7, #8]
 80099a2:	4613      	mov	r3, r2
 80099a4:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80099a6:	79f9      	ldrb	r1, [r7, #7]
 80099a8:	2300      	movs	r3, #0
 80099aa:	9303      	str	r3, [sp, #12]
 80099ac:	2308      	movs	r3, #8
 80099ae:	9302      	str	r3, [sp, #8]
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	9301      	str	r3, [sp, #4]
 80099b4:	2300      	movs	r3, #0
 80099b6:	9300      	str	r3, [sp, #0]
 80099b8:	2300      	movs	r3, #0
 80099ba:	2200      	movs	r2, #0
 80099bc:	68f8      	ldr	r0, [r7, #12]
 80099be:	f002 fdd8 	bl	800c572 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80099c2:	2300      	movs	r3, #0
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3710      	adds	r7, #16
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}

080099cc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b088      	sub	sp, #32
 80099d0:	af04      	add	r7, sp, #16
 80099d2:	60f8      	str	r0, [r7, #12]
 80099d4:	60b9      	str	r1, [r7, #8]
 80099d6:	4611      	mov	r1, r2
 80099d8:	461a      	mov	r2, r3
 80099da:	460b      	mov	r3, r1
 80099dc:	80fb      	strh	r3, [r7, #6]
 80099de:	4613      	mov	r3, r2
 80099e0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d001      	beq.n	80099f0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80099ec:	2300      	movs	r3, #0
 80099ee:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80099f0:	7979      	ldrb	r1, [r7, #5]
 80099f2:	7e3b      	ldrb	r3, [r7, #24]
 80099f4:	9303      	str	r3, [sp, #12]
 80099f6:	88fb      	ldrh	r3, [r7, #6]
 80099f8:	9302      	str	r3, [sp, #8]
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	9301      	str	r3, [sp, #4]
 80099fe:	2301      	movs	r3, #1
 8009a00:	9300      	str	r3, [sp, #0]
 8009a02:	2300      	movs	r3, #0
 8009a04:	2200      	movs	r2, #0
 8009a06:	68f8      	ldr	r0, [r7, #12]
 8009a08:	f002 fdb3 	bl	800c572 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009a0c:	2300      	movs	r3, #0
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3710      	adds	r7, #16
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}

08009a16 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009a16:	b580      	push	{r7, lr}
 8009a18:	b088      	sub	sp, #32
 8009a1a:	af04      	add	r7, sp, #16
 8009a1c:	60f8      	str	r0, [r7, #12]
 8009a1e:	60b9      	str	r1, [r7, #8]
 8009a20:	4611      	mov	r1, r2
 8009a22:	461a      	mov	r2, r3
 8009a24:	460b      	mov	r3, r1
 8009a26:	80fb      	strh	r3, [r7, #6]
 8009a28:	4613      	mov	r3, r2
 8009a2a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009a2c:	7979      	ldrb	r1, [r7, #5]
 8009a2e:	2300      	movs	r3, #0
 8009a30:	9303      	str	r3, [sp, #12]
 8009a32:	88fb      	ldrh	r3, [r7, #6]
 8009a34:	9302      	str	r3, [sp, #8]
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	9301      	str	r3, [sp, #4]
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	9300      	str	r3, [sp, #0]
 8009a3e:	2300      	movs	r3, #0
 8009a40:	2201      	movs	r2, #1
 8009a42:	68f8      	ldr	r0, [r7, #12]
 8009a44:	f002 fd95 	bl	800c572 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009a48:	2300      	movs	r3, #0

}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3710      	adds	r7, #16
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}

08009a52 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009a52:	b580      	push	{r7, lr}
 8009a54:	b088      	sub	sp, #32
 8009a56:	af04      	add	r7, sp, #16
 8009a58:	60f8      	str	r0, [r7, #12]
 8009a5a:	60b9      	str	r1, [r7, #8]
 8009a5c:	4611      	mov	r1, r2
 8009a5e:	461a      	mov	r2, r3
 8009a60:	460b      	mov	r3, r1
 8009a62:	80fb      	strh	r3, [r7, #6]
 8009a64:	4613      	mov	r3, r2
 8009a66:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d001      	beq.n	8009a76 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009a72:	2300      	movs	r3, #0
 8009a74:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009a76:	7979      	ldrb	r1, [r7, #5]
 8009a78:	7e3b      	ldrb	r3, [r7, #24]
 8009a7a:	9303      	str	r3, [sp, #12]
 8009a7c:	88fb      	ldrh	r3, [r7, #6]
 8009a7e:	9302      	str	r3, [sp, #8]
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	9301      	str	r3, [sp, #4]
 8009a84:	2301      	movs	r3, #1
 8009a86:	9300      	str	r3, [sp, #0]
 8009a88:	2302      	movs	r3, #2
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	68f8      	ldr	r0, [r7, #12]
 8009a8e:	f002 fd70 	bl	800c572 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009a92:	2300      	movs	r3, #0
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3710      	adds	r7, #16
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b088      	sub	sp, #32
 8009aa0:	af04      	add	r7, sp, #16
 8009aa2:	60f8      	str	r0, [r7, #12]
 8009aa4:	60b9      	str	r1, [r7, #8]
 8009aa6:	4611      	mov	r1, r2
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	460b      	mov	r3, r1
 8009aac:	80fb      	strh	r3, [r7, #6]
 8009aae:	4613      	mov	r3, r2
 8009ab0:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009ab2:	7979      	ldrb	r1, [r7, #5]
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	9303      	str	r3, [sp, #12]
 8009ab8:	88fb      	ldrh	r3, [r7, #6]
 8009aba:	9302      	str	r3, [sp, #8]
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	9301      	str	r3, [sp, #4]
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	9300      	str	r3, [sp, #0]
 8009ac4:	2302      	movs	r3, #2
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	68f8      	ldr	r0, [r7, #12]
 8009aca:	f002 fd52 	bl	800c572 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009ace:	2300      	movs	r3, #0
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	3710      	adds	r7, #16
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}

08009ad8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b086      	sub	sp, #24
 8009adc:	af04      	add	r7, sp, #16
 8009ade:	6078      	str	r0, [r7, #4]
 8009ae0:	4608      	mov	r0, r1
 8009ae2:	4611      	mov	r1, r2
 8009ae4:	461a      	mov	r2, r3
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	70fb      	strb	r3, [r7, #3]
 8009aea:	460b      	mov	r3, r1
 8009aec:	70bb      	strb	r3, [r7, #2]
 8009aee:	4613      	mov	r3, r2
 8009af0:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009af2:	7878      	ldrb	r0, [r7, #1]
 8009af4:	78ba      	ldrb	r2, [r7, #2]
 8009af6:	78f9      	ldrb	r1, [r7, #3]
 8009af8:	8b3b      	ldrh	r3, [r7, #24]
 8009afa:	9302      	str	r3, [sp, #8]
 8009afc:	7d3b      	ldrb	r3, [r7, #20]
 8009afe:	9301      	str	r3, [sp, #4]
 8009b00:	7c3b      	ldrb	r3, [r7, #16]
 8009b02:	9300      	str	r3, [sp, #0]
 8009b04:	4603      	mov	r3, r0
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f002 fce5 	bl	800c4d6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8009b0c:	2300      	movs	r3, #0
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3708      	adds	r7, #8
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}

08009b16 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009b16:	b580      	push	{r7, lr}
 8009b18:	b082      	sub	sp, #8
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	6078      	str	r0, [r7, #4]
 8009b1e:	460b      	mov	r3, r1
 8009b20:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8009b22:	78fb      	ldrb	r3, [r7, #3]
 8009b24:	4619      	mov	r1, r3
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f002 fd04 	bl	800c534 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009b2c:	2300      	movs	r3, #0
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3708      	adds	r7, #8
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}

08009b36 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009b36:	b580      	push	{r7, lr}
 8009b38:	b084      	sub	sp, #16
 8009b3a:	af00      	add	r7, sp, #0
 8009b3c:	6078      	str	r0, [r7, #4]
 8009b3e:	460b      	mov	r3, r1
 8009b40:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f000 f836 	bl	8009bb4 <USBH_GetFreePipe>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009b4c:	89fb      	ldrh	r3, [r7, #14]
 8009b4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d00a      	beq.n	8009b6c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8009b56:	78fa      	ldrb	r2, [r7, #3]
 8009b58:	89fb      	ldrh	r3, [r7, #14]
 8009b5a:	f003 030f 	and.w	r3, r3, #15
 8009b5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009b62:	6879      	ldr	r1, [r7, #4]
 8009b64:	33e0      	adds	r3, #224	; 0xe0
 8009b66:	009b      	lsls	r3, r3, #2
 8009b68:	440b      	add	r3, r1
 8009b6a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009b6c:	89fb      	ldrh	r3, [r7, #14]
 8009b6e:	b2db      	uxtb	r3, r3
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	3710      	adds	r7, #16
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}

08009b78 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b083      	sub	sp, #12
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	460b      	mov	r3, r1
 8009b82:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8009b84:	78fb      	ldrb	r3, [r7, #3]
 8009b86:	2b0a      	cmp	r3, #10
 8009b88:	d80d      	bhi.n	8009ba6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009b8a:	78fb      	ldrb	r3, [r7, #3]
 8009b8c:	687a      	ldr	r2, [r7, #4]
 8009b8e:	33e0      	adds	r3, #224	; 0xe0
 8009b90:	009b      	lsls	r3, r3, #2
 8009b92:	4413      	add	r3, r2
 8009b94:	685a      	ldr	r2, [r3, #4]
 8009b96:	78fb      	ldrb	r3, [r7, #3]
 8009b98:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009b9c:	6879      	ldr	r1, [r7, #4]
 8009b9e:	33e0      	adds	r3, #224	; 0xe0
 8009ba0:	009b      	lsls	r3, r3, #2
 8009ba2:	440b      	add	r3, r1
 8009ba4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009ba6:	2300      	movs	r3, #0
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	370c      	adds	r7, #12
 8009bac:	46bd      	mov	sp, r7
 8009bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb2:	4770      	bx	lr

08009bb4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b085      	sub	sp, #20
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	73fb      	strb	r3, [r7, #15]
 8009bc4:	e00f      	b.n	8009be6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009bc6:	7bfb      	ldrb	r3, [r7, #15]
 8009bc8:	687a      	ldr	r2, [r7, #4]
 8009bca:	33e0      	adds	r3, #224	; 0xe0
 8009bcc:	009b      	lsls	r3, r3, #2
 8009bce:	4413      	add	r3, r2
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d102      	bne.n	8009be0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009bda:	7bfb      	ldrb	r3, [r7, #15]
 8009bdc:	b29b      	uxth	r3, r3
 8009bde:	e007      	b.n	8009bf0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8009be0:	7bfb      	ldrb	r3, [r7, #15]
 8009be2:	3301      	adds	r3, #1
 8009be4:	73fb      	strb	r3, [r7, #15]
 8009be6:	7bfb      	ldrb	r3, [r7, #15]
 8009be8:	2b0a      	cmp	r3, #10
 8009bea:	d9ec      	bls.n	8009bc6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009bec:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	3714      	adds	r7, #20
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr

08009bfc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b085      	sub	sp, #20
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	4603      	mov	r3, r0
 8009c04:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009c06:	2300      	movs	r3, #0
 8009c08:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009c0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009c0e:	2b84      	cmp	r3, #132	; 0x84
 8009c10:	d005      	beq.n	8009c1e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009c12:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	4413      	add	r3, r2
 8009c1a:	3303      	adds	r3, #3
 8009c1c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3714      	adds	r7, #20
 8009c24:	46bd      	mov	sp, r7
 8009c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2a:	4770      	bx	lr

08009c2c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b083      	sub	sp, #12
 8009c30:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c32:	f3ef 8305 	mrs	r3, IPSR
 8009c36:	607b      	str	r3, [r7, #4]
  return(result);
 8009c38:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	bf14      	ite	ne
 8009c3e:	2301      	movne	r3, #1
 8009c40:	2300      	moveq	r3, #0
 8009c42:	b2db      	uxtb	r3, r3
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	370c      	adds	r7, #12
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4e:	4770      	bx	lr

08009c50 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009c54:	f001 f916 	bl	800ae84 <vTaskStartScheduler>
  
  return osOK;
 8009c58:	2300      	movs	r3, #0
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	bd80      	pop	{r7, pc}

08009c5e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009c5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c60:	b089      	sub	sp, #36	; 0x24
 8009c62:	af04      	add	r7, sp, #16
 8009c64:	6078      	str	r0, [r7, #4]
 8009c66:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	695b      	ldr	r3, [r3, #20]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d020      	beq.n	8009cb2 <osThreadCreate+0x54>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	699b      	ldr	r3, [r3, #24]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d01c      	beq.n	8009cb2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	685c      	ldr	r4, [r3, #4]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681d      	ldr	r5, [r3, #0]
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	691e      	ldr	r6, [r3, #16]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f7ff ffb6 	bl	8009bfc <makeFreeRtosPriority>
 8009c90:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	695b      	ldr	r3, [r3, #20]
 8009c96:	687a      	ldr	r2, [r7, #4]
 8009c98:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009c9a:	9202      	str	r2, [sp, #8]
 8009c9c:	9301      	str	r3, [sp, #4]
 8009c9e:	9100      	str	r1, [sp, #0]
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	4632      	mov	r2, r6
 8009ca4:	4629      	mov	r1, r5
 8009ca6:	4620      	mov	r0, r4
 8009ca8:	f000 ff0e 	bl	800aac8 <xTaskCreateStatic>
 8009cac:	4603      	mov	r3, r0
 8009cae:	60fb      	str	r3, [r7, #12]
 8009cb0:	e01c      	b.n	8009cec <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	685c      	ldr	r4, [r3, #4]
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009cbe:	b29e      	uxth	r6, r3
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f7ff ff98 	bl	8009bfc <makeFreeRtosPriority>
 8009ccc:	4602      	mov	r2, r0
 8009cce:	f107 030c 	add.w	r3, r7, #12
 8009cd2:	9301      	str	r3, [sp, #4]
 8009cd4:	9200      	str	r2, [sp, #0]
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	4632      	mov	r2, r6
 8009cda:	4629      	mov	r1, r5
 8009cdc:	4620      	mov	r0, r4
 8009cde:	f000 ff50 	bl	800ab82 <xTaskCreate>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	d001      	beq.n	8009cec <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	e000      	b.n	8009cee <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009cec:	68fb      	ldr	r3, [r7, #12]
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3714      	adds	r7, #20
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009cf6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009cf6:	b580      	push	{r7, lr}
 8009cf8:	b084      	sub	sp, #16
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d001      	beq.n	8009d0c <osDelay+0x16>
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	e000      	b.n	8009d0e <osDelay+0x18>
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f001 f884 	bl	800ae1c <vTaskDelay>
  
  return osOK;
 8009d14:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3710      	adds	r7, #16
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}

08009d1e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8009d1e:	b590      	push	{r4, r7, lr}
 8009d20:	b085      	sub	sp, #20
 8009d22:	af02      	add	r7, sp, #8
 8009d24:	6078      	str	r0, [r7, #4]
 8009d26:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	689b      	ldr	r3, [r3, #8]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d011      	beq.n	8009d54 <osMessageCreate+0x36>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	68db      	ldr	r3, [r3, #12]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d00d      	beq.n	8009d54 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6818      	ldr	r0, [r3, #0]
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6859      	ldr	r1, [r3, #4]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	689a      	ldr	r2, [r3, #8]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	68db      	ldr	r3, [r3, #12]
 8009d48:	2400      	movs	r4, #0
 8009d4a:	9400      	str	r4, [sp, #0]
 8009d4c:	f000 f9e0 	bl	800a110 <xQueueGenericCreateStatic>
 8009d50:	4603      	mov	r3, r0
 8009d52:	e008      	b.n	8009d66 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6818      	ldr	r0, [r3, #0]
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	4619      	mov	r1, r3
 8009d60:	f000 fa4e 	bl	800a200 <xQueueGenericCreate>
 8009d64:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	370c      	adds	r7, #12
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd90      	pop	{r4, r7, pc}
	...

08009d70 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b086      	sub	sp, #24
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	60f8      	str	r0, [r7, #12]
 8009d78:	60b9      	str	r1, [r7, #8]
 8009d7a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d101      	bne.n	8009d8e <osMessagePut+0x1e>
    ticks = 1;
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8009d8e:	f7ff ff4d 	bl	8009c2c <inHandlerMode>
 8009d92:	4603      	mov	r3, r0
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d018      	beq.n	8009dca <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8009d98:	f107 0210 	add.w	r2, r7, #16
 8009d9c:	f107 0108 	add.w	r1, r7, #8
 8009da0:	2300      	movs	r3, #0
 8009da2:	68f8      	ldr	r0, [r7, #12]
 8009da4:	f000 fb84 	bl	800a4b0 <xQueueGenericSendFromISR>
 8009da8:	4603      	mov	r3, r0
 8009daa:	2b01      	cmp	r3, #1
 8009dac:	d001      	beq.n	8009db2 <osMessagePut+0x42>
      return osErrorOS;
 8009dae:	23ff      	movs	r3, #255	; 0xff
 8009db0:	e018      	b.n	8009de4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009db2:	693b      	ldr	r3, [r7, #16]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d014      	beq.n	8009de2 <osMessagePut+0x72>
 8009db8:	4b0c      	ldr	r3, [pc, #48]	; (8009dec <osMessagePut+0x7c>)
 8009dba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dbe:	601a      	str	r2, [r3, #0]
 8009dc0:	f3bf 8f4f 	dsb	sy
 8009dc4:	f3bf 8f6f 	isb	sy
 8009dc8:	e00b      	b.n	8009de2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8009dca:	f107 0108 	add.w	r1, r7, #8
 8009dce:	2300      	movs	r3, #0
 8009dd0:	697a      	ldr	r2, [r7, #20]
 8009dd2:	68f8      	ldr	r0, [r7, #12]
 8009dd4:	f000 fa6e 	bl	800a2b4 <xQueueGenericSend>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	2b01      	cmp	r3, #1
 8009ddc:	d001      	beq.n	8009de2 <osMessagePut+0x72>
      return osErrorOS;
 8009dde:	23ff      	movs	r3, #255	; 0xff
 8009de0:	e000      	b.n	8009de4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8009de2:	2300      	movs	r3, #0
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3718      	adds	r7, #24
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}
 8009dec:	e000ed04 	.word	0xe000ed04

08009df0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8009df0:	b590      	push	{r4, r7, lr}
 8009df2:	b08b      	sub	sp, #44	; 0x2c
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	60f8      	str	r0, [r7, #12]
 8009df8:	60b9      	str	r1, [r7, #8]
 8009dfa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8009e00:	2300      	movs	r3, #0
 8009e02:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d10a      	bne.n	8009e20 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8009e0a:	2380      	movs	r3, #128	; 0x80
 8009e0c:	617b      	str	r3, [r7, #20]
    return event;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	461c      	mov	r4, r3
 8009e12:	f107 0314 	add.w	r3, r7, #20
 8009e16:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009e1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009e1e:	e054      	b.n	8009eca <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8009e20:	2300      	movs	r3, #0
 8009e22:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8009e24:	2300      	movs	r3, #0
 8009e26:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e2e:	d103      	bne.n	8009e38 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8009e30:	f04f 33ff 	mov.w	r3, #4294967295
 8009e34:	627b      	str	r3, [r7, #36]	; 0x24
 8009e36:	e009      	b.n	8009e4c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d006      	beq.n	8009e4c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8009e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d101      	bne.n	8009e4c <osMessageGet+0x5c>
      ticks = 1;
 8009e48:	2301      	movs	r3, #1
 8009e4a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8009e4c:	f7ff feee 	bl	8009c2c <inHandlerMode>
 8009e50:	4603      	mov	r3, r0
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d01c      	beq.n	8009e90 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8009e56:	f107 0220 	add.w	r2, r7, #32
 8009e5a:	f107 0314 	add.w	r3, r7, #20
 8009e5e:	3304      	adds	r3, #4
 8009e60:	4619      	mov	r1, r3
 8009e62:	68b8      	ldr	r0, [r7, #8]
 8009e64:	f000 fca0 	bl	800a7a8 <xQueueReceiveFromISR>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	2b01      	cmp	r3, #1
 8009e6c:	d102      	bne.n	8009e74 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8009e6e:	2310      	movs	r3, #16
 8009e70:	617b      	str	r3, [r7, #20]
 8009e72:	e001      	b.n	8009e78 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8009e74:	2300      	movs	r3, #0
 8009e76:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009e78:	6a3b      	ldr	r3, [r7, #32]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d01d      	beq.n	8009eba <osMessageGet+0xca>
 8009e7e:	4b15      	ldr	r3, [pc, #84]	; (8009ed4 <osMessageGet+0xe4>)
 8009e80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e84:	601a      	str	r2, [r3, #0]
 8009e86:	f3bf 8f4f 	dsb	sy
 8009e8a:	f3bf 8f6f 	isb	sy
 8009e8e:	e014      	b.n	8009eba <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8009e90:	f107 0314 	add.w	r3, r7, #20
 8009e94:	3304      	adds	r3, #4
 8009e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e98:	4619      	mov	r1, r3
 8009e9a:	68b8      	ldr	r0, [r7, #8]
 8009e9c:	f000 fba4 	bl	800a5e8 <xQueueReceive>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	2b01      	cmp	r3, #1
 8009ea4:	d102      	bne.n	8009eac <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8009ea6:	2310      	movs	r3, #16
 8009ea8:	617b      	str	r3, [r7, #20]
 8009eaa:	e006      	b.n	8009eba <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8009eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d101      	bne.n	8009eb6 <osMessageGet+0xc6>
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	e000      	b.n	8009eb8 <osMessageGet+0xc8>
 8009eb6:	2340      	movs	r3, #64	; 0x40
 8009eb8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	461c      	mov	r4, r3
 8009ebe:	f107 0314 	add.w	r3, r7, #20
 8009ec2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009ec6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009eca:	68f8      	ldr	r0, [r7, #12]
 8009ecc:	372c      	adds	r7, #44	; 0x2c
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd90      	pop	{r4, r7, pc}
 8009ed2:	bf00      	nop
 8009ed4:	e000ed04 	.word	0xe000ed04

08009ed8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b083      	sub	sp, #12
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f103 0208 	add.w	r2, r3, #8
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f04f 32ff 	mov.w	r2, #4294967295
 8009ef0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f103 0208 	add.w	r2, r3, #8
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f103 0208 	add.w	r2, r3, #8
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2200      	movs	r2, #0
 8009f0a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009f0c:	bf00      	nop
 8009f0e:	370c      	adds	r7, #12
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr

08009f18 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b083      	sub	sp, #12
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2200      	movs	r2, #0
 8009f24:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009f26:	bf00      	nop
 8009f28:	370c      	adds	r7, #12
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f30:	4770      	bx	lr

08009f32 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009f32:	b480      	push	{r7}
 8009f34:	b085      	sub	sp, #20
 8009f36:	af00      	add	r7, sp, #0
 8009f38:	6078      	str	r0, [r7, #4]
 8009f3a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	685b      	ldr	r3, [r3, #4]
 8009f40:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	68fa      	ldr	r2, [r7, #12]
 8009f46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	689a      	ldr	r2, [r3, #8]
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	689b      	ldr	r3, [r3, #8]
 8009f54:	683a      	ldr	r2, [r7, #0]
 8009f56:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	683a      	ldr	r2, [r7, #0]
 8009f5c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	687a      	ldr	r2, [r7, #4]
 8009f62:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	1c5a      	adds	r2, r3, #1
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	601a      	str	r2, [r3, #0]
}
 8009f6e:	bf00      	nop
 8009f70:	3714      	adds	r7, #20
 8009f72:	46bd      	mov	sp, r7
 8009f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f78:	4770      	bx	lr

08009f7a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009f7a:	b480      	push	{r7}
 8009f7c:	b085      	sub	sp, #20
 8009f7e:	af00      	add	r7, sp, #0
 8009f80:	6078      	str	r0, [r7, #4]
 8009f82:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f90:	d103      	bne.n	8009f9a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	691b      	ldr	r3, [r3, #16]
 8009f96:	60fb      	str	r3, [r7, #12]
 8009f98:	e00c      	b.n	8009fb4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	3308      	adds	r3, #8
 8009f9e:	60fb      	str	r3, [r7, #12]
 8009fa0:	e002      	b.n	8009fa8 <vListInsert+0x2e>
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	685b      	ldr	r3, [r3, #4]
 8009fa6:	60fb      	str	r3, [r7, #12]
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	68ba      	ldr	r2, [r7, #8]
 8009fb0:	429a      	cmp	r2, r3
 8009fb2:	d2f6      	bcs.n	8009fa2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	685a      	ldr	r2, [r3, #4]
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	683a      	ldr	r2, [r7, #0]
 8009fc2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	68fa      	ldr	r2, [r7, #12]
 8009fc8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	683a      	ldr	r2, [r7, #0]
 8009fce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	687a      	ldr	r2, [r7, #4]
 8009fd4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	1c5a      	adds	r2, r3, #1
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	601a      	str	r2, [r3, #0]
}
 8009fe0:	bf00      	nop
 8009fe2:	3714      	adds	r7, #20
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fea:	4770      	bx	lr

08009fec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009fec:	b480      	push	{r7}
 8009fee:	b085      	sub	sp, #20
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	691b      	ldr	r3, [r3, #16]
 8009ff8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	685b      	ldr	r3, [r3, #4]
 8009ffe:	687a      	ldr	r2, [r7, #4]
 800a000:	6892      	ldr	r2, [r2, #8]
 800a002:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	689b      	ldr	r3, [r3, #8]
 800a008:	687a      	ldr	r2, [r7, #4]
 800a00a:	6852      	ldr	r2, [r2, #4]
 800a00c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	687a      	ldr	r2, [r7, #4]
 800a014:	429a      	cmp	r2, r3
 800a016:	d103      	bne.n	800a020 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	689a      	ldr	r2, [r3, #8]
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2200      	movs	r2, #0
 800a024:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	1e5a      	subs	r2, r3, #1
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681b      	ldr	r3, [r3, #0]
}
 800a034:	4618      	mov	r0, r3
 800a036:	3714      	adds	r7, #20
 800a038:	46bd      	mov	sp, r7
 800a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03e:	4770      	bx	lr

0800a040 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b084      	sub	sp, #16
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d10a      	bne.n	800a06a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a054:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a058:	f383 8811 	msr	BASEPRI, r3
 800a05c:	f3bf 8f6f 	isb	sy
 800a060:	f3bf 8f4f 	dsb	sy
 800a064:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a066:	bf00      	nop
 800a068:	e7fe      	b.n	800a068 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a06a:	f001 fd53 	bl	800bb14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681a      	ldr	r2, [r3, #0]
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a076:	68f9      	ldr	r1, [r7, #12]
 800a078:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a07a:	fb01 f303 	mul.w	r3, r1, r3
 800a07e:	441a      	add	r2, r3
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	2200      	movs	r2, #0
 800a088:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	681a      	ldr	r2, [r3, #0]
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681a      	ldr	r2, [r3, #0]
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a09a:	3b01      	subs	r3, #1
 800a09c:	68f9      	ldr	r1, [r7, #12]
 800a09e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a0a0:	fb01 f303 	mul.w	r3, r1, r3
 800a0a4:	441a      	add	r2, r3
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	22ff      	movs	r2, #255	; 0xff
 800a0ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	22ff      	movs	r2, #255	; 0xff
 800a0b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d114      	bne.n	800a0ea <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	691b      	ldr	r3, [r3, #16]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d01a      	beq.n	800a0fe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	3310      	adds	r3, #16
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f001 f92b 	bl	800b328 <xTaskRemoveFromEventList>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d012      	beq.n	800a0fe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a0d8:	4b0c      	ldr	r3, [pc, #48]	; (800a10c <xQueueGenericReset+0xcc>)
 800a0da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0de:	601a      	str	r2, [r3, #0]
 800a0e0:	f3bf 8f4f 	dsb	sy
 800a0e4:	f3bf 8f6f 	isb	sy
 800a0e8:	e009      	b.n	800a0fe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	3310      	adds	r3, #16
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f7ff fef2 	bl	8009ed8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	3324      	adds	r3, #36	; 0x24
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f7ff feed 	bl	8009ed8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a0fe:	f001 fd39 	bl	800bb74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a102:	2301      	movs	r3, #1
}
 800a104:	4618      	mov	r0, r3
 800a106:	3710      	adds	r7, #16
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}
 800a10c:	e000ed04 	.word	0xe000ed04

0800a110 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a110:	b580      	push	{r7, lr}
 800a112:	b08e      	sub	sp, #56	; 0x38
 800a114:	af02      	add	r7, sp, #8
 800a116:	60f8      	str	r0, [r7, #12]
 800a118:	60b9      	str	r1, [r7, #8]
 800a11a:	607a      	str	r2, [r7, #4]
 800a11c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d10a      	bne.n	800a13a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a124:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a128:	f383 8811 	msr	BASEPRI, r3
 800a12c:	f3bf 8f6f 	isb	sy
 800a130:	f3bf 8f4f 	dsb	sy
 800a134:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a136:	bf00      	nop
 800a138:	e7fe      	b.n	800a138 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d10a      	bne.n	800a156 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a144:	f383 8811 	msr	BASEPRI, r3
 800a148:	f3bf 8f6f 	isb	sy
 800a14c:	f3bf 8f4f 	dsb	sy
 800a150:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a152:	bf00      	nop
 800a154:	e7fe      	b.n	800a154 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d002      	beq.n	800a162 <xQueueGenericCreateStatic+0x52>
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d001      	beq.n	800a166 <xQueueGenericCreateStatic+0x56>
 800a162:	2301      	movs	r3, #1
 800a164:	e000      	b.n	800a168 <xQueueGenericCreateStatic+0x58>
 800a166:	2300      	movs	r3, #0
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d10a      	bne.n	800a182 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a170:	f383 8811 	msr	BASEPRI, r3
 800a174:	f3bf 8f6f 	isb	sy
 800a178:	f3bf 8f4f 	dsb	sy
 800a17c:	623b      	str	r3, [r7, #32]
}
 800a17e:	bf00      	nop
 800a180:	e7fe      	b.n	800a180 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d102      	bne.n	800a18e <xQueueGenericCreateStatic+0x7e>
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d101      	bne.n	800a192 <xQueueGenericCreateStatic+0x82>
 800a18e:	2301      	movs	r3, #1
 800a190:	e000      	b.n	800a194 <xQueueGenericCreateStatic+0x84>
 800a192:	2300      	movs	r3, #0
 800a194:	2b00      	cmp	r3, #0
 800a196:	d10a      	bne.n	800a1ae <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a19c:	f383 8811 	msr	BASEPRI, r3
 800a1a0:	f3bf 8f6f 	isb	sy
 800a1a4:	f3bf 8f4f 	dsb	sy
 800a1a8:	61fb      	str	r3, [r7, #28]
}
 800a1aa:	bf00      	nop
 800a1ac:	e7fe      	b.n	800a1ac <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a1ae:	2348      	movs	r3, #72	; 0x48
 800a1b0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	2b48      	cmp	r3, #72	; 0x48
 800a1b6:	d00a      	beq.n	800a1ce <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a1b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1bc:	f383 8811 	msr	BASEPRI, r3
 800a1c0:	f3bf 8f6f 	isb	sy
 800a1c4:	f3bf 8f4f 	dsb	sy
 800a1c8:	61bb      	str	r3, [r7, #24]
}
 800a1ca:	bf00      	nop
 800a1cc:	e7fe      	b.n	800a1cc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a1ce:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a1d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d00d      	beq.n	800a1f6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a1da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1dc:	2201      	movs	r2, #1
 800a1de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a1e2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a1e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1e8:	9300      	str	r3, [sp, #0]
 800a1ea:	4613      	mov	r3, r2
 800a1ec:	687a      	ldr	r2, [r7, #4]
 800a1ee:	68b9      	ldr	r1, [r7, #8]
 800a1f0:	68f8      	ldr	r0, [r7, #12]
 800a1f2:	f000 f83f 	bl	800a274 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a1f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	3730      	adds	r7, #48	; 0x30
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}

0800a200 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a200:	b580      	push	{r7, lr}
 800a202:	b08a      	sub	sp, #40	; 0x28
 800a204:	af02      	add	r7, sp, #8
 800a206:	60f8      	str	r0, [r7, #12]
 800a208:	60b9      	str	r1, [r7, #8]
 800a20a:	4613      	mov	r3, r2
 800a20c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d10a      	bne.n	800a22a <xQueueGenericCreate+0x2a>
	__asm volatile
 800a214:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a218:	f383 8811 	msr	BASEPRI, r3
 800a21c:	f3bf 8f6f 	isb	sy
 800a220:	f3bf 8f4f 	dsb	sy
 800a224:	613b      	str	r3, [r7, #16]
}
 800a226:	bf00      	nop
 800a228:	e7fe      	b.n	800a228 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	68ba      	ldr	r2, [r7, #8]
 800a22e:	fb02 f303 	mul.w	r3, r2, r3
 800a232:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a234:	69fb      	ldr	r3, [r7, #28]
 800a236:	3348      	adds	r3, #72	; 0x48
 800a238:	4618      	mov	r0, r3
 800a23a:	f001 fd8d 	bl	800bd58 <pvPortMalloc>
 800a23e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a240:	69bb      	ldr	r3, [r7, #24]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d011      	beq.n	800a26a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a246:	69bb      	ldr	r3, [r7, #24]
 800a248:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	3348      	adds	r3, #72	; 0x48
 800a24e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a250:	69bb      	ldr	r3, [r7, #24]
 800a252:	2200      	movs	r2, #0
 800a254:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a258:	79fa      	ldrb	r2, [r7, #7]
 800a25a:	69bb      	ldr	r3, [r7, #24]
 800a25c:	9300      	str	r3, [sp, #0]
 800a25e:	4613      	mov	r3, r2
 800a260:	697a      	ldr	r2, [r7, #20]
 800a262:	68b9      	ldr	r1, [r7, #8]
 800a264:	68f8      	ldr	r0, [r7, #12]
 800a266:	f000 f805 	bl	800a274 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a26a:	69bb      	ldr	r3, [r7, #24]
	}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3720      	adds	r7, #32
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}

0800a274 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b084      	sub	sp, #16
 800a278:	af00      	add	r7, sp, #0
 800a27a:	60f8      	str	r0, [r7, #12]
 800a27c:	60b9      	str	r1, [r7, #8]
 800a27e:	607a      	str	r2, [r7, #4]
 800a280:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d103      	bne.n	800a290 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a288:	69bb      	ldr	r3, [r7, #24]
 800a28a:	69ba      	ldr	r2, [r7, #24]
 800a28c:	601a      	str	r2, [r3, #0]
 800a28e:	e002      	b.n	800a296 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a290:	69bb      	ldr	r3, [r7, #24]
 800a292:	687a      	ldr	r2, [r7, #4]
 800a294:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a296:	69bb      	ldr	r3, [r7, #24]
 800a298:	68fa      	ldr	r2, [r7, #12]
 800a29a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a29c:	69bb      	ldr	r3, [r7, #24]
 800a29e:	68ba      	ldr	r2, [r7, #8]
 800a2a0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a2a2:	2101      	movs	r1, #1
 800a2a4:	69b8      	ldr	r0, [r7, #24]
 800a2a6:	f7ff fecb 	bl	800a040 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a2aa:	bf00      	nop
 800a2ac:	3710      	adds	r7, #16
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}
	...

0800a2b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b08e      	sub	sp, #56	; 0x38
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	60f8      	str	r0, [r7, #12]
 800a2bc:	60b9      	str	r1, [r7, #8]
 800a2be:	607a      	str	r2, [r7, #4]
 800a2c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d10a      	bne.n	800a2e6 <xQueueGenericSend+0x32>
	__asm volatile
 800a2d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d4:	f383 8811 	msr	BASEPRI, r3
 800a2d8:	f3bf 8f6f 	isb	sy
 800a2dc:	f3bf 8f4f 	dsb	sy
 800a2e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a2e2:	bf00      	nop
 800a2e4:	e7fe      	b.n	800a2e4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d103      	bne.n	800a2f4 <xQueueGenericSend+0x40>
 800a2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d101      	bne.n	800a2f8 <xQueueGenericSend+0x44>
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	e000      	b.n	800a2fa <xQueueGenericSend+0x46>
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d10a      	bne.n	800a314 <xQueueGenericSend+0x60>
	__asm volatile
 800a2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a302:	f383 8811 	msr	BASEPRI, r3
 800a306:	f3bf 8f6f 	isb	sy
 800a30a:	f3bf 8f4f 	dsb	sy
 800a30e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a310:	bf00      	nop
 800a312:	e7fe      	b.n	800a312 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	2b02      	cmp	r3, #2
 800a318:	d103      	bne.n	800a322 <xQueueGenericSend+0x6e>
 800a31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a31c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a31e:	2b01      	cmp	r3, #1
 800a320:	d101      	bne.n	800a326 <xQueueGenericSend+0x72>
 800a322:	2301      	movs	r3, #1
 800a324:	e000      	b.n	800a328 <xQueueGenericSend+0x74>
 800a326:	2300      	movs	r3, #0
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d10a      	bne.n	800a342 <xQueueGenericSend+0x8e>
	__asm volatile
 800a32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a330:	f383 8811 	msr	BASEPRI, r3
 800a334:	f3bf 8f6f 	isb	sy
 800a338:	f3bf 8f4f 	dsb	sy
 800a33c:	623b      	str	r3, [r7, #32]
}
 800a33e:	bf00      	nop
 800a340:	e7fe      	b.n	800a340 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a342:	f001 f9b1 	bl	800b6a8 <xTaskGetSchedulerState>
 800a346:	4603      	mov	r3, r0
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d102      	bne.n	800a352 <xQueueGenericSend+0x9e>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d101      	bne.n	800a356 <xQueueGenericSend+0xa2>
 800a352:	2301      	movs	r3, #1
 800a354:	e000      	b.n	800a358 <xQueueGenericSend+0xa4>
 800a356:	2300      	movs	r3, #0
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d10a      	bne.n	800a372 <xQueueGenericSend+0xbe>
	__asm volatile
 800a35c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a360:	f383 8811 	msr	BASEPRI, r3
 800a364:	f3bf 8f6f 	isb	sy
 800a368:	f3bf 8f4f 	dsb	sy
 800a36c:	61fb      	str	r3, [r7, #28]
}
 800a36e:	bf00      	nop
 800a370:	e7fe      	b.n	800a370 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a372:	f001 fbcf 	bl	800bb14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a378:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a37c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a37e:	429a      	cmp	r2, r3
 800a380:	d302      	bcc.n	800a388 <xQueueGenericSend+0xd4>
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	2b02      	cmp	r3, #2
 800a386:	d129      	bne.n	800a3dc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a388:	683a      	ldr	r2, [r7, #0]
 800a38a:	68b9      	ldr	r1, [r7, #8]
 800a38c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a38e:	f000 fa8b 	bl	800a8a8 <prvCopyDataToQueue>
 800a392:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d010      	beq.n	800a3be <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a39e:	3324      	adds	r3, #36	; 0x24
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f000 ffc1 	bl	800b328 <xTaskRemoveFromEventList>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d013      	beq.n	800a3d4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a3ac:	4b3f      	ldr	r3, [pc, #252]	; (800a4ac <xQueueGenericSend+0x1f8>)
 800a3ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3b2:	601a      	str	r2, [r3, #0]
 800a3b4:	f3bf 8f4f 	dsb	sy
 800a3b8:	f3bf 8f6f 	isb	sy
 800a3bc:	e00a      	b.n	800a3d4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d007      	beq.n	800a3d4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a3c4:	4b39      	ldr	r3, [pc, #228]	; (800a4ac <xQueueGenericSend+0x1f8>)
 800a3c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3ca:	601a      	str	r2, [r3, #0]
 800a3cc:	f3bf 8f4f 	dsb	sy
 800a3d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a3d4:	f001 fbce 	bl	800bb74 <vPortExitCritical>
				return pdPASS;
 800a3d8:	2301      	movs	r3, #1
 800a3da:	e063      	b.n	800a4a4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d103      	bne.n	800a3ea <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a3e2:	f001 fbc7 	bl	800bb74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	e05c      	b.n	800a4a4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a3ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d106      	bne.n	800a3fe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a3f0:	f107 0314 	add.w	r3, r7, #20
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f000 fff9 	bl	800b3ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a3fe:	f001 fbb9 	bl	800bb74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a402:	f000 fda9 	bl	800af58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a406:	f001 fb85 	bl	800bb14 <vPortEnterCritical>
 800a40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a40c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a410:	b25b      	sxtb	r3, r3
 800a412:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a416:	d103      	bne.n	800a420 <xQueueGenericSend+0x16c>
 800a418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a41a:	2200      	movs	r2, #0
 800a41c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a422:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a426:	b25b      	sxtb	r3, r3
 800a428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a42c:	d103      	bne.n	800a436 <xQueueGenericSend+0x182>
 800a42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a430:	2200      	movs	r2, #0
 800a432:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a436:	f001 fb9d 	bl	800bb74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a43a:	1d3a      	adds	r2, r7, #4
 800a43c:	f107 0314 	add.w	r3, r7, #20
 800a440:	4611      	mov	r1, r2
 800a442:	4618      	mov	r0, r3
 800a444:	f000 ffe8 	bl	800b418 <xTaskCheckForTimeOut>
 800a448:	4603      	mov	r3, r0
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d124      	bne.n	800a498 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a44e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a450:	f000 fb22 	bl	800aa98 <prvIsQueueFull>
 800a454:	4603      	mov	r3, r0
 800a456:	2b00      	cmp	r3, #0
 800a458:	d018      	beq.n	800a48c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a45c:	3310      	adds	r3, #16
 800a45e:	687a      	ldr	r2, [r7, #4]
 800a460:	4611      	mov	r1, r2
 800a462:	4618      	mov	r0, r3
 800a464:	f000 ff3c 	bl	800b2e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a468:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a46a:	f000 faad 	bl	800a9c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a46e:	f000 fd81 	bl	800af74 <xTaskResumeAll>
 800a472:	4603      	mov	r3, r0
 800a474:	2b00      	cmp	r3, #0
 800a476:	f47f af7c 	bne.w	800a372 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a47a:	4b0c      	ldr	r3, [pc, #48]	; (800a4ac <xQueueGenericSend+0x1f8>)
 800a47c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a480:	601a      	str	r2, [r3, #0]
 800a482:	f3bf 8f4f 	dsb	sy
 800a486:	f3bf 8f6f 	isb	sy
 800a48a:	e772      	b.n	800a372 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a48c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a48e:	f000 fa9b 	bl	800a9c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a492:	f000 fd6f 	bl	800af74 <xTaskResumeAll>
 800a496:	e76c      	b.n	800a372 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a498:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a49a:	f000 fa95 	bl	800a9c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a49e:	f000 fd69 	bl	800af74 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a4a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3738      	adds	r7, #56	; 0x38
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}
 800a4ac:	e000ed04 	.word	0xe000ed04

0800a4b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b090      	sub	sp, #64	; 0x40
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	60f8      	str	r0, [r7, #12]
 800a4b8:	60b9      	str	r1, [r7, #8]
 800a4ba:	607a      	str	r2, [r7, #4]
 800a4bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a4c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d10a      	bne.n	800a4de <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a4c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4cc:	f383 8811 	msr	BASEPRI, r3
 800a4d0:	f3bf 8f6f 	isb	sy
 800a4d4:	f3bf 8f4f 	dsb	sy
 800a4d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a4da:	bf00      	nop
 800a4dc:	e7fe      	b.n	800a4dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d103      	bne.n	800a4ec <xQueueGenericSendFromISR+0x3c>
 800a4e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d101      	bne.n	800a4f0 <xQueueGenericSendFromISR+0x40>
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	e000      	b.n	800a4f2 <xQueueGenericSendFromISR+0x42>
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d10a      	bne.n	800a50c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a4f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4fa:	f383 8811 	msr	BASEPRI, r3
 800a4fe:	f3bf 8f6f 	isb	sy
 800a502:	f3bf 8f4f 	dsb	sy
 800a506:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a508:	bf00      	nop
 800a50a:	e7fe      	b.n	800a50a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	2b02      	cmp	r3, #2
 800a510:	d103      	bne.n	800a51a <xQueueGenericSendFromISR+0x6a>
 800a512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a516:	2b01      	cmp	r3, #1
 800a518:	d101      	bne.n	800a51e <xQueueGenericSendFromISR+0x6e>
 800a51a:	2301      	movs	r3, #1
 800a51c:	e000      	b.n	800a520 <xQueueGenericSendFromISR+0x70>
 800a51e:	2300      	movs	r3, #0
 800a520:	2b00      	cmp	r3, #0
 800a522:	d10a      	bne.n	800a53a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a524:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a528:	f383 8811 	msr	BASEPRI, r3
 800a52c:	f3bf 8f6f 	isb	sy
 800a530:	f3bf 8f4f 	dsb	sy
 800a534:	623b      	str	r3, [r7, #32]
}
 800a536:	bf00      	nop
 800a538:	e7fe      	b.n	800a538 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a53a:	f001 fbcd 	bl	800bcd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a53e:	f3ef 8211 	mrs	r2, BASEPRI
 800a542:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a546:	f383 8811 	msr	BASEPRI, r3
 800a54a:	f3bf 8f6f 	isb	sy
 800a54e:	f3bf 8f4f 	dsb	sy
 800a552:	61fa      	str	r2, [r7, #28]
 800a554:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a556:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a558:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a55c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a55e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a562:	429a      	cmp	r2, r3
 800a564:	d302      	bcc.n	800a56c <xQueueGenericSendFromISR+0xbc>
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	2b02      	cmp	r3, #2
 800a56a:	d12f      	bne.n	800a5cc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a56c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a56e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a572:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a57a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a57c:	683a      	ldr	r2, [r7, #0]
 800a57e:	68b9      	ldr	r1, [r7, #8]
 800a580:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a582:	f000 f991 	bl	800a8a8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a586:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a58a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a58e:	d112      	bne.n	800a5b6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a594:	2b00      	cmp	r3, #0
 800a596:	d016      	beq.n	800a5c6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a59a:	3324      	adds	r3, #36	; 0x24
 800a59c:	4618      	mov	r0, r3
 800a59e:	f000 fec3 	bl	800b328 <xTaskRemoveFromEventList>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d00e      	beq.n	800a5c6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d00b      	beq.n	800a5c6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2201      	movs	r2, #1
 800a5b2:	601a      	str	r2, [r3, #0]
 800a5b4:	e007      	b.n	800a5c6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a5b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a5ba:	3301      	adds	r3, #1
 800a5bc:	b2db      	uxtb	r3, r3
 800a5be:	b25a      	sxtb	r2, r3
 800a5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a5ca:	e001      	b.n	800a5d0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5d2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a5da:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a5dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	3740      	adds	r7, #64	; 0x40
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}
	...

0800a5e8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b08c      	sub	sp, #48	; 0x30
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	60f8      	str	r0, [r7, #12]
 800a5f0:	60b9      	str	r1, [r7, #8]
 800a5f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a5fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d10a      	bne.n	800a618 <xQueueReceive+0x30>
	__asm volatile
 800a602:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a606:	f383 8811 	msr	BASEPRI, r3
 800a60a:	f3bf 8f6f 	isb	sy
 800a60e:	f3bf 8f4f 	dsb	sy
 800a612:	623b      	str	r3, [r7, #32]
}
 800a614:	bf00      	nop
 800a616:	e7fe      	b.n	800a616 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d103      	bne.n	800a626 <xQueueReceive+0x3e>
 800a61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a622:	2b00      	cmp	r3, #0
 800a624:	d101      	bne.n	800a62a <xQueueReceive+0x42>
 800a626:	2301      	movs	r3, #1
 800a628:	e000      	b.n	800a62c <xQueueReceive+0x44>
 800a62a:	2300      	movs	r3, #0
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d10a      	bne.n	800a646 <xQueueReceive+0x5e>
	__asm volatile
 800a630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a634:	f383 8811 	msr	BASEPRI, r3
 800a638:	f3bf 8f6f 	isb	sy
 800a63c:	f3bf 8f4f 	dsb	sy
 800a640:	61fb      	str	r3, [r7, #28]
}
 800a642:	bf00      	nop
 800a644:	e7fe      	b.n	800a644 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a646:	f001 f82f 	bl	800b6a8 <xTaskGetSchedulerState>
 800a64a:	4603      	mov	r3, r0
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d102      	bne.n	800a656 <xQueueReceive+0x6e>
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d101      	bne.n	800a65a <xQueueReceive+0x72>
 800a656:	2301      	movs	r3, #1
 800a658:	e000      	b.n	800a65c <xQueueReceive+0x74>
 800a65a:	2300      	movs	r3, #0
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d10a      	bne.n	800a676 <xQueueReceive+0x8e>
	__asm volatile
 800a660:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a664:	f383 8811 	msr	BASEPRI, r3
 800a668:	f3bf 8f6f 	isb	sy
 800a66c:	f3bf 8f4f 	dsb	sy
 800a670:	61bb      	str	r3, [r7, #24]
}
 800a672:	bf00      	nop
 800a674:	e7fe      	b.n	800a674 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a676:	f001 fa4d 	bl	800bb14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a67c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a67e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a682:	2b00      	cmp	r3, #0
 800a684:	d01f      	beq.n	800a6c6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a686:	68b9      	ldr	r1, [r7, #8]
 800a688:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a68a:	f000 f977 	bl	800a97c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a690:	1e5a      	subs	r2, r3, #1
 800a692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a694:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a698:	691b      	ldr	r3, [r3, #16]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d00f      	beq.n	800a6be <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a69e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a0:	3310      	adds	r3, #16
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f000 fe40 	bl	800b328 <xTaskRemoveFromEventList>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d007      	beq.n	800a6be <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a6ae:	4b3d      	ldr	r3, [pc, #244]	; (800a7a4 <xQueueReceive+0x1bc>)
 800a6b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6b4:	601a      	str	r2, [r3, #0]
 800a6b6:	f3bf 8f4f 	dsb	sy
 800a6ba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a6be:	f001 fa59 	bl	800bb74 <vPortExitCritical>
				return pdPASS;
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	e069      	b.n	800a79a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d103      	bne.n	800a6d4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a6cc:	f001 fa52 	bl	800bb74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	e062      	b.n	800a79a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d106      	bne.n	800a6e8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a6da:	f107 0310 	add.w	r3, r7, #16
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f000 fe84 	bl	800b3ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a6e8:	f001 fa44 	bl	800bb74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a6ec:	f000 fc34 	bl	800af58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a6f0:	f001 fa10 	bl	800bb14 <vPortEnterCritical>
 800a6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a6fa:	b25b      	sxtb	r3, r3
 800a6fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a700:	d103      	bne.n	800a70a <xQueueReceive+0x122>
 800a702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a704:	2200      	movs	r2, #0
 800a706:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a70a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a70c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a710:	b25b      	sxtb	r3, r3
 800a712:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a716:	d103      	bne.n	800a720 <xQueueReceive+0x138>
 800a718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a71a:	2200      	movs	r2, #0
 800a71c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a720:	f001 fa28 	bl	800bb74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a724:	1d3a      	adds	r2, r7, #4
 800a726:	f107 0310 	add.w	r3, r7, #16
 800a72a:	4611      	mov	r1, r2
 800a72c:	4618      	mov	r0, r3
 800a72e:	f000 fe73 	bl	800b418 <xTaskCheckForTimeOut>
 800a732:	4603      	mov	r3, r0
 800a734:	2b00      	cmp	r3, #0
 800a736:	d123      	bne.n	800a780 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a738:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a73a:	f000 f997 	bl	800aa6c <prvIsQueueEmpty>
 800a73e:	4603      	mov	r3, r0
 800a740:	2b00      	cmp	r3, #0
 800a742:	d017      	beq.n	800a774 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a746:	3324      	adds	r3, #36	; 0x24
 800a748:	687a      	ldr	r2, [r7, #4]
 800a74a:	4611      	mov	r1, r2
 800a74c:	4618      	mov	r0, r3
 800a74e:	f000 fdc7 	bl	800b2e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a752:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a754:	f000 f938 	bl	800a9c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a758:	f000 fc0c 	bl	800af74 <xTaskResumeAll>
 800a75c:	4603      	mov	r3, r0
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d189      	bne.n	800a676 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a762:	4b10      	ldr	r3, [pc, #64]	; (800a7a4 <xQueueReceive+0x1bc>)
 800a764:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a768:	601a      	str	r2, [r3, #0]
 800a76a:	f3bf 8f4f 	dsb	sy
 800a76e:	f3bf 8f6f 	isb	sy
 800a772:	e780      	b.n	800a676 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a774:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a776:	f000 f927 	bl	800a9c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a77a:	f000 fbfb 	bl	800af74 <xTaskResumeAll>
 800a77e:	e77a      	b.n	800a676 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a780:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a782:	f000 f921 	bl	800a9c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a786:	f000 fbf5 	bl	800af74 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a78a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a78c:	f000 f96e 	bl	800aa6c <prvIsQueueEmpty>
 800a790:	4603      	mov	r3, r0
 800a792:	2b00      	cmp	r3, #0
 800a794:	f43f af6f 	beq.w	800a676 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a798:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3730      	adds	r7, #48	; 0x30
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}
 800a7a2:	bf00      	nop
 800a7a4:	e000ed04 	.word	0xe000ed04

0800a7a8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b08e      	sub	sp, #56	; 0x38
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	60f8      	str	r0, [r7, #12]
 800a7b0:	60b9      	str	r1, [r7, #8]
 800a7b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a7b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d10a      	bne.n	800a7d4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7c2:	f383 8811 	msr	BASEPRI, r3
 800a7c6:	f3bf 8f6f 	isb	sy
 800a7ca:	f3bf 8f4f 	dsb	sy
 800a7ce:	623b      	str	r3, [r7, #32]
}
 800a7d0:	bf00      	nop
 800a7d2:	e7fe      	b.n	800a7d2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d103      	bne.n	800a7e2 <xQueueReceiveFromISR+0x3a>
 800a7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d101      	bne.n	800a7e6 <xQueueReceiveFromISR+0x3e>
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	e000      	b.n	800a7e8 <xQueueReceiveFromISR+0x40>
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d10a      	bne.n	800a802 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a7ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f0:	f383 8811 	msr	BASEPRI, r3
 800a7f4:	f3bf 8f6f 	isb	sy
 800a7f8:	f3bf 8f4f 	dsb	sy
 800a7fc:	61fb      	str	r3, [r7, #28]
}
 800a7fe:	bf00      	nop
 800a800:	e7fe      	b.n	800a800 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a802:	f001 fa69 	bl	800bcd8 <vPortValidateInterruptPriority>
	__asm volatile
 800a806:	f3ef 8211 	mrs	r2, BASEPRI
 800a80a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a80e:	f383 8811 	msr	BASEPRI, r3
 800a812:	f3bf 8f6f 	isb	sy
 800a816:	f3bf 8f4f 	dsb	sy
 800a81a:	61ba      	str	r2, [r7, #24]
 800a81c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a81e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a820:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a826:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d02f      	beq.n	800a88e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a82e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a830:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a834:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a838:	68b9      	ldr	r1, [r7, #8]
 800a83a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a83c:	f000 f89e 	bl	800a97c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a842:	1e5a      	subs	r2, r3, #1
 800a844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a846:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a848:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a84c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a850:	d112      	bne.n	800a878 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a854:	691b      	ldr	r3, [r3, #16]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d016      	beq.n	800a888 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a85a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a85c:	3310      	adds	r3, #16
 800a85e:	4618      	mov	r0, r3
 800a860:	f000 fd62 	bl	800b328 <xTaskRemoveFromEventList>
 800a864:	4603      	mov	r3, r0
 800a866:	2b00      	cmp	r3, #0
 800a868:	d00e      	beq.n	800a888 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d00b      	beq.n	800a888 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2201      	movs	r2, #1
 800a874:	601a      	str	r2, [r3, #0]
 800a876:	e007      	b.n	800a888 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a878:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a87c:	3301      	adds	r3, #1
 800a87e:	b2db      	uxtb	r3, r3
 800a880:	b25a      	sxtb	r2, r3
 800a882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a884:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a888:	2301      	movs	r3, #1
 800a88a:	637b      	str	r3, [r7, #52]	; 0x34
 800a88c:	e001      	b.n	800a892 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a88e:	2300      	movs	r3, #0
 800a890:	637b      	str	r3, [r7, #52]	; 0x34
 800a892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a894:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	f383 8811 	msr	BASEPRI, r3
}
 800a89c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a89e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3738      	adds	r7, #56	; 0x38
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b086      	sub	sp, #24
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	60f8      	str	r0, [r7, #12]
 800a8b0:	60b9      	str	r1, [r7, #8]
 800a8b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8bc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d10d      	bne.n	800a8e2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d14d      	bne.n	800a96a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	689b      	ldr	r3, [r3, #8]
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f000 ff06 	bl	800b6e4 <xTaskPriorityDisinherit>
 800a8d8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	609a      	str	r2, [r3, #8]
 800a8e0:	e043      	b.n	800a96a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d119      	bne.n	800a91c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	6858      	ldr	r0, [r3, #4]
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8f0:	461a      	mov	r2, r3
 800a8f2:	68b9      	ldr	r1, [r7, #8]
 800a8f4:	f001 ff58 	bl	800c7a8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	685a      	ldr	r2, [r3, #4]
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a900:	441a      	add	r2, r3
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	685a      	ldr	r2, [r3, #4]
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	689b      	ldr	r3, [r3, #8]
 800a90e:	429a      	cmp	r2, r3
 800a910:	d32b      	bcc.n	800a96a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	681a      	ldr	r2, [r3, #0]
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	605a      	str	r2, [r3, #4]
 800a91a:	e026      	b.n	800a96a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	68d8      	ldr	r0, [r3, #12]
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a924:	461a      	mov	r2, r3
 800a926:	68b9      	ldr	r1, [r7, #8]
 800a928:	f001 ff3e 	bl	800c7a8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	68da      	ldr	r2, [r3, #12]
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a934:	425b      	negs	r3, r3
 800a936:	441a      	add	r2, r3
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	68da      	ldr	r2, [r3, #12]
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	429a      	cmp	r2, r3
 800a946:	d207      	bcs.n	800a958 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	689a      	ldr	r2, [r3, #8]
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a950:	425b      	negs	r3, r3
 800a952:	441a      	add	r2, r3
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2b02      	cmp	r3, #2
 800a95c:	d105      	bne.n	800a96a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d002      	beq.n	800a96a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	3b01      	subs	r3, #1
 800a968:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a96a:	693b      	ldr	r3, [r7, #16]
 800a96c:	1c5a      	adds	r2, r3, #1
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a972:	697b      	ldr	r3, [r7, #20]
}
 800a974:	4618      	mov	r0, r3
 800a976:	3718      	adds	r7, #24
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}

0800a97c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b082      	sub	sp, #8
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
 800a984:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d018      	beq.n	800a9c0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	68da      	ldr	r2, [r3, #12]
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a996:	441a      	add	r2, r3
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	68da      	ldr	r2, [r3, #12]
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	689b      	ldr	r3, [r3, #8]
 800a9a4:	429a      	cmp	r2, r3
 800a9a6:	d303      	bcc.n	800a9b0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681a      	ldr	r2, [r3, #0]
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	68d9      	ldr	r1, [r3, #12]
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9b8:	461a      	mov	r2, r3
 800a9ba:	6838      	ldr	r0, [r7, #0]
 800a9bc:	f001 fef4 	bl	800c7a8 <memcpy>
	}
}
 800a9c0:	bf00      	nop
 800a9c2:	3708      	adds	r7, #8
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}

0800a9c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b084      	sub	sp, #16
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a9d0:	f001 f8a0 	bl	800bb14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9da:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a9dc:	e011      	b.n	800aa02 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d012      	beq.n	800aa0c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	3324      	adds	r3, #36	; 0x24
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f000 fc9c 	bl	800b328 <xTaskRemoveFromEventList>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d001      	beq.n	800a9fa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a9f6:	f000 fd71 	bl	800b4dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a9fa:	7bfb      	ldrb	r3, [r7, #15]
 800a9fc:	3b01      	subs	r3, #1
 800a9fe:	b2db      	uxtb	r3, r3
 800aa00:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aa02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	dce9      	bgt.n	800a9de <prvUnlockQueue+0x16>
 800aa0a:	e000      	b.n	800aa0e <prvUnlockQueue+0x46>
					break;
 800aa0c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	22ff      	movs	r2, #255	; 0xff
 800aa12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800aa16:	f001 f8ad 	bl	800bb74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800aa1a:	f001 f87b 	bl	800bb14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa24:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aa26:	e011      	b.n	800aa4c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	691b      	ldr	r3, [r3, #16]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d012      	beq.n	800aa56 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	3310      	adds	r3, #16
 800aa34:	4618      	mov	r0, r3
 800aa36:	f000 fc77 	bl	800b328 <xTaskRemoveFromEventList>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d001      	beq.n	800aa44 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800aa40:	f000 fd4c 	bl	800b4dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800aa44:	7bbb      	ldrb	r3, [r7, #14]
 800aa46:	3b01      	subs	r3, #1
 800aa48:	b2db      	uxtb	r3, r3
 800aa4a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aa4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	dce9      	bgt.n	800aa28 <prvUnlockQueue+0x60>
 800aa54:	e000      	b.n	800aa58 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800aa56:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	22ff      	movs	r2, #255	; 0xff
 800aa5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800aa60:	f001 f888 	bl	800bb74 <vPortExitCritical>
}
 800aa64:	bf00      	nop
 800aa66:	3710      	adds	r7, #16
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}

0800aa6c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b084      	sub	sp, #16
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aa74:	f001 f84e 	bl	800bb14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d102      	bne.n	800aa86 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800aa80:	2301      	movs	r3, #1
 800aa82:	60fb      	str	r3, [r7, #12]
 800aa84:	e001      	b.n	800aa8a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800aa86:	2300      	movs	r3, #0
 800aa88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aa8a:	f001 f873 	bl	800bb74 <vPortExitCritical>

	return xReturn;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	3710      	adds	r7, #16
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}

0800aa98 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b084      	sub	sp, #16
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aaa0:	f001 f838 	bl	800bb14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaac:	429a      	cmp	r2, r3
 800aaae:	d102      	bne.n	800aab6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800aab0:	2301      	movs	r3, #1
 800aab2:	60fb      	str	r3, [r7, #12]
 800aab4:	e001      	b.n	800aaba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800aab6:	2300      	movs	r3, #0
 800aab8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aaba:	f001 f85b 	bl	800bb74 <vPortExitCritical>

	return xReturn;
 800aabe:	68fb      	ldr	r3, [r7, #12]
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3710      	adds	r7, #16
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd80      	pop	{r7, pc}

0800aac8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b08e      	sub	sp, #56	; 0x38
 800aacc:	af04      	add	r7, sp, #16
 800aace:	60f8      	str	r0, [r7, #12]
 800aad0:	60b9      	str	r1, [r7, #8]
 800aad2:	607a      	str	r2, [r7, #4]
 800aad4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800aad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d10a      	bne.n	800aaf2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800aadc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae0:	f383 8811 	msr	BASEPRI, r3
 800aae4:	f3bf 8f6f 	isb	sy
 800aae8:	f3bf 8f4f 	dsb	sy
 800aaec:	623b      	str	r3, [r7, #32]
}
 800aaee:	bf00      	nop
 800aaf0:	e7fe      	b.n	800aaf0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800aaf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d10a      	bne.n	800ab0e <xTaskCreateStatic+0x46>
	__asm volatile
 800aaf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aafc:	f383 8811 	msr	BASEPRI, r3
 800ab00:	f3bf 8f6f 	isb	sy
 800ab04:	f3bf 8f4f 	dsb	sy
 800ab08:	61fb      	str	r3, [r7, #28]
}
 800ab0a:	bf00      	nop
 800ab0c:	e7fe      	b.n	800ab0c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ab0e:	23b4      	movs	r3, #180	; 0xb4
 800ab10:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ab12:	693b      	ldr	r3, [r7, #16]
 800ab14:	2bb4      	cmp	r3, #180	; 0xb4
 800ab16:	d00a      	beq.n	800ab2e <xTaskCreateStatic+0x66>
	__asm volatile
 800ab18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab1c:	f383 8811 	msr	BASEPRI, r3
 800ab20:	f3bf 8f6f 	isb	sy
 800ab24:	f3bf 8f4f 	dsb	sy
 800ab28:	61bb      	str	r3, [r7, #24]
}
 800ab2a:	bf00      	nop
 800ab2c:	e7fe      	b.n	800ab2c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ab2e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ab30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d01e      	beq.n	800ab74 <xTaskCreateStatic+0xac>
 800ab36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d01b      	beq.n	800ab74 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ab3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab3e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ab40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab44:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ab46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab48:	2202      	movs	r2, #2
 800ab4a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ab4e:	2300      	movs	r3, #0
 800ab50:	9303      	str	r3, [sp, #12]
 800ab52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab54:	9302      	str	r3, [sp, #8]
 800ab56:	f107 0314 	add.w	r3, r7, #20
 800ab5a:	9301      	str	r3, [sp, #4]
 800ab5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab5e:	9300      	str	r3, [sp, #0]
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	687a      	ldr	r2, [r7, #4]
 800ab64:	68b9      	ldr	r1, [r7, #8]
 800ab66:	68f8      	ldr	r0, [r7, #12]
 800ab68:	f000 f850 	bl	800ac0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ab6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ab6e:	f000 f8eb 	bl	800ad48 <prvAddNewTaskToReadyList>
 800ab72:	e001      	b.n	800ab78 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ab74:	2300      	movs	r3, #0
 800ab76:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ab78:	697b      	ldr	r3, [r7, #20]
	}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3728      	adds	r7, #40	; 0x28
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}

0800ab82 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ab82:	b580      	push	{r7, lr}
 800ab84:	b08c      	sub	sp, #48	; 0x30
 800ab86:	af04      	add	r7, sp, #16
 800ab88:	60f8      	str	r0, [r7, #12]
 800ab8a:	60b9      	str	r1, [r7, #8]
 800ab8c:	603b      	str	r3, [r7, #0]
 800ab8e:	4613      	mov	r3, r2
 800ab90:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ab92:	88fb      	ldrh	r3, [r7, #6]
 800ab94:	009b      	lsls	r3, r3, #2
 800ab96:	4618      	mov	r0, r3
 800ab98:	f001 f8de 	bl	800bd58 <pvPortMalloc>
 800ab9c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ab9e:	697b      	ldr	r3, [r7, #20]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d00e      	beq.n	800abc2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800aba4:	20b4      	movs	r0, #180	; 0xb4
 800aba6:	f001 f8d7 	bl	800bd58 <pvPortMalloc>
 800abaa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800abac:	69fb      	ldr	r3, [r7, #28]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d003      	beq.n	800abba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800abb2:	69fb      	ldr	r3, [r7, #28]
 800abb4:	697a      	ldr	r2, [r7, #20]
 800abb6:	631a      	str	r2, [r3, #48]	; 0x30
 800abb8:	e005      	b.n	800abc6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800abba:	6978      	ldr	r0, [r7, #20]
 800abbc:	f001 f998 	bl	800bef0 <vPortFree>
 800abc0:	e001      	b.n	800abc6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800abc2:	2300      	movs	r3, #0
 800abc4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800abc6:	69fb      	ldr	r3, [r7, #28]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d017      	beq.n	800abfc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800abcc:	69fb      	ldr	r3, [r7, #28]
 800abce:	2200      	movs	r2, #0
 800abd0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800abd4:	88fa      	ldrh	r2, [r7, #6]
 800abd6:	2300      	movs	r3, #0
 800abd8:	9303      	str	r3, [sp, #12]
 800abda:	69fb      	ldr	r3, [r7, #28]
 800abdc:	9302      	str	r3, [sp, #8]
 800abde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abe0:	9301      	str	r3, [sp, #4]
 800abe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abe4:	9300      	str	r3, [sp, #0]
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	68b9      	ldr	r1, [r7, #8]
 800abea:	68f8      	ldr	r0, [r7, #12]
 800abec:	f000 f80e 	bl	800ac0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800abf0:	69f8      	ldr	r0, [r7, #28]
 800abf2:	f000 f8a9 	bl	800ad48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800abf6:	2301      	movs	r3, #1
 800abf8:	61bb      	str	r3, [r7, #24]
 800abfa:	e002      	b.n	800ac02 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800abfc:	f04f 33ff 	mov.w	r3, #4294967295
 800ac00:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ac02:	69bb      	ldr	r3, [r7, #24]
	}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3720      	adds	r7, #32
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}

0800ac0c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b088      	sub	sp, #32
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	60f8      	str	r0, [r7, #12]
 800ac14:	60b9      	str	r1, [r7, #8]
 800ac16:	607a      	str	r2, [r7, #4]
 800ac18:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ac1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ac24:	3b01      	subs	r3, #1
 800ac26:	009b      	lsls	r3, r3, #2
 800ac28:	4413      	add	r3, r2
 800ac2a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ac2c:	69bb      	ldr	r3, [r7, #24]
 800ac2e:	f023 0307 	bic.w	r3, r3, #7
 800ac32:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ac34:	69bb      	ldr	r3, [r7, #24]
 800ac36:	f003 0307 	and.w	r3, r3, #7
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d00a      	beq.n	800ac54 <prvInitialiseNewTask+0x48>
	__asm volatile
 800ac3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac42:	f383 8811 	msr	BASEPRI, r3
 800ac46:	f3bf 8f6f 	isb	sy
 800ac4a:	f3bf 8f4f 	dsb	sy
 800ac4e:	617b      	str	r3, [r7, #20]
}
 800ac50:	bf00      	nop
 800ac52:	e7fe      	b.n	800ac52 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d01f      	beq.n	800ac9a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	61fb      	str	r3, [r7, #28]
 800ac5e:	e012      	b.n	800ac86 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ac60:	68ba      	ldr	r2, [r7, #8]
 800ac62:	69fb      	ldr	r3, [r7, #28]
 800ac64:	4413      	add	r3, r2
 800ac66:	7819      	ldrb	r1, [r3, #0]
 800ac68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac6a:	69fb      	ldr	r3, [r7, #28]
 800ac6c:	4413      	add	r3, r2
 800ac6e:	3334      	adds	r3, #52	; 0x34
 800ac70:	460a      	mov	r2, r1
 800ac72:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ac74:	68ba      	ldr	r2, [r7, #8]
 800ac76:	69fb      	ldr	r3, [r7, #28]
 800ac78:	4413      	add	r3, r2
 800ac7a:	781b      	ldrb	r3, [r3, #0]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d006      	beq.n	800ac8e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ac80:	69fb      	ldr	r3, [r7, #28]
 800ac82:	3301      	adds	r3, #1
 800ac84:	61fb      	str	r3, [r7, #28]
 800ac86:	69fb      	ldr	r3, [r7, #28]
 800ac88:	2b0f      	cmp	r3, #15
 800ac8a:	d9e9      	bls.n	800ac60 <prvInitialiseNewTask+0x54>
 800ac8c:	e000      	b.n	800ac90 <prvInitialiseNewTask+0x84>
			{
				break;
 800ac8e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ac90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac92:	2200      	movs	r2, #0
 800ac94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ac98:	e003      	b.n	800aca2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ac9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca4:	2b06      	cmp	r3, #6
 800aca6:	d901      	bls.n	800acac <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800aca8:	2306      	movs	r3, #6
 800acaa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800acac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acb0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800acb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acb6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800acb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acba:	2200      	movs	r2, #0
 800acbc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800acbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acc0:	3304      	adds	r3, #4
 800acc2:	4618      	mov	r0, r3
 800acc4:	f7ff f928 	bl	8009f18 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800acc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acca:	3318      	adds	r3, #24
 800accc:	4618      	mov	r0, r3
 800acce:	f7ff f923 	bl	8009f18 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800acd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acd6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acda:	f1c3 0207 	rsb	r2, r3, #7
 800acde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ace0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ace2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ace4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ace6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ace8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acea:	2200      	movs	r2, #0
 800acec:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800acf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acf2:	2200      	movs	r2, #0
 800acf4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800acf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acfa:	334c      	adds	r3, #76	; 0x4c
 800acfc:	2260      	movs	r2, #96	; 0x60
 800acfe:	2100      	movs	r1, #0
 800ad00:	4618      	mov	r0, r3
 800ad02:	f001 fd5f 	bl	800c7c4 <memset>
 800ad06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad08:	4a0c      	ldr	r2, [pc, #48]	; (800ad3c <prvInitialiseNewTask+0x130>)
 800ad0a:	651a      	str	r2, [r3, #80]	; 0x50
 800ad0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad0e:	4a0c      	ldr	r2, [pc, #48]	; (800ad40 <prvInitialiseNewTask+0x134>)
 800ad10:	655a      	str	r2, [r3, #84]	; 0x54
 800ad12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad14:	4a0b      	ldr	r2, [pc, #44]	; (800ad44 <prvInitialiseNewTask+0x138>)
 800ad16:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ad18:	683a      	ldr	r2, [r7, #0]
 800ad1a:	68f9      	ldr	r1, [r7, #12]
 800ad1c:	69b8      	ldr	r0, [r7, #24]
 800ad1e:	f000 fdcd 	bl	800b8bc <pxPortInitialiseStack>
 800ad22:	4602      	mov	r2, r0
 800ad24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad26:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ad28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d002      	beq.n	800ad34 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ad2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad32:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad34:	bf00      	nop
 800ad36:	3720      	adds	r7, #32
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}
 800ad3c:	0800cb1c 	.word	0x0800cb1c
 800ad40:	0800cb3c 	.word	0x0800cb3c
 800ad44:	0800cafc 	.word	0x0800cafc

0800ad48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b082      	sub	sp, #8
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ad50:	f000 fee0 	bl	800bb14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ad54:	4b2a      	ldr	r3, [pc, #168]	; (800ae00 <prvAddNewTaskToReadyList+0xb8>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	3301      	adds	r3, #1
 800ad5a:	4a29      	ldr	r2, [pc, #164]	; (800ae00 <prvAddNewTaskToReadyList+0xb8>)
 800ad5c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ad5e:	4b29      	ldr	r3, [pc, #164]	; (800ae04 <prvAddNewTaskToReadyList+0xbc>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d109      	bne.n	800ad7a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ad66:	4a27      	ldr	r2, [pc, #156]	; (800ae04 <prvAddNewTaskToReadyList+0xbc>)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ad6c:	4b24      	ldr	r3, [pc, #144]	; (800ae00 <prvAddNewTaskToReadyList+0xb8>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	2b01      	cmp	r3, #1
 800ad72:	d110      	bne.n	800ad96 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ad74:	f000 fbd6 	bl	800b524 <prvInitialiseTaskLists>
 800ad78:	e00d      	b.n	800ad96 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ad7a:	4b23      	ldr	r3, [pc, #140]	; (800ae08 <prvAddNewTaskToReadyList+0xc0>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d109      	bne.n	800ad96 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ad82:	4b20      	ldr	r3, [pc, #128]	; (800ae04 <prvAddNewTaskToReadyList+0xbc>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad8c:	429a      	cmp	r2, r3
 800ad8e:	d802      	bhi.n	800ad96 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ad90:	4a1c      	ldr	r2, [pc, #112]	; (800ae04 <prvAddNewTaskToReadyList+0xbc>)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ad96:	4b1d      	ldr	r3, [pc, #116]	; (800ae0c <prvAddNewTaskToReadyList+0xc4>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	3301      	adds	r3, #1
 800ad9c:	4a1b      	ldr	r2, [pc, #108]	; (800ae0c <prvAddNewTaskToReadyList+0xc4>)
 800ad9e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ada4:	2201      	movs	r2, #1
 800ada6:	409a      	lsls	r2, r3
 800ada8:	4b19      	ldr	r3, [pc, #100]	; (800ae10 <prvAddNewTaskToReadyList+0xc8>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	4313      	orrs	r3, r2
 800adae:	4a18      	ldr	r2, [pc, #96]	; (800ae10 <prvAddNewTaskToReadyList+0xc8>)
 800adb0:	6013      	str	r3, [r2, #0]
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adb6:	4613      	mov	r3, r2
 800adb8:	009b      	lsls	r3, r3, #2
 800adba:	4413      	add	r3, r2
 800adbc:	009b      	lsls	r3, r3, #2
 800adbe:	4a15      	ldr	r2, [pc, #84]	; (800ae14 <prvAddNewTaskToReadyList+0xcc>)
 800adc0:	441a      	add	r2, r3
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	3304      	adds	r3, #4
 800adc6:	4619      	mov	r1, r3
 800adc8:	4610      	mov	r0, r2
 800adca:	f7ff f8b2 	bl	8009f32 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800adce:	f000 fed1 	bl	800bb74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800add2:	4b0d      	ldr	r3, [pc, #52]	; (800ae08 <prvAddNewTaskToReadyList+0xc0>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d00e      	beq.n	800adf8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800adda:	4b0a      	ldr	r3, [pc, #40]	; (800ae04 <prvAddNewTaskToReadyList+0xbc>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ade4:	429a      	cmp	r2, r3
 800ade6:	d207      	bcs.n	800adf8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ade8:	4b0b      	ldr	r3, [pc, #44]	; (800ae18 <prvAddNewTaskToReadyList+0xd0>)
 800adea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adee:	601a      	str	r2, [r3, #0]
 800adf0:	f3bf 8f4f 	dsb	sy
 800adf4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800adf8:	bf00      	nop
 800adfa:	3708      	adds	r7, #8
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}
 800ae00:	20000468 	.word	0x20000468
 800ae04:	20000368 	.word	0x20000368
 800ae08:	20000474 	.word	0x20000474
 800ae0c:	20000484 	.word	0x20000484
 800ae10:	20000470 	.word	0x20000470
 800ae14:	2000036c 	.word	0x2000036c
 800ae18:	e000ed04 	.word	0xe000ed04

0800ae1c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b084      	sub	sp, #16
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ae24:	2300      	movs	r3, #0
 800ae26:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d017      	beq.n	800ae5e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ae2e:	4b13      	ldr	r3, [pc, #76]	; (800ae7c <vTaskDelay+0x60>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d00a      	beq.n	800ae4c <vTaskDelay+0x30>
	__asm volatile
 800ae36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae3a:	f383 8811 	msr	BASEPRI, r3
 800ae3e:	f3bf 8f6f 	isb	sy
 800ae42:	f3bf 8f4f 	dsb	sy
 800ae46:	60bb      	str	r3, [r7, #8]
}
 800ae48:	bf00      	nop
 800ae4a:	e7fe      	b.n	800ae4a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ae4c:	f000 f884 	bl	800af58 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ae50:	2100      	movs	r1, #0
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f000 fccc 	bl	800b7f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ae58:	f000 f88c 	bl	800af74 <xTaskResumeAll>
 800ae5c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d107      	bne.n	800ae74 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ae64:	4b06      	ldr	r3, [pc, #24]	; (800ae80 <vTaskDelay+0x64>)
 800ae66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae6a:	601a      	str	r2, [r3, #0]
 800ae6c:	f3bf 8f4f 	dsb	sy
 800ae70:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ae74:	bf00      	nop
 800ae76:	3710      	adds	r7, #16
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}
 800ae7c:	20000490 	.word	0x20000490
 800ae80:	e000ed04 	.word	0xe000ed04

0800ae84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b08a      	sub	sp, #40	; 0x28
 800ae88:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ae92:	463a      	mov	r2, r7
 800ae94:	1d39      	adds	r1, r7, #4
 800ae96:	f107 0308 	add.w	r3, r7, #8
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	f7f5 fb14 	bl	80004c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800aea0:	6839      	ldr	r1, [r7, #0]
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	68ba      	ldr	r2, [r7, #8]
 800aea6:	9202      	str	r2, [sp, #8]
 800aea8:	9301      	str	r3, [sp, #4]
 800aeaa:	2300      	movs	r3, #0
 800aeac:	9300      	str	r3, [sp, #0]
 800aeae:	2300      	movs	r3, #0
 800aeb0:	460a      	mov	r2, r1
 800aeb2:	4921      	ldr	r1, [pc, #132]	; (800af38 <vTaskStartScheduler+0xb4>)
 800aeb4:	4821      	ldr	r0, [pc, #132]	; (800af3c <vTaskStartScheduler+0xb8>)
 800aeb6:	f7ff fe07 	bl	800aac8 <xTaskCreateStatic>
 800aeba:	4603      	mov	r3, r0
 800aebc:	4a20      	ldr	r2, [pc, #128]	; (800af40 <vTaskStartScheduler+0xbc>)
 800aebe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800aec0:	4b1f      	ldr	r3, [pc, #124]	; (800af40 <vTaskStartScheduler+0xbc>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d002      	beq.n	800aece <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800aec8:	2301      	movs	r3, #1
 800aeca:	617b      	str	r3, [r7, #20]
 800aecc:	e001      	b.n	800aed2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800aece:	2300      	movs	r3, #0
 800aed0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800aed2:	697b      	ldr	r3, [r7, #20]
 800aed4:	2b01      	cmp	r3, #1
 800aed6:	d11b      	bne.n	800af10 <vTaskStartScheduler+0x8c>
	__asm volatile
 800aed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aedc:	f383 8811 	msr	BASEPRI, r3
 800aee0:	f3bf 8f6f 	isb	sy
 800aee4:	f3bf 8f4f 	dsb	sy
 800aee8:	613b      	str	r3, [r7, #16]
}
 800aeea:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800aeec:	4b15      	ldr	r3, [pc, #84]	; (800af44 <vTaskStartScheduler+0xc0>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	334c      	adds	r3, #76	; 0x4c
 800aef2:	4a15      	ldr	r2, [pc, #84]	; (800af48 <vTaskStartScheduler+0xc4>)
 800aef4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800aef6:	4b15      	ldr	r3, [pc, #84]	; (800af4c <vTaskStartScheduler+0xc8>)
 800aef8:	f04f 32ff 	mov.w	r2, #4294967295
 800aefc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800aefe:	4b14      	ldr	r3, [pc, #80]	; (800af50 <vTaskStartScheduler+0xcc>)
 800af00:	2201      	movs	r2, #1
 800af02:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800af04:	4b13      	ldr	r3, [pc, #76]	; (800af54 <vTaskStartScheduler+0xd0>)
 800af06:	2200      	movs	r2, #0
 800af08:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800af0a:	f000 fd61 	bl	800b9d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800af0e:	e00e      	b.n	800af2e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af16:	d10a      	bne.n	800af2e <vTaskStartScheduler+0xaa>
	__asm volatile
 800af18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af1c:	f383 8811 	msr	BASEPRI, r3
 800af20:	f3bf 8f6f 	isb	sy
 800af24:	f3bf 8f4f 	dsb	sy
 800af28:	60fb      	str	r3, [r7, #12]
}
 800af2a:	bf00      	nop
 800af2c:	e7fe      	b.n	800af2c <vTaskStartScheduler+0xa8>
}
 800af2e:	bf00      	nop
 800af30:	3718      	adds	r7, #24
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}
 800af36:	bf00      	nop
 800af38:	0800cad4 	.word	0x0800cad4
 800af3c:	0800b4f5 	.word	0x0800b4f5
 800af40:	2000048c 	.word	0x2000048c
 800af44:	20000368 	.word	0x20000368
 800af48:	20000030 	.word	0x20000030
 800af4c:	20000488 	.word	0x20000488
 800af50:	20000474 	.word	0x20000474
 800af54:	2000046c 	.word	0x2000046c

0800af58 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800af58:	b480      	push	{r7}
 800af5a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800af5c:	4b04      	ldr	r3, [pc, #16]	; (800af70 <vTaskSuspendAll+0x18>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	3301      	adds	r3, #1
 800af62:	4a03      	ldr	r2, [pc, #12]	; (800af70 <vTaskSuspendAll+0x18>)
 800af64:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800af66:	bf00      	nop
 800af68:	46bd      	mov	sp, r7
 800af6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6e:	4770      	bx	lr
 800af70:	20000490 	.word	0x20000490

0800af74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b084      	sub	sp, #16
 800af78:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800af7a:	2300      	movs	r3, #0
 800af7c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800af7e:	2300      	movs	r3, #0
 800af80:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800af82:	4b41      	ldr	r3, [pc, #260]	; (800b088 <xTaskResumeAll+0x114>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d10a      	bne.n	800afa0 <xTaskResumeAll+0x2c>
	__asm volatile
 800af8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af8e:	f383 8811 	msr	BASEPRI, r3
 800af92:	f3bf 8f6f 	isb	sy
 800af96:	f3bf 8f4f 	dsb	sy
 800af9a:	603b      	str	r3, [r7, #0]
}
 800af9c:	bf00      	nop
 800af9e:	e7fe      	b.n	800af9e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800afa0:	f000 fdb8 	bl	800bb14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800afa4:	4b38      	ldr	r3, [pc, #224]	; (800b088 <xTaskResumeAll+0x114>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	3b01      	subs	r3, #1
 800afaa:	4a37      	ldr	r2, [pc, #220]	; (800b088 <xTaskResumeAll+0x114>)
 800afac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800afae:	4b36      	ldr	r3, [pc, #216]	; (800b088 <xTaskResumeAll+0x114>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d161      	bne.n	800b07a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800afb6:	4b35      	ldr	r3, [pc, #212]	; (800b08c <xTaskResumeAll+0x118>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d05d      	beq.n	800b07a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800afbe:	e02e      	b.n	800b01e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afc0:	4b33      	ldr	r3, [pc, #204]	; (800b090 <xTaskResumeAll+0x11c>)
 800afc2:	68db      	ldr	r3, [r3, #12]
 800afc4:	68db      	ldr	r3, [r3, #12]
 800afc6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	3318      	adds	r3, #24
 800afcc:	4618      	mov	r0, r3
 800afce:	f7ff f80d 	bl	8009fec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	3304      	adds	r3, #4
 800afd6:	4618      	mov	r0, r3
 800afd8:	f7ff f808 	bl	8009fec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afe0:	2201      	movs	r2, #1
 800afe2:	409a      	lsls	r2, r3
 800afe4:	4b2b      	ldr	r3, [pc, #172]	; (800b094 <xTaskResumeAll+0x120>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	4313      	orrs	r3, r2
 800afea:	4a2a      	ldr	r2, [pc, #168]	; (800b094 <xTaskResumeAll+0x120>)
 800afec:	6013      	str	r3, [r2, #0]
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aff2:	4613      	mov	r3, r2
 800aff4:	009b      	lsls	r3, r3, #2
 800aff6:	4413      	add	r3, r2
 800aff8:	009b      	lsls	r3, r3, #2
 800affa:	4a27      	ldr	r2, [pc, #156]	; (800b098 <xTaskResumeAll+0x124>)
 800affc:	441a      	add	r2, r3
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	3304      	adds	r3, #4
 800b002:	4619      	mov	r1, r3
 800b004:	4610      	mov	r0, r2
 800b006:	f7fe ff94 	bl	8009f32 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b00e:	4b23      	ldr	r3, [pc, #140]	; (800b09c <xTaskResumeAll+0x128>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b014:	429a      	cmp	r2, r3
 800b016:	d302      	bcc.n	800b01e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b018:	4b21      	ldr	r3, [pc, #132]	; (800b0a0 <xTaskResumeAll+0x12c>)
 800b01a:	2201      	movs	r2, #1
 800b01c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b01e:	4b1c      	ldr	r3, [pc, #112]	; (800b090 <xTaskResumeAll+0x11c>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d1cc      	bne.n	800afc0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d001      	beq.n	800b030 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b02c:	f000 fb1c 	bl	800b668 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b030:	4b1c      	ldr	r3, [pc, #112]	; (800b0a4 <xTaskResumeAll+0x130>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d010      	beq.n	800b05e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b03c:	f000 f836 	bl	800b0ac <xTaskIncrementTick>
 800b040:	4603      	mov	r3, r0
 800b042:	2b00      	cmp	r3, #0
 800b044:	d002      	beq.n	800b04c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b046:	4b16      	ldr	r3, [pc, #88]	; (800b0a0 <xTaskResumeAll+0x12c>)
 800b048:	2201      	movs	r2, #1
 800b04a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	3b01      	subs	r3, #1
 800b050:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d1f1      	bne.n	800b03c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800b058:	4b12      	ldr	r3, [pc, #72]	; (800b0a4 <xTaskResumeAll+0x130>)
 800b05a:	2200      	movs	r2, #0
 800b05c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b05e:	4b10      	ldr	r3, [pc, #64]	; (800b0a0 <xTaskResumeAll+0x12c>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d009      	beq.n	800b07a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b066:	2301      	movs	r3, #1
 800b068:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b06a:	4b0f      	ldr	r3, [pc, #60]	; (800b0a8 <xTaskResumeAll+0x134>)
 800b06c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b070:	601a      	str	r2, [r3, #0]
 800b072:	f3bf 8f4f 	dsb	sy
 800b076:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b07a:	f000 fd7b 	bl	800bb74 <vPortExitCritical>

	return xAlreadyYielded;
 800b07e:	68bb      	ldr	r3, [r7, #8]
}
 800b080:	4618      	mov	r0, r3
 800b082:	3710      	adds	r7, #16
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}
 800b088:	20000490 	.word	0x20000490
 800b08c:	20000468 	.word	0x20000468
 800b090:	20000428 	.word	0x20000428
 800b094:	20000470 	.word	0x20000470
 800b098:	2000036c 	.word	0x2000036c
 800b09c:	20000368 	.word	0x20000368
 800b0a0:	2000047c 	.word	0x2000047c
 800b0a4:	20000478 	.word	0x20000478
 800b0a8:	e000ed04 	.word	0xe000ed04

0800b0ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b086      	sub	sp, #24
 800b0b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b0b6:	4b4e      	ldr	r3, [pc, #312]	; (800b1f0 <xTaskIncrementTick+0x144>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	f040 808e 	bne.w	800b1dc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b0c0:	4b4c      	ldr	r3, [pc, #304]	; (800b1f4 <xTaskIncrementTick+0x148>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	3301      	adds	r3, #1
 800b0c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b0c8:	4a4a      	ldr	r2, [pc, #296]	; (800b1f4 <xTaskIncrementTick+0x148>)
 800b0ca:	693b      	ldr	r3, [r7, #16]
 800b0cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b0ce:	693b      	ldr	r3, [r7, #16]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d120      	bne.n	800b116 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b0d4:	4b48      	ldr	r3, [pc, #288]	; (800b1f8 <xTaskIncrementTick+0x14c>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d00a      	beq.n	800b0f4 <xTaskIncrementTick+0x48>
	__asm volatile
 800b0de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0e2:	f383 8811 	msr	BASEPRI, r3
 800b0e6:	f3bf 8f6f 	isb	sy
 800b0ea:	f3bf 8f4f 	dsb	sy
 800b0ee:	603b      	str	r3, [r7, #0]
}
 800b0f0:	bf00      	nop
 800b0f2:	e7fe      	b.n	800b0f2 <xTaskIncrementTick+0x46>
 800b0f4:	4b40      	ldr	r3, [pc, #256]	; (800b1f8 <xTaskIncrementTick+0x14c>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	60fb      	str	r3, [r7, #12]
 800b0fa:	4b40      	ldr	r3, [pc, #256]	; (800b1fc <xTaskIncrementTick+0x150>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	4a3e      	ldr	r2, [pc, #248]	; (800b1f8 <xTaskIncrementTick+0x14c>)
 800b100:	6013      	str	r3, [r2, #0]
 800b102:	4a3e      	ldr	r2, [pc, #248]	; (800b1fc <xTaskIncrementTick+0x150>)
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	6013      	str	r3, [r2, #0]
 800b108:	4b3d      	ldr	r3, [pc, #244]	; (800b200 <xTaskIncrementTick+0x154>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	3301      	adds	r3, #1
 800b10e:	4a3c      	ldr	r2, [pc, #240]	; (800b200 <xTaskIncrementTick+0x154>)
 800b110:	6013      	str	r3, [r2, #0]
 800b112:	f000 faa9 	bl	800b668 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b116:	4b3b      	ldr	r3, [pc, #236]	; (800b204 <xTaskIncrementTick+0x158>)
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	693a      	ldr	r2, [r7, #16]
 800b11c:	429a      	cmp	r2, r3
 800b11e:	d348      	bcc.n	800b1b2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b120:	4b35      	ldr	r3, [pc, #212]	; (800b1f8 <xTaskIncrementTick+0x14c>)
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d104      	bne.n	800b134 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b12a:	4b36      	ldr	r3, [pc, #216]	; (800b204 <xTaskIncrementTick+0x158>)
 800b12c:	f04f 32ff 	mov.w	r2, #4294967295
 800b130:	601a      	str	r2, [r3, #0]
					break;
 800b132:	e03e      	b.n	800b1b2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b134:	4b30      	ldr	r3, [pc, #192]	; (800b1f8 <xTaskIncrementTick+0x14c>)
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	68db      	ldr	r3, [r3, #12]
 800b13a:	68db      	ldr	r3, [r3, #12]
 800b13c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	685b      	ldr	r3, [r3, #4]
 800b142:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b144:	693a      	ldr	r2, [r7, #16]
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	429a      	cmp	r2, r3
 800b14a:	d203      	bcs.n	800b154 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b14c:	4a2d      	ldr	r2, [pc, #180]	; (800b204 <xTaskIncrementTick+0x158>)
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b152:	e02e      	b.n	800b1b2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b154:	68bb      	ldr	r3, [r7, #8]
 800b156:	3304      	adds	r3, #4
 800b158:	4618      	mov	r0, r3
 800b15a:	f7fe ff47 	bl	8009fec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b15e:	68bb      	ldr	r3, [r7, #8]
 800b160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b162:	2b00      	cmp	r3, #0
 800b164:	d004      	beq.n	800b170 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	3318      	adds	r3, #24
 800b16a:	4618      	mov	r0, r3
 800b16c:	f7fe ff3e 	bl	8009fec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b174:	2201      	movs	r2, #1
 800b176:	409a      	lsls	r2, r3
 800b178:	4b23      	ldr	r3, [pc, #140]	; (800b208 <xTaskIncrementTick+0x15c>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	4313      	orrs	r3, r2
 800b17e:	4a22      	ldr	r2, [pc, #136]	; (800b208 <xTaskIncrementTick+0x15c>)
 800b180:	6013      	str	r3, [r2, #0]
 800b182:	68bb      	ldr	r3, [r7, #8]
 800b184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b186:	4613      	mov	r3, r2
 800b188:	009b      	lsls	r3, r3, #2
 800b18a:	4413      	add	r3, r2
 800b18c:	009b      	lsls	r3, r3, #2
 800b18e:	4a1f      	ldr	r2, [pc, #124]	; (800b20c <xTaskIncrementTick+0x160>)
 800b190:	441a      	add	r2, r3
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	3304      	adds	r3, #4
 800b196:	4619      	mov	r1, r3
 800b198:	4610      	mov	r0, r2
 800b19a:	f7fe feca 	bl	8009f32 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1a2:	4b1b      	ldr	r3, [pc, #108]	; (800b210 <xTaskIncrementTick+0x164>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1a8:	429a      	cmp	r2, r3
 800b1aa:	d3b9      	bcc.n	800b120 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b1b0:	e7b6      	b.n	800b120 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b1b2:	4b17      	ldr	r3, [pc, #92]	; (800b210 <xTaskIncrementTick+0x164>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1b8:	4914      	ldr	r1, [pc, #80]	; (800b20c <xTaskIncrementTick+0x160>)
 800b1ba:	4613      	mov	r3, r2
 800b1bc:	009b      	lsls	r3, r3, #2
 800b1be:	4413      	add	r3, r2
 800b1c0:	009b      	lsls	r3, r3, #2
 800b1c2:	440b      	add	r3, r1
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	2b01      	cmp	r3, #1
 800b1c8:	d901      	bls.n	800b1ce <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800b1ca:	2301      	movs	r3, #1
 800b1cc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b1ce:	4b11      	ldr	r3, [pc, #68]	; (800b214 <xTaskIncrementTick+0x168>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d007      	beq.n	800b1e6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800b1d6:	2301      	movs	r3, #1
 800b1d8:	617b      	str	r3, [r7, #20]
 800b1da:	e004      	b.n	800b1e6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b1dc:	4b0e      	ldr	r3, [pc, #56]	; (800b218 <xTaskIncrementTick+0x16c>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	3301      	adds	r3, #1
 800b1e2:	4a0d      	ldr	r2, [pc, #52]	; (800b218 <xTaskIncrementTick+0x16c>)
 800b1e4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b1e6:	697b      	ldr	r3, [r7, #20]
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3718      	adds	r7, #24
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}
 800b1f0:	20000490 	.word	0x20000490
 800b1f4:	2000046c 	.word	0x2000046c
 800b1f8:	20000420 	.word	0x20000420
 800b1fc:	20000424 	.word	0x20000424
 800b200:	20000480 	.word	0x20000480
 800b204:	20000488 	.word	0x20000488
 800b208:	20000470 	.word	0x20000470
 800b20c:	2000036c 	.word	0x2000036c
 800b210:	20000368 	.word	0x20000368
 800b214:	2000047c 	.word	0x2000047c
 800b218:	20000478 	.word	0x20000478

0800b21c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b21c:	b480      	push	{r7}
 800b21e:	b087      	sub	sp, #28
 800b220:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b222:	4b29      	ldr	r3, [pc, #164]	; (800b2c8 <vTaskSwitchContext+0xac>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d003      	beq.n	800b232 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b22a:	4b28      	ldr	r3, [pc, #160]	; (800b2cc <vTaskSwitchContext+0xb0>)
 800b22c:	2201      	movs	r2, #1
 800b22e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b230:	e044      	b.n	800b2bc <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800b232:	4b26      	ldr	r3, [pc, #152]	; (800b2cc <vTaskSwitchContext+0xb0>)
 800b234:	2200      	movs	r2, #0
 800b236:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b238:	4b25      	ldr	r3, [pc, #148]	; (800b2d0 <vTaskSwitchContext+0xb4>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	fab3 f383 	clz	r3, r3
 800b244:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b246:	7afb      	ldrb	r3, [r7, #11]
 800b248:	f1c3 031f 	rsb	r3, r3, #31
 800b24c:	617b      	str	r3, [r7, #20]
 800b24e:	4921      	ldr	r1, [pc, #132]	; (800b2d4 <vTaskSwitchContext+0xb8>)
 800b250:	697a      	ldr	r2, [r7, #20]
 800b252:	4613      	mov	r3, r2
 800b254:	009b      	lsls	r3, r3, #2
 800b256:	4413      	add	r3, r2
 800b258:	009b      	lsls	r3, r3, #2
 800b25a:	440b      	add	r3, r1
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d10a      	bne.n	800b278 <vTaskSwitchContext+0x5c>
	__asm volatile
 800b262:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b266:	f383 8811 	msr	BASEPRI, r3
 800b26a:	f3bf 8f6f 	isb	sy
 800b26e:	f3bf 8f4f 	dsb	sy
 800b272:	607b      	str	r3, [r7, #4]
}
 800b274:	bf00      	nop
 800b276:	e7fe      	b.n	800b276 <vTaskSwitchContext+0x5a>
 800b278:	697a      	ldr	r2, [r7, #20]
 800b27a:	4613      	mov	r3, r2
 800b27c:	009b      	lsls	r3, r3, #2
 800b27e:	4413      	add	r3, r2
 800b280:	009b      	lsls	r3, r3, #2
 800b282:	4a14      	ldr	r2, [pc, #80]	; (800b2d4 <vTaskSwitchContext+0xb8>)
 800b284:	4413      	add	r3, r2
 800b286:	613b      	str	r3, [r7, #16]
 800b288:	693b      	ldr	r3, [r7, #16]
 800b28a:	685b      	ldr	r3, [r3, #4]
 800b28c:	685a      	ldr	r2, [r3, #4]
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	605a      	str	r2, [r3, #4]
 800b292:	693b      	ldr	r3, [r7, #16]
 800b294:	685a      	ldr	r2, [r3, #4]
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	3308      	adds	r3, #8
 800b29a:	429a      	cmp	r2, r3
 800b29c:	d104      	bne.n	800b2a8 <vTaskSwitchContext+0x8c>
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	685b      	ldr	r3, [r3, #4]
 800b2a2:	685a      	ldr	r2, [r3, #4]
 800b2a4:	693b      	ldr	r3, [r7, #16]
 800b2a6:	605a      	str	r2, [r3, #4]
 800b2a8:	693b      	ldr	r3, [r7, #16]
 800b2aa:	685b      	ldr	r3, [r3, #4]
 800b2ac:	68db      	ldr	r3, [r3, #12]
 800b2ae:	4a0a      	ldr	r2, [pc, #40]	; (800b2d8 <vTaskSwitchContext+0xbc>)
 800b2b0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b2b2:	4b09      	ldr	r3, [pc, #36]	; (800b2d8 <vTaskSwitchContext+0xbc>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	334c      	adds	r3, #76	; 0x4c
 800b2b8:	4a08      	ldr	r2, [pc, #32]	; (800b2dc <vTaskSwitchContext+0xc0>)
 800b2ba:	6013      	str	r3, [r2, #0]
}
 800b2bc:	bf00      	nop
 800b2be:	371c      	adds	r7, #28
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c6:	4770      	bx	lr
 800b2c8:	20000490 	.word	0x20000490
 800b2cc:	2000047c 	.word	0x2000047c
 800b2d0:	20000470 	.word	0x20000470
 800b2d4:	2000036c 	.word	0x2000036c
 800b2d8:	20000368 	.word	0x20000368
 800b2dc:	20000030 	.word	0x20000030

0800b2e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b084      	sub	sp, #16
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
 800b2e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d10a      	bne.n	800b306 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2f4:	f383 8811 	msr	BASEPRI, r3
 800b2f8:	f3bf 8f6f 	isb	sy
 800b2fc:	f3bf 8f4f 	dsb	sy
 800b300:	60fb      	str	r3, [r7, #12]
}
 800b302:	bf00      	nop
 800b304:	e7fe      	b.n	800b304 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b306:	4b07      	ldr	r3, [pc, #28]	; (800b324 <vTaskPlaceOnEventList+0x44>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	3318      	adds	r3, #24
 800b30c:	4619      	mov	r1, r3
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f7fe fe33 	bl	8009f7a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b314:	2101      	movs	r1, #1
 800b316:	6838      	ldr	r0, [r7, #0]
 800b318:	f000 fa6a 	bl	800b7f0 <prvAddCurrentTaskToDelayedList>
}
 800b31c:	bf00      	nop
 800b31e:	3710      	adds	r7, #16
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}
 800b324:	20000368 	.word	0x20000368

0800b328 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b086      	sub	sp, #24
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	68db      	ldr	r3, [r3, #12]
 800b334:	68db      	ldr	r3, [r3, #12]
 800b336:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b338:	693b      	ldr	r3, [r7, #16]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d10a      	bne.n	800b354 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b342:	f383 8811 	msr	BASEPRI, r3
 800b346:	f3bf 8f6f 	isb	sy
 800b34a:	f3bf 8f4f 	dsb	sy
 800b34e:	60fb      	str	r3, [r7, #12]
}
 800b350:	bf00      	nop
 800b352:	e7fe      	b.n	800b352 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b354:	693b      	ldr	r3, [r7, #16]
 800b356:	3318      	adds	r3, #24
 800b358:	4618      	mov	r0, r3
 800b35a:	f7fe fe47 	bl	8009fec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b35e:	4b1d      	ldr	r3, [pc, #116]	; (800b3d4 <xTaskRemoveFromEventList+0xac>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d11c      	bne.n	800b3a0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b366:	693b      	ldr	r3, [r7, #16]
 800b368:	3304      	adds	r3, #4
 800b36a:	4618      	mov	r0, r3
 800b36c:	f7fe fe3e 	bl	8009fec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b370:	693b      	ldr	r3, [r7, #16]
 800b372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b374:	2201      	movs	r2, #1
 800b376:	409a      	lsls	r2, r3
 800b378:	4b17      	ldr	r3, [pc, #92]	; (800b3d8 <xTaskRemoveFromEventList+0xb0>)
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	4313      	orrs	r3, r2
 800b37e:	4a16      	ldr	r2, [pc, #88]	; (800b3d8 <xTaskRemoveFromEventList+0xb0>)
 800b380:	6013      	str	r3, [r2, #0]
 800b382:	693b      	ldr	r3, [r7, #16]
 800b384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b386:	4613      	mov	r3, r2
 800b388:	009b      	lsls	r3, r3, #2
 800b38a:	4413      	add	r3, r2
 800b38c:	009b      	lsls	r3, r3, #2
 800b38e:	4a13      	ldr	r2, [pc, #76]	; (800b3dc <xTaskRemoveFromEventList+0xb4>)
 800b390:	441a      	add	r2, r3
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	3304      	adds	r3, #4
 800b396:	4619      	mov	r1, r3
 800b398:	4610      	mov	r0, r2
 800b39a:	f7fe fdca 	bl	8009f32 <vListInsertEnd>
 800b39e:	e005      	b.n	800b3ac <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	3318      	adds	r3, #24
 800b3a4:	4619      	mov	r1, r3
 800b3a6:	480e      	ldr	r0, [pc, #56]	; (800b3e0 <xTaskRemoveFromEventList+0xb8>)
 800b3a8:	f7fe fdc3 	bl	8009f32 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b3ac:	693b      	ldr	r3, [r7, #16]
 800b3ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3b0:	4b0c      	ldr	r3, [pc, #48]	; (800b3e4 <xTaskRemoveFromEventList+0xbc>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3b6:	429a      	cmp	r2, r3
 800b3b8:	d905      	bls.n	800b3c6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b3be:	4b0a      	ldr	r3, [pc, #40]	; (800b3e8 <xTaskRemoveFromEventList+0xc0>)
 800b3c0:	2201      	movs	r2, #1
 800b3c2:	601a      	str	r2, [r3, #0]
 800b3c4:	e001      	b.n	800b3ca <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b3ca:	697b      	ldr	r3, [r7, #20]
}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	3718      	adds	r7, #24
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}
 800b3d4:	20000490 	.word	0x20000490
 800b3d8:	20000470 	.word	0x20000470
 800b3dc:	2000036c 	.word	0x2000036c
 800b3e0:	20000428 	.word	0x20000428
 800b3e4:	20000368 	.word	0x20000368
 800b3e8:	2000047c 	.word	0x2000047c

0800b3ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b083      	sub	sp, #12
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b3f4:	4b06      	ldr	r3, [pc, #24]	; (800b410 <vTaskInternalSetTimeOutState+0x24>)
 800b3f6:	681a      	ldr	r2, [r3, #0]
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b3fc:	4b05      	ldr	r3, [pc, #20]	; (800b414 <vTaskInternalSetTimeOutState+0x28>)
 800b3fe:	681a      	ldr	r2, [r3, #0]
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	605a      	str	r2, [r3, #4]
}
 800b404:	bf00      	nop
 800b406:	370c      	adds	r7, #12
 800b408:	46bd      	mov	sp, r7
 800b40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40e:	4770      	bx	lr
 800b410:	20000480 	.word	0x20000480
 800b414:	2000046c 	.word	0x2000046c

0800b418 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b088      	sub	sp, #32
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d10a      	bne.n	800b43e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b42c:	f383 8811 	msr	BASEPRI, r3
 800b430:	f3bf 8f6f 	isb	sy
 800b434:	f3bf 8f4f 	dsb	sy
 800b438:	613b      	str	r3, [r7, #16]
}
 800b43a:	bf00      	nop
 800b43c:	e7fe      	b.n	800b43c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d10a      	bne.n	800b45a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b448:	f383 8811 	msr	BASEPRI, r3
 800b44c:	f3bf 8f6f 	isb	sy
 800b450:	f3bf 8f4f 	dsb	sy
 800b454:	60fb      	str	r3, [r7, #12]
}
 800b456:	bf00      	nop
 800b458:	e7fe      	b.n	800b458 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b45a:	f000 fb5b 	bl	800bb14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b45e:	4b1d      	ldr	r3, [pc, #116]	; (800b4d4 <xTaskCheckForTimeOut+0xbc>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	685b      	ldr	r3, [r3, #4]
 800b468:	69ba      	ldr	r2, [r7, #24]
 800b46a:	1ad3      	subs	r3, r2, r3
 800b46c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b476:	d102      	bne.n	800b47e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b478:	2300      	movs	r3, #0
 800b47a:	61fb      	str	r3, [r7, #28]
 800b47c:	e023      	b.n	800b4c6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681a      	ldr	r2, [r3, #0]
 800b482:	4b15      	ldr	r3, [pc, #84]	; (800b4d8 <xTaskCheckForTimeOut+0xc0>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	429a      	cmp	r2, r3
 800b488:	d007      	beq.n	800b49a <xTaskCheckForTimeOut+0x82>
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	685b      	ldr	r3, [r3, #4]
 800b48e:	69ba      	ldr	r2, [r7, #24]
 800b490:	429a      	cmp	r2, r3
 800b492:	d302      	bcc.n	800b49a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b494:	2301      	movs	r3, #1
 800b496:	61fb      	str	r3, [r7, #28]
 800b498:	e015      	b.n	800b4c6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	697a      	ldr	r2, [r7, #20]
 800b4a0:	429a      	cmp	r2, r3
 800b4a2:	d20b      	bcs.n	800b4bc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	681a      	ldr	r2, [r3, #0]
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	1ad2      	subs	r2, r2, r3
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f7ff ff9b 	bl	800b3ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	61fb      	str	r3, [r7, #28]
 800b4ba:	e004      	b.n	800b4c6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	2200      	movs	r2, #0
 800b4c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b4c6:	f000 fb55 	bl	800bb74 <vPortExitCritical>

	return xReturn;
 800b4ca:	69fb      	ldr	r3, [r7, #28]
}
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	3720      	adds	r7, #32
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bd80      	pop	{r7, pc}
 800b4d4:	2000046c 	.word	0x2000046c
 800b4d8:	20000480 	.word	0x20000480

0800b4dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b4dc:	b480      	push	{r7}
 800b4de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b4e0:	4b03      	ldr	r3, [pc, #12]	; (800b4f0 <vTaskMissedYield+0x14>)
 800b4e2:	2201      	movs	r2, #1
 800b4e4:	601a      	str	r2, [r3, #0]
}
 800b4e6:	bf00      	nop
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ee:	4770      	bx	lr
 800b4f0:	2000047c 	.word	0x2000047c

0800b4f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b082      	sub	sp, #8
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b4fc:	f000 f852 	bl	800b5a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b500:	4b06      	ldr	r3, [pc, #24]	; (800b51c <prvIdleTask+0x28>)
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	2b01      	cmp	r3, #1
 800b506:	d9f9      	bls.n	800b4fc <prvIdleTask+0x8>
			{
				taskYIELD();
 800b508:	4b05      	ldr	r3, [pc, #20]	; (800b520 <prvIdleTask+0x2c>)
 800b50a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b50e:	601a      	str	r2, [r3, #0]
 800b510:	f3bf 8f4f 	dsb	sy
 800b514:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b518:	e7f0      	b.n	800b4fc <prvIdleTask+0x8>
 800b51a:	bf00      	nop
 800b51c:	2000036c 	.word	0x2000036c
 800b520:	e000ed04 	.word	0xe000ed04

0800b524 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b082      	sub	sp, #8
 800b528:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b52a:	2300      	movs	r3, #0
 800b52c:	607b      	str	r3, [r7, #4]
 800b52e:	e00c      	b.n	800b54a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b530:	687a      	ldr	r2, [r7, #4]
 800b532:	4613      	mov	r3, r2
 800b534:	009b      	lsls	r3, r3, #2
 800b536:	4413      	add	r3, r2
 800b538:	009b      	lsls	r3, r3, #2
 800b53a:	4a12      	ldr	r2, [pc, #72]	; (800b584 <prvInitialiseTaskLists+0x60>)
 800b53c:	4413      	add	r3, r2
 800b53e:	4618      	mov	r0, r3
 800b540:	f7fe fcca 	bl	8009ed8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	3301      	adds	r3, #1
 800b548:	607b      	str	r3, [r7, #4]
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2b06      	cmp	r3, #6
 800b54e:	d9ef      	bls.n	800b530 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b550:	480d      	ldr	r0, [pc, #52]	; (800b588 <prvInitialiseTaskLists+0x64>)
 800b552:	f7fe fcc1 	bl	8009ed8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b556:	480d      	ldr	r0, [pc, #52]	; (800b58c <prvInitialiseTaskLists+0x68>)
 800b558:	f7fe fcbe 	bl	8009ed8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b55c:	480c      	ldr	r0, [pc, #48]	; (800b590 <prvInitialiseTaskLists+0x6c>)
 800b55e:	f7fe fcbb 	bl	8009ed8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b562:	480c      	ldr	r0, [pc, #48]	; (800b594 <prvInitialiseTaskLists+0x70>)
 800b564:	f7fe fcb8 	bl	8009ed8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b568:	480b      	ldr	r0, [pc, #44]	; (800b598 <prvInitialiseTaskLists+0x74>)
 800b56a:	f7fe fcb5 	bl	8009ed8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b56e:	4b0b      	ldr	r3, [pc, #44]	; (800b59c <prvInitialiseTaskLists+0x78>)
 800b570:	4a05      	ldr	r2, [pc, #20]	; (800b588 <prvInitialiseTaskLists+0x64>)
 800b572:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b574:	4b0a      	ldr	r3, [pc, #40]	; (800b5a0 <prvInitialiseTaskLists+0x7c>)
 800b576:	4a05      	ldr	r2, [pc, #20]	; (800b58c <prvInitialiseTaskLists+0x68>)
 800b578:	601a      	str	r2, [r3, #0]
}
 800b57a:	bf00      	nop
 800b57c:	3708      	adds	r7, #8
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}
 800b582:	bf00      	nop
 800b584:	2000036c 	.word	0x2000036c
 800b588:	200003f8 	.word	0x200003f8
 800b58c:	2000040c 	.word	0x2000040c
 800b590:	20000428 	.word	0x20000428
 800b594:	2000043c 	.word	0x2000043c
 800b598:	20000454 	.word	0x20000454
 800b59c:	20000420 	.word	0x20000420
 800b5a0:	20000424 	.word	0x20000424

0800b5a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b082      	sub	sp, #8
 800b5a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b5aa:	e019      	b.n	800b5e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b5ac:	f000 fab2 	bl	800bb14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5b0:	4b10      	ldr	r3, [pc, #64]	; (800b5f4 <prvCheckTasksWaitingTermination+0x50>)
 800b5b2:	68db      	ldr	r3, [r3, #12]
 800b5b4:	68db      	ldr	r3, [r3, #12]
 800b5b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	3304      	adds	r3, #4
 800b5bc:	4618      	mov	r0, r3
 800b5be:	f7fe fd15 	bl	8009fec <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b5c2:	4b0d      	ldr	r3, [pc, #52]	; (800b5f8 <prvCheckTasksWaitingTermination+0x54>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	3b01      	subs	r3, #1
 800b5c8:	4a0b      	ldr	r2, [pc, #44]	; (800b5f8 <prvCheckTasksWaitingTermination+0x54>)
 800b5ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b5cc:	4b0b      	ldr	r3, [pc, #44]	; (800b5fc <prvCheckTasksWaitingTermination+0x58>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	3b01      	subs	r3, #1
 800b5d2:	4a0a      	ldr	r2, [pc, #40]	; (800b5fc <prvCheckTasksWaitingTermination+0x58>)
 800b5d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b5d6:	f000 facd 	bl	800bb74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f000 f810 	bl	800b600 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b5e0:	4b06      	ldr	r3, [pc, #24]	; (800b5fc <prvCheckTasksWaitingTermination+0x58>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d1e1      	bne.n	800b5ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b5e8:	bf00      	nop
 800b5ea:	bf00      	nop
 800b5ec:	3708      	adds	r7, #8
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}
 800b5f2:	bf00      	nop
 800b5f4:	2000043c 	.word	0x2000043c
 800b5f8:	20000468 	.word	0x20000468
 800b5fc:	20000450 	.word	0x20000450

0800b600 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b600:	b580      	push	{r7, lr}
 800b602:	b084      	sub	sp, #16
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	334c      	adds	r3, #76	; 0x4c
 800b60c:	4618      	mov	r0, r3
 800b60e:	f001 f999 	bl	800c944 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d108      	bne.n	800b62e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b620:	4618      	mov	r0, r3
 800b622:	f000 fc65 	bl	800bef0 <vPortFree>
				vPortFree( pxTCB );
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f000 fc62 	bl	800bef0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b62c:	e018      	b.n	800b660 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800b634:	2b01      	cmp	r3, #1
 800b636:	d103      	bne.n	800b640 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f000 fc59 	bl	800bef0 <vPortFree>
	}
 800b63e:	e00f      	b.n	800b660 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800b646:	2b02      	cmp	r3, #2
 800b648:	d00a      	beq.n	800b660 <prvDeleteTCB+0x60>
	__asm volatile
 800b64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b64e:	f383 8811 	msr	BASEPRI, r3
 800b652:	f3bf 8f6f 	isb	sy
 800b656:	f3bf 8f4f 	dsb	sy
 800b65a:	60fb      	str	r3, [r7, #12]
}
 800b65c:	bf00      	nop
 800b65e:	e7fe      	b.n	800b65e <prvDeleteTCB+0x5e>
	}
 800b660:	bf00      	nop
 800b662:	3710      	adds	r7, #16
 800b664:	46bd      	mov	sp, r7
 800b666:	bd80      	pop	{r7, pc}

0800b668 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b668:	b480      	push	{r7}
 800b66a:	b083      	sub	sp, #12
 800b66c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b66e:	4b0c      	ldr	r3, [pc, #48]	; (800b6a0 <prvResetNextTaskUnblockTime+0x38>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d104      	bne.n	800b682 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b678:	4b0a      	ldr	r3, [pc, #40]	; (800b6a4 <prvResetNextTaskUnblockTime+0x3c>)
 800b67a:	f04f 32ff 	mov.w	r2, #4294967295
 800b67e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b680:	e008      	b.n	800b694 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b682:	4b07      	ldr	r3, [pc, #28]	; (800b6a0 <prvResetNextTaskUnblockTime+0x38>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	68db      	ldr	r3, [r3, #12]
 800b688:	68db      	ldr	r3, [r3, #12]
 800b68a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	685b      	ldr	r3, [r3, #4]
 800b690:	4a04      	ldr	r2, [pc, #16]	; (800b6a4 <prvResetNextTaskUnblockTime+0x3c>)
 800b692:	6013      	str	r3, [r2, #0]
}
 800b694:	bf00      	nop
 800b696:	370c      	adds	r7, #12
 800b698:	46bd      	mov	sp, r7
 800b69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69e:	4770      	bx	lr
 800b6a0:	20000420 	.word	0x20000420
 800b6a4:	20000488 	.word	0x20000488

0800b6a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b083      	sub	sp, #12
 800b6ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b6ae:	4b0b      	ldr	r3, [pc, #44]	; (800b6dc <xTaskGetSchedulerState+0x34>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d102      	bne.n	800b6bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	607b      	str	r3, [r7, #4]
 800b6ba:	e008      	b.n	800b6ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b6bc:	4b08      	ldr	r3, [pc, #32]	; (800b6e0 <xTaskGetSchedulerState+0x38>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d102      	bne.n	800b6ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b6c4:	2302      	movs	r3, #2
 800b6c6:	607b      	str	r3, [r7, #4]
 800b6c8:	e001      	b.n	800b6ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b6ce:	687b      	ldr	r3, [r7, #4]
	}
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	370c      	adds	r7, #12
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6da:	4770      	bx	lr
 800b6dc:	20000474 	.word	0x20000474
 800b6e0:	20000490 	.word	0x20000490

0800b6e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b086      	sub	sp, #24
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d06e      	beq.n	800b7d8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b6fa:	4b3a      	ldr	r3, [pc, #232]	; (800b7e4 <xTaskPriorityDisinherit+0x100>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	693a      	ldr	r2, [r7, #16]
 800b700:	429a      	cmp	r2, r3
 800b702:	d00a      	beq.n	800b71a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b704:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b708:	f383 8811 	msr	BASEPRI, r3
 800b70c:	f3bf 8f6f 	isb	sy
 800b710:	f3bf 8f4f 	dsb	sy
 800b714:	60fb      	str	r3, [r7, #12]
}
 800b716:	bf00      	nop
 800b718:	e7fe      	b.n	800b718 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b71a:	693b      	ldr	r3, [r7, #16]
 800b71c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d10a      	bne.n	800b738 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b722:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b726:	f383 8811 	msr	BASEPRI, r3
 800b72a:	f3bf 8f6f 	isb	sy
 800b72e:	f3bf 8f4f 	dsb	sy
 800b732:	60bb      	str	r3, [r7, #8]
}
 800b734:	bf00      	nop
 800b736:	e7fe      	b.n	800b736 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b738:	693b      	ldr	r3, [r7, #16]
 800b73a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b73c:	1e5a      	subs	r2, r3, #1
 800b73e:	693b      	ldr	r3, [r7, #16]
 800b740:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b742:	693b      	ldr	r3, [r7, #16]
 800b744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b746:	693b      	ldr	r3, [r7, #16]
 800b748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b74a:	429a      	cmp	r2, r3
 800b74c:	d044      	beq.n	800b7d8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b74e:	693b      	ldr	r3, [r7, #16]
 800b750:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b752:	2b00      	cmp	r3, #0
 800b754:	d140      	bne.n	800b7d8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b756:	693b      	ldr	r3, [r7, #16]
 800b758:	3304      	adds	r3, #4
 800b75a:	4618      	mov	r0, r3
 800b75c:	f7fe fc46 	bl	8009fec <uxListRemove>
 800b760:	4603      	mov	r3, r0
 800b762:	2b00      	cmp	r3, #0
 800b764:	d115      	bne.n	800b792 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b766:	693b      	ldr	r3, [r7, #16]
 800b768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b76a:	491f      	ldr	r1, [pc, #124]	; (800b7e8 <xTaskPriorityDisinherit+0x104>)
 800b76c:	4613      	mov	r3, r2
 800b76e:	009b      	lsls	r3, r3, #2
 800b770:	4413      	add	r3, r2
 800b772:	009b      	lsls	r3, r3, #2
 800b774:	440b      	add	r3, r1
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d10a      	bne.n	800b792 <xTaskPriorityDisinherit+0xae>
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b780:	2201      	movs	r2, #1
 800b782:	fa02 f303 	lsl.w	r3, r2, r3
 800b786:	43da      	mvns	r2, r3
 800b788:	4b18      	ldr	r3, [pc, #96]	; (800b7ec <xTaskPriorityDisinherit+0x108>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	4013      	ands	r3, r2
 800b78e:	4a17      	ldr	r2, [pc, #92]	; (800b7ec <xTaskPriorityDisinherit+0x108>)
 800b790:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b792:	693b      	ldr	r3, [r7, #16]
 800b794:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b796:	693b      	ldr	r3, [r7, #16]
 800b798:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b79a:	693b      	ldr	r3, [r7, #16]
 800b79c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b79e:	f1c3 0207 	rsb	r2, r3, #7
 800b7a2:	693b      	ldr	r3, [r7, #16]
 800b7a4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b7a6:	693b      	ldr	r3, [r7, #16]
 800b7a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7aa:	2201      	movs	r2, #1
 800b7ac:	409a      	lsls	r2, r3
 800b7ae:	4b0f      	ldr	r3, [pc, #60]	; (800b7ec <xTaskPriorityDisinherit+0x108>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	4313      	orrs	r3, r2
 800b7b4:	4a0d      	ldr	r2, [pc, #52]	; (800b7ec <xTaskPriorityDisinherit+0x108>)
 800b7b6:	6013      	str	r3, [r2, #0]
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7bc:	4613      	mov	r3, r2
 800b7be:	009b      	lsls	r3, r3, #2
 800b7c0:	4413      	add	r3, r2
 800b7c2:	009b      	lsls	r3, r3, #2
 800b7c4:	4a08      	ldr	r2, [pc, #32]	; (800b7e8 <xTaskPriorityDisinherit+0x104>)
 800b7c6:	441a      	add	r2, r3
 800b7c8:	693b      	ldr	r3, [r7, #16]
 800b7ca:	3304      	adds	r3, #4
 800b7cc:	4619      	mov	r1, r3
 800b7ce:	4610      	mov	r0, r2
 800b7d0:	f7fe fbaf 	bl	8009f32 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b7d8:	697b      	ldr	r3, [r7, #20]
	}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	3718      	adds	r7, #24
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}
 800b7e2:	bf00      	nop
 800b7e4:	20000368 	.word	0x20000368
 800b7e8:	2000036c 	.word	0x2000036c
 800b7ec:	20000470 	.word	0x20000470

0800b7f0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b084      	sub	sp, #16
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
 800b7f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b7fa:	4b29      	ldr	r3, [pc, #164]	; (800b8a0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b800:	4b28      	ldr	r3, [pc, #160]	; (800b8a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	3304      	adds	r3, #4
 800b806:	4618      	mov	r0, r3
 800b808:	f7fe fbf0 	bl	8009fec <uxListRemove>
 800b80c:	4603      	mov	r3, r0
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d10b      	bne.n	800b82a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b812:	4b24      	ldr	r3, [pc, #144]	; (800b8a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b818:	2201      	movs	r2, #1
 800b81a:	fa02 f303 	lsl.w	r3, r2, r3
 800b81e:	43da      	mvns	r2, r3
 800b820:	4b21      	ldr	r3, [pc, #132]	; (800b8a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	4013      	ands	r3, r2
 800b826:	4a20      	ldr	r2, [pc, #128]	; (800b8a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b828:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b830:	d10a      	bne.n	800b848 <prvAddCurrentTaskToDelayedList+0x58>
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d007      	beq.n	800b848 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b838:	4b1a      	ldr	r3, [pc, #104]	; (800b8a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	3304      	adds	r3, #4
 800b83e:	4619      	mov	r1, r3
 800b840:	481a      	ldr	r0, [pc, #104]	; (800b8ac <prvAddCurrentTaskToDelayedList+0xbc>)
 800b842:	f7fe fb76 	bl	8009f32 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b846:	e026      	b.n	800b896 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b848:	68fa      	ldr	r2, [r7, #12]
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	4413      	add	r3, r2
 800b84e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b850:	4b14      	ldr	r3, [pc, #80]	; (800b8a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	68ba      	ldr	r2, [r7, #8]
 800b856:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b858:	68ba      	ldr	r2, [r7, #8]
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	429a      	cmp	r2, r3
 800b85e:	d209      	bcs.n	800b874 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b860:	4b13      	ldr	r3, [pc, #76]	; (800b8b0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b862:	681a      	ldr	r2, [r3, #0]
 800b864:	4b0f      	ldr	r3, [pc, #60]	; (800b8a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	3304      	adds	r3, #4
 800b86a:	4619      	mov	r1, r3
 800b86c:	4610      	mov	r0, r2
 800b86e:	f7fe fb84 	bl	8009f7a <vListInsert>
}
 800b872:	e010      	b.n	800b896 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b874:	4b0f      	ldr	r3, [pc, #60]	; (800b8b4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b876:	681a      	ldr	r2, [r3, #0]
 800b878:	4b0a      	ldr	r3, [pc, #40]	; (800b8a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	3304      	adds	r3, #4
 800b87e:	4619      	mov	r1, r3
 800b880:	4610      	mov	r0, r2
 800b882:	f7fe fb7a 	bl	8009f7a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b886:	4b0c      	ldr	r3, [pc, #48]	; (800b8b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	68ba      	ldr	r2, [r7, #8]
 800b88c:	429a      	cmp	r2, r3
 800b88e:	d202      	bcs.n	800b896 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b890:	4a09      	ldr	r2, [pc, #36]	; (800b8b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b892:	68bb      	ldr	r3, [r7, #8]
 800b894:	6013      	str	r3, [r2, #0]
}
 800b896:	bf00      	nop
 800b898:	3710      	adds	r7, #16
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}
 800b89e:	bf00      	nop
 800b8a0:	2000046c 	.word	0x2000046c
 800b8a4:	20000368 	.word	0x20000368
 800b8a8:	20000470 	.word	0x20000470
 800b8ac:	20000454 	.word	0x20000454
 800b8b0:	20000424 	.word	0x20000424
 800b8b4:	20000420 	.word	0x20000420
 800b8b8:	20000488 	.word	0x20000488

0800b8bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b8bc:	b480      	push	{r7}
 800b8be:	b085      	sub	sp, #20
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	60f8      	str	r0, [r7, #12]
 800b8c4:	60b9      	str	r1, [r7, #8]
 800b8c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	3b04      	subs	r3, #4
 800b8cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b8d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	3b04      	subs	r3, #4
 800b8da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	f023 0201 	bic.w	r2, r3, #1
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	3b04      	subs	r3, #4
 800b8ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b8ec:	4a0c      	ldr	r2, [pc, #48]	; (800b920 <pxPortInitialiseStack+0x64>)
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	3b14      	subs	r3, #20
 800b8f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b8f8:	687a      	ldr	r2, [r7, #4]
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	3b04      	subs	r3, #4
 800b902:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	f06f 0202 	mvn.w	r2, #2
 800b90a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	3b20      	subs	r3, #32
 800b910:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b912:	68fb      	ldr	r3, [r7, #12]
}
 800b914:	4618      	mov	r0, r3
 800b916:	3714      	adds	r7, #20
 800b918:	46bd      	mov	sp, r7
 800b91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91e:	4770      	bx	lr
 800b920:	0800b925 	.word	0x0800b925

0800b924 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b924:	b480      	push	{r7}
 800b926:	b085      	sub	sp, #20
 800b928:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b92a:	2300      	movs	r3, #0
 800b92c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b92e:	4b12      	ldr	r3, [pc, #72]	; (800b978 <prvTaskExitError+0x54>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b936:	d00a      	beq.n	800b94e <prvTaskExitError+0x2a>
	__asm volatile
 800b938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b93c:	f383 8811 	msr	BASEPRI, r3
 800b940:	f3bf 8f6f 	isb	sy
 800b944:	f3bf 8f4f 	dsb	sy
 800b948:	60fb      	str	r3, [r7, #12]
}
 800b94a:	bf00      	nop
 800b94c:	e7fe      	b.n	800b94c <prvTaskExitError+0x28>
	__asm volatile
 800b94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b952:	f383 8811 	msr	BASEPRI, r3
 800b956:	f3bf 8f6f 	isb	sy
 800b95a:	f3bf 8f4f 	dsb	sy
 800b95e:	60bb      	str	r3, [r7, #8]
}
 800b960:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b962:	bf00      	nop
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d0fc      	beq.n	800b964 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b96a:	bf00      	nop
 800b96c:	bf00      	nop
 800b96e:	3714      	adds	r7, #20
 800b970:	46bd      	mov	sp, r7
 800b972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b976:	4770      	bx	lr
 800b978:	2000002c 	.word	0x2000002c
 800b97c:	00000000 	.word	0x00000000

0800b980 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b980:	4b07      	ldr	r3, [pc, #28]	; (800b9a0 <pxCurrentTCBConst2>)
 800b982:	6819      	ldr	r1, [r3, #0]
 800b984:	6808      	ldr	r0, [r1, #0]
 800b986:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b98a:	f380 8809 	msr	PSP, r0
 800b98e:	f3bf 8f6f 	isb	sy
 800b992:	f04f 0000 	mov.w	r0, #0
 800b996:	f380 8811 	msr	BASEPRI, r0
 800b99a:	4770      	bx	lr
 800b99c:	f3af 8000 	nop.w

0800b9a0 <pxCurrentTCBConst2>:
 800b9a0:	20000368 	.word	0x20000368
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b9a4:	bf00      	nop
 800b9a6:	bf00      	nop

0800b9a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b9a8:	4808      	ldr	r0, [pc, #32]	; (800b9cc <prvPortStartFirstTask+0x24>)
 800b9aa:	6800      	ldr	r0, [r0, #0]
 800b9ac:	6800      	ldr	r0, [r0, #0]
 800b9ae:	f380 8808 	msr	MSP, r0
 800b9b2:	f04f 0000 	mov.w	r0, #0
 800b9b6:	f380 8814 	msr	CONTROL, r0
 800b9ba:	b662      	cpsie	i
 800b9bc:	b661      	cpsie	f
 800b9be:	f3bf 8f4f 	dsb	sy
 800b9c2:	f3bf 8f6f 	isb	sy
 800b9c6:	df00      	svc	0
 800b9c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b9ca:	bf00      	nop
 800b9cc:	e000ed08 	.word	0xe000ed08

0800b9d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b086      	sub	sp, #24
 800b9d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b9d6:	4b46      	ldr	r3, [pc, #280]	; (800baf0 <xPortStartScheduler+0x120>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	4a46      	ldr	r2, [pc, #280]	; (800baf4 <xPortStartScheduler+0x124>)
 800b9dc:	4293      	cmp	r3, r2
 800b9de:	d10a      	bne.n	800b9f6 <xPortStartScheduler+0x26>
	__asm volatile
 800b9e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9e4:	f383 8811 	msr	BASEPRI, r3
 800b9e8:	f3bf 8f6f 	isb	sy
 800b9ec:	f3bf 8f4f 	dsb	sy
 800b9f0:	613b      	str	r3, [r7, #16]
}
 800b9f2:	bf00      	nop
 800b9f4:	e7fe      	b.n	800b9f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b9f6:	4b3e      	ldr	r3, [pc, #248]	; (800baf0 <xPortStartScheduler+0x120>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	4a3f      	ldr	r2, [pc, #252]	; (800baf8 <xPortStartScheduler+0x128>)
 800b9fc:	4293      	cmp	r3, r2
 800b9fe:	d10a      	bne.n	800ba16 <xPortStartScheduler+0x46>
	__asm volatile
 800ba00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba04:	f383 8811 	msr	BASEPRI, r3
 800ba08:	f3bf 8f6f 	isb	sy
 800ba0c:	f3bf 8f4f 	dsb	sy
 800ba10:	60fb      	str	r3, [r7, #12]
}
 800ba12:	bf00      	nop
 800ba14:	e7fe      	b.n	800ba14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ba16:	4b39      	ldr	r3, [pc, #228]	; (800bafc <xPortStartScheduler+0x12c>)
 800ba18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ba1a:	697b      	ldr	r3, [r7, #20]
 800ba1c:	781b      	ldrb	r3, [r3, #0]
 800ba1e:	b2db      	uxtb	r3, r3
 800ba20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ba22:	697b      	ldr	r3, [r7, #20]
 800ba24:	22ff      	movs	r2, #255	; 0xff
 800ba26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ba28:	697b      	ldr	r3, [r7, #20]
 800ba2a:	781b      	ldrb	r3, [r3, #0]
 800ba2c:	b2db      	uxtb	r3, r3
 800ba2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ba30:	78fb      	ldrb	r3, [r7, #3]
 800ba32:	b2db      	uxtb	r3, r3
 800ba34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ba38:	b2da      	uxtb	r2, r3
 800ba3a:	4b31      	ldr	r3, [pc, #196]	; (800bb00 <xPortStartScheduler+0x130>)
 800ba3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ba3e:	4b31      	ldr	r3, [pc, #196]	; (800bb04 <xPortStartScheduler+0x134>)
 800ba40:	2207      	movs	r2, #7
 800ba42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ba44:	e009      	b.n	800ba5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ba46:	4b2f      	ldr	r3, [pc, #188]	; (800bb04 <xPortStartScheduler+0x134>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	3b01      	subs	r3, #1
 800ba4c:	4a2d      	ldr	r2, [pc, #180]	; (800bb04 <xPortStartScheduler+0x134>)
 800ba4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ba50:	78fb      	ldrb	r3, [r7, #3]
 800ba52:	b2db      	uxtb	r3, r3
 800ba54:	005b      	lsls	r3, r3, #1
 800ba56:	b2db      	uxtb	r3, r3
 800ba58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ba5a:	78fb      	ldrb	r3, [r7, #3]
 800ba5c:	b2db      	uxtb	r3, r3
 800ba5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba62:	2b80      	cmp	r3, #128	; 0x80
 800ba64:	d0ef      	beq.n	800ba46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ba66:	4b27      	ldr	r3, [pc, #156]	; (800bb04 <xPortStartScheduler+0x134>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	f1c3 0307 	rsb	r3, r3, #7
 800ba6e:	2b04      	cmp	r3, #4
 800ba70:	d00a      	beq.n	800ba88 <xPortStartScheduler+0xb8>
	__asm volatile
 800ba72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba76:	f383 8811 	msr	BASEPRI, r3
 800ba7a:	f3bf 8f6f 	isb	sy
 800ba7e:	f3bf 8f4f 	dsb	sy
 800ba82:	60bb      	str	r3, [r7, #8]
}
 800ba84:	bf00      	nop
 800ba86:	e7fe      	b.n	800ba86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ba88:	4b1e      	ldr	r3, [pc, #120]	; (800bb04 <xPortStartScheduler+0x134>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	021b      	lsls	r3, r3, #8
 800ba8e:	4a1d      	ldr	r2, [pc, #116]	; (800bb04 <xPortStartScheduler+0x134>)
 800ba90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ba92:	4b1c      	ldr	r3, [pc, #112]	; (800bb04 <xPortStartScheduler+0x134>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ba9a:	4a1a      	ldr	r2, [pc, #104]	; (800bb04 <xPortStartScheduler+0x134>)
 800ba9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	b2da      	uxtb	r2, r3
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800baa6:	4b18      	ldr	r3, [pc, #96]	; (800bb08 <xPortStartScheduler+0x138>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	4a17      	ldr	r2, [pc, #92]	; (800bb08 <xPortStartScheduler+0x138>)
 800baac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bab0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bab2:	4b15      	ldr	r3, [pc, #84]	; (800bb08 <xPortStartScheduler+0x138>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	4a14      	ldr	r2, [pc, #80]	; (800bb08 <xPortStartScheduler+0x138>)
 800bab8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800babc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800babe:	f000 f8dd 	bl	800bc7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bac2:	4b12      	ldr	r3, [pc, #72]	; (800bb0c <xPortStartScheduler+0x13c>)
 800bac4:	2200      	movs	r2, #0
 800bac6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bac8:	f000 f8fc 	bl	800bcc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bacc:	4b10      	ldr	r3, [pc, #64]	; (800bb10 <xPortStartScheduler+0x140>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	4a0f      	ldr	r2, [pc, #60]	; (800bb10 <xPortStartScheduler+0x140>)
 800bad2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bad6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bad8:	f7ff ff66 	bl	800b9a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800badc:	f7ff fb9e 	bl	800b21c <vTaskSwitchContext>
	prvTaskExitError();
 800bae0:	f7ff ff20 	bl	800b924 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bae4:	2300      	movs	r3, #0
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	3718      	adds	r7, #24
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}
 800baee:	bf00      	nop
 800baf0:	e000ed00 	.word	0xe000ed00
 800baf4:	410fc271 	.word	0x410fc271
 800baf8:	410fc270 	.word	0x410fc270
 800bafc:	e000e400 	.word	0xe000e400
 800bb00:	20000494 	.word	0x20000494
 800bb04:	20000498 	.word	0x20000498
 800bb08:	e000ed20 	.word	0xe000ed20
 800bb0c:	2000002c 	.word	0x2000002c
 800bb10:	e000ef34 	.word	0xe000ef34

0800bb14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bb14:	b480      	push	{r7}
 800bb16:	b083      	sub	sp, #12
 800bb18:	af00      	add	r7, sp, #0
	__asm volatile
 800bb1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb1e:	f383 8811 	msr	BASEPRI, r3
 800bb22:	f3bf 8f6f 	isb	sy
 800bb26:	f3bf 8f4f 	dsb	sy
 800bb2a:	607b      	str	r3, [r7, #4]
}
 800bb2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bb2e:	4b0f      	ldr	r3, [pc, #60]	; (800bb6c <vPortEnterCritical+0x58>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	3301      	adds	r3, #1
 800bb34:	4a0d      	ldr	r2, [pc, #52]	; (800bb6c <vPortEnterCritical+0x58>)
 800bb36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bb38:	4b0c      	ldr	r3, [pc, #48]	; (800bb6c <vPortEnterCritical+0x58>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	2b01      	cmp	r3, #1
 800bb3e:	d10f      	bne.n	800bb60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bb40:	4b0b      	ldr	r3, [pc, #44]	; (800bb70 <vPortEnterCritical+0x5c>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	b2db      	uxtb	r3, r3
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d00a      	beq.n	800bb60 <vPortEnterCritical+0x4c>
	__asm volatile
 800bb4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb4e:	f383 8811 	msr	BASEPRI, r3
 800bb52:	f3bf 8f6f 	isb	sy
 800bb56:	f3bf 8f4f 	dsb	sy
 800bb5a:	603b      	str	r3, [r7, #0]
}
 800bb5c:	bf00      	nop
 800bb5e:	e7fe      	b.n	800bb5e <vPortEnterCritical+0x4a>
	}
}
 800bb60:	bf00      	nop
 800bb62:	370c      	adds	r7, #12
 800bb64:	46bd      	mov	sp, r7
 800bb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6a:	4770      	bx	lr
 800bb6c:	2000002c 	.word	0x2000002c
 800bb70:	e000ed04 	.word	0xe000ed04

0800bb74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bb74:	b480      	push	{r7}
 800bb76:	b083      	sub	sp, #12
 800bb78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bb7a:	4b12      	ldr	r3, [pc, #72]	; (800bbc4 <vPortExitCritical+0x50>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d10a      	bne.n	800bb98 <vPortExitCritical+0x24>
	__asm volatile
 800bb82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb86:	f383 8811 	msr	BASEPRI, r3
 800bb8a:	f3bf 8f6f 	isb	sy
 800bb8e:	f3bf 8f4f 	dsb	sy
 800bb92:	607b      	str	r3, [r7, #4]
}
 800bb94:	bf00      	nop
 800bb96:	e7fe      	b.n	800bb96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bb98:	4b0a      	ldr	r3, [pc, #40]	; (800bbc4 <vPortExitCritical+0x50>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	3b01      	subs	r3, #1
 800bb9e:	4a09      	ldr	r2, [pc, #36]	; (800bbc4 <vPortExitCritical+0x50>)
 800bba0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bba2:	4b08      	ldr	r3, [pc, #32]	; (800bbc4 <vPortExitCritical+0x50>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d105      	bne.n	800bbb6 <vPortExitCritical+0x42>
 800bbaa:	2300      	movs	r3, #0
 800bbac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	f383 8811 	msr	BASEPRI, r3
}
 800bbb4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bbb6:	bf00      	nop
 800bbb8:	370c      	adds	r7, #12
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc0:	4770      	bx	lr
 800bbc2:	bf00      	nop
 800bbc4:	2000002c 	.word	0x2000002c
	...

0800bbd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bbd0:	f3ef 8009 	mrs	r0, PSP
 800bbd4:	f3bf 8f6f 	isb	sy
 800bbd8:	4b15      	ldr	r3, [pc, #84]	; (800bc30 <pxCurrentTCBConst>)
 800bbda:	681a      	ldr	r2, [r3, #0]
 800bbdc:	f01e 0f10 	tst.w	lr, #16
 800bbe0:	bf08      	it	eq
 800bbe2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bbe6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbea:	6010      	str	r0, [r2, #0]
 800bbec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bbf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bbf4:	f380 8811 	msr	BASEPRI, r0
 800bbf8:	f3bf 8f4f 	dsb	sy
 800bbfc:	f3bf 8f6f 	isb	sy
 800bc00:	f7ff fb0c 	bl	800b21c <vTaskSwitchContext>
 800bc04:	f04f 0000 	mov.w	r0, #0
 800bc08:	f380 8811 	msr	BASEPRI, r0
 800bc0c:	bc09      	pop	{r0, r3}
 800bc0e:	6819      	ldr	r1, [r3, #0]
 800bc10:	6808      	ldr	r0, [r1, #0]
 800bc12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc16:	f01e 0f10 	tst.w	lr, #16
 800bc1a:	bf08      	it	eq
 800bc1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bc20:	f380 8809 	msr	PSP, r0
 800bc24:	f3bf 8f6f 	isb	sy
 800bc28:	4770      	bx	lr
 800bc2a:	bf00      	nop
 800bc2c:	f3af 8000 	nop.w

0800bc30 <pxCurrentTCBConst>:
 800bc30:	20000368 	.word	0x20000368
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bc34:	bf00      	nop
 800bc36:	bf00      	nop

0800bc38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b082      	sub	sp, #8
 800bc3c:	af00      	add	r7, sp, #0
	__asm volatile
 800bc3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc42:	f383 8811 	msr	BASEPRI, r3
 800bc46:	f3bf 8f6f 	isb	sy
 800bc4a:	f3bf 8f4f 	dsb	sy
 800bc4e:	607b      	str	r3, [r7, #4]
}
 800bc50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bc52:	f7ff fa2b 	bl	800b0ac <xTaskIncrementTick>
 800bc56:	4603      	mov	r3, r0
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d003      	beq.n	800bc64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bc5c:	4b06      	ldr	r3, [pc, #24]	; (800bc78 <SysTick_Handler+0x40>)
 800bc5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc62:	601a      	str	r2, [r3, #0]
 800bc64:	2300      	movs	r3, #0
 800bc66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	f383 8811 	msr	BASEPRI, r3
}
 800bc6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bc70:	bf00      	nop
 800bc72:	3708      	adds	r7, #8
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}
 800bc78:	e000ed04 	.word	0xe000ed04

0800bc7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bc7c:	b480      	push	{r7}
 800bc7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bc80:	4b0b      	ldr	r3, [pc, #44]	; (800bcb0 <vPortSetupTimerInterrupt+0x34>)
 800bc82:	2200      	movs	r2, #0
 800bc84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bc86:	4b0b      	ldr	r3, [pc, #44]	; (800bcb4 <vPortSetupTimerInterrupt+0x38>)
 800bc88:	2200      	movs	r2, #0
 800bc8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bc8c:	4b0a      	ldr	r3, [pc, #40]	; (800bcb8 <vPortSetupTimerInterrupt+0x3c>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	4a0a      	ldr	r2, [pc, #40]	; (800bcbc <vPortSetupTimerInterrupt+0x40>)
 800bc92:	fba2 2303 	umull	r2, r3, r2, r3
 800bc96:	099b      	lsrs	r3, r3, #6
 800bc98:	4a09      	ldr	r2, [pc, #36]	; (800bcc0 <vPortSetupTimerInterrupt+0x44>)
 800bc9a:	3b01      	subs	r3, #1
 800bc9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bc9e:	4b04      	ldr	r3, [pc, #16]	; (800bcb0 <vPortSetupTimerInterrupt+0x34>)
 800bca0:	2207      	movs	r2, #7
 800bca2:	601a      	str	r2, [r3, #0]
}
 800bca4:	bf00      	nop
 800bca6:	46bd      	mov	sp, r7
 800bca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcac:	4770      	bx	lr
 800bcae:	bf00      	nop
 800bcb0:	e000e010 	.word	0xe000e010
 800bcb4:	e000e018 	.word	0xe000e018
 800bcb8:	20000000 	.word	0x20000000
 800bcbc:	10624dd3 	.word	0x10624dd3
 800bcc0:	e000e014 	.word	0xe000e014

0800bcc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bcc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bcd4 <vPortEnableVFP+0x10>
 800bcc8:	6801      	ldr	r1, [r0, #0]
 800bcca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bcce:	6001      	str	r1, [r0, #0]
 800bcd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bcd2:	bf00      	nop
 800bcd4:	e000ed88 	.word	0xe000ed88

0800bcd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bcd8:	b480      	push	{r7}
 800bcda:	b085      	sub	sp, #20
 800bcdc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bcde:	f3ef 8305 	mrs	r3, IPSR
 800bce2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	2b0f      	cmp	r3, #15
 800bce8:	d914      	bls.n	800bd14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bcea:	4a17      	ldr	r2, [pc, #92]	; (800bd48 <vPortValidateInterruptPriority+0x70>)
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	4413      	add	r3, r2
 800bcf0:	781b      	ldrb	r3, [r3, #0]
 800bcf2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bcf4:	4b15      	ldr	r3, [pc, #84]	; (800bd4c <vPortValidateInterruptPriority+0x74>)
 800bcf6:	781b      	ldrb	r3, [r3, #0]
 800bcf8:	7afa      	ldrb	r2, [r7, #11]
 800bcfa:	429a      	cmp	r2, r3
 800bcfc:	d20a      	bcs.n	800bd14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bcfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd02:	f383 8811 	msr	BASEPRI, r3
 800bd06:	f3bf 8f6f 	isb	sy
 800bd0a:	f3bf 8f4f 	dsb	sy
 800bd0e:	607b      	str	r3, [r7, #4]
}
 800bd10:	bf00      	nop
 800bd12:	e7fe      	b.n	800bd12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bd14:	4b0e      	ldr	r3, [pc, #56]	; (800bd50 <vPortValidateInterruptPriority+0x78>)
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bd1c:	4b0d      	ldr	r3, [pc, #52]	; (800bd54 <vPortValidateInterruptPriority+0x7c>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	429a      	cmp	r2, r3
 800bd22:	d90a      	bls.n	800bd3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bd24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd28:	f383 8811 	msr	BASEPRI, r3
 800bd2c:	f3bf 8f6f 	isb	sy
 800bd30:	f3bf 8f4f 	dsb	sy
 800bd34:	603b      	str	r3, [r7, #0]
}
 800bd36:	bf00      	nop
 800bd38:	e7fe      	b.n	800bd38 <vPortValidateInterruptPriority+0x60>
	}
 800bd3a:	bf00      	nop
 800bd3c:	3714      	adds	r7, #20
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd44:	4770      	bx	lr
 800bd46:	bf00      	nop
 800bd48:	e000e3f0 	.word	0xe000e3f0
 800bd4c:	20000494 	.word	0x20000494
 800bd50:	e000ed0c 	.word	0xe000ed0c
 800bd54:	20000498 	.word	0x20000498

0800bd58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b08a      	sub	sp, #40	; 0x28
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bd60:	2300      	movs	r3, #0
 800bd62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bd64:	f7ff f8f8 	bl	800af58 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bd68:	4b5b      	ldr	r3, [pc, #364]	; (800bed8 <pvPortMalloc+0x180>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d101      	bne.n	800bd74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bd70:	f000 f920 	bl	800bfb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bd74:	4b59      	ldr	r3, [pc, #356]	; (800bedc <pvPortMalloc+0x184>)
 800bd76:	681a      	ldr	r2, [r3, #0]
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	4013      	ands	r3, r2
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	f040 8093 	bne.w	800bea8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d01d      	beq.n	800bdc4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bd88:	2208      	movs	r2, #8
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	4413      	add	r3, r2
 800bd8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f003 0307 	and.w	r3, r3, #7
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d014      	beq.n	800bdc4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f023 0307 	bic.w	r3, r3, #7
 800bda0:	3308      	adds	r3, #8
 800bda2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f003 0307 	and.w	r3, r3, #7
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d00a      	beq.n	800bdc4 <pvPortMalloc+0x6c>
	__asm volatile
 800bdae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdb2:	f383 8811 	msr	BASEPRI, r3
 800bdb6:	f3bf 8f6f 	isb	sy
 800bdba:	f3bf 8f4f 	dsb	sy
 800bdbe:	617b      	str	r3, [r7, #20]
}
 800bdc0:	bf00      	nop
 800bdc2:	e7fe      	b.n	800bdc2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d06e      	beq.n	800bea8 <pvPortMalloc+0x150>
 800bdca:	4b45      	ldr	r3, [pc, #276]	; (800bee0 <pvPortMalloc+0x188>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	687a      	ldr	r2, [r7, #4]
 800bdd0:	429a      	cmp	r2, r3
 800bdd2:	d869      	bhi.n	800bea8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bdd4:	4b43      	ldr	r3, [pc, #268]	; (800bee4 <pvPortMalloc+0x18c>)
 800bdd6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bdd8:	4b42      	ldr	r3, [pc, #264]	; (800bee4 <pvPortMalloc+0x18c>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bdde:	e004      	b.n	800bdea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bde0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bde4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bdea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdec:	685b      	ldr	r3, [r3, #4]
 800bdee:	687a      	ldr	r2, [r7, #4]
 800bdf0:	429a      	cmp	r2, r3
 800bdf2:	d903      	bls.n	800bdfc <pvPortMalloc+0xa4>
 800bdf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d1f1      	bne.n	800bde0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bdfc:	4b36      	ldr	r3, [pc, #216]	; (800bed8 <pvPortMalloc+0x180>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be02:	429a      	cmp	r2, r3
 800be04:	d050      	beq.n	800bea8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800be06:	6a3b      	ldr	r3, [r7, #32]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	2208      	movs	r2, #8
 800be0c:	4413      	add	r3, r2
 800be0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800be10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be12:	681a      	ldr	r2, [r3, #0]
 800be14:	6a3b      	ldr	r3, [r7, #32]
 800be16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800be18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be1a:	685a      	ldr	r2, [r3, #4]
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	1ad2      	subs	r2, r2, r3
 800be20:	2308      	movs	r3, #8
 800be22:	005b      	lsls	r3, r3, #1
 800be24:	429a      	cmp	r2, r3
 800be26:	d91f      	bls.n	800be68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800be28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	4413      	add	r3, r2
 800be2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800be30:	69bb      	ldr	r3, [r7, #24]
 800be32:	f003 0307 	and.w	r3, r3, #7
 800be36:	2b00      	cmp	r3, #0
 800be38:	d00a      	beq.n	800be50 <pvPortMalloc+0xf8>
	__asm volatile
 800be3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be3e:	f383 8811 	msr	BASEPRI, r3
 800be42:	f3bf 8f6f 	isb	sy
 800be46:	f3bf 8f4f 	dsb	sy
 800be4a:	613b      	str	r3, [r7, #16]
}
 800be4c:	bf00      	nop
 800be4e:	e7fe      	b.n	800be4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800be50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be52:	685a      	ldr	r2, [r3, #4]
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	1ad2      	subs	r2, r2, r3
 800be58:	69bb      	ldr	r3, [r7, #24]
 800be5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800be5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be5e:	687a      	ldr	r2, [r7, #4]
 800be60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800be62:	69b8      	ldr	r0, [r7, #24]
 800be64:	f000 f908 	bl	800c078 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800be68:	4b1d      	ldr	r3, [pc, #116]	; (800bee0 <pvPortMalloc+0x188>)
 800be6a:	681a      	ldr	r2, [r3, #0]
 800be6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be6e:	685b      	ldr	r3, [r3, #4]
 800be70:	1ad3      	subs	r3, r2, r3
 800be72:	4a1b      	ldr	r2, [pc, #108]	; (800bee0 <pvPortMalloc+0x188>)
 800be74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800be76:	4b1a      	ldr	r3, [pc, #104]	; (800bee0 <pvPortMalloc+0x188>)
 800be78:	681a      	ldr	r2, [r3, #0]
 800be7a:	4b1b      	ldr	r3, [pc, #108]	; (800bee8 <pvPortMalloc+0x190>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	429a      	cmp	r2, r3
 800be80:	d203      	bcs.n	800be8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800be82:	4b17      	ldr	r3, [pc, #92]	; (800bee0 <pvPortMalloc+0x188>)
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	4a18      	ldr	r2, [pc, #96]	; (800bee8 <pvPortMalloc+0x190>)
 800be88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800be8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be8c:	685a      	ldr	r2, [r3, #4]
 800be8e:	4b13      	ldr	r3, [pc, #76]	; (800bedc <pvPortMalloc+0x184>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	431a      	orrs	r2, r3
 800be94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800be98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be9a:	2200      	movs	r2, #0
 800be9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800be9e:	4b13      	ldr	r3, [pc, #76]	; (800beec <pvPortMalloc+0x194>)
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	3301      	adds	r3, #1
 800bea4:	4a11      	ldr	r2, [pc, #68]	; (800beec <pvPortMalloc+0x194>)
 800bea6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bea8:	f7ff f864 	bl	800af74 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800beac:	69fb      	ldr	r3, [r7, #28]
 800beae:	f003 0307 	and.w	r3, r3, #7
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d00a      	beq.n	800becc <pvPortMalloc+0x174>
	__asm volatile
 800beb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beba:	f383 8811 	msr	BASEPRI, r3
 800bebe:	f3bf 8f6f 	isb	sy
 800bec2:	f3bf 8f4f 	dsb	sy
 800bec6:	60fb      	str	r3, [r7, #12]
}
 800bec8:	bf00      	nop
 800beca:	e7fe      	b.n	800beca <pvPortMalloc+0x172>
	return pvReturn;
 800becc:	69fb      	ldr	r3, [r7, #28]
}
 800bece:	4618      	mov	r0, r3
 800bed0:	3728      	adds	r7, #40	; 0x28
 800bed2:	46bd      	mov	sp, r7
 800bed4:	bd80      	pop	{r7, pc}
 800bed6:	bf00      	nop
 800bed8:	200040a4 	.word	0x200040a4
 800bedc:	200040b8 	.word	0x200040b8
 800bee0:	200040a8 	.word	0x200040a8
 800bee4:	2000409c 	.word	0x2000409c
 800bee8:	200040ac 	.word	0x200040ac
 800beec:	200040b0 	.word	0x200040b0

0800bef0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b086      	sub	sp, #24
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d04d      	beq.n	800bf9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bf02:	2308      	movs	r3, #8
 800bf04:	425b      	negs	r3, r3
 800bf06:	697a      	ldr	r2, [r7, #20]
 800bf08:	4413      	add	r3, r2
 800bf0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bf0c:	697b      	ldr	r3, [r7, #20]
 800bf0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bf10:	693b      	ldr	r3, [r7, #16]
 800bf12:	685a      	ldr	r2, [r3, #4]
 800bf14:	4b24      	ldr	r3, [pc, #144]	; (800bfa8 <vPortFree+0xb8>)
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	4013      	ands	r3, r2
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d10a      	bne.n	800bf34 <vPortFree+0x44>
	__asm volatile
 800bf1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf22:	f383 8811 	msr	BASEPRI, r3
 800bf26:	f3bf 8f6f 	isb	sy
 800bf2a:	f3bf 8f4f 	dsb	sy
 800bf2e:	60fb      	str	r3, [r7, #12]
}
 800bf30:	bf00      	nop
 800bf32:	e7fe      	b.n	800bf32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bf34:	693b      	ldr	r3, [r7, #16]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d00a      	beq.n	800bf52 <vPortFree+0x62>
	__asm volatile
 800bf3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf40:	f383 8811 	msr	BASEPRI, r3
 800bf44:	f3bf 8f6f 	isb	sy
 800bf48:	f3bf 8f4f 	dsb	sy
 800bf4c:	60bb      	str	r3, [r7, #8]
}
 800bf4e:	bf00      	nop
 800bf50:	e7fe      	b.n	800bf50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bf52:	693b      	ldr	r3, [r7, #16]
 800bf54:	685a      	ldr	r2, [r3, #4]
 800bf56:	4b14      	ldr	r3, [pc, #80]	; (800bfa8 <vPortFree+0xb8>)
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	4013      	ands	r3, r2
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d01e      	beq.n	800bf9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bf60:	693b      	ldr	r3, [r7, #16]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d11a      	bne.n	800bf9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bf68:	693b      	ldr	r3, [r7, #16]
 800bf6a:	685a      	ldr	r2, [r3, #4]
 800bf6c:	4b0e      	ldr	r3, [pc, #56]	; (800bfa8 <vPortFree+0xb8>)
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	43db      	mvns	r3, r3
 800bf72:	401a      	ands	r2, r3
 800bf74:	693b      	ldr	r3, [r7, #16]
 800bf76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bf78:	f7fe ffee 	bl	800af58 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bf7c:	693b      	ldr	r3, [r7, #16]
 800bf7e:	685a      	ldr	r2, [r3, #4]
 800bf80:	4b0a      	ldr	r3, [pc, #40]	; (800bfac <vPortFree+0xbc>)
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	4413      	add	r3, r2
 800bf86:	4a09      	ldr	r2, [pc, #36]	; (800bfac <vPortFree+0xbc>)
 800bf88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bf8a:	6938      	ldr	r0, [r7, #16]
 800bf8c:	f000 f874 	bl	800c078 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bf90:	4b07      	ldr	r3, [pc, #28]	; (800bfb0 <vPortFree+0xc0>)
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	3301      	adds	r3, #1
 800bf96:	4a06      	ldr	r2, [pc, #24]	; (800bfb0 <vPortFree+0xc0>)
 800bf98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bf9a:	f7fe ffeb 	bl	800af74 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bf9e:	bf00      	nop
 800bfa0:	3718      	adds	r7, #24
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bd80      	pop	{r7, pc}
 800bfa6:	bf00      	nop
 800bfa8:	200040b8 	.word	0x200040b8
 800bfac:	200040a8 	.word	0x200040a8
 800bfb0:	200040b4 	.word	0x200040b4

0800bfb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bfb4:	b480      	push	{r7}
 800bfb6:	b085      	sub	sp, #20
 800bfb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bfba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800bfbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bfc0:	4b27      	ldr	r3, [pc, #156]	; (800c060 <prvHeapInit+0xac>)
 800bfc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	f003 0307 	and.w	r3, r3, #7
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d00c      	beq.n	800bfe8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	3307      	adds	r3, #7
 800bfd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	f023 0307 	bic.w	r3, r3, #7
 800bfda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bfdc:	68ba      	ldr	r2, [r7, #8]
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	1ad3      	subs	r3, r2, r3
 800bfe2:	4a1f      	ldr	r2, [pc, #124]	; (800c060 <prvHeapInit+0xac>)
 800bfe4:	4413      	add	r3, r2
 800bfe6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bfec:	4a1d      	ldr	r2, [pc, #116]	; (800c064 <prvHeapInit+0xb0>)
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bff2:	4b1c      	ldr	r3, [pc, #112]	; (800c064 <prvHeapInit+0xb0>)
 800bff4:	2200      	movs	r2, #0
 800bff6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	68ba      	ldr	r2, [r7, #8]
 800bffc:	4413      	add	r3, r2
 800bffe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c000:	2208      	movs	r2, #8
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	1a9b      	subs	r3, r3, r2
 800c006:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	f023 0307 	bic.w	r3, r3, #7
 800c00e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	4a15      	ldr	r2, [pc, #84]	; (800c068 <prvHeapInit+0xb4>)
 800c014:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c016:	4b14      	ldr	r3, [pc, #80]	; (800c068 <prvHeapInit+0xb4>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	2200      	movs	r2, #0
 800c01c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c01e:	4b12      	ldr	r3, [pc, #72]	; (800c068 <prvHeapInit+0xb4>)
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	2200      	movs	r2, #0
 800c024:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	68fa      	ldr	r2, [r7, #12]
 800c02e:	1ad2      	subs	r2, r2, r3
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c034:	4b0c      	ldr	r3, [pc, #48]	; (800c068 <prvHeapInit+0xb4>)
 800c036:	681a      	ldr	r2, [r3, #0]
 800c038:	683b      	ldr	r3, [r7, #0]
 800c03a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	685b      	ldr	r3, [r3, #4]
 800c040:	4a0a      	ldr	r2, [pc, #40]	; (800c06c <prvHeapInit+0xb8>)
 800c042:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	685b      	ldr	r3, [r3, #4]
 800c048:	4a09      	ldr	r2, [pc, #36]	; (800c070 <prvHeapInit+0xbc>)
 800c04a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c04c:	4b09      	ldr	r3, [pc, #36]	; (800c074 <prvHeapInit+0xc0>)
 800c04e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c052:	601a      	str	r2, [r3, #0]
}
 800c054:	bf00      	nop
 800c056:	3714      	adds	r7, #20
 800c058:	46bd      	mov	sp, r7
 800c05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05e:	4770      	bx	lr
 800c060:	2000049c 	.word	0x2000049c
 800c064:	2000409c 	.word	0x2000409c
 800c068:	200040a4 	.word	0x200040a4
 800c06c:	200040ac 	.word	0x200040ac
 800c070:	200040a8 	.word	0x200040a8
 800c074:	200040b8 	.word	0x200040b8

0800c078 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c078:	b480      	push	{r7}
 800c07a:	b085      	sub	sp, #20
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c080:	4b28      	ldr	r3, [pc, #160]	; (800c124 <prvInsertBlockIntoFreeList+0xac>)
 800c082:	60fb      	str	r3, [r7, #12]
 800c084:	e002      	b.n	800c08c <prvInsertBlockIntoFreeList+0x14>
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	60fb      	str	r3, [r7, #12]
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	687a      	ldr	r2, [r7, #4]
 800c092:	429a      	cmp	r2, r3
 800c094:	d8f7      	bhi.n	800c086 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	685b      	ldr	r3, [r3, #4]
 800c09e:	68ba      	ldr	r2, [r7, #8]
 800c0a0:	4413      	add	r3, r2
 800c0a2:	687a      	ldr	r2, [r7, #4]
 800c0a4:	429a      	cmp	r2, r3
 800c0a6:	d108      	bne.n	800c0ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	685a      	ldr	r2, [r3, #4]
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	685b      	ldr	r3, [r3, #4]
 800c0b0:	441a      	add	r2, r3
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	685b      	ldr	r3, [r3, #4]
 800c0c2:	68ba      	ldr	r2, [r7, #8]
 800c0c4:	441a      	add	r2, r3
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	429a      	cmp	r2, r3
 800c0cc:	d118      	bne.n	800c100 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	681a      	ldr	r2, [r3, #0]
 800c0d2:	4b15      	ldr	r3, [pc, #84]	; (800c128 <prvInsertBlockIntoFreeList+0xb0>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	429a      	cmp	r2, r3
 800c0d8:	d00d      	beq.n	800c0f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	685a      	ldr	r2, [r3, #4]
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	685b      	ldr	r3, [r3, #4]
 800c0e4:	441a      	add	r2, r3
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	681a      	ldr	r2, [r3, #0]
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	601a      	str	r2, [r3, #0]
 800c0f4:	e008      	b.n	800c108 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c0f6:	4b0c      	ldr	r3, [pc, #48]	; (800c128 <prvInsertBlockIntoFreeList+0xb0>)
 800c0f8:	681a      	ldr	r2, [r3, #0]
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	601a      	str	r2, [r3, #0]
 800c0fe:	e003      	b.n	800c108 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	681a      	ldr	r2, [r3, #0]
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c108:	68fa      	ldr	r2, [r7, #12]
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	429a      	cmp	r2, r3
 800c10e:	d002      	beq.n	800c116 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	687a      	ldr	r2, [r7, #4]
 800c114:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c116:	bf00      	nop
 800c118:	3714      	adds	r7, #20
 800c11a:	46bd      	mov	sp, r7
 800c11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c120:	4770      	bx	lr
 800c122:	bf00      	nop
 800c124:	2000409c 	.word	0x2000409c
 800c128:	200040a4 	.word	0x200040a4

0800c12c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800c130:	2201      	movs	r2, #1
 800c132:	490e      	ldr	r1, [pc, #56]	; (800c16c <MX_USB_HOST_Init+0x40>)
 800c134:	480e      	ldr	r0, [pc, #56]	; (800c170 <MX_USB_HOST_Init+0x44>)
 800c136:	f7fb ffd5 	bl	80080e4 <USBH_Init>
 800c13a:	4603      	mov	r3, r0
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d001      	beq.n	800c144 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c140:	f7f4 fdd8 	bl	8000cf4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800c144:	490b      	ldr	r1, [pc, #44]	; (800c174 <MX_USB_HOST_Init+0x48>)
 800c146:	480a      	ldr	r0, [pc, #40]	; (800c170 <MX_USB_HOST_Init+0x44>)
 800c148:	f7fc f882 	bl	8008250 <USBH_RegisterClass>
 800c14c:	4603      	mov	r3, r0
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d001      	beq.n	800c156 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800c152:	f7f4 fdcf 	bl	8000cf4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800c156:	4806      	ldr	r0, [pc, #24]	; (800c170 <MX_USB_HOST_Init+0x44>)
 800c158:	f7fc f906 	bl	8008368 <USBH_Start>
 800c15c:	4603      	mov	r3, r0
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d001      	beq.n	800c166 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800c162:	f7f4 fdc7 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c166:	bf00      	nop
 800c168:	bd80      	pop	{r7, pc}
 800c16a:	bf00      	nop
 800c16c:	0800c179 	.word	0x0800c179
 800c170:	20004474 	.word	0x20004474
 800c174:	2000000c 	.word	0x2000000c

0800c178 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c178:	b480      	push	{r7}
 800c17a:	b083      	sub	sp, #12
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
 800c180:	460b      	mov	r3, r1
 800c182:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c184:	78fb      	ldrb	r3, [r7, #3]
 800c186:	3b01      	subs	r3, #1
 800c188:	2b04      	cmp	r3, #4
 800c18a:	d819      	bhi.n	800c1c0 <USBH_UserProcess+0x48>
 800c18c:	a201      	add	r2, pc, #4	; (adr r2, 800c194 <USBH_UserProcess+0x1c>)
 800c18e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c192:	bf00      	nop
 800c194:	0800c1c1 	.word	0x0800c1c1
 800c198:	0800c1b1 	.word	0x0800c1b1
 800c19c:	0800c1c1 	.word	0x0800c1c1
 800c1a0:	0800c1b9 	.word	0x0800c1b9
 800c1a4:	0800c1a9 	.word	0x0800c1a9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c1a8:	4b09      	ldr	r3, [pc, #36]	; (800c1d0 <USBH_UserProcess+0x58>)
 800c1aa:	2203      	movs	r2, #3
 800c1ac:	701a      	strb	r2, [r3, #0]
  break;
 800c1ae:	e008      	b.n	800c1c2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c1b0:	4b07      	ldr	r3, [pc, #28]	; (800c1d0 <USBH_UserProcess+0x58>)
 800c1b2:	2202      	movs	r2, #2
 800c1b4:	701a      	strb	r2, [r3, #0]
  break;
 800c1b6:	e004      	b.n	800c1c2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800c1b8:	4b05      	ldr	r3, [pc, #20]	; (800c1d0 <USBH_UserProcess+0x58>)
 800c1ba:	2201      	movs	r2, #1
 800c1bc:	701a      	strb	r2, [r3, #0]
  break;
 800c1be:	e000      	b.n	800c1c2 <USBH_UserProcess+0x4a>

  default:
  break;
 800c1c0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c1c2:	bf00      	nop
 800c1c4:	370c      	adds	r7, #12
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1cc:	4770      	bx	lr
 800c1ce:	bf00      	nop
 800c1d0:	200040bc 	.word	0x200040bc

0800c1d4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b08a      	sub	sp, #40	; 0x28
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c1dc:	f107 0314 	add.w	r3, r7, #20
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	601a      	str	r2, [r3, #0]
 800c1e4:	605a      	str	r2, [r3, #4]
 800c1e6:	609a      	str	r2, [r3, #8]
 800c1e8:	60da      	str	r2, [r3, #12]
 800c1ea:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c1f4:	d147      	bne.n	800c286 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	613b      	str	r3, [r7, #16]
 800c1fa:	4b25      	ldr	r3, [pc, #148]	; (800c290 <HAL_HCD_MspInit+0xbc>)
 800c1fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1fe:	4a24      	ldr	r2, [pc, #144]	; (800c290 <HAL_HCD_MspInit+0xbc>)
 800c200:	f043 0301 	orr.w	r3, r3, #1
 800c204:	6313      	str	r3, [r2, #48]	; 0x30
 800c206:	4b22      	ldr	r3, [pc, #136]	; (800c290 <HAL_HCD_MspInit+0xbc>)
 800c208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c20a:	f003 0301 	and.w	r3, r3, #1
 800c20e:	613b      	str	r3, [r7, #16]
 800c210:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800c212:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c216:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c218:	2300      	movs	r3, #0
 800c21a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c21c:	2300      	movs	r3, #0
 800c21e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800c220:	f107 0314 	add.w	r3, r7, #20
 800c224:	4619      	mov	r1, r3
 800c226:	481b      	ldr	r0, [pc, #108]	; (800c294 <HAL_HCD_MspInit+0xc0>)
 800c228:	f7f6 fba2 	bl	8002970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800c22c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800c230:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c232:	2302      	movs	r3, #2
 800c234:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c236:	2300      	movs	r3, #0
 800c238:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c23a:	2300      	movs	r3, #0
 800c23c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c23e:	230a      	movs	r3, #10
 800c240:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c242:	f107 0314 	add.w	r3, r7, #20
 800c246:	4619      	mov	r1, r3
 800c248:	4812      	ldr	r0, [pc, #72]	; (800c294 <HAL_HCD_MspInit+0xc0>)
 800c24a:	f7f6 fb91 	bl	8002970 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c24e:	4b10      	ldr	r3, [pc, #64]	; (800c290 <HAL_HCD_MspInit+0xbc>)
 800c250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c252:	4a0f      	ldr	r2, [pc, #60]	; (800c290 <HAL_HCD_MspInit+0xbc>)
 800c254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c258:	6353      	str	r3, [r2, #52]	; 0x34
 800c25a:	2300      	movs	r3, #0
 800c25c:	60fb      	str	r3, [r7, #12]
 800c25e:	4b0c      	ldr	r3, [pc, #48]	; (800c290 <HAL_HCD_MspInit+0xbc>)
 800c260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c262:	4a0b      	ldr	r2, [pc, #44]	; (800c290 <HAL_HCD_MspInit+0xbc>)
 800c264:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c268:	6453      	str	r3, [r2, #68]	; 0x44
 800c26a:	4b09      	ldr	r3, [pc, #36]	; (800c290 <HAL_HCD_MspInit+0xbc>)
 800c26c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c26e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c272:	60fb      	str	r3, [r7, #12]
 800c274:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800c276:	2200      	movs	r2, #0
 800c278:	2105      	movs	r1, #5
 800c27a:	2043      	movs	r0, #67	; 0x43
 800c27c:	f7f6 f864 	bl	8002348 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c280:	2043      	movs	r0, #67	; 0x43
 800c282:	f7f6 f87d 	bl	8002380 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c286:	bf00      	nop
 800c288:	3728      	adds	r7, #40	; 0x28
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bd80      	pop	{r7, pc}
 800c28e:	bf00      	nop
 800c290:	40023800 	.word	0x40023800
 800c294:	40020000 	.word	0x40020000

0800c298 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b082      	sub	sp, #8
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f7fc fd0b 	bl	8008cc2 <USBH_LL_IncTimer>
}
 800c2ac:	bf00      	nop
 800c2ae:	3708      	adds	r7, #8
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}

0800c2b4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b082      	sub	sp, #8
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	f7fc fd4f 	bl	8008d66 <USBH_LL_Connect>
}
 800c2c8:	bf00      	nop
 800c2ca:	3708      	adds	r7, #8
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}

0800c2d0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b082      	sub	sp, #8
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c2de:	4618      	mov	r0, r3
 800c2e0:	f7fc fd64 	bl	8008dac <USBH_LL_Disconnect>
}
 800c2e4:	bf00      	nop
 800c2e6:	3708      	adds	r7, #8
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}

0800c2ec <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b082      	sub	sp, #8
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
 800c2f4:	460b      	mov	r3, r1
 800c2f6:	70fb      	strb	r3, [r7, #3]
 800c2f8:	4613      	mov	r3, r2
 800c2fa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c302:	4618      	mov	r0, r3
 800c304:	f7fc fd99 	bl	8008e3a <USBH_LL_NotifyURBChange>
#endif
}
 800c308:	bf00      	nop
 800c30a:	3708      	adds	r7, #8
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd80      	pop	{r7, pc}

0800c310 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b082      	sub	sp, #8
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c31e:	4618      	mov	r0, r3
 800c320:	f7fc fcf9 	bl	8008d16 <USBH_LL_PortEnabled>
}
 800c324:	bf00      	nop
 800c326:	3708      	adds	r7, #8
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}

0800c32c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b082      	sub	sp, #8
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c33a:	4618      	mov	r0, r3
 800c33c:	f7fc fd05 	bl	8008d4a <USBH_LL_PortDisabled>
}
 800c340:	bf00      	nop
 800c342:	3708      	adds	r7, #8
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}

0800c348 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b082      	sub	sp, #8
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c356:	2b01      	cmp	r3, #1
 800c358:	d12a      	bne.n	800c3b0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800c35a:	4a18      	ldr	r2, [pc, #96]	; (800c3bc <USBH_LL_Init+0x74>)
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	4a15      	ldr	r2, [pc, #84]	; (800c3bc <USBH_LL_Init+0x74>)
 800c366:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c36a:	4b14      	ldr	r3, [pc, #80]	; (800c3bc <USBH_LL_Init+0x74>)
 800c36c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c370:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800c372:	4b12      	ldr	r3, [pc, #72]	; (800c3bc <USBH_LL_Init+0x74>)
 800c374:	2208      	movs	r2, #8
 800c376:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800c378:	4b10      	ldr	r3, [pc, #64]	; (800c3bc <USBH_LL_Init+0x74>)
 800c37a:	2201      	movs	r2, #1
 800c37c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c37e:	4b0f      	ldr	r3, [pc, #60]	; (800c3bc <USBH_LL_Init+0x74>)
 800c380:	2200      	movs	r2, #0
 800c382:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800c384:	4b0d      	ldr	r3, [pc, #52]	; (800c3bc <USBH_LL_Init+0x74>)
 800c386:	2202      	movs	r2, #2
 800c388:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c38a:	4b0c      	ldr	r3, [pc, #48]	; (800c3bc <USBH_LL_Init+0x74>)
 800c38c:	2200      	movs	r2, #0
 800c38e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c390:	480a      	ldr	r0, [pc, #40]	; (800c3bc <USBH_LL_Init+0x74>)
 800c392:	f7f6 fca2 	bl	8002cda <HAL_HCD_Init>
 800c396:	4603      	mov	r3, r0
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d001      	beq.n	800c3a0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800c39c:	f7f4 fcaa 	bl	8000cf4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800c3a0:	4806      	ldr	r0, [pc, #24]	; (800c3bc <USBH_LL_Init+0x74>)
 800c3a2:	f7f7 f886 	bl	80034b2 <HAL_HCD_GetCurrentFrame>
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	4619      	mov	r1, r3
 800c3aa:	6878      	ldr	r0, [r7, #4]
 800c3ac:	f7fc fc7a 	bl	8008ca4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c3b0:	2300      	movs	r3, #0
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	3708      	adds	r7, #8
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}
 800c3ba:	bf00      	nop
 800c3bc:	20004858 	.word	0x20004858

0800c3c0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b084      	sub	sp, #16
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	f7f6 fff5 	bl	80033c6 <HAL_HCD_Start>
 800c3dc:	4603      	mov	r3, r0
 800c3de:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c3e0:	7bfb      	ldrb	r3, [r7, #15]
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	f000 f95c 	bl	800c6a0 <USBH_Get_USB_Status>
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	3710      	adds	r7, #16
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	bd80      	pop	{r7, pc}

0800c3f6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c3f6:	b580      	push	{r7, lr}
 800c3f8:	b084      	sub	sp, #16
 800c3fa:	af00      	add	r7, sp, #0
 800c3fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3fe:	2300      	movs	r3, #0
 800c400:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c402:	2300      	movs	r3, #0
 800c404:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c40c:	4618      	mov	r0, r3
 800c40e:	f7f6 fffd 	bl	800340c <HAL_HCD_Stop>
 800c412:	4603      	mov	r3, r0
 800c414:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c416:	7bfb      	ldrb	r3, [r7, #15]
 800c418:	4618      	mov	r0, r3
 800c41a:	f000 f941 	bl	800c6a0 <USBH_Get_USB_Status>
 800c41e:	4603      	mov	r3, r0
 800c420:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c422:	7bbb      	ldrb	r3, [r7, #14]
}
 800c424:	4618      	mov	r0, r3
 800c426:	3710      	adds	r7, #16
 800c428:	46bd      	mov	sp, r7
 800c42a:	bd80      	pop	{r7, pc}

0800c42c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b084      	sub	sp, #16
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c434:	2301      	movs	r3, #1
 800c436:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c43e:	4618      	mov	r0, r3
 800c440:	f7f7 f845 	bl	80034ce <HAL_HCD_GetCurrentSpeed>
 800c444:	4603      	mov	r3, r0
 800c446:	2b02      	cmp	r3, #2
 800c448:	d00c      	beq.n	800c464 <USBH_LL_GetSpeed+0x38>
 800c44a:	2b02      	cmp	r3, #2
 800c44c:	d80d      	bhi.n	800c46a <USBH_LL_GetSpeed+0x3e>
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d002      	beq.n	800c458 <USBH_LL_GetSpeed+0x2c>
 800c452:	2b01      	cmp	r3, #1
 800c454:	d003      	beq.n	800c45e <USBH_LL_GetSpeed+0x32>
 800c456:	e008      	b.n	800c46a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c458:	2300      	movs	r3, #0
 800c45a:	73fb      	strb	r3, [r7, #15]
    break;
 800c45c:	e008      	b.n	800c470 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c45e:	2301      	movs	r3, #1
 800c460:	73fb      	strb	r3, [r7, #15]
    break;
 800c462:	e005      	b.n	800c470 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c464:	2302      	movs	r3, #2
 800c466:	73fb      	strb	r3, [r7, #15]
    break;
 800c468:	e002      	b.n	800c470 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800c46a:	2301      	movs	r3, #1
 800c46c:	73fb      	strb	r3, [r7, #15]
    break;
 800c46e:	bf00      	nop
  }
  return  speed;
 800c470:	7bfb      	ldrb	r3, [r7, #15]
}
 800c472:	4618      	mov	r0, r3
 800c474:	3710      	adds	r7, #16
 800c476:	46bd      	mov	sp, r7
 800c478:	bd80      	pop	{r7, pc}

0800c47a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c47a:	b580      	push	{r7, lr}
 800c47c:	b084      	sub	sp, #16
 800c47e:	af00      	add	r7, sp, #0
 800c480:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c482:	2300      	movs	r3, #0
 800c484:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c486:	2300      	movs	r3, #0
 800c488:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c490:	4618      	mov	r0, r3
 800c492:	f7f6 ffd8 	bl	8003446 <HAL_HCD_ResetPort>
 800c496:	4603      	mov	r3, r0
 800c498:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c49a:	7bfb      	ldrb	r3, [r7, #15]
 800c49c:	4618      	mov	r0, r3
 800c49e:	f000 f8ff 	bl	800c6a0 <USBH_Get_USB_Status>
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c4a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	3710      	adds	r7, #16
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}

0800c4b0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b082      	sub	sp, #8
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
 800c4b8:	460b      	mov	r3, r1
 800c4ba:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c4c2:	78fa      	ldrb	r2, [r7, #3]
 800c4c4:	4611      	mov	r1, r2
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f7f6 ffdf 	bl	800348a <HAL_HCD_HC_GetXferCount>
 800c4cc:	4603      	mov	r3, r0
}
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	3708      	adds	r7, #8
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}

0800c4d6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c4d6:	b590      	push	{r4, r7, lr}
 800c4d8:	b089      	sub	sp, #36	; 0x24
 800c4da:	af04      	add	r7, sp, #16
 800c4dc:	6078      	str	r0, [r7, #4]
 800c4de:	4608      	mov	r0, r1
 800c4e0:	4611      	mov	r1, r2
 800c4e2:	461a      	mov	r2, r3
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	70fb      	strb	r3, [r7, #3]
 800c4e8:	460b      	mov	r3, r1
 800c4ea:	70bb      	strb	r3, [r7, #2]
 800c4ec:	4613      	mov	r3, r2
 800c4ee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c4fe:	787c      	ldrb	r4, [r7, #1]
 800c500:	78ba      	ldrb	r2, [r7, #2]
 800c502:	78f9      	ldrb	r1, [r7, #3]
 800c504:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c506:	9302      	str	r3, [sp, #8]
 800c508:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c50c:	9301      	str	r3, [sp, #4]
 800c50e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c512:	9300      	str	r3, [sp, #0]
 800c514:	4623      	mov	r3, r4
 800c516:	f7f6 fc42 	bl	8002d9e <HAL_HCD_HC_Init>
 800c51a:	4603      	mov	r3, r0
 800c51c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c51e:	7bfb      	ldrb	r3, [r7, #15]
 800c520:	4618      	mov	r0, r3
 800c522:	f000 f8bd 	bl	800c6a0 <USBH_Get_USB_Status>
 800c526:	4603      	mov	r3, r0
 800c528:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c52a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c52c:	4618      	mov	r0, r3
 800c52e:	3714      	adds	r7, #20
 800c530:	46bd      	mov	sp, r7
 800c532:	bd90      	pop	{r4, r7, pc}

0800c534 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b084      	sub	sp, #16
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
 800c53c:	460b      	mov	r3, r1
 800c53e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c540:	2300      	movs	r3, #0
 800c542:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c544:	2300      	movs	r3, #0
 800c546:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c54e:	78fa      	ldrb	r2, [r7, #3]
 800c550:	4611      	mov	r1, r2
 800c552:	4618      	mov	r0, r3
 800c554:	f7f6 fcb2 	bl	8002ebc <HAL_HCD_HC_Halt>
 800c558:	4603      	mov	r3, r0
 800c55a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c55c:	7bfb      	ldrb	r3, [r7, #15]
 800c55e:	4618      	mov	r0, r3
 800c560:	f000 f89e 	bl	800c6a0 <USBH_Get_USB_Status>
 800c564:	4603      	mov	r3, r0
 800c566:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c568:	7bbb      	ldrb	r3, [r7, #14]
}
 800c56a:	4618      	mov	r0, r3
 800c56c:	3710      	adds	r7, #16
 800c56e:	46bd      	mov	sp, r7
 800c570:	bd80      	pop	{r7, pc}

0800c572 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c572:	b590      	push	{r4, r7, lr}
 800c574:	b089      	sub	sp, #36	; 0x24
 800c576:	af04      	add	r7, sp, #16
 800c578:	6078      	str	r0, [r7, #4]
 800c57a:	4608      	mov	r0, r1
 800c57c:	4611      	mov	r1, r2
 800c57e:	461a      	mov	r2, r3
 800c580:	4603      	mov	r3, r0
 800c582:	70fb      	strb	r3, [r7, #3]
 800c584:	460b      	mov	r3, r1
 800c586:	70bb      	strb	r3, [r7, #2]
 800c588:	4613      	mov	r3, r2
 800c58a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c58c:	2300      	movs	r3, #0
 800c58e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c590:	2300      	movs	r3, #0
 800c592:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c59a:	787c      	ldrb	r4, [r7, #1]
 800c59c:	78ba      	ldrb	r2, [r7, #2]
 800c59e:	78f9      	ldrb	r1, [r7, #3]
 800c5a0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c5a4:	9303      	str	r3, [sp, #12]
 800c5a6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c5a8:	9302      	str	r3, [sp, #8]
 800c5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ac:	9301      	str	r3, [sp, #4]
 800c5ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c5b2:	9300      	str	r3, [sp, #0]
 800c5b4:	4623      	mov	r3, r4
 800c5b6:	f7f6 fca5 	bl	8002f04 <HAL_HCD_HC_SubmitRequest>
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c5be:	7bfb      	ldrb	r3, [r7, #15]
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	f000 f86d 	bl	800c6a0 <USBH_Get_USB_Status>
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c5ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	3714      	adds	r7, #20
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd90      	pop	{r4, r7, pc}

0800c5d4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b082      	sub	sp, #8
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
 800c5dc:	460b      	mov	r3, r1
 800c5de:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c5e6:	78fa      	ldrb	r2, [r7, #3]
 800c5e8:	4611      	mov	r1, r2
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f7f6 ff39 	bl	8003462 <HAL_HCD_HC_GetURBState>
 800c5f0:	4603      	mov	r3, r0
}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	3708      	adds	r7, #8
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}

0800c5fa <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c5fa:	b580      	push	{r7, lr}
 800c5fc:	b082      	sub	sp, #8
 800c5fe:	af00      	add	r7, sp, #0
 800c600:	6078      	str	r0, [r7, #4]
 800c602:	460b      	mov	r3, r1
 800c604:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c60c:	2b01      	cmp	r3, #1
 800c60e:	d103      	bne.n	800c618 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800c610:	78fb      	ldrb	r3, [r7, #3]
 800c612:	4618      	mov	r0, r3
 800c614:	f000 f870 	bl	800c6f8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c618:	20c8      	movs	r0, #200	; 0xc8
 800c61a:	f7f5 f823 	bl	8001664 <HAL_Delay>
  return USBH_OK;
 800c61e:	2300      	movs	r3, #0
}
 800c620:	4618      	mov	r0, r3
 800c622:	3708      	adds	r7, #8
 800c624:	46bd      	mov	sp, r7
 800c626:	bd80      	pop	{r7, pc}

0800c628 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c628:	b480      	push	{r7}
 800c62a:	b085      	sub	sp, #20
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
 800c630:	460b      	mov	r3, r1
 800c632:	70fb      	strb	r3, [r7, #3]
 800c634:	4613      	mov	r3, r2
 800c636:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c63e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c640:	78fb      	ldrb	r3, [r7, #3]
 800c642:	68fa      	ldr	r2, [r7, #12]
 800c644:	212c      	movs	r1, #44	; 0x2c
 800c646:	fb01 f303 	mul.w	r3, r1, r3
 800c64a:	4413      	add	r3, r2
 800c64c:	333b      	adds	r3, #59	; 0x3b
 800c64e:	781b      	ldrb	r3, [r3, #0]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d009      	beq.n	800c668 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c654:	78fb      	ldrb	r3, [r7, #3]
 800c656:	68fa      	ldr	r2, [r7, #12]
 800c658:	212c      	movs	r1, #44	; 0x2c
 800c65a:	fb01 f303 	mul.w	r3, r1, r3
 800c65e:	4413      	add	r3, r2
 800c660:	3354      	adds	r3, #84	; 0x54
 800c662:	78ba      	ldrb	r2, [r7, #2]
 800c664:	701a      	strb	r2, [r3, #0]
 800c666:	e008      	b.n	800c67a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c668:	78fb      	ldrb	r3, [r7, #3]
 800c66a:	68fa      	ldr	r2, [r7, #12]
 800c66c:	212c      	movs	r1, #44	; 0x2c
 800c66e:	fb01 f303 	mul.w	r3, r1, r3
 800c672:	4413      	add	r3, r2
 800c674:	3355      	adds	r3, #85	; 0x55
 800c676:	78ba      	ldrb	r2, [r7, #2]
 800c678:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c67a:	2300      	movs	r3, #0
}
 800c67c:	4618      	mov	r0, r3
 800c67e:	3714      	adds	r7, #20
 800c680:	46bd      	mov	sp, r7
 800c682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c686:	4770      	bx	lr

0800c688 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b082      	sub	sp, #8
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c690:	6878      	ldr	r0, [r7, #4]
 800c692:	f7f4 ffe7 	bl	8001664 <HAL_Delay>
}
 800c696:	bf00      	nop
 800c698:	3708      	adds	r7, #8
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd80      	pop	{r7, pc}
	...

0800c6a0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c6a0:	b480      	push	{r7}
 800c6a2:	b085      	sub	sp, #20
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c6ae:	79fb      	ldrb	r3, [r7, #7]
 800c6b0:	2b03      	cmp	r3, #3
 800c6b2:	d817      	bhi.n	800c6e4 <USBH_Get_USB_Status+0x44>
 800c6b4:	a201      	add	r2, pc, #4	; (adr r2, 800c6bc <USBH_Get_USB_Status+0x1c>)
 800c6b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6ba:	bf00      	nop
 800c6bc:	0800c6cd 	.word	0x0800c6cd
 800c6c0:	0800c6d3 	.word	0x0800c6d3
 800c6c4:	0800c6d9 	.word	0x0800c6d9
 800c6c8:	0800c6df 	.word	0x0800c6df
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	73fb      	strb	r3, [r7, #15]
    break;
 800c6d0:	e00b      	b.n	800c6ea <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c6d2:	2302      	movs	r3, #2
 800c6d4:	73fb      	strb	r3, [r7, #15]
    break;
 800c6d6:	e008      	b.n	800c6ea <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c6d8:	2301      	movs	r3, #1
 800c6da:	73fb      	strb	r3, [r7, #15]
    break;
 800c6dc:	e005      	b.n	800c6ea <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c6de:	2302      	movs	r3, #2
 800c6e0:	73fb      	strb	r3, [r7, #15]
    break;
 800c6e2:	e002      	b.n	800c6ea <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c6e4:	2302      	movs	r3, #2
 800c6e6:	73fb      	strb	r3, [r7, #15]
    break;
 800c6e8:	bf00      	nop
  }
  return usb_status;
 800c6ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	3714      	adds	r7, #20
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f6:	4770      	bx	lr

0800c6f8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b084      	sub	sp, #16
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	4603      	mov	r3, r0
 800c700:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800c702:	79fb      	ldrb	r3, [r7, #7]
 800c704:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800c706:	79fb      	ldrb	r3, [r7, #7]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d102      	bne.n	800c712 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800c70c:	2301      	movs	r3, #1
 800c70e:	73fb      	strb	r3, [r7, #15]
 800c710:	e001      	b.n	800c716 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800c712:	2300      	movs	r3, #0
 800c714:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800c716:	7bfb      	ldrb	r3, [r7, #15]
 800c718:	461a      	mov	r2, r3
 800c71a:	2101      	movs	r1, #1
 800c71c:	4803      	ldr	r0, [pc, #12]	; (800c72c <MX_DriverVbusFS+0x34>)
 800c71e:	f7f6 fac3 	bl	8002ca8 <HAL_GPIO_WritePin>
}
 800c722:	bf00      	nop
 800c724:	3710      	adds	r7, #16
 800c726:	46bd      	mov	sp, r7
 800c728:	bd80      	pop	{r7, pc}
 800c72a:	bf00      	nop
 800c72c:	40020800 	.word	0x40020800

0800c730 <__errno>:
 800c730:	4b01      	ldr	r3, [pc, #4]	; (800c738 <__errno+0x8>)
 800c732:	6818      	ldr	r0, [r3, #0]
 800c734:	4770      	bx	lr
 800c736:	bf00      	nop
 800c738:	20000030 	.word	0x20000030

0800c73c <__libc_init_array>:
 800c73c:	b570      	push	{r4, r5, r6, lr}
 800c73e:	4d0d      	ldr	r5, [pc, #52]	; (800c774 <__libc_init_array+0x38>)
 800c740:	4c0d      	ldr	r4, [pc, #52]	; (800c778 <__libc_init_array+0x3c>)
 800c742:	1b64      	subs	r4, r4, r5
 800c744:	10a4      	asrs	r4, r4, #2
 800c746:	2600      	movs	r6, #0
 800c748:	42a6      	cmp	r6, r4
 800c74a:	d109      	bne.n	800c760 <__libc_init_array+0x24>
 800c74c:	4d0b      	ldr	r5, [pc, #44]	; (800c77c <__libc_init_array+0x40>)
 800c74e:	4c0c      	ldr	r4, [pc, #48]	; (800c780 <__libc_init_array+0x44>)
 800c750:	f000 f970 	bl	800ca34 <_init>
 800c754:	1b64      	subs	r4, r4, r5
 800c756:	10a4      	asrs	r4, r4, #2
 800c758:	2600      	movs	r6, #0
 800c75a:	42a6      	cmp	r6, r4
 800c75c:	d105      	bne.n	800c76a <__libc_init_array+0x2e>
 800c75e:	bd70      	pop	{r4, r5, r6, pc}
 800c760:	f855 3b04 	ldr.w	r3, [r5], #4
 800c764:	4798      	blx	r3
 800c766:	3601      	adds	r6, #1
 800c768:	e7ee      	b.n	800c748 <__libc_init_array+0xc>
 800c76a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c76e:	4798      	blx	r3
 800c770:	3601      	adds	r6, #1
 800c772:	e7f2      	b.n	800c75a <__libc_init_array+0x1e>
 800c774:	0800cb64 	.word	0x0800cb64
 800c778:	0800cb64 	.word	0x0800cb64
 800c77c:	0800cb64 	.word	0x0800cb64
 800c780:	0800cb68 	.word	0x0800cb68

0800c784 <__retarget_lock_acquire_recursive>:
 800c784:	4770      	bx	lr

0800c786 <__retarget_lock_release_recursive>:
 800c786:	4770      	bx	lr

0800c788 <malloc>:
 800c788:	4b02      	ldr	r3, [pc, #8]	; (800c794 <malloc+0xc>)
 800c78a:	4601      	mov	r1, r0
 800c78c:	6818      	ldr	r0, [r3, #0]
 800c78e:	f000 b871 	b.w	800c874 <_malloc_r>
 800c792:	bf00      	nop
 800c794:	20000030 	.word	0x20000030

0800c798 <free>:
 800c798:	4b02      	ldr	r3, [pc, #8]	; (800c7a4 <free+0xc>)
 800c79a:	4601      	mov	r1, r0
 800c79c:	6818      	ldr	r0, [r3, #0]
 800c79e:	f000 b819 	b.w	800c7d4 <_free_r>
 800c7a2:	bf00      	nop
 800c7a4:	20000030 	.word	0x20000030

0800c7a8 <memcpy>:
 800c7a8:	440a      	add	r2, r1
 800c7aa:	4291      	cmp	r1, r2
 800c7ac:	f100 33ff 	add.w	r3, r0, #4294967295
 800c7b0:	d100      	bne.n	800c7b4 <memcpy+0xc>
 800c7b2:	4770      	bx	lr
 800c7b4:	b510      	push	{r4, lr}
 800c7b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c7ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c7be:	4291      	cmp	r1, r2
 800c7c0:	d1f9      	bne.n	800c7b6 <memcpy+0xe>
 800c7c2:	bd10      	pop	{r4, pc}

0800c7c4 <memset>:
 800c7c4:	4402      	add	r2, r0
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	4293      	cmp	r3, r2
 800c7ca:	d100      	bne.n	800c7ce <memset+0xa>
 800c7cc:	4770      	bx	lr
 800c7ce:	f803 1b01 	strb.w	r1, [r3], #1
 800c7d2:	e7f9      	b.n	800c7c8 <memset+0x4>

0800c7d4 <_free_r>:
 800c7d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c7d6:	2900      	cmp	r1, #0
 800c7d8:	d048      	beq.n	800c86c <_free_r+0x98>
 800c7da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7de:	9001      	str	r0, [sp, #4]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	f1a1 0404 	sub.w	r4, r1, #4
 800c7e6:	bfb8      	it	lt
 800c7e8:	18e4      	addlt	r4, r4, r3
 800c7ea:	f000 f917 	bl	800ca1c <__malloc_lock>
 800c7ee:	4a20      	ldr	r2, [pc, #128]	; (800c870 <_free_r+0x9c>)
 800c7f0:	9801      	ldr	r0, [sp, #4]
 800c7f2:	6813      	ldr	r3, [r2, #0]
 800c7f4:	4615      	mov	r5, r2
 800c7f6:	b933      	cbnz	r3, 800c806 <_free_r+0x32>
 800c7f8:	6063      	str	r3, [r4, #4]
 800c7fa:	6014      	str	r4, [r2, #0]
 800c7fc:	b003      	add	sp, #12
 800c7fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c802:	f000 b911 	b.w	800ca28 <__malloc_unlock>
 800c806:	42a3      	cmp	r3, r4
 800c808:	d90b      	bls.n	800c822 <_free_r+0x4e>
 800c80a:	6821      	ldr	r1, [r4, #0]
 800c80c:	1862      	adds	r2, r4, r1
 800c80e:	4293      	cmp	r3, r2
 800c810:	bf04      	itt	eq
 800c812:	681a      	ldreq	r2, [r3, #0]
 800c814:	685b      	ldreq	r3, [r3, #4]
 800c816:	6063      	str	r3, [r4, #4]
 800c818:	bf04      	itt	eq
 800c81a:	1852      	addeq	r2, r2, r1
 800c81c:	6022      	streq	r2, [r4, #0]
 800c81e:	602c      	str	r4, [r5, #0]
 800c820:	e7ec      	b.n	800c7fc <_free_r+0x28>
 800c822:	461a      	mov	r2, r3
 800c824:	685b      	ldr	r3, [r3, #4]
 800c826:	b10b      	cbz	r3, 800c82c <_free_r+0x58>
 800c828:	42a3      	cmp	r3, r4
 800c82a:	d9fa      	bls.n	800c822 <_free_r+0x4e>
 800c82c:	6811      	ldr	r1, [r2, #0]
 800c82e:	1855      	adds	r5, r2, r1
 800c830:	42a5      	cmp	r5, r4
 800c832:	d10b      	bne.n	800c84c <_free_r+0x78>
 800c834:	6824      	ldr	r4, [r4, #0]
 800c836:	4421      	add	r1, r4
 800c838:	1854      	adds	r4, r2, r1
 800c83a:	42a3      	cmp	r3, r4
 800c83c:	6011      	str	r1, [r2, #0]
 800c83e:	d1dd      	bne.n	800c7fc <_free_r+0x28>
 800c840:	681c      	ldr	r4, [r3, #0]
 800c842:	685b      	ldr	r3, [r3, #4]
 800c844:	6053      	str	r3, [r2, #4]
 800c846:	4421      	add	r1, r4
 800c848:	6011      	str	r1, [r2, #0]
 800c84a:	e7d7      	b.n	800c7fc <_free_r+0x28>
 800c84c:	d902      	bls.n	800c854 <_free_r+0x80>
 800c84e:	230c      	movs	r3, #12
 800c850:	6003      	str	r3, [r0, #0]
 800c852:	e7d3      	b.n	800c7fc <_free_r+0x28>
 800c854:	6825      	ldr	r5, [r4, #0]
 800c856:	1961      	adds	r1, r4, r5
 800c858:	428b      	cmp	r3, r1
 800c85a:	bf04      	itt	eq
 800c85c:	6819      	ldreq	r1, [r3, #0]
 800c85e:	685b      	ldreq	r3, [r3, #4]
 800c860:	6063      	str	r3, [r4, #4]
 800c862:	bf04      	itt	eq
 800c864:	1949      	addeq	r1, r1, r5
 800c866:	6021      	streq	r1, [r4, #0]
 800c868:	6054      	str	r4, [r2, #4]
 800c86a:	e7c7      	b.n	800c7fc <_free_r+0x28>
 800c86c:	b003      	add	sp, #12
 800c86e:	bd30      	pop	{r4, r5, pc}
 800c870:	200040c0 	.word	0x200040c0

0800c874 <_malloc_r>:
 800c874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c876:	1ccd      	adds	r5, r1, #3
 800c878:	f025 0503 	bic.w	r5, r5, #3
 800c87c:	3508      	adds	r5, #8
 800c87e:	2d0c      	cmp	r5, #12
 800c880:	bf38      	it	cc
 800c882:	250c      	movcc	r5, #12
 800c884:	2d00      	cmp	r5, #0
 800c886:	4606      	mov	r6, r0
 800c888:	db01      	blt.n	800c88e <_malloc_r+0x1a>
 800c88a:	42a9      	cmp	r1, r5
 800c88c:	d903      	bls.n	800c896 <_malloc_r+0x22>
 800c88e:	230c      	movs	r3, #12
 800c890:	6033      	str	r3, [r6, #0]
 800c892:	2000      	movs	r0, #0
 800c894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c896:	f000 f8c1 	bl	800ca1c <__malloc_lock>
 800c89a:	4921      	ldr	r1, [pc, #132]	; (800c920 <_malloc_r+0xac>)
 800c89c:	680a      	ldr	r2, [r1, #0]
 800c89e:	4614      	mov	r4, r2
 800c8a0:	b99c      	cbnz	r4, 800c8ca <_malloc_r+0x56>
 800c8a2:	4f20      	ldr	r7, [pc, #128]	; (800c924 <_malloc_r+0xb0>)
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	b923      	cbnz	r3, 800c8b2 <_malloc_r+0x3e>
 800c8a8:	4621      	mov	r1, r4
 800c8aa:	4630      	mov	r0, r6
 800c8ac:	f000 f8a6 	bl	800c9fc <_sbrk_r>
 800c8b0:	6038      	str	r0, [r7, #0]
 800c8b2:	4629      	mov	r1, r5
 800c8b4:	4630      	mov	r0, r6
 800c8b6:	f000 f8a1 	bl	800c9fc <_sbrk_r>
 800c8ba:	1c43      	adds	r3, r0, #1
 800c8bc:	d123      	bne.n	800c906 <_malloc_r+0x92>
 800c8be:	230c      	movs	r3, #12
 800c8c0:	6033      	str	r3, [r6, #0]
 800c8c2:	4630      	mov	r0, r6
 800c8c4:	f000 f8b0 	bl	800ca28 <__malloc_unlock>
 800c8c8:	e7e3      	b.n	800c892 <_malloc_r+0x1e>
 800c8ca:	6823      	ldr	r3, [r4, #0]
 800c8cc:	1b5b      	subs	r3, r3, r5
 800c8ce:	d417      	bmi.n	800c900 <_malloc_r+0x8c>
 800c8d0:	2b0b      	cmp	r3, #11
 800c8d2:	d903      	bls.n	800c8dc <_malloc_r+0x68>
 800c8d4:	6023      	str	r3, [r4, #0]
 800c8d6:	441c      	add	r4, r3
 800c8d8:	6025      	str	r5, [r4, #0]
 800c8da:	e004      	b.n	800c8e6 <_malloc_r+0x72>
 800c8dc:	6863      	ldr	r3, [r4, #4]
 800c8de:	42a2      	cmp	r2, r4
 800c8e0:	bf0c      	ite	eq
 800c8e2:	600b      	streq	r3, [r1, #0]
 800c8e4:	6053      	strne	r3, [r2, #4]
 800c8e6:	4630      	mov	r0, r6
 800c8e8:	f000 f89e 	bl	800ca28 <__malloc_unlock>
 800c8ec:	f104 000b 	add.w	r0, r4, #11
 800c8f0:	1d23      	adds	r3, r4, #4
 800c8f2:	f020 0007 	bic.w	r0, r0, #7
 800c8f6:	1ac2      	subs	r2, r0, r3
 800c8f8:	d0cc      	beq.n	800c894 <_malloc_r+0x20>
 800c8fa:	1a1b      	subs	r3, r3, r0
 800c8fc:	50a3      	str	r3, [r4, r2]
 800c8fe:	e7c9      	b.n	800c894 <_malloc_r+0x20>
 800c900:	4622      	mov	r2, r4
 800c902:	6864      	ldr	r4, [r4, #4]
 800c904:	e7cc      	b.n	800c8a0 <_malloc_r+0x2c>
 800c906:	1cc4      	adds	r4, r0, #3
 800c908:	f024 0403 	bic.w	r4, r4, #3
 800c90c:	42a0      	cmp	r0, r4
 800c90e:	d0e3      	beq.n	800c8d8 <_malloc_r+0x64>
 800c910:	1a21      	subs	r1, r4, r0
 800c912:	4630      	mov	r0, r6
 800c914:	f000 f872 	bl	800c9fc <_sbrk_r>
 800c918:	3001      	adds	r0, #1
 800c91a:	d1dd      	bne.n	800c8d8 <_malloc_r+0x64>
 800c91c:	e7cf      	b.n	800c8be <_malloc_r+0x4a>
 800c91e:	bf00      	nop
 800c920:	200040c0 	.word	0x200040c0
 800c924:	200040c4 	.word	0x200040c4

0800c928 <cleanup_glue>:
 800c928:	b538      	push	{r3, r4, r5, lr}
 800c92a:	460c      	mov	r4, r1
 800c92c:	6809      	ldr	r1, [r1, #0]
 800c92e:	4605      	mov	r5, r0
 800c930:	b109      	cbz	r1, 800c936 <cleanup_glue+0xe>
 800c932:	f7ff fff9 	bl	800c928 <cleanup_glue>
 800c936:	4621      	mov	r1, r4
 800c938:	4628      	mov	r0, r5
 800c93a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c93e:	f7ff bf49 	b.w	800c7d4 <_free_r>
	...

0800c944 <_reclaim_reent>:
 800c944:	4b2c      	ldr	r3, [pc, #176]	; (800c9f8 <_reclaim_reent+0xb4>)
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	4283      	cmp	r3, r0
 800c94a:	b570      	push	{r4, r5, r6, lr}
 800c94c:	4604      	mov	r4, r0
 800c94e:	d051      	beq.n	800c9f4 <_reclaim_reent+0xb0>
 800c950:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c952:	b143      	cbz	r3, 800c966 <_reclaim_reent+0x22>
 800c954:	68db      	ldr	r3, [r3, #12]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d14a      	bne.n	800c9f0 <_reclaim_reent+0xac>
 800c95a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c95c:	6819      	ldr	r1, [r3, #0]
 800c95e:	b111      	cbz	r1, 800c966 <_reclaim_reent+0x22>
 800c960:	4620      	mov	r0, r4
 800c962:	f7ff ff37 	bl	800c7d4 <_free_r>
 800c966:	6961      	ldr	r1, [r4, #20]
 800c968:	b111      	cbz	r1, 800c970 <_reclaim_reent+0x2c>
 800c96a:	4620      	mov	r0, r4
 800c96c:	f7ff ff32 	bl	800c7d4 <_free_r>
 800c970:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c972:	b111      	cbz	r1, 800c97a <_reclaim_reent+0x36>
 800c974:	4620      	mov	r0, r4
 800c976:	f7ff ff2d 	bl	800c7d4 <_free_r>
 800c97a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c97c:	b111      	cbz	r1, 800c984 <_reclaim_reent+0x40>
 800c97e:	4620      	mov	r0, r4
 800c980:	f7ff ff28 	bl	800c7d4 <_free_r>
 800c984:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c986:	b111      	cbz	r1, 800c98e <_reclaim_reent+0x4a>
 800c988:	4620      	mov	r0, r4
 800c98a:	f7ff ff23 	bl	800c7d4 <_free_r>
 800c98e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c990:	b111      	cbz	r1, 800c998 <_reclaim_reent+0x54>
 800c992:	4620      	mov	r0, r4
 800c994:	f7ff ff1e 	bl	800c7d4 <_free_r>
 800c998:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c99a:	b111      	cbz	r1, 800c9a2 <_reclaim_reent+0x5e>
 800c99c:	4620      	mov	r0, r4
 800c99e:	f7ff ff19 	bl	800c7d4 <_free_r>
 800c9a2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c9a4:	b111      	cbz	r1, 800c9ac <_reclaim_reent+0x68>
 800c9a6:	4620      	mov	r0, r4
 800c9a8:	f7ff ff14 	bl	800c7d4 <_free_r>
 800c9ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c9ae:	b111      	cbz	r1, 800c9b6 <_reclaim_reent+0x72>
 800c9b0:	4620      	mov	r0, r4
 800c9b2:	f7ff ff0f 	bl	800c7d4 <_free_r>
 800c9b6:	69a3      	ldr	r3, [r4, #24]
 800c9b8:	b1e3      	cbz	r3, 800c9f4 <_reclaim_reent+0xb0>
 800c9ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c9bc:	4620      	mov	r0, r4
 800c9be:	4798      	blx	r3
 800c9c0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c9c2:	b1b9      	cbz	r1, 800c9f4 <_reclaim_reent+0xb0>
 800c9c4:	4620      	mov	r0, r4
 800c9c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c9ca:	f7ff bfad 	b.w	800c928 <cleanup_glue>
 800c9ce:	5949      	ldr	r1, [r1, r5]
 800c9d0:	b941      	cbnz	r1, 800c9e4 <_reclaim_reent+0xa0>
 800c9d2:	3504      	adds	r5, #4
 800c9d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c9d6:	2d80      	cmp	r5, #128	; 0x80
 800c9d8:	68d9      	ldr	r1, [r3, #12]
 800c9da:	d1f8      	bne.n	800c9ce <_reclaim_reent+0x8a>
 800c9dc:	4620      	mov	r0, r4
 800c9de:	f7ff fef9 	bl	800c7d4 <_free_r>
 800c9e2:	e7ba      	b.n	800c95a <_reclaim_reent+0x16>
 800c9e4:	680e      	ldr	r6, [r1, #0]
 800c9e6:	4620      	mov	r0, r4
 800c9e8:	f7ff fef4 	bl	800c7d4 <_free_r>
 800c9ec:	4631      	mov	r1, r6
 800c9ee:	e7ef      	b.n	800c9d0 <_reclaim_reent+0x8c>
 800c9f0:	2500      	movs	r5, #0
 800c9f2:	e7ef      	b.n	800c9d4 <_reclaim_reent+0x90>
 800c9f4:	bd70      	pop	{r4, r5, r6, pc}
 800c9f6:	bf00      	nop
 800c9f8:	20000030 	.word	0x20000030

0800c9fc <_sbrk_r>:
 800c9fc:	b538      	push	{r3, r4, r5, lr}
 800c9fe:	4d06      	ldr	r5, [pc, #24]	; (800ca18 <_sbrk_r+0x1c>)
 800ca00:	2300      	movs	r3, #0
 800ca02:	4604      	mov	r4, r0
 800ca04:	4608      	mov	r0, r1
 800ca06:	602b      	str	r3, [r5, #0]
 800ca08:	f7f4 fd78 	bl	80014fc <_sbrk>
 800ca0c:	1c43      	adds	r3, r0, #1
 800ca0e:	d102      	bne.n	800ca16 <_sbrk_r+0x1a>
 800ca10:	682b      	ldr	r3, [r5, #0]
 800ca12:	b103      	cbz	r3, 800ca16 <_sbrk_r+0x1a>
 800ca14:	6023      	str	r3, [r4, #0]
 800ca16:	bd38      	pop	{r3, r4, r5, pc}
 800ca18:	20004b68 	.word	0x20004b68

0800ca1c <__malloc_lock>:
 800ca1c:	4801      	ldr	r0, [pc, #4]	; (800ca24 <__malloc_lock+0x8>)
 800ca1e:	f7ff beb1 	b.w	800c784 <__retarget_lock_acquire_recursive>
 800ca22:	bf00      	nop
 800ca24:	20004b60 	.word	0x20004b60

0800ca28 <__malloc_unlock>:
 800ca28:	4801      	ldr	r0, [pc, #4]	; (800ca30 <__malloc_unlock+0x8>)
 800ca2a:	f7ff beac 	b.w	800c786 <__retarget_lock_release_recursive>
 800ca2e:	bf00      	nop
 800ca30:	20004b60 	.word	0x20004b60

0800ca34 <_init>:
 800ca34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca36:	bf00      	nop
 800ca38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca3a:	bc08      	pop	{r3}
 800ca3c:	469e      	mov	lr, r3
 800ca3e:	4770      	bx	lr

0800ca40 <_fini>:
 800ca40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca42:	bf00      	nop
 800ca44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca46:	bc08      	pop	{r3}
 800ca48:	469e      	mov	lr, r3
 800ca4a:	4770      	bx	lr
