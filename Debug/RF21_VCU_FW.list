
RF21_VCU_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e5ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  0800e77c  0800e77c  0001e77c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e938  0800e938  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800e938  0800e938  0001e938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e940  0800e940  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e940  0800e940  0001e940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e944  0800e944  0001e944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800e948  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          00004b38  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004bcc  20004bcc  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00031ea0  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000060d3  00000000  00000000  00051f64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002198  00000000  00000000  00058038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001f88  00000000  00000000  0005a1d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a0de  00000000  00000000  0005c158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002b0f3  00000000  00000000  00086236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee880  00000000  00000000  000b1329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0019fba9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000094ec  00000000  00000000  0019fbfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e764 	.word	0x0800e764

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800e764 	.word	0x0800e764

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295
 800089c:	f04f 30ff 	movne.w	r0, #4294967295
 80008a0:	f000 b96e 	b.w	8000b80 <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9d08      	ldr	r5, [sp, #32]
 80008c2:	4604      	mov	r4, r0
 80008c4:	468c      	mov	ip, r1
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	f040 8083 	bne.w	80009d2 <__udivmoddi4+0x116>
 80008cc:	428a      	cmp	r2, r1
 80008ce:	4617      	mov	r7, r2
 80008d0:	d947      	bls.n	8000962 <__udivmoddi4+0xa6>
 80008d2:	fab2 f282 	clz	r2, r2
 80008d6:	b142      	cbz	r2, 80008ea <__udivmoddi4+0x2e>
 80008d8:	f1c2 0020 	rsb	r0, r2, #32
 80008dc:	fa24 f000 	lsr.w	r0, r4, r0
 80008e0:	4091      	lsls	r1, r2
 80008e2:	4097      	lsls	r7, r2
 80008e4:	ea40 0c01 	orr.w	ip, r0, r1
 80008e8:	4094      	lsls	r4, r2
 80008ea:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008ee:	0c23      	lsrs	r3, r4, #16
 80008f0:	fbbc f6f8 	udiv	r6, ip, r8
 80008f4:	fa1f fe87 	uxth.w	lr, r7
 80008f8:	fb08 c116 	mls	r1, r8, r6, ip
 80008fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000900:	fb06 f10e 	mul.w	r1, r6, lr
 8000904:	4299      	cmp	r1, r3
 8000906:	d909      	bls.n	800091c <__udivmoddi4+0x60>
 8000908:	18fb      	adds	r3, r7, r3
 800090a:	f106 30ff 	add.w	r0, r6, #4294967295
 800090e:	f080 8119 	bcs.w	8000b44 <__udivmoddi4+0x288>
 8000912:	4299      	cmp	r1, r3
 8000914:	f240 8116 	bls.w	8000b44 <__udivmoddi4+0x288>
 8000918:	3e02      	subs	r6, #2
 800091a:	443b      	add	r3, r7
 800091c:	1a5b      	subs	r3, r3, r1
 800091e:	b2a4      	uxth	r4, r4
 8000920:	fbb3 f0f8 	udiv	r0, r3, r8
 8000924:	fb08 3310 	mls	r3, r8, r0, r3
 8000928:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800092c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000930:	45a6      	cmp	lr, r4
 8000932:	d909      	bls.n	8000948 <__udivmoddi4+0x8c>
 8000934:	193c      	adds	r4, r7, r4
 8000936:	f100 33ff 	add.w	r3, r0, #4294967295
 800093a:	f080 8105 	bcs.w	8000b48 <__udivmoddi4+0x28c>
 800093e:	45a6      	cmp	lr, r4
 8000940:	f240 8102 	bls.w	8000b48 <__udivmoddi4+0x28c>
 8000944:	3802      	subs	r0, #2
 8000946:	443c      	add	r4, r7
 8000948:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800094c:	eba4 040e 	sub.w	r4, r4, lr
 8000950:	2600      	movs	r6, #0
 8000952:	b11d      	cbz	r5, 800095c <__udivmoddi4+0xa0>
 8000954:	40d4      	lsrs	r4, r2
 8000956:	2300      	movs	r3, #0
 8000958:	e9c5 4300 	strd	r4, r3, [r5]
 800095c:	4631      	mov	r1, r6
 800095e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000962:	b902      	cbnz	r2, 8000966 <__udivmoddi4+0xaa>
 8000964:	deff      	udf	#255	; 0xff
 8000966:	fab2 f282 	clz	r2, r2
 800096a:	2a00      	cmp	r2, #0
 800096c:	d150      	bne.n	8000a10 <__udivmoddi4+0x154>
 800096e:	1bcb      	subs	r3, r1, r7
 8000970:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000974:	fa1f f887 	uxth.w	r8, r7
 8000978:	2601      	movs	r6, #1
 800097a:	fbb3 fcfe 	udiv	ip, r3, lr
 800097e:	0c21      	lsrs	r1, r4, #16
 8000980:	fb0e 331c 	mls	r3, lr, ip, r3
 8000984:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000988:	fb08 f30c 	mul.w	r3, r8, ip
 800098c:	428b      	cmp	r3, r1
 800098e:	d907      	bls.n	80009a0 <__udivmoddi4+0xe4>
 8000990:	1879      	adds	r1, r7, r1
 8000992:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000996:	d202      	bcs.n	800099e <__udivmoddi4+0xe2>
 8000998:	428b      	cmp	r3, r1
 800099a:	f200 80e9 	bhi.w	8000b70 <__udivmoddi4+0x2b4>
 800099e:	4684      	mov	ip, r0
 80009a0:	1ac9      	subs	r1, r1, r3
 80009a2:	b2a3      	uxth	r3, r4
 80009a4:	fbb1 f0fe 	udiv	r0, r1, lr
 80009a8:	fb0e 1110 	mls	r1, lr, r0, r1
 80009ac:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80009b0:	fb08 f800 	mul.w	r8, r8, r0
 80009b4:	45a0      	cmp	r8, r4
 80009b6:	d907      	bls.n	80009c8 <__udivmoddi4+0x10c>
 80009b8:	193c      	adds	r4, r7, r4
 80009ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80009be:	d202      	bcs.n	80009c6 <__udivmoddi4+0x10a>
 80009c0:	45a0      	cmp	r8, r4
 80009c2:	f200 80d9 	bhi.w	8000b78 <__udivmoddi4+0x2bc>
 80009c6:	4618      	mov	r0, r3
 80009c8:	eba4 0408 	sub.w	r4, r4, r8
 80009cc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80009d0:	e7bf      	b.n	8000952 <__udivmoddi4+0x96>
 80009d2:	428b      	cmp	r3, r1
 80009d4:	d909      	bls.n	80009ea <__udivmoddi4+0x12e>
 80009d6:	2d00      	cmp	r5, #0
 80009d8:	f000 80b1 	beq.w	8000b3e <__udivmoddi4+0x282>
 80009dc:	2600      	movs	r6, #0
 80009de:	e9c5 0100 	strd	r0, r1, [r5]
 80009e2:	4630      	mov	r0, r6
 80009e4:	4631      	mov	r1, r6
 80009e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ea:	fab3 f683 	clz	r6, r3
 80009ee:	2e00      	cmp	r6, #0
 80009f0:	d14a      	bne.n	8000a88 <__udivmoddi4+0x1cc>
 80009f2:	428b      	cmp	r3, r1
 80009f4:	d302      	bcc.n	80009fc <__udivmoddi4+0x140>
 80009f6:	4282      	cmp	r2, r0
 80009f8:	f200 80b8 	bhi.w	8000b6c <__udivmoddi4+0x2b0>
 80009fc:	1a84      	subs	r4, r0, r2
 80009fe:	eb61 0103 	sbc.w	r1, r1, r3
 8000a02:	2001      	movs	r0, #1
 8000a04:	468c      	mov	ip, r1
 8000a06:	2d00      	cmp	r5, #0
 8000a08:	d0a8      	beq.n	800095c <__udivmoddi4+0xa0>
 8000a0a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a0e:	e7a5      	b.n	800095c <__udivmoddi4+0xa0>
 8000a10:	f1c2 0320 	rsb	r3, r2, #32
 8000a14:	fa20 f603 	lsr.w	r6, r0, r3
 8000a18:	4097      	lsls	r7, r2
 8000a1a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a1e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a22:	40d9      	lsrs	r1, r3
 8000a24:	4330      	orrs	r0, r6
 8000a26:	0c03      	lsrs	r3, r0, #16
 8000a28:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a2c:	fa1f f887 	uxth.w	r8, r7
 8000a30:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a38:	fb06 f108 	mul.w	r1, r6, r8
 8000a3c:	4299      	cmp	r1, r3
 8000a3e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a42:	d909      	bls.n	8000a58 <__udivmoddi4+0x19c>
 8000a44:	18fb      	adds	r3, r7, r3
 8000a46:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a4a:	f080 808d 	bcs.w	8000b68 <__udivmoddi4+0x2ac>
 8000a4e:	4299      	cmp	r1, r3
 8000a50:	f240 808a 	bls.w	8000b68 <__udivmoddi4+0x2ac>
 8000a54:	3e02      	subs	r6, #2
 8000a56:	443b      	add	r3, r7
 8000a58:	1a5b      	subs	r3, r3, r1
 8000a5a:	b281      	uxth	r1, r0
 8000a5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a68:	fb00 f308 	mul.w	r3, r0, r8
 8000a6c:	428b      	cmp	r3, r1
 8000a6e:	d907      	bls.n	8000a80 <__udivmoddi4+0x1c4>
 8000a70:	1879      	adds	r1, r7, r1
 8000a72:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a76:	d273      	bcs.n	8000b60 <__udivmoddi4+0x2a4>
 8000a78:	428b      	cmp	r3, r1
 8000a7a:	d971      	bls.n	8000b60 <__udivmoddi4+0x2a4>
 8000a7c:	3802      	subs	r0, #2
 8000a7e:	4439      	add	r1, r7
 8000a80:	1acb      	subs	r3, r1, r3
 8000a82:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a86:	e778      	b.n	800097a <__udivmoddi4+0xbe>
 8000a88:	f1c6 0c20 	rsb	ip, r6, #32
 8000a8c:	fa03 f406 	lsl.w	r4, r3, r6
 8000a90:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a94:	431c      	orrs	r4, r3
 8000a96:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000a9e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000aa2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000aa6:	431f      	orrs	r7, r3
 8000aa8:	0c3b      	lsrs	r3, r7, #16
 8000aaa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000aae:	fa1f f884 	uxth.w	r8, r4
 8000ab2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ab6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000aba:	fb09 fa08 	mul.w	sl, r9, r8
 8000abe:	458a      	cmp	sl, r1
 8000ac0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ac4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ac8:	d908      	bls.n	8000adc <__udivmoddi4+0x220>
 8000aca:	1861      	adds	r1, r4, r1
 8000acc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ad0:	d248      	bcs.n	8000b64 <__udivmoddi4+0x2a8>
 8000ad2:	458a      	cmp	sl, r1
 8000ad4:	d946      	bls.n	8000b64 <__udivmoddi4+0x2a8>
 8000ad6:	f1a9 0902 	sub.w	r9, r9, #2
 8000ada:	4421      	add	r1, r4
 8000adc:	eba1 010a 	sub.w	r1, r1, sl
 8000ae0:	b2bf      	uxth	r7, r7
 8000ae2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ae6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000aea:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000aee:	fb00 f808 	mul.w	r8, r0, r8
 8000af2:	45b8      	cmp	r8, r7
 8000af4:	d907      	bls.n	8000b06 <__udivmoddi4+0x24a>
 8000af6:	19e7      	adds	r7, r4, r7
 8000af8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000afc:	d22e      	bcs.n	8000b5c <__udivmoddi4+0x2a0>
 8000afe:	45b8      	cmp	r8, r7
 8000b00:	d92c      	bls.n	8000b5c <__udivmoddi4+0x2a0>
 8000b02:	3802      	subs	r0, #2
 8000b04:	4427      	add	r7, r4
 8000b06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b0a:	eba7 0708 	sub.w	r7, r7, r8
 8000b0e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b12:	454f      	cmp	r7, r9
 8000b14:	46c6      	mov	lr, r8
 8000b16:	4649      	mov	r1, r9
 8000b18:	d31a      	bcc.n	8000b50 <__udivmoddi4+0x294>
 8000b1a:	d017      	beq.n	8000b4c <__udivmoddi4+0x290>
 8000b1c:	b15d      	cbz	r5, 8000b36 <__udivmoddi4+0x27a>
 8000b1e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b22:	eb67 0701 	sbc.w	r7, r7, r1
 8000b26:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b2a:	40f2      	lsrs	r2, r6
 8000b2c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b30:	40f7      	lsrs	r7, r6
 8000b32:	e9c5 2700 	strd	r2, r7, [r5]
 8000b36:	2600      	movs	r6, #0
 8000b38:	4631      	mov	r1, r6
 8000b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3e:	462e      	mov	r6, r5
 8000b40:	4628      	mov	r0, r5
 8000b42:	e70b      	b.n	800095c <__udivmoddi4+0xa0>
 8000b44:	4606      	mov	r6, r0
 8000b46:	e6e9      	b.n	800091c <__udivmoddi4+0x60>
 8000b48:	4618      	mov	r0, r3
 8000b4a:	e6fd      	b.n	8000948 <__udivmoddi4+0x8c>
 8000b4c:	4543      	cmp	r3, r8
 8000b4e:	d2e5      	bcs.n	8000b1c <__udivmoddi4+0x260>
 8000b50:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b54:	eb69 0104 	sbc.w	r1, r9, r4
 8000b58:	3801      	subs	r0, #1
 8000b5a:	e7df      	b.n	8000b1c <__udivmoddi4+0x260>
 8000b5c:	4608      	mov	r0, r1
 8000b5e:	e7d2      	b.n	8000b06 <__udivmoddi4+0x24a>
 8000b60:	4660      	mov	r0, ip
 8000b62:	e78d      	b.n	8000a80 <__udivmoddi4+0x1c4>
 8000b64:	4681      	mov	r9, r0
 8000b66:	e7b9      	b.n	8000adc <__udivmoddi4+0x220>
 8000b68:	4666      	mov	r6, ip
 8000b6a:	e775      	b.n	8000a58 <__udivmoddi4+0x19c>
 8000b6c:	4630      	mov	r0, r6
 8000b6e:	e74a      	b.n	8000a06 <__udivmoddi4+0x14a>
 8000b70:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b74:	4439      	add	r1, r7
 8000b76:	e713      	b.n	80009a0 <__udivmoddi4+0xe4>
 8000b78:	3802      	subs	r0, #2
 8000b7a:	443c      	add	r4, r7
 8000b7c:	e724      	b.n	80009c8 <__udivmoddi4+0x10c>
 8000b7e:	bf00      	nop

08000b80 <__aeabi_idiv0>:
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop

08000b84 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	4a07      	ldr	r2, [pc, #28]	; (8000bb0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b94:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	4a06      	ldr	r2, [pc, #24]	; (8000bb4 <vApplicationGetIdleTaskMemory+0x30>)
 8000b9a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2280      	movs	r2, #128	; 0x80
 8000ba0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000ba2:	bf00      	nop
 8000ba4:	3714      	adds	r7, #20
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	200000b0 	.word	0x200000b0
 8000bb4:	20000164 	.word	0x20000164

08000bb8 <HAL_CAN_RxFifo0MsgPendingCallback>:
uint8_t TxData[8];
uint8_t RxData[8];

uint32_t TxMailbox;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]

	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8000bc0:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000bc2:	4a0b      	ldr	r2, [pc, #44]	; (8000bf0 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	f002 f929 	bl	8002e1e <HAL_CAN_GetRxMessage>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
		Error_Handler();
 8000bd2:	f000 fd3b 	bl	800164c <Error_Handler>
	}
	HAL_GPIO_WritePin(GPIOD, LD3_Pin, GPIO_PIN_SET);
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bdc:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000bde:	f003 fa8b 	bl	80040f8 <HAL_GPIO_WritePin>
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20004330 	.word	0x20004330
 8000bf0:	2000441c 	.word	0x2000441c
 8000bf4:	40020c00 	.word	0x40020c00

08000bf8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000bf8:	b5b0      	push	{r4, r5, r7, lr}
 8000bfa:	b096      	sub	sp, #88	; 0x58
 8000bfc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000bfe:	f001 f99b 	bl	8001f38 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000c02:	f000 f897 	bl	8000d34 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000c06:	f000 fb35 	bl	8001274 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000c0a:	f000 fa45 	bl	8001098 <MX_I2C1_Init>
	MX_I2S3_Init();
 8000c0e:	f000 fa71 	bl	80010f4 <MX_I2S3_Init>
	MX_SPI1_Init();
 8000c12:	f000 fa9f 	bl	8001154 <MX_SPI1_Init>
	MX_DMA_Init();
 8000c16:	f000 fafd 	bl	8001214 <MX_DMA_Init>
	MX_ADC1_Init();
 8000c1a:	f000 f8f5 	bl	8000e08 <MX_ADC1_Init>
	MX_USART2_UART_Init();
 8000c1e:	f000 facf 	bl	80011c0 <MX_USART2_UART_Init>
	MX_ADC2_Init();
 8000c22:	f000 f943 	bl	8000eac <MX_ADC2_Init>
	MX_ADC3_Init();
 8000c26:	f000 f993 	bl	8000f50 <MX_ADC3_Init>
	MX_CAN1_Init();
 8000c2a:	f000 f9e3 	bl	8000ff4 <MX_CAN1_Init>
	/* USER CODE BEGIN 2 */
	HAL_ADC_Start_DMA(&hadc1, &appsVal[0], 1); //start the ADC for APPS 1 in DMA mode
 8000c2e:	2201      	movs	r2, #1
 8000c30:	4932      	ldr	r1, [pc, #200]	; (8000cfc <main+0x104>)
 8000c32:	4833      	ldr	r0, [pc, #204]	; (8000d00 <main+0x108>)
 8000c34:	f001 fa2a 	bl	800208c <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc3, &bpsVal, 1); //start the ADC for Brake Pressure Sensor in DMA mode
 8000c38:	2201      	movs	r2, #1
 8000c3a:	4932      	ldr	r1, [pc, #200]	; (8000d04 <main+0x10c>)
 8000c3c:	4832      	ldr	r0, [pc, #200]	; (8000d08 <main+0x110>)
 8000c3e:	f001 fa25 	bl	800208c <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, &appsVal[1], 1); //start the ADC for APPS 2 in DMA mode
 8000c42:	2201      	movs	r2, #1
 8000c44:	4931      	ldr	r1, [pc, #196]	; (8000d0c <main+0x114>)
 8000c46:	4832      	ldr	r0, [pc, #200]	; (8000d10 <main+0x118>)
 8000c48:	f001 fa20 	bl	800208c <HAL_ADC_Start_DMA>

	//Start the CAN Bus
	HAL_CAN_Start(&hcan1);
 8000c4c:	4831      	ldr	r0, [pc, #196]	; (8000d14 <main+0x11c>)
 8000c4e:	f001 ffc7 	bl	8002be0 <HAL_CAN_Start>

	//Initialize the CAN RX Interrupt
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)
 8000c52:	2102      	movs	r1, #2
 8000c54:	482f      	ldr	r0, [pc, #188]	; (8000d14 <main+0x11c>)
 8000c56:	f002 f9f4 	bl	8003042 <HAL_CAN_ActivateNotification>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <main+0x6c>
			!= HAL_OK) {
		Error_Handler();
 8000c60:	f000 fcf4 	bl	800164c <Error_Handler>
	}

	//Setting Required Data Values for CAN frame
	TxHeader.DLC = 2;	//data length in bytes
 8000c64:	4b2c      	ldr	r3, [pc, #176]	; (8000d18 <main+0x120>)
 8000c66:	2202      	movs	r2, #2
 8000c68:	611a      	str	r2, [r3, #16]
	TxHeader.ExtId = 0;
 8000c6a:	4b2b      	ldr	r3, [pc, #172]	; (8000d18 <main+0x120>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	605a      	str	r2, [r3, #4]
	TxHeader.IDE = CAN_ID_STD; //specify standard CAN ID
 8000c70:	4b29      	ldr	r3, [pc, #164]	; (8000d18 <main+0x120>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA; //specifies we are sending a CAN frame
 8000c76:	4b28      	ldr	r3, [pc, #160]	; (8000d18 <main+0x120>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = 0x21;	//CAN ID of this device
 8000c7c:	4b26      	ldr	r3, [pc, #152]	; (8000d18 <main+0x120>)
 8000c7e:	2221      	movs	r2, #33	; 0x21
 8000c80:	601a      	str	r2, [r3, #0]
	TxHeader.TransmitGlobalTime = DISABLE;
 8000c82:	4b25      	ldr	r3, [pc, #148]	; (8000d18 <main+0x120>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	751a      	strb	r2, [r3, #20]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of ledTask */
	osThreadDef(ledTask, startLEDTask, osPriorityNormal, 0, 128);
 8000c88:	4b24      	ldr	r3, [pc, #144]	; (8000d1c <main+0x124>)
 8000c8a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000c8e:	461d      	mov	r5, r3
 8000c90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c94:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c98:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	ledTaskHandle = osThreadCreate(osThread(ledTask), NULL);
 8000c9c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f00a fb1d 	bl	800b2e2 <osThreadCreate>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	4a1d      	ldr	r2, [pc, #116]	; (8000d20 <main+0x128>)
 8000cac:	6013      	str	r3, [r2, #0]

	/* definition and creation of uartTask */
	osThreadDef(uartTask, startUART_Task, osPriorityNormal, 0, 256);
 8000cae:	4b1d      	ldr	r3, [pc, #116]	; (8000d24 <main+0x12c>)
 8000cb0:	f107 0420 	add.w	r4, r7, #32
 8000cb4:	461d      	mov	r5, r3
 8000cb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cbe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	uartTaskHandle = osThreadCreate(osThread(uartTask), NULL);
 8000cc2:	f107 0320 	add.w	r3, r7, #32
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f00a fb0a 	bl	800b2e2 <osThreadCreate>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	4a15      	ldr	r2, [pc, #84]	; (8000d28 <main+0x130>)
 8000cd2:	6013      	str	r3, [r2, #0]

	/* definition and creation of Torque_Command */
	osThreadDef(Torque_Command, startTorqueCommand, osPriorityRealtime, 0, 256);
 8000cd4:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <main+0x134>)
 8000cd6:	1d3c      	adds	r4, r7, #4
 8000cd8:	461d      	mov	r5, r3
 8000cda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cde:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ce2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Torque_CommandHandle = osThreadCreate(osThread(Torque_Command), NULL);
 8000ce6:	1d3b      	adds	r3, r7, #4
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4618      	mov	r0, r3
 8000cec:	f00a faf9 	bl	800b2e2 <osThreadCreate>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	4a0f      	ldr	r2, [pc, #60]	; (8000d30 <main+0x138>)
 8000cf4:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000cf6:	f00a faed 	bl	800b2d4 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000cfa:	e7fe      	b.n	8000cfa <main+0x102>
 8000cfc:	20004438 	.word	0x20004438
 8000d00:	200041d0 	.word	0x200041d0
 8000d04:	200042c0 	.word	0x200042c0
 8000d08:	20004218 	.word	0x20004218
 8000d0c:	2000443c 	.word	0x2000443c
 8000d10:	200040cc 	.word	0x200040cc
 8000d14:	200043dc 	.word	0x200043dc
 8000d18:	20004404 	.word	0x20004404
 8000d1c:	0800e7a0 	.word	0x0800e7a0
 8000d20:	20004168 	.word	0x20004168
 8000d24:	0800e7bc 	.word	0x0800e7bc
 8000d28:	200041cc 	.word	0x200041cc
 8000d2c:	0800e7d8 	.word	0x0800e7d8
 8000d30:	200040c8 	.word	0x200040c8

08000d34 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b094      	sub	sp, #80	; 0x50
 8000d38:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000d3a:	f107 0320 	add.w	r3, r7, #32
 8000d3e:	2230      	movs	r2, #48	; 0x30
 8000d40:	2100      	movs	r1, #0
 8000d42:	4618      	mov	r0, r3
 8000d44:	f00d f87e 	bl	800de44 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000d48:	f107 030c 	add.w	r3, r7, #12
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60bb      	str	r3, [r7, #8]
 8000d5c:	4b28      	ldr	r3, [pc, #160]	; (8000e00 <SystemClock_Config+0xcc>)
 8000d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d60:	4a27      	ldr	r2, [pc, #156]	; (8000e00 <SystemClock_Config+0xcc>)
 8000d62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d66:	6413      	str	r3, [r2, #64]	; 0x40
 8000d68:	4b25      	ldr	r3, [pc, #148]	; (8000e00 <SystemClock_Config+0xcc>)
 8000d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d74:	2300      	movs	r3, #0
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	4b22      	ldr	r3, [pc, #136]	; (8000e04 <SystemClock_Config+0xd0>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a21      	ldr	r2, [pc, #132]	; (8000e04 <SystemClock_Config+0xd0>)
 8000d7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d82:	6013      	str	r3, [r2, #0]
 8000d84:	4b1f      	ldr	r3, [pc, #124]	; (8000e04 <SystemClock_Config+0xd0>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d8c:	607b      	str	r3, [r7, #4]
 8000d8e:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d90:	2301      	movs	r3, #1
 8000d92:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d98:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d9e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000da2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000da4:	2308      	movs	r3, #8
 8000da6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000da8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000dac:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dae:	2302      	movs	r3, #2
 8000db0:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000db2:	2307      	movs	r3, #7
 8000db4:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000db6:	f107 0320 	add.w	r3, r7, #32
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f005 fd24 	bl	8006808 <HAL_RCC_OscConfig>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <SystemClock_Config+0x96>
		Error_Handler();
 8000dc6:	f000 fc41 	bl	800164c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000dca:	230f      	movs	r3, #15
 8000dcc:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000dd6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000dda:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ddc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000de0:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000de2:	f107 030c 	add.w	r3, r7, #12
 8000de6:	2105      	movs	r1, #5
 8000de8:	4618      	mov	r0, r3
 8000dea:	f005 ff85 	bl	8006cf8 <HAL_RCC_ClockConfig>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <SystemClock_Config+0xc4>
		Error_Handler();
 8000df4:	f000 fc2a 	bl	800164c <Error_Handler>
	}
}
 8000df8:	bf00      	nop
 8000dfa:	3750      	adds	r7, #80	; 0x50
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40007000 	.word	0x40007000

08000e08 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000e0e:	463b      	mov	r3, r7
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000e1a:	4b21      	ldr	r3, [pc, #132]	; (8000ea0 <MX_ADC1_Init+0x98>)
 8000e1c:	4a21      	ldr	r2, [pc, #132]	; (8000ea4 <MX_ADC1_Init+0x9c>)
 8000e1e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e20:	4b1f      	ldr	r3, [pc, #124]	; (8000ea0 <MX_ADC1_Init+0x98>)
 8000e22:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e26:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e28:	4b1d      	ldr	r3, [pc, #116]	; (8000ea0 <MX_ADC1_Init+0x98>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8000e2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ea0 <MX_ADC1_Init+0x98>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000e34:	4b1a      	ldr	r3, [pc, #104]	; (8000ea0 <MX_ADC1_Init+0x98>)
 8000e36:	2201      	movs	r2, #1
 8000e38:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e3a:	4b19      	ldr	r3, [pc, #100]	; (8000ea0 <MX_ADC1_Init+0x98>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e42:	4b17      	ldr	r3, [pc, #92]	; (8000ea0 <MX_ADC1_Init+0x98>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e48:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <MX_ADC1_Init+0x98>)
 8000e4a:	4a17      	ldr	r2, [pc, #92]	; (8000ea8 <MX_ADC1_Init+0xa0>)
 8000e4c:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e4e:	4b14      	ldr	r3, [pc, #80]	; (8000ea0 <MX_ADC1_Init+0x98>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8000e54:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <MX_ADC1_Init+0x98>)
 8000e56:	2201      	movs	r2, #1
 8000e58:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e5a:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <MX_ADC1_Init+0x98>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e62:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <MX_ADC1_Init+0x98>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000e68:	480d      	ldr	r0, [pc, #52]	; (8000ea0 <MX_ADC1_Init+0x98>)
 8000e6a:	f001 f8cb 	bl	8002004 <HAL_ADC_Init>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_ADC1_Init+0x70>
		Error_Handler();
 8000e74:	f000 fbea 	bl	800164c <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e80:	2300      	movs	r3, #0
 8000e82:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000e84:	463b      	mov	r3, r7
 8000e86:	4619      	mov	r1, r3
 8000e88:	4805      	ldr	r0, [pc, #20]	; (8000ea0 <MX_ADC1_Init+0x98>)
 8000e8a:	f001 fa2d 	bl	80022e8 <HAL_ADC_ConfigChannel>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_ADC1_Init+0x90>
		Error_Handler();
 8000e94:	f000 fbda 	bl	800164c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000e98:	bf00      	nop
 8000e9a:	3710      	adds	r7, #16
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	200041d0 	.word	0x200041d0
 8000ea4:	40012000 	.word	0x40012000
 8000ea8:	0f000001 	.word	0x0f000001

08000eac <MX_ADC2_Init>:
/**
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000eb2:	463b      	mov	r3, r7
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC2_Init 1 */

	/* USER CODE END ADC2_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc2.Instance = ADC2;
 8000ebe:	4b21      	ldr	r3, [pc, #132]	; (8000f44 <MX_ADC2_Init+0x98>)
 8000ec0:	4a21      	ldr	r2, [pc, #132]	; (8000f48 <MX_ADC2_Init+0x9c>)
 8000ec2:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ec4:	4b1f      	ldr	r3, [pc, #124]	; (8000f44 <MX_ADC2_Init+0x98>)
 8000ec6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000eca:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000ecc:	4b1d      	ldr	r3, [pc, #116]	; (8000f44 <MX_ADC2_Init+0x98>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
	hadc2.Init.ScanConvMode = DISABLE;
 8000ed2:	4b1c      	ldr	r3, [pc, #112]	; (8000f44 <MX_ADC2_Init+0x98>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	611a      	str	r2, [r3, #16]
	hadc2.Init.ContinuousConvMode = ENABLE;
 8000ed8:	4b1a      	ldr	r3, [pc, #104]	; (8000f44 <MX_ADC2_Init+0x98>)
 8000eda:	2201      	movs	r2, #1
 8000edc:	761a      	strb	r2, [r3, #24]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000ede:	4b19      	ldr	r3, [pc, #100]	; (8000f44 <MX_ADC2_Init+0x98>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ee6:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <MX_ADC2_Init+0x98>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000eec:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <MX_ADC2_Init+0x98>)
 8000eee:	4a17      	ldr	r2, [pc, #92]	; (8000f4c <MX_ADC2_Init+0xa0>)
 8000ef0:	629a      	str	r2, [r3, #40]	; 0x28
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ef2:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <MX_ADC2_Init+0x98>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	60da      	str	r2, [r3, #12]
	hadc2.Init.NbrOfConversion = 1;
 8000ef8:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <MX_ADC2_Init+0x98>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	61da      	str	r2, [r3, #28]
	hadc2.Init.DMAContinuousRequests = ENABLE;
 8000efe:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <MX_ADC2_Init+0x98>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f06:	4b0f      	ldr	r3, [pc, #60]	; (8000f44 <MX_ADC2_Init+0x98>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 8000f0c:	480d      	ldr	r0, [pc, #52]	; (8000f44 <MX_ADC2_Init+0x98>)
 8000f0e:	f001 f879 	bl	8002004 <HAL_ADC_Init>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_ADC2_Init+0x70>
		Error_Handler();
 8000f18:	f000 fb98 	bl	800164c <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000f20:	2301      	movs	r3, #1
 8000f22:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f24:	2300      	movs	r3, #0
 8000f26:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8000f28:	463b      	mov	r3, r7
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4805      	ldr	r0, [pc, #20]	; (8000f44 <MX_ADC2_Init+0x98>)
 8000f2e:	f001 f9db 	bl	80022e8 <HAL_ADC_ConfigChannel>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_ADC2_Init+0x90>
		Error_Handler();
 8000f38:	f000 fb88 	bl	800164c <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 8000f3c:	bf00      	nop
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	200040cc 	.word	0x200040cc
 8000f48:	40012100 	.word	0x40012100
 8000f4c:	0f000001 	.word	0x0f000001

08000f50 <MX_ADC3_Init>:
/**
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000f56:	463b      	mov	r3, r7
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC3_Init 1 */

	/* USER CODE END ADC3_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc3.Instance = ADC3;
 8000f62:	4b21      	ldr	r3, [pc, #132]	; (8000fe8 <MX_ADC3_Init+0x98>)
 8000f64:	4a21      	ldr	r2, [pc, #132]	; (8000fec <MX_ADC3_Init+0x9c>)
 8000f66:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f68:	4b1f      	ldr	r3, [pc, #124]	; (8000fe8 <MX_ADC3_Init+0x98>)
 8000f6a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f6e:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000f70:	4b1d      	ldr	r3, [pc, #116]	; (8000fe8 <MX_ADC3_Init+0x98>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = DISABLE;
 8000f76:	4b1c      	ldr	r3, [pc, #112]	; (8000fe8 <MX_ADC3_Init+0x98>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = ENABLE;
 8000f7c:	4b1a      	ldr	r3, [pc, #104]	; (8000fe8 <MX_ADC3_Init+0x98>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	761a      	strb	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000f82:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <MX_ADC3_Init+0x98>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f8a:	4b17      	ldr	r3, [pc, #92]	; (8000fe8 <MX_ADC3_Init+0x98>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f90:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <MX_ADC3_Init+0x98>)
 8000f92:	4a17      	ldr	r2, [pc, #92]	; (8000ff0 <MX_ADC3_Init+0xa0>)
 8000f94:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f96:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <MX_ADC3_Init+0x98>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 8000f9c:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <MX_ADC3_Init+0x98>)
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = ENABLE;
 8000fa2:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <MX_ADC3_Init+0x98>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000faa:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <MX_ADC3_Init+0x98>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 8000fb0:	480d      	ldr	r0, [pc, #52]	; (8000fe8 <MX_ADC3_Init+0x98>)
 8000fb2:	f001 f827 	bl	8002004 <HAL_ADC_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_ADC3_Init+0x70>
		Error_Handler();
 8000fbc:	f000 fb46 	bl	800164c <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_12;
 8000fc0:	230c      	movs	r3, #12
 8000fc2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8000fcc:	463b      	mov	r3, r7
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <MX_ADC3_Init+0x98>)
 8000fd2:	f001 f989 	bl	80022e8 <HAL_ADC_ConfigChannel>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_ADC3_Init+0x90>
		Error_Handler();
 8000fdc:	f000 fb36 	bl	800164c <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 8000fe0:	bf00      	nop
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20004218 	.word	0x20004218
 8000fec:	40012200 	.word	0x40012200
 8000ff0:	0f000001 	.word	0x0f000001

08000ff4 <MX_CAN1_Init>:
/**
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08a      	sub	sp, #40	; 0x28
 8000ff8:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 8000ffa:	4b25      	ldr	r3, [pc, #148]	; (8001090 <MX_CAN1_Init+0x9c>)
 8000ffc:	4a25      	ldr	r2, [pc, #148]	; (8001094 <MX_CAN1_Init+0xa0>)
 8000ffe:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 14;
 8001000:	4b23      	ldr	r3, [pc, #140]	; (8001090 <MX_CAN1_Init+0x9c>)
 8001002:	220e      	movs	r2, #14
 8001004:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001006:	4b22      	ldr	r3, [pc, #136]	; (8001090 <MX_CAN1_Init+0x9c>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800100c:	4b20      	ldr	r3, [pc, #128]	; (8001090 <MX_CAN1_Init+0x9c>)
 800100e:	2200      	movs	r2, #0
 8001010:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001012:	4b1f      	ldr	r3, [pc, #124]	; (8001090 <MX_CAN1_Init+0x9c>)
 8001014:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001018:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 800101a:	4b1d      	ldr	r3, [pc, #116]	; (8001090 <MX_CAN1_Init+0x9c>)
 800101c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001020:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8001022:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <MX_CAN1_Init+0x9c>)
 8001024:	2200      	movs	r2, #0
 8001026:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8001028:	4b19      	ldr	r3, [pc, #100]	; (8001090 <MX_CAN1_Init+0x9c>)
 800102a:	2200      	movs	r2, #0
 800102c:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 800102e:	4b18      	ldr	r3, [pc, #96]	; (8001090 <MX_CAN1_Init+0x9c>)
 8001030:	2200      	movs	r2, #0
 8001032:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8001034:	4b16      	ldr	r3, [pc, #88]	; (8001090 <MX_CAN1_Init+0x9c>)
 8001036:	2200      	movs	r2, #0
 8001038:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 800103a:	4b15      	ldr	r3, [pc, #84]	; (8001090 <MX_CAN1_Init+0x9c>)
 800103c:	2200      	movs	r2, #0
 800103e:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8001040:	4b13      	ldr	r3, [pc, #76]	; (8001090 <MX_CAN1_Init+0x9c>)
 8001042:	2200      	movs	r2, #0
 8001044:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 8001046:	4812      	ldr	r0, [pc, #72]	; (8001090 <MX_CAN1_Init+0x9c>)
 8001048:	f001 fbee 	bl	8002828 <HAL_CAN_Init>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_CAN1_Init+0x62>
		Error_Handler();
 8001052:	f000 fafb 	bl	800164c <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */
	CAN_FilterTypeDef canfilterconfig;
	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8001056:	2301      	movs	r3, #1
 8001058:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800105e:	2300      	movs	r3, #0
 8001060:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0;
 8001062:	2300      	movs	r3, #0
 8001064:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0x0000;
 8001066:	2300      	movs	r3, #0
 8001068:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001072:	2300      	movs	r3, #0
 8001074:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001076:	2301      	movs	r3, #1
 8001078:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 0; // how many filters to assign to the CAN1 (master can)
 800107a:	2300      	movs	r3, #0
 800107c:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 800107e:	463b      	mov	r3, r7
 8001080:	4619      	mov	r1, r3
 8001082:	4803      	ldr	r0, [pc, #12]	; (8001090 <MX_CAN1_Init+0x9c>)
 8001084:	f001 fccc 	bl	8002a20 <HAL_CAN_ConfigFilter>
	/* USER CODE END CAN1_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	3728      	adds	r7, #40	; 0x28
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	200043dc 	.word	0x200043dc
 8001094:	40006400 	.word	0x40006400

08001098 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <MX_I2C1_Init+0x50>)
 800109e:	4a13      	ldr	r2, [pc, #76]	; (80010ec <MX_I2C1_Init+0x54>)
 80010a0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80010a2:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010a4:	4a12      	ldr	r2, [pc, #72]	; (80010f0 <MX_I2C1_Init+0x58>)
 80010a6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010a8:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80010ae:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010ba:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010bc:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010be:	2200      	movs	r2, #0
 80010c0:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80010c2:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010c8:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ce:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80010d4:	4804      	ldr	r0, [pc, #16]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010d6:	f004 fdb3 	bl	8005c40 <HAL_I2C_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80010e0:	f000 fab4 	bl	800164c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20004114 	.word	0x20004114
 80010ec:	40005400 	.word	0x40005400
 80010f0:	000186a0 	.word	0x000186a0

080010f4 <MX_I2S3_Init>:
/**
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S3_Init(void) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
	/* USER CODE END I2S3_Init 0 */

	/* USER CODE BEGIN I2S3_Init 1 */

	/* USER CODE END I2S3_Init 1 */
	hi2s3.Instance = SPI3;
 80010f8:	4b13      	ldr	r3, [pc, #76]	; (8001148 <MX_I2S3_Init+0x54>)
 80010fa:	4a14      	ldr	r2, [pc, #80]	; (800114c <MX_I2S3_Init+0x58>)
 80010fc:	601a      	str	r2, [r3, #0]
	hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80010fe:	4b12      	ldr	r3, [pc, #72]	; (8001148 <MX_I2S3_Init+0x54>)
 8001100:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001104:	605a      	str	r2, [r3, #4]
	hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001106:	4b10      	ldr	r3, [pc, #64]	; (8001148 <MX_I2S3_Init+0x54>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
	hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800110c:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <MX_I2S3_Init+0x54>)
 800110e:	2200      	movs	r2, #0
 8001110:	60da      	str	r2, [r3, #12]
	hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001112:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <MX_I2S3_Init+0x54>)
 8001114:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001118:	611a      	str	r2, [r3, #16]
	hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800111a:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <MX_I2S3_Init+0x54>)
 800111c:	4a0c      	ldr	r2, [pc, #48]	; (8001150 <MX_I2S3_Init+0x5c>)
 800111e:	615a      	str	r2, [r3, #20]
	hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001120:	4b09      	ldr	r3, [pc, #36]	; (8001148 <MX_I2S3_Init+0x54>)
 8001122:	2200      	movs	r2, #0
 8001124:	619a      	str	r2, [r3, #24]
	hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001126:	4b08      	ldr	r3, [pc, #32]	; (8001148 <MX_I2S3_Init+0x54>)
 8001128:	2200      	movs	r2, #0
 800112a:	61da      	str	r2, [r3, #28]
	hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <MX_I2S3_Init+0x54>)
 800112e:	2200      	movs	r2, #0
 8001130:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s3) != HAL_OK) {
 8001132:	4805      	ldr	r0, [pc, #20]	; (8001148 <MX_I2S3_Init+0x54>)
 8001134:	f004 fec8 	bl	8005ec8 <HAL_I2S_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_I2S3_Init+0x4e>
		Error_Handler();
 800113e:	f000 fa85 	bl	800164c <Error_Handler>
	}
	/* USER CODE BEGIN I2S3_Init 2 */

	/* USER CODE END I2S3_Init 2 */

}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20004440 	.word	0x20004440
 800114c:	40003c00 	.word	0x40003c00
 8001150:	00017700 	.word	0x00017700

08001154 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001158:	4b17      	ldr	r3, [pc, #92]	; (80011b8 <MX_SPI1_Init+0x64>)
 800115a:	4a18      	ldr	r2, [pc, #96]	; (80011bc <MX_SPI1_Init+0x68>)
 800115c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800115e:	4b16      	ldr	r3, [pc, #88]	; (80011b8 <MX_SPI1_Init+0x64>)
 8001160:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001164:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001166:	4b14      	ldr	r3, [pc, #80]	; (80011b8 <MX_SPI1_Init+0x64>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800116c:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <MX_SPI1_Init+0x64>)
 800116e:	2200      	movs	r2, #0
 8001170:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001172:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <MX_SPI1_Init+0x64>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001178:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <MX_SPI1_Init+0x64>)
 800117a:	2200      	movs	r2, #0
 800117c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800117e:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <MX_SPI1_Init+0x64>)
 8001180:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001184:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001186:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <MX_SPI1_Init+0x64>)
 8001188:	2200      	movs	r2, #0
 800118a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800118c:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <MX_SPI1_Init+0x64>)
 800118e:	2200      	movs	r2, #0
 8001190:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001192:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <MX_SPI1_Init+0x64>)
 8001194:	2200      	movs	r2, #0
 8001196:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001198:	4b07      	ldr	r3, [pc, #28]	; (80011b8 <MX_SPI1_Init+0x64>)
 800119a:	2200      	movs	r2, #0
 800119c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800119e:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <MX_SPI1_Init+0x64>)
 80011a0:	220a      	movs	r2, #10
 80011a2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80011a4:	4804      	ldr	r0, [pc, #16]	; (80011b8 <MX_SPI1_Init+0x64>)
 80011a6:	f006 f915 	bl	80073d4 <HAL_SPI_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_SPI1_Init+0x60>
		Error_Handler();
 80011b0:	f000 fa4c 	bl	800164c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	200042d8 	.word	0x200042d8
 80011bc:	40013000 	.word	0x40013000

080011c0 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80011c4:	4b11      	ldr	r3, [pc, #68]	; (800120c <MX_USART2_UART_Init+0x4c>)
 80011c6:	4a12      	ldr	r2, [pc, #72]	; (8001210 <MX_USART2_UART_Init+0x50>)
 80011c8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 256000;
 80011ca:	4b10      	ldr	r3, [pc, #64]	; (800120c <MX_USART2_UART_Init+0x4c>)
 80011cc:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
 80011d0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011d2:	4b0e      	ldr	r3, [pc, #56]	; (800120c <MX_USART2_UART_Init+0x4c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80011d8:	4b0c      	ldr	r3, [pc, #48]	; (800120c <MX_USART2_UART_Init+0x4c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80011de:	4b0b      	ldr	r3, [pc, #44]	; (800120c <MX_USART2_UART_Init+0x4c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80011e4:	4b09      	ldr	r3, [pc, #36]	; (800120c <MX_USART2_UART_Init+0x4c>)
 80011e6:	220c      	movs	r2, #12
 80011e8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ea:	4b08      	ldr	r3, [pc, #32]	; (800120c <MX_USART2_UART_Init+0x4c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <MX_USART2_UART_Init+0x4c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80011f6:	4805      	ldr	r0, [pc, #20]	; (800120c <MX_USART2_UART_Init+0x4c>)
 80011f8:	f006 fc22 	bl	8007a40 <HAL_UART_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8001202:	f000 fa23 	bl	800164c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20004338 	.word	0x20004338
 8001210:	40004400 	.word	0x40004400

08001214 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	607b      	str	r3, [r7, #4]
 800121e:	4b14      	ldr	r3, [pc, #80]	; (8001270 <MX_DMA_Init+0x5c>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	4a13      	ldr	r2, [pc, #76]	; (8001270 <MX_DMA_Init+0x5c>)
 8001224:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001228:	6313      	str	r3, [r2, #48]	; 0x30
 800122a:	4b11      	ldr	r3, [pc, #68]	; (8001270 <MX_DMA_Init+0x5c>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001236:	2200      	movs	r2, #0
 8001238:	2105      	movs	r1, #5
 800123a:	2038      	movs	r0, #56	; 0x38
 800123c:	f002 fa0e 	bl	800365c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001240:	2038      	movs	r0, #56	; 0x38
 8001242:	f002 fa27 	bl	8003694 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	2105      	movs	r1, #5
 800124a:	2039      	movs	r0, #57	; 0x39
 800124c:	f002 fa06 	bl	800365c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001250:	2039      	movs	r0, #57	; 0x39
 8001252:	f002 fa1f 	bl	8003694 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001256:	2200      	movs	r2, #0
 8001258:	2105      	movs	r1, #5
 800125a:	203a      	movs	r0, #58	; 0x3a
 800125c:	f002 f9fe 	bl	800365c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001260:	203a      	movs	r0, #58	; 0x3a
 8001262:	f002 fa17 	bl	8003694 <HAL_NVIC_EnableIRQ>

}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40023800 	.word	0x40023800

08001274 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001274:	b580      	push	{r7, lr}
 8001276:	b08c      	sub	sp, #48	; 0x30
 8001278:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800127a:	f107 031c 	add.w	r3, r7, #28
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	609a      	str	r2, [r3, #8]
 8001286:	60da      	str	r2, [r3, #12]
 8001288:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	61bb      	str	r3, [r7, #24]
 800128e:	4b78      	ldr	r3, [pc, #480]	; (8001470 <MX_GPIO_Init+0x1fc>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	4a77      	ldr	r2, [pc, #476]	; (8001470 <MX_GPIO_Init+0x1fc>)
 8001294:	f043 0310 	orr.w	r3, r3, #16
 8001298:	6313      	str	r3, [r2, #48]	; 0x30
 800129a:	4b75      	ldr	r3, [pc, #468]	; (8001470 <MX_GPIO_Init+0x1fc>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	f003 0310 	and.w	r3, r3, #16
 80012a2:	61bb      	str	r3, [r7, #24]
 80012a4:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	617b      	str	r3, [r7, #20]
 80012aa:	4b71      	ldr	r3, [pc, #452]	; (8001470 <MX_GPIO_Init+0x1fc>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a70      	ldr	r2, [pc, #448]	; (8001470 <MX_GPIO_Init+0x1fc>)
 80012b0:	f043 0304 	orr.w	r3, r3, #4
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b6e      	ldr	r3, [pc, #440]	; (8001470 <MX_GPIO_Init+0x1fc>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0304 	and.w	r3, r3, #4
 80012be:	617b      	str	r3, [r7, #20]
 80012c0:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	613b      	str	r3, [r7, #16]
 80012c6:	4b6a      	ldr	r3, [pc, #424]	; (8001470 <MX_GPIO_Init+0x1fc>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4a69      	ldr	r2, [pc, #420]	; (8001470 <MX_GPIO_Init+0x1fc>)
 80012cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4b67      	ldr	r3, [pc, #412]	; (8001470 <MX_GPIO_Init+0x1fc>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	4b63      	ldr	r3, [pc, #396]	; (8001470 <MX_GPIO_Init+0x1fc>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	4a62      	ldr	r2, [pc, #392]	; (8001470 <MX_GPIO_Init+0x1fc>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	6313      	str	r3, [r2, #48]	; 0x30
 80012ee:	4b60      	ldr	r3, [pc, #384]	; (8001470 <MX_GPIO_Init+0x1fc>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	60bb      	str	r3, [r7, #8]
 80012fe:	4b5c      	ldr	r3, [pc, #368]	; (8001470 <MX_GPIO_Init+0x1fc>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	4a5b      	ldr	r2, [pc, #364]	; (8001470 <MX_GPIO_Init+0x1fc>)
 8001304:	f043 0302 	orr.w	r3, r3, #2
 8001308:	6313      	str	r3, [r2, #48]	; 0x30
 800130a:	4b59      	ldr	r3, [pc, #356]	; (8001470 <MX_GPIO_Init+0x1fc>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	607b      	str	r3, [r7, #4]
 800131a:	4b55      	ldr	r3, [pc, #340]	; (8001470 <MX_GPIO_Init+0x1fc>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4a54      	ldr	r2, [pc, #336]	; (8001470 <MX_GPIO_Init+0x1fc>)
 8001320:	f043 0308 	orr.w	r3, r3, #8
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4b52      	ldr	r3, [pc, #328]	; (8001470 <MX_GPIO_Init+0x1fc>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f003 0308 	and.w	r3, r3, #8
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8001332:	2200      	movs	r2, #0
 8001334:	2108      	movs	r1, #8
 8001336:	484f      	ldr	r0, [pc, #316]	; (8001474 <MX_GPIO_Init+0x200>)
 8001338:	f002 fede 	bl	80040f8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 800133c:	2201      	movs	r2, #1
 800133e:	2101      	movs	r1, #1
 8001340:	484d      	ldr	r0, [pc, #308]	; (8001478 <MX_GPIO_Init+0x204>)
 8001342:	f002 fed9 	bl	80040f8 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8001346:	2200      	movs	r2, #0
 8001348:	f24f 0110 	movw	r1, #61456	; 0xf010
 800134c:	484b      	ldr	r0, [pc, #300]	; (800147c <MX_GPIO_Init+0x208>)
 800134e:	f002 fed3 	bl	80040f8 <HAL_GPIO_WritePin>
	LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : PE3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001352:	2308      	movs	r3, #8
 8001354:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001356:	2301      	movs	r3, #1
 8001358:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135e:	2300      	movs	r3, #0
 8001360:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001362:	f107 031c 	add.w	r3, r7, #28
 8001366:	4619      	mov	r1, r3
 8001368:	4842      	ldr	r0, [pc, #264]	; (8001474 <MX_GPIO_Init+0x200>)
 800136a:	f002 fd11 	bl	8003d90 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800136e:	2301      	movs	r3, #1
 8001370:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001372:	2301      	movs	r3, #1
 8001374:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137a:	2300      	movs	r3, #0
 800137c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800137e:	f107 031c 	add.w	r3, r7, #28
 8001382:	4619      	mov	r1, r3
 8001384:	483c      	ldr	r0, [pc, #240]	; (8001478 <MX_GPIO_Init+0x204>)
 8001386:	f002 fd03 	bl	8003d90 <HAL_GPIO_Init>

	/*Configure GPIO pin : Start_Button_Pin */
	GPIO_InitStruct.Pin = Start_Button_Pin;
 800138a:	2302      	movs	r3, #2
 800138c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800138e:	2300      	movs	r3, #0
 8001390:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001392:	2301      	movs	r3, #1
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(Start_Button_GPIO_Port, &GPIO_InitStruct);
 8001396:	f107 031c 	add.w	r3, r7, #28
 800139a:	4619      	mov	r1, r3
 800139c:	4836      	ldr	r0, [pc, #216]	; (8001478 <MX_GPIO_Init+0x204>)
 800139e:	f002 fcf7 	bl	8003d90 <HAL_GPIO_Init>

	/*Configure GPIO pin : PDM_OUT_Pin */
	GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80013a2:	2308      	movs	r3, #8
 80013a4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a6:	2302      	movs	r3, #2
 80013a8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ae:	2300      	movs	r3, #0
 80013b0:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013b2:	2305      	movs	r3, #5
 80013b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80013b6:	f107 031c 	add.w	r3, r7, #28
 80013ba:	4619      	mov	r1, r3
 80013bc:	482e      	ldr	r0, [pc, #184]	; (8001478 <MX_GPIO_Init+0x204>)
 80013be:	f002 fce7 	bl	8003d90 <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80013c2:	2301      	movs	r3, #1
 80013c4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80013c6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80013ca:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013d0:	f107 031c 	add.w	r3, r7, #28
 80013d4:	4619      	mov	r1, r3
 80013d6:	482a      	ldr	r0, [pc, #168]	; (8001480 <MX_GPIO_Init+0x20c>)
 80013d8:	f002 fcda 	bl	8003d90 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013dc:	2304      	movs	r3, #4
 80013de:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e0:	2300      	movs	r3, #0
 80013e2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e8:	f107 031c 	add.w	r3, r7, #28
 80013ec:	4619      	mov	r1, r3
 80013ee:	4825      	ldr	r0, [pc, #148]	; (8001484 <MX_GPIO_Init+0x210>)
 80013f0:	f002 fcce 	bl	8003d90 <HAL_GPIO_Init>

	/*Configure GPIO pin : CLK_IN_Pin */
	GPIO_InitStruct.Pin = CLK_IN_Pin;
 80013f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013f8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fa:	2302      	movs	r3, #2
 80013fc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001402:	2300      	movs	r3, #0
 8001404:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001406:	2305      	movs	r3, #5
 8001408:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800140a:	f107 031c 	add.w	r3, r7, #28
 800140e:	4619      	mov	r1, r3
 8001410:	481c      	ldr	r0, [pc, #112]	; (8001484 <MX_GPIO_Init+0x210>)
 8001412:	f002 fcbd 	bl	8003d90 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
	 Audio_RST_Pin */
	GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 8001416:	f24f 0310 	movw	r3, #61456	; 0xf010
 800141a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141c:	2301      	movs	r3, #1
 800141e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001424:	2300      	movs	r3, #0
 8001426:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001428:	f107 031c 	add.w	r3, r7, #28
 800142c:	4619      	mov	r1, r3
 800142e:	4813      	ldr	r0, [pc, #76]	; (800147c <MX_GPIO_Init+0x208>)
 8001430:	f002 fcae 	bl	8003d90 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001434:	2320      	movs	r3, #32
 8001436:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001438:	2300      	movs	r3, #0
 800143a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001440:	f107 031c 	add.w	r3, r7, #28
 8001444:	4619      	mov	r1, r3
 8001446:	480d      	ldr	r0, [pc, #52]	; (800147c <MX_GPIO_Init+0x208>)
 8001448:	f002 fca2 	bl	8003d90 <HAL_GPIO_Init>

	/*Configure GPIO pin : MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800144c:	2302      	movs	r3, #2
 800144e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001450:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001454:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800145a:	f107 031c 	add.w	r3, r7, #28
 800145e:	4619      	mov	r1, r3
 8001460:	4804      	ldr	r0, [pc, #16]	; (8001474 <MX_GPIO_Init+0x200>)
 8001462:	f002 fc95 	bl	8003d90 <HAL_GPIO_Init>

}
 8001466:	bf00      	nop
 8001468:	3730      	adds	r7, #48	; 0x30
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40023800 	.word	0x40023800
 8001474:	40021000 	.word	0x40021000
 8001478:	40020800 	.word	0x40020800
 800147c:	40020c00 	.word	0x40020c00
 8001480:	40020000 	.word	0x40020000
 8001484:	40020400 	.word	0x40020400

08001488 <startLEDTask>:
 * @brief  Function implementing the ledTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_startLEDTask */
void startLEDTask(void const *argument) {
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
	/* init code for USB_HOST */
	MX_USB_HOST_Init();
 8001490:	f00c f98c 	bl	800d7ac <MX_USB_HOST_Init>
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 8001494:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001498:	4803      	ldr	r0, [pc, #12]	; (80014a8 <startLEDTask+0x20>)
 800149a:	f002 fe46 	bl	800412a <HAL_GPIO_TogglePin>
		osDelay(1000);
 800149e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014a2:	f009 ff6a 	bl	800b37a <osDelay>
		HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 80014a6:	e7f5      	b.n	8001494 <startLEDTask+0xc>
 80014a8:	40020c00 	.word	0x40020c00
 80014ac:	00000000 	.word	0x00000000

080014b0 <startUART_Task>:
 * @brief Function implementing the uartTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startUART_Task */
void startUART_Task(void const *argument) {
 80014b0:	b590      	push	{r4, r7, lr}
 80014b2:	b0c9      	sub	sp, #292	; 0x124
 80014b4:	af02      	add	r7, sp, #8
 80014b6:	1d3b      	adds	r3, r7, #4
 80014b8:	6018      	str	r0, [r3, #0]
	/* USER CODE BEGIN startUART_Task */
	char startBtn[16] = "";
 80014ba:	2300      	movs	r3, #0
 80014bc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80014c0:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
	char msg[256];

	/* Infinite loop */
	for (;;) {
		if (!HAL_GPIO_ReadPin(GPIOC, Start_Button_Pin)) {
 80014cc:	2102      	movs	r1, #2
 80014ce:	483a      	ldr	r0, [pc, #232]	; (80015b8 <startUART_Task+0x108>)
 80014d0:	f002 fdfa 	bl	80040c8 <HAL_GPIO_ReadPin>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d107      	bne.n	80014ea <startUART_Task+0x3a>
			strcpy(startBtn, "Pressed");
 80014da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80014de:	4a37      	ldr	r2, [pc, #220]	; (80015bc <startUART_Task+0x10c>)
 80014e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014e4:	e883 0003 	stmia.w	r3, {r0, r1}
 80014e8:	e005      	b.n	80014f6 <startUART_Task+0x46>
		} else {
			strcpy(startBtn, "Not Pressed");
 80014ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80014ee:	4a34      	ldr	r2, [pc, #208]	; (80015c0 <startUART_Task+0x110>)
 80014f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80014f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}

		apps_PP[0] = 0.0833 * appsVal[0];
 80014f6:	4b33      	ldr	r3, [pc, #204]	; (80015c4 <startUART_Task+0x114>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff f92c 	bl	8000758 <__aeabi_ui2d>
 8001500:	a327      	add	r3, pc, #156	; (adr r3, 80015a0 <startUART_Task+0xf0>)
 8001502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001506:	f7fe febb 	bl	8000280 <__aeabi_dmul>
 800150a:	4602      	mov	r2, r0
 800150c:	460b      	mov	r3, r1
 800150e:	4610      	mov	r0, r2
 8001510:	4619      	mov	r1, r3
 8001512:	f7ff f99b 	bl	800084c <__aeabi_d2uiz>
 8001516:	4603      	mov	r3, r0
 8001518:	4a2b      	ldr	r2, [pc, #172]	; (80015c8 <startUART_Task+0x118>)
 800151a:	6013      	str	r3, [r2, #0]
		apps_PP[1] = -0.03339 * appsVal[1] + 136.7;
 800151c:	4b29      	ldr	r3, [pc, #164]	; (80015c4 <startUART_Task+0x114>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff f919 	bl	8000758 <__aeabi_ui2d>
 8001526:	a320      	add	r3, pc, #128	; (adr r3, 80015a8 <startUART_Task+0xf8>)
 8001528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152c:	f7fe fea8 	bl	8000280 <__aeabi_dmul>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	4610      	mov	r0, r2
 8001536:	4619      	mov	r1, r3
 8001538:	a31d      	add	r3, pc, #116	; (adr r3, 80015b0 <startUART_Task+0x100>)
 800153a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153e:	f7fe ffcf 	bl	80004e0 <__adddf3>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	4610      	mov	r0, r2
 8001548:	4619      	mov	r1, r3
 800154a:	f7ff f97f 	bl	800084c <__aeabi_d2uiz>
 800154e:	4603      	mov	r3, r0
 8001550:	4a1d      	ldr	r2, [pc, #116]	; (80015c8 <startUART_Task+0x118>)
 8001552:	6053      	str	r3, [r2, #4]

		//send out APPS values + APPS Pedal Position over UART
		sprintf(msg,
 8001554:	4b1b      	ldr	r3, [pc, #108]	; (80015c4 <startUART_Task+0x114>)
 8001556:	6819      	ldr	r1, [r3, #0]
 8001558:	4b1a      	ldr	r3, [pc, #104]	; (80015c4 <startUART_Task+0x114>)
 800155a:	685c      	ldr	r4, [r3, #4]
 800155c:	4b1a      	ldr	r3, [pc, #104]	; (80015c8 <startUART_Task+0x118>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a19      	ldr	r2, [pc, #100]	; (80015c8 <startUART_Task+0x118>)
 8001562:	6852      	ldr	r2, [r2, #4]
 8001564:	f107 0008 	add.w	r0, r7, #8
 8001568:	9201      	str	r2, [sp, #4]
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	4623      	mov	r3, r4
 800156e:	460a      	mov	r2, r1
 8001570:	4916      	ldr	r1, [pc, #88]	; (80015cc <startUART_Task+0x11c>)
 8001572:	f00c fd93 	bl	800e09c <siprintf>
				"APPS_1 = %lu \t APPS_2 = %lu \t PP1 = %lu \t PP2 = %lu\r\n",
				appsVal[0], appsVal[1], apps_PP[0], apps_PP[1]);
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8001576:	f107 0308 	add.w	r3, r7, #8
 800157a:	4618      	mov	r0, r3
 800157c:	f7fe fe28 	bl	80001d0 <strlen>
 8001580:	4603      	mov	r3, r0
 8001582:	b29a      	uxth	r2, r3
 8001584:	f107 0108 	add.w	r1, r7, #8
 8001588:	f04f 33ff 	mov.w	r3, #4294967295
 800158c:	4810      	ldr	r0, [pc, #64]	; (80015d0 <startUART_Task+0x120>)
 800158e:	f006 faa4 	bl	8007ada <HAL_UART_Transmit>
		osDelay(100);
 8001592:	2064      	movs	r0, #100	; 0x64
 8001594:	f009 fef1 	bl	800b37a <osDelay>
		if (!HAL_GPIO_ReadPin(GPIOC, Start_Button_Pin)) {
 8001598:	e798      	b.n	80014cc <startUART_Task+0x1c>
 800159a:	bf00      	nop
 800159c:	f3af 8000 	nop.w
 80015a0:	17c1bda5 	.word	0x17c1bda5
 80015a4:	3fb55326 	.word	0x3fb55326
 80015a8:	7c06e19c 	.word	0x7c06e19c
 80015ac:	bfa1187e 	.word	0xbfa1187e
 80015b0:	66666666 	.word	0x66666666
 80015b4:	40611666 	.word	0x40611666
 80015b8:	40020800 	.word	0x40020800
 80015bc:	0800e7f4 	.word	0x0800e7f4
 80015c0:	0800e7fc 	.word	0x0800e7fc
 80015c4:	20004438 	.word	0x20004438
 80015c8:	200042d0 	.word	0x200042d0
 80015cc:	0800e808 	.word	0x0800e808
 80015d0:	20004338 	.word	0x20004338

080015d4 <startTorqueCommand>:
 * @brief Function implementing the Torque_Command thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startTorqueCommand */
void startTorqueCommand(void const *argument) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN startTorqueCommand */

	/* Infinite loop */
	for (;;) {
		HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
 80015dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015e0:	480c      	ldr	r0, [pc, #48]	; (8001614 <startTorqueCommand+0x40>)
 80015e2:	f002 fda2 	bl	800412a <HAL_GPIO_TogglePin>

		TxData[0] = 20;
 80015e6:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <startTorqueCommand+0x44>)
 80015e8:	2214      	movs	r2, #20
 80015ea:	701a      	strb	r2, [r3, #0]
		TxData[1] = 1;
 80015ec:	4b0a      	ldr	r3, [pc, #40]	; (8001618 <startTorqueCommand+0x44>)
 80015ee:	2201      	movs	r2, #1
 80015f0:	705a      	strb	r2, [r3, #1]

		//Send out CAN message
		if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox)
 80015f2:	4b0a      	ldr	r3, [pc, #40]	; (800161c <startTorqueCommand+0x48>)
 80015f4:	4a08      	ldr	r2, [pc, #32]	; (8001618 <startTorqueCommand+0x44>)
 80015f6:	490a      	ldr	r1, [pc, #40]	; (8001620 <startTorqueCommand+0x4c>)
 80015f8:	480a      	ldr	r0, [pc, #40]	; (8001624 <startTorqueCommand+0x50>)
 80015fa:	f001 fb35 	bl	8002c68 <HAL_CAN_AddTxMessage>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <startTorqueCommand+0x34>
				!= HAL_OK) {
			Error_Handler();
 8001604:	f000 f822 	bl	800164c <Error_Handler>
		 * Recommended settings are to send out CAN message every half the timeout
		 * period. I.e if timeout period is 1000ms, then send a CAN message every 500ms.
		 * Need to configure actual timeout period for motor controller using DTI tool.
		 * We will set it to 500ms for now.
		 */
		osDelay(500);
 8001608:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800160c:	f009 feb5 	bl	800b37a <osDelay>
		HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
 8001610:	e7e4      	b.n	80015dc <startTorqueCommand+0x8>
 8001612:	bf00      	nop
 8001614:	40020c00 	.word	0x40020c00
 8001618:	200042c4 	.word	0x200042c4
 800161c:	200042cc 	.word	0x200042cc
 8001620:	20004404 	.word	0x20004404
 8001624:	200043dc 	.word	0x200043dc

08001628 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a04      	ldr	r2, [pc, #16]	; (8001648 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d101      	bne.n	800163e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800163a:	f000 fc9f 	bl	8001f7c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40010000 	.word	0x40010000

0800164c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001650:	b672      	cpsid	i
}
 8001652:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001654:	e7fe      	b.n	8001654 <Error_Handler+0x8>
	...

08001658 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	607b      	str	r3, [r7, #4]
 8001662:	4b12      	ldr	r3, [pc, #72]	; (80016ac <HAL_MspInit+0x54>)
 8001664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001666:	4a11      	ldr	r2, [pc, #68]	; (80016ac <HAL_MspInit+0x54>)
 8001668:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800166c:	6453      	str	r3, [r2, #68]	; 0x44
 800166e:	4b0f      	ldr	r3, [pc, #60]	; (80016ac <HAL_MspInit+0x54>)
 8001670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001672:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001676:	607b      	str	r3, [r7, #4]
 8001678:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	603b      	str	r3, [r7, #0]
 800167e:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <HAL_MspInit+0x54>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	4a0a      	ldr	r2, [pc, #40]	; (80016ac <HAL_MspInit+0x54>)
 8001684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001688:	6413      	str	r3, [r2, #64]	; 0x40
 800168a:	4b08      	ldr	r3, [pc, #32]	; (80016ac <HAL_MspInit+0x54>)
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001692:	603b      	str	r3, [r7, #0]
 8001694:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001696:	2200      	movs	r2, #0
 8001698:	210f      	movs	r1, #15
 800169a:	f06f 0001 	mvn.w	r0, #1
 800169e:	f001 ffdd 	bl	800365c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016a2:	bf00      	nop
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40023800 	.word	0x40023800

080016b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08e      	sub	sp, #56	; 0x38
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a9b      	ldr	r2, [pc, #620]	; (800193c <HAL_ADC_MspInit+0x28c>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d161      	bne.n	8001796 <HAL_ADC_MspInit+0xe6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	623b      	str	r3, [r7, #32]
 80016d6:	4b9a      	ldr	r3, [pc, #616]	; (8001940 <HAL_ADC_MspInit+0x290>)
 80016d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016da:	4a99      	ldr	r2, [pc, #612]	; (8001940 <HAL_ADC_MspInit+0x290>)
 80016dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016e0:	6453      	str	r3, [r2, #68]	; 0x44
 80016e2:	4b97      	ldr	r3, [pc, #604]	; (8001940 <HAL_ADC_MspInit+0x290>)
 80016e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ea:	623b      	str	r3, [r7, #32]
 80016ec:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	61fb      	str	r3, [r7, #28]
 80016f2:	4b93      	ldr	r3, [pc, #588]	; (8001940 <HAL_ADC_MspInit+0x290>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	4a92      	ldr	r2, [pc, #584]	; (8001940 <HAL_ADC_MspInit+0x290>)
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	6313      	str	r3, [r2, #48]	; 0x30
 80016fe:	4b90      	ldr	r3, [pc, #576]	; (8001940 <HAL_ADC_MspInit+0x290>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	61fb      	str	r3, [r7, #28]
 8001708:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800170a:	2302      	movs	r3, #2
 800170c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800170e:	2303      	movs	r3, #3
 8001710:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800171a:	4619      	mov	r1, r3
 800171c:	4889      	ldr	r0, [pc, #548]	; (8001944 <HAL_ADC_MspInit+0x294>)
 800171e:	f002 fb37 	bl	8003d90 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001722:	4b89      	ldr	r3, [pc, #548]	; (8001948 <HAL_ADC_MspInit+0x298>)
 8001724:	4a89      	ldr	r2, [pc, #548]	; (800194c <HAL_ADC_MspInit+0x29c>)
 8001726:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001728:	4b87      	ldr	r3, [pc, #540]	; (8001948 <HAL_ADC_MspInit+0x298>)
 800172a:	2200      	movs	r2, #0
 800172c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800172e:	4b86      	ldr	r3, [pc, #536]	; (8001948 <HAL_ADC_MspInit+0x298>)
 8001730:	2200      	movs	r2, #0
 8001732:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001734:	4b84      	ldr	r3, [pc, #528]	; (8001948 <HAL_ADC_MspInit+0x298>)
 8001736:	2200      	movs	r2, #0
 8001738:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800173a:	4b83      	ldr	r3, [pc, #524]	; (8001948 <HAL_ADC_MspInit+0x298>)
 800173c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001740:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001742:	4b81      	ldr	r3, [pc, #516]	; (8001948 <HAL_ADC_MspInit+0x298>)
 8001744:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001748:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800174a:	4b7f      	ldr	r3, [pc, #508]	; (8001948 <HAL_ADC_MspInit+0x298>)
 800174c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001750:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001752:	4b7d      	ldr	r3, [pc, #500]	; (8001948 <HAL_ADC_MspInit+0x298>)
 8001754:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001758:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800175a:	4b7b      	ldr	r3, [pc, #492]	; (8001948 <HAL_ADC_MspInit+0x298>)
 800175c:	2200      	movs	r2, #0
 800175e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001760:	4b79      	ldr	r3, [pc, #484]	; (8001948 <HAL_ADC_MspInit+0x298>)
 8001762:	2204      	movs	r2, #4
 8001764:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001766:	4b78      	ldr	r3, [pc, #480]	; (8001948 <HAL_ADC_MspInit+0x298>)
 8001768:	2203      	movs	r2, #3
 800176a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 800176c:	4b76      	ldr	r3, [pc, #472]	; (8001948 <HAL_ADC_MspInit+0x298>)
 800176e:	2200      	movs	r2, #0
 8001770:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001772:	4b75      	ldr	r3, [pc, #468]	; (8001948 <HAL_ADC_MspInit+0x298>)
 8001774:	2200      	movs	r2, #0
 8001776:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001778:	4873      	ldr	r0, [pc, #460]	; (8001948 <HAL_ADC_MspInit+0x298>)
 800177a:	f001 ff99 	bl	80036b0 <HAL_DMA_Init>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <HAL_ADC_MspInit+0xd8>
    {
      Error_Handler();
 8001784:	f7ff ff62 	bl	800164c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4a6f      	ldr	r2, [pc, #444]	; (8001948 <HAL_ADC_MspInit+0x298>)
 800178c:	639a      	str	r2, [r3, #56]	; 0x38
 800178e:	4a6e      	ldr	r2, [pc, #440]	; (8001948 <HAL_ADC_MspInit+0x298>)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001794:	e0ce      	b.n	8001934 <HAL_ADC_MspInit+0x284>
  else if(hadc->Instance==ADC2)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a6d      	ldr	r2, [pc, #436]	; (8001950 <HAL_ADC_MspInit+0x2a0>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d162      	bne.n	8001866 <HAL_ADC_MspInit+0x1b6>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80017a0:	2300      	movs	r3, #0
 80017a2:	61bb      	str	r3, [r7, #24]
 80017a4:	4b66      	ldr	r3, [pc, #408]	; (8001940 <HAL_ADC_MspInit+0x290>)
 80017a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a8:	4a65      	ldr	r2, [pc, #404]	; (8001940 <HAL_ADC_MspInit+0x290>)
 80017aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017ae:	6453      	str	r3, [r2, #68]	; 0x44
 80017b0:	4b63      	ldr	r3, [pc, #396]	; (8001940 <HAL_ADC_MspInit+0x290>)
 80017b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017b8:	61bb      	str	r3, [r7, #24]
 80017ba:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017bc:	2300      	movs	r3, #0
 80017be:	617b      	str	r3, [r7, #20]
 80017c0:	4b5f      	ldr	r3, [pc, #380]	; (8001940 <HAL_ADC_MspInit+0x290>)
 80017c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c4:	4a5e      	ldr	r2, [pc, #376]	; (8001940 <HAL_ADC_MspInit+0x290>)
 80017c6:	f043 0301 	orr.w	r3, r3, #1
 80017ca:	6313      	str	r3, [r2, #48]	; 0x30
 80017cc:	4b5c      	ldr	r3, [pc, #368]	; (8001940 <HAL_ADC_MspInit+0x290>)
 80017ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d0:	f003 0301 	and.w	r3, r3, #1
 80017d4:	617b      	str	r3, [r7, #20]
 80017d6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017d8:	2308      	movs	r3, #8
 80017da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017dc:	2303      	movs	r3, #3
 80017de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e8:	4619      	mov	r1, r3
 80017ea:	4856      	ldr	r0, [pc, #344]	; (8001944 <HAL_ADC_MspInit+0x294>)
 80017ec:	f002 fad0 	bl	8003d90 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 80017f0:	4b58      	ldr	r3, [pc, #352]	; (8001954 <HAL_ADC_MspInit+0x2a4>)
 80017f2:	4a59      	ldr	r2, [pc, #356]	; (8001958 <HAL_ADC_MspInit+0x2a8>)
 80017f4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80017f6:	4b57      	ldr	r3, [pc, #348]	; (8001954 <HAL_ADC_MspInit+0x2a4>)
 80017f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017fc:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017fe:	4b55      	ldr	r3, [pc, #340]	; (8001954 <HAL_ADC_MspInit+0x2a4>)
 8001800:	2200      	movs	r2, #0
 8001802:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001804:	4b53      	ldr	r3, [pc, #332]	; (8001954 <HAL_ADC_MspInit+0x2a4>)
 8001806:	2200      	movs	r2, #0
 8001808:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800180a:	4b52      	ldr	r3, [pc, #328]	; (8001954 <HAL_ADC_MspInit+0x2a4>)
 800180c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001810:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001812:	4b50      	ldr	r3, [pc, #320]	; (8001954 <HAL_ADC_MspInit+0x2a4>)
 8001814:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001818:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800181a:	4b4e      	ldr	r3, [pc, #312]	; (8001954 <HAL_ADC_MspInit+0x2a4>)
 800181c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001820:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001822:	4b4c      	ldr	r3, [pc, #304]	; (8001954 <HAL_ADC_MspInit+0x2a4>)
 8001824:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001828:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800182a:	4b4a      	ldr	r3, [pc, #296]	; (8001954 <HAL_ADC_MspInit+0x2a4>)
 800182c:	2200      	movs	r2, #0
 800182e:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001830:	4b48      	ldr	r3, [pc, #288]	; (8001954 <HAL_ADC_MspInit+0x2a4>)
 8001832:	2204      	movs	r2, #4
 8001834:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001836:	4b47      	ldr	r3, [pc, #284]	; (8001954 <HAL_ADC_MspInit+0x2a4>)
 8001838:	2203      	movs	r2, #3
 800183a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc2.Init.MemBurst = DMA_MBURST_SINGLE;
 800183c:	4b45      	ldr	r3, [pc, #276]	; (8001954 <HAL_ADC_MspInit+0x2a4>)
 800183e:	2200      	movs	r2, #0
 8001840:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001842:	4b44      	ldr	r3, [pc, #272]	; (8001954 <HAL_ADC_MspInit+0x2a4>)
 8001844:	2200      	movs	r2, #0
 8001846:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001848:	4842      	ldr	r0, [pc, #264]	; (8001954 <HAL_ADC_MspInit+0x2a4>)
 800184a:	f001 ff31 	bl	80036b0 <HAL_DMA_Init>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <HAL_ADC_MspInit+0x1a8>
      Error_Handler();
 8001854:	f7ff fefa 	bl	800164c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4a3e      	ldr	r2, [pc, #248]	; (8001954 <HAL_ADC_MspInit+0x2a4>)
 800185c:	639a      	str	r2, [r3, #56]	; 0x38
 800185e:	4a3d      	ldr	r2, [pc, #244]	; (8001954 <HAL_ADC_MspInit+0x2a4>)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001864:	e066      	b.n	8001934 <HAL_ADC_MspInit+0x284>
  else if(hadc->Instance==ADC3)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a3c      	ldr	r2, [pc, #240]	; (800195c <HAL_ADC_MspInit+0x2ac>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d161      	bne.n	8001934 <HAL_ADC_MspInit+0x284>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001870:	2300      	movs	r3, #0
 8001872:	613b      	str	r3, [r7, #16]
 8001874:	4b32      	ldr	r3, [pc, #200]	; (8001940 <HAL_ADC_MspInit+0x290>)
 8001876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001878:	4a31      	ldr	r2, [pc, #196]	; (8001940 <HAL_ADC_MspInit+0x290>)
 800187a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800187e:	6453      	str	r3, [r2, #68]	; 0x44
 8001880:	4b2f      	ldr	r3, [pc, #188]	; (8001940 <HAL_ADC_MspInit+0x290>)
 8001882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001888:	613b      	str	r3, [r7, #16]
 800188a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800188c:	2300      	movs	r3, #0
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	4b2b      	ldr	r3, [pc, #172]	; (8001940 <HAL_ADC_MspInit+0x290>)
 8001892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001894:	4a2a      	ldr	r2, [pc, #168]	; (8001940 <HAL_ADC_MspInit+0x290>)
 8001896:	f043 0304 	orr.w	r3, r3, #4
 800189a:	6313      	str	r3, [r2, #48]	; 0x30
 800189c:	4b28      	ldr	r3, [pc, #160]	; (8001940 <HAL_ADC_MspInit+0x290>)
 800189e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a0:	f003 0304 	and.w	r3, r3, #4
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80018a8:	2304      	movs	r3, #4
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018ac:	2303      	movs	r3, #3
 80018ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b8:	4619      	mov	r1, r3
 80018ba:	4829      	ldr	r0, [pc, #164]	; (8001960 <HAL_ADC_MspInit+0x2b0>)
 80018bc:	f002 fa68 	bl	8003d90 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 80018c0:	4b28      	ldr	r3, [pc, #160]	; (8001964 <HAL_ADC_MspInit+0x2b4>)
 80018c2:	4a29      	ldr	r2, [pc, #164]	; (8001968 <HAL_ADC_MspInit+0x2b8>)
 80018c4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 80018c6:	4b27      	ldr	r3, [pc, #156]	; (8001964 <HAL_ADC_MspInit+0x2b4>)
 80018c8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80018cc:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018ce:	4b25      	ldr	r3, [pc, #148]	; (8001964 <HAL_ADC_MspInit+0x2b4>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80018d4:	4b23      	ldr	r3, [pc, #140]	; (8001964 <HAL_ADC_MspInit+0x2b4>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80018da:	4b22      	ldr	r3, [pc, #136]	; (8001964 <HAL_ADC_MspInit+0x2b4>)
 80018dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018e0:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80018e2:	4b20      	ldr	r3, [pc, #128]	; (8001964 <HAL_ADC_MspInit+0x2b4>)
 80018e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018e8:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80018ea:	4b1e      	ldr	r3, [pc, #120]	; (8001964 <HAL_ADC_MspInit+0x2b4>)
 80018ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018f0:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80018f2:	4b1c      	ldr	r3, [pc, #112]	; (8001964 <HAL_ADC_MspInit+0x2b4>)
 80018f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018f8:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80018fa:	4b1a      	ldr	r3, [pc, #104]	; (8001964 <HAL_ADC_MspInit+0x2b4>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001900:	4b18      	ldr	r3, [pc, #96]	; (8001964 <HAL_ADC_MspInit+0x2b4>)
 8001902:	2204      	movs	r2, #4
 8001904:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001906:	4b17      	ldr	r3, [pc, #92]	; (8001964 <HAL_ADC_MspInit+0x2b4>)
 8001908:	2203      	movs	r2, #3
 800190a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc3.Init.MemBurst = DMA_MBURST_SINGLE;
 800190c:	4b15      	ldr	r3, [pc, #84]	; (8001964 <HAL_ADC_MspInit+0x2b4>)
 800190e:	2200      	movs	r2, #0
 8001910:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001912:	4b14      	ldr	r3, [pc, #80]	; (8001964 <HAL_ADC_MspInit+0x2b4>)
 8001914:	2200      	movs	r2, #0
 8001916:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001918:	4812      	ldr	r0, [pc, #72]	; (8001964 <HAL_ADC_MspInit+0x2b4>)
 800191a:	f001 fec9 	bl	80036b0 <HAL_DMA_Init>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <HAL_ADC_MspInit+0x278>
      Error_Handler();
 8001924:	f7ff fe92 	bl	800164c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4a0e      	ldr	r2, [pc, #56]	; (8001964 <HAL_ADC_MspInit+0x2b4>)
 800192c:	639a      	str	r2, [r3, #56]	; 0x38
 800192e:	4a0d      	ldr	r2, [pc, #52]	; (8001964 <HAL_ADC_MspInit+0x2b4>)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001934:	bf00      	nop
 8001936:	3738      	adds	r7, #56	; 0x38
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40012000 	.word	0x40012000
 8001940:	40023800 	.word	0x40023800
 8001944:	40020000 	.word	0x40020000
 8001948:	20004260 	.word	0x20004260
 800194c:	40026410 	.word	0x40026410
 8001950:	40012100 	.word	0x40012100
 8001954:	2000437c 	.word	0x2000437c
 8001958:	40026440 	.word	0x40026440
 800195c:	40012200 	.word	0x40012200
 8001960:	40020800 	.word	0x40020800
 8001964:	2000416c 	.word	0x2000416c
 8001968:	40026428 	.word	0x40026428

0800196c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08a      	sub	sp, #40	; 0x28
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001974:	f107 0314 	add.w	r3, r7, #20
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a1d      	ldr	r2, [pc, #116]	; (8001a00 <HAL_CAN_MspInit+0x94>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d133      	bne.n	80019f6 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	4b1c      	ldr	r3, [pc, #112]	; (8001a04 <HAL_CAN_MspInit+0x98>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	4a1b      	ldr	r2, [pc, #108]	; (8001a04 <HAL_CAN_MspInit+0x98>)
 8001998:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800199c:	6413      	str	r3, [r2, #64]	; 0x40
 800199e:	4b19      	ldr	r3, [pc, #100]	; (8001a04 <HAL_CAN_MspInit+0x98>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a6:	613b      	str	r3, [r7, #16]
 80019a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	4b15      	ldr	r3, [pc, #84]	; (8001a04 <HAL_CAN_MspInit+0x98>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	4a14      	ldr	r2, [pc, #80]	; (8001a04 <HAL_CAN_MspInit+0x98>)
 80019b4:	f043 0308 	orr.w	r3, r3, #8
 80019b8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ba:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <HAL_CAN_MspInit+0x98>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	f003 0308 	and.w	r3, r3, #8
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80019c6:	2303      	movs	r3, #3
 80019c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ca:	2302      	movs	r3, #2
 80019cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d2:	2303      	movs	r3, #3
 80019d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80019d6:	2309      	movs	r3, #9
 80019d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019da:	f107 0314 	add.w	r3, r7, #20
 80019de:	4619      	mov	r1, r3
 80019e0:	4809      	ldr	r0, [pc, #36]	; (8001a08 <HAL_CAN_MspInit+0x9c>)
 80019e2:	f002 f9d5 	bl	8003d90 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80019e6:	2200      	movs	r2, #0
 80019e8:	2105      	movs	r1, #5
 80019ea:	2014      	movs	r0, #20
 80019ec:	f001 fe36 	bl	800365c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80019f0:	2014      	movs	r0, #20
 80019f2:	f001 fe4f 	bl	8003694 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80019f6:	bf00      	nop
 80019f8:	3728      	adds	r7, #40	; 0x28
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40006400 	.word	0x40006400
 8001a04:	40023800 	.word	0x40023800
 8001a08:	40020c00 	.word	0x40020c00

08001a0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08a      	sub	sp, #40	; 0x28
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a14:	f107 0314 	add.w	r3, r7, #20
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a19      	ldr	r2, [pc, #100]	; (8001a90 <HAL_I2C_MspInit+0x84>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d12c      	bne.n	8001a88 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	613b      	str	r3, [r7, #16]
 8001a32:	4b18      	ldr	r3, [pc, #96]	; (8001a94 <HAL_I2C_MspInit+0x88>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	4a17      	ldr	r2, [pc, #92]	; (8001a94 <HAL_I2C_MspInit+0x88>)
 8001a38:	f043 0302 	orr.w	r3, r3, #2
 8001a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3e:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <HAL_I2C_MspInit+0x88>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	613b      	str	r3, [r7, #16]
 8001a48:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001a4a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001a4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a50:	2312      	movs	r3, #18
 8001a52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a54:	2301      	movs	r3, #1
 8001a56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a5c:	2304      	movs	r3, #4
 8001a5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a60:	f107 0314 	add.w	r3, r7, #20
 8001a64:	4619      	mov	r1, r3
 8001a66:	480c      	ldr	r0, [pc, #48]	; (8001a98 <HAL_I2C_MspInit+0x8c>)
 8001a68:	f002 f992 	bl	8003d90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <HAL_I2C_MspInit+0x88>)
 8001a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a74:	4a07      	ldr	r2, [pc, #28]	; (8001a94 <HAL_I2C_MspInit+0x88>)
 8001a76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a7a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a7c:	4b05      	ldr	r3, [pc, #20]	; (8001a94 <HAL_I2C_MspInit+0x88>)
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a84:	60fb      	str	r3, [r7, #12]
 8001a86:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a88:	bf00      	nop
 8001a8a:	3728      	adds	r7, #40	; 0x28
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40005400 	.word	0x40005400
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40020400 	.word	0x40020400

08001a9c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08e      	sub	sp, #56	; 0x38
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
 8001ab2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ab4:	f107 0314 	add.w	r3, r7, #20
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a31      	ldr	r2, [pc, #196]	; (8001b8c <HAL_I2S_MspInit+0xf0>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d15a      	bne.n	8001b82 <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001acc:	2301      	movs	r3, #1
 8001ace:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001ad0:	23c0      	movs	r3, #192	; 0xc0
 8001ad2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ad8:	f107 0314 	add.w	r3, r7, #20
 8001adc:	4618      	mov	r0, r3
 8001ade:	f005 fb39 	bl	8007154 <HAL_RCCEx_PeriphCLKConfig>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001ae8:	f7ff fdb0 	bl	800164c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001aec:	2300      	movs	r3, #0
 8001aee:	613b      	str	r3, [r7, #16]
 8001af0:	4b27      	ldr	r3, [pc, #156]	; (8001b90 <HAL_I2S_MspInit+0xf4>)
 8001af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af4:	4a26      	ldr	r2, [pc, #152]	; (8001b90 <HAL_I2S_MspInit+0xf4>)
 8001af6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001afa:	6413      	str	r3, [r2, #64]	; 0x40
 8001afc:	4b24      	ldr	r3, [pc, #144]	; (8001b90 <HAL_I2S_MspInit+0xf4>)
 8001afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b04:	613b      	str	r3, [r7, #16]
 8001b06:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b08:	2300      	movs	r3, #0
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	4b20      	ldr	r3, [pc, #128]	; (8001b90 <HAL_I2S_MspInit+0xf4>)
 8001b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b10:	4a1f      	ldr	r2, [pc, #124]	; (8001b90 <HAL_I2S_MspInit+0xf4>)
 8001b12:	f043 0301 	orr.w	r3, r3, #1
 8001b16:	6313      	str	r3, [r2, #48]	; 0x30
 8001b18:	4b1d      	ldr	r3, [pc, #116]	; (8001b90 <HAL_I2S_MspInit+0xf4>)
 8001b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1c:	f003 0301 	and.w	r3, r3, #1
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b24:	2300      	movs	r3, #0
 8001b26:	60bb      	str	r3, [r7, #8]
 8001b28:	4b19      	ldr	r3, [pc, #100]	; (8001b90 <HAL_I2S_MspInit+0xf4>)
 8001b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2c:	4a18      	ldr	r2, [pc, #96]	; (8001b90 <HAL_I2S_MspInit+0xf4>)
 8001b2e:	f043 0304 	orr.w	r3, r3, #4
 8001b32:	6313      	str	r3, [r2, #48]	; 0x30
 8001b34:	4b16      	ldr	r3, [pc, #88]	; (8001b90 <HAL_I2S_MspInit+0xf4>)
 8001b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b38:	f003 0304 	and.w	r3, r3, #4
 8001b3c:	60bb      	str	r3, [r7, #8]
 8001b3e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001b40:	2310      	movs	r3, #16
 8001b42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b44:	2302      	movs	r3, #2
 8001b46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b50:	2306      	movs	r3, #6
 8001b52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001b54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b58:	4619      	mov	r1, r3
 8001b5a:	480e      	ldr	r0, [pc, #56]	; (8001b94 <HAL_I2S_MspInit+0xf8>)
 8001b5c:	f002 f918 	bl	8003d90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001b60:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b66:	2302      	movs	r3, #2
 8001b68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b72:	2306      	movs	r3, #6
 8001b74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4806      	ldr	r0, [pc, #24]	; (8001b98 <HAL_I2S_MspInit+0xfc>)
 8001b7e:	f002 f907 	bl	8003d90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001b82:	bf00      	nop
 8001b84:	3738      	adds	r7, #56	; 0x38
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40003c00 	.word	0x40003c00
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40020000 	.word	0x40020000
 8001b98:	40020800 	.word	0x40020800

08001b9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b08a      	sub	sp, #40	; 0x28
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba4:	f107 0314 	add.w	r3, r7, #20
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	609a      	str	r2, [r3, #8]
 8001bb0:	60da      	str	r2, [r3, #12]
 8001bb2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a19      	ldr	r2, [pc, #100]	; (8001c20 <HAL_SPI_MspInit+0x84>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d12b      	bne.n	8001c16 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	613b      	str	r3, [r7, #16]
 8001bc2:	4b18      	ldr	r3, [pc, #96]	; (8001c24 <HAL_SPI_MspInit+0x88>)
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc6:	4a17      	ldr	r2, [pc, #92]	; (8001c24 <HAL_SPI_MspInit+0x88>)
 8001bc8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bce:	4b15      	ldr	r3, [pc, #84]	; (8001c24 <HAL_SPI_MspInit+0x88>)
 8001bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bd6:	613b      	str	r3, [r7, #16]
 8001bd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <HAL_SPI_MspInit+0x88>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	4a10      	ldr	r2, [pc, #64]	; (8001c24 <HAL_SPI_MspInit+0x88>)
 8001be4:	f043 0301 	orr.w	r3, r3, #1
 8001be8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bea:	4b0e      	ldr	r3, [pc, #56]	; (8001c24 <HAL_SPI_MspInit+0x88>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001bf6:	23e0      	movs	r3, #224	; 0xe0
 8001bf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c02:	2300      	movs	r3, #0
 8001c04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c06:	2305      	movs	r3, #5
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c0a:	f107 0314 	add.w	r3, r7, #20
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4805      	ldr	r0, [pc, #20]	; (8001c28 <HAL_SPI_MspInit+0x8c>)
 8001c12:	f002 f8bd 	bl	8003d90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c16:	bf00      	nop
 8001c18:	3728      	adds	r7, #40	; 0x28
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40013000 	.word	0x40013000
 8001c24:	40023800 	.word	0x40023800
 8001c28:	40020000 	.word	0x40020000

08001c2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b08a      	sub	sp, #40	; 0x28
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c34:	f107 0314 	add.w	r3, r7, #20
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a28      	ldr	r2, [pc, #160]	; (8001cec <HAL_UART_MspInit+0xc0>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d149      	bne.n	8001ce2 <HAL_UART_MspInit+0xb6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	613b      	str	r3, [r7, #16]
 8001c52:	4b27      	ldr	r3, [pc, #156]	; (8001cf0 <HAL_UART_MspInit+0xc4>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	4a26      	ldr	r2, [pc, #152]	; (8001cf0 <HAL_UART_MspInit+0xc4>)
 8001c58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c5e:	4b24      	ldr	r3, [pc, #144]	; (8001cf0 <HAL_UART_MspInit+0xc4>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c66:	613b      	str	r3, [r7, #16]
 8001c68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	4b20      	ldr	r3, [pc, #128]	; (8001cf0 <HAL_UART_MspInit+0xc4>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	4a1f      	ldr	r2, [pc, #124]	; (8001cf0 <HAL_UART_MspInit+0xc4>)
 8001c74:	f043 0301 	orr.w	r3, r3, #1
 8001c78:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7a:	4b1d      	ldr	r3, [pc, #116]	; (8001cf0 <HAL_UART_MspInit+0xc4>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	60bb      	str	r3, [r7, #8]
 8001c8a:	4b19      	ldr	r3, [pc, #100]	; (8001cf0 <HAL_UART_MspInit+0xc4>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	4a18      	ldr	r2, [pc, #96]	; (8001cf0 <HAL_UART_MspInit+0xc4>)
 8001c90:	f043 0308 	orr.w	r3, r3, #8
 8001c94:	6313      	str	r3, [r2, #48]	; 0x30
 8001c96:	4b16      	ldr	r3, [pc, #88]	; (8001cf0 <HAL_UART_MspInit+0xc4>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	f003 0308 	and.w	r3, r3, #8
 8001c9e:	60bb      	str	r3, [r7, #8]
 8001ca0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ca2:	2304      	movs	r3, #4
 8001ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cb2:	2307      	movs	r3, #7
 8001cb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb6:	f107 0314 	add.w	r3, r7, #20
 8001cba:	4619      	mov	r1, r3
 8001cbc:	480d      	ldr	r0, [pc, #52]	; (8001cf4 <HAL_UART_MspInit+0xc8>)
 8001cbe:	f002 f867 	bl	8003d90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001cc2:	2340      	movs	r3, #64	; 0x40
 8001cc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cd2:	2307      	movs	r3, #7
 8001cd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cd6:	f107 0314 	add.w	r3, r7, #20
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4806      	ldr	r0, [pc, #24]	; (8001cf8 <HAL_UART_MspInit+0xcc>)
 8001cde:	f002 f857 	bl	8003d90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ce2:	bf00      	nop
 8001ce4:	3728      	adds	r7, #40	; 0x28
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40004400 	.word	0x40004400
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	40020000 	.word	0x40020000
 8001cf8:	40020c00 	.word	0x40020c00

08001cfc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08c      	sub	sp, #48	; 0x30
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001d04:	2300      	movs	r3, #0
 8001d06:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	2019      	movs	r0, #25
 8001d12:	f001 fca3 	bl	800365c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001d16:	2019      	movs	r0, #25
 8001d18:	f001 fcbc 	bl	8003694 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	4b1f      	ldr	r3, [pc, #124]	; (8001da0 <HAL_InitTick+0xa4>)
 8001d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d24:	4a1e      	ldr	r2, [pc, #120]	; (8001da0 <HAL_InitTick+0xa4>)
 8001d26:	f043 0301 	orr.w	r3, r3, #1
 8001d2a:	6453      	str	r3, [r2, #68]	; 0x44
 8001d2c:	4b1c      	ldr	r3, [pc, #112]	; (8001da0 <HAL_InitTick+0xa4>)
 8001d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d38:	f107 0210 	add.w	r2, r7, #16
 8001d3c:	f107 0314 	add.w	r3, r7, #20
 8001d40:	4611      	mov	r1, r2
 8001d42:	4618      	mov	r0, r3
 8001d44:	f005 f9d4 	bl	80070f0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001d48:	f005 f9be 	bl	80070c8 <HAL_RCC_GetPCLK2Freq>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d54:	4a13      	ldr	r2, [pc, #76]	; (8001da4 <HAL_InitTick+0xa8>)
 8001d56:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5a:	0c9b      	lsrs	r3, r3, #18
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001d60:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <HAL_InitTick+0xac>)
 8001d62:	4a12      	ldr	r2, [pc, #72]	; (8001dac <HAL_InitTick+0xb0>)
 8001d64:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001d66:	4b10      	ldr	r3, [pc, #64]	; (8001da8 <HAL_InitTick+0xac>)
 8001d68:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d6c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001d6e:	4a0e      	ldr	r2, [pc, #56]	; (8001da8 <HAL_InitTick+0xac>)
 8001d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d72:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001d74:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <HAL_InitTick+0xac>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d7a:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <HAL_InitTick+0xac>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001d80:	4809      	ldr	r0, [pc, #36]	; (8001da8 <HAL_InitTick+0xac>)
 8001d82:	f005 fbb0 	bl	80074e6 <HAL_TIM_Base_Init>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d104      	bne.n	8001d96 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001d8c:	4806      	ldr	r0, [pc, #24]	; (8001da8 <HAL_InitTick+0xac>)
 8001d8e:	f005 fc03 	bl	8007598 <HAL_TIM_Base_Start_IT>
 8001d92:	4603      	mov	r3, r0
 8001d94:	e000      	b.n	8001d98 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3730      	adds	r7, #48	; 0x30
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40023800 	.word	0x40023800
 8001da4:	431bde83 	.word	0x431bde83
 8001da8:	20004488 	.word	0x20004488
 8001dac:	40010000 	.word	0x40010000

08001db0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001db4:	e7fe      	b.n	8001db4 <NMI_Handler+0x4>

08001db6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001db6:	b480      	push	{r7}
 8001db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dba:	e7fe      	b.n	8001dba <HardFault_Handler+0x4>

08001dbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dc0:	e7fe      	b.n	8001dc0 <MemManage_Handler+0x4>

08001dc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dc6:	e7fe      	b.n	8001dc6 <BusFault_Handler+0x4>

08001dc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dcc:	e7fe      	b.n	8001dcc <UsageFault_Handler+0x4>

08001dce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001de0:	4802      	ldr	r0, [pc, #8]	; (8001dec <CAN1_RX0_IRQHandler+0x10>)
 8001de2:	f001 f954 	bl	800308e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	200043dc 	.word	0x200043dc

08001df0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001df4:	4802      	ldr	r0, [pc, #8]	; (8001e00 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001df6:	f005 fc3f 	bl	8007678 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20004488 	.word	0x20004488

08001e04 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e08:	4802      	ldr	r0, [pc, #8]	; (8001e14 <DMA2_Stream0_IRQHandler+0x10>)
 8001e0a:	f001 fd57 	bl	80038bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20004260 	.word	0x20004260

08001e18 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001e1c:	4802      	ldr	r0, [pc, #8]	; (8001e28 <DMA2_Stream1_IRQHandler+0x10>)
 8001e1e:	f001 fd4d 	bl	80038bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	2000416c 	.word	0x2000416c

08001e2c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001e30:	4802      	ldr	r0, [pc, #8]	; (8001e3c <DMA2_Stream2_IRQHandler+0x10>)
 8001e32:	f001 fd43 	bl	80038bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	2000437c 	.word	0x2000437c

08001e40 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001e44:	4802      	ldr	r0, [pc, #8]	; (8001e50 <OTG_FS_IRQHandler+0x10>)
 8001e46:	f002 fbf5 	bl	8004634 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	200048b8 	.word	0x200048b8

08001e54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e5c:	4a14      	ldr	r2, [pc, #80]	; (8001eb0 <_sbrk+0x5c>)
 8001e5e:	4b15      	ldr	r3, [pc, #84]	; (8001eb4 <_sbrk+0x60>)
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e68:	4b13      	ldr	r3, [pc, #76]	; (8001eb8 <_sbrk+0x64>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d102      	bne.n	8001e76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e70:	4b11      	ldr	r3, [pc, #68]	; (8001eb8 <_sbrk+0x64>)
 8001e72:	4a12      	ldr	r2, [pc, #72]	; (8001ebc <_sbrk+0x68>)
 8001e74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e76:	4b10      	ldr	r3, [pc, #64]	; (8001eb8 <_sbrk+0x64>)
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d207      	bcs.n	8001e94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e84:	f00b ff94 	bl	800ddb0 <__errno>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	220c      	movs	r2, #12
 8001e8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e92:	e009      	b.n	8001ea8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e94:	4b08      	ldr	r3, [pc, #32]	; (8001eb8 <_sbrk+0x64>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e9a:	4b07      	ldr	r3, [pc, #28]	; (8001eb8 <_sbrk+0x64>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	4a05      	ldr	r2, [pc, #20]	; (8001eb8 <_sbrk+0x64>)
 8001ea4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3718      	adds	r7, #24
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	20020000 	.word	0x20020000
 8001eb4:	00000400 	.word	0x00000400
 8001eb8:	20000364 	.word	0x20000364
 8001ebc:	20004bd0 	.word	0x20004bd0

08001ec0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ec4:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <SystemInit+0x20>)
 8001ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eca:	4a05      	ldr	r2, [pc, #20]	; (8001ee0 <SystemInit+0x20>)
 8001ecc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ed0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ed4:	bf00      	nop
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ee4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ee8:	480d      	ldr	r0, [pc, #52]	; (8001f20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001eea:	490e      	ldr	r1, [pc, #56]	; (8001f24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001eec:	4a0e      	ldr	r2, [pc, #56]	; (8001f28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001eee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ef0:	e002      	b.n	8001ef8 <LoopCopyDataInit>

08001ef2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ef2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ef4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ef6:	3304      	adds	r3, #4

08001ef8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ef8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001efa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001efc:	d3f9      	bcc.n	8001ef2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001efe:	4a0b      	ldr	r2, [pc, #44]	; (8001f2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f00:	4c0b      	ldr	r4, [pc, #44]	; (8001f30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f04:	e001      	b.n	8001f0a <LoopFillZerobss>

08001f06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f08:	3204      	adds	r2, #4

08001f0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f0c:	d3fb      	bcc.n	8001f06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f0e:	f7ff ffd7 	bl	8001ec0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f12:	f00b ff53 	bl	800ddbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f16:	f7fe fe6f 	bl	8000bf8 <main>
  bx  lr    
 8001f1a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f24:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001f28:	0800e948 	.word	0x0800e948
  ldr r2, =_sbss
 8001f2c:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001f30:	20004bcc 	.word	0x20004bcc

08001f34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f34:	e7fe      	b.n	8001f34 <ADC_IRQHandler>
	...

08001f38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f3c:	4b0e      	ldr	r3, [pc, #56]	; (8001f78 <HAL_Init+0x40>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a0d      	ldr	r2, [pc, #52]	; (8001f78 <HAL_Init+0x40>)
 8001f42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f48:	4b0b      	ldr	r3, [pc, #44]	; (8001f78 <HAL_Init+0x40>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a0a      	ldr	r2, [pc, #40]	; (8001f78 <HAL_Init+0x40>)
 8001f4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f54:	4b08      	ldr	r3, [pc, #32]	; (8001f78 <HAL_Init+0x40>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a07      	ldr	r2, [pc, #28]	; (8001f78 <HAL_Init+0x40>)
 8001f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f60:	2003      	movs	r0, #3
 8001f62:	f001 fb70 	bl	8003646 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f66:	200f      	movs	r0, #15
 8001f68:	f7ff fec8 	bl	8001cfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f6c:	f7ff fb74 	bl	8001658 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40023c00 	.word	0x40023c00

08001f7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f80:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <HAL_IncTick+0x20>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	461a      	mov	r2, r3
 8001f86:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <HAL_IncTick+0x24>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	4a04      	ldr	r2, [pc, #16]	; (8001fa0 <HAL_IncTick+0x24>)
 8001f8e:	6013      	str	r3, [r2, #0]
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	20000008 	.word	0x20000008
 8001fa0:	200044d0 	.word	0x200044d0

08001fa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fa8:	4b03      	ldr	r3, [pc, #12]	; (8001fb8 <HAL_GetTick+0x14>)
 8001faa:	681b      	ldr	r3, [r3, #0]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	200044d0 	.word	0x200044d0

08001fbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fc4:	f7ff ffee 	bl	8001fa4 <HAL_GetTick>
 8001fc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd4:	d005      	beq.n	8001fe2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fd6:	4b0a      	ldr	r3, [pc, #40]	; (8002000 <HAL_Delay+0x44>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	461a      	mov	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	4413      	add	r3, r2
 8001fe0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fe2:	bf00      	nop
 8001fe4:	f7ff ffde 	bl	8001fa4 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d8f7      	bhi.n	8001fe4 <HAL_Delay+0x28>
  {
  }
}
 8001ff4:	bf00      	nop
 8001ff6:	bf00      	nop
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20000008 	.word	0x20000008

08002004 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800200c:	2300      	movs	r3, #0
 800200e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e033      	b.n	8002082 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	2b00      	cmp	r3, #0
 8002020:	d109      	bne.n	8002036 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f7ff fb44 	bl	80016b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	f003 0310 	and.w	r3, r3, #16
 800203e:	2b00      	cmp	r3, #0
 8002040:	d118      	bne.n	8002074 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800204a:	f023 0302 	bic.w	r3, r3, #2
 800204e:	f043 0202 	orr.w	r2, r3, #2
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 fa68 	bl	800252c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	f023 0303 	bic.w	r3, r3, #3
 800206a:	f043 0201 	orr.w	r2, r3, #1
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	641a      	str	r2, [r3, #64]	; 0x40
 8002072:	e001      	b.n	8002078 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002080:	7bfb      	ldrb	r3, [r7, #15]
}
 8002082:	4618      	mov	r0, r3
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
	...

0800208c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002098:	2300      	movs	r3, #0
 800209a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d101      	bne.n	80020aa <HAL_ADC_Start_DMA+0x1e>
 80020a6:	2302      	movs	r3, #2
 80020a8:	e0e9      	b.n	800227e <HAL_ADC_Start_DMA+0x1f2>
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d018      	beq.n	80020f2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	689a      	ldr	r2, [r3, #8]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f042 0201 	orr.w	r2, r2, #1
 80020ce:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80020d0:	4b6d      	ldr	r3, [pc, #436]	; (8002288 <HAL_ADC_Start_DMA+0x1fc>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a6d      	ldr	r2, [pc, #436]	; (800228c <HAL_ADC_Start_DMA+0x200>)
 80020d6:	fba2 2303 	umull	r2, r3, r2, r3
 80020da:	0c9a      	lsrs	r2, r3, #18
 80020dc:	4613      	mov	r3, r2
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	4413      	add	r3, r2
 80020e2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80020e4:	e002      	b.n	80020ec <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	3b01      	subs	r3, #1
 80020ea:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1f9      	bne.n	80020e6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002100:	d107      	bne.n	8002112 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002110:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	2b01      	cmp	r3, #1
 800211e:	f040 80a1 	bne.w	8002264 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800212a:	f023 0301 	bic.w	r3, r3, #1
 800212e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002140:	2b00      	cmp	r3, #0
 8002142:	d007      	beq.n	8002154 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002148:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800214c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002158:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800215c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002160:	d106      	bne.n	8002170 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002166:	f023 0206 	bic.w	r2, r3, #6
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	645a      	str	r2, [r3, #68]	; 0x44
 800216e:	e002      	b.n	8002176 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2200      	movs	r2, #0
 8002174:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800217e:	4b44      	ldr	r3, [pc, #272]	; (8002290 <HAL_ADC_Start_DMA+0x204>)
 8002180:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002186:	4a43      	ldr	r2, [pc, #268]	; (8002294 <HAL_ADC_Start_DMA+0x208>)
 8002188:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800218e:	4a42      	ldr	r2, [pc, #264]	; (8002298 <HAL_ADC_Start_DMA+0x20c>)
 8002190:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002196:	4a41      	ldr	r2, [pc, #260]	; (800229c <HAL_ADC_Start_DMA+0x210>)
 8002198:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80021a2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	685a      	ldr	r2, [r3, #4]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80021b2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689a      	ldr	r2, [r3, #8]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021c2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	334c      	adds	r3, #76	; 0x4c
 80021ce:	4619      	mov	r1, r3
 80021d0:	68ba      	ldr	r2, [r7, #8]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f001 fb1a 	bl	800380c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f003 031f 	and.w	r3, r3, #31
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d12a      	bne.n	800223a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a2d      	ldr	r2, [pc, #180]	; (80022a0 <HAL_ADC_Start_DMA+0x214>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d015      	beq.n	800221a <HAL_ADC_Start_DMA+0x18e>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a2c      	ldr	r2, [pc, #176]	; (80022a4 <HAL_ADC_Start_DMA+0x218>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d105      	bne.n	8002204 <HAL_ADC_Start_DMA+0x178>
 80021f8:	4b25      	ldr	r3, [pc, #148]	; (8002290 <HAL_ADC_Start_DMA+0x204>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f003 031f 	and.w	r3, r3, #31
 8002200:	2b00      	cmp	r3, #0
 8002202:	d00a      	beq.n	800221a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a27      	ldr	r2, [pc, #156]	; (80022a8 <HAL_ADC_Start_DMA+0x21c>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d136      	bne.n	800227c <HAL_ADC_Start_DMA+0x1f0>
 800220e:	4b20      	ldr	r3, [pc, #128]	; (8002290 <HAL_ADC_Start_DMA+0x204>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f003 0310 	and.w	r3, r3, #16
 8002216:	2b00      	cmp	r3, #0
 8002218:	d130      	bne.n	800227c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d129      	bne.n	800227c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689a      	ldr	r2, [r3, #8]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	e020      	b.n	800227c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a18      	ldr	r2, [pc, #96]	; (80022a0 <HAL_ADC_Start_DMA+0x214>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d11b      	bne.n	800227c <HAL_ADC_Start_DMA+0x1f0>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d114      	bne.n	800227c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689a      	ldr	r2, [r3, #8]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002260:	609a      	str	r2, [r3, #8]
 8002262:	e00b      	b.n	800227c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002268:	f043 0210 	orr.w	r2, r3, #16
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002274:	f043 0201 	orr.w	r2, r3, #1
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3718      	adds	r7, #24
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	20000000 	.word	0x20000000
 800228c:	431bde83 	.word	0x431bde83
 8002290:	40012300 	.word	0x40012300
 8002294:	08002725 	.word	0x08002725
 8002298:	080027df 	.word	0x080027df
 800229c:	080027fb 	.word	0x080027fb
 80022a0:	40012000 	.word	0x40012000
 80022a4:	40012100 	.word	0x40012100
 80022a8:	40012200 	.word	0x40012200

080022ac <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d101      	bne.n	8002304 <HAL_ADC_ConfigChannel+0x1c>
 8002300:	2302      	movs	r3, #2
 8002302:	e105      	b.n	8002510 <HAL_ADC_ConfigChannel+0x228>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2b09      	cmp	r3, #9
 8002312:	d925      	bls.n	8002360 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68d9      	ldr	r1, [r3, #12]
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	b29b      	uxth	r3, r3
 8002320:	461a      	mov	r2, r3
 8002322:	4613      	mov	r3, r2
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	4413      	add	r3, r2
 8002328:	3b1e      	subs	r3, #30
 800232a:	2207      	movs	r2, #7
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43da      	mvns	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	400a      	ands	r2, r1
 8002338:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68d9      	ldr	r1, [r3, #12]
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	b29b      	uxth	r3, r3
 800234a:	4618      	mov	r0, r3
 800234c:	4603      	mov	r3, r0
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	4403      	add	r3, r0
 8002352:	3b1e      	subs	r3, #30
 8002354:	409a      	lsls	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	430a      	orrs	r2, r1
 800235c:	60da      	str	r2, [r3, #12]
 800235e:	e022      	b.n	80023a6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6919      	ldr	r1, [r3, #16]
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	b29b      	uxth	r3, r3
 800236c:	461a      	mov	r2, r3
 800236e:	4613      	mov	r3, r2
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	4413      	add	r3, r2
 8002374:	2207      	movs	r2, #7
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	43da      	mvns	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	400a      	ands	r2, r1
 8002382:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6919      	ldr	r1, [r3, #16]
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	b29b      	uxth	r3, r3
 8002394:	4618      	mov	r0, r3
 8002396:	4603      	mov	r3, r0
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	4403      	add	r3, r0
 800239c:	409a      	lsls	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	430a      	orrs	r2, r1
 80023a4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2b06      	cmp	r3, #6
 80023ac:	d824      	bhi.n	80023f8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	4613      	mov	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	4413      	add	r3, r2
 80023be:	3b05      	subs	r3, #5
 80023c0:	221f      	movs	r2, #31
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43da      	mvns	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	400a      	ands	r2, r1
 80023ce:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	b29b      	uxth	r3, r3
 80023dc:	4618      	mov	r0, r3
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	4613      	mov	r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	4413      	add	r3, r2
 80023e8:	3b05      	subs	r3, #5
 80023ea:	fa00 f203 	lsl.w	r2, r0, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	430a      	orrs	r2, r1
 80023f4:	635a      	str	r2, [r3, #52]	; 0x34
 80023f6:	e04c      	b.n	8002492 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	2b0c      	cmp	r3, #12
 80023fe:	d824      	bhi.n	800244a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685a      	ldr	r2, [r3, #4]
 800240a:	4613      	mov	r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	4413      	add	r3, r2
 8002410:	3b23      	subs	r3, #35	; 0x23
 8002412:	221f      	movs	r2, #31
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	43da      	mvns	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	400a      	ands	r2, r1
 8002420:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	b29b      	uxth	r3, r3
 800242e:	4618      	mov	r0, r3
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685a      	ldr	r2, [r3, #4]
 8002434:	4613      	mov	r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	4413      	add	r3, r2
 800243a:	3b23      	subs	r3, #35	; 0x23
 800243c:	fa00 f203 	lsl.w	r2, r0, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	430a      	orrs	r2, r1
 8002446:	631a      	str	r2, [r3, #48]	; 0x30
 8002448:	e023      	b.n	8002492 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685a      	ldr	r2, [r3, #4]
 8002454:	4613      	mov	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4413      	add	r3, r2
 800245a:	3b41      	subs	r3, #65	; 0x41
 800245c:	221f      	movs	r2, #31
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	43da      	mvns	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	400a      	ands	r2, r1
 800246a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	b29b      	uxth	r3, r3
 8002478:	4618      	mov	r0, r3
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	4613      	mov	r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	4413      	add	r3, r2
 8002484:	3b41      	subs	r3, #65	; 0x41
 8002486:	fa00 f203 	lsl.w	r2, r0, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	430a      	orrs	r2, r1
 8002490:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002492:	4b22      	ldr	r3, [pc, #136]	; (800251c <HAL_ADC_ConfigChannel+0x234>)
 8002494:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a21      	ldr	r2, [pc, #132]	; (8002520 <HAL_ADC_ConfigChannel+0x238>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d109      	bne.n	80024b4 <HAL_ADC_ConfigChannel+0x1cc>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2b12      	cmp	r3, #18
 80024a6:	d105      	bne.n	80024b4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a19      	ldr	r2, [pc, #100]	; (8002520 <HAL_ADC_ConfigChannel+0x238>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d123      	bne.n	8002506 <HAL_ADC_ConfigChannel+0x21e>
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2b10      	cmp	r3, #16
 80024c4:	d003      	beq.n	80024ce <HAL_ADC_ConfigChannel+0x1e6>
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2b11      	cmp	r3, #17
 80024cc:	d11b      	bne.n	8002506 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2b10      	cmp	r3, #16
 80024e0:	d111      	bne.n	8002506 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024e2:	4b10      	ldr	r3, [pc, #64]	; (8002524 <HAL_ADC_ConfigChannel+0x23c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a10      	ldr	r2, [pc, #64]	; (8002528 <HAL_ADC_ConfigChannel+0x240>)
 80024e8:	fba2 2303 	umull	r2, r3, r2, r3
 80024ec:	0c9a      	lsrs	r2, r3, #18
 80024ee:	4613      	mov	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4413      	add	r3, r2
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024f8:	e002      	b.n	8002500 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	3b01      	subs	r3, #1
 80024fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1f9      	bne.n	80024fa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	3714      	adds	r7, #20
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	40012300 	.word	0x40012300
 8002520:	40012000 	.word	0x40012000
 8002524:	20000000 	.word	0x20000000
 8002528:	431bde83 	.word	0x431bde83

0800252c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002534:	4b79      	ldr	r3, [pc, #484]	; (800271c <ADC_Init+0x1f0>)
 8002536:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	685a      	ldr	r2, [r3, #4]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	431a      	orrs	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	685a      	ldr	r2, [r3, #4]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002560:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6859      	ldr	r1, [r3, #4]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	021a      	lsls	r2, r3, #8
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	430a      	orrs	r2, r1
 8002574:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002584:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	6859      	ldr	r1, [r3, #4]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689a      	ldr	r2, [r3, #8]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	430a      	orrs	r2, r1
 8002596:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689a      	ldr	r2, [r3, #8]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6899      	ldr	r1, [r3, #8]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	68da      	ldr	r2, [r3, #12]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025be:	4a58      	ldr	r2, [pc, #352]	; (8002720 <ADC_Init+0x1f4>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d022      	beq.n	800260a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	689a      	ldr	r2, [r3, #8]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6899      	ldr	r1, [r3, #8]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	430a      	orrs	r2, r1
 80025e4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6899      	ldr	r1, [r3, #8]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	430a      	orrs	r2, r1
 8002606:	609a      	str	r2, [r3, #8]
 8002608:	e00f      	b.n	800262a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002618:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002628:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0202 	bic.w	r2, r2, #2
 8002638:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	6899      	ldr	r1, [r3, #8]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	7e1b      	ldrb	r3, [r3, #24]
 8002644:	005a      	lsls	r2, r3, #1
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	430a      	orrs	r2, r1
 800264c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d01b      	beq.n	8002690 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	685a      	ldr	r2, [r3, #4]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002666:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	685a      	ldr	r2, [r3, #4]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002676:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6859      	ldr	r1, [r3, #4]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	3b01      	subs	r3, #1
 8002684:	035a      	lsls	r2, r3, #13
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	430a      	orrs	r2, r1
 800268c:	605a      	str	r2, [r3, #4]
 800268e:	e007      	b.n	80026a0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800269e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80026ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	3b01      	subs	r3, #1
 80026bc:	051a      	lsls	r2, r3, #20
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80026d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6899      	ldr	r1, [r3, #8]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026e2:	025a      	lsls	r2, r3, #9
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	430a      	orrs	r2, r1
 80026ea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689a      	ldr	r2, [r3, #8]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6899      	ldr	r1, [r3, #8]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	029a      	lsls	r2, r3, #10
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	430a      	orrs	r2, r1
 800270e:	609a      	str	r2, [r3, #8]
}
 8002710:	bf00      	nop
 8002712:	3714      	adds	r7, #20
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	40012300 	.word	0x40012300
 8002720:	0f000001 	.word	0x0f000001

08002724 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002730:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800273a:	2b00      	cmp	r3, #0
 800273c:	d13c      	bne.n	80027b8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d12b      	bne.n	80027b0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800275c:	2b00      	cmp	r3, #0
 800275e:	d127      	bne.n	80027b0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002766:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800276a:	2b00      	cmp	r3, #0
 800276c:	d006      	beq.n	800277c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002778:	2b00      	cmp	r3, #0
 800277a:	d119      	bne.n	80027b0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 0220 	bic.w	r2, r2, #32
 800278a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002790:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d105      	bne.n	80027b0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a8:	f043 0201 	orr.w	r2, r3, #1
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f7ff fd7b 	bl	80022ac <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80027b6:	e00e      	b.n	80027d6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027bc:	f003 0310 	and.w	r3, r3, #16
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d003      	beq.n	80027cc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f7ff fd85 	bl	80022d4 <HAL_ADC_ErrorCallback>
}
 80027ca:	e004      	b.n	80027d6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	4798      	blx	r3
}
 80027d6:	bf00      	nop
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b084      	sub	sp, #16
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ea:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f7ff fd67 	bl	80022c0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027f2:	bf00      	nop
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b084      	sub	sp, #16
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002806:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2240      	movs	r2, #64	; 0x40
 800280c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002812:	f043 0204 	orr.w	r2, r3, #4
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f7ff fd5a 	bl	80022d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002820:	bf00      	nop
 8002822:	3710      	adds	r7, #16
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e0ed      	b.n	8002a16 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d102      	bne.n	800284c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f7ff f890 	bl	800196c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f042 0201 	orr.w	r2, r2, #1
 800285a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800285c:	f7ff fba2 	bl	8001fa4 <HAL_GetTick>
 8002860:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002862:	e012      	b.n	800288a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002864:	f7ff fb9e 	bl	8001fa4 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b0a      	cmp	r3, #10
 8002870:	d90b      	bls.n	800288a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002876:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2205      	movs	r2, #5
 8002882:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e0c5      	b.n	8002a16 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	2b00      	cmp	r3, #0
 8002896:	d0e5      	beq.n	8002864 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f022 0202 	bic.w	r2, r2, #2
 80028a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028a8:	f7ff fb7c 	bl	8001fa4 <HAL_GetTick>
 80028ac:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80028ae:	e012      	b.n	80028d6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80028b0:	f7ff fb78 	bl	8001fa4 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b0a      	cmp	r3, #10
 80028bc:	d90b      	bls.n	80028d6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2205      	movs	r2, #5
 80028ce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e09f      	b.n	8002a16 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1e5      	bne.n	80028b0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	7e1b      	ldrb	r3, [r3, #24]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d108      	bne.n	80028fe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	e007      	b.n	800290e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800290c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	7e5b      	ldrb	r3, [r3, #25]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d108      	bne.n	8002928 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	e007      	b.n	8002938 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002936:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	7e9b      	ldrb	r3, [r3, #26]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d108      	bne.n	8002952 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f042 0220 	orr.w	r2, r2, #32
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	e007      	b.n	8002962 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 0220 	bic.w	r2, r2, #32
 8002960:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	7edb      	ldrb	r3, [r3, #27]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d108      	bne.n	800297c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f022 0210 	bic.w	r2, r2, #16
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	e007      	b.n	800298c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 0210 	orr.w	r2, r2, #16
 800298a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	7f1b      	ldrb	r3, [r3, #28]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d108      	bne.n	80029a6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f042 0208 	orr.w	r2, r2, #8
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	e007      	b.n	80029b6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f022 0208 	bic.w	r2, r2, #8
 80029b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	7f5b      	ldrb	r3, [r3, #29]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d108      	bne.n	80029d0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f042 0204 	orr.w	r2, r2, #4
 80029cc:	601a      	str	r2, [r3, #0]
 80029ce:	e007      	b.n	80029e0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f022 0204 	bic.w	r2, r2, #4
 80029de:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	431a      	orrs	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	431a      	orrs	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	695b      	ldr	r3, [r3, #20]
 80029f4:	ea42 0103 	orr.w	r1, r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	1e5a      	subs	r2, r3, #1
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	430a      	orrs	r2, r1
 8002a04:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
	...

08002a20 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b087      	sub	sp, #28
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a36:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002a38:	7cfb      	ldrb	r3, [r7, #19]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d003      	beq.n	8002a46 <HAL_CAN_ConfigFilter+0x26>
 8002a3e:	7cfb      	ldrb	r3, [r7, #19]
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	f040 80be 	bne.w	8002bc2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002a46:	4b65      	ldr	r3, [pc, #404]	; (8002bdc <HAL_CAN_ConfigFilter+0x1bc>)
 8002a48:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a50:	f043 0201 	orr.w	r2, r3, #1
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a60:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a74:	021b      	lsls	r3, r3, #8
 8002a76:	431a      	orrs	r2, r3
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	f003 031f 	and.w	r3, r3, #31
 8002a86:	2201      	movs	r2, #1
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	43db      	mvns	r3, r3
 8002a98:	401a      	ands	r2, r3
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	69db      	ldr	r3, [r3, #28]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d123      	bne.n	8002af0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	401a      	ands	r2, r3
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002aca:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	3248      	adds	r2, #72	; 0x48
 8002ad0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ae4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002ae6:	6979      	ldr	r1, [r7, #20]
 8002ae8:	3348      	adds	r3, #72	; 0x48
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	440b      	add	r3, r1
 8002aee:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	69db      	ldr	r3, [r3, #28]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d122      	bne.n	8002b3e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	431a      	orrs	r2, r3
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002b18:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	3248      	adds	r2, #72	; 0x48
 8002b1e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b32:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b34:	6979      	ldr	r1, [r7, #20]
 8002b36:	3348      	adds	r3, #72	; 0x48
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	440b      	add	r3, r1
 8002b3c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d109      	bne.n	8002b5a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	43db      	mvns	r3, r3
 8002b50:	401a      	ands	r2, r3
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002b58:	e007      	b.n	8002b6a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	431a      	orrs	r2, r3
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d109      	bne.n	8002b86 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	43db      	mvns	r3, r3
 8002b7c:	401a      	ands	r2, r3
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002b84:	e007      	b.n	8002b96 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	6a1b      	ldr	r3, [r3, #32]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d107      	bne.n	8002bae <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002bb4:	f023 0201 	bic.w	r2, r3, #1
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	e006      	b.n	8002bd0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
  }
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	371c      	adds	r7, #28
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	40006400 	.word	0x40006400

08002be0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d12e      	bne.n	8002c52 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2202      	movs	r2, #2
 8002bf8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 0201 	bic.w	r2, r2, #1
 8002c0a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002c0c:	f7ff f9ca 	bl	8001fa4 <HAL_GetTick>
 8002c10:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002c12:	e012      	b.n	8002c3a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c14:	f7ff f9c6 	bl	8001fa4 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b0a      	cmp	r3, #10
 8002c20:	d90b      	bls.n	8002c3a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c26:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2205      	movs	r2, #5
 8002c32:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e012      	b.n	8002c60 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1e5      	bne.n	8002c14 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	e006      	b.n	8002c60 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c56:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
  }
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b089      	sub	sp, #36	; 0x24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
 8002c74:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c7c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002c86:	7ffb      	ldrb	r3, [r7, #31]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d003      	beq.n	8002c94 <HAL_CAN_AddTxMessage+0x2c>
 8002c8c:	7ffb      	ldrb	r3, [r7, #31]
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	f040 80b8 	bne.w	8002e04 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10a      	bne.n	8002cb4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d105      	bne.n	8002cb4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f000 80a0 	beq.w	8002df4 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	0e1b      	lsrs	r3, r3, #24
 8002cb8:	f003 0303 	and.w	r3, r3, #3
 8002cbc:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d907      	bls.n	8002cd4 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e09e      	b.n	8002e12 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	409a      	lsls	r2, r3
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d10d      	bne.n	8002d02 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002cf0:	68f9      	ldr	r1, [r7, #12]
 8002cf2:	6809      	ldr	r1, [r1, #0]
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	3318      	adds	r3, #24
 8002cfa:	011b      	lsls	r3, r3, #4
 8002cfc:	440b      	add	r3, r1
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	e00f      	b.n	8002d22 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d0c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d12:	68f9      	ldr	r1, [r7, #12]
 8002d14:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002d16:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	3318      	adds	r3, #24
 8002d1c:	011b      	lsls	r3, r3, #4
 8002d1e:	440b      	add	r3, r1
 8002d20:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6819      	ldr	r1, [r3, #0]
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	691a      	ldr	r2, [r3, #16]
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	3318      	adds	r3, #24
 8002d2e:	011b      	lsls	r3, r3, #4
 8002d30:	440b      	add	r3, r1
 8002d32:	3304      	adds	r3, #4
 8002d34:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	7d1b      	ldrb	r3, [r3, #20]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d111      	bne.n	8002d62 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	3318      	adds	r3, #24
 8002d46:	011b      	lsls	r3, r3, #4
 8002d48:	4413      	add	r3, r2
 8002d4a:	3304      	adds	r3, #4
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	6811      	ldr	r1, [r2, #0]
 8002d52:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	3318      	adds	r3, #24
 8002d5a:	011b      	lsls	r3, r3, #4
 8002d5c:	440b      	add	r3, r1
 8002d5e:	3304      	adds	r3, #4
 8002d60:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	3307      	adds	r3, #7
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	061a      	lsls	r2, r3, #24
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	3306      	adds	r3, #6
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	041b      	lsls	r3, r3, #16
 8002d72:	431a      	orrs	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	3305      	adds	r3, #5
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	021b      	lsls	r3, r3, #8
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	3204      	adds	r2, #4
 8002d82:	7812      	ldrb	r2, [r2, #0]
 8002d84:	4610      	mov	r0, r2
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	6811      	ldr	r1, [r2, #0]
 8002d8a:	ea43 0200 	orr.w	r2, r3, r0
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	011b      	lsls	r3, r3, #4
 8002d92:	440b      	add	r3, r1
 8002d94:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002d98:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	3303      	adds	r3, #3
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	061a      	lsls	r2, r3, #24
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	3302      	adds	r3, #2
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	041b      	lsls	r3, r3, #16
 8002daa:	431a      	orrs	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	3301      	adds	r3, #1
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	021b      	lsls	r3, r3, #8
 8002db4:	4313      	orrs	r3, r2
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	7812      	ldrb	r2, [r2, #0]
 8002dba:	4610      	mov	r0, r2
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	6811      	ldr	r1, [r2, #0]
 8002dc0:	ea43 0200 	orr.w	r2, r3, r0
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	011b      	lsls	r3, r3, #4
 8002dc8:	440b      	add	r3, r1
 8002dca:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002dce:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	3318      	adds	r3, #24
 8002dd8:	011b      	lsls	r3, r3, #4
 8002dda:	4413      	add	r3, r2
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	6811      	ldr	r1, [r2, #0]
 8002de2:	f043 0201 	orr.w	r2, r3, #1
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	3318      	adds	r3, #24
 8002dea:	011b      	lsls	r3, r3, #4
 8002dec:	440b      	add	r3, r1
 8002dee:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002df0:	2300      	movs	r3, #0
 8002df2:	e00e      	b.n	8002e12 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e006      	b.n	8002e12 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e08:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
  }
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3724      	adds	r7, #36	; 0x24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr

08002e1e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b087      	sub	sp, #28
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	60f8      	str	r0, [r7, #12]
 8002e26:	60b9      	str	r1, [r7, #8]
 8002e28:	607a      	str	r2, [r7, #4]
 8002e2a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e32:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002e34:	7dfb      	ldrb	r3, [r7, #23]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d003      	beq.n	8002e42 <HAL_CAN_GetRxMessage+0x24>
 8002e3a:	7dfb      	ldrb	r3, [r7, #23]
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	f040 80f3 	bne.w	8003028 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d10e      	bne.n	8002e66 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	f003 0303 	and.w	r3, r3, #3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d116      	bne.n	8002e84 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e0e7      	b.n	8003036 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	f003 0303 	and.w	r3, r3, #3
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d107      	bne.n	8002e84 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e78:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e0d8      	b.n	8003036 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	331b      	adds	r3, #27
 8002e8c:	011b      	lsls	r3, r3, #4
 8002e8e:	4413      	add	r3, r2
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0204 	and.w	r2, r3, #4
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10c      	bne.n	8002ebc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	331b      	adds	r3, #27
 8002eaa:	011b      	lsls	r3, r3, #4
 8002eac:	4413      	add	r3, r2
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	0d5b      	lsrs	r3, r3, #21
 8002eb2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	e00b      	b.n	8002ed4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	331b      	adds	r3, #27
 8002ec4:	011b      	lsls	r3, r3, #4
 8002ec6:	4413      	add	r3, r2
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	08db      	lsrs	r3, r3, #3
 8002ecc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	331b      	adds	r3, #27
 8002edc:	011b      	lsls	r3, r3, #4
 8002ede:	4413      	add	r3, r2
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0202 	and.w	r2, r3, #2
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	331b      	adds	r3, #27
 8002ef2:	011b      	lsls	r3, r3, #4
 8002ef4:	4413      	add	r3, r2
 8002ef6:	3304      	adds	r3, #4
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 020f 	and.w	r2, r3, #15
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	331b      	adds	r3, #27
 8002f0a:	011b      	lsls	r3, r3, #4
 8002f0c:	4413      	add	r3, r2
 8002f0e:	3304      	adds	r3, #4
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	0a1b      	lsrs	r3, r3, #8
 8002f14:	b2da      	uxtb	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	331b      	adds	r3, #27
 8002f22:	011b      	lsls	r3, r3, #4
 8002f24:	4413      	add	r3, r2
 8002f26:	3304      	adds	r3, #4
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	0c1b      	lsrs	r3, r3, #16
 8002f2c:	b29a      	uxth	r2, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	011b      	lsls	r3, r3, #4
 8002f3a:	4413      	add	r3, r2
 8002f3c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	b2da      	uxtb	r2, r3
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	011b      	lsls	r3, r3, #4
 8002f50:	4413      	add	r3, r2
 8002f52:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	0a1a      	lsrs	r2, r3, #8
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	b2d2      	uxtb	r2, r2
 8002f60:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	011b      	lsls	r3, r3, #4
 8002f6a:	4413      	add	r3, r2
 8002f6c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	0c1a      	lsrs	r2, r3, #16
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	3302      	adds	r3, #2
 8002f78:	b2d2      	uxtb	r2, r2
 8002f7a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	011b      	lsls	r3, r3, #4
 8002f84:	4413      	add	r3, r2
 8002f86:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	0e1a      	lsrs	r2, r3, #24
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	3303      	adds	r3, #3
 8002f92:	b2d2      	uxtb	r2, r2
 8002f94:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	011b      	lsls	r3, r3, #4
 8002f9e:	4413      	add	r3, r2
 8002fa0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	3304      	adds	r3, #4
 8002faa:	b2d2      	uxtb	r2, r2
 8002fac:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	011b      	lsls	r3, r3, #4
 8002fb6:	4413      	add	r3, r2
 8002fb8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	0a1a      	lsrs	r2, r3, #8
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	3305      	adds	r3, #5
 8002fc4:	b2d2      	uxtb	r2, r2
 8002fc6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	011b      	lsls	r3, r3, #4
 8002fd0:	4413      	add	r3, r2
 8002fd2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	0c1a      	lsrs	r2, r3, #16
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	3306      	adds	r3, #6
 8002fde:	b2d2      	uxtb	r2, r2
 8002fe0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	011b      	lsls	r3, r3, #4
 8002fea:	4413      	add	r3, r2
 8002fec:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	0e1a      	lsrs	r2, r3, #24
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	3307      	adds	r3, #7
 8002ff8:	b2d2      	uxtb	r2, r2
 8002ffa:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d108      	bne.n	8003014 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68da      	ldr	r2, [r3, #12]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f042 0220 	orr.w	r2, r2, #32
 8003010:	60da      	str	r2, [r3, #12]
 8003012:	e007      	b.n	8003024 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	691a      	ldr	r2, [r3, #16]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f042 0220 	orr.w	r2, r2, #32
 8003022:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003024:	2300      	movs	r3, #0
 8003026:	e006      	b.n	8003036 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
  }
}
 8003036:	4618      	mov	r0, r3
 8003038:	371c      	adds	r7, #28
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr

08003042 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003042:	b480      	push	{r7}
 8003044:	b085      	sub	sp, #20
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
 800304a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003052:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003054:	7bfb      	ldrb	r3, [r7, #15]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d002      	beq.n	8003060 <HAL_CAN_ActivateNotification+0x1e>
 800305a:	7bfb      	ldrb	r3, [r7, #15]
 800305c:	2b02      	cmp	r3, #2
 800305e:	d109      	bne.n	8003074 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	6959      	ldr	r1, [r3, #20]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	683a      	ldr	r2, [r7, #0]
 800306c:	430a      	orrs	r2, r1
 800306e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003070:	2300      	movs	r3, #0
 8003072:	e006      	b.n	8003082 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003078:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
  }
}
 8003082:	4618      	mov	r0, r3
 8003084:	3714      	adds	r7, #20
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr

0800308e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b08a      	sub	sp, #40	; 0x28
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003096:	2300      	movs	r3, #0
 8003098:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	695b      	ldr	r3, [r3, #20]
 80030a0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80030ca:	6a3b      	ldr	r3, [r7, #32]
 80030cc:	f003 0301 	and.w	r3, r3, #1
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d07c      	beq.n	80031ce <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d023      	beq.n	8003126 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2201      	movs	r2, #1
 80030e4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 f983 	bl	80033fc <HAL_CAN_TxMailbox0CompleteCallback>
 80030f6:	e016      	b.n	8003126 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	f003 0304 	and.w	r3, r3, #4
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d004      	beq.n	800310c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003104:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003108:	627b      	str	r3, [r7, #36]	; 0x24
 800310a:	e00c      	b.n	8003126 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	f003 0308 	and.w	r3, r3, #8
 8003112:	2b00      	cmp	r3, #0
 8003114:	d004      	beq.n	8003120 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003118:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800311c:	627b      	str	r3, [r7, #36]	; 0x24
 800311e:	e002      	b.n	8003126 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 f989 	bl	8003438 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800312c:	2b00      	cmp	r3, #0
 800312e:	d024      	beq.n	800317a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003138:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003140:	2b00      	cmp	r3, #0
 8003142:	d003      	beq.n	800314c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 f963 	bl	8003410 <HAL_CAN_TxMailbox1CompleteCallback>
 800314a:	e016      	b.n	800317a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003152:	2b00      	cmp	r3, #0
 8003154:	d004      	beq.n	8003160 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003158:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800315c:	627b      	str	r3, [r7, #36]	; 0x24
 800315e:	e00c      	b.n	800317a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003166:	2b00      	cmp	r3, #0
 8003168:	d004      	beq.n	8003174 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003170:	627b      	str	r3, [r7, #36]	; 0x24
 8003172:	e002      	b.n	800317a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 f969 	bl	800344c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d024      	beq.n	80031ce <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800318c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d003      	beq.n	80031a0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 f943 	bl	8003424 <HAL_CAN_TxMailbox2CompleteCallback>
 800319e:	e016      	b.n	80031ce <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d004      	beq.n	80031b4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80031aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031b0:	627b      	str	r3, [r7, #36]	; 0x24
 80031b2:	e00c      	b.n	80031ce <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d004      	beq.n	80031c8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80031be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c4:	627b      	str	r3, [r7, #36]	; 0x24
 80031c6:	e002      	b.n	80031ce <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 f949 	bl	8003460 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80031ce:	6a3b      	ldr	r3, [r7, #32]
 80031d0:	f003 0308 	and.w	r3, r3, #8
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00c      	beq.n	80031f2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	f003 0310 	and.w	r3, r3, #16
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d007      	beq.n	80031f2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80031e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031e8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2210      	movs	r2, #16
 80031f0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80031f2:	6a3b      	ldr	r3, [r7, #32]
 80031f4:	f003 0304 	and.w	r3, r3, #4
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00b      	beq.n	8003214 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	f003 0308 	and.w	r3, r3, #8
 8003202:	2b00      	cmp	r3, #0
 8003204:	d006      	beq.n	8003214 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2208      	movs	r2, #8
 800320c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 f930 	bl	8003474 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003214:	6a3b      	ldr	r3, [r7, #32]
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d009      	beq.n	8003232 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	f003 0303 	and.w	r3, r3, #3
 8003228:	2b00      	cmp	r3, #0
 800322a:	d002      	beq.n	8003232 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f7fd fcc3 	bl	8000bb8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003232:	6a3b      	ldr	r3, [r7, #32]
 8003234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00c      	beq.n	8003256 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	f003 0310 	and.w	r3, r3, #16
 8003242:	2b00      	cmp	r3, #0
 8003244:	d007      	beq.n	8003256 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003248:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800324c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2210      	movs	r2, #16
 8003254:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003256:	6a3b      	ldr	r3, [r7, #32]
 8003258:	f003 0320 	and.w	r3, r3, #32
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00b      	beq.n	8003278 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	f003 0308 	and.w	r3, r3, #8
 8003266:	2b00      	cmp	r3, #0
 8003268:	d006      	beq.n	8003278 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2208      	movs	r2, #8
 8003270:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 f912 	bl	800349c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003278:	6a3b      	ldr	r3, [r7, #32]
 800327a:	f003 0310 	and.w	r3, r3, #16
 800327e:	2b00      	cmp	r3, #0
 8003280:	d009      	beq.n	8003296 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	f003 0303 	and.w	r3, r3, #3
 800328c:	2b00      	cmp	r3, #0
 800328e:	d002      	beq.n	8003296 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 f8f9 	bl	8003488 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003296:	6a3b      	ldr	r3, [r7, #32]
 8003298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d00b      	beq.n	80032b8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	f003 0310 	and.w	r3, r3, #16
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d006      	beq.n	80032b8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2210      	movs	r2, #16
 80032b0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 f8fc 	bl	80034b0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80032b8:	6a3b      	ldr	r3, [r7, #32]
 80032ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00b      	beq.n	80032da <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	f003 0308 	and.w	r3, r3, #8
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d006      	beq.n	80032da <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2208      	movs	r2, #8
 80032d2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f000 f8f5 	bl	80034c4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80032da:	6a3b      	ldr	r3, [r7, #32]
 80032dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d07b      	beq.n	80033dc <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	f003 0304 	and.w	r3, r3, #4
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d072      	beq.n	80033d4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80032ee:	6a3b      	ldr	r3, [r7, #32]
 80032f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d008      	beq.n	800330a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d003      	beq.n	800330a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003304:	f043 0301 	orr.w	r3, r3, #1
 8003308:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800330a:	6a3b      	ldr	r3, [r7, #32]
 800330c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003310:	2b00      	cmp	r3, #0
 8003312:	d008      	beq.n	8003326 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800331a:	2b00      	cmp	r3, #0
 800331c:	d003      	beq.n	8003326 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800331e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003320:	f043 0302 	orr.w	r3, r3, #2
 8003324:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003326:	6a3b      	ldr	r3, [r7, #32]
 8003328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800332c:	2b00      	cmp	r3, #0
 800332e:	d008      	beq.n	8003342 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003336:	2b00      	cmp	r3, #0
 8003338:	d003      	beq.n	8003342 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800333a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333c:	f043 0304 	orr.w	r3, r3, #4
 8003340:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003342:	6a3b      	ldr	r3, [r7, #32]
 8003344:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003348:	2b00      	cmp	r3, #0
 800334a:	d043      	beq.n	80033d4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003352:	2b00      	cmp	r3, #0
 8003354:	d03e      	beq.n	80033d4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800335c:	2b60      	cmp	r3, #96	; 0x60
 800335e:	d02b      	beq.n	80033b8 <HAL_CAN_IRQHandler+0x32a>
 8003360:	2b60      	cmp	r3, #96	; 0x60
 8003362:	d82e      	bhi.n	80033c2 <HAL_CAN_IRQHandler+0x334>
 8003364:	2b50      	cmp	r3, #80	; 0x50
 8003366:	d022      	beq.n	80033ae <HAL_CAN_IRQHandler+0x320>
 8003368:	2b50      	cmp	r3, #80	; 0x50
 800336a:	d82a      	bhi.n	80033c2 <HAL_CAN_IRQHandler+0x334>
 800336c:	2b40      	cmp	r3, #64	; 0x40
 800336e:	d019      	beq.n	80033a4 <HAL_CAN_IRQHandler+0x316>
 8003370:	2b40      	cmp	r3, #64	; 0x40
 8003372:	d826      	bhi.n	80033c2 <HAL_CAN_IRQHandler+0x334>
 8003374:	2b30      	cmp	r3, #48	; 0x30
 8003376:	d010      	beq.n	800339a <HAL_CAN_IRQHandler+0x30c>
 8003378:	2b30      	cmp	r3, #48	; 0x30
 800337a:	d822      	bhi.n	80033c2 <HAL_CAN_IRQHandler+0x334>
 800337c:	2b10      	cmp	r3, #16
 800337e:	d002      	beq.n	8003386 <HAL_CAN_IRQHandler+0x2f8>
 8003380:	2b20      	cmp	r3, #32
 8003382:	d005      	beq.n	8003390 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003384:	e01d      	b.n	80033c2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003388:	f043 0308 	orr.w	r3, r3, #8
 800338c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800338e:	e019      	b.n	80033c4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003392:	f043 0310 	orr.w	r3, r3, #16
 8003396:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003398:	e014      	b.n	80033c4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800339a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339c:	f043 0320 	orr.w	r3, r3, #32
 80033a0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80033a2:	e00f      	b.n	80033c4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80033a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033aa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80033ac:	e00a      	b.n	80033c4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80033ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033b4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80033b6:	e005      	b.n	80033c4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80033b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033be:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80033c0:	e000      	b.n	80033c4 <HAL_CAN_IRQHandler+0x336>
            break;
 80033c2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	699a      	ldr	r2, [r3, #24]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80033d2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2204      	movs	r2, #4
 80033da:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80033dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d008      	beq.n	80033f4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e8:	431a      	orrs	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 f872 	bl	80034d8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80033f4:	bf00      	nop
 80033f6:	3728      	adds	r7, #40	; 0x28
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f003 0307 	and.w	r3, r3, #7
 80034fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034fc:	4b0c      	ldr	r3, [pc, #48]	; (8003530 <__NVIC_SetPriorityGrouping+0x44>)
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003508:	4013      	ands	r3, r2
 800350a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003514:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800351c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800351e:	4a04      	ldr	r2, [pc, #16]	; (8003530 <__NVIC_SetPriorityGrouping+0x44>)
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	60d3      	str	r3, [r2, #12]
}
 8003524:	bf00      	nop
 8003526:	3714      	adds	r7, #20
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr
 8003530:	e000ed00 	.word	0xe000ed00

08003534 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003538:	4b04      	ldr	r3, [pc, #16]	; (800354c <__NVIC_GetPriorityGrouping+0x18>)
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	0a1b      	lsrs	r3, r3, #8
 800353e:	f003 0307 	and.w	r3, r3, #7
}
 8003542:	4618      	mov	r0, r3
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	e000ed00 	.word	0xe000ed00

08003550 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	4603      	mov	r3, r0
 8003558:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800355a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800355e:	2b00      	cmp	r3, #0
 8003560:	db0b      	blt.n	800357a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003562:	79fb      	ldrb	r3, [r7, #7]
 8003564:	f003 021f 	and.w	r2, r3, #31
 8003568:	4907      	ldr	r1, [pc, #28]	; (8003588 <__NVIC_EnableIRQ+0x38>)
 800356a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800356e:	095b      	lsrs	r3, r3, #5
 8003570:	2001      	movs	r0, #1
 8003572:	fa00 f202 	lsl.w	r2, r0, r2
 8003576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800357a:	bf00      	nop
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	e000e100 	.word	0xe000e100

0800358c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	4603      	mov	r3, r0
 8003594:	6039      	str	r1, [r7, #0]
 8003596:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800359c:	2b00      	cmp	r3, #0
 800359e:	db0a      	blt.n	80035b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	490c      	ldr	r1, [pc, #48]	; (80035d8 <__NVIC_SetPriority+0x4c>)
 80035a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035aa:	0112      	lsls	r2, r2, #4
 80035ac:	b2d2      	uxtb	r2, r2
 80035ae:	440b      	add	r3, r1
 80035b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035b4:	e00a      	b.n	80035cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	4908      	ldr	r1, [pc, #32]	; (80035dc <__NVIC_SetPriority+0x50>)
 80035bc:	79fb      	ldrb	r3, [r7, #7]
 80035be:	f003 030f 	and.w	r3, r3, #15
 80035c2:	3b04      	subs	r3, #4
 80035c4:	0112      	lsls	r2, r2, #4
 80035c6:	b2d2      	uxtb	r2, r2
 80035c8:	440b      	add	r3, r1
 80035ca:	761a      	strb	r2, [r3, #24]
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr
 80035d8:	e000e100 	.word	0xe000e100
 80035dc:	e000ed00 	.word	0xe000ed00

080035e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b089      	sub	sp, #36	; 0x24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f003 0307 	and.w	r3, r3, #7
 80035f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	f1c3 0307 	rsb	r3, r3, #7
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	bf28      	it	cs
 80035fe:	2304      	movcs	r3, #4
 8003600:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	3304      	adds	r3, #4
 8003606:	2b06      	cmp	r3, #6
 8003608:	d902      	bls.n	8003610 <NVIC_EncodePriority+0x30>
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	3b03      	subs	r3, #3
 800360e:	e000      	b.n	8003612 <NVIC_EncodePriority+0x32>
 8003610:	2300      	movs	r3, #0
 8003612:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003614:	f04f 32ff 	mov.w	r2, #4294967295
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	fa02 f303 	lsl.w	r3, r2, r3
 800361e:	43da      	mvns	r2, r3
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	401a      	ands	r2, r3
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003628:	f04f 31ff 	mov.w	r1, #4294967295
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	fa01 f303 	lsl.w	r3, r1, r3
 8003632:	43d9      	mvns	r1, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003638:	4313      	orrs	r3, r2
         );
}
 800363a:	4618      	mov	r0, r3
 800363c:	3724      	adds	r7, #36	; 0x24
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr

08003646 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b082      	sub	sp, #8
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7ff ff4c 	bl	80034ec <__NVIC_SetPriorityGrouping>
}
 8003654:	bf00      	nop
 8003656:	3708      	adds	r7, #8
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af00      	add	r7, sp, #0
 8003662:	4603      	mov	r3, r0
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
 8003668:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800366a:	2300      	movs	r3, #0
 800366c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800366e:	f7ff ff61 	bl	8003534 <__NVIC_GetPriorityGrouping>
 8003672:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	68b9      	ldr	r1, [r7, #8]
 8003678:	6978      	ldr	r0, [r7, #20]
 800367a:	f7ff ffb1 	bl	80035e0 <NVIC_EncodePriority>
 800367e:	4602      	mov	r2, r0
 8003680:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003684:	4611      	mov	r1, r2
 8003686:	4618      	mov	r0, r3
 8003688:	f7ff ff80 	bl	800358c <__NVIC_SetPriority>
}
 800368c:	bf00      	nop
 800368e:	3718      	adds	r7, #24
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	4603      	mov	r3, r0
 800369c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800369e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7ff ff54 	bl	8003550 <__NVIC_EnableIRQ>
}
 80036a8:	bf00      	nop
 80036aa:	3708      	adds	r7, #8
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80036b8:	2300      	movs	r3, #0
 80036ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80036bc:	f7fe fc72 	bl	8001fa4 <HAL_GetTick>
 80036c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d101      	bne.n	80036cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e099      	b.n	8003800 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2202      	movs	r2, #2
 80036d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f022 0201 	bic.w	r2, r2, #1
 80036ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036ec:	e00f      	b.n	800370e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036ee:	f7fe fc59 	bl	8001fa4 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b05      	cmp	r3, #5
 80036fa:	d908      	bls.n	800370e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2220      	movs	r2, #32
 8003700:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2203      	movs	r2, #3
 8003706:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e078      	b.n	8003800 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0301 	and.w	r3, r3, #1
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1e8      	bne.n	80036ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	4b38      	ldr	r3, [pc, #224]	; (8003808 <HAL_DMA_Init+0x158>)
 8003728:	4013      	ands	r3, r2
 800372a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800373a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003746:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003752:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a1b      	ldr	r3, [r3, #32]
 8003758:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	4313      	orrs	r3, r2
 800375e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003764:	2b04      	cmp	r3, #4
 8003766:	d107      	bne.n	8003778 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003770:	4313      	orrs	r3, r2
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	4313      	orrs	r3, r2
 8003776:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	f023 0307 	bic.w	r3, r3, #7
 800378e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	4313      	orrs	r3, r2
 8003798:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379e:	2b04      	cmp	r3, #4
 80037a0:	d117      	bne.n	80037d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00e      	beq.n	80037d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 fa6f 	bl	8003c98 <DMA_CheckFifoParam>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d008      	beq.n	80037d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2240      	movs	r2, #64	; 0x40
 80037c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80037ce:	2301      	movs	r3, #1
 80037d0:	e016      	b.n	8003800 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 fa26 	bl	8003c2c <DMA_CalcBaseAndBitshift>
 80037e0:	4603      	mov	r3, r0
 80037e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e8:	223f      	movs	r2, #63	; 0x3f
 80037ea:	409a      	lsls	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3718      	adds	r7, #24
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	f010803f 	.word	0xf010803f

0800380c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b086      	sub	sp, #24
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
 8003818:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800381a:	2300      	movs	r3, #0
 800381c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003822:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800382a:	2b01      	cmp	r3, #1
 800382c:	d101      	bne.n	8003832 <HAL_DMA_Start_IT+0x26>
 800382e:	2302      	movs	r3, #2
 8003830:	e040      	b.n	80038b4 <HAL_DMA_Start_IT+0xa8>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b01      	cmp	r3, #1
 8003844:	d12f      	bne.n	80038a6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2202      	movs	r2, #2
 800384a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	68b9      	ldr	r1, [r7, #8]
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	f000 f9b8 	bl	8003bd0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003864:	223f      	movs	r2, #63	; 0x3f
 8003866:	409a      	lsls	r2, r3
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f042 0216 	orr.w	r2, r2, #22
 800387a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003880:	2b00      	cmp	r3, #0
 8003882:	d007      	beq.n	8003894 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0208 	orr.w	r2, r2, #8
 8003892:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f042 0201 	orr.w	r2, r2, #1
 80038a2:	601a      	str	r2, [r3, #0]
 80038a4:	e005      	b.n	80038b2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80038ae:	2302      	movs	r3, #2
 80038b0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80038b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3718      	adds	r7, #24
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80038c4:	2300      	movs	r3, #0
 80038c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80038c8:	4b92      	ldr	r3, [pc, #584]	; (8003b14 <HAL_DMA_IRQHandler+0x258>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a92      	ldr	r2, [pc, #584]	; (8003b18 <HAL_DMA_IRQHandler+0x25c>)
 80038ce:	fba2 2303 	umull	r2, r3, r2, r3
 80038d2:	0a9b      	lsrs	r3, r3, #10
 80038d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038e6:	2208      	movs	r2, #8
 80038e8:	409a      	lsls	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	4013      	ands	r3, r2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d01a      	beq.n	8003928 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0304 	and.w	r3, r3, #4
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d013      	beq.n	8003928 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 0204 	bic.w	r2, r2, #4
 800390e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003914:	2208      	movs	r2, #8
 8003916:	409a      	lsls	r2, r3
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003920:	f043 0201 	orr.w	r2, r3, #1
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800392c:	2201      	movs	r2, #1
 800392e:	409a      	lsls	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	4013      	ands	r3, r2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d012      	beq.n	800395e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00b      	beq.n	800395e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800394a:	2201      	movs	r2, #1
 800394c:	409a      	lsls	r2, r3
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003956:	f043 0202 	orr.w	r2, r3, #2
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003962:	2204      	movs	r2, #4
 8003964:	409a      	lsls	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	4013      	ands	r3, r2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d012      	beq.n	8003994 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00b      	beq.n	8003994 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003980:	2204      	movs	r2, #4
 8003982:	409a      	lsls	r2, r3
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800398c:	f043 0204 	orr.w	r2, r3, #4
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003998:	2210      	movs	r2, #16
 800399a:	409a      	lsls	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	4013      	ands	r3, r2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d043      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0308 	and.w	r3, r3, #8
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d03c      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b6:	2210      	movs	r2, #16
 80039b8:	409a      	lsls	r2, r3
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d018      	beq.n	80039fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d108      	bne.n	80039ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d024      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	4798      	blx	r3
 80039ea:	e01f      	b.n	8003a2c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d01b      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	4798      	blx	r3
 80039fc:	e016      	b.n	8003a2c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d107      	bne.n	8003a1c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f022 0208 	bic.w	r2, r2, #8
 8003a1a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d003      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a30:	2220      	movs	r2, #32
 8003a32:	409a      	lsls	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	4013      	ands	r3, r2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f000 808e 	beq.w	8003b5a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0310 	and.w	r3, r3, #16
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 8086 	beq.w	8003b5a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a52:	2220      	movs	r2, #32
 8003a54:	409a      	lsls	r2, r3
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b05      	cmp	r3, #5
 8003a64:	d136      	bne.n	8003ad4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 0216 	bic.w	r2, r2, #22
 8003a74:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	695a      	ldr	r2, [r3, #20]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a84:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d103      	bne.n	8003a96 <HAL_DMA_IRQHandler+0x1da>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d007      	beq.n	8003aa6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f022 0208 	bic.w	r2, r2, #8
 8003aa4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aaa:	223f      	movs	r2, #63	; 0x3f
 8003aac:	409a      	lsls	r2, r3
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d07d      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	4798      	blx	r3
        }
        return;
 8003ad2:	e078      	b.n	8003bc6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d01c      	beq.n	8003b1c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d108      	bne.n	8003b02 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d030      	beq.n	8003b5a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	4798      	blx	r3
 8003b00:	e02b      	b.n	8003b5a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d027      	beq.n	8003b5a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	4798      	blx	r3
 8003b12:	e022      	b.n	8003b5a <HAL_DMA_IRQHandler+0x29e>
 8003b14:	20000000 	.word	0x20000000
 8003b18:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10f      	bne.n	8003b4a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f022 0210 	bic.w	r2, r2, #16
 8003b38:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d032      	beq.n	8003bc8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d022      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2205      	movs	r2, #5
 8003b72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f022 0201 	bic.w	r2, r2, #1
 8003b84:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	3301      	adds	r3, #1
 8003b8a:	60bb      	str	r3, [r7, #8]
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d307      	bcc.n	8003ba2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1f2      	bne.n	8003b86 <HAL_DMA_IRQHandler+0x2ca>
 8003ba0:	e000      	b.n	8003ba4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003ba2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d005      	beq.n	8003bc8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	4798      	blx	r3
 8003bc4:	e000      	b.n	8003bc8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003bc6:	bf00      	nop
    }
  }
}
 8003bc8:	3718      	adds	r7, #24
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop

08003bd0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]
 8003bdc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003bec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	683a      	ldr	r2, [r7, #0]
 8003bf4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	2b40      	cmp	r3, #64	; 0x40
 8003bfc:	d108      	bne.n	8003c10 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68ba      	ldr	r2, [r7, #8]
 8003c0c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003c0e:	e007      	b.n	8003c20 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68ba      	ldr	r2, [r7, #8]
 8003c16:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	60da      	str	r2, [r3, #12]
}
 8003c20:	bf00      	nop
 8003c22:	3714      	adds	r7, #20
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	3b10      	subs	r3, #16
 8003c3c:	4a14      	ldr	r2, [pc, #80]	; (8003c90 <DMA_CalcBaseAndBitshift+0x64>)
 8003c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c42:	091b      	lsrs	r3, r3, #4
 8003c44:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003c46:	4a13      	ldr	r2, [pc, #76]	; (8003c94 <DMA_CalcBaseAndBitshift+0x68>)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	461a      	mov	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2b03      	cmp	r3, #3
 8003c58:	d909      	bls.n	8003c6e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c62:	f023 0303 	bic.w	r3, r3, #3
 8003c66:	1d1a      	adds	r2, r3, #4
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	659a      	str	r2, [r3, #88]	; 0x58
 8003c6c:	e007      	b.n	8003c7e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c76:	f023 0303 	bic.w	r3, r3, #3
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3714      	adds	r7, #20
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	aaaaaaab 	.word	0xaaaaaaab
 8003c94:	0800e89c 	.word	0x0800e89c

08003c98 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d11f      	bne.n	8003cf2 <DMA_CheckFifoParam+0x5a>
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	2b03      	cmp	r3, #3
 8003cb6:	d856      	bhi.n	8003d66 <DMA_CheckFifoParam+0xce>
 8003cb8:	a201      	add	r2, pc, #4	; (adr r2, 8003cc0 <DMA_CheckFifoParam+0x28>)
 8003cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cbe:	bf00      	nop
 8003cc0:	08003cd1 	.word	0x08003cd1
 8003cc4:	08003ce3 	.word	0x08003ce3
 8003cc8:	08003cd1 	.word	0x08003cd1
 8003ccc:	08003d67 	.word	0x08003d67
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d046      	beq.n	8003d6a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ce0:	e043      	b.n	8003d6a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003cea:	d140      	bne.n	8003d6e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cf0:	e03d      	b.n	8003d6e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cfa:	d121      	bne.n	8003d40 <DMA_CheckFifoParam+0xa8>
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	2b03      	cmp	r3, #3
 8003d00:	d837      	bhi.n	8003d72 <DMA_CheckFifoParam+0xda>
 8003d02:	a201      	add	r2, pc, #4	; (adr r2, 8003d08 <DMA_CheckFifoParam+0x70>)
 8003d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d08:	08003d19 	.word	0x08003d19
 8003d0c:	08003d1f 	.word	0x08003d1f
 8003d10:	08003d19 	.word	0x08003d19
 8003d14:	08003d31 	.word	0x08003d31
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d1c:	e030      	b.n	8003d80 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d025      	beq.n	8003d76 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d2e:	e022      	b.n	8003d76 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d34:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d38:	d11f      	bne.n	8003d7a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003d3e:	e01c      	b.n	8003d7a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d903      	bls.n	8003d4e <DMA_CheckFifoParam+0xb6>
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	2b03      	cmp	r3, #3
 8003d4a:	d003      	beq.n	8003d54 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003d4c:	e018      	b.n	8003d80 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	73fb      	strb	r3, [r7, #15]
      break;
 8003d52:	e015      	b.n	8003d80 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00e      	beq.n	8003d7e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	73fb      	strb	r3, [r7, #15]
      break;
 8003d64:	e00b      	b.n	8003d7e <DMA_CheckFifoParam+0xe6>
      break;
 8003d66:	bf00      	nop
 8003d68:	e00a      	b.n	8003d80 <DMA_CheckFifoParam+0xe8>
      break;
 8003d6a:	bf00      	nop
 8003d6c:	e008      	b.n	8003d80 <DMA_CheckFifoParam+0xe8>
      break;
 8003d6e:	bf00      	nop
 8003d70:	e006      	b.n	8003d80 <DMA_CheckFifoParam+0xe8>
      break;
 8003d72:	bf00      	nop
 8003d74:	e004      	b.n	8003d80 <DMA_CheckFifoParam+0xe8>
      break;
 8003d76:	bf00      	nop
 8003d78:	e002      	b.n	8003d80 <DMA_CheckFifoParam+0xe8>
      break;   
 8003d7a:	bf00      	nop
 8003d7c:	e000      	b.n	8003d80 <DMA_CheckFifoParam+0xe8>
      break;
 8003d7e:	bf00      	nop
    }
  } 
  
  return status; 
 8003d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3714      	adds	r7, #20
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop

08003d90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b089      	sub	sp, #36	; 0x24
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003da2:	2300      	movs	r3, #0
 8003da4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003da6:	2300      	movs	r3, #0
 8003da8:	61fb      	str	r3, [r7, #28]
 8003daa:	e16b      	b.n	8004084 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003dac:	2201      	movs	r2, #1
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	fa02 f303 	lsl.w	r3, r2, r3
 8003db4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	f040 815a 	bne.w	800407e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f003 0303 	and.w	r3, r3, #3
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d005      	beq.n	8003de2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d130      	bne.n	8003e44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	005b      	lsls	r3, r3, #1
 8003dec:	2203      	movs	r2, #3
 8003dee:	fa02 f303 	lsl.w	r3, r2, r3
 8003df2:	43db      	mvns	r3, r3
 8003df4:	69ba      	ldr	r2, [r7, #24]
 8003df6:	4013      	ands	r3, r2
 8003df8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	68da      	ldr	r2, [r3, #12]
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	fa02 f303 	lsl.w	r3, r2, r3
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e18:	2201      	movs	r2, #1
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e20:	43db      	mvns	r3, r3
 8003e22:	69ba      	ldr	r2, [r7, #24]
 8003e24:	4013      	ands	r3, r2
 8003e26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	091b      	lsrs	r3, r3, #4
 8003e2e:	f003 0201 	and.w	r2, r3, #1
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	fa02 f303 	lsl.w	r3, r2, r3
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f003 0303 	and.w	r3, r3, #3
 8003e4c:	2b03      	cmp	r3, #3
 8003e4e:	d017      	beq.n	8003e80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	005b      	lsls	r3, r3, #1
 8003e5a:	2203      	movs	r2, #3
 8003e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e60:	43db      	mvns	r3, r3
 8003e62:	69ba      	ldr	r2, [r7, #24]
 8003e64:	4013      	ands	r3, r2
 8003e66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	689a      	ldr	r2, [r3, #8]
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	fa02 f303 	lsl.w	r3, r2, r3
 8003e74:	69ba      	ldr	r2, [r7, #24]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f003 0303 	and.w	r3, r3, #3
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d123      	bne.n	8003ed4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	08da      	lsrs	r2, r3, #3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	3208      	adds	r2, #8
 8003e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	f003 0307 	and.w	r3, r3, #7
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	220f      	movs	r2, #15
 8003ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea8:	43db      	mvns	r3, r3
 8003eaa:	69ba      	ldr	r2, [r7, #24]
 8003eac:	4013      	ands	r3, r2
 8003eae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	691a      	ldr	r2, [r3, #16]
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	f003 0307 	and.w	r3, r3, #7
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	08da      	lsrs	r2, r3, #3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	3208      	adds	r2, #8
 8003ece:	69b9      	ldr	r1, [r7, #24]
 8003ed0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	2203      	movs	r2, #3
 8003ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee4:	43db      	mvns	r3, r3
 8003ee6:	69ba      	ldr	r2, [r7, #24]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f003 0203 	and.w	r2, r3, #3
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	005b      	lsls	r3, r3, #1
 8003ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f000 80b4 	beq.w	800407e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f16:	2300      	movs	r3, #0
 8003f18:	60fb      	str	r3, [r7, #12]
 8003f1a:	4b60      	ldr	r3, [pc, #384]	; (800409c <HAL_GPIO_Init+0x30c>)
 8003f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f1e:	4a5f      	ldr	r2, [pc, #380]	; (800409c <HAL_GPIO_Init+0x30c>)
 8003f20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f24:	6453      	str	r3, [r2, #68]	; 0x44
 8003f26:	4b5d      	ldr	r3, [pc, #372]	; (800409c <HAL_GPIO_Init+0x30c>)
 8003f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f2e:	60fb      	str	r3, [r7, #12]
 8003f30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f32:	4a5b      	ldr	r2, [pc, #364]	; (80040a0 <HAL_GPIO_Init+0x310>)
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	089b      	lsrs	r3, r3, #2
 8003f38:	3302      	adds	r3, #2
 8003f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	f003 0303 	and.w	r3, r3, #3
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	220f      	movs	r2, #15
 8003f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4e:	43db      	mvns	r3, r3
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	4013      	ands	r3, r2
 8003f54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a52      	ldr	r2, [pc, #328]	; (80040a4 <HAL_GPIO_Init+0x314>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d02b      	beq.n	8003fb6 <HAL_GPIO_Init+0x226>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a51      	ldr	r2, [pc, #324]	; (80040a8 <HAL_GPIO_Init+0x318>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d025      	beq.n	8003fb2 <HAL_GPIO_Init+0x222>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a50      	ldr	r2, [pc, #320]	; (80040ac <HAL_GPIO_Init+0x31c>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d01f      	beq.n	8003fae <HAL_GPIO_Init+0x21e>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a4f      	ldr	r2, [pc, #316]	; (80040b0 <HAL_GPIO_Init+0x320>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d019      	beq.n	8003faa <HAL_GPIO_Init+0x21a>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a4e      	ldr	r2, [pc, #312]	; (80040b4 <HAL_GPIO_Init+0x324>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d013      	beq.n	8003fa6 <HAL_GPIO_Init+0x216>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a4d      	ldr	r2, [pc, #308]	; (80040b8 <HAL_GPIO_Init+0x328>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d00d      	beq.n	8003fa2 <HAL_GPIO_Init+0x212>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a4c      	ldr	r2, [pc, #304]	; (80040bc <HAL_GPIO_Init+0x32c>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d007      	beq.n	8003f9e <HAL_GPIO_Init+0x20e>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a4b      	ldr	r2, [pc, #300]	; (80040c0 <HAL_GPIO_Init+0x330>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d101      	bne.n	8003f9a <HAL_GPIO_Init+0x20a>
 8003f96:	2307      	movs	r3, #7
 8003f98:	e00e      	b.n	8003fb8 <HAL_GPIO_Init+0x228>
 8003f9a:	2308      	movs	r3, #8
 8003f9c:	e00c      	b.n	8003fb8 <HAL_GPIO_Init+0x228>
 8003f9e:	2306      	movs	r3, #6
 8003fa0:	e00a      	b.n	8003fb8 <HAL_GPIO_Init+0x228>
 8003fa2:	2305      	movs	r3, #5
 8003fa4:	e008      	b.n	8003fb8 <HAL_GPIO_Init+0x228>
 8003fa6:	2304      	movs	r3, #4
 8003fa8:	e006      	b.n	8003fb8 <HAL_GPIO_Init+0x228>
 8003faa:	2303      	movs	r3, #3
 8003fac:	e004      	b.n	8003fb8 <HAL_GPIO_Init+0x228>
 8003fae:	2302      	movs	r3, #2
 8003fb0:	e002      	b.n	8003fb8 <HAL_GPIO_Init+0x228>
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e000      	b.n	8003fb8 <HAL_GPIO_Init+0x228>
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	69fa      	ldr	r2, [r7, #28]
 8003fba:	f002 0203 	and.w	r2, r2, #3
 8003fbe:	0092      	lsls	r2, r2, #2
 8003fc0:	4093      	lsls	r3, r2
 8003fc2:	69ba      	ldr	r2, [r7, #24]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fc8:	4935      	ldr	r1, [pc, #212]	; (80040a0 <HAL_GPIO_Init+0x310>)
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	089b      	lsrs	r3, r3, #2
 8003fce:	3302      	adds	r3, #2
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fd6:	4b3b      	ldr	r3, [pc, #236]	; (80040c4 <HAL_GPIO_Init+0x334>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	43db      	mvns	r3, r3
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d003      	beq.n	8003ffa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003ff2:	69ba      	ldr	r2, [r7, #24]
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ffa:	4a32      	ldr	r2, [pc, #200]	; (80040c4 <HAL_GPIO_Init+0x334>)
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004000:	4b30      	ldr	r3, [pc, #192]	; (80040c4 <HAL_GPIO_Init+0x334>)
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	43db      	mvns	r3, r3
 800400a:	69ba      	ldr	r2, [r7, #24]
 800400c:	4013      	ands	r3, r2
 800400e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d003      	beq.n	8004024 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800401c:	69ba      	ldr	r2, [r7, #24]
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	4313      	orrs	r3, r2
 8004022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004024:	4a27      	ldr	r2, [pc, #156]	; (80040c4 <HAL_GPIO_Init+0x334>)
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800402a:	4b26      	ldr	r3, [pc, #152]	; (80040c4 <HAL_GPIO_Init+0x334>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	43db      	mvns	r3, r3
 8004034:	69ba      	ldr	r2, [r7, #24]
 8004036:	4013      	ands	r3, r2
 8004038:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d003      	beq.n	800404e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	4313      	orrs	r3, r2
 800404c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800404e:	4a1d      	ldr	r2, [pc, #116]	; (80040c4 <HAL_GPIO_Init+0x334>)
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004054:	4b1b      	ldr	r3, [pc, #108]	; (80040c4 <HAL_GPIO_Init+0x334>)
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	43db      	mvns	r3, r3
 800405e:	69ba      	ldr	r2, [r7, #24]
 8004060:	4013      	ands	r3, r2
 8004062:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d003      	beq.n	8004078 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004070:	69ba      	ldr	r2, [r7, #24]
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	4313      	orrs	r3, r2
 8004076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004078:	4a12      	ldr	r2, [pc, #72]	; (80040c4 <HAL_GPIO_Init+0x334>)
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	3301      	adds	r3, #1
 8004082:	61fb      	str	r3, [r7, #28]
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	2b0f      	cmp	r3, #15
 8004088:	f67f ae90 	bls.w	8003dac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800408c:	bf00      	nop
 800408e:	bf00      	nop
 8004090:	3724      	adds	r7, #36	; 0x24
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	40023800 	.word	0x40023800
 80040a0:	40013800 	.word	0x40013800
 80040a4:	40020000 	.word	0x40020000
 80040a8:	40020400 	.word	0x40020400
 80040ac:	40020800 	.word	0x40020800
 80040b0:	40020c00 	.word	0x40020c00
 80040b4:	40021000 	.word	0x40021000
 80040b8:	40021400 	.word	0x40021400
 80040bc:	40021800 	.word	0x40021800
 80040c0:	40021c00 	.word	0x40021c00
 80040c4:	40013c00 	.word	0x40013c00

080040c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	460b      	mov	r3, r1
 80040d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	691a      	ldr	r2, [r3, #16]
 80040d8:	887b      	ldrh	r3, [r7, #2]
 80040da:	4013      	ands	r3, r2
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d002      	beq.n	80040e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80040e0:	2301      	movs	r3, #1
 80040e2:	73fb      	strb	r3, [r7, #15]
 80040e4:	e001      	b.n	80040ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80040e6:	2300      	movs	r3, #0
 80040e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80040ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3714      	adds	r7, #20
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	460b      	mov	r3, r1
 8004102:	807b      	strh	r3, [r7, #2]
 8004104:	4613      	mov	r3, r2
 8004106:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004108:	787b      	ldrb	r3, [r7, #1]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d003      	beq.n	8004116 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800410e:	887a      	ldrh	r2, [r7, #2]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004114:	e003      	b.n	800411e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004116:	887b      	ldrh	r3, [r7, #2]
 8004118:	041a      	lsls	r2, r3, #16
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	619a      	str	r2, [r3, #24]
}
 800411e:	bf00      	nop
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr

0800412a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800412a:	b480      	push	{r7}
 800412c:	b085      	sub	sp, #20
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
 8004132:	460b      	mov	r3, r1
 8004134:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800413c:	887a      	ldrh	r2, [r7, #2]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	4013      	ands	r3, r2
 8004142:	041a      	lsls	r2, r3, #16
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	43d9      	mvns	r1, r3
 8004148:	887b      	ldrh	r3, [r7, #2]
 800414a:	400b      	ands	r3, r1
 800414c:	431a      	orrs	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	619a      	str	r2, [r3, #24]
}
 8004152:	bf00      	nop
 8004154:	3714      	adds	r7, #20
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr

0800415e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800415e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004160:	b08f      	sub	sp, #60	; 0x3c
 8004162:	af0a      	add	r7, sp, #40	; 0x28
 8004164:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d101      	bne.n	8004170 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e054      	b.n	800421a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	d106      	bne.n	8004190 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f009 fb62 	bl	800d854 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2203      	movs	r2, #3
 8004194:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800419c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d102      	bne.n	80041aa <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4618      	mov	r0, r3
 80041b0:	f003 ffce 	bl	8008150 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	603b      	str	r3, [r7, #0]
 80041ba:	687e      	ldr	r6, [r7, #4]
 80041bc:	466d      	mov	r5, sp
 80041be:	f106 0410 	add.w	r4, r6, #16
 80041c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80041ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80041d2:	1d33      	adds	r3, r6, #4
 80041d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80041d6:	6838      	ldr	r0, [r7, #0]
 80041d8:	f003 ff48 	bl	800806c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2101      	movs	r1, #1
 80041e2:	4618      	mov	r0, r3
 80041e4:	f003 ffc5 	bl	8008172 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	603b      	str	r3, [r7, #0]
 80041ee:	687e      	ldr	r6, [r7, #4]
 80041f0:	466d      	mov	r5, sp
 80041f2:	f106 0410 	add.w	r4, r6, #16
 80041f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004202:	e885 0003 	stmia.w	r5, {r0, r1}
 8004206:	1d33      	adds	r3, r6, #4
 8004208:	cb0e      	ldmia	r3, {r1, r2, r3}
 800420a:	6838      	ldr	r0, [r7, #0]
 800420c:	f004 f92c 	bl	8008468 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3714      	adds	r7, #20
 800421e:	46bd      	mov	sp, r7
 8004220:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004222 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8004222:	b590      	push	{r4, r7, lr}
 8004224:	b089      	sub	sp, #36	; 0x24
 8004226:	af04      	add	r7, sp, #16
 8004228:	6078      	str	r0, [r7, #4]
 800422a:	4608      	mov	r0, r1
 800422c:	4611      	mov	r1, r2
 800422e:	461a      	mov	r2, r3
 8004230:	4603      	mov	r3, r0
 8004232:	70fb      	strb	r3, [r7, #3]
 8004234:	460b      	mov	r3, r1
 8004236:	70bb      	strb	r3, [r7, #2]
 8004238:	4613      	mov	r3, r2
 800423a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004242:	2b01      	cmp	r3, #1
 8004244:	d101      	bne.n	800424a <HAL_HCD_HC_Init+0x28>
 8004246:	2302      	movs	r3, #2
 8004248:	e076      	b.n	8004338 <HAL_HCD_HC_Init+0x116>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2201      	movs	r2, #1
 800424e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8004252:	78fb      	ldrb	r3, [r7, #3]
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	212c      	movs	r1, #44	; 0x2c
 8004258:	fb01 f303 	mul.w	r3, r1, r3
 800425c:	4413      	add	r3, r2
 800425e:	333d      	adds	r3, #61	; 0x3d
 8004260:	2200      	movs	r2, #0
 8004262:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004264:	78fb      	ldrb	r3, [r7, #3]
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	212c      	movs	r1, #44	; 0x2c
 800426a:	fb01 f303 	mul.w	r3, r1, r3
 800426e:	4413      	add	r3, r2
 8004270:	3338      	adds	r3, #56	; 0x38
 8004272:	787a      	ldrb	r2, [r7, #1]
 8004274:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8004276:	78fb      	ldrb	r3, [r7, #3]
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	212c      	movs	r1, #44	; 0x2c
 800427c:	fb01 f303 	mul.w	r3, r1, r3
 8004280:	4413      	add	r3, r2
 8004282:	3340      	adds	r3, #64	; 0x40
 8004284:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004286:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004288:	78fb      	ldrb	r3, [r7, #3]
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	212c      	movs	r1, #44	; 0x2c
 800428e:	fb01 f303 	mul.w	r3, r1, r3
 8004292:	4413      	add	r3, r2
 8004294:	3339      	adds	r3, #57	; 0x39
 8004296:	78fa      	ldrb	r2, [r7, #3]
 8004298:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800429a:	78fb      	ldrb	r3, [r7, #3]
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	212c      	movs	r1, #44	; 0x2c
 80042a0:	fb01 f303 	mul.w	r3, r1, r3
 80042a4:	4413      	add	r3, r2
 80042a6:	333f      	adds	r3, #63	; 0x3f
 80042a8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80042ac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80042ae:	78fb      	ldrb	r3, [r7, #3]
 80042b0:	78ba      	ldrb	r2, [r7, #2]
 80042b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80042b6:	b2d0      	uxtb	r0, r2
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	212c      	movs	r1, #44	; 0x2c
 80042bc:	fb01 f303 	mul.w	r3, r1, r3
 80042c0:	4413      	add	r3, r2
 80042c2:	333a      	adds	r3, #58	; 0x3a
 80042c4:	4602      	mov	r2, r0
 80042c6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80042c8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	da09      	bge.n	80042e4 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80042d0:	78fb      	ldrb	r3, [r7, #3]
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	212c      	movs	r1, #44	; 0x2c
 80042d6:	fb01 f303 	mul.w	r3, r1, r3
 80042da:	4413      	add	r3, r2
 80042dc:	333b      	adds	r3, #59	; 0x3b
 80042de:	2201      	movs	r2, #1
 80042e0:	701a      	strb	r2, [r3, #0]
 80042e2:	e008      	b.n	80042f6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80042e4:	78fb      	ldrb	r3, [r7, #3]
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	212c      	movs	r1, #44	; 0x2c
 80042ea:	fb01 f303 	mul.w	r3, r1, r3
 80042ee:	4413      	add	r3, r2
 80042f0:	333b      	adds	r3, #59	; 0x3b
 80042f2:	2200      	movs	r2, #0
 80042f4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80042f6:	78fb      	ldrb	r3, [r7, #3]
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	212c      	movs	r1, #44	; 0x2c
 80042fc:	fb01 f303 	mul.w	r3, r1, r3
 8004300:	4413      	add	r3, r2
 8004302:	333c      	adds	r3, #60	; 0x3c
 8004304:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004308:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6818      	ldr	r0, [r3, #0]
 800430e:	787c      	ldrb	r4, [r7, #1]
 8004310:	78ba      	ldrb	r2, [r7, #2]
 8004312:	78f9      	ldrb	r1, [r7, #3]
 8004314:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004316:	9302      	str	r3, [sp, #8]
 8004318:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800431c:	9301      	str	r3, [sp, #4]
 800431e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004322:	9300      	str	r3, [sp, #0]
 8004324:	4623      	mov	r3, r4
 8004326:	f004 fa19 	bl	800875c <USB_HC_Init>
 800432a:	4603      	mov	r3, r0
 800432c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004336:	7bfb      	ldrb	r3, [r7, #15]
}
 8004338:	4618      	mov	r0, r3
 800433a:	3714      	adds	r7, #20
 800433c:	46bd      	mov	sp, r7
 800433e:	bd90      	pop	{r4, r7, pc}

08004340 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	460b      	mov	r3, r1
 800434a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800434c:	2300      	movs	r3, #0
 800434e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004356:	2b01      	cmp	r3, #1
 8004358:	d101      	bne.n	800435e <HAL_HCD_HC_Halt+0x1e>
 800435a:	2302      	movs	r3, #2
 800435c:	e00f      	b.n	800437e <HAL_HCD_HC_Halt+0x3e>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	78fa      	ldrb	r2, [r7, #3]
 800436c:	4611      	mov	r1, r2
 800436e:	4618      	mov	r0, r3
 8004370:	f004 fc55 	bl	8008c1e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800437c:	7bfb      	ldrb	r3, [r7, #15]
}
 800437e:	4618      	mov	r0, r3
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
	...

08004388 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	4608      	mov	r0, r1
 8004392:	4611      	mov	r1, r2
 8004394:	461a      	mov	r2, r3
 8004396:	4603      	mov	r3, r0
 8004398:	70fb      	strb	r3, [r7, #3]
 800439a:	460b      	mov	r3, r1
 800439c:	70bb      	strb	r3, [r7, #2]
 800439e:	4613      	mov	r3, r2
 80043a0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80043a2:	78fb      	ldrb	r3, [r7, #3]
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	212c      	movs	r1, #44	; 0x2c
 80043a8:	fb01 f303 	mul.w	r3, r1, r3
 80043ac:	4413      	add	r3, r2
 80043ae:	333b      	adds	r3, #59	; 0x3b
 80043b0:	78ba      	ldrb	r2, [r7, #2]
 80043b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80043b4:	78fb      	ldrb	r3, [r7, #3]
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	212c      	movs	r1, #44	; 0x2c
 80043ba:	fb01 f303 	mul.w	r3, r1, r3
 80043be:	4413      	add	r3, r2
 80043c0:	333f      	adds	r3, #63	; 0x3f
 80043c2:	787a      	ldrb	r2, [r7, #1]
 80043c4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80043c6:	7c3b      	ldrb	r3, [r7, #16]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d112      	bne.n	80043f2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80043cc:	78fb      	ldrb	r3, [r7, #3]
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	212c      	movs	r1, #44	; 0x2c
 80043d2:	fb01 f303 	mul.w	r3, r1, r3
 80043d6:	4413      	add	r3, r2
 80043d8:	3342      	adds	r3, #66	; 0x42
 80043da:	2203      	movs	r2, #3
 80043dc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80043de:	78fb      	ldrb	r3, [r7, #3]
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	212c      	movs	r1, #44	; 0x2c
 80043e4:	fb01 f303 	mul.w	r3, r1, r3
 80043e8:	4413      	add	r3, r2
 80043ea:	333d      	adds	r3, #61	; 0x3d
 80043ec:	7f3a      	ldrb	r2, [r7, #28]
 80043ee:	701a      	strb	r2, [r3, #0]
 80043f0:	e008      	b.n	8004404 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80043f2:	78fb      	ldrb	r3, [r7, #3]
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	212c      	movs	r1, #44	; 0x2c
 80043f8:	fb01 f303 	mul.w	r3, r1, r3
 80043fc:	4413      	add	r3, r2
 80043fe:	3342      	adds	r3, #66	; 0x42
 8004400:	2202      	movs	r2, #2
 8004402:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004404:	787b      	ldrb	r3, [r7, #1]
 8004406:	2b03      	cmp	r3, #3
 8004408:	f200 80c6 	bhi.w	8004598 <HAL_HCD_HC_SubmitRequest+0x210>
 800440c:	a201      	add	r2, pc, #4	; (adr r2, 8004414 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800440e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004412:	bf00      	nop
 8004414:	08004425 	.word	0x08004425
 8004418:	08004585 	.word	0x08004585
 800441c:	08004489 	.word	0x08004489
 8004420:	08004507 	.word	0x08004507
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004424:	7c3b      	ldrb	r3, [r7, #16]
 8004426:	2b01      	cmp	r3, #1
 8004428:	f040 80b8 	bne.w	800459c <HAL_HCD_HC_SubmitRequest+0x214>
 800442c:	78bb      	ldrb	r3, [r7, #2]
 800442e:	2b00      	cmp	r3, #0
 8004430:	f040 80b4 	bne.w	800459c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8004434:	8b3b      	ldrh	r3, [r7, #24]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d108      	bne.n	800444c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800443a:	78fb      	ldrb	r3, [r7, #3]
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	212c      	movs	r1, #44	; 0x2c
 8004440:	fb01 f303 	mul.w	r3, r1, r3
 8004444:	4413      	add	r3, r2
 8004446:	3355      	adds	r3, #85	; 0x55
 8004448:	2201      	movs	r2, #1
 800444a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800444c:	78fb      	ldrb	r3, [r7, #3]
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	212c      	movs	r1, #44	; 0x2c
 8004452:	fb01 f303 	mul.w	r3, r1, r3
 8004456:	4413      	add	r3, r2
 8004458:	3355      	adds	r3, #85	; 0x55
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d109      	bne.n	8004474 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004460:	78fb      	ldrb	r3, [r7, #3]
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	212c      	movs	r1, #44	; 0x2c
 8004466:	fb01 f303 	mul.w	r3, r1, r3
 800446a:	4413      	add	r3, r2
 800446c:	3342      	adds	r3, #66	; 0x42
 800446e:	2200      	movs	r2, #0
 8004470:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004472:	e093      	b.n	800459c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004474:	78fb      	ldrb	r3, [r7, #3]
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	212c      	movs	r1, #44	; 0x2c
 800447a:	fb01 f303 	mul.w	r3, r1, r3
 800447e:	4413      	add	r3, r2
 8004480:	3342      	adds	r3, #66	; 0x42
 8004482:	2202      	movs	r2, #2
 8004484:	701a      	strb	r2, [r3, #0]
      break;
 8004486:	e089      	b.n	800459c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004488:	78bb      	ldrb	r3, [r7, #2]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d11d      	bne.n	80044ca <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800448e:	78fb      	ldrb	r3, [r7, #3]
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	212c      	movs	r1, #44	; 0x2c
 8004494:	fb01 f303 	mul.w	r3, r1, r3
 8004498:	4413      	add	r3, r2
 800449a:	3355      	adds	r3, #85	; 0x55
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d109      	bne.n	80044b6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80044a2:	78fb      	ldrb	r3, [r7, #3]
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	212c      	movs	r1, #44	; 0x2c
 80044a8:	fb01 f303 	mul.w	r3, r1, r3
 80044ac:	4413      	add	r3, r2
 80044ae:	3342      	adds	r3, #66	; 0x42
 80044b0:	2200      	movs	r2, #0
 80044b2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80044b4:	e073      	b.n	800459e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80044b6:	78fb      	ldrb	r3, [r7, #3]
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	212c      	movs	r1, #44	; 0x2c
 80044bc:	fb01 f303 	mul.w	r3, r1, r3
 80044c0:	4413      	add	r3, r2
 80044c2:	3342      	adds	r3, #66	; 0x42
 80044c4:	2202      	movs	r2, #2
 80044c6:	701a      	strb	r2, [r3, #0]
      break;
 80044c8:	e069      	b.n	800459e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80044ca:	78fb      	ldrb	r3, [r7, #3]
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	212c      	movs	r1, #44	; 0x2c
 80044d0:	fb01 f303 	mul.w	r3, r1, r3
 80044d4:	4413      	add	r3, r2
 80044d6:	3354      	adds	r3, #84	; 0x54
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d109      	bne.n	80044f2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80044de:	78fb      	ldrb	r3, [r7, #3]
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	212c      	movs	r1, #44	; 0x2c
 80044e4:	fb01 f303 	mul.w	r3, r1, r3
 80044e8:	4413      	add	r3, r2
 80044ea:	3342      	adds	r3, #66	; 0x42
 80044ec:	2200      	movs	r2, #0
 80044ee:	701a      	strb	r2, [r3, #0]
      break;
 80044f0:	e055      	b.n	800459e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80044f2:	78fb      	ldrb	r3, [r7, #3]
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	212c      	movs	r1, #44	; 0x2c
 80044f8:	fb01 f303 	mul.w	r3, r1, r3
 80044fc:	4413      	add	r3, r2
 80044fe:	3342      	adds	r3, #66	; 0x42
 8004500:	2202      	movs	r2, #2
 8004502:	701a      	strb	r2, [r3, #0]
      break;
 8004504:	e04b      	b.n	800459e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004506:	78bb      	ldrb	r3, [r7, #2]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d11d      	bne.n	8004548 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800450c:	78fb      	ldrb	r3, [r7, #3]
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	212c      	movs	r1, #44	; 0x2c
 8004512:	fb01 f303 	mul.w	r3, r1, r3
 8004516:	4413      	add	r3, r2
 8004518:	3355      	adds	r3, #85	; 0x55
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d109      	bne.n	8004534 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004520:	78fb      	ldrb	r3, [r7, #3]
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	212c      	movs	r1, #44	; 0x2c
 8004526:	fb01 f303 	mul.w	r3, r1, r3
 800452a:	4413      	add	r3, r2
 800452c:	3342      	adds	r3, #66	; 0x42
 800452e:	2200      	movs	r2, #0
 8004530:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004532:	e034      	b.n	800459e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004534:	78fb      	ldrb	r3, [r7, #3]
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	212c      	movs	r1, #44	; 0x2c
 800453a:	fb01 f303 	mul.w	r3, r1, r3
 800453e:	4413      	add	r3, r2
 8004540:	3342      	adds	r3, #66	; 0x42
 8004542:	2202      	movs	r2, #2
 8004544:	701a      	strb	r2, [r3, #0]
      break;
 8004546:	e02a      	b.n	800459e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004548:	78fb      	ldrb	r3, [r7, #3]
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	212c      	movs	r1, #44	; 0x2c
 800454e:	fb01 f303 	mul.w	r3, r1, r3
 8004552:	4413      	add	r3, r2
 8004554:	3354      	adds	r3, #84	; 0x54
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d109      	bne.n	8004570 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800455c:	78fb      	ldrb	r3, [r7, #3]
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	212c      	movs	r1, #44	; 0x2c
 8004562:	fb01 f303 	mul.w	r3, r1, r3
 8004566:	4413      	add	r3, r2
 8004568:	3342      	adds	r3, #66	; 0x42
 800456a:	2200      	movs	r2, #0
 800456c:	701a      	strb	r2, [r3, #0]
      break;
 800456e:	e016      	b.n	800459e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004570:	78fb      	ldrb	r3, [r7, #3]
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	212c      	movs	r1, #44	; 0x2c
 8004576:	fb01 f303 	mul.w	r3, r1, r3
 800457a:	4413      	add	r3, r2
 800457c:	3342      	adds	r3, #66	; 0x42
 800457e:	2202      	movs	r2, #2
 8004580:	701a      	strb	r2, [r3, #0]
      break;
 8004582:	e00c      	b.n	800459e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004584:	78fb      	ldrb	r3, [r7, #3]
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	212c      	movs	r1, #44	; 0x2c
 800458a:	fb01 f303 	mul.w	r3, r1, r3
 800458e:	4413      	add	r3, r2
 8004590:	3342      	adds	r3, #66	; 0x42
 8004592:	2200      	movs	r2, #0
 8004594:	701a      	strb	r2, [r3, #0]
      break;
 8004596:	e002      	b.n	800459e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8004598:	bf00      	nop
 800459a:	e000      	b.n	800459e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800459c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800459e:	78fb      	ldrb	r3, [r7, #3]
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	212c      	movs	r1, #44	; 0x2c
 80045a4:	fb01 f303 	mul.w	r3, r1, r3
 80045a8:	4413      	add	r3, r2
 80045aa:	3344      	adds	r3, #68	; 0x44
 80045ac:	697a      	ldr	r2, [r7, #20]
 80045ae:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80045b0:	78fb      	ldrb	r3, [r7, #3]
 80045b2:	8b3a      	ldrh	r2, [r7, #24]
 80045b4:	6879      	ldr	r1, [r7, #4]
 80045b6:	202c      	movs	r0, #44	; 0x2c
 80045b8:	fb00 f303 	mul.w	r3, r0, r3
 80045bc:	440b      	add	r3, r1
 80045be:	334c      	adds	r3, #76	; 0x4c
 80045c0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80045c2:	78fb      	ldrb	r3, [r7, #3]
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	212c      	movs	r1, #44	; 0x2c
 80045c8:	fb01 f303 	mul.w	r3, r1, r3
 80045cc:	4413      	add	r3, r2
 80045ce:	3360      	adds	r3, #96	; 0x60
 80045d0:	2200      	movs	r2, #0
 80045d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80045d4:	78fb      	ldrb	r3, [r7, #3]
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	212c      	movs	r1, #44	; 0x2c
 80045da:	fb01 f303 	mul.w	r3, r1, r3
 80045de:	4413      	add	r3, r2
 80045e0:	3350      	adds	r3, #80	; 0x50
 80045e2:	2200      	movs	r2, #0
 80045e4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80045e6:	78fb      	ldrb	r3, [r7, #3]
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	212c      	movs	r1, #44	; 0x2c
 80045ec:	fb01 f303 	mul.w	r3, r1, r3
 80045f0:	4413      	add	r3, r2
 80045f2:	3339      	adds	r3, #57	; 0x39
 80045f4:	78fa      	ldrb	r2, [r7, #3]
 80045f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80045f8:	78fb      	ldrb	r3, [r7, #3]
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	212c      	movs	r1, #44	; 0x2c
 80045fe:	fb01 f303 	mul.w	r3, r1, r3
 8004602:	4413      	add	r3, r2
 8004604:	3361      	adds	r3, #97	; 0x61
 8004606:	2200      	movs	r2, #0
 8004608:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6818      	ldr	r0, [r3, #0]
 800460e:	78fb      	ldrb	r3, [r7, #3]
 8004610:	222c      	movs	r2, #44	; 0x2c
 8004612:	fb02 f303 	mul.w	r3, r2, r3
 8004616:	3338      	adds	r3, #56	; 0x38
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	18d1      	adds	r1, r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	b2db      	uxtb	r3, r3
 8004622:	461a      	mov	r2, r3
 8004624:	f004 f9a8 	bl	8008978 <USB_HC_StartXfer>
 8004628:	4603      	mov	r3, r0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop

08004634 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b086      	sub	sp, #24
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4618      	mov	r0, r3
 800464c:	f003 fecb 	bl	80083e6 <USB_GetMode>
 8004650:	4603      	mov	r3, r0
 8004652:	2b01      	cmp	r3, #1
 8004654:	f040 80f6 	bne.w	8004844 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4618      	mov	r0, r3
 800465e:	f003 feaf 	bl	80083c0 <USB_ReadInterrupts>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	f000 80ec 	beq.w	8004842 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4618      	mov	r0, r3
 8004670:	f003 fea6 	bl	80083c0 <USB_ReadInterrupts>
 8004674:	4603      	mov	r3, r0
 8004676:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800467a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800467e:	d104      	bne.n	800468a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004688:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4618      	mov	r0, r3
 8004690:	f003 fe96 	bl	80083c0 <USB_ReadInterrupts>
 8004694:	4603      	mov	r3, r0
 8004696:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800469a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800469e:	d104      	bne.n	80046aa <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80046a8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4618      	mov	r0, r3
 80046b0:	f003 fe86 	bl	80083c0 <USB_ReadInterrupts>
 80046b4:	4603      	mov	r3, r0
 80046b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046be:	d104      	bne.n	80046ca <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80046c8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f003 fe76 	bl	80083c0 <USB_ReadInterrupts>
 80046d4:	4603      	mov	r3, r0
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d103      	bne.n	80046e6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2202      	movs	r2, #2
 80046e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4618      	mov	r0, r3
 80046ec:	f003 fe68 	bl	80083c0 <USB_ReadInterrupts>
 80046f0:	4603      	mov	r3, r0
 80046f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046fa:	d11c      	bne.n	8004736 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004704:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	2b00      	cmp	r3, #0
 8004714:	d10f      	bne.n	8004736 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004716:	2110      	movs	r1, #16
 8004718:	6938      	ldr	r0, [r7, #16]
 800471a:	f003 fd77 	bl	800820c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800471e:	6938      	ldr	r0, [r7, #16]
 8004720:	f003 fd98 	bl	8008254 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2101      	movs	r1, #1
 800472a:	4618      	mov	r0, r3
 800472c:	f003 ff50 	bl	80085d0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f009 f90d 	bl	800d950 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4618      	mov	r0, r3
 800473c:	f003 fe40 	bl	80083c0 <USB_ReadInterrupts>
 8004740:	4603      	mov	r3, r0
 8004742:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004746:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800474a:	d102      	bne.n	8004752 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f001 fa03 	bl	8005b58 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4618      	mov	r0, r3
 8004758:	f003 fe32 	bl	80083c0 <USB_ReadInterrupts>
 800475c:	4603      	mov	r3, r0
 800475e:	f003 0308 	and.w	r3, r3, #8
 8004762:	2b08      	cmp	r3, #8
 8004764:	d106      	bne.n	8004774 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f009 f8d6 	bl	800d918 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2208      	movs	r2, #8
 8004772:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4618      	mov	r0, r3
 800477a:	f003 fe21 	bl	80083c0 <USB_ReadInterrupts>
 800477e:	4603      	mov	r3, r0
 8004780:	f003 0310 	and.w	r3, r3, #16
 8004784:	2b10      	cmp	r3, #16
 8004786:	d101      	bne.n	800478c <HAL_HCD_IRQHandler+0x158>
 8004788:	2301      	movs	r3, #1
 800478a:	e000      	b.n	800478e <HAL_HCD_IRQHandler+0x15a>
 800478c:	2300      	movs	r3, #0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d012      	beq.n	80047b8 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	699a      	ldr	r2, [r3, #24]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f022 0210 	bic.w	r2, r2, #16
 80047a0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f001 f906 	bl	80059b4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	699a      	ldr	r2, [r3, #24]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f042 0210 	orr.w	r2, r2, #16
 80047b6:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4618      	mov	r0, r3
 80047be:	f003 fdff 	bl	80083c0 <USB_ReadInterrupts>
 80047c2:	4603      	mov	r3, r0
 80047c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047cc:	d13a      	bne.n	8004844 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f004 fa12 	bl	8008bfc <USB_HC_ReadInterrupt>
 80047d8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80047da:	2300      	movs	r3, #0
 80047dc:	617b      	str	r3, [r7, #20]
 80047de:	e025      	b.n	800482c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	f003 030f 	and.w	r3, r3, #15
 80047e6:	68ba      	ldr	r2, [r7, #8]
 80047e8:	fa22 f303 	lsr.w	r3, r2, r3
 80047ec:	f003 0301 	and.w	r3, r3, #1
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d018      	beq.n	8004826 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	015a      	lsls	r2, r3, #5
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	4413      	add	r3, r2
 80047fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004806:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800480a:	d106      	bne.n	800481a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	b2db      	uxtb	r3, r3
 8004810:	4619      	mov	r1, r3
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 f8ab 	bl	800496e <HCD_HC_IN_IRQHandler>
 8004818:	e005      	b.n	8004826 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	b2db      	uxtb	r3, r3
 800481e:	4619      	mov	r1, r3
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f000 fcc6 	bl	80051b2 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	3301      	adds	r3, #1
 800482a:	617b      	str	r3, [r7, #20]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	697a      	ldr	r2, [r7, #20]
 8004832:	429a      	cmp	r2, r3
 8004834:	d3d4      	bcc.n	80047e0 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800483e:	615a      	str	r2, [r3, #20]
 8004840:	e000      	b.n	8004844 <HAL_HCD_IRQHandler+0x210>
      return;
 8004842:	bf00      	nop
    }
  }
}
 8004844:	3718      	adds	r7, #24
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}

0800484a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800484a:	b580      	push	{r7, lr}
 800484c:	b082      	sub	sp, #8
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004858:	2b01      	cmp	r3, #1
 800485a:	d101      	bne.n	8004860 <HAL_HCD_Start+0x16>
 800485c:	2302      	movs	r3, #2
 800485e:	e013      	b.n	8004888 <HAL_HCD_Start+0x3e>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2101      	movs	r1, #1
 800486e:	4618      	mov	r0, r3
 8004870:	f003 ff12 	bl	8008698 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4618      	mov	r0, r3
 800487a:	f003 fc58 	bl	800812e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	3708      	adds	r7, #8
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d101      	bne.n	80048a6 <HAL_HCD_Stop+0x16>
 80048a2:	2302      	movs	r3, #2
 80048a4:	e00d      	b.n	80048c2 <HAL_HCD_Stop+0x32>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4618      	mov	r0, r3
 80048b4:	f004 fb0c 	bl	8008ed0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3708      	adds	r7, #8
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b082      	sub	sp, #8
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4618      	mov	r0, r3
 80048d8:	f003 feb4 	bl	8008644 <USB_ResetPort>
 80048dc:	4603      	mov	r3, r0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3708      	adds	r7, #8
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b083      	sub	sp, #12
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
 80048ee:	460b      	mov	r3, r1
 80048f0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80048f2:	78fb      	ldrb	r3, [r7, #3]
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	212c      	movs	r1, #44	; 0x2c
 80048f8:	fb01 f303 	mul.w	r3, r1, r3
 80048fc:	4413      	add	r3, r2
 80048fe:	3360      	adds	r3, #96	; 0x60
 8004900:	781b      	ldrb	r3, [r3, #0]
}
 8004902:	4618      	mov	r0, r3
 8004904:	370c      	adds	r7, #12
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr

0800490e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800490e:	b480      	push	{r7}
 8004910:	b083      	sub	sp, #12
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
 8004916:	460b      	mov	r3, r1
 8004918:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800491a:	78fb      	ldrb	r3, [r7, #3]
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	212c      	movs	r1, #44	; 0x2c
 8004920:	fb01 f303 	mul.w	r3, r1, r3
 8004924:	4413      	add	r3, r2
 8004926:	3350      	adds	r3, #80	; 0x50
 8004928:	681b      	ldr	r3, [r3, #0]
}
 800492a:	4618      	mov	r0, r3
 800492c:	370c      	adds	r7, #12
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr

08004936 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004936:	b580      	push	{r7, lr}
 8004938:	b082      	sub	sp, #8
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4618      	mov	r0, r3
 8004944:	f003 fef8 	bl	8008738 <USB_GetCurrentFrame>
 8004948:	4603      	mov	r3, r0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3708      	adds	r7, #8
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004952:	b580      	push	{r7, lr}
 8004954:	b082      	sub	sp, #8
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4618      	mov	r0, r3
 8004960:	f003 fed3 	bl	800870a <USB_GetHostSpeed>
 8004964:	4603      	mov	r3, r0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3708      	adds	r7, #8
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800496e:	b580      	push	{r7, lr}
 8004970:	b086      	sub	sp, #24
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
 8004976:	460b      	mov	r3, r1
 8004978:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004984:	78fb      	ldrb	r3, [r7, #3]
 8004986:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	015a      	lsls	r2, r3, #5
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	4413      	add	r3, r2
 8004990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f003 0304 	and.w	r3, r3, #4
 800499a:	2b04      	cmp	r3, #4
 800499c:	d119      	bne.n	80049d2 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	015a      	lsls	r2, r3, #5
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	4413      	add	r3, r2
 80049a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049aa:	461a      	mov	r2, r3
 80049ac:	2304      	movs	r3, #4
 80049ae:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	015a      	lsls	r2, r3, #5
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	4413      	add	r3, r2
 80049b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	0151      	lsls	r1, r2, #5
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	440a      	add	r2, r1
 80049c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049ca:	f043 0302 	orr.w	r3, r3, #2
 80049ce:	60d3      	str	r3, [r2, #12]
 80049d0:	e101      	b.n	8004bd6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	015a      	lsls	r2, r3, #5
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	4413      	add	r3, r2
 80049da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049e8:	d12b      	bne.n	8004a42 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	015a      	lsls	r2, r3, #5
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	4413      	add	r3, r2
 80049f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049f6:	461a      	mov	r2, r3
 80049f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80049fc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	212c      	movs	r1, #44	; 0x2c
 8004a04:	fb01 f303 	mul.w	r3, r1, r3
 8004a08:	4413      	add	r3, r2
 8004a0a:	3361      	adds	r3, #97	; 0x61
 8004a0c:	2207      	movs	r2, #7
 8004a0e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	015a      	lsls	r2, r3, #5
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	4413      	add	r3, r2
 8004a18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	0151      	lsls	r1, r2, #5
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	440a      	add	r2, r1
 8004a26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a2a:	f043 0302 	orr.w	r3, r3, #2
 8004a2e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	b2d2      	uxtb	r2, r2
 8004a38:	4611      	mov	r1, r2
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f004 f8ef 	bl	8008c1e <USB_HC_Halt>
 8004a40:	e0c9      	b.n	8004bd6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	015a      	lsls	r2, r3, #5
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	4413      	add	r3, r2
 8004a4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f003 0320 	and.w	r3, r3, #32
 8004a54:	2b20      	cmp	r3, #32
 8004a56:	d109      	bne.n	8004a6c <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	015a      	lsls	r2, r3, #5
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	4413      	add	r3, r2
 8004a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a64:	461a      	mov	r2, r3
 8004a66:	2320      	movs	r3, #32
 8004a68:	6093      	str	r3, [r2, #8]
 8004a6a:	e0b4      	b.n	8004bd6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	015a      	lsls	r2, r3, #5
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	4413      	add	r3, r2
 8004a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f003 0308 	and.w	r3, r3, #8
 8004a7e:	2b08      	cmp	r3, #8
 8004a80:	d133      	bne.n	8004aea <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	015a      	lsls	r2, r3, #5
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	4413      	add	r3, r2
 8004a8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	0151      	lsls	r1, r2, #5
 8004a94:	693a      	ldr	r2, [r7, #16]
 8004a96:	440a      	add	r2, r1
 8004a98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a9c:	f043 0302 	orr.w	r3, r3, #2
 8004aa0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	212c      	movs	r1, #44	; 0x2c
 8004aa8:	fb01 f303 	mul.w	r3, r1, r3
 8004aac:	4413      	add	r3, r2
 8004aae:	3361      	adds	r3, #97	; 0x61
 8004ab0:	2205      	movs	r2, #5
 8004ab2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	015a      	lsls	r2, r3, #5
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	4413      	add	r3, r2
 8004abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	2310      	movs	r3, #16
 8004ac4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	015a      	lsls	r2, r3, #5
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	4413      	add	r3, r2
 8004ace:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	2308      	movs	r3, #8
 8004ad6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	b2d2      	uxtb	r2, r2
 8004ae0:	4611      	mov	r1, r2
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f004 f89b 	bl	8008c1e <USB_HC_Halt>
 8004ae8:	e075      	b.n	8004bd6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	015a      	lsls	r2, r3, #5
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	4413      	add	r3, r2
 8004af2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004afc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b00:	d134      	bne.n	8004b6c <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	015a      	lsls	r2, r3, #5
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	4413      	add	r3, r2
 8004b0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	0151      	lsls	r1, r2, #5
 8004b14:	693a      	ldr	r2, [r7, #16]
 8004b16:	440a      	add	r2, r1
 8004b18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b1c:	f043 0302 	orr.w	r3, r3, #2
 8004b20:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	212c      	movs	r1, #44	; 0x2c
 8004b28:	fb01 f303 	mul.w	r3, r1, r3
 8004b2c:	4413      	add	r3, r2
 8004b2e:	3361      	adds	r3, #97	; 0x61
 8004b30:	2208      	movs	r2, #8
 8004b32:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	015a      	lsls	r2, r3, #5
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b40:	461a      	mov	r2, r3
 8004b42:	2310      	movs	r3, #16
 8004b44:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	015a      	lsls	r2, r3, #5
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b52:	461a      	mov	r2, r3
 8004b54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b58:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	b2d2      	uxtb	r2, r2
 8004b62:	4611      	mov	r1, r2
 8004b64:	4618      	mov	r0, r3
 8004b66:	f004 f85a 	bl	8008c1e <USB_HC_Halt>
 8004b6a:	e034      	b.n	8004bd6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	015a      	lsls	r2, r3, #5
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	4413      	add	r3, r2
 8004b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b7e:	2b80      	cmp	r3, #128	; 0x80
 8004b80:	d129      	bne.n	8004bd6 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	015a      	lsls	r2, r3, #5
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	4413      	add	r3, r2
 8004b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	0151      	lsls	r1, r2, #5
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	440a      	add	r2, r1
 8004b98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b9c:	f043 0302 	orr.w	r3, r3, #2
 8004ba0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	212c      	movs	r1, #44	; 0x2c
 8004ba8:	fb01 f303 	mul.w	r3, r1, r3
 8004bac:	4413      	add	r3, r2
 8004bae:	3361      	adds	r3, #97	; 0x61
 8004bb0:	2206      	movs	r2, #6
 8004bb2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	b2d2      	uxtb	r2, r2
 8004bbc:	4611      	mov	r1, r2
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f004 f82d 	bl	8008c1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	015a      	lsls	r2, r3, #5
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	4413      	add	r3, r2
 8004bcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	2380      	movs	r3, #128	; 0x80
 8004bd4:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	015a      	lsls	r2, r3, #5
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	4413      	add	r3, r2
 8004bde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004be8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bec:	d122      	bne.n	8004c34 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	015a      	lsls	r2, r3, #5
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	0151      	lsls	r1, r2, #5
 8004c00:	693a      	ldr	r2, [r7, #16]
 8004c02:	440a      	add	r2, r1
 8004c04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c08:	f043 0302 	orr.w	r3, r3, #2
 8004c0c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	b2d2      	uxtb	r2, r2
 8004c16:	4611      	mov	r1, r2
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f004 f800 	bl	8008c1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	015a      	lsls	r2, r3, #5
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	4413      	add	r3, r2
 8004c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c30:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004c32:	e2ba      	b.n	80051aa <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	015a      	lsls	r2, r3, #5
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	f040 811b 	bne.w	8004e82 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d019      	beq.n	8004c88 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	212c      	movs	r1, #44	; 0x2c
 8004c5a:	fb01 f303 	mul.w	r3, r1, r3
 8004c5e:	4413      	add	r3, r2
 8004c60:	3348      	adds	r3, #72	; 0x48
 8004c62:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	0159      	lsls	r1, r3, #5
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	440b      	add	r3, r1
 8004c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004c76:	1ad2      	subs	r2, r2, r3
 8004c78:	6879      	ldr	r1, [r7, #4]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	202c      	movs	r0, #44	; 0x2c
 8004c7e:	fb00 f303 	mul.w	r3, r0, r3
 8004c82:	440b      	add	r3, r1
 8004c84:	3350      	adds	r3, #80	; 0x50
 8004c86:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	212c      	movs	r1, #44	; 0x2c
 8004c8e:	fb01 f303 	mul.w	r3, r1, r3
 8004c92:	4413      	add	r3, r2
 8004c94:	3361      	adds	r3, #97	; 0x61
 8004c96:	2201      	movs	r2, #1
 8004c98:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	212c      	movs	r1, #44	; 0x2c
 8004ca0:	fb01 f303 	mul.w	r3, r1, r3
 8004ca4:	4413      	add	r3, r2
 8004ca6:	335c      	adds	r3, #92	; 0x5c
 8004ca8:	2200      	movs	r2, #0
 8004caa:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	015a      	lsls	r2, r3, #5
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cb8:	461a      	mov	r2, r3
 8004cba:	2301      	movs	r3, #1
 8004cbc:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	212c      	movs	r1, #44	; 0x2c
 8004cc4:	fb01 f303 	mul.w	r3, r1, r3
 8004cc8:	4413      	add	r3, r2
 8004cca:	333f      	adds	r3, #63	; 0x3f
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d009      	beq.n	8004ce6 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	212c      	movs	r1, #44	; 0x2c
 8004cd8:	fb01 f303 	mul.w	r3, r1, r3
 8004cdc:	4413      	add	r3, r2
 8004cde:	333f      	adds	r3, #63	; 0x3f
 8004ce0:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d121      	bne.n	8004d2a <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	015a      	lsls	r2, r3, #5
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	4413      	add	r3, r2
 8004cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	0151      	lsls	r1, r2, #5
 8004cf8:	693a      	ldr	r2, [r7, #16]
 8004cfa:	440a      	add	r2, r1
 8004cfc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d00:	f043 0302 	orr.w	r3, r3, #2
 8004d04:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	b2d2      	uxtb	r2, r2
 8004d0e:	4611      	mov	r1, r2
 8004d10:	4618      	mov	r0, r3
 8004d12:	f003 ff84 	bl	8008c1e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	015a      	lsls	r2, r3, #5
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d22:	461a      	mov	r2, r3
 8004d24:	2310      	movs	r3, #16
 8004d26:	6093      	str	r3, [r2, #8]
 8004d28:	e066      	b.n	8004df8 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	212c      	movs	r1, #44	; 0x2c
 8004d30:	fb01 f303 	mul.w	r3, r1, r3
 8004d34:	4413      	add	r3, r2
 8004d36:	333f      	adds	r3, #63	; 0x3f
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	2b03      	cmp	r3, #3
 8004d3c:	d127      	bne.n	8004d8e <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	015a      	lsls	r2, r3, #5
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	4413      	add	r3, r2
 8004d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	0151      	lsls	r1, r2, #5
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	440a      	add	r2, r1
 8004d54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d5c:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	212c      	movs	r1, #44	; 0x2c
 8004d64:	fb01 f303 	mul.w	r3, r1, r3
 8004d68:	4413      	add	r3, r2
 8004d6a:	3360      	adds	r3, #96	; 0x60
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	b2d9      	uxtb	r1, r3
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	202c      	movs	r0, #44	; 0x2c
 8004d7a:	fb00 f303 	mul.w	r3, r0, r3
 8004d7e:	4413      	add	r3, r2
 8004d80:	3360      	adds	r3, #96	; 0x60
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	461a      	mov	r2, r3
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f008 fdf0 	bl	800d96c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004d8c:	e034      	b.n	8004df8 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	212c      	movs	r1, #44	; 0x2c
 8004d94:	fb01 f303 	mul.w	r3, r1, r3
 8004d98:	4413      	add	r3, r2
 8004d9a:	333f      	adds	r3, #63	; 0x3f
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d12a      	bne.n	8004df8 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	212c      	movs	r1, #44	; 0x2c
 8004da8:	fb01 f303 	mul.w	r3, r1, r3
 8004dac:	4413      	add	r3, r2
 8004dae:	3360      	adds	r3, #96	; 0x60
 8004db0:	2201      	movs	r2, #1
 8004db2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	212c      	movs	r1, #44	; 0x2c
 8004dba:	fb01 f303 	mul.w	r3, r1, r3
 8004dbe:	4413      	add	r3, r2
 8004dc0:	3354      	adds	r3, #84	; 0x54
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	f083 0301 	eor.w	r3, r3, #1
 8004dc8:	b2d8      	uxtb	r0, r3
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	212c      	movs	r1, #44	; 0x2c
 8004dd0:	fb01 f303 	mul.w	r3, r1, r3
 8004dd4:	4413      	add	r3, r2
 8004dd6:	3354      	adds	r3, #84	; 0x54
 8004dd8:	4602      	mov	r2, r0
 8004dda:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	b2d9      	uxtb	r1, r3
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	202c      	movs	r0, #44	; 0x2c
 8004de6:	fb00 f303 	mul.w	r3, r0, r3
 8004dea:	4413      	add	r3, r2
 8004dec:	3360      	adds	r3, #96	; 0x60
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	461a      	mov	r2, r3
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f008 fdba 	bl	800d96c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d12b      	bne.n	8004e58 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	212c      	movs	r1, #44	; 0x2c
 8004e06:	fb01 f303 	mul.w	r3, r1, r3
 8004e0a:	4413      	add	r3, r2
 8004e0c:	3348      	adds	r3, #72	; 0x48
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	6879      	ldr	r1, [r7, #4]
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	202c      	movs	r0, #44	; 0x2c
 8004e16:	fb00 f202 	mul.w	r2, r0, r2
 8004e1a:	440a      	add	r2, r1
 8004e1c:	3240      	adds	r2, #64	; 0x40
 8004e1e:	8812      	ldrh	r2, [r2, #0]
 8004e20:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e24:	f003 0301 	and.w	r3, r3, #1
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f000 81be 	beq.w	80051aa <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	212c      	movs	r1, #44	; 0x2c
 8004e34:	fb01 f303 	mul.w	r3, r1, r3
 8004e38:	4413      	add	r3, r2
 8004e3a:	3354      	adds	r3, #84	; 0x54
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	f083 0301 	eor.w	r3, r3, #1
 8004e42:	b2d8      	uxtb	r0, r3
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	212c      	movs	r1, #44	; 0x2c
 8004e4a:	fb01 f303 	mul.w	r3, r1, r3
 8004e4e:	4413      	add	r3, r2
 8004e50:	3354      	adds	r3, #84	; 0x54
 8004e52:	4602      	mov	r2, r0
 8004e54:	701a      	strb	r2, [r3, #0]
}
 8004e56:	e1a8      	b.n	80051aa <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	212c      	movs	r1, #44	; 0x2c
 8004e5e:	fb01 f303 	mul.w	r3, r1, r3
 8004e62:	4413      	add	r3, r2
 8004e64:	3354      	adds	r3, #84	; 0x54
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	f083 0301 	eor.w	r3, r3, #1
 8004e6c:	b2d8      	uxtb	r0, r3
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	212c      	movs	r1, #44	; 0x2c
 8004e74:	fb01 f303 	mul.w	r3, r1, r3
 8004e78:	4413      	add	r3, r2
 8004e7a:	3354      	adds	r3, #84	; 0x54
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	701a      	strb	r2, [r3, #0]
}
 8004e80:	e193      	b.n	80051aa <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	015a      	lsls	r2, r3, #5
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	4413      	add	r3, r2
 8004e8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f003 0302 	and.w	r3, r3, #2
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	f040 8106 	bne.w	80050a6 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	015a      	lsls	r2, r3, #5
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	0151      	lsls	r1, r2, #5
 8004eac:	693a      	ldr	r2, [r7, #16]
 8004eae:	440a      	add	r2, r1
 8004eb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004eb4:	f023 0302 	bic.w	r3, r3, #2
 8004eb8:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	212c      	movs	r1, #44	; 0x2c
 8004ec0:	fb01 f303 	mul.w	r3, r1, r3
 8004ec4:	4413      	add	r3, r2
 8004ec6:	3361      	adds	r3, #97	; 0x61
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d109      	bne.n	8004ee2 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	212c      	movs	r1, #44	; 0x2c
 8004ed4:	fb01 f303 	mul.w	r3, r1, r3
 8004ed8:	4413      	add	r3, r2
 8004eda:	3360      	adds	r3, #96	; 0x60
 8004edc:	2201      	movs	r2, #1
 8004ede:	701a      	strb	r2, [r3, #0]
 8004ee0:	e0c9      	b.n	8005076 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	212c      	movs	r1, #44	; 0x2c
 8004ee8:	fb01 f303 	mul.w	r3, r1, r3
 8004eec:	4413      	add	r3, r2
 8004eee:	3361      	adds	r3, #97	; 0x61
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	2b05      	cmp	r3, #5
 8004ef4:	d109      	bne.n	8004f0a <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	212c      	movs	r1, #44	; 0x2c
 8004efc:	fb01 f303 	mul.w	r3, r1, r3
 8004f00:	4413      	add	r3, r2
 8004f02:	3360      	adds	r3, #96	; 0x60
 8004f04:	2205      	movs	r2, #5
 8004f06:	701a      	strb	r2, [r3, #0]
 8004f08:	e0b5      	b.n	8005076 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	212c      	movs	r1, #44	; 0x2c
 8004f10:	fb01 f303 	mul.w	r3, r1, r3
 8004f14:	4413      	add	r3, r2
 8004f16:	3361      	adds	r3, #97	; 0x61
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	2b06      	cmp	r3, #6
 8004f1c:	d009      	beq.n	8004f32 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	212c      	movs	r1, #44	; 0x2c
 8004f24:	fb01 f303 	mul.w	r3, r1, r3
 8004f28:	4413      	add	r3, r2
 8004f2a:	3361      	adds	r3, #97	; 0x61
 8004f2c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004f2e:	2b08      	cmp	r3, #8
 8004f30:	d150      	bne.n	8004fd4 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	212c      	movs	r1, #44	; 0x2c
 8004f38:	fb01 f303 	mul.w	r3, r1, r3
 8004f3c:	4413      	add	r3, r2
 8004f3e:	335c      	adds	r3, #92	; 0x5c
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	1c5a      	adds	r2, r3, #1
 8004f44:	6879      	ldr	r1, [r7, #4]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	202c      	movs	r0, #44	; 0x2c
 8004f4a:	fb00 f303 	mul.w	r3, r0, r3
 8004f4e:	440b      	add	r3, r1
 8004f50:	335c      	adds	r3, #92	; 0x5c
 8004f52:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	212c      	movs	r1, #44	; 0x2c
 8004f5a:	fb01 f303 	mul.w	r3, r1, r3
 8004f5e:	4413      	add	r3, r2
 8004f60:	335c      	adds	r3, #92	; 0x5c
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d912      	bls.n	8004f8e <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	212c      	movs	r1, #44	; 0x2c
 8004f6e:	fb01 f303 	mul.w	r3, r1, r3
 8004f72:	4413      	add	r3, r2
 8004f74:	335c      	adds	r3, #92	; 0x5c
 8004f76:	2200      	movs	r2, #0
 8004f78:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	212c      	movs	r1, #44	; 0x2c
 8004f80:	fb01 f303 	mul.w	r3, r1, r3
 8004f84:	4413      	add	r3, r2
 8004f86:	3360      	adds	r3, #96	; 0x60
 8004f88:	2204      	movs	r2, #4
 8004f8a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004f8c:	e073      	b.n	8005076 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	212c      	movs	r1, #44	; 0x2c
 8004f94:	fb01 f303 	mul.w	r3, r1, r3
 8004f98:	4413      	add	r3, r2
 8004f9a:	3360      	adds	r3, #96	; 0x60
 8004f9c:	2202      	movs	r2, #2
 8004f9e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	015a      	lsls	r2, r3, #5
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004fb6:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004fbe:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	015a      	lsls	r2, r3, #5
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fcc:	461a      	mov	r2, r3
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004fd2:	e050      	b.n	8005076 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	212c      	movs	r1, #44	; 0x2c
 8004fda:	fb01 f303 	mul.w	r3, r1, r3
 8004fde:	4413      	add	r3, r2
 8004fe0:	3361      	adds	r3, #97	; 0x61
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	2b03      	cmp	r3, #3
 8004fe6:	d122      	bne.n	800502e <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	212c      	movs	r1, #44	; 0x2c
 8004fee:	fb01 f303 	mul.w	r3, r1, r3
 8004ff2:	4413      	add	r3, r2
 8004ff4:	3360      	adds	r3, #96	; 0x60
 8004ff6:	2202      	movs	r2, #2
 8004ff8:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	015a      	lsls	r2, r3, #5
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	4413      	add	r3, r2
 8005002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005010:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005018:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	015a      	lsls	r2, r3, #5
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	4413      	add	r3, r2
 8005022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005026:	461a      	mov	r2, r3
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	6013      	str	r3, [r2, #0]
 800502c:	e023      	b.n	8005076 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	212c      	movs	r1, #44	; 0x2c
 8005034:	fb01 f303 	mul.w	r3, r1, r3
 8005038:	4413      	add	r3, r2
 800503a:	3361      	adds	r3, #97	; 0x61
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	2b07      	cmp	r3, #7
 8005040:	d119      	bne.n	8005076 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	212c      	movs	r1, #44	; 0x2c
 8005048:	fb01 f303 	mul.w	r3, r1, r3
 800504c:	4413      	add	r3, r2
 800504e:	335c      	adds	r3, #92	; 0x5c
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	1c5a      	adds	r2, r3, #1
 8005054:	6879      	ldr	r1, [r7, #4]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	202c      	movs	r0, #44	; 0x2c
 800505a:	fb00 f303 	mul.w	r3, r0, r3
 800505e:	440b      	add	r3, r1
 8005060:	335c      	adds	r3, #92	; 0x5c
 8005062:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	212c      	movs	r1, #44	; 0x2c
 800506a:	fb01 f303 	mul.w	r3, r1, r3
 800506e:	4413      	add	r3, r2
 8005070:	3360      	adds	r3, #96	; 0x60
 8005072:	2204      	movs	r2, #4
 8005074:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	015a      	lsls	r2, r3, #5
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	4413      	add	r3, r2
 800507e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005082:	461a      	mov	r2, r3
 8005084:	2302      	movs	r3, #2
 8005086:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	b2d9      	uxtb	r1, r3
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	202c      	movs	r0, #44	; 0x2c
 8005092:	fb00 f303 	mul.w	r3, r0, r3
 8005096:	4413      	add	r3, r2
 8005098:	3360      	adds	r3, #96	; 0x60
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	461a      	mov	r2, r3
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f008 fc64 	bl	800d96c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80050a4:	e081      	b.n	80051aa <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	015a      	lsls	r2, r3, #5
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	4413      	add	r3, r2
 80050ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f003 0310 	and.w	r3, r3, #16
 80050b8:	2b10      	cmp	r3, #16
 80050ba:	d176      	bne.n	80051aa <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	212c      	movs	r1, #44	; 0x2c
 80050c2:	fb01 f303 	mul.w	r3, r1, r3
 80050c6:	4413      	add	r3, r2
 80050c8:	333f      	adds	r3, #63	; 0x3f
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	2b03      	cmp	r3, #3
 80050ce:	d121      	bne.n	8005114 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	212c      	movs	r1, #44	; 0x2c
 80050d6:	fb01 f303 	mul.w	r3, r1, r3
 80050da:	4413      	add	r3, r2
 80050dc:	335c      	adds	r3, #92	; 0x5c
 80050de:	2200      	movs	r2, #0
 80050e0:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	015a      	lsls	r2, r3, #5
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	4413      	add	r3, r2
 80050ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	0151      	lsls	r1, r2, #5
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	440a      	add	r2, r1
 80050f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050fc:	f043 0302 	orr.w	r3, r3, #2
 8005100:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	b2d2      	uxtb	r2, r2
 800510a:	4611      	mov	r1, r2
 800510c:	4618      	mov	r0, r3
 800510e:	f003 fd86 	bl	8008c1e <USB_HC_Halt>
 8005112:	e041      	b.n	8005198 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	212c      	movs	r1, #44	; 0x2c
 800511a:	fb01 f303 	mul.w	r3, r1, r3
 800511e:	4413      	add	r3, r2
 8005120:	333f      	adds	r3, #63	; 0x3f
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d009      	beq.n	800513c <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	212c      	movs	r1, #44	; 0x2c
 800512e:	fb01 f303 	mul.w	r3, r1, r3
 8005132:	4413      	add	r3, r2
 8005134:	333f      	adds	r3, #63	; 0x3f
 8005136:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005138:	2b02      	cmp	r3, #2
 800513a:	d12d      	bne.n	8005198 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	212c      	movs	r1, #44	; 0x2c
 8005142:	fb01 f303 	mul.w	r3, r1, r3
 8005146:	4413      	add	r3, r2
 8005148:	335c      	adds	r3, #92	; 0x5c
 800514a:	2200      	movs	r2, #0
 800514c:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d120      	bne.n	8005198 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	212c      	movs	r1, #44	; 0x2c
 800515c:	fb01 f303 	mul.w	r3, r1, r3
 8005160:	4413      	add	r3, r2
 8005162:	3361      	adds	r3, #97	; 0x61
 8005164:	2203      	movs	r2, #3
 8005166:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	015a      	lsls	r2, r3, #5
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	4413      	add	r3, r2
 8005170:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	0151      	lsls	r1, r2, #5
 800517a:	693a      	ldr	r2, [r7, #16]
 800517c:	440a      	add	r2, r1
 800517e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005182:	f043 0302 	orr.w	r3, r3, #2
 8005186:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	b2d2      	uxtb	r2, r2
 8005190:	4611      	mov	r1, r2
 8005192:	4618      	mov	r0, r3
 8005194:	f003 fd43 	bl	8008c1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	015a      	lsls	r2, r3, #5
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	4413      	add	r3, r2
 80051a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051a4:	461a      	mov	r2, r3
 80051a6:	2310      	movs	r3, #16
 80051a8:	6093      	str	r3, [r2, #8]
}
 80051aa:	bf00      	nop
 80051ac:	3718      	adds	r7, #24
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b088      	sub	sp, #32
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
 80051ba:	460b      	mov	r3, r1
 80051bc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80051c8:	78fb      	ldrb	r3, [r7, #3]
 80051ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	015a      	lsls	r2, r3, #5
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	4413      	add	r3, r2
 80051d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f003 0304 	and.w	r3, r3, #4
 80051de:	2b04      	cmp	r3, #4
 80051e0:	d119      	bne.n	8005216 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	015a      	lsls	r2, r3, #5
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	4413      	add	r3, r2
 80051ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ee:	461a      	mov	r2, r3
 80051f0:	2304      	movs	r3, #4
 80051f2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	015a      	lsls	r2, r3, #5
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	4413      	add	r3, r2
 80051fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	697a      	ldr	r2, [r7, #20]
 8005204:	0151      	lsls	r1, r2, #5
 8005206:	69ba      	ldr	r2, [r7, #24]
 8005208:	440a      	add	r2, r1
 800520a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800520e:	f043 0302 	orr.w	r3, r3, #2
 8005212:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8005214:	e3ca      	b.n	80059ac <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	015a      	lsls	r2, r3, #5
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	4413      	add	r3, r2
 800521e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	f003 0320 	and.w	r3, r3, #32
 8005228:	2b20      	cmp	r3, #32
 800522a:	d13e      	bne.n	80052aa <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	015a      	lsls	r2, r3, #5
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	4413      	add	r3, r2
 8005234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005238:	461a      	mov	r2, r3
 800523a:	2320      	movs	r3, #32
 800523c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	212c      	movs	r1, #44	; 0x2c
 8005244:	fb01 f303 	mul.w	r3, r1, r3
 8005248:	4413      	add	r3, r2
 800524a:	333d      	adds	r3, #61	; 0x3d
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	2b01      	cmp	r3, #1
 8005250:	f040 83ac 	bne.w	80059ac <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	212c      	movs	r1, #44	; 0x2c
 800525a:	fb01 f303 	mul.w	r3, r1, r3
 800525e:	4413      	add	r3, r2
 8005260:	333d      	adds	r3, #61	; 0x3d
 8005262:	2200      	movs	r2, #0
 8005264:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	212c      	movs	r1, #44	; 0x2c
 800526c:	fb01 f303 	mul.w	r3, r1, r3
 8005270:	4413      	add	r3, r2
 8005272:	3360      	adds	r3, #96	; 0x60
 8005274:	2202      	movs	r2, #2
 8005276:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	015a      	lsls	r2, r3, #5
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	4413      	add	r3, r2
 8005280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	0151      	lsls	r1, r2, #5
 800528a:	69ba      	ldr	r2, [r7, #24]
 800528c:	440a      	add	r2, r1
 800528e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005292:	f043 0302 	orr.w	r3, r3, #2
 8005296:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	697a      	ldr	r2, [r7, #20]
 800529e:	b2d2      	uxtb	r2, r2
 80052a0:	4611      	mov	r1, r2
 80052a2:	4618      	mov	r0, r3
 80052a4:	f003 fcbb 	bl	8008c1e <USB_HC_Halt>
}
 80052a8:	e380      	b.n	80059ac <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	015a      	lsls	r2, r3, #5
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	4413      	add	r3, r2
 80052b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052c0:	d122      	bne.n	8005308 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	015a      	lsls	r2, r3, #5
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	4413      	add	r3, r2
 80052ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	697a      	ldr	r2, [r7, #20]
 80052d2:	0151      	lsls	r1, r2, #5
 80052d4:	69ba      	ldr	r2, [r7, #24]
 80052d6:	440a      	add	r2, r1
 80052d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052dc:	f043 0302 	orr.w	r3, r3, #2
 80052e0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	b2d2      	uxtb	r2, r2
 80052ea:	4611      	mov	r1, r2
 80052ec:	4618      	mov	r0, r3
 80052ee:	f003 fc96 	bl	8008c1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	015a      	lsls	r2, r3, #5
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	4413      	add	r3, r2
 80052fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052fe:	461a      	mov	r2, r3
 8005300:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005304:	6093      	str	r3, [r2, #8]
}
 8005306:	e351      	b.n	80059ac <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	015a      	lsls	r2, r3, #5
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	4413      	add	r3, r2
 8005310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f003 0301 	and.w	r3, r3, #1
 800531a:	2b01      	cmp	r3, #1
 800531c:	d150      	bne.n	80053c0 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	212c      	movs	r1, #44	; 0x2c
 8005324:	fb01 f303 	mul.w	r3, r1, r3
 8005328:	4413      	add	r3, r2
 800532a:	335c      	adds	r3, #92	; 0x5c
 800532c:	2200      	movs	r2, #0
 800532e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	015a      	lsls	r2, r3, #5
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	4413      	add	r3, r2
 8005338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005342:	2b40      	cmp	r3, #64	; 0x40
 8005344:	d111      	bne.n	800536a <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	212c      	movs	r1, #44	; 0x2c
 800534c:	fb01 f303 	mul.w	r3, r1, r3
 8005350:	4413      	add	r3, r2
 8005352:	333d      	adds	r3, #61	; 0x3d
 8005354:	2201      	movs	r2, #1
 8005356:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	015a      	lsls	r2, r3, #5
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	4413      	add	r3, r2
 8005360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005364:	461a      	mov	r2, r3
 8005366:	2340      	movs	r3, #64	; 0x40
 8005368:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	015a      	lsls	r2, r3, #5
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	4413      	add	r3, r2
 8005372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	0151      	lsls	r1, r2, #5
 800537c:	69ba      	ldr	r2, [r7, #24]
 800537e:	440a      	add	r2, r1
 8005380:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005384:	f043 0302 	orr.w	r3, r3, #2
 8005388:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	b2d2      	uxtb	r2, r2
 8005392:	4611      	mov	r1, r2
 8005394:	4618      	mov	r0, r3
 8005396:	f003 fc42 	bl	8008c1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	015a      	lsls	r2, r3, #5
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	4413      	add	r3, r2
 80053a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053a6:	461a      	mov	r2, r3
 80053a8:	2301      	movs	r3, #1
 80053aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	212c      	movs	r1, #44	; 0x2c
 80053b2:	fb01 f303 	mul.w	r3, r1, r3
 80053b6:	4413      	add	r3, r2
 80053b8:	3361      	adds	r3, #97	; 0x61
 80053ba:	2201      	movs	r2, #1
 80053bc:	701a      	strb	r2, [r3, #0]
}
 80053be:	e2f5      	b.n	80059ac <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	015a      	lsls	r2, r3, #5
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	4413      	add	r3, r2
 80053c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d2:	2b40      	cmp	r3, #64	; 0x40
 80053d4:	d13c      	bne.n	8005450 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	212c      	movs	r1, #44	; 0x2c
 80053dc:	fb01 f303 	mul.w	r3, r1, r3
 80053e0:	4413      	add	r3, r2
 80053e2:	3361      	adds	r3, #97	; 0x61
 80053e4:	2204      	movs	r2, #4
 80053e6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	212c      	movs	r1, #44	; 0x2c
 80053ee:	fb01 f303 	mul.w	r3, r1, r3
 80053f2:	4413      	add	r3, r2
 80053f4:	333d      	adds	r3, #61	; 0x3d
 80053f6:	2201      	movs	r2, #1
 80053f8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	212c      	movs	r1, #44	; 0x2c
 8005400:	fb01 f303 	mul.w	r3, r1, r3
 8005404:	4413      	add	r3, r2
 8005406:	335c      	adds	r3, #92	; 0x5c
 8005408:	2200      	movs	r2, #0
 800540a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	015a      	lsls	r2, r3, #5
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	4413      	add	r3, r2
 8005414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	697a      	ldr	r2, [r7, #20]
 800541c:	0151      	lsls	r1, r2, #5
 800541e:	69ba      	ldr	r2, [r7, #24]
 8005420:	440a      	add	r2, r1
 8005422:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005426:	f043 0302 	orr.w	r3, r3, #2
 800542a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	697a      	ldr	r2, [r7, #20]
 8005432:	b2d2      	uxtb	r2, r2
 8005434:	4611      	mov	r1, r2
 8005436:	4618      	mov	r0, r3
 8005438:	f003 fbf1 	bl	8008c1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	015a      	lsls	r2, r3, #5
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	4413      	add	r3, r2
 8005444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005448:	461a      	mov	r2, r3
 800544a:	2340      	movs	r3, #64	; 0x40
 800544c:	6093      	str	r3, [r2, #8]
}
 800544e:	e2ad      	b.n	80059ac <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	015a      	lsls	r2, r3, #5
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	4413      	add	r3, r2
 8005458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	f003 0308 	and.w	r3, r3, #8
 8005462:	2b08      	cmp	r3, #8
 8005464:	d12a      	bne.n	80054bc <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	015a      	lsls	r2, r3, #5
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	4413      	add	r3, r2
 800546e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005472:	461a      	mov	r2, r3
 8005474:	2308      	movs	r3, #8
 8005476:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	015a      	lsls	r2, r3, #5
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	4413      	add	r3, r2
 8005480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	0151      	lsls	r1, r2, #5
 800548a:	69ba      	ldr	r2, [r7, #24]
 800548c:	440a      	add	r2, r1
 800548e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005492:	f043 0302 	orr.w	r3, r3, #2
 8005496:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	697a      	ldr	r2, [r7, #20]
 800549e:	b2d2      	uxtb	r2, r2
 80054a0:	4611      	mov	r1, r2
 80054a2:	4618      	mov	r0, r3
 80054a4:	f003 fbbb 	bl	8008c1e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	212c      	movs	r1, #44	; 0x2c
 80054ae:	fb01 f303 	mul.w	r3, r1, r3
 80054b2:	4413      	add	r3, r2
 80054b4:	3361      	adds	r3, #97	; 0x61
 80054b6:	2205      	movs	r2, #5
 80054b8:	701a      	strb	r2, [r3, #0]
}
 80054ba:	e277      	b.n	80059ac <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	015a      	lsls	r2, r3, #5
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	4413      	add	r3, r2
 80054c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f003 0310 	and.w	r3, r3, #16
 80054ce:	2b10      	cmp	r3, #16
 80054d0:	d150      	bne.n	8005574 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	212c      	movs	r1, #44	; 0x2c
 80054d8:	fb01 f303 	mul.w	r3, r1, r3
 80054dc:	4413      	add	r3, r2
 80054de:	335c      	adds	r3, #92	; 0x5c
 80054e0:	2200      	movs	r2, #0
 80054e2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	212c      	movs	r1, #44	; 0x2c
 80054ea:	fb01 f303 	mul.w	r3, r1, r3
 80054ee:	4413      	add	r3, r2
 80054f0:	3361      	adds	r3, #97	; 0x61
 80054f2:	2203      	movs	r2, #3
 80054f4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	212c      	movs	r1, #44	; 0x2c
 80054fc:	fb01 f303 	mul.w	r3, r1, r3
 8005500:	4413      	add	r3, r2
 8005502:	333d      	adds	r3, #61	; 0x3d
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d112      	bne.n	8005530 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	212c      	movs	r1, #44	; 0x2c
 8005510:	fb01 f303 	mul.w	r3, r1, r3
 8005514:	4413      	add	r3, r2
 8005516:	333c      	adds	r3, #60	; 0x3c
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d108      	bne.n	8005530 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	212c      	movs	r1, #44	; 0x2c
 8005524:	fb01 f303 	mul.w	r3, r1, r3
 8005528:	4413      	add	r3, r2
 800552a:	333d      	adds	r3, #61	; 0x3d
 800552c:	2201      	movs	r2, #1
 800552e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	015a      	lsls	r2, r3, #5
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	4413      	add	r3, r2
 8005538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	697a      	ldr	r2, [r7, #20]
 8005540:	0151      	lsls	r1, r2, #5
 8005542:	69ba      	ldr	r2, [r7, #24]
 8005544:	440a      	add	r2, r1
 8005546:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800554a:	f043 0302 	orr.w	r3, r3, #2
 800554e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	697a      	ldr	r2, [r7, #20]
 8005556:	b2d2      	uxtb	r2, r2
 8005558:	4611      	mov	r1, r2
 800555a:	4618      	mov	r0, r3
 800555c:	f003 fb5f 	bl	8008c1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	015a      	lsls	r2, r3, #5
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	4413      	add	r3, r2
 8005568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800556c:	461a      	mov	r2, r3
 800556e:	2310      	movs	r3, #16
 8005570:	6093      	str	r3, [r2, #8]
}
 8005572:	e21b      	b.n	80059ac <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	015a      	lsls	r2, r3, #5
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	4413      	add	r3, r2
 800557c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005586:	2b80      	cmp	r3, #128	; 0x80
 8005588:	d174      	bne.n	8005674 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d121      	bne.n	80055d6 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	212c      	movs	r1, #44	; 0x2c
 8005598:	fb01 f303 	mul.w	r3, r1, r3
 800559c:	4413      	add	r3, r2
 800559e:	3361      	adds	r3, #97	; 0x61
 80055a0:	2206      	movs	r2, #6
 80055a2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	015a      	lsls	r2, r3, #5
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	4413      	add	r3, r2
 80055ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	0151      	lsls	r1, r2, #5
 80055b6:	69ba      	ldr	r2, [r7, #24]
 80055b8:	440a      	add	r2, r1
 80055ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055be:	f043 0302 	orr.w	r3, r3, #2
 80055c2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	697a      	ldr	r2, [r7, #20]
 80055ca:	b2d2      	uxtb	r2, r2
 80055cc:	4611      	mov	r1, r2
 80055ce:	4618      	mov	r0, r3
 80055d0:	f003 fb25 	bl	8008c1e <USB_HC_Halt>
 80055d4:	e044      	b.n	8005660 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	212c      	movs	r1, #44	; 0x2c
 80055dc:	fb01 f303 	mul.w	r3, r1, r3
 80055e0:	4413      	add	r3, r2
 80055e2:	335c      	adds	r3, #92	; 0x5c
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	1c5a      	adds	r2, r3, #1
 80055e8:	6879      	ldr	r1, [r7, #4]
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	202c      	movs	r0, #44	; 0x2c
 80055ee:	fb00 f303 	mul.w	r3, r0, r3
 80055f2:	440b      	add	r3, r1
 80055f4:	335c      	adds	r3, #92	; 0x5c
 80055f6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	212c      	movs	r1, #44	; 0x2c
 80055fe:	fb01 f303 	mul.w	r3, r1, r3
 8005602:	4413      	add	r3, r2
 8005604:	335c      	adds	r3, #92	; 0x5c
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2b02      	cmp	r3, #2
 800560a:	d920      	bls.n	800564e <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	212c      	movs	r1, #44	; 0x2c
 8005612:	fb01 f303 	mul.w	r3, r1, r3
 8005616:	4413      	add	r3, r2
 8005618:	335c      	adds	r3, #92	; 0x5c
 800561a:	2200      	movs	r2, #0
 800561c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	212c      	movs	r1, #44	; 0x2c
 8005624:	fb01 f303 	mul.w	r3, r1, r3
 8005628:	4413      	add	r3, r2
 800562a:	3360      	adds	r3, #96	; 0x60
 800562c:	2204      	movs	r2, #4
 800562e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	b2d9      	uxtb	r1, r3
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	202c      	movs	r0, #44	; 0x2c
 800563a:	fb00 f303 	mul.w	r3, r0, r3
 800563e:	4413      	add	r3, r2
 8005640:	3360      	adds	r3, #96	; 0x60
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	461a      	mov	r2, r3
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f008 f990 	bl	800d96c <HAL_HCD_HC_NotifyURBChange_Callback>
 800564c:	e008      	b.n	8005660 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	212c      	movs	r1, #44	; 0x2c
 8005654:	fb01 f303 	mul.w	r3, r1, r3
 8005658:	4413      	add	r3, r2
 800565a:	3360      	adds	r3, #96	; 0x60
 800565c:	2202      	movs	r2, #2
 800565e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	015a      	lsls	r2, r3, #5
 8005664:	69bb      	ldr	r3, [r7, #24]
 8005666:	4413      	add	r3, r2
 8005668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800566c:	461a      	mov	r2, r3
 800566e:	2380      	movs	r3, #128	; 0x80
 8005670:	6093      	str	r3, [r2, #8]
}
 8005672:	e19b      	b.n	80059ac <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	015a      	lsls	r2, r3, #5
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	4413      	add	r3, r2
 800567c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005686:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800568a:	d134      	bne.n	80056f6 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	015a      	lsls	r2, r3, #5
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	4413      	add	r3, r2
 8005694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	0151      	lsls	r1, r2, #5
 800569e:	69ba      	ldr	r2, [r7, #24]
 80056a0:	440a      	add	r2, r1
 80056a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056a6:	f043 0302 	orr.w	r3, r3, #2
 80056aa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	697a      	ldr	r2, [r7, #20]
 80056b2:	b2d2      	uxtb	r2, r2
 80056b4:	4611      	mov	r1, r2
 80056b6:	4618      	mov	r0, r3
 80056b8:	f003 fab1 	bl	8008c1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	015a      	lsls	r2, r3, #5
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	4413      	add	r3, r2
 80056c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056c8:	461a      	mov	r2, r3
 80056ca:	2310      	movs	r3, #16
 80056cc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	015a      	lsls	r2, r3, #5
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	4413      	add	r3, r2
 80056d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056da:	461a      	mov	r2, r3
 80056dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	212c      	movs	r1, #44	; 0x2c
 80056e8:	fb01 f303 	mul.w	r3, r1, r3
 80056ec:	4413      	add	r3, r2
 80056ee:	3361      	adds	r3, #97	; 0x61
 80056f0:	2208      	movs	r2, #8
 80056f2:	701a      	strb	r2, [r3, #0]
}
 80056f4:	e15a      	b.n	80059ac <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	015a      	lsls	r2, r3, #5
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	4413      	add	r3, r2
 80056fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	f003 0302 	and.w	r3, r3, #2
 8005708:	2b02      	cmp	r3, #2
 800570a:	f040 814f 	bne.w	80059ac <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	015a      	lsls	r2, r3, #5
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	4413      	add	r3, r2
 8005716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	697a      	ldr	r2, [r7, #20]
 800571e:	0151      	lsls	r1, r2, #5
 8005720:	69ba      	ldr	r2, [r7, #24]
 8005722:	440a      	add	r2, r1
 8005724:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005728:	f023 0302 	bic.w	r3, r3, #2
 800572c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	212c      	movs	r1, #44	; 0x2c
 8005734:	fb01 f303 	mul.w	r3, r1, r3
 8005738:	4413      	add	r3, r2
 800573a:	3361      	adds	r3, #97	; 0x61
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d17d      	bne.n	800583e <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	212c      	movs	r1, #44	; 0x2c
 8005748:	fb01 f303 	mul.w	r3, r1, r3
 800574c:	4413      	add	r3, r2
 800574e:	3360      	adds	r3, #96	; 0x60
 8005750:	2201      	movs	r2, #1
 8005752:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	212c      	movs	r1, #44	; 0x2c
 800575a:	fb01 f303 	mul.w	r3, r1, r3
 800575e:	4413      	add	r3, r2
 8005760:	333f      	adds	r3, #63	; 0x3f
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	2b02      	cmp	r3, #2
 8005766:	d00a      	beq.n	800577e <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	212c      	movs	r1, #44	; 0x2c
 800576e:	fb01 f303 	mul.w	r3, r1, r3
 8005772:	4413      	add	r3, r2
 8005774:	333f      	adds	r3, #63	; 0x3f
 8005776:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005778:	2b03      	cmp	r3, #3
 800577a:	f040 8100 	bne.w	800597e <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d113      	bne.n	80057ae <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	212c      	movs	r1, #44	; 0x2c
 800578c:	fb01 f303 	mul.w	r3, r1, r3
 8005790:	4413      	add	r3, r2
 8005792:	3355      	adds	r3, #85	; 0x55
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	f083 0301 	eor.w	r3, r3, #1
 800579a:	b2d8      	uxtb	r0, r3
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	212c      	movs	r1, #44	; 0x2c
 80057a2:	fb01 f303 	mul.w	r3, r1, r3
 80057a6:	4413      	add	r3, r2
 80057a8:	3355      	adds	r3, #85	; 0x55
 80057aa:	4602      	mov	r2, r0
 80057ac:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	f040 80e3 	bne.w	800597e <HCD_HC_OUT_IRQHandler+0x7cc>
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	212c      	movs	r1, #44	; 0x2c
 80057be:	fb01 f303 	mul.w	r3, r1, r3
 80057c2:	4413      	add	r3, r2
 80057c4:	334c      	adds	r3, #76	; 0x4c
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	f000 80d8 	beq.w	800597e <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	212c      	movs	r1, #44	; 0x2c
 80057d4:	fb01 f303 	mul.w	r3, r1, r3
 80057d8:	4413      	add	r3, r2
 80057da:	334c      	adds	r3, #76	; 0x4c
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	6879      	ldr	r1, [r7, #4]
 80057e0:	697a      	ldr	r2, [r7, #20]
 80057e2:	202c      	movs	r0, #44	; 0x2c
 80057e4:	fb00 f202 	mul.w	r2, r0, r2
 80057e8:	440a      	add	r2, r1
 80057ea:	3240      	adds	r2, #64	; 0x40
 80057ec:	8812      	ldrh	r2, [r2, #0]
 80057ee:	4413      	add	r3, r2
 80057f0:	3b01      	subs	r3, #1
 80057f2:	6879      	ldr	r1, [r7, #4]
 80057f4:	697a      	ldr	r2, [r7, #20]
 80057f6:	202c      	movs	r0, #44	; 0x2c
 80057f8:	fb00 f202 	mul.w	r2, r0, r2
 80057fc:	440a      	add	r2, r1
 80057fe:	3240      	adds	r2, #64	; 0x40
 8005800:	8812      	ldrh	r2, [r2, #0]
 8005802:	fbb3 f3f2 	udiv	r3, r3, r2
 8005806:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f003 0301 	and.w	r3, r3, #1
 800580e:	2b00      	cmp	r3, #0
 8005810:	f000 80b5 	beq.w	800597e <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	212c      	movs	r1, #44	; 0x2c
 800581a:	fb01 f303 	mul.w	r3, r1, r3
 800581e:	4413      	add	r3, r2
 8005820:	3355      	adds	r3, #85	; 0x55
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	f083 0301 	eor.w	r3, r3, #1
 8005828:	b2d8      	uxtb	r0, r3
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	212c      	movs	r1, #44	; 0x2c
 8005830:	fb01 f303 	mul.w	r3, r1, r3
 8005834:	4413      	add	r3, r2
 8005836:	3355      	adds	r3, #85	; 0x55
 8005838:	4602      	mov	r2, r0
 800583a:	701a      	strb	r2, [r3, #0]
 800583c:	e09f      	b.n	800597e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	212c      	movs	r1, #44	; 0x2c
 8005844:	fb01 f303 	mul.w	r3, r1, r3
 8005848:	4413      	add	r3, r2
 800584a:	3361      	adds	r3, #97	; 0x61
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	2b03      	cmp	r3, #3
 8005850:	d109      	bne.n	8005866 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	212c      	movs	r1, #44	; 0x2c
 8005858:	fb01 f303 	mul.w	r3, r1, r3
 800585c:	4413      	add	r3, r2
 800585e:	3360      	adds	r3, #96	; 0x60
 8005860:	2202      	movs	r2, #2
 8005862:	701a      	strb	r2, [r3, #0]
 8005864:	e08b      	b.n	800597e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	212c      	movs	r1, #44	; 0x2c
 800586c:	fb01 f303 	mul.w	r3, r1, r3
 8005870:	4413      	add	r3, r2
 8005872:	3361      	adds	r3, #97	; 0x61
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	2b04      	cmp	r3, #4
 8005878:	d109      	bne.n	800588e <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	212c      	movs	r1, #44	; 0x2c
 8005880:	fb01 f303 	mul.w	r3, r1, r3
 8005884:	4413      	add	r3, r2
 8005886:	3360      	adds	r3, #96	; 0x60
 8005888:	2202      	movs	r2, #2
 800588a:	701a      	strb	r2, [r3, #0]
 800588c:	e077      	b.n	800597e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	212c      	movs	r1, #44	; 0x2c
 8005894:	fb01 f303 	mul.w	r3, r1, r3
 8005898:	4413      	add	r3, r2
 800589a:	3361      	adds	r3, #97	; 0x61
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	2b05      	cmp	r3, #5
 80058a0:	d109      	bne.n	80058b6 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	212c      	movs	r1, #44	; 0x2c
 80058a8:	fb01 f303 	mul.w	r3, r1, r3
 80058ac:	4413      	add	r3, r2
 80058ae:	3360      	adds	r3, #96	; 0x60
 80058b0:	2205      	movs	r2, #5
 80058b2:	701a      	strb	r2, [r3, #0]
 80058b4:	e063      	b.n	800597e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	212c      	movs	r1, #44	; 0x2c
 80058bc:	fb01 f303 	mul.w	r3, r1, r3
 80058c0:	4413      	add	r3, r2
 80058c2:	3361      	adds	r3, #97	; 0x61
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	2b06      	cmp	r3, #6
 80058c8:	d009      	beq.n	80058de <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	212c      	movs	r1, #44	; 0x2c
 80058d0:	fb01 f303 	mul.w	r3, r1, r3
 80058d4:	4413      	add	r3, r2
 80058d6:	3361      	adds	r3, #97	; 0x61
 80058d8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80058da:	2b08      	cmp	r3, #8
 80058dc:	d14f      	bne.n	800597e <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	212c      	movs	r1, #44	; 0x2c
 80058e4:	fb01 f303 	mul.w	r3, r1, r3
 80058e8:	4413      	add	r3, r2
 80058ea:	335c      	adds	r3, #92	; 0x5c
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	1c5a      	adds	r2, r3, #1
 80058f0:	6879      	ldr	r1, [r7, #4]
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	202c      	movs	r0, #44	; 0x2c
 80058f6:	fb00 f303 	mul.w	r3, r0, r3
 80058fa:	440b      	add	r3, r1
 80058fc:	335c      	adds	r3, #92	; 0x5c
 80058fe:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	212c      	movs	r1, #44	; 0x2c
 8005906:	fb01 f303 	mul.w	r3, r1, r3
 800590a:	4413      	add	r3, r2
 800590c:	335c      	adds	r3, #92	; 0x5c
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2b02      	cmp	r3, #2
 8005912:	d912      	bls.n	800593a <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	212c      	movs	r1, #44	; 0x2c
 800591a:	fb01 f303 	mul.w	r3, r1, r3
 800591e:	4413      	add	r3, r2
 8005920:	335c      	adds	r3, #92	; 0x5c
 8005922:	2200      	movs	r2, #0
 8005924:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	212c      	movs	r1, #44	; 0x2c
 800592c:	fb01 f303 	mul.w	r3, r1, r3
 8005930:	4413      	add	r3, r2
 8005932:	3360      	adds	r3, #96	; 0x60
 8005934:	2204      	movs	r2, #4
 8005936:	701a      	strb	r2, [r3, #0]
 8005938:	e021      	b.n	800597e <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	212c      	movs	r1, #44	; 0x2c
 8005940:	fb01 f303 	mul.w	r3, r1, r3
 8005944:	4413      	add	r3, r2
 8005946:	3360      	adds	r3, #96	; 0x60
 8005948:	2202      	movs	r2, #2
 800594a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	015a      	lsls	r2, r3, #5
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	4413      	add	r3, r2
 8005954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005962:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800596a:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	015a      	lsls	r2, r3, #5
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	4413      	add	r3, r2
 8005974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005978:	461a      	mov	r2, r3
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	015a      	lsls	r2, r3, #5
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	4413      	add	r3, r2
 8005986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800598a:	461a      	mov	r2, r3
 800598c:	2302      	movs	r3, #2
 800598e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	b2d9      	uxtb	r1, r3
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	202c      	movs	r0, #44	; 0x2c
 800599a:	fb00 f303 	mul.w	r3, r0, r3
 800599e:	4413      	add	r3, r2
 80059a0:	3360      	adds	r3, #96	; 0x60
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	461a      	mov	r2, r3
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f007 ffe0 	bl	800d96c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80059ac:	bf00      	nop
 80059ae:	3720      	adds	r7, #32
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b08a      	sub	sp, #40	; 0x28
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c4:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	6a1b      	ldr	r3, [r3, #32]
 80059cc:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	f003 030f 	and.w	r3, r3, #15
 80059d4:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	0c5b      	lsrs	r3, r3, #17
 80059da:	f003 030f 	and.w	r3, r3, #15
 80059de:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	091b      	lsrs	r3, r3, #4
 80059e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059e8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	d004      	beq.n	80059fa <HCD_RXQLVL_IRQHandler+0x46>
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	2b05      	cmp	r3, #5
 80059f4:	f000 80a9 	beq.w	8005b4a <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80059f8:	e0aa      	b.n	8005b50 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	f000 80a6 	beq.w	8005b4e <HCD_RXQLVL_IRQHandler+0x19a>
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	212c      	movs	r1, #44	; 0x2c
 8005a08:	fb01 f303 	mul.w	r3, r1, r3
 8005a0c:	4413      	add	r3, r2
 8005a0e:	3344      	adds	r3, #68	; 0x44
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	f000 809b 	beq.w	8005b4e <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	212c      	movs	r1, #44	; 0x2c
 8005a1e:	fb01 f303 	mul.w	r3, r1, r3
 8005a22:	4413      	add	r3, r2
 8005a24:	3350      	adds	r3, #80	; 0x50
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	441a      	add	r2, r3
 8005a2c:	6879      	ldr	r1, [r7, #4]
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	202c      	movs	r0, #44	; 0x2c
 8005a32:	fb00 f303 	mul.w	r3, r0, r3
 8005a36:	440b      	add	r3, r1
 8005a38:	334c      	adds	r3, #76	; 0x4c
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d87a      	bhi.n	8005b36 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6818      	ldr	r0, [r3, #0]
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	212c      	movs	r1, #44	; 0x2c
 8005a4a:	fb01 f303 	mul.w	r3, r1, r3
 8005a4e:	4413      	add	r3, r2
 8005a50:	3344      	adds	r3, #68	; 0x44
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	693a      	ldr	r2, [r7, #16]
 8005a56:	b292      	uxth	r2, r2
 8005a58:	4619      	mov	r1, r3
 8005a5a:	f002 fc59 	bl	8008310 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	212c      	movs	r1, #44	; 0x2c
 8005a64:	fb01 f303 	mul.w	r3, r1, r3
 8005a68:	4413      	add	r3, r2
 8005a6a:	3344      	adds	r3, #68	; 0x44
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	441a      	add	r2, r3
 8005a72:	6879      	ldr	r1, [r7, #4]
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	202c      	movs	r0, #44	; 0x2c
 8005a78:	fb00 f303 	mul.w	r3, r0, r3
 8005a7c:	440b      	add	r3, r1
 8005a7e:	3344      	adds	r3, #68	; 0x44
 8005a80:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	212c      	movs	r1, #44	; 0x2c
 8005a88:	fb01 f303 	mul.w	r3, r1, r3
 8005a8c:	4413      	add	r3, r2
 8005a8e:	3350      	adds	r3, #80	; 0x50
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	441a      	add	r2, r3
 8005a96:	6879      	ldr	r1, [r7, #4]
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	202c      	movs	r0, #44	; 0x2c
 8005a9c:	fb00 f303 	mul.w	r3, r0, r3
 8005aa0:	440b      	add	r3, r1
 8005aa2:	3350      	adds	r3, #80	; 0x50
 8005aa4:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	015a      	lsls	r2, r3, #5
 8005aaa:	6a3b      	ldr	r3, [r7, #32]
 8005aac:	4413      	add	r3, r2
 8005aae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	0cdb      	lsrs	r3, r3, #19
 8005ab6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005aba:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	212c      	movs	r1, #44	; 0x2c
 8005ac2:	fb01 f303 	mul.w	r3, r1, r3
 8005ac6:	4413      	add	r3, r2
 8005ac8:	3340      	adds	r3, #64	; 0x40
 8005aca:	881b      	ldrh	r3, [r3, #0]
 8005acc:	461a      	mov	r2, r3
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d13c      	bne.n	8005b4e <HCD_RXQLVL_IRQHandler+0x19a>
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d039      	beq.n	8005b4e <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	015a      	lsls	r2, r3, #5
 8005ade:	6a3b      	ldr	r3, [r7, #32]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005af0:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005af8:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	015a      	lsls	r2, r3, #5
 8005afe:	6a3b      	ldr	r3, [r7, #32]
 8005b00:	4413      	add	r3, r2
 8005b02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b06:	461a      	mov	r2, r3
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	212c      	movs	r1, #44	; 0x2c
 8005b12:	fb01 f303 	mul.w	r3, r1, r3
 8005b16:	4413      	add	r3, r2
 8005b18:	3354      	adds	r3, #84	; 0x54
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	f083 0301 	eor.w	r3, r3, #1
 8005b20:	b2d8      	uxtb	r0, r3
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	212c      	movs	r1, #44	; 0x2c
 8005b28:	fb01 f303 	mul.w	r3, r1, r3
 8005b2c:	4413      	add	r3, r2
 8005b2e:	3354      	adds	r3, #84	; 0x54
 8005b30:	4602      	mov	r2, r0
 8005b32:	701a      	strb	r2, [r3, #0]
      break;
 8005b34:	e00b      	b.n	8005b4e <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	212c      	movs	r1, #44	; 0x2c
 8005b3c:	fb01 f303 	mul.w	r3, r1, r3
 8005b40:	4413      	add	r3, r2
 8005b42:	3360      	adds	r3, #96	; 0x60
 8005b44:	2204      	movs	r2, #4
 8005b46:	701a      	strb	r2, [r3, #0]
      break;
 8005b48:	e001      	b.n	8005b4e <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8005b4a:	bf00      	nop
 8005b4c:	e000      	b.n	8005b50 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8005b4e:	bf00      	nop
  }
}
 8005b50:	bf00      	nop
 8005b52:	3728      	adds	r7, #40	; 0x28
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b086      	sub	sp, #24
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005b84:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f003 0302 	and.w	r3, r3, #2
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d10b      	bne.n	8005ba8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f003 0301 	and.w	r3, r3, #1
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d102      	bne.n	8005ba0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f007 feca 	bl	800d934 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	f043 0302 	orr.w	r3, r3, #2
 8005ba6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f003 0308 	and.w	r3, r3, #8
 8005bae:	2b08      	cmp	r3, #8
 8005bb0:	d132      	bne.n	8005c18 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	f043 0308 	orr.w	r3, r3, #8
 8005bb8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f003 0304 	and.w	r3, r3, #4
 8005bc0:	2b04      	cmp	r3, #4
 8005bc2:	d126      	bne.n	8005c12 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	699b      	ldr	r3, [r3, #24]
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	d113      	bne.n	8005bf4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005bd2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005bd6:	d106      	bne.n	8005be6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2102      	movs	r1, #2
 8005bde:	4618      	mov	r0, r3
 8005be0:	f002 fcf6 	bl	80085d0 <USB_InitFSLSPClkSel>
 8005be4:	e011      	b.n	8005c0a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2101      	movs	r1, #1
 8005bec:	4618      	mov	r0, r3
 8005bee:	f002 fcef 	bl	80085d0 <USB_InitFSLSPClkSel>
 8005bf2:	e00a      	b.n	8005c0a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d106      	bne.n	8005c0a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c02:	461a      	mov	r2, r3
 8005c04:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005c08:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f007 fec0 	bl	800d990 <HAL_HCD_PortEnabled_Callback>
 8005c10:	e002      	b.n	8005c18 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f007 feca 	bl	800d9ac <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f003 0320 	and.w	r3, r3, #32
 8005c1e:	2b20      	cmp	r3, #32
 8005c20:	d103      	bne.n	8005c2a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	f043 0320 	orr.w	r3, r3, #32
 8005c28:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005c30:	461a      	mov	r2, r3
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	6013      	str	r3, [r2, #0]
}
 8005c36:	bf00      	nop
 8005c38:	3718      	adds	r7, #24
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
	...

08005c40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d101      	bne.n	8005c52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e12b      	b.n	8005eaa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d106      	bne.n	8005c6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f7fb fed0 	bl	8001a0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2224      	movs	r2, #36	; 0x24
 8005c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f022 0201 	bic.w	r2, r2, #1
 8005c82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ca2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005ca4:	f001 f9fc 	bl	80070a0 <HAL_RCC_GetPCLK1Freq>
 8005ca8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	4a81      	ldr	r2, [pc, #516]	; (8005eb4 <HAL_I2C_Init+0x274>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d807      	bhi.n	8005cc4 <HAL_I2C_Init+0x84>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	4a80      	ldr	r2, [pc, #512]	; (8005eb8 <HAL_I2C_Init+0x278>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	bf94      	ite	ls
 8005cbc:	2301      	movls	r3, #1
 8005cbe:	2300      	movhi	r3, #0
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	e006      	b.n	8005cd2 <HAL_I2C_Init+0x92>
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	4a7d      	ldr	r2, [pc, #500]	; (8005ebc <HAL_I2C_Init+0x27c>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	bf94      	ite	ls
 8005ccc:	2301      	movls	r3, #1
 8005cce:	2300      	movhi	r3, #0
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d001      	beq.n	8005cda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e0e7      	b.n	8005eaa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	4a78      	ldr	r2, [pc, #480]	; (8005ec0 <HAL_I2C_Init+0x280>)
 8005cde:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce2:	0c9b      	lsrs	r3, r3, #18
 8005ce4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68ba      	ldr	r2, [r7, #8]
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	6a1b      	ldr	r3, [r3, #32]
 8005d00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	4a6a      	ldr	r2, [pc, #424]	; (8005eb4 <HAL_I2C_Init+0x274>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d802      	bhi.n	8005d14 <HAL_I2C_Init+0xd4>
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	3301      	adds	r3, #1
 8005d12:	e009      	b.n	8005d28 <HAL_I2C_Init+0xe8>
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005d1a:	fb02 f303 	mul.w	r3, r2, r3
 8005d1e:	4a69      	ldr	r2, [pc, #420]	; (8005ec4 <HAL_I2C_Init+0x284>)
 8005d20:	fba2 2303 	umull	r2, r3, r2, r3
 8005d24:	099b      	lsrs	r3, r3, #6
 8005d26:	3301      	adds	r3, #1
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	6812      	ldr	r2, [r2, #0]
 8005d2c:	430b      	orrs	r3, r1
 8005d2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	69db      	ldr	r3, [r3, #28]
 8005d36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005d3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	495c      	ldr	r1, [pc, #368]	; (8005eb4 <HAL_I2C_Init+0x274>)
 8005d44:	428b      	cmp	r3, r1
 8005d46:	d819      	bhi.n	8005d7c <HAL_I2C_Init+0x13c>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	1e59      	subs	r1, r3, #1
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	005b      	lsls	r3, r3, #1
 8005d52:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d56:	1c59      	adds	r1, r3, #1
 8005d58:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005d5c:	400b      	ands	r3, r1
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00a      	beq.n	8005d78 <HAL_I2C_Init+0x138>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	1e59      	subs	r1, r3, #1
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	005b      	lsls	r3, r3, #1
 8005d6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d70:	3301      	adds	r3, #1
 8005d72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d76:	e051      	b.n	8005e1c <HAL_I2C_Init+0x1dc>
 8005d78:	2304      	movs	r3, #4
 8005d7a:	e04f      	b.n	8005e1c <HAL_I2C_Init+0x1dc>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d111      	bne.n	8005da8 <HAL_I2C_Init+0x168>
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	1e58      	subs	r0, r3, #1
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6859      	ldr	r1, [r3, #4]
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	005b      	lsls	r3, r3, #1
 8005d90:	440b      	add	r3, r1
 8005d92:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d96:	3301      	adds	r3, #1
 8005d98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	bf0c      	ite	eq
 8005da0:	2301      	moveq	r3, #1
 8005da2:	2300      	movne	r3, #0
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	e012      	b.n	8005dce <HAL_I2C_Init+0x18e>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	1e58      	subs	r0, r3, #1
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6859      	ldr	r1, [r3, #4]
 8005db0:	460b      	mov	r3, r1
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	440b      	add	r3, r1
 8005db6:	0099      	lsls	r1, r3, #2
 8005db8:	440b      	add	r3, r1
 8005dba:	fbb0 f3f3 	udiv	r3, r0, r3
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	bf0c      	ite	eq
 8005dc8:	2301      	moveq	r3, #1
 8005dca:	2300      	movne	r3, #0
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d001      	beq.n	8005dd6 <HAL_I2C_Init+0x196>
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e022      	b.n	8005e1c <HAL_I2C_Init+0x1dc>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d10e      	bne.n	8005dfc <HAL_I2C_Init+0x1bc>
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	1e58      	subs	r0, r3, #1
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6859      	ldr	r1, [r3, #4]
 8005de6:	460b      	mov	r3, r1
 8005de8:	005b      	lsls	r3, r3, #1
 8005dea:	440b      	add	r3, r1
 8005dec:	fbb0 f3f3 	udiv	r3, r0, r3
 8005df0:	3301      	adds	r3, #1
 8005df2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005df6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dfa:	e00f      	b.n	8005e1c <HAL_I2C_Init+0x1dc>
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	1e58      	subs	r0, r3, #1
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6859      	ldr	r1, [r3, #4]
 8005e04:	460b      	mov	r3, r1
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	440b      	add	r3, r1
 8005e0a:	0099      	lsls	r1, r3, #2
 8005e0c:	440b      	add	r3, r1
 8005e0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e12:	3301      	adds	r3, #1
 8005e14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e1c:	6879      	ldr	r1, [r7, #4]
 8005e1e:	6809      	ldr	r1, [r1, #0]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	69da      	ldr	r2, [r3, #28]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a1b      	ldr	r3, [r3, #32]
 8005e36:	431a      	orrs	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	430a      	orrs	r2, r1
 8005e3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005e4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	6911      	ldr	r1, [r2, #16]
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	68d2      	ldr	r2, [r2, #12]
 8005e56:	4311      	orrs	r1, r2
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	6812      	ldr	r2, [r2, #0]
 8005e5c:	430b      	orrs	r3, r1
 8005e5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	695a      	ldr	r2, [r3, #20]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	699b      	ldr	r3, [r3, #24]
 8005e72:	431a      	orrs	r2, r3
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	430a      	orrs	r2, r1
 8005e7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f042 0201 	orr.w	r2, r2, #1
 8005e8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2220      	movs	r2, #32
 8005e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3710      	adds	r7, #16
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	000186a0 	.word	0x000186a0
 8005eb8:	001e847f 	.word	0x001e847f
 8005ebc:	003d08ff 	.word	0x003d08ff
 8005ec0:	431bde83 	.word	0x431bde83
 8005ec4:	10624dd3 	.word	0x10624dd3

08005ec8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b088      	sub	sp, #32
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d101      	bne.n	8005eda <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e128      	b.n	800612c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d109      	bne.n	8005efa <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a90      	ldr	r2, [pc, #576]	; (8006134 <HAL_I2S_Init+0x26c>)
 8005ef2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f7fb fdd1 	bl	8001a9c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2202      	movs	r2, #2
 8005efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	69db      	ldr	r3, [r3, #28]
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	6812      	ldr	r2, [r2, #0]
 8005f0c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005f10:	f023 030f 	bic.w	r3, r3, #15
 8005f14:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	695b      	ldr	r3, [r3, #20]
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	d060      	beq.n	8005fe8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d102      	bne.n	8005f34 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005f2e:	2310      	movs	r3, #16
 8005f30:	617b      	str	r3, [r7, #20]
 8005f32:	e001      	b.n	8005f38 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005f34:	2320      	movs	r3, #32
 8005f36:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	2b20      	cmp	r3, #32
 8005f3e:	d802      	bhi.n	8005f46 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	005b      	lsls	r3, r3, #1
 8005f44:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005f46:	2001      	movs	r0, #1
 8005f48:	f001 f9e6 	bl	8007318 <HAL_RCCEx_GetPeriphCLKFreq>
 8005f4c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f56:	d125      	bne.n	8005fa4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d010      	beq.n	8005f82 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	4413      	add	r3, r2
 8005f70:	005b      	lsls	r3, r3, #1
 8005f72:	461a      	mov	r2, r3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	695b      	ldr	r3, [r3, #20]
 8005f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f7c:	3305      	adds	r3, #5
 8005f7e:	613b      	str	r3, [r7, #16]
 8005f80:	e01f      	b.n	8005fc2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	00db      	lsls	r3, r3, #3
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	4413      	add	r3, r2
 8005f92:	005b      	lsls	r3, r3, #1
 8005f94:	461a      	mov	r2, r3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	695b      	ldr	r3, [r3, #20]
 8005f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f9e:	3305      	adds	r3, #5
 8005fa0:	613b      	str	r3, [r7, #16]
 8005fa2:	e00e      	b.n	8005fc2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005fac:	4613      	mov	r3, r2
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	4413      	add	r3, r2
 8005fb2:	005b      	lsls	r3, r3, #1
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fbe:	3305      	adds	r3, #5
 8005fc0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	4a5c      	ldr	r2, [pc, #368]	; (8006138 <HAL_I2S_Init+0x270>)
 8005fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8005fca:	08db      	lsrs	r3, r3, #3
 8005fcc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	f003 0301 	and.w	r3, r3, #1
 8005fd4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005fd6:	693a      	ldr	r2, [r7, #16]
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	085b      	lsrs	r3, r3, #1
 8005fde:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	021b      	lsls	r3, r3, #8
 8005fe4:	61bb      	str	r3, [r7, #24]
 8005fe6:	e003      	b.n	8005ff0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005fe8:	2302      	movs	r3, #2
 8005fea:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005fec:	2300      	movs	r3, #0
 8005fee:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d902      	bls.n	8005ffc <HAL_I2S_Init+0x134>
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	2bff      	cmp	r3, #255	; 0xff
 8005ffa:	d907      	bls.n	800600c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006000:	f043 0210 	orr.w	r2, r3, #16
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e08f      	b.n	800612c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	691a      	ldr	r2, [r3, #16]
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	ea42 0103 	orr.w	r1, r2, r3
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	69fa      	ldr	r2, [r7, #28]
 800601c:	430a      	orrs	r2, r1
 800601e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	69db      	ldr	r3, [r3, #28]
 8006026:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800602a:	f023 030f 	bic.w	r3, r3, #15
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	6851      	ldr	r1, [r2, #4]
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	6892      	ldr	r2, [r2, #8]
 8006036:	4311      	orrs	r1, r2
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	68d2      	ldr	r2, [r2, #12]
 800603c:	4311      	orrs	r1, r2
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	6992      	ldr	r2, [r2, #24]
 8006042:	430a      	orrs	r2, r1
 8006044:	431a      	orrs	r2, r3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800604e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6a1b      	ldr	r3, [r3, #32]
 8006054:	2b01      	cmp	r3, #1
 8006056:	d161      	bne.n	800611c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4a38      	ldr	r2, [pc, #224]	; (800613c <HAL_I2S_Init+0x274>)
 800605c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a37      	ldr	r2, [pc, #220]	; (8006140 <HAL_I2S_Init+0x278>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d101      	bne.n	800606c <HAL_I2S_Init+0x1a4>
 8006068:	4b36      	ldr	r3, [pc, #216]	; (8006144 <HAL_I2S_Init+0x27c>)
 800606a:	e001      	b.n	8006070 <HAL_I2S_Init+0x1a8>
 800606c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006070:	69db      	ldr	r3, [r3, #28]
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	6812      	ldr	r2, [r2, #0]
 8006076:	4932      	ldr	r1, [pc, #200]	; (8006140 <HAL_I2S_Init+0x278>)
 8006078:	428a      	cmp	r2, r1
 800607a:	d101      	bne.n	8006080 <HAL_I2S_Init+0x1b8>
 800607c:	4a31      	ldr	r2, [pc, #196]	; (8006144 <HAL_I2S_Init+0x27c>)
 800607e:	e001      	b.n	8006084 <HAL_I2S_Init+0x1bc>
 8006080:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8006084:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006088:	f023 030f 	bic.w	r3, r3, #15
 800608c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a2b      	ldr	r2, [pc, #172]	; (8006140 <HAL_I2S_Init+0x278>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d101      	bne.n	800609c <HAL_I2S_Init+0x1d4>
 8006098:	4b2a      	ldr	r3, [pc, #168]	; (8006144 <HAL_I2S_Init+0x27c>)
 800609a:	e001      	b.n	80060a0 <HAL_I2S_Init+0x1d8>
 800609c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060a0:	2202      	movs	r2, #2
 80060a2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a25      	ldr	r2, [pc, #148]	; (8006140 <HAL_I2S_Init+0x278>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d101      	bne.n	80060b2 <HAL_I2S_Init+0x1ea>
 80060ae:	4b25      	ldr	r3, [pc, #148]	; (8006144 <HAL_I2S_Init+0x27c>)
 80060b0:	e001      	b.n	80060b6 <HAL_I2S_Init+0x1ee>
 80060b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060b6:	69db      	ldr	r3, [r3, #28]
 80060b8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060c2:	d003      	beq.n	80060cc <HAL_I2S_Init+0x204>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d103      	bne.n	80060d4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80060cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80060d0:	613b      	str	r3, [r7, #16]
 80060d2:	e001      	b.n	80060d8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80060d4:	2300      	movs	r3, #0
 80060d6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80060e2:	4313      	orrs	r3, r2
 80060e4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80060ec:	4313      	orrs	r3, r2
 80060ee:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	699b      	ldr	r3, [r3, #24]
 80060f4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80060f6:	4313      	orrs	r3, r2
 80060f8:	b29a      	uxth	r2, r3
 80060fa:	897b      	ldrh	r3, [r7, #10]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	b29b      	uxth	r3, r3
 8006100:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006104:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a0d      	ldr	r2, [pc, #52]	; (8006140 <HAL_I2S_Init+0x278>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d101      	bne.n	8006114 <HAL_I2S_Init+0x24c>
 8006110:	4b0c      	ldr	r3, [pc, #48]	; (8006144 <HAL_I2S_Init+0x27c>)
 8006112:	e001      	b.n	8006118 <HAL_I2S_Init+0x250>
 8006114:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006118:	897a      	ldrh	r2, [r7, #10]
 800611a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2201      	movs	r2, #1
 8006126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800612a:	2300      	movs	r3, #0
}
 800612c:	4618      	mov	r0, r3
 800612e:	3720      	adds	r7, #32
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}
 8006134:	0800623f 	.word	0x0800623f
 8006138:	cccccccd 	.word	0xcccccccd
 800613c:	08006355 	.word	0x08006355
 8006140:	40003800 	.word	0x40003800
 8006144:	40003400 	.word	0x40003400

08006148 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8006150:	bf00      	nop
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8006164:	bf00      	nop
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006178:	bf00      	nop
 800617a:	370c      	adds	r7, #12
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006190:	881a      	ldrh	r2, [r3, #0]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619c:	1c9a      	adds	r2, r3, #2
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	3b01      	subs	r3, #1
 80061aa:	b29a      	uxth	r2, r3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d10e      	bne.n	80061d8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	685a      	ldr	r2, [r3, #4]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80061c8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2201      	movs	r2, #1
 80061ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f7ff ffb8 	bl	8006148 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80061d8:	bf00      	nop
 80061da:	3708      	adds	r7, #8
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	68da      	ldr	r2, [r3, #12]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f2:	b292      	uxth	r2, r2
 80061f4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061fa:	1c9a      	adds	r2, r3, #2
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006204:	b29b      	uxth	r3, r3
 8006206:	3b01      	subs	r3, #1
 8006208:	b29a      	uxth	r2, r3
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006212:	b29b      	uxth	r3, r3
 8006214:	2b00      	cmp	r3, #0
 8006216:	d10e      	bne.n	8006236 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	685a      	ldr	r2, [r3, #4]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006226:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f7ff ff93 	bl	800615c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006236:	bf00      	nop
 8006238:	3708      	adds	r7, #8
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800623e:	b580      	push	{r7, lr}
 8006240:	b086      	sub	sp, #24
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006254:	b2db      	uxtb	r3, r3
 8006256:	2b04      	cmp	r3, #4
 8006258:	d13a      	bne.n	80062d0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	f003 0301 	and.w	r3, r3, #1
 8006260:	2b01      	cmp	r3, #1
 8006262:	d109      	bne.n	8006278 <I2S_IRQHandler+0x3a>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800626e:	2b40      	cmp	r3, #64	; 0x40
 8006270:	d102      	bne.n	8006278 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f7ff ffb4 	bl	80061e0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800627e:	2b40      	cmp	r3, #64	; 0x40
 8006280:	d126      	bne.n	80062d0 <I2S_IRQHandler+0x92>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	f003 0320 	and.w	r3, r3, #32
 800628c:	2b20      	cmp	r3, #32
 800628e:	d11f      	bne.n	80062d0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	685a      	ldr	r2, [r3, #4]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800629e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80062a0:	2300      	movs	r3, #0
 80062a2:	613b      	str	r3, [r7, #16]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	613b      	str	r3, [r7, #16]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	613b      	str	r3, [r7, #16]
 80062b4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2201      	movs	r2, #1
 80062ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062c2:	f043 0202 	orr.w	r2, r3, #2
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f7ff ff50 	bl	8006170 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	2b03      	cmp	r3, #3
 80062da:	d136      	bne.n	800634a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	f003 0302 	and.w	r3, r3, #2
 80062e2:	2b02      	cmp	r3, #2
 80062e4:	d109      	bne.n	80062fa <I2S_IRQHandler+0xbc>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062f0:	2b80      	cmp	r3, #128	; 0x80
 80062f2:	d102      	bne.n	80062fa <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f7ff ff45 	bl	8006184 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	f003 0308 	and.w	r3, r3, #8
 8006300:	2b08      	cmp	r3, #8
 8006302:	d122      	bne.n	800634a <I2S_IRQHandler+0x10c>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	f003 0320 	and.w	r3, r3, #32
 800630e:	2b20      	cmp	r3, #32
 8006310:	d11b      	bne.n	800634a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	685a      	ldr	r2, [r3, #4]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006320:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006322:	2300      	movs	r3, #0
 8006324:	60fb      	str	r3, [r7, #12]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	60fb      	str	r3, [r7, #12]
 800632e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800633c:	f043 0204 	orr.w	r2, r3, #4
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f7ff ff13 	bl	8006170 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800634a:	bf00      	nop
 800634c:	3718      	adds	r7, #24
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
	...

08006354 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b088      	sub	sp, #32
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4aa2      	ldr	r2, [pc, #648]	; (80065f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d101      	bne.n	8006372 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800636e:	4ba2      	ldr	r3, [pc, #648]	; (80065f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006370:	e001      	b.n	8006376 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006372:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a9b      	ldr	r2, [pc, #620]	; (80065f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d101      	bne.n	8006390 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800638c:	4b9a      	ldr	r3, [pc, #616]	; (80065f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800638e:	e001      	b.n	8006394 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006390:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063a0:	d004      	beq.n	80063ac <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	f040 8099 	bne.w	80064de <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	f003 0302 	and.w	r3, r3, #2
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	d107      	bne.n	80063c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d002      	beq.n	80063c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 f925 	bl	8006610 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	f003 0301 	and.w	r3, r3, #1
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d107      	bne.n	80063e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d002      	beq.n	80063e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 f9c8 	bl	8006770 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e6:	2b40      	cmp	r3, #64	; 0x40
 80063e8:	d13a      	bne.n	8006460 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	f003 0320 	and.w	r3, r3, #32
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d035      	beq.n	8006460 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a7e      	ldr	r2, [pc, #504]	; (80065f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d101      	bne.n	8006402 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80063fe:	4b7e      	ldr	r3, [pc, #504]	; (80065f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006400:	e001      	b.n	8006406 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006402:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006406:	685a      	ldr	r2, [r3, #4]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4979      	ldr	r1, [pc, #484]	; (80065f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800640e:	428b      	cmp	r3, r1
 8006410:	d101      	bne.n	8006416 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006412:	4b79      	ldr	r3, [pc, #484]	; (80065f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006414:	e001      	b.n	800641a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006416:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800641a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800641e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	685a      	ldr	r2, [r3, #4]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800642e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006430:	2300      	movs	r3, #0
 8006432:	60fb      	str	r3, [r7, #12]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	60fb      	str	r3, [r7, #12]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	60fb      	str	r3, [r7, #12]
 8006444:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2201      	movs	r2, #1
 800644a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006452:	f043 0202 	orr.w	r2, r3, #2
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f7ff fe88 	bl	8006170 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	f003 0308 	and.w	r3, r3, #8
 8006466:	2b08      	cmp	r3, #8
 8006468:	f040 80be 	bne.w	80065e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	f003 0320 	and.w	r3, r3, #32
 8006472:	2b00      	cmp	r3, #0
 8006474:	f000 80b8 	beq.w	80065e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	685a      	ldr	r2, [r3, #4]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006486:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a59      	ldr	r2, [pc, #356]	; (80065f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d101      	bne.n	8006496 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006492:	4b59      	ldr	r3, [pc, #356]	; (80065f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006494:	e001      	b.n	800649a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006496:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800649a:	685a      	ldr	r2, [r3, #4]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4954      	ldr	r1, [pc, #336]	; (80065f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80064a2:	428b      	cmp	r3, r1
 80064a4:	d101      	bne.n	80064aa <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80064a6:	4b54      	ldr	r3, [pc, #336]	; (80065f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80064a8:	e001      	b.n	80064ae <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80064aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80064b2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80064b4:	2300      	movs	r3, #0
 80064b6:	60bb      	str	r3, [r7, #8]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	60bb      	str	r3, [r7, #8]
 80064c0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2201      	movs	r2, #1
 80064c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ce:	f043 0204 	orr.w	r2, r3, #4
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f7ff fe4a 	bl	8006170 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80064dc:	e084      	b.n	80065e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	f003 0302 	and.w	r3, r3, #2
 80064e4:	2b02      	cmp	r3, #2
 80064e6:	d107      	bne.n	80064f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d002      	beq.n	80064f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 f8be 	bl	8006674 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	f003 0301 	and.w	r3, r3, #1
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d107      	bne.n	8006512 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006508:	2b00      	cmp	r3, #0
 800650a:	d002      	beq.n	8006512 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 f8fd 	bl	800670c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006518:	2b40      	cmp	r3, #64	; 0x40
 800651a:	d12f      	bne.n	800657c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	f003 0320 	and.w	r3, r3, #32
 8006522:	2b00      	cmp	r3, #0
 8006524:	d02a      	beq.n	800657c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	685a      	ldr	r2, [r3, #4]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006534:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a2e      	ldr	r2, [pc, #184]	; (80065f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d101      	bne.n	8006544 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006540:	4b2d      	ldr	r3, [pc, #180]	; (80065f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006542:	e001      	b.n	8006548 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006544:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006548:	685a      	ldr	r2, [r3, #4]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4929      	ldr	r1, [pc, #164]	; (80065f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006550:	428b      	cmp	r3, r1
 8006552:	d101      	bne.n	8006558 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006554:	4b28      	ldr	r3, [pc, #160]	; (80065f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006556:	e001      	b.n	800655c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006558:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800655c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006560:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2201      	movs	r2, #1
 8006566:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800656e:	f043 0202 	orr.w	r2, r3, #2
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f7ff fdfa 	bl	8006170 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	f003 0308 	and.w	r3, r3, #8
 8006582:	2b08      	cmp	r3, #8
 8006584:	d131      	bne.n	80065ea <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	f003 0320 	and.w	r3, r3, #32
 800658c:	2b00      	cmp	r3, #0
 800658e:	d02c      	beq.n	80065ea <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a17      	ldr	r2, [pc, #92]	; (80065f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d101      	bne.n	800659e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800659a:	4b17      	ldr	r3, [pc, #92]	; (80065f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800659c:	e001      	b.n	80065a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800659e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065a2:	685a      	ldr	r2, [r3, #4]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4912      	ldr	r1, [pc, #72]	; (80065f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80065aa:	428b      	cmp	r3, r1
 80065ac:	d101      	bne.n	80065b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80065ae:	4b12      	ldr	r3, [pc, #72]	; (80065f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80065b0:	e001      	b.n	80065b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80065b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065b6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80065ba:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	685a      	ldr	r2, [r3, #4]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80065ca:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065d8:	f043 0204 	orr.w	r2, r3, #4
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f7ff fdc5 	bl	8006170 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80065e6:	e000      	b.n	80065ea <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80065e8:	bf00      	nop
}
 80065ea:	bf00      	nop
 80065ec:	3720      	adds	r7, #32
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	bf00      	nop
 80065f4:	40003800 	.word	0x40003800
 80065f8:	40003400 	.word	0x40003400

080065fc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006604:	bf00      	nop
 8006606:	370c      	adds	r7, #12
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b082      	sub	sp, #8
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661c:	1c99      	adds	r1, r3, #2
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	6251      	str	r1, [r2, #36]	; 0x24
 8006622:	881a      	ldrh	r2, [r3, #0]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800662e:	b29b      	uxth	r3, r3
 8006630:	3b01      	subs	r3, #1
 8006632:	b29a      	uxth	r2, r3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800663c:	b29b      	uxth	r3, r3
 800663e:	2b00      	cmp	r3, #0
 8006640:	d113      	bne.n	800666a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	685a      	ldr	r2, [r3, #4]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006650:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006656:	b29b      	uxth	r3, r3
 8006658:	2b00      	cmp	r3, #0
 800665a:	d106      	bne.n	800666a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f7ff ffc9 	bl	80065fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800666a:	bf00      	nop
 800666c:	3708      	adds	r7, #8
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
	...

08006674 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b082      	sub	sp, #8
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006680:	1c99      	adds	r1, r3, #2
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	6251      	str	r1, [r2, #36]	; 0x24
 8006686:	8819      	ldrh	r1, [r3, #0]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a1d      	ldr	r2, [pc, #116]	; (8006704 <I2SEx_TxISR_I2SExt+0x90>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d101      	bne.n	8006696 <I2SEx_TxISR_I2SExt+0x22>
 8006692:	4b1d      	ldr	r3, [pc, #116]	; (8006708 <I2SEx_TxISR_I2SExt+0x94>)
 8006694:	e001      	b.n	800669a <I2SEx_TxISR_I2SExt+0x26>
 8006696:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800669a:	460a      	mov	r2, r1
 800669c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	3b01      	subs	r3, #1
 80066a6:	b29a      	uxth	r2, r3
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d121      	bne.n	80066fa <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a12      	ldr	r2, [pc, #72]	; (8006704 <I2SEx_TxISR_I2SExt+0x90>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d101      	bne.n	80066c4 <I2SEx_TxISR_I2SExt+0x50>
 80066c0:	4b11      	ldr	r3, [pc, #68]	; (8006708 <I2SEx_TxISR_I2SExt+0x94>)
 80066c2:	e001      	b.n	80066c8 <I2SEx_TxISR_I2SExt+0x54>
 80066c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066c8:	685a      	ldr	r2, [r3, #4]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	490d      	ldr	r1, [pc, #52]	; (8006704 <I2SEx_TxISR_I2SExt+0x90>)
 80066d0:	428b      	cmp	r3, r1
 80066d2:	d101      	bne.n	80066d8 <I2SEx_TxISR_I2SExt+0x64>
 80066d4:	4b0c      	ldr	r3, [pc, #48]	; (8006708 <I2SEx_TxISR_I2SExt+0x94>)
 80066d6:	e001      	b.n	80066dc <I2SEx_TxISR_I2SExt+0x68>
 80066d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066dc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80066e0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d106      	bne.n	80066fa <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f7ff ff81 	bl	80065fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80066fa:	bf00      	nop
 80066fc:	3708      	adds	r7, #8
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	40003800 	.word	0x40003800
 8006708:	40003400 	.word	0x40003400

0800670c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	68d8      	ldr	r0, [r3, #12]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800671e:	1c99      	adds	r1, r3, #2
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006724:	b282      	uxth	r2, r0
 8006726:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800672c:	b29b      	uxth	r3, r3
 800672e:	3b01      	subs	r3, #1
 8006730:	b29a      	uxth	r2, r3
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800673a:	b29b      	uxth	r3, r3
 800673c:	2b00      	cmp	r3, #0
 800673e:	d113      	bne.n	8006768 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	685a      	ldr	r2, [r3, #4]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800674e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006754:	b29b      	uxth	r3, r3
 8006756:	2b00      	cmp	r3, #0
 8006758:	d106      	bne.n	8006768 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2201      	movs	r2, #1
 800675e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f7ff ff4a 	bl	80065fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006768:	bf00      	nop
 800676a:	3708      	adds	r7, #8
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a20      	ldr	r2, [pc, #128]	; (8006800 <I2SEx_RxISR_I2SExt+0x90>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d101      	bne.n	8006786 <I2SEx_RxISR_I2SExt+0x16>
 8006782:	4b20      	ldr	r3, [pc, #128]	; (8006804 <I2SEx_RxISR_I2SExt+0x94>)
 8006784:	e001      	b.n	800678a <I2SEx_RxISR_I2SExt+0x1a>
 8006786:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800678a:	68d8      	ldr	r0, [r3, #12]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006790:	1c99      	adds	r1, r3, #2
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006796:	b282      	uxth	r2, r0
 8006798:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800679e:	b29b      	uxth	r3, r3
 80067a0:	3b01      	subs	r3, #1
 80067a2:	b29a      	uxth	r2, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d121      	bne.n	80067f6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a12      	ldr	r2, [pc, #72]	; (8006800 <I2SEx_RxISR_I2SExt+0x90>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d101      	bne.n	80067c0 <I2SEx_RxISR_I2SExt+0x50>
 80067bc:	4b11      	ldr	r3, [pc, #68]	; (8006804 <I2SEx_RxISR_I2SExt+0x94>)
 80067be:	e001      	b.n	80067c4 <I2SEx_RxISR_I2SExt+0x54>
 80067c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067c4:	685a      	ldr	r2, [r3, #4]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	490d      	ldr	r1, [pc, #52]	; (8006800 <I2SEx_RxISR_I2SExt+0x90>)
 80067cc:	428b      	cmp	r3, r1
 80067ce:	d101      	bne.n	80067d4 <I2SEx_RxISR_I2SExt+0x64>
 80067d0:	4b0c      	ldr	r3, [pc, #48]	; (8006804 <I2SEx_RxISR_I2SExt+0x94>)
 80067d2:	e001      	b.n	80067d8 <I2SEx_RxISR_I2SExt+0x68>
 80067d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067d8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80067dc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d106      	bne.n	80067f6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f7ff ff03 	bl	80065fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80067f6:	bf00      	nop
 80067f8:	3708      	adds	r7, #8
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	40003800 	.word	0x40003800
 8006804:	40003400 	.word	0x40003400

08006808 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b086      	sub	sp, #24
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d101      	bne.n	800681a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	e264      	b.n	8006ce4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f003 0301 	and.w	r3, r3, #1
 8006822:	2b00      	cmp	r3, #0
 8006824:	d075      	beq.n	8006912 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006826:	4ba3      	ldr	r3, [pc, #652]	; (8006ab4 <HAL_RCC_OscConfig+0x2ac>)
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	f003 030c 	and.w	r3, r3, #12
 800682e:	2b04      	cmp	r3, #4
 8006830:	d00c      	beq.n	800684c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006832:	4ba0      	ldr	r3, [pc, #640]	; (8006ab4 <HAL_RCC_OscConfig+0x2ac>)
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800683a:	2b08      	cmp	r3, #8
 800683c:	d112      	bne.n	8006864 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800683e:	4b9d      	ldr	r3, [pc, #628]	; (8006ab4 <HAL_RCC_OscConfig+0x2ac>)
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006846:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800684a:	d10b      	bne.n	8006864 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800684c:	4b99      	ldr	r3, [pc, #612]	; (8006ab4 <HAL_RCC_OscConfig+0x2ac>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006854:	2b00      	cmp	r3, #0
 8006856:	d05b      	beq.n	8006910 <HAL_RCC_OscConfig+0x108>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d157      	bne.n	8006910 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	e23f      	b.n	8006ce4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800686c:	d106      	bne.n	800687c <HAL_RCC_OscConfig+0x74>
 800686e:	4b91      	ldr	r3, [pc, #580]	; (8006ab4 <HAL_RCC_OscConfig+0x2ac>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a90      	ldr	r2, [pc, #576]	; (8006ab4 <HAL_RCC_OscConfig+0x2ac>)
 8006874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006878:	6013      	str	r3, [r2, #0]
 800687a:	e01d      	b.n	80068b8 <HAL_RCC_OscConfig+0xb0>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006884:	d10c      	bne.n	80068a0 <HAL_RCC_OscConfig+0x98>
 8006886:	4b8b      	ldr	r3, [pc, #556]	; (8006ab4 <HAL_RCC_OscConfig+0x2ac>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a8a      	ldr	r2, [pc, #552]	; (8006ab4 <HAL_RCC_OscConfig+0x2ac>)
 800688c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006890:	6013      	str	r3, [r2, #0]
 8006892:	4b88      	ldr	r3, [pc, #544]	; (8006ab4 <HAL_RCC_OscConfig+0x2ac>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a87      	ldr	r2, [pc, #540]	; (8006ab4 <HAL_RCC_OscConfig+0x2ac>)
 8006898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800689c:	6013      	str	r3, [r2, #0]
 800689e:	e00b      	b.n	80068b8 <HAL_RCC_OscConfig+0xb0>
 80068a0:	4b84      	ldr	r3, [pc, #528]	; (8006ab4 <HAL_RCC_OscConfig+0x2ac>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a83      	ldr	r2, [pc, #524]	; (8006ab4 <HAL_RCC_OscConfig+0x2ac>)
 80068a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068aa:	6013      	str	r3, [r2, #0]
 80068ac:	4b81      	ldr	r3, [pc, #516]	; (8006ab4 <HAL_RCC_OscConfig+0x2ac>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a80      	ldr	r2, [pc, #512]	; (8006ab4 <HAL_RCC_OscConfig+0x2ac>)
 80068b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d013      	beq.n	80068e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068c0:	f7fb fb70 	bl	8001fa4 <HAL_GetTick>
 80068c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068c6:	e008      	b.n	80068da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068c8:	f7fb fb6c 	bl	8001fa4 <HAL_GetTick>
 80068cc:	4602      	mov	r2, r0
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	2b64      	cmp	r3, #100	; 0x64
 80068d4:	d901      	bls.n	80068da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e204      	b.n	8006ce4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068da:	4b76      	ldr	r3, [pc, #472]	; (8006ab4 <HAL_RCC_OscConfig+0x2ac>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d0f0      	beq.n	80068c8 <HAL_RCC_OscConfig+0xc0>
 80068e6:	e014      	b.n	8006912 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068e8:	f7fb fb5c 	bl	8001fa4 <HAL_GetTick>
 80068ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068ee:	e008      	b.n	8006902 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068f0:	f7fb fb58 	bl	8001fa4 <HAL_GetTick>
 80068f4:	4602      	mov	r2, r0
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	1ad3      	subs	r3, r2, r3
 80068fa:	2b64      	cmp	r3, #100	; 0x64
 80068fc:	d901      	bls.n	8006902 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80068fe:	2303      	movs	r3, #3
 8006900:	e1f0      	b.n	8006ce4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006902:	4b6c      	ldr	r3, [pc, #432]	; (8006ab4 <HAL_RCC_OscConfig+0x2ac>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800690a:	2b00      	cmp	r3, #0
 800690c:	d1f0      	bne.n	80068f0 <HAL_RCC_OscConfig+0xe8>
 800690e:	e000      	b.n	8006912 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006910:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f003 0302 	and.w	r3, r3, #2
 800691a:	2b00      	cmp	r3, #0
 800691c:	d063      	beq.n	80069e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800691e:	4b65      	ldr	r3, [pc, #404]	; (8006ab4 <HAL_RCC_OscConfig+0x2ac>)
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	f003 030c 	and.w	r3, r3, #12
 8006926:	2b00      	cmp	r3, #0
 8006928:	d00b      	beq.n	8006942 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800692a:	4b62      	ldr	r3, [pc, #392]	; (8006ab4 <HAL_RCC_OscConfig+0x2ac>)
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006932:	2b08      	cmp	r3, #8
 8006934:	d11c      	bne.n	8006970 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006936:	4b5f      	ldr	r3, [pc, #380]	; (8006ab4 <HAL_RCC_OscConfig+0x2ac>)
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800693e:	2b00      	cmp	r3, #0
 8006940:	d116      	bne.n	8006970 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006942:	4b5c      	ldr	r3, [pc, #368]	; (8006ab4 <HAL_RCC_OscConfig+0x2ac>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 0302 	and.w	r3, r3, #2
 800694a:	2b00      	cmp	r3, #0
 800694c:	d005      	beq.n	800695a <HAL_RCC_OscConfig+0x152>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	2b01      	cmp	r3, #1
 8006954:	d001      	beq.n	800695a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e1c4      	b.n	8006ce4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800695a:	4b56      	ldr	r3, [pc, #344]	; (8006ab4 <HAL_RCC_OscConfig+0x2ac>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	00db      	lsls	r3, r3, #3
 8006968:	4952      	ldr	r1, [pc, #328]	; (8006ab4 <HAL_RCC_OscConfig+0x2ac>)
 800696a:	4313      	orrs	r3, r2
 800696c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800696e:	e03a      	b.n	80069e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d020      	beq.n	80069ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006978:	4b4f      	ldr	r3, [pc, #316]	; (8006ab8 <HAL_RCC_OscConfig+0x2b0>)
 800697a:	2201      	movs	r2, #1
 800697c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800697e:	f7fb fb11 	bl	8001fa4 <HAL_GetTick>
 8006982:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006984:	e008      	b.n	8006998 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006986:	f7fb fb0d 	bl	8001fa4 <HAL_GetTick>
 800698a:	4602      	mov	r2, r0
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	1ad3      	subs	r3, r2, r3
 8006990:	2b02      	cmp	r3, #2
 8006992:	d901      	bls.n	8006998 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006994:	2303      	movs	r3, #3
 8006996:	e1a5      	b.n	8006ce4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006998:	4b46      	ldr	r3, [pc, #280]	; (8006ab4 <HAL_RCC_OscConfig+0x2ac>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 0302 	and.w	r3, r3, #2
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d0f0      	beq.n	8006986 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069a4:	4b43      	ldr	r3, [pc, #268]	; (8006ab4 <HAL_RCC_OscConfig+0x2ac>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	00db      	lsls	r3, r3, #3
 80069b2:	4940      	ldr	r1, [pc, #256]	; (8006ab4 <HAL_RCC_OscConfig+0x2ac>)
 80069b4:	4313      	orrs	r3, r2
 80069b6:	600b      	str	r3, [r1, #0]
 80069b8:	e015      	b.n	80069e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069ba:	4b3f      	ldr	r3, [pc, #252]	; (8006ab8 <HAL_RCC_OscConfig+0x2b0>)
 80069bc:	2200      	movs	r2, #0
 80069be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069c0:	f7fb faf0 	bl	8001fa4 <HAL_GetTick>
 80069c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069c6:	e008      	b.n	80069da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069c8:	f7fb faec 	bl	8001fa4 <HAL_GetTick>
 80069cc:	4602      	mov	r2, r0
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	d901      	bls.n	80069da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e184      	b.n	8006ce4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069da:	4b36      	ldr	r3, [pc, #216]	; (8006ab4 <HAL_RCC_OscConfig+0x2ac>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 0302 	and.w	r3, r3, #2
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d1f0      	bne.n	80069c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 0308 	and.w	r3, r3, #8
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d030      	beq.n	8006a54 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	695b      	ldr	r3, [r3, #20]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d016      	beq.n	8006a28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069fa:	4b30      	ldr	r3, [pc, #192]	; (8006abc <HAL_RCC_OscConfig+0x2b4>)
 80069fc:	2201      	movs	r2, #1
 80069fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a00:	f7fb fad0 	bl	8001fa4 <HAL_GetTick>
 8006a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a06:	e008      	b.n	8006a1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a08:	f7fb facc 	bl	8001fa4 <HAL_GetTick>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	2b02      	cmp	r3, #2
 8006a14:	d901      	bls.n	8006a1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006a16:	2303      	movs	r3, #3
 8006a18:	e164      	b.n	8006ce4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a1a:	4b26      	ldr	r3, [pc, #152]	; (8006ab4 <HAL_RCC_OscConfig+0x2ac>)
 8006a1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a1e:	f003 0302 	and.w	r3, r3, #2
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d0f0      	beq.n	8006a08 <HAL_RCC_OscConfig+0x200>
 8006a26:	e015      	b.n	8006a54 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a28:	4b24      	ldr	r3, [pc, #144]	; (8006abc <HAL_RCC_OscConfig+0x2b4>)
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a2e:	f7fb fab9 	bl	8001fa4 <HAL_GetTick>
 8006a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a34:	e008      	b.n	8006a48 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a36:	f7fb fab5 	bl	8001fa4 <HAL_GetTick>
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	1ad3      	subs	r3, r2, r3
 8006a40:	2b02      	cmp	r3, #2
 8006a42:	d901      	bls.n	8006a48 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006a44:	2303      	movs	r3, #3
 8006a46:	e14d      	b.n	8006ce4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a48:	4b1a      	ldr	r3, [pc, #104]	; (8006ab4 <HAL_RCC_OscConfig+0x2ac>)
 8006a4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a4c:	f003 0302 	and.w	r3, r3, #2
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d1f0      	bne.n	8006a36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 0304 	and.w	r3, r3, #4
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	f000 80a0 	beq.w	8006ba2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a62:	2300      	movs	r3, #0
 8006a64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a66:	4b13      	ldr	r3, [pc, #76]	; (8006ab4 <HAL_RCC_OscConfig+0x2ac>)
 8006a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d10f      	bne.n	8006a92 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a72:	2300      	movs	r3, #0
 8006a74:	60bb      	str	r3, [r7, #8]
 8006a76:	4b0f      	ldr	r3, [pc, #60]	; (8006ab4 <HAL_RCC_OscConfig+0x2ac>)
 8006a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7a:	4a0e      	ldr	r2, [pc, #56]	; (8006ab4 <HAL_RCC_OscConfig+0x2ac>)
 8006a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a80:	6413      	str	r3, [r2, #64]	; 0x40
 8006a82:	4b0c      	ldr	r3, [pc, #48]	; (8006ab4 <HAL_RCC_OscConfig+0x2ac>)
 8006a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a8a:	60bb      	str	r3, [r7, #8]
 8006a8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a92:	4b0b      	ldr	r3, [pc, #44]	; (8006ac0 <HAL_RCC_OscConfig+0x2b8>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d121      	bne.n	8006ae2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a9e:	4b08      	ldr	r3, [pc, #32]	; (8006ac0 <HAL_RCC_OscConfig+0x2b8>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a07      	ldr	r2, [pc, #28]	; (8006ac0 <HAL_RCC_OscConfig+0x2b8>)
 8006aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006aa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006aaa:	f7fb fa7b 	bl	8001fa4 <HAL_GetTick>
 8006aae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ab0:	e011      	b.n	8006ad6 <HAL_RCC_OscConfig+0x2ce>
 8006ab2:	bf00      	nop
 8006ab4:	40023800 	.word	0x40023800
 8006ab8:	42470000 	.word	0x42470000
 8006abc:	42470e80 	.word	0x42470e80
 8006ac0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ac4:	f7fb fa6e 	bl	8001fa4 <HAL_GetTick>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	1ad3      	subs	r3, r2, r3
 8006ace:	2b02      	cmp	r3, #2
 8006ad0:	d901      	bls.n	8006ad6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006ad2:	2303      	movs	r3, #3
 8006ad4:	e106      	b.n	8006ce4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ad6:	4b85      	ldr	r3, [pc, #532]	; (8006cec <HAL_RCC_OscConfig+0x4e4>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d0f0      	beq.n	8006ac4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d106      	bne.n	8006af8 <HAL_RCC_OscConfig+0x2f0>
 8006aea:	4b81      	ldr	r3, [pc, #516]	; (8006cf0 <HAL_RCC_OscConfig+0x4e8>)
 8006aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aee:	4a80      	ldr	r2, [pc, #512]	; (8006cf0 <HAL_RCC_OscConfig+0x4e8>)
 8006af0:	f043 0301 	orr.w	r3, r3, #1
 8006af4:	6713      	str	r3, [r2, #112]	; 0x70
 8006af6:	e01c      	b.n	8006b32 <HAL_RCC_OscConfig+0x32a>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	2b05      	cmp	r3, #5
 8006afe:	d10c      	bne.n	8006b1a <HAL_RCC_OscConfig+0x312>
 8006b00:	4b7b      	ldr	r3, [pc, #492]	; (8006cf0 <HAL_RCC_OscConfig+0x4e8>)
 8006b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b04:	4a7a      	ldr	r2, [pc, #488]	; (8006cf0 <HAL_RCC_OscConfig+0x4e8>)
 8006b06:	f043 0304 	orr.w	r3, r3, #4
 8006b0a:	6713      	str	r3, [r2, #112]	; 0x70
 8006b0c:	4b78      	ldr	r3, [pc, #480]	; (8006cf0 <HAL_RCC_OscConfig+0x4e8>)
 8006b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b10:	4a77      	ldr	r2, [pc, #476]	; (8006cf0 <HAL_RCC_OscConfig+0x4e8>)
 8006b12:	f043 0301 	orr.w	r3, r3, #1
 8006b16:	6713      	str	r3, [r2, #112]	; 0x70
 8006b18:	e00b      	b.n	8006b32 <HAL_RCC_OscConfig+0x32a>
 8006b1a:	4b75      	ldr	r3, [pc, #468]	; (8006cf0 <HAL_RCC_OscConfig+0x4e8>)
 8006b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b1e:	4a74      	ldr	r2, [pc, #464]	; (8006cf0 <HAL_RCC_OscConfig+0x4e8>)
 8006b20:	f023 0301 	bic.w	r3, r3, #1
 8006b24:	6713      	str	r3, [r2, #112]	; 0x70
 8006b26:	4b72      	ldr	r3, [pc, #456]	; (8006cf0 <HAL_RCC_OscConfig+0x4e8>)
 8006b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b2a:	4a71      	ldr	r2, [pc, #452]	; (8006cf0 <HAL_RCC_OscConfig+0x4e8>)
 8006b2c:	f023 0304 	bic.w	r3, r3, #4
 8006b30:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d015      	beq.n	8006b66 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b3a:	f7fb fa33 	bl	8001fa4 <HAL_GetTick>
 8006b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b40:	e00a      	b.n	8006b58 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b42:	f7fb fa2f 	bl	8001fa4 <HAL_GetTick>
 8006b46:	4602      	mov	r2, r0
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	1ad3      	subs	r3, r2, r3
 8006b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d901      	bls.n	8006b58 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006b54:	2303      	movs	r3, #3
 8006b56:	e0c5      	b.n	8006ce4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b58:	4b65      	ldr	r3, [pc, #404]	; (8006cf0 <HAL_RCC_OscConfig+0x4e8>)
 8006b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b5c:	f003 0302 	and.w	r3, r3, #2
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d0ee      	beq.n	8006b42 <HAL_RCC_OscConfig+0x33a>
 8006b64:	e014      	b.n	8006b90 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b66:	f7fb fa1d 	bl	8001fa4 <HAL_GetTick>
 8006b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b6c:	e00a      	b.n	8006b84 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b6e:	f7fb fa19 	bl	8001fa4 <HAL_GetTick>
 8006b72:	4602      	mov	r2, r0
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d901      	bls.n	8006b84 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006b80:	2303      	movs	r3, #3
 8006b82:	e0af      	b.n	8006ce4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b84:	4b5a      	ldr	r3, [pc, #360]	; (8006cf0 <HAL_RCC_OscConfig+0x4e8>)
 8006b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b88:	f003 0302 	and.w	r3, r3, #2
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d1ee      	bne.n	8006b6e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b90:	7dfb      	ldrb	r3, [r7, #23]
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d105      	bne.n	8006ba2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b96:	4b56      	ldr	r3, [pc, #344]	; (8006cf0 <HAL_RCC_OscConfig+0x4e8>)
 8006b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9a:	4a55      	ldr	r2, [pc, #340]	; (8006cf0 <HAL_RCC_OscConfig+0x4e8>)
 8006b9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ba0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	699b      	ldr	r3, [r3, #24]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	f000 809b 	beq.w	8006ce2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006bac:	4b50      	ldr	r3, [pc, #320]	; (8006cf0 <HAL_RCC_OscConfig+0x4e8>)
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	f003 030c 	and.w	r3, r3, #12
 8006bb4:	2b08      	cmp	r3, #8
 8006bb6:	d05c      	beq.n	8006c72 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	699b      	ldr	r3, [r3, #24]
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	d141      	bne.n	8006c44 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bc0:	4b4c      	ldr	r3, [pc, #304]	; (8006cf4 <HAL_RCC_OscConfig+0x4ec>)
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bc6:	f7fb f9ed 	bl	8001fa4 <HAL_GetTick>
 8006bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bcc:	e008      	b.n	8006be0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bce:	f7fb f9e9 	bl	8001fa4 <HAL_GetTick>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	1ad3      	subs	r3, r2, r3
 8006bd8:	2b02      	cmp	r3, #2
 8006bda:	d901      	bls.n	8006be0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006bdc:	2303      	movs	r3, #3
 8006bde:	e081      	b.n	8006ce4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006be0:	4b43      	ldr	r3, [pc, #268]	; (8006cf0 <HAL_RCC_OscConfig+0x4e8>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d1f0      	bne.n	8006bce <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	69da      	ldr	r2, [r3, #28]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6a1b      	ldr	r3, [r3, #32]
 8006bf4:	431a      	orrs	r2, r3
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfa:	019b      	lsls	r3, r3, #6
 8006bfc:	431a      	orrs	r2, r3
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c02:	085b      	lsrs	r3, r3, #1
 8006c04:	3b01      	subs	r3, #1
 8006c06:	041b      	lsls	r3, r3, #16
 8006c08:	431a      	orrs	r2, r3
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c0e:	061b      	lsls	r3, r3, #24
 8006c10:	4937      	ldr	r1, [pc, #220]	; (8006cf0 <HAL_RCC_OscConfig+0x4e8>)
 8006c12:	4313      	orrs	r3, r2
 8006c14:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c16:	4b37      	ldr	r3, [pc, #220]	; (8006cf4 <HAL_RCC_OscConfig+0x4ec>)
 8006c18:	2201      	movs	r2, #1
 8006c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c1c:	f7fb f9c2 	bl	8001fa4 <HAL_GetTick>
 8006c20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c22:	e008      	b.n	8006c36 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c24:	f7fb f9be 	bl	8001fa4 <HAL_GetTick>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	1ad3      	subs	r3, r2, r3
 8006c2e:	2b02      	cmp	r3, #2
 8006c30:	d901      	bls.n	8006c36 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006c32:	2303      	movs	r3, #3
 8006c34:	e056      	b.n	8006ce4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c36:	4b2e      	ldr	r3, [pc, #184]	; (8006cf0 <HAL_RCC_OscConfig+0x4e8>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d0f0      	beq.n	8006c24 <HAL_RCC_OscConfig+0x41c>
 8006c42:	e04e      	b.n	8006ce2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c44:	4b2b      	ldr	r3, [pc, #172]	; (8006cf4 <HAL_RCC_OscConfig+0x4ec>)
 8006c46:	2200      	movs	r2, #0
 8006c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c4a:	f7fb f9ab 	bl	8001fa4 <HAL_GetTick>
 8006c4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c50:	e008      	b.n	8006c64 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c52:	f7fb f9a7 	bl	8001fa4 <HAL_GetTick>
 8006c56:	4602      	mov	r2, r0
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	1ad3      	subs	r3, r2, r3
 8006c5c:	2b02      	cmp	r3, #2
 8006c5e:	d901      	bls.n	8006c64 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006c60:	2303      	movs	r3, #3
 8006c62:	e03f      	b.n	8006ce4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c64:	4b22      	ldr	r3, [pc, #136]	; (8006cf0 <HAL_RCC_OscConfig+0x4e8>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d1f0      	bne.n	8006c52 <HAL_RCC_OscConfig+0x44a>
 8006c70:	e037      	b.n	8006ce2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	699b      	ldr	r3, [r3, #24]
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d101      	bne.n	8006c7e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e032      	b.n	8006ce4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006c7e:	4b1c      	ldr	r3, [pc, #112]	; (8006cf0 <HAL_RCC_OscConfig+0x4e8>)
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	699b      	ldr	r3, [r3, #24]
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d028      	beq.n	8006cde <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d121      	bne.n	8006cde <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d11a      	bne.n	8006cde <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ca8:	68fa      	ldr	r2, [r7, #12]
 8006caa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006cae:	4013      	ands	r3, r2
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006cb4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d111      	bne.n	8006cde <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cc4:	085b      	lsrs	r3, r3, #1
 8006cc6:	3b01      	subs	r3, #1
 8006cc8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d107      	bne.n	8006cde <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d001      	beq.n	8006ce2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e000      	b.n	8006ce4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3718      	adds	r7, #24
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}
 8006cec:	40007000 	.word	0x40007000
 8006cf0:	40023800 	.word	0x40023800
 8006cf4:	42470060 	.word	0x42470060

08006cf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d101      	bne.n	8006d0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e0cc      	b.n	8006ea6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d0c:	4b68      	ldr	r3, [pc, #416]	; (8006eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 0307 	and.w	r3, r3, #7
 8006d14:	683a      	ldr	r2, [r7, #0]
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d90c      	bls.n	8006d34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d1a:	4b65      	ldr	r3, [pc, #404]	; (8006eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8006d1c:	683a      	ldr	r2, [r7, #0]
 8006d1e:	b2d2      	uxtb	r2, r2
 8006d20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d22:	4b63      	ldr	r3, [pc, #396]	; (8006eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f003 0307 	and.w	r3, r3, #7
 8006d2a:	683a      	ldr	r2, [r7, #0]
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d001      	beq.n	8006d34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	e0b8      	b.n	8006ea6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 0302 	and.w	r3, r3, #2
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d020      	beq.n	8006d82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 0304 	and.w	r3, r3, #4
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d005      	beq.n	8006d58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d4c:	4b59      	ldr	r3, [pc, #356]	; (8006eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	4a58      	ldr	r2, [pc, #352]	; (8006eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006d56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f003 0308 	and.w	r3, r3, #8
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d005      	beq.n	8006d70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d64:	4b53      	ldr	r3, [pc, #332]	; (8006eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	4a52      	ldr	r2, [pc, #328]	; (8006eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006d6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d70:	4b50      	ldr	r3, [pc, #320]	; (8006eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	494d      	ldr	r1, [pc, #308]	; (8006eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f003 0301 	and.w	r3, r3, #1
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d044      	beq.n	8006e18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d107      	bne.n	8006da6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d96:	4b47      	ldr	r3, [pc, #284]	; (8006eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d119      	bne.n	8006dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	e07f      	b.n	8006ea6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	2b02      	cmp	r3, #2
 8006dac:	d003      	beq.n	8006db6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006db2:	2b03      	cmp	r3, #3
 8006db4:	d107      	bne.n	8006dc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006db6:	4b3f      	ldr	r3, [pc, #252]	; (8006eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d109      	bne.n	8006dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e06f      	b.n	8006ea6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dc6:	4b3b      	ldr	r3, [pc, #236]	; (8006eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 0302 	and.w	r3, r3, #2
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d101      	bne.n	8006dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e067      	b.n	8006ea6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006dd6:	4b37      	ldr	r3, [pc, #220]	; (8006eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	f023 0203 	bic.w	r2, r3, #3
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	4934      	ldr	r1, [pc, #208]	; (8006eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006de4:	4313      	orrs	r3, r2
 8006de6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006de8:	f7fb f8dc 	bl	8001fa4 <HAL_GetTick>
 8006dec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dee:	e00a      	b.n	8006e06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006df0:	f7fb f8d8 	bl	8001fa4 <HAL_GetTick>
 8006df4:	4602      	mov	r2, r0
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	1ad3      	subs	r3, r2, r3
 8006dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d901      	bls.n	8006e06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006e02:	2303      	movs	r3, #3
 8006e04:	e04f      	b.n	8006ea6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e06:	4b2b      	ldr	r3, [pc, #172]	; (8006eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	f003 020c 	and.w	r2, r3, #12
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d1eb      	bne.n	8006df0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e18:	4b25      	ldr	r3, [pc, #148]	; (8006eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 0307 	and.w	r3, r3, #7
 8006e20:	683a      	ldr	r2, [r7, #0]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d20c      	bcs.n	8006e40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e26:	4b22      	ldr	r3, [pc, #136]	; (8006eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8006e28:	683a      	ldr	r2, [r7, #0]
 8006e2a:	b2d2      	uxtb	r2, r2
 8006e2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e2e:	4b20      	ldr	r3, [pc, #128]	; (8006eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f003 0307 	and.w	r3, r3, #7
 8006e36:	683a      	ldr	r2, [r7, #0]
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d001      	beq.n	8006e40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e032      	b.n	8006ea6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 0304 	and.w	r3, r3, #4
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d008      	beq.n	8006e5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e4c:	4b19      	ldr	r3, [pc, #100]	; (8006eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	4916      	ldr	r1, [pc, #88]	; (8006eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f003 0308 	and.w	r3, r3, #8
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d009      	beq.n	8006e7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e6a:	4b12      	ldr	r3, [pc, #72]	; (8006eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	00db      	lsls	r3, r3, #3
 8006e78:	490e      	ldr	r1, [pc, #56]	; (8006eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006e7e:	f000 f821 	bl	8006ec4 <HAL_RCC_GetSysClockFreq>
 8006e82:	4602      	mov	r2, r0
 8006e84:	4b0b      	ldr	r3, [pc, #44]	; (8006eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	091b      	lsrs	r3, r3, #4
 8006e8a:	f003 030f 	and.w	r3, r3, #15
 8006e8e:	490a      	ldr	r1, [pc, #40]	; (8006eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8006e90:	5ccb      	ldrb	r3, [r1, r3]
 8006e92:	fa22 f303 	lsr.w	r3, r2, r3
 8006e96:	4a09      	ldr	r2, [pc, #36]	; (8006ebc <HAL_RCC_ClockConfig+0x1c4>)
 8006e98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006e9a:	4b09      	ldr	r3, [pc, #36]	; (8006ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7fa ff2c 	bl	8001cfc <HAL_InitTick>

  return HAL_OK;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3710      	adds	r7, #16
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	bf00      	nop
 8006eb0:	40023c00 	.word	0x40023c00
 8006eb4:	40023800 	.word	0x40023800
 8006eb8:	0800e884 	.word	0x0800e884
 8006ebc:	20000000 	.word	0x20000000
 8006ec0:	20000004 	.word	0x20000004

08006ec4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ec4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006ec8:	b084      	sub	sp, #16
 8006eca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	607b      	str	r3, [r7, #4]
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	60fb      	str	r3, [r7, #12]
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006edc:	4b67      	ldr	r3, [pc, #412]	; (800707c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	f003 030c 	and.w	r3, r3, #12
 8006ee4:	2b08      	cmp	r3, #8
 8006ee6:	d00d      	beq.n	8006f04 <HAL_RCC_GetSysClockFreq+0x40>
 8006ee8:	2b08      	cmp	r3, #8
 8006eea:	f200 80bd 	bhi.w	8007068 <HAL_RCC_GetSysClockFreq+0x1a4>
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d002      	beq.n	8006ef8 <HAL_RCC_GetSysClockFreq+0x34>
 8006ef2:	2b04      	cmp	r3, #4
 8006ef4:	d003      	beq.n	8006efe <HAL_RCC_GetSysClockFreq+0x3a>
 8006ef6:	e0b7      	b.n	8007068 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ef8:	4b61      	ldr	r3, [pc, #388]	; (8007080 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006efa:	60bb      	str	r3, [r7, #8]
       break;
 8006efc:	e0b7      	b.n	800706e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006efe:	4b61      	ldr	r3, [pc, #388]	; (8007084 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006f00:	60bb      	str	r3, [r7, #8]
      break;
 8006f02:	e0b4      	b.n	800706e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f04:	4b5d      	ldr	r3, [pc, #372]	; (800707c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f0c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006f0e:	4b5b      	ldr	r3, [pc, #364]	; (800707c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d04d      	beq.n	8006fb6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f1a:	4b58      	ldr	r3, [pc, #352]	; (800707c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	099b      	lsrs	r3, r3, #6
 8006f20:	461a      	mov	r2, r3
 8006f22:	f04f 0300 	mov.w	r3, #0
 8006f26:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006f2a:	f04f 0100 	mov.w	r1, #0
 8006f2e:	ea02 0800 	and.w	r8, r2, r0
 8006f32:	ea03 0901 	and.w	r9, r3, r1
 8006f36:	4640      	mov	r0, r8
 8006f38:	4649      	mov	r1, r9
 8006f3a:	f04f 0200 	mov.w	r2, #0
 8006f3e:	f04f 0300 	mov.w	r3, #0
 8006f42:	014b      	lsls	r3, r1, #5
 8006f44:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006f48:	0142      	lsls	r2, r0, #5
 8006f4a:	4610      	mov	r0, r2
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	ebb0 0008 	subs.w	r0, r0, r8
 8006f52:	eb61 0109 	sbc.w	r1, r1, r9
 8006f56:	f04f 0200 	mov.w	r2, #0
 8006f5a:	f04f 0300 	mov.w	r3, #0
 8006f5e:	018b      	lsls	r3, r1, #6
 8006f60:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006f64:	0182      	lsls	r2, r0, #6
 8006f66:	1a12      	subs	r2, r2, r0
 8006f68:	eb63 0301 	sbc.w	r3, r3, r1
 8006f6c:	f04f 0000 	mov.w	r0, #0
 8006f70:	f04f 0100 	mov.w	r1, #0
 8006f74:	00d9      	lsls	r1, r3, #3
 8006f76:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006f7a:	00d0      	lsls	r0, r2, #3
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	460b      	mov	r3, r1
 8006f80:	eb12 0208 	adds.w	r2, r2, r8
 8006f84:	eb43 0309 	adc.w	r3, r3, r9
 8006f88:	f04f 0000 	mov.w	r0, #0
 8006f8c:	f04f 0100 	mov.w	r1, #0
 8006f90:	0259      	lsls	r1, r3, #9
 8006f92:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006f96:	0250      	lsls	r0, r2, #9
 8006f98:	4602      	mov	r2, r0
 8006f9a:	460b      	mov	r3, r1
 8006f9c:	4610      	mov	r0, r2
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	f04f 0300 	mov.w	r3, #0
 8006fa8:	f7f9 fc70 	bl	800088c <__aeabi_uldivmod>
 8006fac:	4602      	mov	r2, r0
 8006fae:	460b      	mov	r3, r1
 8006fb0:	4613      	mov	r3, r2
 8006fb2:	60fb      	str	r3, [r7, #12]
 8006fb4:	e04a      	b.n	800704c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fb6:	4b31      	ldr	r3, [pc, #196]	; (800707c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	099b      	lsrs	r3, r3, #6
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	f04f 0300 	mov.w	r3, #0
 8006fc2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006fc6:	f04f 0100 	mov.w	r1, #0
 8006fca:	ea02 0400 	and.w	r4, r2, r0
 8006fce:	ea03 0501 	and.w	r5, r3, r1
 8006fd2:	4620      	mov	r0, r4
 8006fd4:	4629      	mov	r1, r5
 8006fd6:	f04f 0200 	mov.w	r2, #0
 8006fda:	f04f 0300 	mov.w	r3, #0
 8006fde:	014b      	lsls	r3, r1, #5
 8006fe0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006fe4:	0142      	lsls	r2, r0, #5
 8006fe6:	4610      	mov	r0, r2
 8006fe8:	4619      	mov	r1, r3
 8006fea:	1b00      	subs	r0, r0, r4
 8006fec:	eb61 0105 	sbc.w	r1, r1, r5
 8006ff0:	f04f 0200 	mov.w	r2, #0
 8006ff4:	f04f 0300 	mov.w	r3, #0
 8006ff8:	018b      	lsls	r3, r1, #6
 8006ffa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006ffe:	0182      	lsls	r2, r0, #6
 8007000:	1a12      	subs	r2, r2, r0
 8007002:	eb63 0301 	sbc.w	r3, r3, r1
 8007006:	f04f 0000 	mov.w	r0, #0
 800700a:	f04f 0100 	mov.w	r1, #0
 800700e:	00d9      	lsls	r1, r3, #3
 8007010:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007014:	00d0      	lsls	r0, r2, #3
 8007016:	4602      	mov	r2, r0
 8007018:	460b      	mov	r3, r1
 800701a:	1912      	adds	r2, r2, r4
 800701c:	eb45 0303 	adc.w	r3, r5, r3
 8007020:	f04f 0000 	mov.w	r0, #0
 8007024:	f04f 0100 	mov.w	r1, #0
 8007028:	0299      	lsls	r1, r3, #10
 800702a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800702e:	0290      	lsls	r0, r2, #10
 8007030:	4602      	mov	r2, r0
 8007032:	460b      	mov	r3, r1
 8007034:	4610      	mov	r0, r2
 8007036:	4619      	mov	r1, r3
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	461a      	mov	r2, r3
 800703c:	f04f 0300 	mov.w	r3, #0
 8007040:	f7f9 fc24 	bl	800088c <__aeabi_uldivmod>
 8007044:	4602      	mov	r2, r0
 8007046:	460b      	mov	r3, r1
 8007048:	4613      	mov	r3, r2
 800704a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800704c:	4b0b      	ldr	r3, [pc, #44]	; (800707c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	0c1b      	lsrs	r3, r3, #16
 8007052:	f003 0303 	and.w	r3, r3, #3
 8007056:	3301      	adds	r3, #1
 8007058:	005b      	lsls	r3, r3, #1
 800705a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800705c:	68fa      	ldr	r2, [r7, #12]
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	fbb2 f3f3 	udiv	r3, r2, r3
 8007064:	60bb      	str	r3, [r7, #8]
      break;
 8007066:	e002      	b.n	800706e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007068:	4b05      	ldr	r3, [pc, #20]	; (8007080 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800706a:	60bb      	str	r3, [r7, #8]
      break;
 800706c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800706e:	68bb      	ldr	r3, [r7, #8]
}
 8007070:	4618      	mov	r0, r3
 8007072:	3710      	adds	r7, #16
 8007074:	46bd      	mov	sp, r7
 8007076:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800707a:	bf00      	nop
 800707c:	40023800 	.word	0x40023800
 8007080:	00f42400 	.word	0x00f42400
 8007084:	007a1200 	.word	0x007a1200

08007088 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007088:	b480      	push	{r7}
 800708a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800708c:	4b03      	ldr	r3, [pc, #12]	; (800709c <HAL_RCC_GetHCLKFreq+0x14>)
 800708e:	681b      	ldr	r3, [r3, #0]
}
 8007090:	4618      	mov	r0, r3
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr
 800709a:	bf00      	nop
 800709c:	20000000 	.word	0x20000000

080070a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80070a4:	f7ff fff0 	bl	8007088 <HAL_RCC_GetHCLKFreq>
 80070a8:	4602      	mov	r2, r0
 80070aa:	4b05      	ldr	r3, [pc, #20]	; (80070c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	0a9b      	lsrs	r3, r3, #10
 80070b0:	f003 0307 	and.w	r3, r3, #7
 80070b4:	4903      	ldr	r1, [pc, #12]	; (80070c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80070b6:	5ccb      	ldrb	r3, [r1, r3]
 80070b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070bc:	4618      	mov	r0, r3
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	40023800 	.word	0x40023800
 80070c4:	0800e894 	.word	0x0800e894

080070c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80070cc:	f7ff ffdc 	bl	8007088 <HAL_RCC_GetHCLKFreq>
 80070d0:	4602      	mov	r2, r0
 80070d2:	4b05      	ldr	r3, [pc, #20]	; (80070e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	0b5b      	lsrs	r3, r3, #13
 80070d8:	f003 0307 	and.w	r3, r3, #7
 80070dc:	4903      	ldr	r1, [pc, #12]	; (80070ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80070de:	5ccb      	ldrb	r3, [r1, r3]
 80070e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	40023800 	.word	0x40023800
 80070ec:	0800e894 	.word	0x0800e894

080070f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b083      	sub	sp, #12
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	220f      	movs	r2, #15
 80070fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007100:	4b12      	ldr	r3, [pc, #72]	; (800714c <HAL_RCC_GetClockConfig+0x5c>)
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	f003 0203 	and.w	r2, r3, #3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800710c:	4b0f      	ldr	r3, [pc, #60]	; (800714c <HAL_RCC_GetClockConfig+0x5c>)
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007118:	4b0c      	ldr	r3, [pc, #48]	; (800714c <HAL_RCC_GetClockConfig+0x5c>)
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007124:	4b09      	ldr	r3, [pc, #36]	; (800714c <HAL_RCC_GetClockConfig+0x5c>)
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	08db      	lsrs	r3, r3, #3
 800712a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007132:	4b07      	ldr	r3, [pc, #28]	; (8007150 <HAL_RCC_GetClockConfig+0x60>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f003 0207 	and.w	r2, r3, #7
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	601a      	str	r2, [r3, #0]
}
 800713e:	bf00      	nop
 8007140:	370c      	adds	r7, #12
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr
 800714a:	bf00      	nop
 800714c:	40023800 	.word	0x40023800
 8007150:	40023c00 	.word	0x40023c00

08007154 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b086      	sub	sp, #24
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800715c:	2300      	movs	r3, #0
 800715e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007160:	2300      	movs	r3, #0
 8007162:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f003 0301 	and.w	r3, r3, #1
 800716c:	2b00      	cmp	r3, #0
 800716e:	d105      	bne.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007178:	2b00      	cmp	r3, #0
 800717a:	d035      	beq.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800717c:	4b62      	ldr	r3, [pc, #392]	; (8007308 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800717e:	2200      	movs	r2, #0
 8007180:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007182:	f7fa ff0f 	bl	8001fa4 <HAL_GetTick>
 8007186:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007188:	e008      	b.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800718a:	f7fa ff0b 	bl	8001fa4 <HAL_GetTick>
 800718e:	4602      	mov	r2, r0
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	1ad3      	subs	r3, r2, r3
 8007194:	2b02      	cmp	r3, #2
 8007196:	d901      	bls.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007198:	2303      	movs	r3, #3
 800719a:	e0b0      	b.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800719c:	4b5b      	ldr	r3, [pc, #364]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d1f0      	bne.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	019a      	lsls	r2, r3, #6
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	071b      	lsls	r3, r3, #28
 80071b4:	4955      	ldr	r1, [pc, #340]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071b6:	4313      	orrs	r3, r2
 80071b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80071bc:	4b52      	ldr	r3, [pc, #328]	; (8007308 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80071be:	2201      	movs	r2, #1
 80071c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80071c2:	f7fa feef 	bl	8001fa4 <HAL_GetTick>
 80071c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80071c8:	e008      	b.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80071ca:	f7fa feeb 	bl	8001fa4 <HAL_GetTick>
 80071ce:	4602      	mov	r2, r0
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	1ad3      	subs	r3, r2, r3
 80071d4:	2b02      	cmp	r3, #2
 80071d6:	d901      	bls.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80071d8:	2303      	movs	r3, #3
 80071da:	e090      	b.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80071dc:	4b4b      	ldr	r3, [pc, #300]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d0f0      	beq.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f003 0302 	and.w	r3, r3, #2
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	f000 8083 	beq.w	80072fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80071f6:	2300      	movs	r3, #0
 80071f8:	60fb      	str	r3, [r7, #12]
 80071fa:	4b44      	ldr	r3, [pc, #272]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071fe:	4a43      	ldr	r2, [pc, #268]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007204:	6413      	str	r3, [r2, #64]	; 0x40
 8007206:	4b41      	ldr	r3, [pc, #260]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800720a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800720e:	60fb      	str	r3, [r7, #12]
 8007210:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007212:	4b3f      	ldr	r3, [pc, #252]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a3e      	ldr	r2, [pc, #248]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800721c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800721e:	f7fa fec1 	bl	8001fa4 <HAL_GetTick>
 8007222:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007224:	e008      	b.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007226:	f7fa febd 	bl	8001fa4 <HAL_GetTick>
 800722a:	4602      	mov	r2, r0
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	1ad3      	subs	r3, r2, r3
 8007230:	2b02      	cmp	r3, #2
 8007232:	d901      	bls.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007234:	2303      	movs	r3, #3
 8007236:	e062      	b.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007238:	4b35      	ldr	r3, [pc, #212]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007240:	2b00      	cmp	r3, #0
 8007242:	d0f0      	beq.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007244:	4b31      	ldr	r3, [pc, #196]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007248:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800724c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d02f      	beq.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800725c:	693a      	ldr	r2, [r7, #16]
 800725e:	429a      	cmp	r2, r3
 8007260:	d028      	beq.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007262:	4b2a      	ldr	r3, [pc, #168]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007266:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800726a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800726c:	4b29      	ldr	r3, [pc, #164]	; (8007314 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800726e:	2201      	movs	r2, #1
 8007270:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007272:	4b28      	ldr	r3, [pc, #160]	; (8007314 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007274:	2200      	movs	r2, #0
 8007276:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007278:	4a24      	ldr	r2, [pc, #144]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800727e:	4b23      	ldr	r3, [pc, #140]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007282:	f003 0301 	and.w	r3, r3, #1
 8007286:	2b01      	cmp	r3, #1
 8007288:	d114      	bne.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800728a:	f7fa fe8b 	bl	8001fa4 <HAL_GetTick>
 800728e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007290:	e00a      	b.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007292:	f7fa fe87 	bl	8001fa4 <HAL_GetTick>
 8007296:	4602      	mov	r2, r0
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	1ad3      	subs	r3, r2, r3
 800729c:	f241 3288 	movw	r2, #5000	; 0x1388
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d901      	bls.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80072a4:	2303      	movs	r3, #3
 80072a6:	e02a      	b.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072a8:	4b18      	ldr	r3, [pc, #96]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ac:	f003 0302 	and.w	r3, r3, #2
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d0ee      	beq.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072c0:	d10d      	bne.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80072c2:	4b12      	ldr	r3, [pc, #72]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80072d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072d6:	490d      	ldr	r1, [pc, #52]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072d8:	4313      	orrs	r3, r2
 80072da:	608b      	str	r3, [r1, #8]
 80072dc:	e005      	b.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x196>
 80072de:	4b0b      	ldr	r3, [pc, #44]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	4a0a      	ldr	r2, [pc, #40]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072e4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80072e8:	6093      	str	r3, [r2, #8]
 80072ea:	4b08      	ldr	r3, [pc, #32]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	68db      	ldr	r3, [r3, #12]
 80072f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072f6:	4905      	ldr	r1, [pc, #20]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072f8:	4313      	orrs	r3, r2
 80072fa:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80072fc:	2300      	movs	r3, #0
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3718      	adds	r7, #24
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	42470068 	.word	0x42470068
 800730c:	40023800 	.word	0x40023800
 8007310:	40007000 	.word	0x40007000
 8007314:	42470e40 	.word	0x42470e40

08007318 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007318:	b480      	push	{r7}
 800731a:	b087      	sub	sp, #28
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007320:	2300      	movs	r3, #0
 8007322:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007324:	2300      	movs	r3, #0
 8007326:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007328:	2300      	movs	r3, #0
 800732a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800732c:	2300      	movs	r3, #0
 800732e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2b01      	cmp	r3, #1
 8007334:	d13e      	bne.n	80073b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007336:	4b23      	ldr	r3, [pc, #140]	; (80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800733e:	60fb      	str	r3, [r7, #12]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d005      	beq.n	8007352 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2b01      	cmp	r3, #1
 800734a:	d12f      	bne.n	80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800734c:	4b1e      	ldr	r3, [pc, #120]	; (80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800734e:	617b      	str	r3, [r7, #20]
          break;
 8007350:	e02f      	b.n	80073b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007352:	4b1c      	ldr	r3, [pc, #112]	; (80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800735a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800735e:	d108      	bne.n	8007372 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007360:	4b18      	ldr	r3, [pc, #96]	; (80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007368:	4a18      	ldr	r2, [pc, #96]	; (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800736a:	fbb2 f3f3 	udiv	r3, r2, r3
 800736e:	613b      	str	r3, [r7, #16]
 8007370:	e007      	b.n	8007382 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007372:	4b14      	ldr	r3, [pc, #80]	; (80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800737a:	4a15      	ldr	r2, [pc, #84]	; (80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800737c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007380:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007382:	4b10      	ldr	r3, [pc, #64]	; (80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007384:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007388:	099b      	lsrs	r3, r3, #6
 800738a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	fb02 f303 	mul.w	r3, r2, r3
 8007394:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007396:	4b0b      	ldr	r3, [pc, #44]	; (80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007398:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800739c:	0f1b      	lsrs	r3, r3, #28
 800739e:	f003 0307 	and.w	r3, r3, #7
 80073a2:	68ba      	ldr	r2, [r7, #8]
 80073a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80073a8:	617b      	str	r3, [r7, #20]
          break;
 80073aa:	e002      	b.n	80073b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80073ac:	2300      	movs	r3, #0
 80073ae:	617b      	str	r3, [r7, #20]
          break;
 80073b0:	bf00      	nop
        }
      }
      break;
 80073b2:	bf00      	nop
    }
  }
  return frequency;
 80073b4:	697b      	ldr	r3, [r7, #20]
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	371c      	adds	r7, #28
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr
 80073c2:	bf00      	nop
 80073c4:	40023800 	.word	0x40023800
 80073c8:	00bb8000 	.word	0x00bb8000
 80073cc:	007a1200 	.word	0x007a1200
 80073d0:	00f42400 	.word	0x00f42400

080073d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d101      	bne.n	80073e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	e07b      	b.n	80074de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d108      	bne.n	8007400 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073f6:	d009      	beq.n	800740c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	61da      	str	r2, [r3, #28]
 80073fe:	e005      	b.n	800740c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007418:	b2db      	uxtb	r3, r3
 800741a:	2b00      	cmp	r3, #0
 800741c:	d106      	bne.n	800742c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f7fa fbb8 	bl	8001b9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2202      	movs	r2, #2
 8007430:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007442:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007454:	431a      	orrs	r2, r3
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800745e:	431a      	orrs	r2, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	691b      	ldr	r3, [r3, #16]
 8007464:	f003 0302 	and.w	r3, r3, #2
 8007468:	431a      	orrs	r2, r3
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	695b      	ldr	r3, [r3, #20]
 800746e:	f003 0301 	and.w	r3, r3, #1
 8007472:	431a      	orrs	r2, r3
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	699b      	ldr	r3, [r3, #24]
 8007478:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800747c:	431a      	orrs	r2, r3
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	69db      	ldr	r3, [r3, #28]
 8007482:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007486:	431a      	orrs	r2, r3
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6a1b      	ldr	r3, [r3, #32]
 800748c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007490:	ea42 0103 	orr.w	r1, r2, r3
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007498:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	430a      	orrs	r2, r1
 80074a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	699b      	ldr	r3, [r3, #24]
 80074a8:	0c1b      	lsrs	r3, r3, #16
 80074aa:	f003 0104 	and.w	r1, r3, #4
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b2:	f003 0210 	and.w	r2, r3, #16
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	430a      	orrs	r2, r1
 80074bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	69da      	ldr	r2, [r3, #28]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80074cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3708      	adds	r7, #8
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b082      	sub	sp, #8
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d101      	bne.n	80074f8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	e041      	b.n	800757c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	2b00      	cmp	r3, #0
 8007502:	d106      	bne.n	8007512 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 f839 	bl	8007584 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2202      	movs	r2, #2
 8007516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681a      	ldr	r2, [r3, #0]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	3304      	adds	r3, #4
 8007522:	4619      	mov	r1, r3
 8007524:	4610      	mov	r0, r2
 8007526:	f000 f9d7 	bl	80078d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2201      	movs	r2, #1
 800752e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2201      	movs	r2, #1
 8007536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2201      	movs	r2, #1
 800753e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2201      	movs	r2, #1
 8007546:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2201      	movs	r2, #1
 800754e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2201      	movs	r2, #1
 8007556:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2201      	movs	r2, #1
 800755e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2201      	movs	r2, #1
 8007566:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2201      	movs	r2, #1
 800756e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2201      	movs	r2, #1
 8007576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800757a:	2300      	movs	r3, #0
}
 800757c:	4618      	mov	r0, r3
 800757e:	3708      	adds	r7, #8
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800758c:	bf00      	nop
 800758e:	370c      	adds	r7, #12
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007598:	b480      	push	{r7}
 800759a:	b085      	sub	sp, #20
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d001      	beq.n	80075b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	e04e      	b.n	800764e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2202      	movs	r2, #2
 80075b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	68da      	ldr	r2, [r3, #12]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f042 0201 	orr.w	r2, r2, #1
 80075c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a23      	ldr	r2, [pc, #140]	; (800765c <HAL_TIM_Base_Start_IT+0xc4>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d022      	beq.n	8007618 <HAL_TIM_Base_Start_IT+0x80>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075da:	d01d      	beq.n	8007618 <HAL_TIM_Base_Start_IT+0x80>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a1f      	ldr	r2, [pc, #124]	; (8007660 <HAL_TIM_Base_Start_IT+0xc8>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d018      	beq.n	8007618 <HAL_TIM_Base_Start_IT+0x80>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a1e      	ldr	r2, [pc, #120]	; (8007664 <HAL_TIM_Base_Start_IT+0xcc>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d013      	beq.n	8007618 <HAL_TIM_Base_Start_IT+0x80>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a1c      	ldr	r2, [pc, #112]	; (8007668 <HAL_TIM_Base_Start_IT+0xd0>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d00e      	beq.n	8007618 <HAL_TIM_Base_Start_IT+0x80>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a1b      	ldr	r2, [pc, #108]	; (800766c <HAL_TIM_Base_Start_IT+0xd4>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d009      	beq.n	8007618 <HAL_TIM_Base_Start_IT+0x80>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a19      	ldr	r2, [pc, #100]	; (8007670 <HAL_TIM_Base_Start_IT+0xd8>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d004      	beq.n	8007618 <HAL_TIM_Base_Start_IT+0x80>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a18      	ldr	r2, [pc, #96]	; (8007674 <HAL_TIM_Base_Start_IT+0xdc>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d111      	bne.n	800763c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	f003 0307 	and.w	r3, r3, #7
 8007622:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2b06      	cmp	r3, #6
 8007628:	d010      	beq.n	800764c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f042 0201 	orr.w	r2, r2, #1
 8007638:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800763a:	e007      	b.n	800764c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f042 0201 	orr.w	r2, r2, #1
 800764a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800764c:	2300      	movs	r3, #0
}
 800764e:	4618      	mov	r0, r3
 8007650:	3714      	adds	r7, #20
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr
 800765a:	bf00      	nop
 800765c:	40010000 	.word	0x40010000
 8007660:	40000400 	.word	0x40000400
 8007664:	40000800 	.word	0x40000800
 8007668:	40000c00 	.word	0x40000c00
 800766c:	40010400 	.word	0x40010400
 8007670:	40014000 	.word	0x40014000
 8007674:	40001800 	.word	0x40001800

08007678 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	691b      	ldr	r3, [r3, #16]
 8007686:	f003 0302 	and.w	r3, r3, #2
 800768a:	2b02      	cmp	r3, #2
 800768c:	d122      	bne.n	80076d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	f003 0302 	and.w	r3, r3, #2
 8007698:	2b02      	cmp	r3, #2
 800769a:	d11b      	bne.n	80076d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f06f 0202 	mvn.w	r2, #2
 80076a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2201      	movs	r2, #1
 80076aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	699b      	ldr	r3, [r3, #24]
 80076b2:	f003 0303 	and.w	r3, r3, #3
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d003      	beq.n	80076c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 f8ee 	bl	800789c <HAL_TIM_IC_CaptureCallback>
 80076c0:	e005      	b.n	80076ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 f8e0 	bl	8007888 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 f8f1 	bl	80078b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	691b      	ldr	r3, [r3, #16]
 80076da:	f003 0304 	and.w	r3, r3, #4
 80076de:	2b04      	cmp	r3, #4
 80076e0:	d122      	bne.n	8007728 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	f003 0304 	and.w	r3, r3, #4
 80076ec:	2b04      	cmp	r3, #4
 80076ee:	d11b      	bne.n	8007728 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f06f 0204 	mvn.w	r2, #4
 80076f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2202      	movs	r2, #2
 80076fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	699b      	ldr	r3, [r3, #24]
 8007706:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800770a:	2b00      	cmp	r3, #0
 800770c:	d003      	beq.n	8007716 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 f8c4 	bl	800789c <HAL_TIM_IC_CaptureCallback>
 8007714:	e005      	b.n	8007722 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 f8b6 	bl	8007888 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 f8c7 	bl	80078b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	691b      	ldr	r3, [r3, #16]
 800772e:	f003 0308 	and.w	r3, r3, #8
 8007732:	2b08      	cmp	r3, #8
 8007734:	d122      	bne.n	800777c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	68db      	ldr	r3, [r3, #12]
 800773c:	f003 0308 	and.w	r3, r3, #8
 8007740:	2b08      	cmp	r3, #8
 8007742:	d11b      	bne.n	800777c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f06f 0208 	mvn.w	r2, #8
 800774c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2204      	movs	r2, #4
 8007752:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	69db      	ldr	r3, [r3, #28]
 800775a:	f003 0303 	and.w	r3, r3, #3
 800775e:	2b00      	cmp	r3, #0
 8007760:	d003      	beq.n	800776a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 f89a 	bl	800789c <HAL_TIM_IC_CaptureCallback>
 8007768:	e005      	b.n	8007776 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 f88c 	bl	8007888 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 f89d 	bl	80078b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	691b      	ldr	r3, [r3, #16]
 8007782:	f003 0310 	and.w	r3, r3, #16
 8007786:	2b10      	cmp	r3, #16
 8007788:	d122      	bne.n	80077d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	68db      	ldr	r3, [r3, #12]
 8007790:	f003 0310 	and.w	r3, r3, #16
 8007794:	2b10      	cmp	r3, #16
 8007796:	d11b      	bne.n	80077d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f06f 0210 	mvn.w	r2, #16
 80077a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2208      	movs	r2, #8
 80077a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	69db      	ldr	r3, [r3, #28]
 80077ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d003      	beq.n	80077be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 f870 	bl	800789c <HAL_TIM_IC_CaptureCallback>
 80077bc:	e005      	b.n	80077ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 f862 	bl	8007888 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 f873 	bl	80078b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	691b      	ldr	r3, [r3, #16]
 80077d6:	f003 0301 	and.w	r3, r3, #1
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d10e      	bne.n	80077fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	f003 0301 	and.w	r3, r3, #1
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d107      	bne.n	80077fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f06f 0201 	mvn.w	r2, #1
 80077f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f7f9 ff16 	bl	8001628 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	691b      	ldr	r3, [r3, #16]
 8007802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007806:	2b80      	cmp	r3, #128	; 0x80
 8007808:	d10e      	bne.n	8007828 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007814:	2b80      	cmp	r3, #128	; 0x80
 8007816:	d107      	bne.n	8007828 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 f902 	bl	8007a2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	691b      	ldr	r3, [r3, #16]
 800782e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007832:	2b40      	cmp	r3, #64	; 0x40
 8007834:	d10e      	bne.n	8007854 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	68db      	ldr	r3, [r3, #12]
 800783c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007840:	2b40      	cmp	r3, #64	; 0x40
 8007842:	d107      	bne.n	8007854 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800784c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 f838 	bl	80078c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	691b      	ldr	r3, [r3, #16]
 800785a:	f003 0320 	and.w	r3, r3, #32
 800785e:	2b20      	cmp	r3, #32
 8007860:	d10e      	bne.n	8007880 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	f003 0320 	and.w	r3, r3, #32
 800786c:	2b20      	cmp	r3, #32
 800786e:	d107      	bne.n	8007880 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f06f 0220 	mvn.w	r2, #32
 8007878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 f8cc 	bl	8007a18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007880:	bf00      	nop
 8007882:	3708      	adds	r7, #8
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007890:	bf00      	nop
 8007892:	370c      	adds	r7, #12
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80078a4:	bf00      	nop
 80078a6:	370c      	adds	r7, #12
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr

080078b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b083      	sub	sp, #12
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80078b8:	bf00      	nop
 80078ba:	370c      	adds	r7, #12
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80078cc:	bf00      	nop
 80078ce:	370c      	adds	r7, #12
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80078d8:	b480      	push	{r7}
 80078da:	b085      	sub	sp, #20
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	4a40      	ldr	r2, [pc, #256]	; (80079ec <TIM_Base_SetConfig+0x114>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d013      	beq.n	8007918 <TIM_Base_SetConfig+0x40>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078f6:	d00f      	beq.n	8007918 <TIM_Base_SetConfig+0x40>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	4a3d      	ldr	r2, [pc, #244]	; (80079f0 <TIM_Base_SetConfig+0x118>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d00b      	beq.n	8007918 <TIM_Base_SetConfig+0x40>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4a3c      	ldr	r2, [pc, #240]	; (80079f4 <TIM_Base_SetConfig+0x11c>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d007      	beq.n	8007918 <TIM_Base_SetConfig+0x40>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	4a3b      	ldr	r2, [pc, #236]	; (80079f8 <TIM_Base_SetConfig+0x120>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d003      	beq.n	8007918 <TIM_Base_SetConfig+0x40>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	4a3a      	ldr	r2, [pc, #232]	; (80079fc <TIM_Base_SetConfig+0x124>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d108      	bne.n	800792a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800791e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	68fa      	ldr	r2, [r7, #12]
 8007926:	4313      	orrs	r3, r2
 8007928:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4a2f      	ldr	r2, [pc, #188]	; (80079ec <TIM_Base_SetConfig+0x114>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d02b      	beq.n	800798a <TIM_Base_SetConfig+0xb2>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007938:	d027      	beq.n	800798a <TIM_Base_SetConfig+0xb2>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4a2c      	ldr	r2, [pc, #176]	; (80079f0 <TIM_Base_SetConfig+0x118>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d023      	beq.n	800798a <TIM_Base_SetConfig+0xb2>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4a2b      	ldr	r2, [pc, #172]	; (80079f4 <TIM_Base_SetConfig+0x11c>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d01f      	beq.n	800798a <TIM_Base_SetConfig+0xb2>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4a2a      	ldr	r2, [pc, #168]	; (80079f8 <TIM_Base_SetConfig+0x120>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d01b      	beq.n	800798a <TIM_Base_SetConfig+0xb2>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4a29      	ldr	r2, [pc, #164]	; (80079fc <TIM_Base_SetConfig+0x124>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d017      	beq.n	800798a <TIM_Base_SetConfig+0xb2>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4a28      	ldr	r2, [pc, #160]	; (8007a00 <TIM_Base_SetConfig+0x128>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d013      	beq.n	800798a <TIM_Base_SetConfig+0xb2>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4a27      	ldr	r2, [pc, #156]	; (8007a04 <TIM_Base_SetConfig+0x12c>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d00f      	beq.n	800798a <TIM_Base_SetConfig+0xb2>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4a26      	ldr	r2, [pc, #152]	; (8007a08 <TIM_Base_SetConfig+0x130>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d00b      	beq.n	800798a <TIM_Base_SetConfig+0xb2>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	4a25      	ldr	r2, [pc, #148]	; (8007a0c <TIM_Base_SetConfig+0x134>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d007      	beq.n	800798a <TIM_Base_SetConfig+0xb2>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	4a24      	ldr	r2, [pc, #144]	; (8007a10 <TIM_Base_SetConfig+0x138>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d003      	beq.n	800798a <TIM_Base_SetConfig+0xb2>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4a23      	ldr	r2, [pc, #140]	; (8007a14 <TIM_Base_SetConfig+0x13c>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d108      	bne.n	800799c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007990:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	68fa      	ldr	r2, [r7, #12]
 8007998:	4313      	orrs	r3, r2
 800799a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	695b      	ldr	r3, [r3, #20]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	68fa      	ldr	r2, [r7, #12]
 80079ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	689a      	ldr	r2, [r3, #8]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	4a0a      	ldr	r2, [pc, #40]	; (80079ec <TIM_Base_SetConfig+0x114>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d003      	beq.n	80079d0 <TIM_Base_SetConfig+0xf8>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	4a0c      	ldr	r2, [pc, #48]	; (80079fc <TIM_Base_SetConfig+0x124>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d103      	bne.n	80079d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	691a      	ldr	r2, [r3, #16]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2201      	movs	r2, #1
 80079dc:	615a      	str	r2, [r3, #20]
}
 80079de:	bf00      	nop
 80079e0:	3714      	adds	r7, #20
 80079e2:	46bd      	mov	sp, r7
 80079e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e8:	4770      	bx	lr
 80079ea:	bf00      	nop
 80079ec:	40010000 	.word	0x40010000
 80079f0:	40000400 	.word	0x40000400
 80079f4:	40000800 	.word	0x40000800
 80079f8:	40000c00 	.word	0x40000c00
 80079fc:	40010400 	.word	0x40010400
 8007a00:	40014000 	.word	0x40014000
 8007a04:	40014400 	.word	0x40014400
 8007a08:	40014800 	.word	0x40014800
 8007a0c:	40001800 	.word	0x40001800
 8007a10:	40001c00 	.word	0x40001c00
 8007a14:	40002000 	.word	0x40002000

08007a18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a20:	bf00      	nop
 8007a22:	370c      	adds	r7, #12
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b083      	sub	sp, #12
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a34:	bf00      	nop
 8007a36:	370c      	adds	r7, #12
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr

08007a40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d101      	bne.n	8007a52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e03f      	b.n	8007ad2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d106      	bne.n	8007a6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f7fa f8e0 	bl	8001c2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2224      	movs	r2, #36	; 0x24
 8007a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	68da      	ldr	r2, [r3, #12]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 f929 	bl	8007cdc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	691a      	ldr	r2, [r3, #16]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007a98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	695a      	ldr	r2, [r3, #20]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007aa8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	68da      	ldr	r2, [r3, #12]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007ab8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2200      	movs	r2, #0
 8007abe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2220      	movs	r2, #32
 8007ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2220      	movs	r2, #32
 8007acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007ad0:	2300      	movs	r3, #0
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3708      	adds	r7, #8
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}

08007ada <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ada:	b580      	push	{r7, lr}
 8007adc:	b08a      	sub	sp, #40	; 0x28
 8007ade:	af02      	add	r7, sp, #8
 8007ae0:	60f8      	str	r0, [r7, #12]
 8007ae2:	60b9      	str	r1, [r7, #8]
 8007ae4:	603b      	str	r3, [r7, #0]
 8007ae6:	4613      	mov	r3, r2
 8007ae8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007aea:	2300      	movs	r3, #0
 8007aec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	2b20      	cmp	r3, #32
 8007af8:	d17c      	bne.n	8007bf4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d002      	beq.n	8007b06 <HAL_UART_Transmit+0x2c>
 8007b00:	88fb      	ldrh	r3, [r7, #6]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d101      	bne.n	8007b0a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	e075      	b.n	8007bf6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d101      	bne.n	8007b18 <HAL_UART_Transmit+0x3e>
 8007b14:	2302      	movs	r3, #2
 8007b16:	e06e      	b.n	8007bf6 <HAL_UART_Transmit+0x11c>
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2200      	movs	r2, #0
 8007b24:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2221      	movs	r2, #33	; 0x21
 8007b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b2e:	f7fa fa39 	bl	8001fa4 <HAL_GetTick>
 8007b32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	88fa      	ldrh	r2, [r7, #6]
 8007b38:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	88fa      	ldrh	r2, [r7, #6]
 8007b3e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b48:	d108      	bne.n	8007b5c <HAL_UART_Transmit+0x82>
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	691b      	ldr	r3, [r3, #16]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d104      	bne.n	8007b5c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007b52:	2300      	movs	r3, #0
 8007b54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	61bb      	str	r3, [r7, #24]
 8007b5a:	e003      	b.n	8007b64 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b60:	2300      	movs	r3, #0
 8007b62:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2200      	movs	r2, #0
 8007b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007b6c:	e02a      	b.n	8007bc4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	9300      	str	r3, [sp, #0]
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	2200      	movs	r2, #0
 8007b76:	2180      	movs	r1, #128	; 0x80
 8007b78:	68f8      	ldr	r0, [r7, #12]
 8007b7a:	f000 f840 	bl	8007bfe <UART_WaitOnFlagUntilTimeout>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d001      	beq.n	8007b88 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007b84:	2303      	movs	r3, #3
 8007b86:	e036      	b.n	8007bf6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007b88:	69fb      	ldr	r3, [r7, #28]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d10b      	bne.n	8007ba6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007b8e:	69bb      	ldr	r3, [r7, #24]
 8007b90:	881b      	ldrh	r3, [r3, #0]
 8007b92:	461a      	mov	r2, r3
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007b9e:	69bb      	ldr	r3, [r7, #24]
 8007ba0:	3302      	adds	r3, #2
 8007ba2:	61bb      	str	r3, [r7, #24]
 8007ba4:	e007      	b.n	8007bb6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007ba6:	69fb      	ldr	r3, [r7, #28]
 8007ba8:	781a      	ldrb	r2, [r3, #0]
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007bb0:	69fb      	ldr	r3, [r7, #28]
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	3b01      	subs	r3, #1
 8007bbe:	b29a      	uxth	r2, r3
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d1cf      	bne.n	8007b6e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	9300      	str	r3, [sp, #0]
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	2140      	movs	r1, #64	; 0x40
 8007bd8:	68f8      	ldr	r0, [r7, #12]
 8007bda:	f000 f810 	bl	8007bfe <UART_WaitOnFlagUntilTimeout>
 8007bde:	4603      	mov	r3, r0
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d001      	beq.n	8007be8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007be4:	2303      	movs	r3, #3
 8007be6:	e006      	b.n	8007bf6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2220      	movs	r2, #32
 8007bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	e000      	b.n	8007bf6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007bf4:	2302      	movs	r3, #2
  }
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3720      	adds	r7, #32
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}

08007bfe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007bfe:	b580      	push	{r7, lr}
 8007c00:	b090      	sub	sp, #64	; 0x40
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	60f8      	str	r0, [r7, #12]
 8007c06:	60b9      	str	r1, [r7, #8]
 8007c08:	603b      	str	r3, [r7, #0]
 8007c0a:	4613      	mov	r3, r2
 8007c0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c0e:	e050      	b.n	8007cb2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c16:	d04c      	beq.n	8007cb2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007c18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d007      	beq.n	8007c2e <UART_WaitOnFlagUntilTimeout+0x30>
 8007c1e:	f7fa f9c1 	bl	8001fa4 <HAL_GetTick>
 8007c22:	4602      	mov	r2, r0
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	1ad3      	subs	r3, r2, r3
 8007c28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d241      	bcs.n	8007cb2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	330c      	adds	r3, #12
 8007c34:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c38:	e853 3f00 	ldrex	r3, [r3]
 8007c3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007c44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	330c      	adds	r3, #12
 8007c4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007c4e:	637a      	str	r2, [r7, #52]	; 0x34
 8007c50:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c56:	e841 2300 	strex	r3, r2, [r1]
 8007c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d1e5      	bne.n	8007c2e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	3314      	adds	r3, #20
 8007c68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	e853 3f00 	ldrex	r3, [r3]
 8007c70:	613b      	str	r3, [r7, #16]
   return(result);
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	f023 0301 	bic.w	r3, r3, #1
 8007c78:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	3314      	adds	r3, #20
 8007c80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c82:	623a      	str	r2, [r7, #32]
 8007c84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c86:	69f9      	ldr	r1, [r7, #28]
 8007c88:	6a3a      	ldr	r2, [r7, #32]
 8007c8a:	e841 2300 	strex	r3, r2, [r1]
 8007c8e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c90:	69bb      	ldr	r3, [r7, #24]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d1e5      	bne.n	8007c62 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2220      	movs	r2, #32
 8007c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2220      	movs	r2, #32
 8007ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007cae:	2303      	movs	r3, #3
 8007cb0:	e00f      	b.n	8007cd2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	4013      	ands	r3, r2
 8007cbc:	68ba      	ldr	r2, [r7, #8]
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	bf0c      	ite	eq
 8007cc2:	2301      	moveq	r3, #1
 8007cc4:	2300      	movne	r3, #0
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	461a      	mov	r2, r3
 8007cca:	79fb      	ldrb	r3, [r7, #7]
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d09f      	beq.n	8007c10 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007cd0:	2300      	movs	r3, #0
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3740      	adds	r7, #64	; 0x40
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
	...

08007cdc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ce0:	b09f      	sub	sp, #124	; 0x7c
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	691b      	ldr	r3, [r3, #16]
 8007cec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007cf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cf2:	68d9      	ldr	r1, [r3, #12]
 8007cf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	ea40 0301 	orr.w	r3, r0, r1
 8007cfc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007cfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d00:	689a      	ldr	r2, [r3, #8]
 8007d02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d04:	691b      	ldr	r3, [r3, #16]
 8007d06:	431a      	orrs	r2, r3
 8007d08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d0a:	695b      	ldr	r3, [r3, #20]
 8007d0c:	431a      	orrs	r2, r3
 8007d0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d10:	69db      	ldr	r3, [r3, #28]
 8007d12:	4313      	orrs	r3, r2
 8007d14:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007d16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	68db      	ldr	r3, [r3, #12]
 8007d1c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007d20:	f021 010c 	bic.w	r1, r1, #12
 8007d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d2a:	430b      	orrs	r3, r1
 8007d2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007d2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	695b      	ldr	r3, [r3, #20]
 8007d34:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007d38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d3a:	6999      	ldr	r1, [r3, #24]
 8007d3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	ea40 0301 	orr.w	r3, r0, r1
 8007d44:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007d46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	4bc5      	ldr	r3, [pc, #788]	; (8008060 <UART_SetConfig+0x384>)
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d004      	beq.n	8007d5a <UART_SetConfig+0x7e>
 8007d50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	4bc3      	ldr	r3, [pc, #780]	; (8008064 <UART_SetConfig+0x388>)
 8007d56:	429a      	cmp	r2, r3
 8007d58:	d103      	bne.n	8007d62 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007d5a:	f7ff f9b5 	bl	80070c8 <HAL_RCC_GetPCLK2Freq>
 8007d5e:	6778      	str	r0, [r7, #116]	; 0x74
 8007d60:	e002      	b.n	8007d68 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007d62:	f7ff f99d 	bl	80070a0 <HAL_RCC_GetPCLK1Freq>
 8007d66:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d6a:	69db      	ldr	r3, [r3, #28]
 8007d6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d70:	f040 80b6 	bne.w	8007ee0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007d74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d76:	461c      	mov	r4, r3
 8007d78:	f04f 0500 	mov.w	r5, #0
 8007d7c:	4622      	mov	r2, r4
 8007d7e:	462b      	mov	r3, r5
 8007d80:	1891      	adds	r1, r2, r2
 8007d82:	6439      	str	r1, [r7, #64]	; 0x40
 8007d84:	415b      	adcs	r3, r3
 8007d86:	647b      	str	r3, [r7, #68]	; 0x44
 8007d88:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007d8c:	1912      	adds	r2, r2, r4
 8007d8e:	eb45 0303 	adc.w	r3, r5, r3
 8007d92:	f04f 0000 	mov.w	r0, #0
 8007d96:	f04f 0100 	mov.w	r1, #0
 8007d9a:	00d9      	lsls	r1, r3, #3
 8007d9c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007da0:	00d0      	lsls	r0, r2, #3
 8007da2:	4602      	mov	r2, r0
 8007da4:	460b      	mov	r3, r1
 8007da6:	1911      	adds	r1, r2, r4
 8007da8:	6639      	str	r1, [r7, #96]	; 0x60
 8007daa:	416b      	adcs	r3, r5
 8007dac:	667b      	str	r3, [r7, #100]	; 0x64
 8007dae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	461a      	mov	r2, r3
 8007db4:	f04f 0300 	mov.w	r3, #0
 8007db8:	1891      	adds	r1, r2, r2
 8007dba:	63b9      	str	r1, [r7, #56]	; 0x38
 8007dbc:	415b      	adcs	r3, r3
 8007dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007dc0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007dc4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007dc8:	f7f8 fd60 	bl	800088c <__aeabi_uldivmod>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	460b      	mov	r3, r1
 8007dd0:	4ba5      	ldr	r3, [pc, #660]	; (8008068 <UART_SetConfig+0x38c>)
 8007dd2:	fba3 2302 	umull	r2, r3, r3, r2
 8007dd6:	095b      	lsrs	r3, r3, #5
 8007dd8:	011e      	lsls	r6, r3, #4
 8007dda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ddc:	461c      	mov	r4, r3
 8007dde:	f04f 0500 	mov.w	r5, #0
 8007de2:	4622      	mov	r2, r4
 8007de4:	462b      	mov	r3, r5
 8007de6:	1891      	adds	r1, r2, r2
 8007de8:	6339      	str	r1, [r7, #48]	; 0x30
 8007dea:	415b      	adcs	r3, r3
 8007dec:	637b      	str	r3, [r7, #52]	; 0x34
 8007dee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007df2:	1912      	adds	r2, r2, r4
 8007df4:	eb45 0303 	adc.w	r3, r5, r3
 8007df8:	f04f 0000 	mov.w	r0, #0
 8007dfc:	f04f 0100 	mov.w	r1, #0
 8007e00:	00d9      	lsls	r1, r3, #3
 8007e02:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007e06:	00d0      	lsls	r0, r2, #3
 8007e08:	4602      	mov	r2, r0
 8007e0a:	460b      	mov	r3, r1
 8007e0c:	1911      	adds	r1, r2, r4
 8007e0e:	65b9      	str	r1, [r7, #88]	; 0x58
 8007e10:	416b      	adcs	r3, r5
 8007e12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	461a      	mov	r2, r3
 8007e1a:	f04f 0300 	mov.w	r3, #0
 8007e1e:	1891      	adds	r1, r2, r2
 8007e20:	62b9      	str	r1, [r7, #40]	; 0x28
 8007e22:	415b      	adcs	r3, r3
 8007e24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007e2a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007e2e:	f7f8 fd2d 	bl	800088c <__aeabi_uldivmod>
 8007e32:	4602      	mov	r2, r0
 8007e34:	460b      	mov	r3, r1
 8007e36:	4b8c      	ldr	r3, [pc, #560]	; (8008068 <UART_SetConfig+0x38c>)
 8007e38:	fba3 1302 	umull	r1, r3, r3, r2
 8007e3c:	095b      	lsrs	r3, r3, #5
 8007e3e:	2164      	movs	r1, #100	; 0x64
 8007e40:	fb01 f303 	mul.w	r3, r1, r3
 8007e44:	1ad3      	subs	r3, r2, r3
 8007e46:	00db      	lsls	r3, r3, #3
 8007e48:	3332      	adds	r3, #50	; 0x32
 8007e4a:	4a87      	ldr	r2, [pc, #540]	; (8008068 <UART_SetConfig+0x38c>)
 8007e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8007e50:	095b      	lsrs	r3, r3, #5
 8007e52:	005b      	lsls	r3, r3, #1
 8007e54:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007e58:	441e      	add	r6, r3
 8007e5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f04f 0100 	mov.w	r1, #0
 8007e62:	4602      	mov	r2, r0
 8007e64:	460b      	mov	r3, r1
 8007e66:	1894      	adds	r4, r2, r2
 8007e68:	623c      	str	r4, [r7, #32]
 8007e6a:	415b      	adcs	r3, r3
 8007e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8007e6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007e72:	1812      	adds	r2, r2, r0
 8007e74:	eb41 0303 	adc.w	r3, r1, r3
 8007e78:	f04f 0400 	mov.w	r4, #0
 8007e7c:	f04f 0500 	mov.w	r5, #0
 8007e80:	00dd      	lsls	r5, r3, #3
 8007e82:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007e86:	00d4      	lsls	r4, r2, #3
 8007e88:	4622      	mov	r2, r4
 8007e8a:	462b      	mov	r3, r5
 8007e8c:	1814      	adds	r4, r2, r0
 8007e8e:	653c      	str	r4, [r7, #80]	; 0x50
 8007e90:	414b      	adcs	r3, r1
 8007e92:	657b      	str	r3, [r7, #84]	; 0x54
 8007e94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	461a      	mov	r2, r3
 8007e9a:	f04f 0300 	mov.w	r3, #0
 8007e9e:	1891      	adds	r1, r2, r2
 8007ea0:	61b9      	str	r1, [r7, #24]
 8007ea2:	415b      	adcs	r3, r3
 8007ea4:	61fb      	str	r3, [r7, #28]
 8007ea6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007eaa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007eae:	f7f8 fced 	bl	800088c <__aeabi_uldivmod>
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	4b6c      	ldr	r3, [pc, #432]	; (8008068 <UART_SetConfig+0x38c>)
 8007eb8:	fba3 1302 	umull	r1, r3, r3, r2
 8007ebc:	095b      	lsrs	r3, r3, #5
 8007ebe:	2164      	movs	r1, #100	; 0x64
 8007ec0:	fb01 f303 	mul.w	r3, r1, r3
 8007ec4:	1ad3      	subs	r3, r2, r3
 8007ec6:	00db      	lsls	r3, r3, #3
 8007ec8:	3332      	adds	r3, #50	; 0x32
 8007eca:	4a67      	ldr	r2, [pc, #412]	; (8008068 <UART_SetConfig+0x38c>)
 8007ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8007ed0:	095b      	lsrs	r3, r3, #5
 8007ed2:	f003 0207 	and.w	r2, r3, #7
 8007ed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4432      	add	r2, r6
 8007edc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007ede:	e0b9      	b.n	8008054 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ee0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ee2:	461c      	mov	r4, r3
 8007ee4:	f04f 0500 	mov.w	r5, #0
 8007ee8:	4622      	mov	r2, r4
 8007eea:	462b      	mov	r3, r5
 8007eec:	1891      	adds	r1, r2, r2
 8007eee:	6139      	str	r1, [r7, #16]
 8007ef0:	415b      	adcs	r3, r3
 8007ef2:	617b      	str	r3, [r7, #20]
 8007ef4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007ef8:	1912      	adds	r2, r2, r4
 8007efa:	eb45 0303 	adc.w	r3, r5, r3
 8007efe:	f04f 0000 	mov.w	r0, #0
 8007f02:	f04f 0100 	mov.w	r1, #0
 8007f06:	00d9      	lsls	r1, r3, #3
 8007f08:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007f0c:	00d0      	lsls	r0, r2, #3
 8007f0e:	4602      	mov	r2, r0
 8007f10:	460b      	mov	r3, r1
 8007f12:	eb12 0804 	adds.w	r8, r2, r4
 8007f16:	eb43 0905 	adc.w	r9, r3, r5
 8007f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f04f 0100 	mov.w	r1, #0
 8007f24:	f04f 0200 	mov.w	r2, #0
 8007f28:	f04f 0300 	mov.w	r3, #0
 8007f2c:	008b      	lsls	r3, r1, #2
 8007f2e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007f32:	0082      	lsls	r2, r0, #2
 8007f34:	4640      	mov	r0, r8
 8007f36:	4649      	mov	r1, r9
 8007f38:	f7f8 fca8 	bl	800088c <__aeabi_uldivmod>
 8007f3c:	4602      	mov	r2, r0
 8007f3e:	460b      	mov	r3, r1
 8007f40:	4b49      	ldr	r3, [pc, #292]	; (8008068 <UART_SetConfig+0x38c>)
 8007f42:	fba3 2302 	umull	r2, r3, r3, r2
 8007f46:	095b      	lsrs	r3, r3, #5
 8007f48:	011e      	lsls	r6, r3, #4
 8007f4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f04f 0100 	mov.w	r1, #0
 8007f52:	4602      	mov	r2, r0
 8007f54:	460b      	mov	r3, r1
 8007f56:	1894      	adds	r4, r2, r2
 8007f58:	60bc      	str	r4, [r7, #8]
 8007f5a:	415b      	adcs	r3, r3
 8007f5c:	60fb      	str	r3, [r7, #12]
 8007f5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007f62:	1812      	adds	r2, r2, r0
 8007f64:	eb41 0303 	adc.w	r3, r1, r3
 8007f68:	f04f 0400 	mov.w	r4, #0
 8007f6c:	f04f 0500 	mov.w	r5, #0
 8007f70:	00dd      	lsls	r5, r3, #3
 8007f72:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007f76:	00d4      	lsls	r4, r2, #3
 8007f78:	4622      	mov	r2, r4
 8007f7a:	462b      	mov	r3, r5
 8007f7c:	1814      	adds	r4, r2, r0
 8007f7e:	64bc      	str	r4, [r7, #72]	; 0x48
 8007f80:	414b      	adcs	r3, r1
 8007f82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f04f 0100 	mov.w	r1, #0
 8007f8e:	f04f 0200 	mov.w	r2, #0
 8007f92:	f04f 0300 	mov.w	r3, #0
 8007f96:	008b      	lsls	r3, r1, #2
 8007f98:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007f9c:	0082      	lsls	r2, r0, #2
 8007f9e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007fa2:	f7f8 fc73 	bl	800088c <__aeabi_uldivmod>
 8007fa6:	4602      	mov	r2, r0
 8007fa8:	460b      	mov	r3, r1
 8007faa:	4b2f      	ldr	r3, [pc, #188]	; (8008068 <UART_SetConfig+0x38c>)
 8007fac:	fba3 1302 	umull	r1, r3, r3, r2
 8007fb0:	095b      	lsrs	r3, r3, #5
 8007fb2:	2164      	movs	r1, #100	; 0x64
 8007fb4:	fb01 f303 	mul.w	r3, r1, r3
 8007fb8:	1ad3      	subs	r3, r2, r3
 8007fba:	011b      	lsls	r3, r3, #4
 8007fbc:	3332      	adds	r3, #50	; 0x32
 8007fbe:	4a2a      	ldr	r2, [pc, #168]	; (8008068 <UART_SetConfig+0x38c>)
 8007fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8007fc4:	095b      	lsrs	r3, r3, #5
 8007fc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007fca:	441e      	add	r6, r3
 8007fcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f04f 0100 	mov.w	r1, #0
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	460b      	mov	r3, r1
 8007fd8:	1894      	adds	r4, r2, r2
 8007fda:	603c      	str	r4, [r7, #0]
 8007fdc:	415b      	adcs	r3, r3
 8007fde:	607b      	str	r3, [r7, #4]
 8007fe0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fe4:	1812      	adds	r2, r2, r0
 8007fe6:	eb41 0303 	adc.w	r3, r1, r3
 8007fea:	f04f 0400 	mov.w	r4, #0
 8007fee:	f04f 0500 	mov.w	r5, #0
 8007ff2:	00dd      	lsls	r5, r3, #3
 8007ff4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007ff8:	00d4      	lsls	r4, r2, #3
 8007ffa:	4622      	mov	r2, r4
 8007ffc:	462b      	mov	r3, r5
 8007ffe:	eb12 0a00 	adds.w	sl, r2, r0
 8008002:	eb43 0b01 	adc.w	fp, r3, r1
 8008006:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	4618      	mov	r0, r3
 800800c:	f04f 0100 	mov.w	r1, #0
 8008010:	f04f 0200 	mov.w	r2, #0
 8008014:	f04f 0300 	mov.w	r3, #0
 8008018:	008b      	lsls	r3, r1, #2
 800801a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800801e:	0082      	lsls	r2, r0, #2
 8008020:	4650      	mov	r0, sl
 8008022:	4659      	mov	r1, fp
 8008024:	f7f8 fc32 	bl	800088c <__aeabi_uldivmod>
 8008028:	4602      	mov	r2, r0
 800802a:	460b      	mov	r3, r1
 800802c:	4b0e      	ldr	r3, [pc, #56]	; (8008068 <UART_SetConfig+0x38c>)
 800802e:	fba3 1302 	umull	r1, r3, r3, r2
 8008032:	095b      	lsrs	r3, r3, #5
 8008034:	2164      	movs	r1, #100	; 0x64
 8008036:	fb01 f303 	mul.w	r3, r1, r3
 800803a:	1ad3      	subs	r3, r2, r3
 800803c:	011b      	lsls	r3, r3, #4
 800803e:	3332      	adds	r3, #50	; 0x32
 8008040:	4a09      	ldr	r2, [pc, #36]	; (8008068 <UART_SetConfig+0x38c>)
 8008042:	fba2 2303 	umull	r2, r3, r2, r3
 8008046:	095b      	lsrs	r3, r3, #5
 8008048:	f003 020f 	and.w	r2, r3, #15
 800804c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4432      	add	r2, r6
 8008052:	609a      	str	r2, [r3, #8]
}
 8008054:	bf00      	nop
 8008056:	377c      	adds	r7, #124	; 0x7c
 8008058:	46bd      	mov	sp, r7
 800805a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800805e:	bf00      	nop
 8008060:	40011000 	.word	0x40011000
 8008064:	40011400 	.word	0x40011400
 8008068:	51eb851f 	.word	0x51eb851f

0800806c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800806c:	b084      	sub	sp, #16
 800806e:	b580      	push	{r7, lr}
 8008070:	b084      	sub	sp, #16
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
 8008076:	f107 001c 	add.w	r0, r7, #28
 800807a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800807e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008080:	2b01      	cmp	r3, #1
 8008082:	d122      	bne.n	80080ca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008088:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	68db      	ldr	r3, [r3, #12]
 8008094:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008098:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800809c:	687a      	ldr	r2, [r7, #4]
 800809e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	68db      	ldr	r3, [r3, #12]
 80080a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80080ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d105      	bne.n	80080be <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	68db      	ldr	r3, [r3, #12]
 80080b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 f9a0 	bl	8008404 <USB_CoreReset>
 80080c4:	4603      	mov	r3, r0
 80080c6:	73fb      	strb	r3, [r7, #15]
 80080c8:	e01a      	b.n	8008100 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	68db      	ldr	r3, [r3, #12]
 80080ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 f994 	bl	8008404 <USB_CoreReset>
 80080dc:	4603      	mov	r3, r0
 80080de:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80080e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d106      	bne.n	80080f4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	639a      	str	r2, [r3, #56]	; 0x38
 80080f2:	e005      	b.n	8008100 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008102:	2b01      	cmp	r3, #1
 8008104:	d10b      	bne.n	800811e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	689b      	ldr	r3, [r3, #8]
 800810a:	f043 0206 	orr.w	r2, r3, #6
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	f043 0220 	orr.w	r2, r3, #32
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800811e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008120:	4618      	mov	r0, r3
 8008122:	3710      	adds	r7, #16
 8008124:	46bd      	mov	sp, r7
 8008126:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800812a:	b004      	add	sp, #16
 800812c:	4770      	bx	lr

0800812e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800812e:	b480      	push	{r7}
 8008130:	b083      	sub	sp, #12
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	689b      	ldr	r3, [r3, #8]
 800813a:	f043 0201 	orr.w	r2, r3, #1
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008142:	2300      	movs	r3, #0
}
 8008144:	4618      	mov	r0, r3
 8008146:	370c      	adds	r7, #12
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr

08008150 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008150:	b480      	push	{r7}
 8008152:	b083      	sub	sp, #12
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	689b      	ldr	r3, [r3, #8]
 800815c:	f023 0201 	bic.w	r2, r3, #1
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008164:	2300      	movs	r3, #0
}
 8008166:	4618      	mov	r0, r3
 8008168:	370c      	adds	r7, #12
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr

08008172 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008172:	b580      	push	{r7, lr}
 8008174:	b084      	sub	sp, #16
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]
 800817a:	460b      	mov	r3, r1
 800817c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800817e:	2300      	movs	r3, #0
 8008180:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	68db      	ldr	r3, [r3, #12]
 8008186:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800818e:	78fb      	ldrb	r3, [r7, #3]
 8008190:	2b01      	cmp	r3, #1
 8008192:	d115      	bne.n	80081c0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	68db      	ldr	r3, [r3, #12]
 8008198:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80081a0:	2001      	movs	r0, #1
 80081a2:	f7f9 ff0b 	bl	8001fbc <HAL_Delay>
      ms++;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	3301      	adds	r3, #1
 80081aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 f91a 	bl	80083e6 <USB_GetMode>
 80081b2:	4603      	mov	r3, r0
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d01e      	beq.n	80081f6 <USB_SetCurrentMode+0x84>
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2b31      	cmp	r3, #49	; 0x31
 80081bc:	d9f0      	bls.n	80081a0 <USB_SetCurrentMode+0x2e>
 80081be:	e01a      	b.n	80081f6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80081c0:	78fb      	ldrb	r3, [r7, #3]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d115      	bne.n	80081f2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	68db      	ldr	r3, [r3, #12]
 80081ca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80081d2:	2001      	movs	r0, #1
 80081d4:	f7f9 fef2 	bl	8001fbc <HAL_Delay>
      ms++;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	3301      	adds	r3, #1
 80081dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 f901 	bl	80083e6 <USB_GetMode>
 80081e4:	4603      	mov	r3, r0
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d005      	beq.n	80081f6 <USB_SetCurrentMode+0x84>
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2b31      	cmp	r3, #49	; 0x31
 80081ee:	d9f0      	bls.n	80081d2 <USB_SetCurrentMode+0x60>
 80081f0:	e001      	b.n	80081f6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80081f2:	2301      	movs	r3, #1
 80081f4:	e005      	b.n	8008202 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2b32      	cmp	r3, #50	; 0x32
 80081fa:	d101      	bne.n	8008200 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80081fc:	2301      	movs	r3, #1
 80081fe:	e000      	b.n	8008202 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008200:	2300      	movs	r3, #0
}
 8008202:	4618      	mov	r0, r3
 8008204:	3710      	adds	r7, #16
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}
	...

0800820c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800820c:	b480      	push	{r7}
 800820e:	b085      	sub	sp, #20
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008216:	2300      	movs	r3, #0
 8008218:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	019b      	lsls	r3, r3, #6
 800821e:	f043 0220 	orr.w	r2, r3, #32
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	3301      	adds	r3, #1
 800822a:	60fb      	str	r3, [r7, #12]
 800822c:	4a08      	ldr	r2, [pc, #32]	; (8008250 <USB_FlushTxFifo+0x44>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d901      	bls.n	8008236 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8008232:	2303      	movs	r3, #3
 8008234:	e006      	b.n	8008244 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	691b      	ldr	r3, [r3, #16]
 800823a:	f003 0320 	and.w	r3, r3, #32
 800823e:	2b20      	cmp	r3, #32
 8008240:	d0f1      	beq.n	8008226 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008242:	2300      	movs	r3, #0
}
 8008244:	4618      	mov	r0, r3
 8008246:	3714      	adds	r7, #20
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr
 8008250:	00030d40 	.word	0x00030d40

08008254 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008254:	b480      	push	{r7}
 8008256:	b085      	sub	sp, #20
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800825c:	2300      	movs	r3, #0
 800825e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2210      	movs	r2, #16
 8008264:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	3301      	adds	r3, #1
 800826a:	60fb      	str	r3, [r7, #12]
 800826c:	4a08      	ldr	r2, [pc, #32]	; (8008290 <USB_FlushRxFifo+0x3c>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d901      	bls.n	8008276 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8008272:	2303      	movs	r3, #3
 8008274:	e006      	b.n	8008284 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	691b      	ldr	r3, [r3, #16]
 800827a:	f003 0310 	and.w	r3, r3, #16
 800827e:	2b10      	cmp	r3, #16
 8008280:	d0f1      	beq.n	8008266 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008282:	2300      	movs	r3, #0
}
 8008284:	4618      	mov	r0, r3
 8008286:	3714      	adds	r7, #20
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr
 8008290:	00030d40 	.word	0x00030d40

08008294 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008294:	b480      	push	{r7}
 8008296:	b089      	sub	sp, #36	; 0x24
 8008298:	af00      	add	r7, sp, #0
 800829a:	60f8      	str	r0, [r7, #12]
 800829c:	60b9      	str	r1, [r7, #8]
 800829e:	4611      	mov	r1, r2
 80082a0:	461a      	mov	r2, r3
 80082a2:	460b      	mov	r3, r1
 80082a4:	71fb      	strb	r3, [r7, #7]
 80082a6:	4613      	mov	r3, r2
 80082a8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80082b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d123      	bne.n	8008302 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80082ba:	88bb      	ldrh	r3, [r7, #4]
 80082bc:	3303      	adds	r3, #3
 80082be:	089b      	lsrs	r3, r3, #2
 80082c0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80082c2:	2300      	movs	r3, #0
 80082c4:	61bb      	str	r3, [r7, #24]
 80082c6:	e018      	b.n	80082fa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80082c8:	79fb      	ldrb	r3, [r7, #7]
 80082ca:	031a      	lsls	r2, r3, #12
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	4413      	add	r3, r2
 80082d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082d4:	461a      	mov	r2, r3
 80082d6:	69fb      	ldr	r3, [r7, #28]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	6013      	str	r3, [r2, #0]
      pSrc++;
 80082dc:	69fb      	ldr	r3, [r7, #28]
 80082de:	3301      	adds	r3, #1
 80082e0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80082e2:	69fb      	ldr	r3, [r7, #28]
 80082e4:	3301      	adds	r3, #1
 80082e6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80082e8:	69fb      	ldr	r3, [r7, #28]
 80082ea:	3301      	adds	r3, #1
 80082ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80082ee:	69fb      	ldr	r3, [r7, #28]
 80082f0:	3301      	adds	r3, #1
 80082f2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80082f4:	69bb      	ldr	r3, [r7, #24]
 80082f6:	3301      	adds	r3, #1
 80082f8:	61bb      	str	r3, [r7, #24]
 80082fa:	69ba      	ldr	r2, [r7, #24]
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	429a      	cmp	r2, r3
 8008300:	d3e2      	bcc.n	80082c8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008302:	2300      	movs	r3, #0
}
 8008304:	4618      	mov	r0, r3
 8008306:	3724      	adds	r7, #36	; 0x24
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr

08008310 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008310:	b480      	push	{r7}
 8008312:	b08b      	sub	sp, #44	; 0x2c
 8008314:	af00      	add	r7, sp, #0
 8008316:	60f8      	str	r0, [r7, #12]
 8008318:	60b9      	str	r1, [r7, #8]
 800831a:	4613      	mov	r3, r2
 800831c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008326:	88fb      	ldrh	r3, [r7, #6]
 8008328:	089b      	lsrs	r3, r3, #2
 800832a:	b29b      	uxth	r3, r3
 800832c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800832e:	88fb      	ldrh	r3, [r7, #6]
 8008330:	f003 0303 	and.w	r3, r3, #3
 8008334:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008336:	2300      	movs	r3, #0
 8008338:	623b      	str	r3, [r7, #32]
 800833a:	e014      	b.n	8008366 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800833c:	69bb      	ldr	r3, [r7, #24]
 800833e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008346:	601a      	str	r2, [r3, #0]
    pDest++;
 8008348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834a:	3301      	adds	r3, #1
 800834c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800834e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008350:	3301      	adds	r3, #1
 8008352:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008356:	3301      	adds	r3, #1
 8008358:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800835a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835c:	3301      	adds	r3, #1
 800835e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008360:	6a3b      	ldr	r3, [r7, #32]
 8008362:	3301      	adds	r3, #1
 8008364:	623b      	str	r3, [r7, #32]
 8008366:	6a3a      	ldr	r2, [r7, #32]
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	429a      	cmp	r2, r3
 800836c:	d3e6      	bcc.n	800833c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800836e:	8bfb      	ldrh	r3, [r7, #30]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d01e      	beq.n	80083b2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008374:	2300      	movs	r3, #0
 8008376:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008378:	69bb      	ldr	r3, [r7, #24]
 800837a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800837e:	461a      	mov	r2, r3
 8008380:	f107 0310 	add.w	r3, r7, #16
 8008384:	6812      	ldr	r2, [r2, #0]
 8008386:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008388:	693a      	ldr	r2, [r7, #16]
 800838a:	6a3b      	ldr	r3, [r7, #32]
 800838c:	b2db      	uxtb	r3, r3
 800838e:	00db      	lsls	r3, r3, #3
 8008390:	fa22 f303 	lsr.w	r3, r2, r3
 8008394:	b2da      	uxtb	r2, r3
 8008396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008398:	701a      	strb	r2, [r3, #0]
      i++;
 800839a:	6a3b      	ldr	r3, [r7, #32]
 800839c:	3301      	adds	r3, #1
 800839e:	623b      	str	r3, [r7, #32]
      pDest++;
 80083a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a2:	3301      	adds	r3, #1
 80083a4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80083a6:	8bfb      	ldrh	r3, [r7, #30]
 80083a8:	3b01      	subs	r3, #1
 80083aa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80083ac:	8bfb      	ldrh	r3, [r7, #30]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d1ea      	bne.n	8008388 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80083b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	372c      	adds	r7, #44	; 0x2c
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr

080083c0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b085      	sub	sp, #20
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	695b      	ldr	r3, [r3, #20]
 80083cc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	699b      	ldr	r3, [r3, #24]
 80083d2:	68fa      	ldr	r2, [r7, #12]
 80083d4:	4013      	ands	r3, r2
 80083d6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80083d8:	68fb      	ldr	r3, [r7, #12]
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3714      	adds	r7, #20
 80083de:	46bd      	mov	sp, r7
 80083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e4:	4770      	bx	lr

080083e6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80083e6:	b480      	push	{r7}
 80083e8:	b083      	sub	sp, #12
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	695b      	ldr	r3, [r3, #20]
 80083f2:	f003 0301 	and.w	r3, r3, #1
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	370c      	adds	r7, #12
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr
	...

08008404 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008404:	b480      	push	{r7}
 8008406:	b085      	sub	sp, #20
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800840c:	2300      	movs	r3, #0
 800840e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	3301      	adds	r3, #1
 8008414:	60fb      	str	r3, [r7, #12]
 8008416:	4a13      	ldr	r2, [pc, #76]	; (8008464 <USB_CoreReset+0x60>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d901      	bls.n	8008420 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800841c:	2303      	movs	r3, #3
 800841e:	e01a      	b.n	8008456 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	691b      	ldr	r3, [r3, #16]
 8008424:	2b00      	cmp	r3, #0
 8008426:	daf3      	bge.n	8008410 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008428:	2300      	movs	r3, #0
 800842a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	691b      	ldr	r3, [r3, #16]
 8008430:	f043 0201 	orr.w	r2, r3, #1
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	3301      	adds	r3, #1
 800843c:	60fb      	str	r3, [r7, #12]
 800843e:	4a09      	ldr	r2, [pc, #36]	; (8008464 <USB_CoreReset+0x60>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d901      	bls.n	8008448 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8008444:	2303      	movs	r3, #3
 8008446:	e006      	b.n	8008456 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	691b      	ldr	r3, [r3, #16]
 800844c:	f003 0301 	and.w	r3, r3, #1
 8008450:	2b01      	cmp	r3, #1
 8008452:	d0f1      	beq.n	8008438 <USB_CoreReset+0x34>

  return HAL_OK;
 8008454:	2300      	movs	r3, #0
}
 8008456:	4618      	mov	r0, r3
 8008458:	3714      	adds	r7, #20
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr
 8008462:	bf00      	nop
 8008464:	00030d40 	.word	0x00030d40

08008468 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008468:	b084      	sub	sp, #16
 800846a:	b580      	push	{r7, lr}
 800846c:	b084      	sub	sp, #16
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
 8008472:	f107 001c 	add.w	r0, r7, #28
 8008476:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008484:	461a      	mov	r2, r3
 8008486:	2300      	movs	r3, #0
 8008488:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800848e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800849a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084a6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d018      	beq.n	80084ec <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80084ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d10a      	bne.n	80084d6 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	68ba      	ldr	r2, [r7, #8]
 80084ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80084ce:	f043 0304 	orr.w	r3, r3, #4
 80084d2:	6013      	str	r3, [r2, #0]
 80084d4:	e014      	b.n	8008500 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	68ba      	ldr	r2, [r7, #8]
 80084e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80084e4:	f023 0304 	bic.w	r3, r3, #4
 80084e8:	6013      	str	r3, [r2, #0]
 80084ea:	e009      	b.n	8008500 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	68ba      	ldr	r2, [r7, #8]
 80084f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80084fa:	f023 0304 	bic.w	r3, r3, #4
 80084fe:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8008500:	2110      	movs	r1, #16
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f7ff fe82 	bl	800820c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f7ff fea3 	bl	8008254 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800850e:	2300      	movs	r3, #0
 8008510:	60fb      	str	r3, [r7, #12]
 8008512:	e015      	b.n	8008540 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	015a      	lsls	r2, r3, #5
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	4413      	add	r3, r2
 800851c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008520:	461a      	mov	r2, r3
 8008522:	f04f 33ff 	mov.w	r3, #4294967295
 8008526:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	015a      	lsls	r2, r3, #5
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	4413      	add	r3, r2
 8008530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008534:	461a      	mov	r2, r3
 8008536:	2300      	movs	r3, #0
 8008538:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	3301      	adds	r3, #1
 800853e:	60fb      	str	r3, [r7, #12]
 8008540:	6a3b      	ldr	r3, [r7, #32]
 8008542:	68fa      	ldr	r2, [r7, #12]
 8008544:	429a      	cmp	r2, r3
 8008546:	d3e5      	bcc.n	8008514 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2200      	movs	r2, #0
 800854c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f04f 32ff 	mov.w	r2, #4294967295
 8008554:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800855a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800855e:	2b00      	cmp	r3, #0
 8008560:	d00b      	beq.n	800857a <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008568:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4a13      	ldr	r2, [pc, #76]	; (80085bc <USB_HostInit+0x154>)
 800856e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	4a13      	ldr	r2, [pc, #76]	; (80085c0 <USB_HostInit+0x158>)
 8008574:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008578:	e009      	b.n	800858e <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2280      	movs	r2, #128	; 0x80
 800857e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	4a10      	ldr	r2, [pc, #64]	; (80085c4 <USB_HostInit+0x15c>)
 8008584:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	4a0f      	ldr	r2, [pc, #60]	; (80085c8 <USB_HostInit+0x160>)
 800858a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800858e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008590:	2b00      	cmp	r3, #0
 8008592:	d105      	bne.n	80085a0 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	699b      	ldr	r3, [r3, #24]
 8008598:	f043 0210 	orr.w	r2, r3, #16
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	699a      	ldr	r2, [r3, #24]
 80085a4:	4b09      	ldr	r3, [pc, #36]	; (80085cc <USB_HostInit+0x164>)
 80085a6:	4313      	orrs	r3, r2
 80085a8:	687a      	ldr	r2, [r7, #4]
 80085aa:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80085ac:	2300      	movs	r3, #0
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3710      	adds	r7, #16
 80085b2:	46bd      	mov	sp, r7
 80085b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80085b8:	b004      	add	sp, #16
 80085ba:	4770      	bx	lr
 80085bc:	01000200 	.word	0x01000200
 80085c0:	00e00300 	.word	0x00e00300
 80085c4:	00600080 	.word	0x00600080
 80085c8:	004000e0 	.word	0x004000e0
 80085cc:	a3200008 	.word	0xa3200008

080085d0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b085      	sub	sp, #20
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	460b      	mov	r3, r1
 80085da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	68fa      	ldr	r2, [r7, #12]
 80085ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80085ee:	f023 0303 	bic.w	r3, r3, #3
 80085f2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80085fa:	681a      	ldr	r2, [r3, #0]
 80085fc:	78fb      	ldrb	r3, [r7, #3]
 80085fe:	f003 0303 	and.w	r3, r3, #3
 8008602:	68f9      	ldr	r1, [r7, #12]
 8008604:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008608:	4313      	orrs	r3, r2
 800860a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800860c:	78fb      	ldrb	r3, [r7, #3]
 800860e:	2b01      	cmp	r3, #1
 8008610:	d107      	bne.n	8008622 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008618:	461a      	mov	r2, r3
 800861a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800861e:	6053      	str	r3, [r2, #4]
 8008620:	e009      	b.n	8008636 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008622:	78fb      	ldrb	r3, [r7, #3]
 8008624:	2b02      	cmp	r3, #2
 8008626:	d106      	bne.n	8008636 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800862e:	461a      	mov	r2, r3
 8008630:	f241 7370 	movw	r3, #6000	; 0x1770
 8008634:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008636:	2300      	movs	r3, #0
}
 8008638:	4618      	mov	r0, r3
 800863a:	3714      	adds	r7, #20
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr

08008644 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b084      	sub	sp, #16
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008650:	2300      	movs	r3, #0
 8008652:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008664:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	68fa      	ldr	r2, [r7, #12]
 800866a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800866e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008672:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008674:	2064      	movs	r0, #100	; 0x64
 8008676:	f7f9 fca1 	bl	8001fbc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	68fa      	ldr	r2, [r7, #12]
 800867e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008682:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008686:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008688:	200a      	movs	r0, #10
 800868a:	f7f9 fc97 	bl	8001fbc <HAL_Delay>

  return HAL_OK;
 800868e:	2300      	movs	r3, #0
}
 8008690:	4618      	mov	r0, r3
 8008692:	3710      	adds	r7, #16
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008698:	b480      	push	{r7}
 800869a:	b085      	sub	sp, #20
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	460b      	mov	r3, r1
 80086a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80086a8:	2300      	movs	r3, #0
 80086aa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80086bc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d109      	bne.n	80086dc <USB_DriveVbus+0x44>
 80086c8:	78fb      	ldrb	r3, [r7, #3]
 80086ca:	2b01      	cmp	r3, #1
 80086cc:	d106      	bne.n	80086dc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	68fa      	ldr	r2, [r7, #12]
 80086d2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80086d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80086da:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80086e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086e6:	d109      	bne.n	80086fc <USB_DriveVbus+0x64>
 80086e8:	78fb      	ldrb	r3, [r7, #3]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d106      	bne.n	80086fc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	68fa      	ldr	r2, [r7, #12]
 80086f2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80086f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80086fa:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80086fc:	2300      	movs	r3, #0
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3714      	adds	r7, #20
 8008702:	46bd      	mov	sp, r7
 8008704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008708:	4770      	bx	lr

0800870a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800870a:	b480      	push	{r7}
 800870c:	b085      	sub	sp, #20
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008716:	2300      	movs	r3, #0
 8008718:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	0c5b      	lsrs	r3, r3, #17
 8008728:	f003 0303 	and.w	r3, r3, #3
}
 800872c:	4618      	mov	r0, r3
 800872e:	3714      	adds	r7, #20
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr

08008738 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008738:	b480      	push	{r7}
 800873a:	b085      	sub	sp, #20
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800874a:	689b      	ldr	r3, [r3, #8]
 800874c:	b29b      	uxth	r3, r3
}
 800874e:	4618      	mov	r0, r3
 8008750:	3714      	adds	r7, #20
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr
	...

0800875c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b088      	sub	sp, #32
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	4608      	mov	r0, r1
 8008766:	4611      	mov	r1, r2
 8008768:	461a      	mov	r2, r3
 800876a:	4603      	mov	r3, r0
 800876c:	70fb      	strb	r3, [r7, #3]
 800876e:	460b      	mov	r3, r1
 8008770:	70bb      	strb	r3, [r7, #2]
 8008772:	4613      	mov	r3, r2
 8008774:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008776:	2300      	movs	r3, #0
 8008778:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800877e:	78fb      	ldrb	r3, [r7, #3]
 8008780:	015a      	lsls	r2, r3, #5
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	4413      	add	r3, r2
 8008786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800878a:	461a      	mov	r2, r3
 800878c:	f04f 33ff 	mov.w	r3, #4294967295
 8008790:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008792:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008796:	2b03      	cmp	r3, #3
 8008798:	d87e      	bhi.n	8008898 <USB_HC_Init+0x13c>
 800879a:	a201      	add	r2, pc, #4	; (adr r2, 80087a0 <USB_HC_Init+0x44>)
 800879c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087a0:	080087b1 	.word	0x080087b1
 80087a4:	0800885b 	.word	0x0800885b
 80087a8:	080087b1 	.word	0x080087b1
 80087ac:	0800881d 	.word	0x0800881d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80087b0:	78fb      	ldrb	r3, [r7, #3]
 80087b2:	015a      	lsls	r2, r3, #5
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	4413      	add	r3, r2
 80087b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087bc:	461a      	mov	r2, r3
 80087be:	f240 439d 	movw	r3, #1181	; 0x49d
 80087c2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80087c4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	da10      	bge.n	80087ee <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80087cc:	78fb      	ldrb	r3, [r7, #3]
 80087ce:	015a      	lsls	r2, r3, #5
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	4413      	add	r3, r2
 80087d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087d8:	68db      	ldr	r3, [r3, #12]
 80087da:	78fa      	ldrb	r2, [r7, #3]
 80087dc:	0151      	lsls	r1, r2, #5
 80087de:	693a      	ldr	r2, [r7, #16]
 80087e0:	440a      	add	r2, r1
 80087e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087ea:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80087ec:	e057      	b.n	800889e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d051      	beq.n	800889e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80087fa:	78fb      	ldrb	r3, [r7, #3]
 80087fc:	015a      	lsls	r2, r3, #5
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	4413      	add	r3, r2
 8008802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008806:	68db      	ldr	r3, [r3, #12]
 8008808:	78fa      	ldrb	r2, [r7, #3]
 800880a:	0151      	lsls	r1, r2, #5
 800880c:	693a      	ldr	r2, [r7, #16]
 800880e:	440a      	add	r2, r1
 8008810:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008814:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008818:	60d3      	str	r3, [r2, #12]
      break;
 800881a:	e040      	b.n	800889e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800881c:	78fb      	ldrb	r3, [r7, #3]
 800881e:	015a      	lsls	r2, r3, #5
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	4413      	add	r3, r2
 8008824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008828:	461a      	mov	r2, r3
 800882a:	f240 639d 	movw	r3, #1693	; 0x69d
 800882e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008830:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008834:	2b00      	cmp	r3, #0
 8008836:	da34      	bge.n	80088a2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008838:	78fb      	ldrb	r3, [r7, #3]
 800883a:	015a      	lsls	r2, r3, #5
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	4413      	add	r3, r2
 8008840:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008844:	68db      	ldr	r3, [r3, #12]
 8008846:	78fa      	ldrb	r2, [r7, #3]
 8008848:	0151      	lsls	r1, r2, #5
 800884a:	693a      	ldr	r2, [r7, #16]
 800884c:	440a      	add	r2, r1
 800884e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008856:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008858:	e023      	b.n	80088a2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800885a:	78fb      	ldrb	r3, [r7, #3]
 800885c:	015a      	lsls	r2, r3, #5
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	4413      	add	r3, r2
 8008862:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008866:	461a      	mov	r2, r3
 8008868:	f240 2325 	movw	r3, #549	; 0x225
 800886c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800886e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008872:	2b00      	cmp	r3, #0
 8008874:	da17      	bge.n	80088a6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008876:	78fb      	ldrb	r3, [r7, #3]
 8008878:	015a      	lsls	r2, r3, #5
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	4413      	add	r3, r2
 800887e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008882:	68db      	ldr	r3, [r3, #12]
 8008884:	78fa      	ldrb	r2, [r7, #3]
 8008886:	0151      	lsls	r1, r2, #5
 8008888:	693a      	ldr	r2, [r7, #16]
 800888a:	440a      	add	r2, r1
 800888c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008890:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008894:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008896:	e006      	b.n	80088a6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008898:	2301      	movs	r3, #1
 800889a:	77fb      	strb	r3, [r7, #31]
      break;
 800889c:	e004      	b.n	80088a8 <USB_HC_Init+0x14c>
      break;
 800889e:	bf00      	nop
 80088a0:	e002      	b.n	80088a8 <USB_HC_Init+0x14c>
      break;
 80088a2:	bf00      	nop
 80088a4:	e000      	b.n	80088a8 <USB_HC_Init+0x14c>
      break;
 80088a6:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80088ae:	699a      	ldr	r2, [r3, #24]
 80088b0:	78fb      	ldrb	r3, [r7, #3]
 80088b2:	f003 030f 	and.w	r3, r3, #15
 80088b6:	2101      	movs	r1, #1
 80088b8:	fa01 f303 	lsl.w	r3, r1, r3
 80088bc:	6939      	ldr	r1, [r7, #16]
 80088be:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80088c2:	4313      	orrs	r3, r2
 80088c4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	699b      	ldr	r3, [r3, #24]
 80088ca:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80088d2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	da03      	bge.n	80088e2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80088da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088de:	61bb      	str	r3, [r7, #24]
 80088e0:	e001      	b.n	80088e6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80088e2:	2300      	movs	r3, #0
 80088e4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f7ff ff0f 	bl	800870a <USB_GetHostSpeed>
 80088ec:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80088ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80088f2:	2b02      	cmp	r3, #2
 80088f4:	d106      	bne.n	8008904 <USB_HC_Init+0x1a8>
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2b02      	cmp	r3, #2
 80088fa:	d003      	beq.n	8008904 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80088fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008900:	617b      	str	r3, [r7, #20]
 8008902:	e001      	b.n	8008908 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008904:	2300      	movs	r3, #0
 8008906:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008908:	787b      	ldrb	r3, [r7, #1]
 800890a:	059b      	lsls	r3, r3, #22
 800890c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008910:	78bb      	ldrb	r3, [r7, #2]
 8008912:	02db      	lsls	r3, r3, #11
 8008914:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008918:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800891a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800891e:	049b      	lsls	r3, r3, #18
 8008920:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008924:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008926:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008928:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800892c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800892e:	69bb      	ldr	r3, [r7, #24]
 8008930:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008932:	78fb      	ldrb	r3, [r7, #3]
 8008934:	0159      	lsls	r1, r3, #5
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	440b      	add	r3, r1
 800893a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800893e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008944:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8008946:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800894a:	2b03      	cmp	r3, #3
 800894c:	d10f      	bne.n	800896e <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800894e:	78fb      	ldrb	r3, [r7, #3]
 8008950:	015a      	lsls	r2, r3, #5
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	4413      	add	r3, r2
 8008956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	78fa      	ldrb	r2, [r7, #3]
 800895e:	0151      	lsls	r1, r2, #5
 8008960:	693a      	ldr	r2, [r7, #16]
 8008962:	440a      	add	r2, r1
 8008964:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008968:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800896c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800896e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008970:	4618      	mov	r0, r3
 8008972:	3720      	adds	r7, #32
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b08c      	sub	sp, #48	; 0x30
 800897c:	af02      	add	r7, sp, #8
 800897e:	60f8      	str	r0, [r7, #12]
 8008980:	60b9      	str	r1, [r7, #8]
 8008982:	4613      	mov	r3, r2
 8008984:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	785b      	ldrb	r3, [r3, #1]
 800898e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008990:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008994:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800899a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d02d      	beq.n	80089fe <USB_HC_StartXfer+0x86>
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	791b      	ldrb	r3, [r3, #4]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d129      	bne.n	80089fe <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80089aa:	79fb      	ldrb	r3, [r7, #7]
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d117      	bne.n	80089e0 <USB_HC_StartXfer+0x68>
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	79db      	ldrb	r3, [r3, #7]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d003      	beq.n	80089c0 <USB_HC_StartXfer+0x48>
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	79db      	ldrb	r3, [r3, #7]
 80089bc:	2b02      	cmp	r3, #2
 80089be:	d10f      	bne.n	80089e0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80089c0:	69fb      	ldr	r3, [r7, #28]
 80089c2:	015a      	lsls	r2, r3, #5
 80089c4:	6a3b      	ldr	r3, [r7, #32]
 80089c6:	4413      	add	r3, r2
 80089c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089cc:	68db      	ldr	r3, [r3, #12]
 80089ce:	69fa      	ldr	r2, [r7, #28]
 80089d0:	0151      	lsls	r1, r2, #5
 80089d2:	6a3a      	ldr	r2, [r7, #32]
 80089d4:	440a      	add	r2, r1
 80089d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80089da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089de:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80089e0:	79fb      	ldrb	r3, [r7, #7]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d10b      	bne.n	80089fe <USB_HC_StartXfer+0x86>
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	795b      	ldrb	r3, [r3, #5]
 80089ea:	2b01      	cmp	r3, #1
 80089ec:	d107      	bne.n	80089fe <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	785b      	ldrb	r3, [r3, #1]
 80089f2:	4619      	mov	r1, r3
 80089f4:	68f8      	ldr	r0, [r7, #12]
 80089f6:	f000 fa2f 	bl	8008e58 <USB_DoPing>
      return HAL_OK;
 80089fa:	2300      	movs	r3, #0
 80089fc:	e0f8      	b.n	8008bf0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	695b      	ldr	r3, [r3, #20]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d018      	beq.n	8008a38 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	695b      	ldr	r3, [r3, #20]
 8008a0a:	68ba      	ldr	r2, [r7, #8]
 8008a0c:	8912      	ldrh	r2, [r2, #8]
 8008a0e:	4413      	add	r3, r2
 8008a10:	3b01      	subs	r3, #1
 8008a12:	68ba      	ldr	r2, [r7, #8]
 8008a14:	8912      	ldrh	r2, [r2, #8]
 8008a16:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a1a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8008a1c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008a1e:	8b7b      	ldrh	r3, [r7, #26]
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d90b      	bls.n	8008a3c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8008a24:	8b7b      	ldrh	r3, [r7, #26]
 8008a26:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008a28:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008a2a:	68ba      	ldr	r2, [r7, #8]
 8008a2c:	8912      	ldrh	r2, [r2, #8]
 8008a2e:	fb02 f203 	mul.w	r2, r2, r3
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	611a      	str	r2, [r3, #16]
 8008a36:	e001      	b.n	8008a3c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	78db      	ldrb	r3, [r3, #3]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d007      	beq.n	8008a54 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008a44:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008a46:	68ba      	ldr	r2, [r7, #8]
 8008a48:	8912      	ldrh	r2, [r2, #8]
 8008a4a:	fb02 f203 	mul.w	r2, r2, r3
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	611a      	str	r2, [r3, #16]
 8008a52:	e003      	b.n	8008a5c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	695a      	ldr	r2, [r3, #20]
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	691b      	ldr	r3, [r3, #16]
 8008a60:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008a64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008a66:	04d9      	lsls	r1, r3, #19
 8008a68:	4b63      	ldr	r3, [pc, #396]	; (8008bf8 <USB_HC_StartXfer+0x280>)
 8008a6a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008a6c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	7a9b      	ldrb	r3, [r3, #10]
 8008a72:	075b      	lsls	r3, r3, #29
 8008a74:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008a78:	69f9      	ldr	r1, [r7, #28]
 8008a7a:	0148      	lsls	r0, r1, #5
 8008a7c:	6a39      	ldr	r1, [r7, #32]
 8008a7e:	4401      	add	r1, r0
 8008a80:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008a84:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008a86:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008a88:	79fb      	ldrb	r3, [r7, #7]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d009      	beq.n	8008aa2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	68d9      	ldr	r1, [r3, #12]
 8008a92:	69fb      	ldr	r3, [r7, #28]
 8008a94:	015a      	lsls	r2, r3, #5
 8008a96:	6a3b      	ldr	r3, [r7, #32]
 8008a98:	4413      	add	r3, r2
 8008a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a9e:	460a      	mov	r2, r1
 8008aa0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008aa2:	6a3b      	ldr	r3, [r7, #32]
 8008aa4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	f003 0301 	and.w	r3, r3, #1
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	bf0c      	ite	eq
 8008ab2:	2301      	moveq	r3, #1
 8008ab4:	2300      	movne	r3, #0
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	015a      	lsls	r2, r3, #5
 8008abe:	6a3b      	ldr	r3, [r7, #32]
 8008ac0:	4413      	add	r3, r2
 8008ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	69fa      	ldr	r2, [r7, #28]
 8008aca:	0151      	lsls	r1, r2, #5
 8008acc:	6a3a      	ldr	r2, [r7, #32]
 8008ace:	440a      	add	r2, r1
 8008ad0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ad4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008ad8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008ada:	69fb      	ldr	r3, [r7, #28]
 8008adc:	015a      	lsls	r2, r3, #5
 8008ade:	6a3b      	ldr	r3, [r7, #32]
 8008ae0:	4413      	add	r3, r2
 8008ae2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ae6:	681a      	ldr	r2, [r3, #0]
 8008ae8:	7e7b      	ldrb	r3, [r7, #25]
 8008aea:	075b      	lsls	r3, r3, #29
 8008aec:	69f9      	ldr	r1, [r7, #28]
 8008aee:	0148      	lsls	r0, r1, #5
 8008af0:	6a39      	ldr	r1, [r7, #32]
 8008af2:	4401      	add	r1, r0
 8008af4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008af8:	4313      	orrs	r3, r2
 8008afa:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008afc:	69fb      	ldr	r3, [r7, #28]
 8008afe:	015a      	lsls	r2, r3, #5
 8008b00:	6a3b      	ldr	r3, [r7, #32]
 8008b02:	4413      	add	r3, r2
 8008b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008b12:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	78db      	ldrb	r3, [r3, #3]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d004      	beq.n	8008b26 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b22:	613b      	str	r3, [r7, #16]
 8008b24:	e003      	b.n	8008b2e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008b2c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b34:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008b36:	69fb      	ldr	r3, [r7, #28]
 8008b38:	015a      	lsls	r2, r3, #5
 8008b3a:	6a3b      	ldr	r3, [r7, #32]
 8008b3c:	4413      	add	r3, r2
 8008b3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b42:	461a      	mov	r2, r3
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008b48:	79fb      	ldrb	r3, [r7, #7]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d001      	beq.n	8008b52 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	e04e      	b.n	8008bf0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	78db      	ldrb	r3, [r3, #3]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d149      	bne.n	8008bee <USB_HC_StartXfer+0x276>
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	695b      	ldr	r3, [r3, #20]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d045      	beq.n	8008bee <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	79db      	ldrb	r3, [r3, #7]
 8008b66:	2b03      	cmp	r3, #3
 8008b68:	d830      	bhi.n	8008bcc <USB_HC_StartXfer+0x254>
 8008b6a:	a201      	add	r2, pc, #4	; (adr r2, 8008b70 <USB_HC_StartXfer+0x1f8>)
 8008b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b70:	08008b81 	.word	0x08008b81
 8008b74:	08008ba5 	.word	0x08008ba5
 8008b78:	08008b81 	.word	0x08008b81
 8008b7c:	08008ba5 	.word	0x08008ba5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	695b      	ldr	r3, [r3, #20]
 8008b84:	3303      	adds	r3, #3
 8008b86:	089b      	lsrs	r3, r3, #2
 8008b88:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008b8a:	8afa      	ldrh	r2, [r7, #22]
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d91c      	bls.n	8008bd0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	699b      	ldr	r3, [r3, #24]
 8008b9a:	f043 0220 	orr.w	r2, r3, #32
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	619a      	str	r2, [r3, #24]
        }
        break;
 8008ba2:	e015      	b.n	8008bd0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	695b      	ldr	r3, [r3, #20]
 8008ba8:	3303      	adds	r3, #3
 8008baa:	089b      	lsrs	r3, r3, #2
 8008bac:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008bae:	8afa      	ldrh	r2, [r7, #22]
 8008bb0:	6a3b      	ldr	r3, [r7, #32]
 8008bb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008bb6:	691b      	ldr	r3, [r3, #16]
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d90a      	bls.n	8008bd4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	699b      	ldr	r3, [r3, #24]
 8008bc2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	619a      	str	r2, [r3, #24]
        }
        break;
 8008bca:	e003      	b.n	8008bd4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008bcc:	bf00      	nop
 8008bce:	e002      	b.n	8008bd6 <USB_HC_StartXfer+0x25e>
        break;
 8008bd0:	bf00      	nop
 8008bd2:	e000      	b.n	8008bd6 <USB_HC_StartXfer+0x25e>
        break;
 8008bd4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	68d9      	ldr	r1, [r3, #12]
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	785a      	ldrb	r2, [r3, #1]
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	695b      	ldr	r3, [r3, #20]
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	2000      	movs	r0, #0
 8008be6:	9000      	str	r0, [sp, #0]
 8008be8:	68f8      	ldr	r0, [r7, #12]
 8008bea:	f7ff fb53 	bl	8008294 <USB_WritePacket>
  }

  return HAL_OK;
 8008bee:	2300      	movs	r3, #0
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3728      	adds	r7, #40	; 0x28
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}
 8008bf8:	1ff80000 	.word	0x1ff80000

08008bfc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b085      	sub	sp, #20
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c0e:	695b      	ldr	r3, [r3, #20]
 8008c10:	b29b      	uxth	r3, r3
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3714      	adds	r7, #20
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr

08008c1e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008c1e:	b480      	push	{r7}
 8008c20:	b089      	sub	sp, #36	; 0x24
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	6078      	str	r0, [r7, #4]
 8008c26:	460b      	mov	r3, r1
 8008c28:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8008c2e:	78fb      	ldrb	r3, [r7, #3]
 8008c30:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8008c32:	2300      	movs	r3, #0
 8008c34:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	015a      	lsls	r2, r3, #5
 8008c3a:	69bb      	ldr	r3, [r7, #24]
 8008c3c:	4413      	add	r3, r2
 8008c3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	0c9b      	lsrs	r3, r3, #18
 8008c46:	f003 0303 	and.w	r3, r3, #3
 8008c4a:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	015a      	lsls	r2, r3, #5
 8008c50:	69bb      	ldr	r3, [r7, #24]
 8008c52:	4413      	add	r3, r2
 8008c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	0fdb      	lsrs	r3, r3, #31
 8008c5c:	f003 0301 	and.w	r3, r3, #1
 8008c60:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	689b      	ldr	r3, [r3, #8]
 8008c66:	f003 0320 	and.w	r3, r3, #32
 8008c6a:	2b20      	cmp	r3, #32
 8008c6c:	d104      	bne.n	8008c78 <USB_HC_Halt+0x5a>
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d101      	bne.n	8008c78 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008c74:	2300      	movs	r3, #0
 8008c76:	e0e8      	b.n	8008e4a <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d002      	beq.n	8008c84 <USB_HC_Halt+0x66>
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	2b02      	cmp	r3, #2
 8008c82:	d173      	bne.n	8008d6c <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	015a      	lsls	r2, r3, #5
 8008c88:	69bb      	ldr	r3, [r7, #24]
 8008c8a:	4413      	add	r3, r2
 8008c8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	697a      	ldr	r2, [r7, #20]
 8008c94:	0151      	lsls	r1, r2, #5
 8008c96:	69ba      	ldr	r2, [r7, #24]
 8008c98:	440a      	add	r2, r1
 8008c9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ca2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	f003 0320 	and.w	r3, r3, #32
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	f040 80cb 	bne.w	8008e48 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d143      	bne.n	8008d46 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	015a      	lsls	r2, r3, #5
 8008cc2:	69bb      	ldr	r3, [r7, #24]
 8008cc4:	4413      	add	r3, r2
 8008cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	697a      	ldr	r2, [r7, #20]
 8008cce:	0151      	lsls	r1, r2, #5
 8008cd0:	69ba      	ldr	r2, [r7, #24]
 8008cd2:	440a      	add	r2, r1
 8008cd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008cd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008cdc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	015a      	lsls	r2, r3, #5
 8008ce2:	69bb      	ldr	r3, [r7, #24]
 8008ce4:	4413      	add	r3, r2
 8008ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	697a      	ldr	r2, [r7, #20]
 8008cee:	0151      	lsls	r1, r2, #5
 8008cf0:	69ba      	ldr	r2, [r7, #24]
 8008cf2:	440a      	add	r2, r1
 8008cf4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008cf8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008cfc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	015a      	lsls	r2, r3, #5
 8008d02:	69bb      	ldr	r3, [r7, #24]
 8008d04:	4413      	add	r3, r2
 8008d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	697a      	ldr	r2, [r7, #20]
 8008d0e:	0151      	lsls	r1, r2, #5
 8008d10:	69ba      	ldr	r2, [r7, #24]
 8008d12:	440a      	add	r2, r1
 8008d14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d18:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008d1c:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8008d1e:	69fb      	ldr	r3, [r7, #28]
 8008d20:	3301      	adds	r3, #1
 8008d22:	61fb      	str	r3, [r7, #28]
 8008d24:	69fb      	ldr	r3, [r7, #28]
 8008d26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d2a:	d81d      	bhi.n	8008d68 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	015a      	lsls	r2, r3, #5
 8008d30:	69bb      	ldr	r3, [r7, #24]
 8008d32:	4413      	add	r3, r2
 8008d34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d42:	d0ec      	beq.n	8008d1e <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008d44:	e080      	b.n	8008e48 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	015a      	lsls	r2, r3, #5
 8008d4a:	69bb      	ldr	r3, [r7, #24]
 8008d4c:	4413      	add	r3, r2
 8008d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	697a      	ldr	r2, [r7, #20]
 8008d56:	0151      	lsls	r1, r2, #5
 8008d58:	69ba      	ldr	r2, [r7, #24]
 8008d5a:	440a      	add	r2, r1
 8008d5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008d64:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008d66:	e06f      	b.n	8008e48 <USB_HC_Halt+0x22a>
            break;
 8008d68:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008d6a:	e06d      	b.n	8008e48 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	015a      	lsls	r2, r3, #5
 8008d70:	69bb      	ldr	r3, [r7, #24]
 8008d72:	4413      	add	r3, r2
 8008d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	697a      	ldr	r2, [r7, #20]
 8008d7c:	0151      	lsls	r1, r2, #5
 8008d7e:	69ba      	ldr	r2, [r7, #24]
 8008d80:	440a      	add	r2, r1
 8008d82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d8a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008d8c:	69bb      	ldr	r3, [r7, #24]
 8008d8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d92:	691b      	ldr	r3, [r3, #16]
 8008d94:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d143      	bne.n	8008e24 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	015a      	lsls	r2, r3, #5
 8008da0:	69bb      	ldr	r3, [r7, #24]
 8008da2:	4413      	add	r3, r2
 8008da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	697a      	ldr	r2, [r7, #20]
 8008dac:	0151      	lsls	r1, r2, #5
 8008dae:	69ba      	ldr	r2, [r7, #24]
 8008db0:	440a      	add	r2, r1
 8008db2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008db6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008dba:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	015a      	lsls	r2, r3, #5
 8008dc0:	69bb      	ldr	r3, [r7, #24]
 8008dc2:	4413      	add	r3, r2
 8008dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	697a      	ldr	r2, [r7, #20]
 8008dcc:	0151      	lsls	r1, r2, #5
 8008dce:	69ba      	ldr	r2, [r7, #24]
 8008dd0:	440a      	add	r2, r1
 8008dd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008dd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008dda:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	015a      	lsls	r2, r3, #5
 8008de0:	69bb      	ldr	r3, [r7, #24]
 8008de2:	4413      	add	r3, r2
 8008de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	697a      	ldr	r2, [r7, #20]
 8008dec:	0151      	lsls	r1, r2, #5
 8008dee:	69ba      	ldr	r2, [r7, #24]
 8008df0:	440a      	add	r2, r1
 8008df2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008df6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008dfa:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008dfc:	69fb      	ldr	r3, [r7, #28]
 8008dfe:	3301      	adds	r3, #1
 8008e00:	61fb      	str	r3, [r7, #28]
 8008e02:	69fb      	ldr	r3, [r7, #28]
 8008e04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e08:	d81d      	bhi.n	8008e46 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	015a      	lsls	r2, r3, #5
 8008e0e:	69bb      	ldr	r3, [r7, #24]
 8008e10:	4413      	add	r3, r2
 8008e12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e20:	d0ec      	beq.n	8008dfc <USB_HC_Halt+0x1de>
 8008e22:	e011      	b.n	8008e48 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	015a      	lsls	r2, r3, #5
 8008e28:	69bb      	ldr	r3, [r7, #24]
 8008e2a:	4413      	add	r3, r2
 8008e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	697a      	ldr	r2, [r7, #20]
 8008e34:	0151      	lsls	r1, r2, #5
 8008e36:	69ba      	ldr	r2, [r7, #24]
 8008e38:	440a      	add	r2, r1
 8008e3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008e42:	6013      	str	r3, [r2, #0]
 8008e44:	e000      	b.n	8008e48 <USB_HC_Halt+0x22a>
          break;
 8008e46:	bf00      	nop
    }
  }

  return HAL_OK;
 8008e48:	2300      	movs	r3, #0
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3724      	adds	r7, #36	; 0x24
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e54:	4770      	bx	lr
	...

08008e58 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b087      	sub	sp, #28
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	460b      	mov	r3, r1
 8008e62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008e68:	78fb      	ldrb	r3, [r7, #3]
 8008e6a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	04da      	lsls	r2, r3, #19
 8008e74:	4b15      	ldr	r3, [pc, #84]	; (8008ecc <USB_DoPing+0x74>)
 8008e76:	4013      	ands	r3, r2
 8008e78:	693a      	ldr	r2, [r7, #16]
 8008e7a:	0151      	lsls	r1, r2, #5
 8008e7c:	697a      	ldr	r2, [r7, #20]
 8008e7e:	440a      	add	r2, r1
 8008e80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008e88:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	015a      	lsls	r2, r3, #5
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	4413      	add	r3, r2
 8008e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008ea0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008ea8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	015a      	lsls	r2, r3, #5
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	4413      	add	r3, r2
 8008eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008ebc:	2300      	movs	r3, #0
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	371c      	adds	r7, #28
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr
 8008eca:	bf00      	nop
 8008ecc:	1ff80000 	.word	0x1ff80000

08008ed0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b086      	sub	sp, #24
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008edc:	2300      	movs	r3, #0
 8008ede:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f7ff f935 	bl	8008150 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8008ee6:	2110      	movs	r1, #16
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f7ff f98f 	bl	800820c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f7ff f9b0 	bl	8008254 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	613b      	str	r3, [r7, #16]
 8008ef8:	e01f      	b.n	8008f3a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	015a      	lsls	r2, r3, #5
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	4413      	add	r3, r2
 8008f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f10:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008f18:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008f20:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	015a      	lsls	r2, r3, #5
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	4413      	add	r3, r2
 8008f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f2e:	461a      	mov	r2, r3
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	3301      	adds	r3, #1
 8008f38:	613b      	str	r3, [r7, #16]
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	2b0f      	cmp	r3, #15
 8008f3e:	d9dc      	bls.n	8008efa <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008f40:	2300      	movs	r3, #0
 8008f42:	613b      	str	r3, [r7, #16]
 8008f44:	e034      	b.n	8008fb0 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	015a      	lsls	r2, r3, #5
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	4413      	add	r3, r2
 8008f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f5c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008f64:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008f6c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	015a      	lsls	r2, r3, #5
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	4413      	add	r3, r2
 8008f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f7a:	461a      	mov	r2, r3
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	3301      	adds	r3, #1
 8008f84:	617b      	str	r3, [r7, #20]
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008f8c:	d80c      	bhi.n	8008fa8 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	015a      	lsls	r2, r3, #5
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	4413      	add	r3, r2
 8008f96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008fa0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008fa4:	d0ec      	beq.n	8008f80 <USB_StopHost+0xb0>
 8008fa6:	e000      	b.n	8008faa <USB_StopHost+0xda>
        break;
 8008fa8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	3301      	adds	r3, #1
 8008fae:	613b      	str	r3, [r7, #16]
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	2b0f      	cmp	r3, #15
 8008fb4:	d9c7      	bls.n	8008f46 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008fbc:	461a      	mov	r2, r3
 8008fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8008fc2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8008fca:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f7ff f8ae 	bl	800812e <USB_EnableGlobalInt>

  return HAL_OK;
 8008fd2:	2300      	movs	r3, #0
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3718      	adds	r7, #24
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008fdc:	b590      	push	{r4, r7, lr}
 8008fde:	b089      	sub	sp, #36	; 0x24
 8008fe0:	af04      	add	r7, sp, #16
 8008fe2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	2202      	movs	r2, #2
 8008fe8:	2102      	movs	r1, #2
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 fcb8 	bl	8009960 <USBH_FindInterface>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008ff4:	7bfb      	ldrb	r3, [r7, #15]
 8008ff6:	2bff      	cmp	r3, #255	; 0xff
 8008ff8:	d002      	beq.n	8009000 <USBH_CDC_InterfaceInit+0x24>
 8008ffa:	7bfb      	ldrb	r3, [r7, #15]
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d901      	bls.n	8009004 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009000:	2302      	movs	r3, #2
 8009002:	e13d      	b.n	8009280 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8009004:	7bfb      	ldrb	r3, [r7, #15]
 8009006:	4619      	mov	r1, r3
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f000 fc8d 	bl	8009928 <USBH_SelectInterface>
 800900e:	4603      	mov	r3, r0
 8009010:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009012:	7bbb      	ldrb	r3, [r7, #14]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d001      	beq.n	800901c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009018:	2302      	movs	r3, #2
 800901a:	e131      	b.n	8009280 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8009022:	2050      	movs	r0, #80	; 0x50
 8009024:	f004 fef0 	bl	800de08 <malloc>
 8009028:	4603      	mov	r3, r0
 800902a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009032:	69db      	ldr	r3, [r3, #28]
 8009034:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d101      	bne.n	8009040 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800903c:	2302      	movs	r3, #2
 800903e:	e11f      	b.n	8009280 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009040:	2250      	movs	r2, #80	; 0x50
 8009042:	2100      	movs	r1, #0
 8009044:	68b8      	ldr	r0, [r7, #8]
 8009046:	f004 fefd 	bl	800de44 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800904a:	7bfb      	ldrb	r3, [r7, #15]
 800904c:	687a      	ldr	r2, [r7, #4]
 800904e:	211a      	movs	r1, #26
 8009050:	fb01 f303 	mul.w	r3, r1, r3
 8009054:	4413      	add	r3, r2
 8009056:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	b25b      	sxtb	r3, r3
 800905e:	2b00      	cmp	r3, #0
 8009060:	da15      	bge.n	800908e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009062:	7bfb      	ldrb	r3, [r7, #15]
 8009064:	687a      	ldr	r2, [r7, #4]
 8009066:	211a      	movs	r1, #26
 8009068:	fb01 f303 	mul.w	r3, r1, r3
 800906c:	4413      	add	r3, r2
 800906e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009072:	781a      	ldrb	r2, [r3, #0]
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009078:	7bfb      	ldrb	r3, [r7, #15]
 800907a:	687a      	ldr	r2, [r7, #4]
 800907c:	211a      	movs	r1, #26
 800907e:	fb01 f303 	mul.w	r3, r1, r3
 8009082:	4413      	add	r3, r2
 8009084:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009088:	881a      	ldrh	r2, [r3, #0]
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	785b      	ldrb	r3, [r3, #1]
 8009092:	4619      	mov	r1, r3
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f002 f890 	bl	800b1ba <USBH_AllocPipe>
 800909a:	4603      	mov	r3, r0
 800909c:	461a      	mov	r2, r3
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	7819      	ldrb	r1, [r3, #0]
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	7858      	ldrb	r0, [r3, #1]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80090b6:	68ba      	ldr	r2, [r7, #8]
 80090b8:	8952      	ldrh	r2, [r2, #10]
 80090ba:	9202      	str	r2, [sp, #8]
 80090bc:	2203      	movs	r2, #3
 80090be:	9201      	str	r2, [sp, #4]
 80090c0:	9300      	str	r3, [sp, #0]
 80090c2:	4623      	mov	r3, r4
 80090c4:	4602      	mov	r2, r0
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f002 f848 	bl	800b15c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	781b      	ldrb	r3, [r3, #0]
 80090d0:	2200      	movs	r2, #0
 80090d2:	4619      	mov	r1, r3
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f004 fde7 	bl	800dca8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80090da:	2300      	movs	r3, #0
 80090dc:	2200      	movs	r2, #0
 80090de:	210a      	movs	r1, #10
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f000 fc3d 	bl	8009960 <USBH_FindInterface>
 80090e6:	4603      	mov	r3, r0
 80090e8:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80090ea:	7bfb      	ldrb	r3, [r7, #15]
 80090ec:	2bff      	cmp	r3, #255	; 0xff
 80090ee:	d002      	beq.n	80090f6 <USBH_CDC_InterfaceInit+0x11a>
 80090f0:	7bfb      	ldrb	r3, [r7, #15]
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	d901      	bls.n	80090fa <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80090f6:	2302      	movs	r3, #2
 80090f8:	e0c2      	b.n	8009280 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80090fa:	7bfb      	ldrb	r3, [r7, #15]
 80090fc:	687a      	ldr	r2, [r7, #4]
 80090fe:	211a      	movs	r1, #26
 8009100:	fb01 f303 	mul.w	r3, r1, r3
 8009104:	4413      	add	r3, r2
 8009106:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	b25b      	sxtb	r3, r3
 800910e:	2b00      	cmp	r3, #0
 8009110:	da16      	bge.n	8009140 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009112:	7bfb      	ldrb	r3, [r7, #15]
 8009114:	687a      	ldr	r2, [r7, #4]
 8009116:	211a      	movs	r1, #26
 8009118:	fb01 f303 	mul.w	r3, r1, r3
 800911c:	4413      	add	r3, r2
 800911e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009122:	781a      	ldrb	r2, [r3, #0]
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009128:	7bfb      	ldrb	r3, [r7, #15]
 800912a:	687a      	ldr	r2, [r7, #4]
 800912c:	211a      	movs	r1, #26
 800912e:	fb01 f303 	mul.w	r3, r1, r3
 8009132:	4413      	add	r3, r2
 8009134:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009138:	881a      	ldrh	r2, [r3, #0]
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	835a      	strh	r2, [r3, #26]
 800913e:	e015      	b.n	800916c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009140:	7bfb      	ldrb	r3, [r7, #15]
 8009142:	687a      	ldr	r2, [r7, #4]
 8009144:	211a      	movs	r1, #26
 8009146:	fb01 f303 	mul.w	r3, r1, r3
 800914a:	4413      	add	r3, r2
 800914c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009150:	781a      	ldrb	r2, [r3, #0]
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009156:	7bfb      	ldrb	r3, [r7, #15]
 8009158:	687a      	ldr	r2, [r7, #4]
 800915a:	211a      	movs	r1, #26
 800915c:	fb01 f303 	mul.w	r3, r1, r3
 8009160:	4413      	add	r3, r2
 8009162:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009166:	881a      	ldrh	r2, [r3, #0]
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800916c:	7bfb      	ldrb	r3, [r7, #15]
 800916e:	687a      	ldr	r2, [r7, #4]
 8009170:	211a      	movs	r1, #26
 8009172:	fb01 f303 	mul.w	r3, r1, r3
 8009176:	4413      	add	r3, r2
 8009178:	f203 3356 	addw	r3, r3, #854	; 0x356
 800917c:	781b      	ldrb	r3, [r3, #0]
 800917e:	b25b      	sxtb	r3, r3
 8009180:	2b00      	cmp	r3, #0
 8009182:	da16      	bge.n	80091b2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009184:	7bfb      	ldrb	r3, [r7, #15]
 8009186:	687a      	ldr	r2, [r7, #4]
 8009188:	211a      	movs	r1, #26
 800918a:	fb01 f303 	mul.w	r3, r1, r3
 800918e:	4413      	add	r3, r2
 8009190:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009194:	781a      	ldrb	r2, [r3, #0]
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800919a:	7bfb      	ldrb	r3, [r7, #15]
 800919c:	687a      	ldr	r2, [r7, #4]
 800919e:	211a      	movs	r1, #26
 80091a0:	fb01 f303 	mul.w	r3, r1, r3
 80091a4:	4413      	add	r3, r2
 80091a6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80091aa:	881a      	ldrh	r2, [r3, #0]
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	835a      	strh	r2, [r3, #26]
 80091b0:	e015      	b.n	80091de <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80091b2:	7bfb      	ldrb	r3, [r7, #15]
 80091b4:	687a      	ldr	r2, [r7, #4]
 80091b6:	211a      	movs	r1, #26
 80091b8:	fb01 f303 	mul.w	r3, r1, r3
 80091bc:	4413      	add	r3, r2
 80091be:	f203 3356 	addw	r3, r3, #854	; 0x356
 80091c2:	781a      	ldrb	r2, [r3, #0]
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80091c8:	7bfb      	ldrb	r3, [r7, #15]
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	211a      	movs	r1, #26
 80091ce:	fb01 f303 	mul.w	r3, r1, r3
 80091d2:	4413      	add	r3, r2
 80091d4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80091d8:	881a      	ldrh	r2, [r3, #0]
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	7b9b      	ldrb	r3, [r3, #14]
 80091e2:	4619      	mov	r1, r3
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f001 ffe8 	bl	800b1ba <USBH_AllocPipe>
 80091ea:	4603      	mov	r3, r0
 80091ec:	461a      	mov	r2, r3
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	7bdb      	ldrb	r3, [r3, #15]
 80091f6:	4619      	mov	r1, r3
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f001 ffde 	bl	800b1ba <USBH_AllocPipe>
 80091fe:	4603      	mov	r3, r0
 8009200:	461a      	mov	r2, r3
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	7b59      	ldrb	r1, [r3, #13]
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	7b98      	ldrb	r0, [r3, #14]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800921a:	68ba      	ldr	r2, [r7, #8]
 800921c:	8b12      	ldrh	r2, [r2, #24]
 800921e:	9202      	str	r2, [sp, #8]
 8009220:	2202      	movs	r2, #2
 8009222:	9201      	str	r2, [sp, #4]
 8009224:	9300      	str	r3, [sp, #0]
 8009226:	4623      	mov	r3, r4
 8009228:	4602      	mov	r2, r0
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f001 ff96 	bl	800b15c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	7b19      	ldrb	r1, [r3, #12]
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	7bd8      	ldrb	r0, [r3, #15]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009244:	68ba      	ldr	r2, [r7, #8]
 8009246:	8b52      	ldrh	r2, [r2, #26]
 8009248:	9202      	str	r2, [sp, #8]
 800924a:	2202      	movs	r2, #2
 800924c:	9201      	str	r2, [sp, #4]
 800924e:	9300      	str	r3, [sp, #0]
 8009250:	4623      	mov	r3, r4
 8009252:	4602      	mov	r2, r0
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f001 ff81 	bl	800b15c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	2200      	movs	r2, #0
 800925e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	7b5b      	ldrb	r3, [r3, #13]
 8009266:	2200      	movs	r2, #0
 8009268:	4619      	mov	r1, r3
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f004 fd1c 	bl	800dca8 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	7b1b      	ldrb	r3, [r3, #12]
 8009274:	2200      	movs	r2, #0
 8009276:	4619      	mov	r1, r3
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f004 fd15 	bl	800dca8 <USBH_LL_SetToggle>

  return USBH_OK;
 800927e:	2300      	movs	r3, #0
}
 8009280:	4618      	mov	r0, r3
 8009282:	3714      	adds	r7, #20
 8009284:	46bd      	mov	sp, r7
 8009286:	bd90      	pop	{r4, r7, pc}

08009288 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009296:	69db      	ldr	r3, [r3, #28]
 8009298:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	781b      	ldrb	r3, [r3, #0]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d00e      	beq.n	80092c0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	781b      	ldrb	r3, [r3, #0]
 80092a6:	4619      	mov	r1, r3
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f001 ff76 	bl	800b19a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	781b      	ldrb	r3, [r3, #0]
 80092b2:	4619      	mov	r1, r3
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f001 ffa1 	bl	800b1fc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	2200      	movs	r2, #0
 80092be:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	7b1b      	ldrb	r3, [r3, #12]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d00e      	beq.n	80092e6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	7b1b      	ldrb	r3, [r3, #12]
 80092cc:	4619      	mov	r1, r3
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f001 ff63 	bl	800b19a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	7b1b      	ldrb	r3, [r3, #12]
 80092d8:	4619      	mov	r1, r3
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f001 ff8e 	bl	800b1fc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	2200      	movs	r2, #0
 80092e4:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	7b5b      	ldrb	r3, [r3, #13]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d00e      	beq.n	800930c <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	7b5b      	ldrb	r3, [r3, #13]
 80092f2:	4619      	mov	r1, r3
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f001 ff50 	bl	800b19a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	7b5b      	ldrb	r3, [r3, #13]
 80092fe:	4619      	mov	r1, r3
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f001 ff7b 	bl	800b1fc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2200      	movs	r2, #0
 800930a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009312:	69db      	ldr	r3, [r3, #28]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d00b      	beq.n	8009330 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800931e:	69db      	ldr	r3, [r3, #28]
 8009320:	4618      	mov	r0, r3
 8009322:	f004 fd79 	bl	800de18 <free>
    phost->pActiveClass->pData = 0U;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800932c:	2200      	movs	r2, #0
 800932e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009330:	2300      	movs	r3, #0
}
 8009332:	4618      	mov	r0, r3
 8009334:	3710      	adds	r7, #16
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}

0800933a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800933a:	b580      	push	{r7, lr}
 800933c:	b084      	sub	sp, #16
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009348:	69db      	ldr	r3, [r3, #28]
 800934a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	3340      	adds	r3, #64	; 0x40
 8009350:	4619      	mov	r1, r3
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f000 f8b1 	bl	80094ba <GetLineCoding>
 8009358:	4603      	mov	r3, r0
 800935a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800935c:	7afb      	ldrb	r3, [r7, #11]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d105      	bne.n	800936e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009368:	2102      	movs	r1, #2
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800936e:	7afb      	ldrb	r3, [r7, #11]
}
 8009370:	4618      	mov	r0, r3
 8009372:	3710      	adds	r7, #16
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009380:	2301      	movs	r3, #1
 8009382:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009384:	2300      	movs	r3, #0
 8009386:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800938e:	69db      	ldr	r3, [r3, #28]
 8009390:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009398:	2b04      	cmp	r3, #4
 800939a:	d877      	bhi.n	800948c <USBH_CDC_Process+0x114>
 800939c:	a201      	add	r2, pc, #4	; (adr r2, 80093a4 <USBH_CDC_Process+0x2c>)
 800939e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093a2:	bf00      	nop
 80093a4:	080093b9 	.word	0x080093b9
 80093a8:	080093bf 	.word	0x080093bf
 80093ac:	080093ef 	.word	0x080093ef
 80093b0:	08009463 	.word	0x08009463
 80093b4:	08009471 	.word	0x08009471
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80093b8:	2300      	movs	r3, #0
 80093ba:	73fb      	strb	r3, [r7, #15]
      break;
 80093bc:	e06d      	b.n	800949a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093c2:	4619      	mov	r1, r3
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f000 f897 	bl	80094f8 <SetLineCoding>
 80093ca:	4603      	mov	r3, r0
 80093cc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80093ce:	7bbb      	ldrb	r3, [r7, #14]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d104      	bne.n	80093de <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	2202      	movs	r2, #2
 80093d8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80093dc:	e058      	b.n	8009490 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80093de:	7bbb      	ldrb	r3, [r7, #14]
 80093e0:	2b01      	cmp	r3, #1
 80093e2:	d055      	beq.n	8009490 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	2204      	movs	r2, #4
 80093e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80093ec:	e050      	b.n	8009490 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	3340      	adds	r3, #64	; 0x40
 80093f2:	4619      	mov	r1, r3
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f000 f860 	bl	80094ba <GetLineCoding>
 80093fa:	4603      	mov	r3, r0
 80093fc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80093fe:	7bbb      	ldrb	r3, [r7, #14]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d126      	bne.n	8009452 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	2200      	movs	r2, #0
 8009408:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009416:	791b      	ldrb	r3, [r3, #4]
 8009418:	429a      	cmp	r2, r3
 800941a:	d13b      	bne.n	8009494 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009426:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009428:	429a      	cmp	r2, r3
 800942a:	d133      	bne.n	8009494 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009436:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009438:	429a      	cmp	r2, r3
 800943a:	d12b      	bne.n	8009494 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009444:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009446:	429a      	cmp	r2, r3
 8009448:	d124      	bne.n	8009494 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 f982 	bl	8009754 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009450:	e020      	b.n	8009494 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009452:	7bbb      	ldrb	r3, [r7, #14]
 8009454:	2b01      	cmp	r3, #1
 8009456:	d01d      	beq.n	8009494 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	2204      	movs	r2, #4
 800945c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009460:	e018      	b.n	8009494 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f000 f867 	bl	8009536 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f000 f8f6 	bl	800965a <CDC_ProcessReception>
      break;
 800946e:	e014      	b.n	800949a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009470:	2100      	movs	r1, #0
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f001 f951 	bl	800a71a <USBH_ClrFeature>
 8009478:	4603      	mov	r3, r0
 800947a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800947c:	7bbb      	ldrb	r3, [r7, #14]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d10a      	bne.n	8009498 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	2200      	movs	r2, #0
 8009486:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800948a:	e005      	b.n	8009498 <USBH_CDC_Process+0x120>

    default:
      break;
 800948c:	bf00      	nop
 800948e:	e004      	b.n	800949a <USBH_CDC_Process+0x122>
      break;
 8009490:	bf00      	nop
 8009492:	e002      	b.n	800949a <USBH_CDC_Process+0x122>
      break;
 8009494:	bf00      	nop
 8009496:	e000      	b.n	800949a <USBH_CDC_Process+0x122>
      break;
 8009498:	bf00      	nop

  }

  return status;
 800949a:	7bfb      	ldrb	r3, [r7, #15]
}
 800949c:	4618      	mov	r0, r3
 800949e:	3710      	adds	r7, #16
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b083      	sub	sp, #12
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80094ac:	2300      	movs	r3, #0
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	370c      	adds	r7, #12
 80094b2:	46bd      	mov	sp, r7
 80094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b8:	4770      	bx	lr

080094ba <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80094ba:	b580      	push	{r7, lr}
 80094bc:	b082      	sub	sp, #8
 80094be:	af00      	add	r7, sp, #0
 80094c0:	6078      	str	r0, [r7, #4]
 80094c2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	22a1      	movs	r2, #161	; 0xa1
 80094c8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2221      	movs	r2, #33	; 0x21
 80094ce:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2200      	movs	r2, #0
 80094d4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2200      	movs	r2, #0
 80094da:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2207      	movs	r2, #7
 80094e0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	2207      	movs	r2, #7
 80094e6:	4619      	mov	r1, r3
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f001 faf6 	bl	800aada <USBH_CtlReq>
 80094ee:	4603      	mov	r3, r0
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3708      	adds	r7, #8
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2221      	movs	r2, #33	; 0x21
 8009506:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2220      	movs	r2, #32
 800950c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2200      	movs	r2, #0
 8009512:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2200      	movs	r2, #0
 8009518:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2207      	movs	r2, #7
 800951e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	2207      	movs	r2, #7
 8009524:	4619      	mov	r1, r3
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f001 fad7 	bl	800aada <USBH_CtlReq>
 800952c:	4603      	mov	r3, r0
}
 800952e:	4618      	mov	r0, r3
 8009530:	3708      	adds	r7, #8
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}

08009536 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8009536:	b580      	push	{r7, lr}
 8009538:	b086      	sub	sp, #24
 800953a:	af02      	add	r7, sp, #8
 800953c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009544:	69db      	ldr	r3, [r3, #28]
 8009546:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009548:	2300      	movs	r3, #0
 800954a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8009552:	2b01      	cmp	r3, #1
 8009554:	d002      	beq.n	800955c <CDC_ProcessTransmission+0x26>
 8009556:	2b02      	cmp	r3, #2
 8009558:	d023      	beq.n	80095a2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800955a:	e07a      	b.n	8009652 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009560:	68fa      	ldr	r2, [r7, #12]
 8009562:	8b12      	ldrh	r2, [r2, #24]
 8009564:	4293      	cmp	r3, r2
 8009566:	d90b      	bls.n	8009580 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	69d9      	ldr	r1, [r3, #28]
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	8b1a      	ldrh	r2, [r3, #24]
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	7b5b      	ldrb	r3, [r3, #13]
 8009574:	2001      	movs	r0, #1
 8009576:	9000      	str	r0, [sp, #0]
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f001 fdac 	bl	800b0d6 <USBH_BulkSendData>
 800957e:	e00b      	b.n	8009598 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8009588:	b29a      	uxth	r2, r3
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	7b5b      	ldrb	r3, [r3, #13]
 800958e:	2001      	movs	r0, #1
 8009590:	9000      	str	r0, [sp, #0]
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f001 fd9f 	bl	800b0d6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	2202      	movs	r2, #2
 800959c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80095a0:	e057      	b.n	8009652 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	7b5b      	ldrb	r3, [r3, #13]
 80095a6:	4619      	mov	r1, r3
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f004 fb53 	bl	800dc54 <USBH_LL_GetURBState>
 80095ae:	4603      	mov	r3, r0
 80095b0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80095b2:	7afb      	ldrb	r3, [r7, #11]
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	d136      	bne.n	8009626 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095bc:	68fa      	ldr	r2, [r7, #12]
 80095be:	8b12      	ldrh	r2, [r2, #24]
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d90e      	bls.n	80095e2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c8:	68fa      	ldr	r2, [r7, #12]
 80095ca:	8b12      	ldrh	r2, [r2, #24]
 80095cc:	1a9a      	subs	r2, r3, r2
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	69db      	ldr	r3, [r3, #28]
 80095d6:	68fa      	ldr	r2, [r7, #12]
 80095d8:	8b12      	ldrh	r2, [r2, #24]
 80095da:	441a      	add	r2, r3
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	61da      	str	r2, [r3, #28]
 80095e0:	e002      	b.n	80095e8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	2200      	movs	r2, #0
 80095e6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d004      	beq.n	80095fa <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	2201      	movs	r2, #1
 80095f4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 80095f8:	e006      	b.n	8009608 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2200      	movs	r2, #0
 80095fe:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f000 f892 	bl	800972c <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2204      	movs	r2, #4
 800960c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800961c:	2200      	movs	r2, #0
 800961e:	4619      	mov	r1, r3
 8009620:	f001 fee8 	bl	800b3f4 <osMessagePut>
      break;
 8009624:	e014      	b.n	8009650 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8009626:	7afb      	ldrb	r3, [r7, #11]
 8009628:	2b02      	cmp	r3, #2
 800962a:	d111      	bne.n	8009650 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2201      	movs	r2, #1
 8009630:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2204      	movs	r2, #4
 8009638:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009648:	2200      	movs	r2, #0
 800964a:	4619      	mov	r1, r3
 800964c:	f001 fed2 	bl	800b3f4 <osMessagePut>
      break;
 8009650:	bf00      	nop
  }
}
 8009652:	bf00      	nop
 8009654:	3710      	adds	r7, #16
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}

0800965a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800965a:	b580      	push	{r7, lr}
 800965c:	b086      	sub	sp, #24
 800965e:	af00      	add	r7, sp, #0
 8009660:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009668:	69db      	ldr	r3, [r3, #28]
 800966a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800966c:	2300      	movs	r3, #0
 800966e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8009676:	2b03      	cmp	r3, #3
 8009678:	d002      	beq.n	8009680 <CDC_ProcessReception+0x26>
 800967a:	2b04      	cmp	r3, #4
 800967c:	d00e      	beq.n	800969c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800967e:	e051      	b.n	8009724 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	6a19      	ldr	r1, [r3, #32]
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	8b5a      	ldrh	r2, [r3, #26]
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	7b1b      	ldrb	r3, [r3, #12]
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f001 fd47 	bl	800b120 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	2204      	movs	r2, #4
 8009696:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800969a:	e043      	b.n	8009724 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	7b1b      	ldrb	r3, [r3, #12]
 80096a0:	4619      	mov	r1, r3
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f004 fad6 	bl	800dc54 <USBH_LL_GetURBState>
 80096a8:	4603      	mov	r3, r0
 80096aa:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80096ac:	7cfb      	ldrb	r3, [r7, #19]
 80096ae:	2b01      	cmp	r3, #1
 80096b0:	d137      	bne.n	8009722 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	7b1b      	ldrb	r3, [r3, #12]
 80096b6:	4619      	mov	r1, r3
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f004 fa39 	bl	800db30 <USBH_LL_GetLastXferSize>
 80096be:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80096c0:	697b      	ldr	r3, [r7, #20]
 80096c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096c4:	68fa      	ldr	r2, [r7, #12]
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d016      	beq.n	80096f8 <CDC_ProcessReception+0x9e>
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	8b5b      	ldrh	r3, [r3, #26]
 80096ce:	461a      	mov	r2, r3
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d910      	bls.n	80096f8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	1ad2      	subs	r2, r2, r3
 80096de:	697b      	ldr	r3, [r7, #20]
 80096e0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	6a1a      	ldr	r2, [r3, #32]
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	441a      	add	r2, r3
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	2203      	movs	r2, #3
 80096f2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 80096f6:	e006      	b.n	8009706 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	2200      	movs	r2, #0
 80096fc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 f81d 	bl	8009740 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2204      	movs	r2, #4
 800970a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800971a:	2200      	movs	r2, #0
 800971c:	4619      	mov	r1, r3
 800971e:	f001 fe69 	bl	800b3f4 <osMessagePut>
      break;
 8009722:	bf00      	nop
  }
}
 8009724:	bf00      	nop
 8009726:	3718      	adds	r7, #24
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}

0800972c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800972c:	b480      	push	{r7}
 800972e:	b083      	sub	sp, #12
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009734:	bf00      	nop
 8009736:	370c      	adds	r7, #12
 8009738:	46bd      	mov	sp, r7
 800973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973e:	4770      	bx	lr

08009740 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009740:	b480      	push	{r7}
 8009742:	b083      	sub	sp, #12
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009748:	bf00      	nop
 800974a:	370c      	adds	r7, #12
 800974c:	46bd      	mov	sp, r7
 800974e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009752:	4770      	bx	lr

08009754 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009754:	b480      	push	{r7}
 8009756:	b083      	sub	sp, #12
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800975c:	bf00      	nop
 800975e:	370c      	adds	r7, #12
 8009760:	46bd      	mov	sp, r7
 8009762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009766:	4770      	bx	lr

08009768 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8009768:	b5b0      	push	{r4, r5, r7, lr}
 800976a:	b090      	sub	sp, #64	; 0x40
 800976c:	af00      	add	r7, sp, #0
 800976e:	60f8      	str	r0, [r7, #12]
 8009770:	60b9      	str	r1, [r7, #8]
 8009772:	4613      	mov	r3, r2
 8009774:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d101      	bne.n	8009780 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800977c:	2302      	movs	r3, #2
 800977e:	e04d      	b.n	800981c <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	79fa      	ldrb	r2, [r7, #7]
 8009784:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	2200      	movs	r2, #0
 800978c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2200      	movs	r2, #0
 8009794:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8009798:	68f8      	ldr	r0, [r7, #12]
 800979a:	f000 f847 	bl	800982c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2200      	movs	r2, #0
 80097a2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	2200      	movs	r2, #0
 80097aa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2200      	movs	r2, #0
 80097b2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2200      	movs	r2, #0
 80097ba:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d003      	beq.n	80097cc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	68ba      	ldr	r2, [r7, #8]
 80097c8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 80097cc:	4b15      	ldr	r3, [pc, #84]	; (8009824 <USBH_Init+0xbc>)
 80097ce:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80097d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80097d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 80097d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80097dc:	2100      	movs	r1, #0
 80097de:	4618      	mov	r0, r3
 80097e0:	f001 fddf 	bl	800b3a2 <osMessageCreate>
 80097e4:	4602      	mov	r2, r0
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 80097ec:	4b0e      	ldr	r3, [pc, #56]	; (8009828 <USBH_Init+0xc0>)
 80097ee:	f107 0414 	add.w	r4, r7, #20
 80097f2:	461d      	mov	r5, r3
 80097f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80097f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80097f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80097fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8009800:	f107 0314 	add.w	r3, r7, #20
 8009804:	68f9      	ldr	r1, [r7, #12]
 8009806:	4618      	mov	r0, r3
 8009808:	f001 fd6b 	bl	800b2e2 <osThreadCreate>
 800980c:	4602      	mov	r2, r0
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8009814:	68f8      	ldr	r0, [r7, #12]
 8009816:	f004 f8d7 	bl	800d9c8 <USBH_LL_Init>

  return USBH_OK;
 800981a:	2300      	movs	r3, #0
}
 800981c:	4618      	mov	r0, r3
 800981e:	3740      	adds	r7, #64	; 0x40
 8009820:	46bd      	mov	sp, r7
 8009822:	bdb0      	pop	{r4, r5, r7, pc}
 8009824:	0800e850 	.word	0x0800e850
 8009828:	0800e860 	.word	0x0800e860

0800982c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800982c:	b480      	push	{r7}
 800982e:	b085      	sub	sp, #20
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009834:	2300      	movs	r3, #0
 8009836:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009838:	2300      	movs	r3, #0
 800983a:	60fb      	str	r3, [r7, #12]
 800983c:	e009      	b.n	8009852 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800983e:	687a      	ldr	r2, [r7, #4]
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	33e0      	adds	r3, #224	; 0xe0
 8009844:	009b      	lsls	r3, r3, #2
 8009846:	4413      	add	r3, r2
 8009848:	2200      	movs	r2, #0
 800984a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	3301      	adds	r3, #1
 8009850:	60fb      	str	r3, [r7, #12]
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	2b0e      	cmp	r3, #14
 8009856:	d9f2      	bls.n	800983e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009858:	2300      	movs	r3, #0
 800985a:	60fb      	str	r3, [r7, #12]
 800985c:	e009      	b.n	8009872 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800985e:	687a      	ldr	r2, [r7, #4]
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	4413      	add	r3, r2
 8009864:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009868:	2200      	movs	r2, #0
 800986a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	3301      	adds	r3, #1
 8009870:	60fb      	str	r3, [r7, #12]
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009878:	d3f1      	bcc.n	800985e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2200      	movs	r2, #0
 800987e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2200      	movs	r2, #0
 8009884:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2201      	movs	r2, #1
 800988a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2200      	movs	r2, #0
 8009890:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2201      	movs	r2, #1
 8009898:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2240      	movs	r2, #64	; 0x40
 800989e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2200      	movs	r2, #0
 80098a4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2200      	movs	r2, #0
 80098aa:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2201      	movs	r2, #1
 80098b2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2200      	movs	r2, #0
 80098ba:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2200      	movs	r2, #0
 80098c2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80098c6:	2300      	movs	r3, #0
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3714      	adds	r7, #20
 80098cc:	46bd      	mov	sp, r7
 80098ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d2:	4770      	bx	lr

080098d4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80098d4:	b480      	push	{r7}
 80098d6:	b085      	sub	sp, #20
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80098de:	2300      	movs	r3, #0
 80098e0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d016      	beq.n	8009916 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d10e      	bne.n	8009910 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80098f8:	1c59      	adds	r1, r3, #1
 80098fa:	687a      	ldr	r2, [r7, #4]
 80098fc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8009900:	687a      	ldr	r2, [r7, #4]
 8009902:	33de      	adds	r3, #222	; 0xde
 8009904:	6839      	ldr	r1, [r7, #0]
 8009906:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800990a:	2300      	movs	r3, #0
 800990c:	73fb      	strb	r3, [r7, #15]
 800990e:	e004      	b.n	800991a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009910:	2302      	movs	r3, #2
 8009912:	73fb      	strb	r3, [r7, #15]
 8009914:	e001      	b.n	800991a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009916:	2302      	movs	r3, #2
 8009918:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800991a:	7bfb      	ldrb	r3, [r7, #15]
}
 800991c:	4618      	mov	r0, r3
 800991e:	3714      	adds	r7, #20
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr

08009928 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009928:	b480      	push	{r7}
 800992a:	b085      	sub	sp, #20
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
 8009930:	460b      	mov	r3, r1
 8009932:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009934:	2300      	movs	r3, #0
 8009936:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800993e:	78fa      	ldrb	r2, [r7, #3]
 8009940:	429a      	cmp	r2, r3
 8009942:	d204      	bcs.n	800994e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	78fa      	ldrb	r2, [r7, #3]
 8009948:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800994c:	e001      	b.n	8009952 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800994e:	2302      	movs	r3, #2
 8009950:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009952:	7bfb      	ldrb	r3, [r7, #15]
}
 8009954:	4618      	mov	r0, r3
 8009956:	3714      	adds	r7, #20
 8009958:	46bd      	mov	sp, r7
 800995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995e:	4770      	bx	lr

08009960 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009960:	b480      	push	{r7}
 8009962:	b087      	sub	sp, #28
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
 8009968:	4608      	mov	r0, r1
 800996a:	4611      	mov	r1, r2
 800996c:	461a      	mov	r2, r3
 800996e:	4603      	mov	r3, r0
 8009970:	70fb      	strb	r3, [r7, #3]
 8009972:	460b      	mov	r3, r1
 8009974:	70bb      	strb	r3, [r7, #2]
 8009976:	4613      	mov	r3, r2
 8009978:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800997a:	2300      	movs	r3, #0
 800997c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800997e:	2300      	movs	r3, #0
 8009980:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009988:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800998a:	e025      	b.n	80099d8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800998c:	7dfb      	ldrb	r3, [r7, #23]
 800998e:	221a      	movs	r2, #26
 8009990:	fb02 f303 	mul.w	r3, r2, r3
 8009994:	3308      	adds	r3, #8
 8009996:	68fa      	ldr	r2, [r7, #12]
 8009998:	4413      	add	r3, r2
 800999a:	3302      	adds	r3, #2
 800999c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800999e:	693b      	ldr	r3, [r7, #16]
 80099a0:	795b      	ldrb	r3, [r3, #5]
 80099a2:	78fa      	ldrb	r2, [r7, #3]
 80099a4:	429a      	cmp	r2, r3
 80099a6:	d002      	beq.n	80099ae <USBH_FindInterface+0x4e>
 80099a8:	78fb      	ldrb	r3, [r7, #3]
 80099aa:	2bff      	cmp	r3, #255	; 0xff
 80099ac:	d111      	bne.n	80099d2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80099b2:	78ba      	ldrb	r2, [r7, #2]
 80099b4:	429a      	cmp	r2, r3
 80099b6:	d002      	beq.n	80099be <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80099b8:	78bb      	ldrb	r3, [r7, #2]
 80099ba:	2bff      	cmp	r3, #255	; 0xff
 80099bc:	d109      	bne.n	80099d2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80099be:	693b      	ldr	r3, [r7, #16]
 80099c0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80099c2:	787a      	ldrb	r2, [r7, #1]
 80099c4:	429a      	cmp	r2, r3
 80099c6:	d002      	beq.n	80099ce <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80099c8:	787b      	ldrb	r3, [r7, #1]
 80099ca:	2bff      	cmp	r3, #255	; 0xff
 80099cc:	d101      	bne.n	80099d2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80099ce:	7dfb      	ldrb	r3, [r7, #23]
 80099d0:	e006      	b.n	80099e0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80099d2:	7dfb      	ldrb	r3, [r7, #23]
 80099d4:	3301      	adds	r3, #1
 80099d6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80099d8:	7dfb      	ldrb	r3, [r7, #23]
 80099da:	2b01      	cmp	r3, #1
 80099dc:	d9d6      	bls.n	800998c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80099de:	23ff      	movs	r3, #255	; 0xff
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	371c      	adds	r7, #28
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr

080099ec <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b082      	sub	sp, #8
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f004 f823 	bl	800da40 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80099fa:	2101      	movs	r1, #1
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f004 f93c 	bl	800dc7a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009a02:	2300      	movs	r3, #0
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3708      	adds	r7, #8
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}

08009a0c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b088      	sub	sp, #32
 8009a10:	af04      	add	r7, sp, #16
 8009a12:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009a14:	2302      	movs	r3, #2
 8009a16:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8009a22:	b2db      	uxtb	r3, r3
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d102      	bne.n	8009a2e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2203      	movs	r2, #3
 8009a2c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	781b      	ldrb	r3, [r3, #0]
 8009a32:	b2db      	uxtb	r3, r3
 8009a34:	2b0b      	cmp	r3, #11
 8009a36:	f200 823c 	bhi.w	8009eb2 <USBH_Process+0x4a6>
 8009a3a:	a201      	add	r2, pc, #4	; (adr r2, 8009a40 <USBH_Process+0x34>)
 8009a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a40:	08009a71 	.word	0x08009a71
 8009a44:	08009abf 	.word	0x08009abf
 8009a48:	08009b43 	.word	0x08009b43
 8009a4c:	08009e31 	.word	0x08009e31
 8009a50:	08009eb3 	.word	0x08009eb3
 8009a54:	08009c03 	.word	0x08009c03
 8009a58:	08009dbb 	.word	0x08009dbb
 8009a5c:	08009c55 	.word	0x08009c55
 8009a60:	08009c91 	.word	0x08009c91
 8009a64:	08009ccb 	.word	0x08009ccb
 8009a68:	08009d13 	.word	0x08009d13
 8009a6c:	08009e19 	.word	0x08009e19
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009a76:	b2db      	uxtb	r3, r3
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	f000 821c 	beq.w	8009eb6 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2201      	movs	r2, #1
 8009a82:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009a84:	20c8      	movs	r0, #200	; 0xc8
 8009a86:	f004 f93f 	bl	800dd08 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f004 f835 	bl	800dafa <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2200      	movs	r2, #0
 8009a94:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	4619      	mov	r1, r3
 8009ab8:	f001 fc9c 	bl	800b3f4 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009abc:	e1fb      	b.n	8009eb6 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009ac4:	2b01      	cmp	r3, #1
 8009ac6:	d107      	bne.n	8009ad8 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2200      	movs	r2, #0
 8009acc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2202      	movs	r2, #2
 8009ad4:	701a      	strb	r2, [r3, #0]
 8009ad6:	e025      	b.n	8009b24 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009ade:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ae2:	d914      	bls.n	8009b0e <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009aea:	3301      	adds	r3, #1
 8009aec:	b2da      	uxtb	r2, r3
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009afa:	2b03      	cmp	r3, #3
 8009afc:	d903      	bls.n	8009b06 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	220d      	movs	r2, #13
 8009b02:	701a      	strb	r2, [r3, #0]
 8009b04:	e00e      	b.n	8009b24 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	701a      	strb	r2, [r3, #0]
 8009b0c:	e00a      	b.n	8009b24 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009b14:	f103 020a 	add.w	r2, r3, #10
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8009b1e:	200a      	movs	r0, #10
 8009b20:	f004 f8f2 	bl	800dd08 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2201      	movs	r2, #1
 8009b28:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009b38:	2200      	movs	r2, #0
 8009b3a:	4619      	mov	r1, r3
 8009b3c:	f001 fc5a 	bl	800b3f4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009b40:	e1c0      	b.n	8009ec4 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d005      	beq.n	8009b58 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009b52:	2104      	movs	r1, #4
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009b58:	2064      	movs	r0, #100	; 0x64
 8009b5a:	f004 f8d5 	bl	800dd08 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f003 ffa4 	bl	800daac <USBH_LL_GetSpeed>
 8009b64:	4603      	mov	r3, r0
 8009b66:	461a      	mov	r2, r3
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2205      	movs	r2, #5
 8009b72:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009b74:	2100      	movs	r1, #0
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f001 fb1f 	bl	800b1ba <USBH_AllocPipe>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	461a      	mov	r2, r3
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009b84:	2180      	movs	r1, #128	; 0x80
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f001 fb17 	bl	800b1ba <USBH_AllocPipe>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	461a      	mov	r2, r3
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	7919      	ldrb	r1, [r3, #4]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009ba4:	687a      	ldr	r2, [r7, #4]
 8009ba6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009ba8:	b292      	uxth	r2, r2
 8009baa:	9202      	str	r2, [sp, #8]
 8009bac:	2200      	movs	r2, #0
 8009bae:	9201      	str	r2, [sp, #4]
 8009bb0:	9300      	str	r3, [sp, #0]
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	2280      	movs	r2, #128	; 0x80
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f001 fad0 	bl	800b15c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	7959      	ldrb	r1, [r3, #5]
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009bcc:	687a      	ldr	r2, [r7, #4]
 8009bce:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009bd0:	b292      	uxth	r2, r2
 8009bd2:	9202      	str	r2, [sp, #8]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	9201      	str	r2, [sp, #4]
 8009bd8:	9300      	str	r3, [sp, #0]
 8009bda:	4603      	mov	r3, r0
 8009bdc:	2200      	movs	r2, #0
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f001 fabc 	bl	800b15c <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2201      	movs	r2, #1
 8009be8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	f001 fbfa 	bl	800b3f4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009c00:	e160      	b.n	8009ec4 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f000 f964 	bl	8009ed0 <USBH_HandleEnum>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009c0c:	7bbb      	ldrb	r3, [r7, #14]
 8009c0e:	b2db      	uxtb	r3, r3
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	f040 8152 	bne.w	8009eba <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	d103      	bne.n	8009c30 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2208      	movs	r2, #8
 8009c2c:	701a      	strb	r2, [r3, #0]
 8009c2e:	e002      	b.n	8009c36 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2207      	movs	r2, #7
 8009c34:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2205      	movs	r2, #5
 8009c3a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	f001 fbd1 	bl	800b3f4 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009c52:	e132      	b.n	8009eba <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	f000 812f 	beq.w	8009ebe <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009c66:	2101      	movs	r1, #1
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2208      	movs	r2, #8
 8009c70:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2205      	movs	r2, #5
 8009c76:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009c86:	2200      	movs	r2, #0
 8009c88:	4619      	mov	r1, r3
 8009c8a:	f001 fbb3 	bl	800b3f4 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8009c8e:	e116      	b.n	8009ebe <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8009c96:	b29b      	uxth	r3, r3
 8009c98:	4619      	mov	r1, r3
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f000 fcf6 	bl	800a68c <USBH_SetCfg>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d102      	bne.n	8009cac <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2209      	movs	r2, #9
 8009caa:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2201      	movs	r2, #1
 8009cb0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	4619      	mov	r1, r3
 8009cc4:	f001 fb96 	bl	800b3f4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009cc8:	e0fc      	b.n	8009ec4 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8009cd0:	f003 0320 	and.w	r3, r3, #32
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d00a      	beq.n	8009cee <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8009cd8:	2101      	movs	r1, #1
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f000 fcf9 	bl	800a6d2 <USBH_SetFeature>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d106      	bne.n	8009cf4 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	220a      	movs	r2, #10
 8009cea:	701a      	strb	r2, [r3, #0]
 8009cec:	e002      	b.n	8009cf4 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	220a      	movs	r2, #10
 8009cf2:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009d08:	2200      	movs	r2, #0
 8009d0a:	4619      	mov	r1, r3
 8009d0c:	f001 fb72 	bl	800b3f4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009d10:	e0d8      	b.n	8009ec4 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d03f      	beq.n	8009d9c <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009d24:	2300      	movs	r3, #0
 8009d26:	73fb      	strb	r3, [r7, #15]
 8009d28:	e016      	b.n	8009d58 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009d2a:	7bfa      	ldrb	r2, [r7, #15]
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	32de      	adds	r2, #222	; 0xde
 8009d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d34:	791a      	ldrb	r2, [r3, #4]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	d108      	bne.n	8009d52 <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009d40:	7bfa      	ldrb	r2, [r7, #15]
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	32de      	adds	r2, #222	; 0xde
 8009d46:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8009d50:	e005      	b.n	8009d5e <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009d52:	7bfb      	ldrb	r3, [r7, #15]
 8009d54:	3301      	adds	r3, #1
 8009d56:	73fb      	strb	r3, [r7, #15]
 8009d58:	7bfb      	ldrb	r3, [r7, #15]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d0e5      	beq.n	8009d2a <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d016      	beq.n	8009d96 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d6e:	689b      	ldr	r3, [r3, #8]
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	4798      	blx	r3
 8009d74:	4603      	mov	r3, r0
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d109      	bne.n	8009d8e <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2206      	movs	r2, #6
 8009d7e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009d86:	2103      	movs	r1, #3
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	4798      	blx	r3
 8009d8c:	e006      	b.n	8009d9c <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	220d      	movs	r2, #13
 8009d92:	701a      	strb	r2, [r3, #0]
 8009d94:	e002      	b.n	8009d9c <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	220d      	movs	r2, #13
 8009d9a:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2205      	movs	r2, #5
 8009da0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009db0:	2200      	movs	r2, #0
 8009db2:	4619      	mov	r1, r3
 8009db4:	f001 fb1e 	bl	800b3f4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009db8:	e084      	b.n	8009ec4 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d017      	beq.n	8009df4 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009dca:	691b      	ldr	r3, [r3, #16]
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	4798      	blx	r3
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009dd4:	7bbb      	ldrb	r3, [r7, #14]
 8009dd6:	b2db      	uxtb	r3, r3
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d103      	bne.n	8009de4 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	220b      	movs	r2, #11
 8009de0:	701a      	strb	r2, [r3, #0]
 8009de2:	e00a      	b.n	8009dfa <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 8009de4:	7bbb      	ldrb	r3, [r7, #14]
 8009de6:	b2db      	uxtb	r3, r3
 8009de8:	2b02      	cmp	r3, #2
 8009dea:	d106      	bne.n	8009dfa <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	220d      	movs	r2, #13
 8009df0:	701a      	strb	r2, [r3, #0]
 8009df2:	e002      	b.n	8009dfa <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	220d      	movs	r2, #13
 8009df8:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2205      	movs	r2, #5
 8009dfe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009e0e:	2200      	movs	r2, #0
 8009e10:	4619      	mov	r1, r3
 8009e12:	f001 faef 	bl	800b3f4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009e16:	e055      	b.n	8009ec4 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d04f      	beq.n	8009ec2 <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e28:	695b      	ldr	r3, [r3, #20]
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	4798      	blx	r3
      }
      break;
 8009e2e:	e048      	b.n	8009ec2 <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2200      	movs	r2, #0
 8009e34:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f7ff fcf7 	bl	800982c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d009      	beq.n	8009e5c <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e4e:	68db      	ldr	r3, [r3, #12]
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2200      	movs	r2, #0
 8009e58:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d005      	beq.n	8009e72 <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009e6c:	2105      	movs	r1, #5
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8009e78:	b2db      	uxtb	r3, r3
 8009e7a:	2b01      	cmp	r3, #1
 8009e7c:	d107      	bne.n	8009e8e <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2200      	movs	r2, #0
 8009e82:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f7ff fdb0 	bl	80099ec <USBH_Start>
 8009e8c:	e002      	b.n	8009e94 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f003 fdd6 	bl	800da40 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2201      	movs	r2, #1
 8009e98:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	4619      	mov	r1, r3
 8009eac:	f001 faa2 	bl	800b3f4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009eb0:	e008      	b.n	8009ec4 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 8009eb2:	bf00      	nop
 8009eb4:	e006      	b.n	8009ec4 <USBH_Process+0x4b8>
      break;
 8009eb6:	bf00      	nop
 8009eb8:	e004      	b.n	8009ec4 <USBH_Process+0x4b8>
      break;
 8009eba:	bf00      	nop
 8009ebc:	e002      	b.n	8009ec4 <USBH_Process+0x4b8>
    break;
 8009ebe:	bf00      	nop
 8009ec0:	e000      	b.n	8009ec4 <USBH_Process+0x4b8>
      break;
 8009ec2:	bf00      	nop
  }
  return USBH_OK;
 8009ec4:	2300      	movs	r3, #0
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3710      	adds	r7, #16
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}
 8009ece:	bf00      	nop

08009ed0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b088      	sub	sp, #32
 8009ed4:	af04      	add	r7, sp, #16
 8009ed6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009ed8:	2301      	movs	r3, #1
 8009eda:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009edc:	2301      	movs	r3, #1
 8009ede:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	785b      	ldrb	r3, [r3, #1]
 8009ee4:	2b07      	cmp	r3, #7
 8009ee6:	f200 8208 	bhi.w	800a2fa <USBH_HandleEnum+0x42a>
 8009eea:	a201      	add	r2, pc, #4	; (adr r2, 8009ef0 <USBH_HandleEnum+0x20>)
 8009eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ef0:	08009f11 	.word	0x08009f11
 8009ef4:	08009fcf 	.word	0x08009fcf
 8009ef8:	0800a039 	.word	0x0800a039
 8009efc:	0800a0c7 	.word	0x0800a0c7
 8009f00:	0800a131 	.word	0x0800a131
 8009f04:	0800a1a1 	.word	0x0800a1a1
 8009f08:	0800a23d 	.word	0x0800a23d
 8009f0c:	0800a2bb 	.word	0x0800a2bb
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009f10:	2108      	movs	r1, #8
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f000 faea 	bl	800a4ec <USBH_Get_DevDesc>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009f1c:	7bbb      	ldrb	r3, [r7, #14]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d130      	bne.n	8009f84 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2201      	movs	r2, #1
 8009f30:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	7919      	ldrb	r1, [r3, #4]
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009f42:	687a      	ldr	r2, [r7, #4]
 8009f44:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009f46:	b292      	uxth	r2, r2
 8009f48:	9202      	str	r2, [sp, #8]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	9201      	str	r2, [sp, #4]
 8009f4e:	9300      	str	r3, [sp, #0]
 8009f50:	4603      	mov	r3, r0
 8009f52:	2280      	movs	r2, #128	; 0x80
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f001 f901 	bl	800b15c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	7959      	ldrb	r1, [r3, #5]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009f6a:	687a      	ldr	r2, [r7, #4]
 8009f6c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009f6e:	b292      	uxth	r2, r2
 8009f70:	9202      	str	r2, [sp, #8]
 8009f72:	2200      	movs	r2, #0
 8009f74:	9201      	str	r2, [sp, #4]
 8009f76:	9300      	str	r3, [sp, #0]
 8009f78:	4603      	mov	r3, r0
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f001 f8ed 	bl	800b15c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009f82:	e1bc      	b.n	800a2fe <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009f84:	7bbb      	ldrb	r3, [r7, #14]
 8009f86:	2b03      	cmp	r3, #3
 8009f88:	f040 81b9 	bne.w	800a2fe <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009f92:	3301      	adds	r3, #1
 8009f94:	b2da      	uxtb	r2, r3
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009fa2:	2b03      	cmp	r3, #3
 8009fa4:	d903      	bls.n	8009fae <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	220d      	movs	r2, #13
 8009faa:	701a      	strb	r2, [r3, #0]
      break;
 8009fac:	e1a7      	b.n	800a2fe <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	795b      	ldrb	r3, [r3, #5]
 8009fb2:	4619      	mov	r1, r3
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f001 f921 	bl	800b1fc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	791b      	ldrb	r3, [r3, #4]
 8009fbe:	4619      	mov	r1, r3
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f001 f91b 	bl	800b1fc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2200      	movs	r2, #0
 8009fca:	701a      	strb	r2, [r3, #0]
      break;
 8009fcc:	e197      	b.n	800a2fe <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009fce:	2112      	movs	r1, #18
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f000 fa8b 	bl	800a4ec <USBH_Get_DevDesc>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009fda:	7bbb      	ldrb	r3, [r7, #14]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d103      	bne.n	8009fe8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2202      	movs	r2, #2
 8009fe4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009fe6:	e18c      	b.n	800a302 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009fe8:	7bbb      	ldrb	r3, [r7, #14]
 8009fea:	2b03      	cmp	r3, #3
 8009fec:	f040 8189 	bne.w	800a302 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	b2da      	uxtb	r2, r3
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a006:	2b03      	cmp	r3, #3
 800a008:	d903      	bls.n	800a012 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	220d      	movs	r2, #13
 800a00e:	701a      	strb	r2, [r3, #0]
      break;
 800a010:	e177      	b.n	800a302 <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	795b      	ldrb	r3, [r3, #5]
 800a016:	4619      	mov	r1, r3
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f001 f8ef 	bl	800b1fc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	791b      	ldrb	r3, [r3, #4]
 800a022:	4619      	mov	r1, r3
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f001 f8e9 	bl	800b1fc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2200      	movs	r2, #0
 800a02e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2200      	movs	r2, #0
 800a034:	701a      	strb	r2, [r3, #0]
      break;
 800a036:	e164      	b.n	800a302 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a038:	2101      	movs	r1, #1
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f000 fb02 	bl	800a644 <USBH_SetAddress>
 800a040:	4603      	mov	r3, r0
 800a042:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a044:	7bbb      	ldrb	r3, [r7, #14]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d132      	bne.n	800a0b0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800a04a:	2002      	movs	r0, #2
 800a04c:	f003 fe5c 	bl	800dd08 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2201      	movs	r2, #1
 800a054:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2203      	movs	r2, #3
 800a05c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	7919      	ldrb	r1, [r3, #4]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a06e:	687a      	ldr	r2, [r7, #4]
 800a070:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a072:	b292      	uxth	r2, r2
 800a074:	9202      	str	r2, [sp, #8]
 800a076:	2200      	movs	r2, #0
 800a078:	9201      	str	r2, [sp, #4]
 800a07a:	9300      	str	r3, [sp, #0]
 800a07c:	4603      	mov	r3, r0
 800a07e:	2280      	movs	r2, #128	; 0x80
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f001 f86b 	bl	800b15c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	7959      	ldrb	r1, [r3, #5]
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a096:	687a      	ldr	r2, [r7, #4]
 800a098:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a09a:	b292      	uxth	r2, r2
 800a09c:	9202      	str	r2, [sp, #8]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	9201      	str	r2, [sp, #4]
 800a0a2:	9300      	str	r3, [sp, #0]
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f001 f857 	bl	800b15c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a0ae:	e12a      	b.n	800a306 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a0b0:	7bbb      	ldrb	r3, [r7, #14]
 800a0b2:	2b03      	cmp	r3, #3
 800a0b4:	f040 8127 	bne.w	800a306 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	220d      	movs	r2, #13
 800a0bc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	705a      	strb	r2, [r3, #1]
      break;
 800a0c4:	e11f      	b.n	800a306 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a0c6:	2109      	movs	r1, #9
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f000 fa37 	bl	800a53c <USBH_Get_CfgDesc>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a0d2:	7bbb      	ldrb	r3, [r7, #14]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d103      	bne.n	800a0e0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2204      	movs	r2, #4
 800a0dc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a0de:	e114      	b.n	800a30a <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a0e0:	7bbb      	ldrb	r3, [r7, #14]
 800a0e2:	2b03      	cmp	r3, #3
 800a0e4:	f040 8111 	bne.w	800a30a <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a0ee:	3301      	adds	r3, #1
 800a0f0:	b2da      	uxtb	r2, r3
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a0fe:	2b03      	cmp	r3, #3
 800a100:	d903      	bls.n	800a10a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	220d      	movs	r2, #13
 800a106:	701a      	strb	r2, [r3, #0]
      break;
 800a108:	e0ff      	b.n	800a30a <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	795b      	ldrb	r3, [r3, #5]
 800a10e:	4619      	mov	r1, r3
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f001 f873 	bl	800b1fc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	791b      	ldrb	r3, [r3, #4]
 800a11a:	4619      	mov	r1, r3
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f001 f86d 	bl	800b1fc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2200      	movs	r2, #0
 800a126:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2200      	movs	r2, #0
 800a12c:	701a      	strb	r2, [r3, #0]
      break;
 800a12e:	e0ec      	b.n	800a30a <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800a136:	4619      	mov	r1, r3
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f000 f9ff 	bl	800a53c <USBH_Get_CfgDesc>
 800a13e:	4603      	mov	r3, r0
 800a140:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a142:	7bbb      	ldrb	r3, [r7, #14]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d103      	bne.n	800a150 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2205      	movs	r2, #5
 800a14c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a14e:	e0de      	b.n	800a30e <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a150:	7bbb      	ldrb	r3, [r7, #14]
 800a152:	2b03      	cmp	r3, #3
 800a154:	f040 80db 	bne.w	800a30e <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a15e:	3301      	adds	r3, #1
 800a160:	b2da      	uxtb	r2, r3
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a16e:	2b03      	cmp	r3, #3
 800a170:	d903      	bls.n	800a17a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	220d      	movs	r2, #13
 800a176:	701a      	strb	r2, [r3, #0]
      break;
 800a178:	e0c9      	b.n	800a30e <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	795b      	ldrb	r3, [r3, #5]
 800a17e:	4619      	mov	r1, r3
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f001 f83b 	bl	800b1fc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	791b      	ldrb	r3, [r3, #4]
 800a18a:	4619      	mov	r1, r3
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f001 f835 	bl	800b1fc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2200      	movs	r2, #0
 800a196:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2200      	movs	r2, #0
 800a19c:	701a      	strb	r2, [r3, #0]
      break;
 800a19e:	e0b6      	b.n	800a30e <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d036      	beq.n	800a218 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a1b6:	23ff      	movs	r3, #255	; 0xff
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f000 f9e3 	bl	800a584 <USBH_Get_StringDesc>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a1c2:	7bbb      	ldrb	r3, [r7, #14]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d111      	bne.n	800a1ec <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2206      	movs	r2, #6
 800a1cc:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2205      	movs	r2, #5
 800a1d2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	f001 f905 	bl	800b3f4 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a1ea:	e092      	b.n	800a312 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a1ec:	7bbb      	ldrb	r3, [r7, #14]
 800a1ee:	2b03      	cmp	r3, #3
 800a1f0:	f040 808f 	bne.w	800a312 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2206      	movs	r2, #6
 800a1f8:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2205      	movs	r2, #5
 800a1fe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a20e:	2200      	movs	r2, #0
 800a210:	4619      	mov	r1, r3
 800a212:	f001 f8ef 	bl	800b3f4 <osMessagePut>
      break;
 800a216:	e07c      	b.n	800a312 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2206      	movs	r2, #6
 800a21c:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2205      	movs	r2, #5
 800a222:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a232:	2200      	movs	r2, #0
 800a234:	4619      	mov	r1, r3
 800a236:	f001 f8dd 	bl	800b3f4 <osMessagePut>
      break;
 800a23a:	e06a      	b.n	800a312 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800a242:	2b00      	cmp	r3, #0
 800a244:	d027      	beq.n	800a296 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a252:	23ff      	movs	r3, #255	; 0xff
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f000 f995 	bl	800a584 <USBH_Get_StringDesc>
 800a25a:	4603      	mov	r3, r0
 800a25c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a25e:	7bbb      	ldrb	r3, [r7, #14]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d103      	bne.n	800a26c <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2207      	movs	r2, #7
 800a268:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a26a:	e054      	b.n	800a316 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a26c:	7bbb      	ldrb	r3, [r7, #14]
 800a26e:	2b03      	cmp	r3, #3
 800a270:	d151      	bne.n	800a316 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2207      	movs	r2, #7
 800a276:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2205      	movs	r2, #5
 800a27c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a28c:	2200      	movs	r2, #0
 800a28e:	4619      	mov	r1, r3
 800a290:	f001 f8b0 	bl	800b3f4 <osMessagePut>
      break;
 800a294:	e03f      	b.n	800a316 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2207      	movs	r2, #7
 800a29a:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2205      	movs	r2, #5
 800a2a0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	4619      	mov	r1, r3
 800a2b4:	f001 f89e 	bl	800b3f4 <osMessagePut>
      break;
 800a2b8:	e02d      	b.n	800a316 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d017      	beq.n	800a2f4 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a2d0:	23ff      	movs	r3, #255	; 0xff
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f000 f956 	bl	800a584 <USBH_Get_StringDesc>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a2dc:	7bbb      	ldrb	r3, [r7, #14]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d102      	bne.n	800a2e8 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a2e6:	e018      	b.n	800a31a <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a2e8:	7bbb      	ldrb	r3, [r7, #14]
 800a2ea:	2b03      	cmp	r3, #3
 800a2ec:	d115      	bne.n	800a31a <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	73fb      	strb	r3, [r7, #15]
      break;
 800a2f2:	e012      	b.n	800a31a <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	73fb      	strb	r3, [r7, #15]
      break;
 800a2f8:	e00f      	b.n	800a31a <USBH_HandleEnum+0x44a>

    default:
      break;
 800a2fa:	bf00      	nop
 800a2fc:	e00e      	b.n	800a31c <USBH_HandleEnum+0x44c>
      break;
 800a2fe:	bf00      	nop
 800a300:	e00c      	b.n	800a31c <USBH_HandleEnum+0x44c>
      break;
 800a302:	bf00      	nop
 800a304:	e00a      	b.n	800a31c <USBH_HandleEnum+0x44c>
      break;
 800a306:	bf00      	nop
 800a308:	e008      	b.n	800a31c <USBH_HandleEnum+0x44c>
      break;
 800a30a:	bf00      	nop
 800a30c:	e006      	b.n	800a31c <USBH_HandleEnum+0x44c>
      break;
 800a30e:	bf00      	nop
 800a310:	e004      	b.n	800a31c <USBH_HandleEnum+0x44c>
      break;
 800a312:	bf00      	nop
 800a314:	e002      	b.n	800a31c <USBH_HandleEnum+0x44c>
      break;
 800a316:	bf00      	nop
 800a318:	e000      	b.n	800a31c <USBH_HandleEnum+0x44c>
      break;
 800a31a:	bf00      	nop
  }
  return Status;
 800a31c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a31e:	4618      	mov	r0, r3
 800a320:	3710      	adds	r7, #16
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}
 800a326:	bf00      	nop

0800a328 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a328:	b480      	push	{r7}
 800a32a:	b083      	sub	sp, #12
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
 800a330:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	683a      	ldr	r2, [r7, #0]
 800a336:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800a33a:	bf00      	nop
 800a33c:	370c      	adds	r7, #12
 800a33e:	46bd      	mov	sp, r7
 800a340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a344:	4770      	bx	lr

0800a346 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a346:	b580      	push	{r7, lr}
 800a348:	b082      	sub	sp, #8
 800a34a:	af00      	add	r7, sp, #0
 800a34c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a354:	1c5a      	adds	r2, r3, #1
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f000 f804 	bl	800a36a <USBH_HandleSof>
}
 800a362:	bf00      	nop
 800a364:	3708      	adds	r7, #8
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}

0800a36a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a36a:	b580      	push	{r7, lr}
 800a36c:	b082      	sub	sp, #8
 800a36e:	af00      	add	r7, sp, #0
 800a370:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	781b      	ldrb	r3, [r3, #0]
 800a376:	b2db      	uxtb	r3, r3
 800a378:	2b0b      	cmp	r3, #11
 800a37a:	d10a      	bne.n	800a392 <USBH_HandleSof+0x28>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a382:	2b00      	cmp	r3, #0
 800a384:	d005      	beq.n	800a392 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a38c:	699b      	ldr	r3, [r3, #24]
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	4798      	blx	r3
  }
}
 800a392:	bf00      	nop
 800a394:	3708      	adds	r7, #8
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}

0800a39a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a39a:	b580      	push	{r7, lr}
 800a39c:	b082      	sub	sp, #8
 800a39e:	af00      	add	r7, sp, #0
 800a3a0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2201      	movs	r2, #1
 800a3a6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2201      	movs	r2, #1
 800a3ae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a3be:	2200      	movs	r2, #0
 800a3c0:	4619      	mov	r1, r3
 800a3c2:	f001 f817 	bl	800b3f4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800a3c6:	bf00      	nop
}
 800a3c8:	3708      	adds	r7, #8
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}

0800a3ce <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a3ce:	b480      	push	{r7}
 800a3d0:	b083      	sub	sp, #12
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800a3de:	bf00      	nop
}
 800a3e0:	370c      	adds	r7, #12
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e8:	4770      	bx	lr

0800a3ea <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a3ea:	b580      	push	{r7, lr}
 800a3ec:	b082      	sub	sp, #8
 800a3ee:	af00      	add	r7, sp, #0
 800a3f0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2201      	movs	r2, #1
 800a3f6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2200      	movs	r2, #0
 800a406:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2201      	movs	r2, #1
 800a40e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a41e:	2200      	movs	r2, #0
 800a420:	4619      	mov	r1, r3
 800a422:	f000 ffe7 	bl	800b3f4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800a426:	2300      	movs	r3, #0
}
 800a428:	4618      	mov	r0, r3
 800a42a:	3708      	adds	r7, #8
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}

0800a430 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b082      	sub	sp, #8
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2201      	movs	r2, #1
 800a43c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2200      	movs	r2, #0
 800a444:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2200      	movs	r2, #0
 800a44c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f003 fb10 	bl	800da76 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	791b      	ldrb	r3, [r3, #4]
 800a45a:	4619      	mov	r1, r3
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f000 fecd 	bl	800b1fc <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	795b      	ldrb	r3, [r3, #5]
 800a466:	4619      	mov	r1, r3
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f000 fec7 	bl	800b1fc <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2201      	movs	r2, #1
 800a472:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a482:	2200      	movs	r2, #0
 800a484:	4619      	mov	r1, r3
 800a486:	f000 ffb5 	bl	800b3f4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800a48a:	2300      	movs	r3, #0
}
 800a48c:	4618      	mov	r0, r3
 800a48e:	3708      	adds	r7, #8
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}

0800a494 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b086      	sub	sp, #24
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 800a4a2:	f107 030c 	add.w	r3, r7, #12
 800a4a6:	f04f 32ff 	mov.w	r2, #4294967295
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f000 ffe2 	bl	800b474 <osMessageGet>
    if (event.status == osEventMessage)
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	2b10      	cmp	r3, #16
 800a4b4:	d1f2      	bne.n	800a49c <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f7ff faa8 	bl	8009a0c <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800a4bc:	e7ee      	b.n	800a49c <USBH_Process_OS+0x8>

0800a4be <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800a4be:	b580      	push	{r7, lr}
 800a4c0:	b082      	sub	sp, #8
 800a4c2:	af00      	add	r7, sp, #0
 800a4c4:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2201      	movs	r2, #1
 800a4ca:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a4da:	2200      	movs	r2, #0
 800a4dc:	4619      	mov	r1, r3
 800a4de:	f000 ff89 	bl	800b3f4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800a4e2:	2300      	movs	r3, #0
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3708      	adds	r7, #8
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}

0800a4ec <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b086      	sub	sp, #24
 800a4f0:	af02      	add	r7, sp, #8
 800a4f2:	6078      	str	r0, [r7, #4]
 800a4f4:	460b      	mov	r3, r1
 800a4f6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800a4fe:	78fb      	ldrb	r3, [r7, #3]
 800a500:	b29b      	uxth	r3, r3
 800a502:	9300      	str	r3, [sp, #0]
 800a504:	4613      	mov	r3, r2
 800a506:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a50a:	2100      	movs	r1, #0
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f000 f864 	bl	800a5da <USBH_GetDescriptor>
 800a512:	4603      	mov	r3, r0
 800a514:	73fb      	strb	r3, [r7, #15]
 800a516:	7bfb      	ldrb	r3, [r7, #15]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d10a      	bne.n	800a532 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f203 3026 	addw	r0, r3, #806	; 0x326
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a528:	78fa      	ldrb	r2, [r7, #3]
 800a52a:	b292      	uxth	r2, r2
 800a52c:	4619      	mov	r1, r3
 800a52e:	f000 f918 	bl	800a762 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800a532:	7bfb      	ldrb	r3, [r7, #15]
}
 800a534:	4618      	mov	r0, r3
 800a536:	3710      	adds	r7, #16
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}

0800a53c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b086      	sub	sp, #24
 800a540:	af02      	add	r7, sp, #8
 800a542:	6078      	str	r0, [r7, #4]
 800a544:	460b      	mov	r3, r1
 800a546:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	331c      	adds	r3, #28
 800a54c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a54e:	887b      	ldrh	r3, [r7, #2]
 800a550:	9300      	str	r3, [sp, #0]
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a558:	2100      	movs	r1, #0
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f000 f83d 	bl	800a5da <USBH_GetDescriptor>
 800a560:	4603      	mov	r3, r0
 800a562:	72fb      	strb	r3, [r7, #11]
 800a564:	7afb      	ldrb	r3, [r7, #11]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d107      	bne.n	800a57a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a570:	887a      	ldrh	r2, [r7, #2]
 800a572:	68f9      	ldr	r1, [r7, #12]
 800a574:	4618      	mov	r0, r3
 800a576:	f000 f964 	bl	800a842 <USBH_ParseCfgDesc>
  }

  return status;
 800a57a:	7afb      	ldrb	r3, [r7, #11]
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	3710      	adds	r7, #16
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}

0800a584 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b088      	sub	sp, #32
 800a588:	af02      	add	r7, sp, #8
 800a58a:	60f8      	str	r0, [r7, #12]
 800a58c:	607a      	str	r2, [r7, #4]
 800a58e:	461a      	mov	r2, r3
 800a590:	460b      	mov	r3, r1
 800a592:	72fb      	strb	r3, [r7, #11]
 800a594:	4613      	mov	r3, r2
 800a596:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800a598:	7afb      	ldrb	r3, [r7, #11]
 800a59a:	b29b      	uxth	r3, r3
 800a59c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a5a0:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800a5a8:	893b      	ldrh	r3, [r7, #8]
 800a5aa:	9300      	str	r3, [sp, #0]
 800a5ac:	460b      	mov	r3, r1
 800a5ae:	2100      	movs	r1, #0
 800a5b0:	68f8      	ldr	r0, [r7, #12]
 800a5b2:	f000 f812 	bl	800a5da <USBH_GetDescriptor>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	75fb      	strb	r3, [r7, #23]
 800a5ba:	7dfb      	ldrb	r3, [r7, #23]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d107      	bne.n	800a5d0 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a5c6:	893a      	ldrh	r2, [r7, #8]
 800a5c8:	6879      	ldr	r1, [r7, #4]
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f000 fa37 	bl	800aa3e <USBH_ParseStringDesc>
  }

  return status;
 800a5d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	3718      	adds	r7, #24
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}

0800a5da <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800a5da:	b580      	push	{r7, lr}
 800a5dc:	b084      	sub	sp, #16
 800a5de:	af00      	add	r7, sp, #0
 800a5e0:	60f8      	str	r0, [r7, #12]
 800a5e2:	607b      	str	r3, [r7, #4]
 800a5e4:	460b      	mov	r3, r1
 800a5e6:	72fb      	strb	r3, [r7, #11]
 800a5e8:	4613      	mov	r3, r2
 800a5ea:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	789b      	ldrb	r3, [r3, #2]
 800a5f0:	2b01      	cmp	r3, #1
 800a5f2:	d11c      	bne.n	800a62e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a5f4:	7afb      	ldrb	r3, [r7, #11]
 800a5f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a5fa:	b2da      	uxtb	r2, r3
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	2206      	movs	r2, #6
 800a604:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	893a      	ldrh	r2, [r7, #8]
 800a60a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a60c:	893b      	ldrh	r3, [r7, #8]
 800a60e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a612:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a616:	d104      	bne.n	800a622 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	f240 4209 	movw	r2, #1033	; 0x409
 800a61e:	829a      	strh	r2, [r3, #20]
 800a620:	e002      	b.n	800a628 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	2200      	movs	r2, #0
 800a626:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	8b3a      	ldrh	r2, [r7, #24]
 800a62c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a62e:	8b3b      	ldrh	r3, [r7, #24]
 800a630:	461a      	mov	r2, r3
 800a632:	6879      	ldr	r1, [r7, #4]
 800a634:	68f8      	ldr	r0, [r7, #12]
 800a636:	f000 fa50 	bl	800aada <USBH_CtlReq>
 800a63a:	4603      	mov	r3, r0
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3710      	adds	r7, #16
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}

0800a644 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b082      	sub	sp, #8
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
 800a64c:	460b      	mov	r3, r1
 800a64e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	789b      	ldrb	r3, [r3, #2]
 800a654:	2b01      	cmp	r3, #1
 800a656:	d10f      	bne.n	800a678 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2200      	movs	r2, #0
 800a65c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2205      	movs	r2, #5
 800a662:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a664:	78fb      	ldrb	r3, [r7, #3]
 800a666:	b29a      	uxth	r2, r3
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2200      	movs	r2, #0
 800a670:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2200      	movs	r2, #0
 800a676:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a678:	2200      	movs	r2, #0
 800a67a:	2100      	movs	r1, #0
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f000 fa2c 	bl	800aada <USBH_CtlReq>
 800a682:	4603      	mov	r3, r0
}
 800a684:	4618      	mov	r0, r3
 800a686:	3708      	adds	r7, #8
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}

0800a68c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b082      	sub	sp, #8
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
 800a694:	460b      	mov	r3, r1
 800a696:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	789b      	ldrb	r3, [r3, #2]
 800a69c:	2b01      	cmp	r3, #1
 800a69e:	d10e      	bne.n	800a6be <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2209      	movs	r2, #9
 800a6aa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	887a      	ldrh	r2, [r7, #2]
 800a6b0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a6be:	2200      	movs	r2, #0
 800a6c0:	2100      	movs	r1, #0
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f000 fa09 	bl	800aada <USBH_CtlReq>
 800a6c8:	4603      	mov	r3, r0
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3708      	adds	r7, #8
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}

0800a6d2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a6d2:	b580      	push	{r7, lr}
 800a6d4:	b082      	sub	sp, #8
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	6078      	str	r0, [r7, #4]
 800a6da:	460b      	mov	r3, r1
 800a6dc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	789b      	ldrb	r3, [r3, #2]
 800a6e2:	2b01      	cmp	r3, #1
 800a6e4:	d10f      	bne.n	800a706 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2203      	movs	r2, #3
 800a6f0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a6f2:	78fb      	ldrb	r3, [r7, #3]
 800a6f4:	b29a      	uxth	r2, r3
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2200      	movs	r2, #0
 800a704:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a706:	2200      	movs	r2, #0
 800a708:	2100      	movs	r1, #0
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f000 f9e5 	bl	800aada <USBH_CtlReq>
 800a710:	4603      	mov	r3, r0
}
 800a712:	4618      	mov	r0, r3
 800a714:	3708      	adds	r7, #8
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}

0800a71a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a71a:	b580      	push	{r7, lr}
 800a71c:	b082      	sub	sp, #8
 800a71e:	af00      	add	r7, sp, #0
 800a720:	6078      	str	r0, [r7, #4]
 800a722:	460b      	mov	r3, r1
 800a724:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	789b      	ldrb	r3, [r3, #2]
 800a72a:	2b01      	cmp	r3, #1
 800a72c:	d10f      	bne.n	800a74e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2202      	movs	r2, #2
 800a732:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2201      	movs	r2, #1
 800a738:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2200      	movs	r2, #0
 800a73e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a740:	78fb      	ldrb	r3, [r7, #3]
 800a742:	b29a      	uxth	r2, r3
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2200      	movs	r2, #0
 800a74c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800a74e:	2200      	movs	r2, #0
 800a750:	2100      	movs	r1, #0
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f000 f9c1 	bl	800aada <USBH_CtlReq>
 800a758:	4603      	mov	r3, r0
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	3708      	adds	r7, #8
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}

0800a762 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800a762:	b480      	push	{r7}
 800a764:	b085      	sub	sp, #20
 800a766:	af00      	add	r7, sp, #0
 800a768:	60f8      	str	r0, [r7, #12]
 800a76a:	60b9      	str	r1, [r7, #8]
 800a76c:	4613      	mov	r3, r2
 800a76e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	781a      	ldrb	r2, [r3, #0]
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	785a      	ldrb	r2, [r3, #1]
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	3302      	adds	r3, #2
 800a784:	781b      	ldrb	r3, [r3, #0]
 800a786:	b29a      	uxth	r2, r3
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	3303      	adds	r3, #3
 800a78c:	781b      	ldrb	r3, [r3, #0]
 800a78e:	b29b      	uxth	r3, r3
 800a790:	021b      	lsls	r3, r3, #8
 800a792:	b29b      	uxth	r3, r3
 800a794:	4313      	orrs	r3, r2
 800a796:	b29a      	uxth	r2, r3
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	791a      	ldrb	r2, [r3, #4]
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	795a      	ldrb	r2, [r3, #5]
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	799a      	ldrb	r2, [r3, #6]
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	79da      	ldrb	r2, [r3, #7]
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800a7bc:	88fb      	ldrh	r3, [r7, #6]
 800a7be:	2b08      	cmp	r3, #8
 800a7c0:	d939      	bls.n	800a836 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	3308      	adds	r3, #8
 800a7c6:	781b      	ldrb	r3, [r3, #0]
 800a7c8:	b29a      	uxth	r2, r3
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	3309      	adds	r3, #9
 800a7ce:	781b      	ldrb	r3, [r3, #0]
 800a7d0:	b29b      	uxth	r3, r3
 800a7d2:	021b      	lsls	r3, r3, #8
 800a7d4:	b29b      	uxth	r3, r3
 800a7d6:	4313      	orrs	r3, r2
 800a7d8:	b29a      	uxth	r2, r3
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	330a      	adds	r3, #10
 800a7e2:	781b      	ldrb	r3, [r3, #0]
 800a7e4:	b29a      	uxth	r2, r3
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	330b      	adds	r3, #11
 800a7ea:	781b      	ldrb	r3, [r3, #0]
 800a7ec:	b29b      	uxth	r3, r3
 800a7ee:	021b      	lsls	r3, r3, #8
 800a7f0:	b29b      	uxth	r3, r3
 800a7f2:	4313      	orrs	r3, r2
 800a7f4:	b29a      	uxth	r2, r3
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	330c      	adds	r3, #12
 800a7fe:	781b      	ldrb	r3, [r3, #0]
 800a800:	b29a      	uxth	r2, r3
 800a802:	68bb      	ldr	r3, [r7, #8]
 800a804:	330d      	adds	r3, #13
 800a806:	781b      	ldrb	r3, [r3, #0]
 800a808:	b29b      	uxth	r3, r3
 800a80a:	021b      	lsls	r3, r3, #8
 800a80c:	b29b      	uxth	r3, r3
 800a80e:	4313      	orrs	r3, r2
 800a810:	b29a      	uxth	r2, r3
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	7b9a      	ldrb	r2, [r3, #14]
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	7bda      	ldrb	r2, [r3, #15]
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	7c1a      	ldrb	r2, [r3, #16]
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	7c5a      	ldrb	r2, [r3, #17]
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	745a      	strb	r2, [r3, #17]
  }
}
 800a836:	bf00      	nop
 800a838:	3714      	adds	r7, #20
 800a83a:	46bd      	mov	sp, r7
 800a83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a840:	4770      	bx	lr

0800a842 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800a842:	b580      	push	{r7, lr}
 800a844:	b08a      	sub	sp, #40	; 0x28
 800a846:	af00      	add	r7, sp, #0
 800a848:	60f8      	str	r0, [r7, #12]
 800a84a:	60b9      	str	r1, [r7, #8]
 800a84c:	4613      	mov	r3, r2
 800a84e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a854:	2300      	movs	r3, #0
 800a856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800a85a:	2300      	movs	r3, #0
 800a85c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	781a      	ldrb	r2, [r3, #0]
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	785a      	ldrb	r2, [r3, #1]
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	3302      	adds	r3, #2
 800a878:	781b      	ldrb	r3, [r3, #0]
 800a87a:	b29a      	uxth	r2, r3
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	3303      	adds	r3, #3
 800a880:	781b      	ldrb	r3, [r3, #0]
 800a882:	b29b      	uxth	r3, r3
 800a884:	021b      	lsls	r3, r3, #8
 800a886:	b29b      	uxth	r3, r3
 800a888:	4313      	orrs	r3, r2
 800a88a:	b29a      	uxth	r2, r3
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a890:	68bb      	ldr	r3, [r7, #8]
 800a892:	791a      	ldrb	r2, [r3, #4]
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	795a      	ldrb	r2, [r3, #5]
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	799a      	ldrb	r2, [r3, #6]
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	79da      	ldrb	r2, [r3, #7]
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	7a1a      	ldrb	r2, [r3, #8]
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a8b8:	88fb      	ldrh	r3, [r7, #6]
 800a8ba:	2b09      	cmp	r3, #9
 800a8bc:	d95f      	bls.n	800a97e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800a8be:	2309      	movs	r3, #9
 800a8c0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a8c6:	e051      	b.n	800a96c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a8c8:	f107 0316 	add.w	r3, r7, #22
 800a8cc:	4619      	mov	r1, r3
 800a8ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a8d0:	f000 f8e8 	bl	800aaa4 <USBH_GetNextDesc>
 800a8d4:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800a8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d8:	785b      	ldrb	r3, [r3, #1]
 800a8da:	2b04      	cmp	r3, #4
 800a8dc:	d146      	bne.n	800a96c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800a8de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a8e2:	221a      	movs	r2, #26
 800a8e4:	fb02 f303 	mul.w	r3, r2, r3
 800a8e8:	3308      	adds	r3, #8
 800a8ea:	68fa      	ldr	r2, [r7, #12]
 800a8ec:	4413      	add	r3, r2
 800a8ee:	3302      	adds	r3, #2
 800a8f0:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a8f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a8f4:	69f8      	ldr	r0, [r7, #28]
 800a8f6:	f000 f846 	bl	800a986 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800a900:	2300      	movs	r3, #0
 800a902:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a904:	e022      	b.n	800a94c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a906:	f107 0316 	add.w	r3, r7, #22
 800a90a:	4619      	mov	r1, r3
 800a90c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a90e:	f000 f8c9 	bl	800aaa4 <USBH_GetNextDesc>
 800a912:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800a914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a916:	785b      	ldrb	r3, [r3, #1]
 800a918:	2b05      	cmp	r3, #5
 800a91a:	d117      	bne.n	800a94c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a91c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a920:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a924:	3201      	adds	r2, #1
 800a926:	00d2      	lsls	r2, r2, #3
 800a928:	211a      	movs	r1, #26
 800a92a:	fb01 f303 	mul.w	r3, r1, r3
 800a92e:	4413      	add	r3, r2
 800a930:	3308      	adds	r3, #8
 800a932:	68fa      	ldr	r2, [r7, #12]
 800a934:	4413      	add	r3, r2
 800a936:	3304      	adds	r3, #4
 800a938:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800a93a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a93c:	69b8      	ldr	r0, [r7, #24]
 800a93e:	f000 f851 	bl	800a9e4 <USBH_ParseEPDesc>
            ep_ix++;
 800a942:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a946:	3301      	adds	r3, #1
 800a948:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a94c:	69fb      	ldr	r3, [r7, #28]
 800a94e:	791b      	ldrb	r3, [r3, #4]
 800a950:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a954:	429a      	cmp	r2, r3
 800a956:	d204      	bcs.n	800a962 <USBH_ParseCfgDesc+0x120>
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	885a      	ldrh	r2, [r3, #2]
 800a95c:	8afb      	ldrh	r3, [r7, #22]
 800a95e:	429a      	cmp	r2, r3
 800a960:	d8d1      	bhi.n	800a906 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800a962:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a966:	3301      	adds	r3, #1
 800a968:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a96c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a970:	2b01      	cmp	r3, #1
 800a972:	d804      	bhi.n	800a97e <USBH_ParseCfgDesc+0x13c>
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	885a      	ldrh	r2, [r3, #2]
 800a978:	8afb      	ldrh	r3, [r7, #22]
 800a97a:	429a      	cmp	r2, r3
 800a97c:	d8a4      	bhi.n	800a8c8 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800a97e:	bf00      	nop
 800a980:	3728      	adds	r7, #40	; 0x28
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}

0800a986 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800a986:	b480      	push	{r7}
 800a988:	b083      	sub	sp, #12
 800a98a:	af00      	add	r7, sp, #0
 800a98c:	6078      	str	r0, [r7, #4]
 800a98e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	781a      	ldrb	r2, [r3, #0]
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	785a      	ldrb	r2, [r3, #1]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	789a      	ldrb	r2, [r3, #2]
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	78da      	ldrb	r2, [r3, #3]
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	791a      	ldrb	r2, [r3, #4]
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	795a      	ldrb	r2, [r3, #5]
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	799a      	ldrb	r2, [r3, #6]
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	79da      	ldrb	r2, [r3, #7]
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	7a1a      	ldrb	r2, [r3, #8]
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	721a      	strb	r2, [r3, #8]
}
 800a9d8:	bf00      	nop
 800a9da:	370c      	adds	r7, #12
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e2:	4770      	bx	lr

0800a9e4 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800a9e4:	b480      	push	{r7}
 800a9e6:	b083      	sub	sp, #12
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
 800a9ec:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	781a      	ldrb	r2, [r3, #0]
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	785a      	ldrb	r2, [r3, #1]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	789a      	ldrb	r2, [r3, #2]
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	78da      	ldrb	r2, [r3, #3]
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	3304      	adds	r3, #4
 800aa12:	781b      	ldrb	r3, [r3, #0]
 800aa14:	b29a      	uxth	r2, r3
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	3305      	adds	r3, #5
 800aa1a:	781b      	ldrb	r3, [r3, #0]
 800aa1c:	b29b      	uxth	r3, r3
 800aa1e:	021b      	lsls	r3, r3, #8
 800aa20:	b29b      	uxth	r3, r3
 800aa22:	4313      	orrs	r3, r2
 800aa24:	b29a      	uxth	r2, r3
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	799a      	ldrb	r2, [r3, #6]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	719a      	strb	r2, [r3, #6]
}
 800aa32:	bf00      	nop
 800aa34:	370c      	adds	r7, #12
 800aa36:	46bd      	mov	sp, r7
 800aa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3c:	4770      	bx	lr

0800aa3e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800aa3e:	b480      	push	{r7}
 800aa40:	b087      	sub	sp, #28
 800aa42:	af00      	add	r7, sp, #0
 800aa44:	60f8      	str	r0, [r7, #12]
 800aa46:	60b9      	str	r1, [r7, #8]
 800aa48:	4613      	mov	r3, r2
 800aa4a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	3301      	adds	r3, #1
 800aa50:	781b      	ldrb	r3, [r3, #0]
 800aa52:	2b03      	cmp	r3, #3
 800aa54:	d120      	bne.n	800aa98 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	781b      	ldrb	r3, [r3, #0]
 800aa5a:	1e9a      	subs	r2, r3, #2
 800aa5c:	88fb      	ldrh	r3, [r7, #6]
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	bf28      	it	cs
 800aa62:	4613      	movcs	r3, r2
 800aa64:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	3302      	adds	r3, #2
 800aa6a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	82fb      	strh	r3, [r7, #22]
 800aa70:	e00b      	b.n	800aa8a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800aa72:	8afb      	ldrh	r3, [r7, #22]
 800aa74:	68fa      	ldr	r2, [r7, #12]
 800aa76:	4413      	add	r3, r2
 800aa78:	781a      	ldrb	r2, [r3, #0]
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	701a      	strb	r2, [r3, #0]
      pdest++;
 800aa7e:	68bb      	ldr	r3, [r7, #8]
 800aa80:	3301      	adds	r3, #1
 800aa82:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800aa84:	8afb      	ldrh	r3, [r7, #22]
 800aa86:	3302      	adds	r3, #2
 800aa88:	82fb      	strh	r3, [r7, #22]
 800aa8a:	8afa      	ldrh	r2, [r7, #22]
 800aa8c:	8abb      	ldrh	r3, [r7, #20]
 800aa8e:	429a      	cmp	r2, r3
 800aa90:	d3ef      	bcc.n	800aa72 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	2200      	movs	r2, #0
 800aa96:	701a      	strb	r2, [r3, #0]
  }
}
 800aa98:	bf00      	nop
 800aa9a:	371c      	adds	r7, #28
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa2:	4770      	bx	lr

0800aaa4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b085      	sub	sp, #20
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
 800aaac:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	881a      	ldrh	r2, [r3, #0]
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	781b      	ldrb	r3, [r3, #0]
 800aab6:	b29b      	uxth	r3, r3
 800aab8:	4413      	add	r3, r2
 800aaba:	b29a      	uxth	r2, r3
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	781b      	ldrb	r3, [r3, #0]
 800aac4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	4413      	add	r3, r2
 800aaca:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800aacc:	68fb      	ldr	r3, [r7, #12]
}
 800aace:	4618      	mov	r0, r3
 800aad0:	3714      	adds	r7, #20
 800aad2:	46bd      	mov	sp, r7
 800aad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad8:	4770      	bx	lr

0800aada <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800aada:	b580      	push	{r7, lr}
 800aadc:	b086      	sub	sp, #24
 800aade:	af00      	add	r7, sp, #0
 800aae0:	60f8      	str	r0, [r7, #12]
 800aae2:	60b9      	str	r1, [r7, #8]
 800aae4:	4613      	mov	r3, r2
 800aae6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800aae8:	2301      	movs	r3, #1
 800aaea:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	789b      	ldrb	r3, [r3, #2]
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	d002      	beq.n	800aafa <USBH_CtlReq+0x20>
 800aaf4:	2b02      	cmp	r3, #2
 800aaf6:	d01d      	beq.n	800ab34 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800aaf8:	e043      	b.n	800ab82 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	68ba      	ldr	r2, [r7, #8]
 800aafe:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	88fa      	ldrh	r2, [r7, #6]
 800ab04:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	2201      	movs	r2, #1
 800ab0a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	2202      	movs	r2, #2
 800ab10:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800ab12:	2301      	movs	r3, #1
 800ab14:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	2203      	movs	r2, #3
 800ab1a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	4619      	mov	r1, r3
 800ab2e:	f000 fc61 	bl	800b3f4 <osMessagePut>
      break;
 800ab32:	e026      	b.n	800ab82 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800ab34:	68f8      	ldr	r0, [r7, #12]
 800ab36:	f000 f829 	bl	800ab8c <USBH_HandleControl>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800ab3e:	7dfb      	ldrb	r3, [r7, #23]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d002      	beq.n	800ab4a <USBH_CtlReq+0x70>
 800ab44:	7dfb      	ldrb	r3, [r7, #23]
 800ab46:	2b03      	cmp	r3, #3
 800ab48:	d106      	bne.n	800ab58 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	2201      	movs	r2, #1
 800ab4e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	2200      	movs	r2, #0
 800ab54:	761a      	strb	r2, [r3, #24]
 800ab56:	e005      	b.n	800ab64 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800ab58:	7dfb      	ldrb	r3, [r7, #23]
 800ab5a:	2b02      	cmp	r3, #2
 800ab5c:	d102      	bne.n	800ab64 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	2201      	movs	r2, #1
 800ab62:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	2203      	movs	r2, #3
 800ab68:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ab78:	2200      	movs	r2, #0
 800ab7a:	4619      	mov	r1, r3
 800ab7c:	f000 fc3a 	bl	800b3f4 <osMessagePut>
      break;
 800ab80:	bf00      	nop
  }
  return status;
 800ab82:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	3718      	adds	r7, #24
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}

0800ab8c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b086      	sub	sp, #24
 800ab90:	af02      	add	r7, sp, #8
 800ab92:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800ab94:	2301      	movs	r3, #1
 800ab96:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	7e1b      	ldrb	r3, [r3, #24]
 800aba0:	3b01      	subs	r3, #1
 800aba2:	2b0a      	cmp	r3, #10
 800aba4:	f200 8229 	bhi.w	800affa <USBH_HandleControl+0x46e>
 800aba8:	a201      	add	r2, pc, #4	; (adr r2, 800abb0 <USBH_HandleControl+0x24>)
 800abaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abae:	bf00      	nop
 800abb0:	0800abdd 	.word	0x0800abdd
 800abb4:	0800abf7 	.word	0x0800abf7
 800abb8:	0800ac99 	.word	0x0800ac99
 800abbc:	0800acbf 	.word	0x0800acbf
 800abc0:	0800ad4b 	.word	0x0800ad4b
 800abc4:	0800ad75 	.word	0x0800ad75
 800abc8:	0800ae37 	.word	0x0800ae37
 800abcc:	0800ae59 	.word	0x0800ae59
 800abd0:	0800aeeb 	.word	0x0800aeeb
 800abd4:	0800af11 	.word	0x0800af11
 800abd8:	0800afa3 	.word	0x0800afa3
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f103 0110 	add.w	r1, r3, #16
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	795b      	ldrb	r3, [r3, #5]
 800abe6:	461a      	mov	r2, r3
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f000 fa17 	bl	800b01c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2202      	movs	r2, #2
 800abf2:	761a      	strb	r2, [r3, #24]
      break;
 800abf4:	e20c      	b.n	800b010 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	795b      	ldrb	r3, [r3, #5]
 800abfa:	4619      	mov	r1, r3
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	f003 f829 	bl	800dc54 <USBH_LL_GetURBState>
 800ac02:	4603      	mov	r3, r0
 800ac04:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800ac06:	7bbb      	ldrb	r3, [r7, #14]
 800ac08:	2b01      	cmp	r3, #1
 800ac0a:	d12c      	bne.n	800ac66 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	7c1b      	ldrb	r3, [r3, #16]
 800ac10:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ac14:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	8adb      	ldrh	r3, [r3, #22]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d00a      	beq.n	800ac34 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800ac1e:	7b7b      	ldrb	r3, [r7, #13]
 800ac20:	2b80      	cmp	r3, #128	; 0x80
 800ac22:	d103      	bne.n	800ac2c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2203      	movs	r2, #3
 800ac28:	761a      	strb	r2, [r3, #24]
 800ac2a:	e00d      	b.n	800ac48 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2205      	movs	r2, #5
 800ac30:	761a      	strb	r2, [r3, #24]
 800ac32:	e009      	b.n	800ac48 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800ac34:	7b7b      	ldrb	r3, [r7, #13]
 800ac36:	2b80      	cmp	r3, #128	; 0x80
 800ac38:	d103      	bne.n	800ac42 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2209      	movs	r2, #9
 800ac3e:	761a      	strb	r2, [r3, #24]
 800ac40:	e002      	b.n	800ac48 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2207      	movs	r2, #7
 800ac46:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2203      	movs	r2, #3
 800ac4c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	4619      	mov	r1, r3
 800ac60:	f000 fbc8 	bl	800b3f4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ac64:	e1cb      	b.n	800affe <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800ac66:	7bbb      	ldrb	r3, [r7, #14]
 800ac68:	2b04      	cmp	r3, #4
 800ac6a:	d003      	beq.n	800ac74 <USBH_HandleControl+0xe8>
 800ac6c:	7bbb      	ldrb	r3, [r7, #14]
 800ac6e:	2b02      	cmp	r3, #2
 800ac70:	f040 81c5 	bne.w	800affe <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	220b      	movs	r2, #11
 800ac78:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2203      	movs	r2, #3
 800ac7e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ac8e:	2200      	movs	r2, #0
 800ac90:	4619      	mov	r1, r3
 800ac92:	f000 fbaf 	bl	800b3f4 <osMessagePut>
      break;
 800ac96:	e1b2      	b.n	800affe <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ac9e:	b29a      	uxth	r2, r3
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6899      	ldr	r1, [r3, #8]
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	899a      	ldrh	r2, [r3, #12]
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	791b      	ldrb	r3, [r3, #4]
 800acb0:	6878      	ldr	r0, [r7, #4]
 800acb2:	f000 f9f2 	bl	800b09a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2204      	movs	r2, #4
 800acba:	761a      	strb	r2, [r3, #24]
      break;
 800acbc:	e1a8      	b.n	800b010 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	791b      	ldrb	r3, [r3, #4]
 800acc2:	4619      	mov	r1, r3
 800acc4:	6878      	ldr	r0, [r7, #4]
 800acc6:	f002 ffc5 	bl	800dc54 <USBH_LL_GetURBState>
 800acca:	4603      	mov	r3, r0
 800accc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800acce:	7bbb      	ldrb	r3, [r7, #14]
 800acd0:	2b01      	cmp	r3, #1
 800acd2:	d110      	bne.n	800acf6 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2209      	movs	r2, #9
 800acd8:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2203      	movs	r2, #3
 800acde:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800acee:	2200      	movs	r2, #0
 800acf0:	4619      	mov	r1, r3
 800acf2:	f000 fb7f 	bl	800b3f4 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800acf6:	7bbb      	ldrb	r3, [r7, #14]
 800acf8:	2b05      	cmp	r3, #5
 800acfa:	d110      	bne.n	800ad1e <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800acfc:	2303      	movs	r3, #3
 800acfe:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2203      	movs	r2, #3
 800ad04:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ad14:	2200      	movs	r2, #0
 800ad16:	4619      	mov	r1, r3
 800ad18:	f000 fb6c 	bl	800b3f4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ad1c:	e171      	b.n	800b002 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800ad1e:	7bbb      	ldrb	r3, [r7, #14]
 800ad20:	2b04      	cmp	r3, #4
 800ad22:	f040 816e 	bne.w	800b002 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	220b      	movs	r2, #11
 800ad2a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2203      	movs	r2, #3
 800ad30:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ad40:	2200      	movs	r2, #0
 800ad42:	4619      	mov	r1, r3
 800ad44:	f000 fb56 	bl	800b3f4 <osMessagePut>
      break;
 800ad48:	e15b      	b.n	800b002 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6899      	ldr	r1, [r3, #8]
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	899a      	ldrh	r2, [r3, #12]
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	795b      	ldrb	r3, [r3, #5]
 800ad56:	2001      	movs	r0, #1
 800ad58:	9000      	str	r0, [sp, #0]
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f000 f978 	bl	800b050 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ad66:	b29a      	uxth	r2, r3
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2206      	movs	r2, #6
 800ad70:	761a      	strb	r2, [r3, #24]
      break;
 800ad72:	e14d      	b.n	800b010 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	795b      	ldrb	r3, [r3, #5]
 800ad78:	4619      	mov	r1, r3
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f002 ff6a 	bl	800dc54 <USBH_LL_GetURBState>
 800ad80:	4603      	mov	r3, r0
 800ad82:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ad84:	7bbb      	ldrb	r3, [r7, #14]
 800ad86:	2b01      	cmp	r3, #1
 800ad88:	d111      	bne.n	800adae <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2207      	movs	r2, #7
 800ad8e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2203      	movs	r2, #3
 800ad94:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ada4:	2200      	movs	r2, #0
 800ada6:	4619      	mov	r1, r3
 800ada8:	f000 fb24 	bl	800b3f4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800adac:	e12b      	b.n	800b006 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800adae:	7bbb      	ldrb	r3, [r7, #14]
 800adb0:	2b05      	cmp	r3, #5
 800adb2:	d113      	bne.n	800addc <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	220c      	movs	r2, #12
 800adb8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800adba:	2303      	movs	r3, #3
 800adbc:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2203      	movs	r2, #3
 800adc2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800add2:	2200      	movs	r2, #0
 800add4:	4619      	mov	r1, r3
 800add6:	f000 fb0d 	bl	800b3f4 <osMessagePut>
      break;
 800adda:	e114      	b.n	800b006 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800addc:	7bbb      	ldrb	r3, [r7, #14]
 800adde:	2b02      	cmp	r3, #2
 800ade0:	d111      	bne.n	800ae06 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2205      	movs	r2, #5
 800ade6:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2203      	movs	r2, #3
 800adec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800adfc:	2200      	movs	r2, #0
 800adfe:	4619      	mov	r1, r3
 800ae00:	f000 faf8 	bl	800b3f4 <osMessagePut>
      break;
 800ae04:	e0ff      	b.n	800b006 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800ae06:	7bbb      	ldrb	r3, [r7, #14]
 800ae08:	2b04      	cmp	r3, #4
 800ae0a:	f040 80fc 	bne.w	800b006 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	220b      	movs	r2, #11
 800ae12:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800ae14:	2302      	movs	r3, #2
 800ae16:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2203      	movs	r2, #3
 800ae1c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	4619      	mov	r1, r3
 800ae30:	f000 fae0 	bl	800b3f4 <osMessagePut>
      break;
 800ae34:	e0e7      	b.n	800b006 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	791b      	ldrb	r3, [r3, #4]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	2100      	movs	r1, #0
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f000 f92b 	bl	800b09a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ae4a:	b29a      	uxth	r2, r3
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2208      	movs	r2, #8
 800ae54:	761a      	strb	r2, [r3, #24]

      break;
 800ae56:	e0db      	b.n	800b010 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	791b      	ldrb	r3, [r3, #4]
 800ae5c:	4619      	mov	r1, r3
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f002 fef8 	bl	800dc54 <USBH_LL_GetURBState>
 800ae64:	4603      	mov	r3, r0
 800ae66:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ae68:	7bbb      	ldrb	r3, [r7, #14]
 800ae6a:	2b01      	cmp	r3, #1
 800ae6c:	d113      	bne.n	800ae96 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	220d      	movs	r2, #13
 800ae72:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800ae74:	2300      	movs	r3, #0
 800ae76:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2203      	movs	r2, #3
 800ae7c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	4619      	mov	r1, r3
 800ae90:	f000 fab0 	bl	800b3f4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ae94:	e0b9      	b.n	800b00a <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800ae96:	7bbb      	ldrb	r3, [r7, #14]
 800ae98:	2b04      	cmp	r3, #4
 800ae9a:	d111      	bne.n	800aec0 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	220b      	movs	r2, #11
 800aea0:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2203      	movs	r2, #3
 800aea6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	4619      	mov	r1, r3
 800aeba:	f000 fa9b 	bl	800b3f4 <osMessagePut>
      break;
 800aebe:	e0a4      	b.n	800b00a <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800aec0:	7bbb      	ldrb	r3, [r7, #14]
 800aec2:	2b05      	cmp	r3, #5
 800aec4:	f040 80a1 	bne.w	800b00a <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800aec8:	2303      	movs	r3, #3
 800aeca:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2203      	movs	r2, #3
 800aed0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800aee0:	2200      	movs	r2, #0
 800aee2:	4619      	mov	r1, r3
 800aee4:	f000 fa86 	bl	800b3f4 <osMessagePut>
      break;
 800aee8:	e08f      	b.n	800b00a <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	795b      	ldrb	r3, [r3, #5]
 800aeee:	2201      	movs	r2, #1
 800aef0:	9200      	str	r2, [sp, #0]
 800aef2:	2200      	movs	r2, #0
 800aef4:	2100      	movs	r1, #0
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f000 f8aa 	bl	800b050 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800af02:	b29a      	uxth	r2, r3
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	220a      	movs	r2, #10
 800af0c:	761a      	strb	r2, [r3, #24]
      break;
 800af0e:	e07f      	b.n	800b010 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	795b      	ldrb	r3, [r3, #5]
 800af14:	4619      	mov	r1, r3
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f002 fe9c 	bl	800dc54 <USBH_LL_GetURBState>
 800af1c:	4603      	mov	r3, r0
 800af1e:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800af20:	7bbb      	ldrb	r3, [r7, #14]
 800af22:	2b01      	cmp	r3, #1
 800af24:	d113      	bne.n	800af4e <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800af26:	2300      	movs	r3, #0
 800af28:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	220d      	movs	r2, #13
 800af2e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2203      	movs	r2, #3
 800af34:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800af44:	2200      	movs	r2, #0
 800af46:	4619      	mov	r1, r3
 800af48:	f000 fa54 	bl	800b3f4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800af4c:	e05f      	b.n	800b00e <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800af4e:	7bbb      	ldrb	r3, [r7, #14]
 800af50:	2b02      	cmp	r3, #2
 800af52:	d111      	bne.n	800af78 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2209      	movs	r2, #9
 800af58:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2203      	movs	r2, #3
 800af5e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800af6e:	2200      	movs	r2, #0
 800af70:	4619      	mov	r1, r3
 800af72:	f000 fa3f 	bl	800b3f4 <osMessagePut>
      break;
 800af76:	e04a      	b.n	800b00e <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800af78:	7bbb      	ldrb	r3, [r7, #14]
 800af7a:	2b04      	cmp	r3, #4
 800af7c:	d147      	bne.n	800b00e <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	220b      	movs	r2, #11
 800af82:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2203      	movs	r2, #3
 800af88:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800af98:	2200      	movs	r2, #0
 800af9a:	4619      	mov	r1, r3
 800af9c:	f000 fa2a 	bl	800b3f4 <osMessagePut>
      break;
 800afa0:	e035      	b.n	800b00e <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	7e5b      	ldrb	r3, [r3, #25]
 800afa6:	3301      	adds	r3, #1
 800afa8:	b2da      	uxtb	r2, r3
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	765a      	strb	r2, [r3, #25]
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	7e5b      	ldrb	r3, [r3, #25]
 800afb2:	2b02      	cmp	r3, #2
 800afb4:	d806      	bhi.n	800afc4 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2201      	movs	r2, #1
 800afba:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2201      	movs	r2, #1
 800afc0:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800afc2:	e025      	b.n	800b010 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800afca:	2106      	movs	r1, #6
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2200      	movs	r2, #0
 800afd4:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	795b      	ldrb	r3, [r3, #5]
 800afda:	4619      	mov	r1, r3
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f000 f90d 	bl	800b1fc <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	791b      	ldrb	r3, [r3, #4]
 800afe6:	4619      	mov	r1, r3
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f000 f907 	bl	800b1fc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2200      	movs	r2, #0
 800aff2:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800aff4:	2302      	movs	r3, #2
 800aff6:	73fb      	strb	r3, [r7, #15]
      break;
 800aff8:	e00a      	b.n	800b010 <USBH_HandleControl+0x484>

    default:
      break;
 800affa:	bf00      	nop
 800affc:	e008      	b.n	800b010 <USBH_HandleControl+0x484>
      break;
 800affe:	bf00      	nop
 800b000:	e006      	b.n	800b010 <USBH_HandleControl+0x484>
      break;
 800b002:	bf00      	nop
 800b004:	e004      	b.n	800b010 <USBH_HandleControl+0x484>
      break;
 800b006:	bf00      	nop
 800b008:	e002      	b.n	800b010 <USBH_HandleControl+0x484>
      break;
 800b00a:	bf00      	nop
 800b00c:	e000      	b.n	800b010 <USBH_HandleControl+0x484>
      break;
 800b00e:	bf00      	nop
  }

  return status;
 800b010:	7bfb      	ldrb	r3, [r7, #15]
}
 800b012:	4618      	mov	r0, r3
 800b014:	3710      	adds	r7, #16
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}
 800b01a:	bf00      	nop

0800b01c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b088      	sub	sp, #32
 800b020:	af04      	add	r7, sp, #16
 800b022:	60f8      	str	r0, [r7, #12]
 800b024:	60b9      	str	r1, [r7, #8]
 800b026:	4613      	mov	r3, r2
 800b028:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b02a:	79f9      	ldrb	r1, [r7, #7]
 800b02c:	2300      	movs	r3, #0
 800b02e:	9303      	str	r3, [sp, #12]
 800b030:	2308      	movs	r3, #8
 800b032:	9302      	str	r3, [sp, #8]
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	9301      	str	r3, [sp, #4]
 800b038:	2300      	movs	r3, #0
 800b03a:	9300      	str	r3, [sp, #0]
 800b03c:	2300      	movs	r3, #0
 800b03e:	2200      	movs	r2, #0
 800b040:	68f8      	ldr	r0, [r7, #12]
 800b042:	f002 fdd6 	bl	800dbf2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800b046:	2300      	movs	r3, #0
}
 800b048:	4618      	mov	r0, r3
 800b04a:	3710      	adds	r7, #16
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}

0800b050 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b088      	sub	sp, #32
 800b054:	af04      	add	r7, sp, #16
 800b056:	60f8      	str	r0, [r7, #12]
 800b058:	60b9      	str	r1, [r7, #8]
 800b05a:	4611      	mov	r1, r2
 800b05c:	461a      	mov	r2, r3
 800b05e:	460b      	mov	r3, r1
 800b060:	80fb      	strh	r3, [r7, #6]
 800b062:	4613      	mov	r3, r2
 800b064:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d001      	beq.n	800b074 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b070:	2300      	movs	r3, #0
 800b072:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b074:	7979      	ldrb	r1, [r7, #5]
 800b076:	7e3b      	ldrb	r3, [r7, #24]
 800b078:	9303      	str	r3, [sp, #12]
 800b07a:	88fb      	ldrh	r3, [r7, #6]
 800b07c:	9302      	str	r3, [sp, #8]
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	9301      	str	r3, [sp, #4]
 800b082:	2301      	movs	r3, #1
 800b084:	9300      	str	r3, [sp, #0]
 800b086:	2300      	movs	r3, #0
 800b088:	2200      	movs	r2, #0
 800b08a:	68f8      	ldr	r0, [r7, #12]
 800b08c:	f002 fdb1 	bl	800dbf2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b090:	2300      	movs	r3, #0
}
 800b092:	4618      	mov	r0, r3
 800b094:	3710      	adds	r7, #16
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}

0800b09a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b09a:	b580      	push	{r7, lr}
 800b09c:	b088      	sub	sp, #32
 800b09e:	af04      	add	r7, sp, #16
 800b0a0:	60f8      	str	r0, [r7, #12]
 800b0a2:	60b9      	str	r1, [r7, #8]
 800b0a4:	4611      	mov	r1, r2
 800b0a6:	461a      	mov	r2, r3
 800b0a8:	460b      	mov	r3, r1
 800b0aa:	80fb      	strh	r3, [r7, #6]
 800b0ac:	4613      	mov	r3, r2
 800b0ae:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b0b0:	7979      	ldrb	r1, [r7, #5]
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	9303      	str	r3, [sp, #12]
 800b0b6:	88fb      	ldrh	r3, [r7, #6]
 800b0b8:	9302      	str	r3, [sp, #8]
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	9301      	str	r3, [sp, #4]
 800b0be:	2301      	movs	r3, #1
 800b0c0:	9300      	str	r3, [sp, #0]
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	2201      	movs	r2, #1
 800b0c6:	68f8      	ldr	r0, [r7, #12]
 800b0c8:	f002 fd93 	bl	800dbf2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b0cc:	2300      	movs	r3, #0

}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	3710      	adds	r7, #16
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}

0800b0d6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b0d6:	b580      	push	{r7, lr}
 800b0d8:	b088      	sub	sp, #32
 800b0da:	af04      	add	r7, sp, #16
 800b0dc:	60f8      	str	r0, [r7, #12]
 800b0de:	60b9      	str	r1, [r7, #8]
 800b0e0:	4611      	mov	r1, r2
 800b0e2:	461a      	mov	r2, r3
 800b0e4:	460b      	mov	r3, r1
 800b0e6:	80fb      	strh	r3, [r7, #6]
 800b0e8:	4613      	mov	r3, r2
 800b0ea:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d001      	beq.n	800b0fa <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b0fa:	7979      	ldrb	r1, [r7, #5]
 800b0fc:	7e3b      	ldrb	r3, [r7, #24]
 800b0fe:	9303      	str	r3, [sp, #12]
 800b100:	88fb      	ldrh	r3, [r7, #6]
 800b102:	9302      	str	r3, [sp, #8]
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	9301      	str	r3, [sp, #4]
 800b108:	2301      	movs	r3, #1
 800b10a:	9300      	str	r3, [sp, #0]
 800b10c:	2302      	movs	r3, #2
 800b10e:	2200      	movs	r2, #0
 800b110:	68f8      	ldr	r0, [r7, #12]
 800b112:	f002 fd6e 	bl	800dbf2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b116:	2300      	movs	r3, #0
}
 800b118:	4618      	mov	r0, r3
 800b11a:	3710      	adds	r7, #16
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}

0800b120 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b088      	sub	sp, #32
 800b124:	af04      	add	r7, sp, #16
 800b126:	60f8      	str	r0, [r7, #12]
 800b128:	60b9      	str	r1, [r7, #8]
 800b12a:	4611      	mov	r1, r2
 800b12c:	461a      	mov	r2, r3
 800b12e:	460b      	mov	r3, r1
 800b130:	80fb      	strh	r3, [r7, #6]
 800b132:	4613      	mov	r3, r2
 800b134:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b136:	7979      	ldrb	r1, [r7, #5]
 800b138:	2300      	movs	r3, #0
 800b13a:	9303      	str	r3, [sp, #12]
 800b13c:	88fb      	ldrh	r3, [r7, #6]
 800b13e:	9302      	str	r3, [sp, #8]
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	9301      	str	r3, [sp, #4]
 800b144:	2301      	movs	r3, #1
 800b146:	9300      	str	r3, [sp, #0]
 800b148:	2302      	movs	r3, #2
 800b14a:	2201      	movs	r2, #1
 800b14c:	68f8      	ldr	r0, [r7, #12]
 800b14e:	f002 fd50 	bl	800dbf2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b152:	2300      	movs	r3, #0
}
 800b154:	4618      	mov	r0, r3
 800b156:	3710      	adds	r7, #16
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}

0800b15c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b086      	sub	sp, #24
 800b160:	af04      	add	r7, sp, #16
 800b162:	6078      	str	r0, [r7, #4]
 800b164:	4608      	mov	r0, r1
 800b166:	4611      	mov	r1, r2
 800b168:	461a      	mov	r2, r3
 800b16a:	4603      	mov	r3, r0
 800b16c:	70fb      	strb	r3, [r7, #3]
 800b16e:	460b      	mov	r3, r1
 800b170:	70bb      	strb	r3, [r7, #2]
 800b172:	4613      	mov	r3, r2
 800b174:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b176:	7878      	ldrb	r0, [r7, #1]
 800b178:	78ba      	ldrb	r2, [r7, #2]
 800b17a:	78f9      	ldrb	r1, [r7, #3]
 800b17c:	8b3b      	ldrh	r3, [r7, #24]
 800b17e:	9302      	str	r3, [sp, #8]
 800b180:	7d3b      	ldrb	r3, [r7, #20]
 800b182:	9301      	str	r3, [sp, #4]
 800b184:	7c3b      	ldrb	r3, [r7, #16]
 800b186:	9300      	str	r3, [sp, #0]
 800b188:	4603      	mov	r3, r0
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f002 fce3 	bl	800db56 <USBH_LL_OpenPipe>

  return USBH_OK;
 800b190:	2300      	movs	r3, #0
}
 800b192:	4618      	mov	r0, r3
 800b194:	3708      	adds	r7, #8
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}

0800b19a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b19a:	b580      	push	{r7, lr}
 800b19c:	b082      	sub	sp, #8
 800b19e:	af00      	add	r7, sp, #0
 800b1a0:	6078      	str	r0, [r7, #4]
 800b1a2:	460b      	mov	r3, r1
 800b1a4:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800b1a6:	78fb      	ldrb	r3, [r7, #3]
 800b1a8:	4619      	mov	r1, r3
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f002 fd02 	bl	800dbb4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b1b0:	2300      	movs	r3, #0
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3708      	adds	r7, #8
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}

0800b1ba <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b1ba:	b580      	push	{r7, lr}
 800b1bc:	b084      	sub	sp, #16
 800b1be:	af00      	add	r7, sp, #0
 800b1c0:	6078      	str	r0, [r7, #4]
 800b1c2:	460b      	mov	r3, r1
 800b1c4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	f000 f836 	bl	800b238 <USBH_GetFreePipe>
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b1d0:	89fb      	ldrh	r3, [r7, #14]
 800b1d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b1d6:	4293      	cmp	r3, r2
 800b1d8:	d00a      	beq.n	800b1f0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800b1da:	78fa      	ldrb	r2, [r7, #3]
 800b1dc:	89fb      	ldrh	r3, [r7, #14]
 800b1de:	f003 030f 	and.w	r3, r3, #15
 800b1e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b1e6:	6879      	ldr	r1, [r7, #4]
 800b1e8:	33e0      	adds	r3, #224	; 0xe0
 800b1ea:	009b      	lsls	r3, r3, #2
 800b1ec:	440b      	add	r3, r1
 800b1ee:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b1f0:	89fb      	ldrh	r3, [r7, #14]
 800b1f2:	b2db      	uxtb	r3, r3
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	3710      	adds	r7, #16
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}

0800b1fc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	b083      	sub	sp, #12
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
 800b204:	460b      	mov	r3, r1
 800b206:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800b208:	78fb      	ldrb	r3, [r7, #3]
 800b20a:	2b0a      	cmp	r3, #10
 800b20c:	d80d      	bhi.n	800b22a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b20e:	78fb      	ldrb	r3, [r7, #3]
 800b210:	687a      	ldr	r2, [r7, #4]
 800b212:	33e0      	adds	r3, #224	; 0xe0
 800b214:	009b      	lsls	r3, r3, #2
 800b216:	4413      	add	r3, r2
 800b218:	685a      	ldr	r2, [r3, #4]
 800b21a:	78fb      	ldrb	r3, [r7, #3]
 800b21c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b220:	6879      	ldr	r1, [r7, #4]
 800b222:	33e0      	adds	r3, #224	; 0xe0
 800b224:	009b      	lsls	r3, r3, #2
 800b226:	440b      	add	r3, r1
 800b228:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b22a:	2300      	movs	r3, #0
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	370c      	adds	r7, #12
 800b230:	46bd      	mov	sp, r7
 800b232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b236:	4770      	bx	lr

0800b238 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b238:	b480      	push	{r7}
 800b23a:	b085      	sub	sp, #20
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b240:	2300      	movs	r3, #0
 800b242:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800b244:	2300      	movs	r3, #0
 800b246:	73fb      	strb	r3, [r7, #15]
 800b248:	e00f      	b.n	800b26a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b24a:	7bfb      	ldrb	r3, [r7, #15]
 800b24c:	687a      	ldr	r2, [r7, #4]
 800b24e:	33e0      	adds	r3, #224	; 0xe0
 800b250:	009b      	lsls	r3, r3, #2
 800b252:	4413      	add	r3, r2
 800b254:	685b      	ldr	r3, [r3, #4]
 800b256:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d102      	bne.n	800b264 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b25e:	7bfb      	ldrb	r3, [r7, #15]
 800b260:	b29b      	uxth	r3, r3
 800b262:	e007      	b.n	800b274 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800b264:	7bfb      	ldrb	r3, [r7, #15]
 800b266:	3301      	adds	r3, #1
 800b268:	73fb      	strb	r3, [r7, #15]
 800b26a:	7bfb      	ldrb	r3, [r7, #15]
 800b26c:	2b0a      	cmp	r3, #10
 800b26e:	d9ec      	bls.n	800b24a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b270:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800b274:	4618      	mov	r0, r3
 800b276:	3714      	adds	r7, #20
 800b278:	46bd      	mov	sp, r7
 800b27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27e:	4770      	bx	lr

0800b280 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b280:	b480      	push	{r7}
 800b282:	b085      	sub	sp, #20
 800b284:	af00      	add	r7, sp, #0
 800b286:	4603      	mov	r3, r0
 800b288:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b28a:	2300      	movs	r3, #0
 800b28c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b28e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b292:	2b84      	cmp	r3, #132	; 0x84
 800b294:	d005      	beq.n	800b2a2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b296:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	4413      	add	r3, r2
 800b29e:	3303      	adds	r3, #3
 800b2a0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	3714      	adds	r7, #20
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ae:	4770      	bx	lr

0800b2b0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b083      	sub	sp, #12
 800b2b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b2b6:	f3ef 8305 	mrs	r3, IPSR
 800b2ba:	607b      	str	r3, [r7, #4]
  return(result);
 800b2bc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	bf14      	ite	ne
 800b2c2:	2301      	movne	r3, #1
 800b2c4:	2300      	moveq	r3, #0
 800b2c6:	b2db      	uxtb	r3, r3
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	370c      	adds	r7, #12
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d2:	4770      	bx	lr

0800b2d4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b2d8:	f001 f916 	bl	800c508 <vTaskStartScheduler>
  
  return osOK;
 800b2dc:	2300      	movs	r3, #0
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	bd80      	pop	{r7, pc}

0800b2e2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b2e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2e4:	b089      	sub	sp, #36	; 0x24
 800b2e6:	af04      	add	r7, sp, #16
 800b2e8:	6078      	str	r0, [r7, #4]
 800b2ea:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	695b      	ldr	r3, [r3, #20]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d020      	beq.n	800b336 <osThreadCreate+0x54>
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	699b      	ldr	r3, [r3, #24]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d01c      	beq.n	800b336 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	685c      	ldr	r4, [r3, #4]
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681d      	ldr	r5, [r3, #0]
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	691e      	ldr	r6, [r3, #16]
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b30e:	4618      	mov	r0, r3
 800b310:	f7ff ffb6 	bl	800b280 <makeFreeRtosPriority>
 800b314:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	695b      	ldr	r3, [r3, #20]
 800b31a:	687a      	ldr	r2, [r7, #4]
 800b31c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b31e:	9202      	str	r2, [sp, #8]
 800b320:	9301      	str	r3, [sp, #4]
 800b322:	9100      	str	r1, [sp, #0]
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	4632      	mov	r2, r6
 800b328:	4629      	mov	r1, r5
 800b32a:	4620      	mov	r0, r4
 800b32c:	f000 ff0e 	bl	800c14c <xTaskCreateStatic>
 800b330:	4603      	mov	r3, r0
 800b332:	60fb      	str	r3, [r7, #12]
 800b334:	e01c      	b.n	800b370 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	685c      	ldr	r4, [r3, #4]
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b342:	b29e      	uxth	r6, r3
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b34a:	4618      	mov	r0, r3
 800b34c:	f7ff ff98 	bl	800b280 <makeFreeRtosPriority>
 800b350:	4602      	mov	r2, r0
 800b352:	f107 030c 	add.w	r3, r7, #12
 800b356:	9301      	str	r3, [sp, #4]
 800b358:	9200      	str	r2, [sp, #0]
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	4632      	mov	r2, r6
 800b35e:	4629      	mov	r1, r5
 800b360:	4620      	mov	r0, r4
 800b362:	f000 ff50 	bl	800c206 <xTaskCreate>
 800b366:	4603      	mov	r3, r0
 800b368:	2b01      	cmp	r3, #1
 800b36a:	d001      	beq.n	800b370 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b36c:	2300      	movs	r3, #0
 800b36e:	e000      	b.n	800b372 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b370:	68fb      	ldr	r3, [r7, #12]
}
 800b372:	4618      	mov	r0, r3
 800b374:	3714      	adds	r7, #20
 800b376:	46bd      	mov	sp, r7
 800b378:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b37a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b37a:	b580      	push	{r7, lr}
 800b37c:	b084      	sub	sp, #16
 800b37e:	af00      	add	r7, sp, #0
 800b380:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d001      	beq.n	800b390 <osDelay+0x16>
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	e000      	b.n	800b392 <osDelay+0x18>
 800b390:	2301      	movs	r3, #1
 800b392:	4618      	mov	r0, r3
 800b394:	f001 f884 	bl	800c4a0 <vTaskDelay>
  
  return osOK;
 800b398:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3710      	adds	r7, #16
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}

0800b3a2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800b3a2:	b590      	push	{r4, r7, lr}
 800b3a4:	b085      	sub	sp, #20
 800b3a6:	af02      	add	r7, sp, #8
 800b3a8:	6078      	str	r0, [r7, #4]
 800b3aa:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	689b      	ldr	r3, [r3, #8]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d011      	beq.n	800b3d8 <osMessageCreate+0x36>
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	68db      	ldr	r3, [r3, #12]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d00d      	beq.n	800b3d8 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	6818      	ldr	r0, [r3, #0]
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	6859      	ldr	r1, [r3, #4]
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	689a      	ldr	r2, [r3, #8]
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	68db      	ldr	r3, [r3, #12]
 800b3cc:	2400      	movs	r4, #0
 800b3ce:	9400      	str	r4, [sp, #0]
 800b3d0:	f000 f9e0 	bl	800b794 <xQueueGenericCreateStatic>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	e008      	b.n	800b3ea <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	6818      	ldr	r0, [r3, #0]
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	685b      	ldr	r3, [r3, #4]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	4619      	mov	r1, r3
 800b3e4:	f000 fa4e 	bl	800b884 <xQueueGenericCreate>
 800b3e8:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	370c      	adds	r7, #12
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd90      	pop	{r4, r7, pc}
	...

0800b3f4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b086      	sub	sp, #24
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	60f8      	str	r0, [r7, #12]
 800b3fc:	60b9      	str	r1, [r7, #8]
 800b3fe:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800b400:	2300      	movs	r3, #0
 800b402:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d101      	bne.n	800b412 <osMessagePut+0x1e>
    ticks = 1;
 800b40e:	2301      	movs	r3, #1
 800b410:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800b412:	f7ff ff4d 	bl	800b2b0 <inHandlerMode>
 800b416:	4603      	mov	r3, r0
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d018      	beq.n	800b44e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800b41c:	f107 0210 	add.w	r2, r7, #16
 800b420:	f107 0108 	add.w	r1, r7, #8
 800b424:	2300      	movs	r3, #0
 800b426:	68f8      	ldr	r0, [r7, #12]
 800b428:	f000 fb84 	bl	800bb34 <xQueueGenericSendFromISR>
 800b42c:	4603      	mov	r3, r0
 800b42e:	2b01      	cmp	r3, #1
 800b430:	d001      	beq.n	800b436 <osMessagePut+0x42>
      return osErrorOS;
 800b432:	23ff      	movs	r3, #255	; 0xff
 800b434:	e018      	b.n	800b468 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b436:	693b      	ldr	r3, [r7, #16]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d014      	beq.n	800b466 <osMessagePut+0x72>
 800b43c:	4b0c      	ldr	r3, [pc, #48]	; (800b470 <osMessagePut+0x7c>)
 800b43e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b442:	601a      	str	r2, [r3, #0]
 800b444:	f3bf 8f4f 	dsb	sy
 800b448:	f3bf 8f6f 	isb	sy
 800b44c:	e00b      	b.n	800b466 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800b44e:	f107 0108 	add.w	r1, r7, #8
 800b452:	2300      	movs	r3, #0
 800b454:	697a      	ldr	r2, [r7, #20]
 800b456:	68f8      	ldr	r0, [r7, #12]
 800b458:	f000 fa6e 	bl	800b938 <xQueueGenericSend>
 800b45c:	4603      	mov	r3, r0
 800b45e:	2b01      	cmp	r3, #1
 800b460:	d001      	beq.n	800b466 <osMessagePut+0x72>
      return osErrorOS;
 800b462:	23ff      	movs	r3, #255	; 0xff
 800b464:	e000      	b.n	800b468 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800b466:	2300      	movs	r3, #0
}
 800b468:	4618      	mov	r0, r3
 800b46a:	3718      	adds	r7, #24
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}
 800b470:	e000ed04 	.word	0xe000ed04

0800b474 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800b474:	b590      	push	{r4, r7, lr}
 800b476:	b08b      	sub	sp, #44	; 0x2c
 800b478:	af00      	add	r7, sp, #0
 800b47a:	60f8      	str	r0, [r7, #12]
 800b47c:	60b9      	str	r1, [r7, #8]
 800b47e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800b480:	68bb      	ldr	r3, [r7, #8]
 800b482:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800b484:	2300      	movs	r3, #0
 800b486:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d10a      	bne.n	800b4a4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800b48e:	2380      	movs	r3, #128	; 0x80
 800b490:	617b      	str	r3, [r7, #20]
    return event;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	461c      	mov	r4, r3
 800b496:	f107 0314 	add.w	r3, r7, #20
 800b49a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b49e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b4a2:	e054      	b.n	800b54e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4b2:	d103      	bne.n	800b4bc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800b4b4:	f04f 33ff 	mov.w	r3, #4294967295
 800b4b8:	627b      	str	r3, [r7, #36]	; 0x24
 800b4ba:	e009      	b.n	800b4d0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d006      	beq.n	800b4d0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800b4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d101      	bne.n	800b4d0 <osMessageGet+0x5c>
      ticks = 1;
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800b4d0:	f7ff feee 	bl	800b2b0 <inHandlerMode>
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d01c      	beq.n	800b514 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800b4da:	f107 0220 	add.w	r2, r7, #32
 800b4de:	f107 0314 	add.w	r3, r7, #20
 800b4e2:	3304      	adds	r3, #4
 800b4e4:	4619      	mov	r1, r3
 800b4e6:	68b8      	ldr	r0, [r7, #8]
 800b4e8:	f000 fca0 	bl	800be2c <xQueueReceiveFromISR>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	2b01      	cmp	r3, #1
 800b4f0:	d102      	bne.n	800b4f8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800b4f2:	2310      	movs	r3, #16
 800b4f4:	617b      	str	r3, [r7, #20]
 800b4f6:	e001      	b.n	800b4fc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b4fc:	6a3b      	ldr	r3, [r7, #32]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d01d      	beq.n	800b53e <osMessageGet+0xca>
 800b502:	4b15      	ldr	r3, [pc, #84]	; (800b558 <osMessageGet+0xe4>)
 800b504:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b508:	601a      	str	r2, [r3, #0]
 800b50a:	f3bf 8f4f 	dsb	sy
 800b50e:	f3bf 8f6f 	isb	sy
 800b512:	e014      	b.n	800b53e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800b514:	f107 0314 	add.w	r3, r7, #20
 800b518:	3304      	adds	r3, #4
 800b51a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b51c:	4619      	mov	r1, r3
 800b51e:	68b8      	ldr	r0, [r7, #8]
 800b520:	f000 fba4 	bl	800bc6c <xQueueReceive>
 800b524:	4603      	mov	r3, r0
 800b526:	2b01      	cmp	r3, #1
 800b528:	d102      	bne.n	800b530 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800b52a:	2310      	movs	r3, #16
 800b52c:	617b      	str	r3, [r7, #20]
 800b52e:	e006      	b.n	800b53e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800b530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b532:	2b00      	cmp	r3, #0
 800b534:	d101      	bne.n	800b53a <osMessageGet+0xc6>
 800b536:	2300      	movs	r3, #0
 800b538:	e000      	b.n	800b53c <osMessageGet+0xc8>
 800b53a:	2340      	movs	r3, #64	; 0x40
 800b53c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	461c      	mov	r4, r3
 800b542:	f107 0314 	add.w	r3, r7, #20
 800b546:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b54a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800b54e:	68f8      	ldr	r0, [r7, #12]
 800b550:	372c      	adds	r7, #44	; 0x2c
 800b552:	46bd      	mov	sp, r7
 800b554:	bd90      	pop	{r4, r7, pc}
 800b556:	bf00      	nop
 800b558:	e000ed04 	.word	0xe000ed04

0800b55c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b55c:	b480      	push	{r7}
 800b55e:	b083      	sub	sp, #12
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	f103 0208 	add.w	r2, r3, #8
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	f04f 32ff 	mov.w	r2, #4294967295
 800b574:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f103 0208 	add.w	r2, r3, #8
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f103 0208 	add.w	r2, r3, #8
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	2200      	movs	r2, #0
 800b58e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b590:	bf00      	nop
 800b592:	370c      	adds	r7, #12
 800b594:	46bd      	mov	sp, r7
 800b596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59a:	4770      	bx	lr

0800b59c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b59c:	b480      	push	{r7}
 800b59e:	b083      	sub	sp, #12
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b5aa:	bf00      	nop
 800b5ac:	370c      	adds	r7, #12
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b4:	4770      	bx	lr

0800b5b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b5b6:	b480      	push	{r7}
 800b5b8:	b085      	sub	sp, #20
 800b5ba:	af00      	add	r7, sp, #0
 800b5bc:	6078      	str	r0, [r7, #4]
 800b5be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	685b      	ldr	r3, [r3, #4]
 800b5c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	68fa      	ldr	r2, [r7, #12]
 800b5ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	689a      	ldr	r2, [r3, #8]
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	689b      	ldr	r3, [r3, #8]
 800b5d8:	683a      	ldr	r2, [r7, #0]
 800b5da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	683a      	ldr	r2, [r7, #0]
 800b5e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	687a      	ldr	r2, [r7, #4]
 800b5e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	1c5a      	adds	r2, r3, #1
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	601a      	str	r2, [r3, #0]
}
 800b5f2:	bf00      	nop
 800b5f4:	3714      	adds	r7, #20
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fc:	4770      	bx	lr

0800b5fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b5fe:	b480      	push	{r7}
 800b600:	b085      	sub	sp, #20
 800b602:	af00      	add	r7, sp, #0
 800b604:	6078      	str	r0, [r7, #4]
 800b606:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b614:	d103      	bne.n	800b61e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	691b      	ldr	r3, [r3, #16]
 800b61a:	60fb      	str	r3, [r7, #12]
 800b61c:	e00c      	b.n	800b638 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	3308      	adds	r3, #8
 800b622:	60fb      	str	r3, [r7, #12]
 800b624:	e002      	b.n	800b62c <vListInsert+0x2e>
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	685b      	ldr	r3, [r3, #4]
 800b62a:	60fb      	str	r3, [r7, #12]
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	685b      	ldr	r3, [r3, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	68ba      	ldr	r2, [r7, #8]
 800b634:	429a      	cmp	r2, r3
 800b636:	d2f6      	bcs.n	800b626 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	685a      	ldr	r2, [r3, #4]
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	685b      	ldr	r3, [r3, #4]
 800b644:	683a      	ldr	r2, [r7, #0]
 800b646:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	68fa      	ldr	r2, [r7, #12]
 800b64c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	683a      	ldr	r2, [r7, #0]
 800b652:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	687a      	ldr	r2, [r7, #4]
 800b658:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	1c5a      	adds	r2, r3, #1
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	601a      	str	r2, [r3, #0]
}
 800b664:	bf00      	nop
 800b666:	3714      	adds	r7, #20
 800b668:	46bd      	mov	sp, r7
 800b66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66e:	4770      	bx	lr

0800b670 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b670:	b480      	push	{r7}
 800b672:	b085      	sub	sp, #20
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	691b      	ldr	r3, [r3, #16]
 800b67c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	685b      	ldr	r3, [r3, #4]
 800b682:	687a      	ldr	r2, [r7, #4]
 800b684:	6892      	ldr	r2, [r2, #8]
 800b686:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	689b      	ldr	r3, [r3, #8]
 800b68c:	687a      	ldr	r2, [r7, #4]
 800b68e:	6852      	ldr	r2, [r2, #4]
 800b690:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	685b      	ldr	r3, [r3, #4]
 800b696:	687a      	ldr	r2, [r7, #4]
 800b698:	429a      	cmp	r2, r3
 800b69a:	d103      	bne.n	800b6a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	689a      	ldr	r2, [r3, #8]
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	1e5a      	subs	r2, r3, #1
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	681b      	ldr	r3, [r3, #0]
}
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	3714      	adds	r7, #20
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c2:	4770      	bx	lr

0800b6c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b084      	sub	sp, #16
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
 800b6cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d10a      	bne.n	800b6ee <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b6d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6dc:	f383 8811 	msr	BASEPRI, r3
 800b6e0:	f3bf 8f6f 	isb	sy
 800b6e4:	f3bf 8f4f 	dsb	sy
 800b6e8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b6ea:	bf00      	nop
 800b6ec:	e7fe      	b.n	800b6ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b6ee:	f001 fd51 	bl	800d194 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	681a      	ldr	r2, [r3, #0]
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6fa:	68f9      	ldr	r1, [r7, #12]
 800b6fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b6fe:	fb01 f303 	mul.w	r3, r1, r3
 800b702:	441a      	add	r2, r3
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	2200      	movs	r2, #0
 800b70c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	681a      	ldr	r2, [r3, #0]
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	681a      	ldr	r2, [r3, #0]
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b71e:	3b01      	subs	r3, #1
 800b720:	68f9      	ldr	r1, [r7, #12]
 800b722:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b724:	fb01 f303 	mul.w	r3, r1, r3
 800b728:	441a      	add	r2, r3
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	22ff      	movs	r2, #255	; 0xff
 800b732:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	22ff      	movs	r2, #255	; 0xff
 800b73a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d114      	bne.n	800b76e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	691b      	ldr	r3, [r3, #16]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d01a      	beq.n	800b782 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	3310      	adds	r3, #16
 800b750:	4618      	mov	r0, r3
 800b752:	f001 f92b 	bl	800c9ac <xTaskRemoveFromEventList>
 800b756:	4603      	mov	r3, r0
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d012      	beq.n	800b782 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b75c:	4b0c      	ldr	r3, [pc, #48]	; (800b790 <xQueueGenericReset+0xcc>)
 800b75e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b762:	601a      	str	r2, [r3, #0]
 800b764:	f3bf 8f4f 	dsb	sy
 800b768:	f3bf 8f6f 	isb	sy
 800b76c:	e009      	b.n	800b782 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	3310      	adds	r3, #16
 800b772:	4618      	mov	r0, r3
 800b774:	f7ff fef2 	bl	800b55c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	3324      	adds	r3, #36	; 0x24
 800b77c:	4618      	mov	r0, r3
 800b77e:	f7ff feed 	bl	800b55c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b782:	f001 fd37 	bl	800d1f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b786:	2301      	movs	r3, #1
}
 800b788:	4618      	mov	r0, r3
 800b78a:	3710      	adds	r7, #16
 800b78c:	46bd      	mov	sp, r7
 800b78e:	bd80      	pop	{r7, pc}
 800b790:	e000ed04 	.word	0xe000ed04

0800b794 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b794:	b580      	push	{r7, lr}
 800b796:	b08e      	sub	sp, #56	; 0x38
 800b798:	af02      	add	r7, sp, #8
 800b79a:	60f8      	str	r0, [r7, #12]
 800b79c:	60b9      	str	r1, [r7, #8]
 800b79e:	607a      	str	r2, [r7, #4]
 800b7a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d10a      	bne.n	800b7be <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b7a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ac:	f383 8811 	msr	BASEPRI, r3
 800b7b0:	f3bf 8f6f 	isb	sy
 800b7b4:	f3bf 8f4f 	dsb	sy
 800b7b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b7ba:	bf00      	nop
 800b7bc:	e7fe      	b.n	800b7bc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d10a      	bne.n	800b7da <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b7c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7c8:	f383 8811 	msr	BASEPRI, r3
 800b7cc:	f3bf 8f6f 	isb	sy
 800b7d0:	f3bf 8f4f 	dsb	sy
 800b7d4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b7d6:	bf00      	nop
 800b7d8:	e7fe      	b.n	800b7d8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d002      	beq.n	800b7e6 <xQueueGenericCreateStatic+0x52>
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d001      	beq.n	800b7ea <xQueueGenericCreateStatic+0x56>
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	e000      	b.n	800b7ec <xQueueGenericCreateStatic+0x58>
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d10a      	bne.n	800b806 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f4:	f383 8811 	msr	BASEPRI, r3
 800b7f8:	f3bf 8f6f 	isb	sy
 800b7fc:	f3bf 8f4f 	dsb	sy
 800b800:	623b      	str	r3, [r7, #32]
}
 800b802:	bf00      	nop
 800b804:	e7fe      	b.n	800b804 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d102      	bne.n	800b812 <xQueueGenericCreateStatic+0x7e>
 800b80c:	68bb      	ldr	r3, [r7, #8]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d101      	bne.n	800b816 <xQueueGenericCreateStatic+0x82>
 800b812:	2301      	movs	r3, #1
 800b814:	e000      	b.n	800b818 <xQueueGenericCreateStatic+0x84>
 800b816:	2300      	movs	r3, #0
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d10a      	bne.n	800b832 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b81c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b820:	f383 8811 	msr	BASEPRI, r3
 800b824:	f3bf 8f6f 	isb	sy
 800b828:	f3bf 8f4f 	dsb	sy
 800b82c:	61fb      	str	r3, [r7, #28]
}
 800b82e:	bf00      	nop
 800b830:	e7fe      	b.n	800b830 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b832:	2348      	movs	r3, #72	; 0x48
 800b834:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b836:	697b      	ldr	r3, [r7, #20]
 800b838:	2b48      	cmp	r3, #72	; 0x48
 800b83a:	d00a      	beq.n	800b852 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b83c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b840:	f383 8811 	msr	BASEPRI, r3
 800b844:	f3bf 8f6f 	isb	sy
 800b848:	f3bf 8f4f 	dsb	sy
 800b84c:	61bb      	str	r3, [r7, #24]
}
 800b84e:	bf00      	nop
 800b850:	e7fe      	b.n	800b850 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b852:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d00d      	beq.n	800b87a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b85e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b860:	2201      	movs	r2, #1
 800b862:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b866:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b86a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b86c:	9300      	str	r3, [sp, #0]
 800b86e:	4613      	mov	r3, r2
 800b870:	687a      	ldr	r2, [r7, #4]
 800b872:	68b9      	ldr	r1, [r7, #8]
 800b874:	68f8      	ldr	r0, [r7, #12]
 800b876:	f000 f83f 	bl	800b8f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b87a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b87c:	4618      	mov	r0, r3
 800b87e:	3730      	adds	r7, #48	; 0x30
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}

0800b884 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b884:	b580      	push	{r7, lr}
 800b886:	b08a      	sub	sp, #40	; 0x28
 800b888:	af02      	add	r7, sp, #8
 800b88a:	60f8      	str	r0, [r7, #12]
 800b88c:	60b9      	str	r1, [r7, #8]
 800b88e:	4613      	mov	r3, r2
 800b890:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d10a      	bne.n	800b8ae <xQueueGenericCreate+0x2a>
	__asm volatile
 800b898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b89c:	f383 8811 	msr	BASEPRI, r3
 800b8a0:	f3bf 8f6f 	isb	sy
 800b8a4:	f3bf 8f4f 	dsb	sy
 800b8a8:	613b      	str	r3, [r7, #16]
}
 800b8aa:	bf00      	nop
 800b8ac:	e7fe      	b.n	800b8ac <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	68ba      	ldr	r2, [r7, #8]
 800b8b2:	fb02 f303 	mul.w	r3, r2, r3
 800b8b6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b8b8:	69fb      	ldr	r3, [r7, #28]
 800b8ba:	3348      	adds	r3, #72	; 0x48
 800b8bc:	4618      	mov	r0, r3
 800b8be:	f001 fd8b 	bl	800d3d8 <pvPortMalloc>
 800b8c2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b8c4:	69bb      	ldr	r3, [r7, #24]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d011      	beq.n	800b8ee <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b8ca:	69bb      	ldr	r3, [r7, #24]
 800b8cc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b8ce:	697b      	ldr	r3, [r7, #20]
 800b8d0:	3348      	adds	r3, #72	; 0x48
 800b8d2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b8d4:	69bb      	ldr	r3, [r7, #24]
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b8dc:	79fa      	ldrb	r2, [r7, #7]
 800b8de:	69bb      	ldr	r3, [r7, #24]
 800b8e0:	9300      	str	r3, [sp, #0]
 800b8e2:	4613      	mov	r3, r2
 800b8e4:	697a      	ldr	r2, [r7, #20]
 800b8e6:	68b9      	ldr	r1, [r7, #8]
 800b8e8:	68f8      	ldr	r0, [r7, #12]
 800b8ea:	f000 f805 	bl	800b8f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b8ee:	69bb      	ldr	r3, [r7, #24]
	}
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	3720      	adds	r7, #32
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	bd80      	pop	{r7, pc}

0800b8f8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b084      	sub	sp, #16
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	60f8      	str	r0, [r7, #12]
 800b900:	60b9      	str	r1, [r7, #8]
 800b902:	607a      	str	r2, [r7, #4]
 800b904:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b906:	68bb      	ldr	r3, [r7, #8]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d103      	bne.n	800b914 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b90c:	69bb      	ldr	r3, [r7, #24]
 800b90e:	69ba      	ldr	r2, [r7, #24]
 800b910:	601a      	str	r2, [r3, #0]
 800b912:	e002      	b.n	800b91a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b914:	69bb      	ldr	r3, [r7, #24]
 800b916:	687a      	ldr	r2, [r7, #4]
 800b918:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b91a:	69bb      	ldr	r3, [r7, #24]
 800b91c:	68fa      	ldr	r2, [r7, #12]
 800b91e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b920:	69bb      	ldr	r3, [r7, #24]
 800b922:	68ba      	ldr	r2, [r7, #8]
 800b924:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b926:	2101      	movs	r1, #1
 800b928:	69b8      	ldr	r0, [r7, #24]
 800b92a:	f7ff fecb 	bl	800b6c4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b92e:	bf00      	nop
 800b930:	3710      	adds	r7, #16
 800b932:	46bd      	mov	sp, r7
 800b934:	bd80      	pop	{r7, pc}
	...

0800b938 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b08e      	sub	sp, #56	; 0x38
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	60f8      	str	r0, [r7, #12]
 800b940:	60b9      	str	r1, [r7, #8]
 800b942:	607a      	str	r2, [r7, #4]
 800b944:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b946:	2300      	movs	r3, #0
 800b948:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b94e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b950:	2b00      	cmp	r3, #0
 800b952:	d10a      	bne.n	800b96a <xQueueGenericSend+0x32>
	__asm volatile
 800b954:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b958:	f383 8811 	msr	BASEPRI, r3
 800b95c:	f3bf 8f6f 	isb	sy
 800b960:	f3bf 8f4f 	dsb	sy
 800b964:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b966:	bf00      	nop
 800b968:	e7fe      	b.n	800b968 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d103      	bne.n	800b978 <xQueueGenericSend+0x40>
 800b970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b974:	2b00      	cmp	r3, #0
 800b976:	d101      	bne.n	800b97c <xQueueGenericSend+0x44>
 800b978:	2301      	movs	r3, #1
 800b97a:	e000      	b.n	800b97e <xQueueGenericSend+0x46>
 800b97c:	2300      	movs	r3, #0
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d10a      	bne.n	800b998 <xQueueGenericSend+0x60>
	__asm volatile
 800b982:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b986:	f383 8811 	msr	BASEPRI, r3
 800b98a:	f3bf 8f6f 	isb	sy
 800b98e:	f3bf 8f4f 	dsb	sy
 800b992:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b994:	bf00      	nop
 800b996:	e7fe      	b.n	800b996 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	2b02      	cmp	r3, #2
 800b99c:	d103      	bne.n	800b9a6 <xQueueGenericSend+0x6e>
 800b99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9a2:	2b01      	cmp	r3, #1
 800b9a4:	d101      	bne.n	800b9aa <xQueueGenericSend+0x72>
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	e000      	b.n	800b9ac <xQueueGenericSend+0x74>
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d10a      	bne.n	800b9c6 <xQueueGenericSend+0x8e>
	__asm volatile
 800b9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9b4:	f383 8811 	msr	BASEPRI, r3
 800b9b8:	f3bf 8f6f 	isb	sy
 800b9bc:	f3bf 8f4f 	dsb	sy
 800b9c0:	623b      	str	r3, [r7, #32]
}
 800b9c2:	bf00      	nop
 800b9c4:	e7fe      	b.n	800b9c4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b9c6:	f001 f9b1 	bl	800cd2c <xTaskGetSchedulerState>
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d102      	bne.n	800b9d6 <xQueueGenericSend+0x9e>
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d101      	bne.n	800b9da <xQueueGenericSend+0xa2>
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	e000      	b.n	800b9dc <xQueueGenericSend+0xa4>
 800b9da:	2300      	movs	r3, #0
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d10a      	bne.n	800b9f6 <xQueueGenericSend+0xbe>
	__asm volatile
 800b9e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9e4:	f383 8811 	msr	BASEPRI, r3
 800b9e8:	f3bf 8f6f 	isb	sy
 800b9ec:	f3bf 8f4f 	dsb	sy
 800b9f0:	61fb      	str	r3, [r7, #28]
}
 800b9f2:	bf00      	nop
 800b9f4:	e7fe      	b.n	800b9f4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b9f6:	f001 fbcd 	bl	800d194 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba02:	429a      	cmp	r2, r3
 800ba04:	d302      	bcc.n	800ba0c <xQueueGenericSend+0xd4>
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	2b02      	cmp	r3, #2
 800ba0a:	d129      	bne.n	800ba60 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ba0c:	683a      	ldr	r2, [r7, #0]
 800ba0e:	68b9      	ldr	r1, [r7, #8]
 800ba10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba12:	f000 fa8b 	bl	800bf2c <prvCopyDataToQueue>
 800ba16:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ba18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d010      	beq.n	800ba42 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ba20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba22:	3324      	adds	r3, #36	; 0x24
 800ba24:	4618      	mov	r0, r3
 800ba26:	f000 ffc1 	bl	800c9ac <xTaskRemoveFromEventList>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d013      	beq.n	800ba58 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ba30:	4b3f      	ldr	r3, [pc, #252]	; (800bb30 <xQueueGenericSend+0x1f8>)
 800ba32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba36:	601a      	str	r2, [r3, #0]
 800ba38:	f3bf 8f4f 	dsb	sy
 800ba3c:	f3bf 8f6f 	isb	sy
 800ba40:	e00a      	b.n	800ba58 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ba42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d007      	beq.n	800ba58 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ba48:	4b39      	ldr	r3, [pc, #228]	; (800bb30 <xQueueGenericSend+0x1f8>)
 800ba4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba4e:	601a      	str	r2, [r3, #0]
 800ba50:	f3bf 8f4f 	dsb	sy
 800ba54:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ba58:	f001 fbcc 	bl	800d1f4 <vPortExitCritical>
				return pdPASS;
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	e063      	b.n	800bb28 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d103      	bne.n	800ba6e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ba66:	f001 fbc5 	bl	800d1f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	e05c      	b.n	800bb28 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ba6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d106      	bne.n	800ba82 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ba74:	f107 0314 	add.w	r3, r7, #20
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f000 fff9 	bl	800ca70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ba7e:	2301      	movs	r3, #1
 800ba80:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ba82:	f001 fbb7 	bl	800d1f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ba86:	f000 fda9 	bl	800c5dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ba8a:	f001 fb83 	bl	800d194 <vPortEnterCritical>
 800ba8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ba94:	b25b      	sxtb	r3, r3
 800ba96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba9a:	d103      	bne.n	800baa4 <xQueueGenericSend+0x16c>
 800ba9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba9e:	2200      	movs	r2, #0
 800baa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800baa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baa6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800baaa:	b25b      	sxtb	r3, r3
 800baac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bab0:	d103      	bne.n	800baba <xQueueGenericSend+0x182>
 800bab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bab4:	2200      	movs	r2, #0
 800bab6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800baba:	f001 fb9b 	bl	800d1f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800babe:	1d3a      	adds	r2, r7, #4
 800bac0:	f107 0314 	add.w	r3, r7, #20
 800bac4:	4611      	mov	r1, r2
 800bac6:	4618      	mov	r0, r3
 800bac8:	f000 ffe8 	bl	800ca9c <xTaskCheckForTimeOut>
 800bacc:	4603      	mov	r3, r0
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d124      	bne.n	800bb1c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bad2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bad4:	f000 fb22 	bl	800c11c <prvIsQueueFull>
 800bad8:	4603      	mov	r3, r0
 800bada:	2b00      	cmp	r3, #0
 800badc:	d018      	beq.n	800bb10 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bae0:	3310      	adds	r3, #16
 800bae2:	687a      	ldr	r2, [r7, #4]
 800bae4:	4611      	mov	r1, r2
 800bae6:	4618      	mov	r0, r3
 800bae8:	f000 ff3c 	bl	800c964 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800baec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800baee:	f000 faad 	bl	800c04c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800baf2:	f000 fd81 	bl	800c5f8 <xTaskResumeAll>
 800baf6:	4603      	mov	r3, r0
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	f47f af7c 	bne.w	800b9f6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800bafe:	4b0c      	ldr	r3, [pc, #48]	; (800bb30 <xQueueGenericSend+0x1f8>)
 800bb00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb04:	601a      	str	r2, [r3, #0]
 800bb06:	f3bf 8f4f 	dsb	sy
 800bb0a:	f3bf 8f6f 	isb	sy
 800bb0e:	e772      	b.n	800b9f6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bb10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb12:	f000 fa9b 	bl	800c04c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bb16:	f000 fd6f 	bl	800c5f8 <xTaskResumeAll>
 800bb1a:	e76c      	b.n	800b9f6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bb1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb1e:	f000 fa95 	bl	800c04c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bb22:	f000 fd69 	bl	800c5f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bb26:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	3738      	adds	r7, #56	; 0x38
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}
 800bb30:	e000ed04 	.word	0xe000ed04

0800bb34 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b090      	sub	sp, #64	; 0x40
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	60f8      	str	r0, [r7, #12]
 800bb3c:	60b9      	str	r1, [r7, #8]
 800bb3e:	607a      	str	r2, [r7, #4]
 800bb40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800bb46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d10a      	bne.n	800bb62 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800bb4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb50:	f383 8811 	msr	BASEPRI, r3
 800bb54:	f3bf 8f6f 	isb	sy
 800bb58:	f3bf 8f4f 	dsb	sy
 800bb5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bb5e:	bf00      	nop
 800bb60:	e7fe      	b.n	800bb60 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bb62:	68bb      	ldr	r3, [r7, #8]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d103      	bne.n	800bb70 <xQueueGenericSendFromISR+0x3c>
 800bb68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d101      	bne.n	800bb74 <xQueueGenericSendFromISR+0x40>
 800bb70:	2301      	movs	r3, #1
 800bb72:	e000      	b.n	800bb76 <xQueueGenericSendFromISR+0x42>
 800bb74:	2300      	movs	r3, #0
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d10a      	bne.n	800bb90 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800bb7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb7e:	f383 8811 	msr	BASEPRI, r3
 800bb82:	f3bf 8f6f 	isb	sy
 800bb86:	f3bf 8f4f 	dsb	sy
 800bb8a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bb8c:	bf00      	nop
 800bb8e:	e7fe      	b.n	800bb8e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	2b02      	cmp	r3, #2
 800bb94:	d103      	bne.n	800bb9e <xQueueGenericSendFromISR+0x6a>
 800bb96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb9a:	2b01      	cmp	r3, #1
 800bb9c:	d101      	bne.n	800bba2 <xQueueGenericSendFromISR+0x6e>
 800bb9e:	2301      	movs	r3, #1
 800bba0:	e000      	b.n	800bba4 <xQueueGenericSendFromISR+0x70>
 800bba2:	2300      	movs	r3, #0
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d10a      	bne.n	800bbbe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800bba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbac:	f383 8811 	msr	BASEPRI, r3
 800bbb0:	f3bf 8f6f 	isb	sy
 800bbb4:	f3bf 8f4f 	dsb	sy
 800bbb8:	623b      	str	r3, [r7, #32]
}
 800bbba:	bf00      	nop
 800bbbc:	e7fe      	b.n	800bbbc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bbbe:	f001 fbcb 	bl	800d358 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bbc2:	f3ef 8211 	mrs	r2, BASEPRI
 800bbc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbca:	f383 8811 	msr	BASEPRI, r3
 800bbce:	f3bf 8f6f 	isb	sy
 800bbd2:	f3bf 8f4f 	dsb	sy
 800bbd6:	61fa      	str	r2, [r7, #28]
 800bbd8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bbda:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bbdc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bbde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbe0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bbe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbe6:	429a      	cmp	r2, r3
 800bbe8:	d302      	bcc.n	800bbf0 <xQueueGenericSendFromISR+0xbc>
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	2b02      	cmp	r3, #2
 800bbee:	d12f      	bne.n	800bc50 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bbf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbf2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bbf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bbfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbfe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bc00:	683a      	ldr	r2, [r7, #0]
 800bc02:	68b9      	ldr	r1, [r7, #8]
 800bc04:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bc06:	f000 f991 	bl	800bf2c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bc0a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800bc0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc12:	d112      	bne.n	800bc3a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bc14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d016      	beq.n	800bc4a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bc1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc1e:	3324      	adds	r3, #36	; 0x24
 800bc20:	4618      	mov	r0, r3
 800bc22:	f000 fec3 	bl	800c9ac <xTaskRemoveFromEventList>
 800bc26:	4603      	mov	r3, r0
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d00e      	beq.n	800bc4a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d00b      	beq.n	800bc4a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2201      	movs	r2, #1
 800bc36:	601a      	str	r2, [r3, #0]
 800bc38:	e007      	b.n	800bc4a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bc3a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bc3e:	3301      	adds	r3, #1
 800bc40:	b2db      	uxtb	r3, r3
 800bc42:	b25a      	sxtb	r2, r3
 800bc44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800bc4e:	e001      	b.n	800bc54 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bc50:	2300      	movs	r3, #0
 800bc52:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc56:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bc58:	697b      	ldr	r3, [r7, #20]
 800bc5a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bc5e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bc60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3740      	adds	r7, #64	; 0x40
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}
	...

0800bc6c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b08c      	sub	sp, #48	; 0x30
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	60f8      	str	r0, [r7, #12]
 800bc74:	60b9      	str	r1, [r7, #8]
 800bc76:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bc78:	2300      	movs	r3, #0
 800bc7a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bc80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d10a      	bne.n	800bc9c <xQueueReceive+0x30>
	__asm volatile
 800bc86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc8a:	f383 8811 	msr	BASEPRI, r3
 800bc8e:	f3bf 8f6f 	isb	sy
 800bc92:	f3bf 8f4f 	dsb	sy
 800bc96:	623b      	str	r3, [r7, #32]
}
 800bc98:	bf00      	nop
 800bc9a:	e7fe      	b.n	800bc9a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d103      	bne.n	800bcaa <xQueueReceive+0x3e>
 800bca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d101      	bne.n	800bcae <xQueueReceive+0x42>
 800bcaa:	2301      	movs	r3, #1
 800bcac:	e000      	b.n	800bcb0 <xQueueReceive+0x44>
 800bcae:	2300      	movs	r3, #0
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d10a      	bne.n	800bcca <xQueueReceive+0x5e>
	__asm volatile
 800bcb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcb8:	f383 8811 	msr	BASEPRI, r3
 800bcbc:	f3bf 8f6f 	isb	sy
 800bcc0:	f3bf 8f4f 	dsb	sy
 800bcc4:	61fb      	str	r3, [r7, #28]
}
 800bcc6:	bf00      	nop
 800bcc8:	e7fe      	b.n	800bcc8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bcca:	f001 f82f 	bl	800cd2c <xTaskGetSchedulerState>
 800bcce:	4603      	mov	r3, r0
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d102      	bne.n	800bcda <xQueueReceive+0x6e>
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d101      	bne.n	800bcde <xQueueReceive+0x72>
 800bcda:	2301      	movs	r3, #1
 800bcdc:	e000      	b.n	800bce0 <xQueueReceive+0x74>
 800bcde:	2300      	movs	r3, #0
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d10a      	bne.n	800bcfa <xQueueReceive+0x8e>
	__asm volatile
 800bce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bce8:	f383 8811 	msr	BASEPRI, r3
 800bcec:	f3bf 8f6f 	isb	sy
 800bcf0:	f3bf 8f4f 	dsb	sy
 800bcf4:	61bb      	str	r3, [r7, #24]
}
 800bcf6:	bf00      	nop
 800bcf8:	e7fe      	b.n	800bcf8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bcfa:	f001 fa4b 	bl	800d194 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bcfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd02:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bd04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d01f      	beq.n	800bd4a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bd0a:	68b9      	ldr	r1, [r7, #8]
 800bd0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd0e:	f000 f977 	bl	800c000 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bd12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd14:	1e5a      	subs	r2, r3, #1
 800bd16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd18:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bd1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd1c:	691b      	ldr	r3, [r3, #16]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d00f      	beq.n	800bd42 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bd22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd24:	3310      	adds	r3, #16
 800bd26:	4618      	mov	r0, r3
 800bd28:	f000 fe40 	bl	800c9ac <xTaskRemoveFromEventList>
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d007      	beq.n	800bd42 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bd32:	4b3d      	ldr	r3, [pc, #244]	; (800be28 <xQueueReceive+0x1bc>)
 800bd34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd38:	601a      	str	r2, [r3, #0]
 800bd3a:	f3bf 8f4f 	dsb	sy
 800bd3e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bd42:	f001 fa57 	bl	800d1f4 <vPortExitCritical>
				return pdPASS;
 800bd46:	2301      	movs	r3, #1
 800bd48:	e069      	b.n	800be1e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d103      	bne.n	800bd58 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bd50:	f001 fa50 	bl	800d1f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bd54:	2300      	movs	r3, #0
 800bd56:	e062      	b.n	800be1e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bd58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d106      	bne.n	800bd6c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bd5e:	f107 0310 	add.w	r3, r7, #16
 800bd62:	4618      	mov	r0, r3
 800bd64:	f000 fe84 	bl	800ca70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bd68:	2301      	movs	r3, #1
 800bd6a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bd6c:	f001 fa42 	bl	800d1f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bd70:	f000 fc34 	bl	800c5dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bd74:	f001 fa0e 	bl	800d194 <vPortEnterCritical>
 800bd78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd7e:	b25b      	sxtb	r3, r3
 800bd80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd84:	d103      	bne.n	800bd8e <xQueueReceive+0x122>
 800bd86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd88:	2200      	movs	r2, #0
 800bd8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bd8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd94:	b25b      	sxtb	r3, r3
 800bd96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd9a:	d103      	bne.n	800bda4 <xQueueReceive+0x138>
 800bd9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd9e:	2200      	movs	r2, #0
 800bda0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bda4:	f001 fa26 	bl	800d1f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bda8:	1d3a      	adds	r2, r7, #4
 800bdaa:	f107 0310 	add.w	r3, r7, #16
 800bdae:	4611      	mov	r1, r2
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	f000 fe73 	bl	800ca9c <xTaskCheckForTimeOut>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d123      	bne.n	800be04 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bdbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdbe:	f000 f997 	bl	800c0f0 <prvIsQueueEmpty>
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d017      	beq.n	800bdf8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bdc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdca:	3324      	adds	r3, #36	; 0x24
 800bdcc:	687a      	ldr	r2, [r7, #4]
 800bdce:	4611      	mov	r1, r2
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f000 fdc7 	bl	800c964 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bdd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdd8:	f000 f938 	bl	800c04c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bddc:	f000 fc0c 	bl	800c5f8 <xTaskResumeAll>
 800bde0:	4603      	mov	r3, r0
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d189      	bne.n	800bcfa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800bde6:	4b10      	ldr	r3, [pc, #64]	; (800be28 <xQueueReceive+0x1bc>)
 800bde8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdec:	601a      	str	r2, [r3, #0]
 800bdee:	f3bf 8f4f 	dsb	sy
 800bdf2:	f3bf 8f6f 	isb	sy
 800bdf6:	e780      	b.n	800bcfa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bdf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdfa:	f000 f927 	bl	800c04c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bdfe:	f000 fbfb 	bl	800c5f8 <xTaskResumeAll>
 800be02:	e77a      	b.n	800bcfa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800be04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be06:	f000 f921 	bl	800c04c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800be0a:	f000 fbf5 	bl	800c5f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800be0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be10:	f000 f96e 	bl	800c0f0 <prvIsQueueEmpty>
 800be14:	4603      	mov	r3, r0
 800be16:	2b00      	cmp	r3, #0
 800be18:	f43f af6f 	beq.w	800bcfa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800be1c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800be1e:	4618      	mov	r0, r3
 800be20:	3730      	adds	r7, #48	; 0x30
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}
 800be26:	bf00      	nop
 800be28:	e000ed04 	.word	0xe000ed04

0800be2c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b08e      	sub	sp, #56	; 0x38
 800be30:	af00      	add	r7, sp, #0
 800be32:	60f8      	str	r0, [r7, #12]
 800be34:	60b9      	str	r1, [r7, #8]
 800be36:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800be3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d10a      	bne.n	800be58 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800be42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be46:	f383 8811 	msr	BASEPRI, r3
 800be4a:	f3bf 8f6f 	isb	sy
 800be4e:	f3bf 8f4f 	dsb	sy
 800be52:	623b      	str	r3, [r7, #32]
}
 800be54:	bf00      	nop
 800be56:	e7fe      	b.n	800be56 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800be58:	68bb      	ldr	r3, [r7, #8]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d103      	bne.n	800be66 <xQueueReceiveFromISR+0x3a>
 800be5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be62:	2b00      	cmp	r3, #0
 800be64:	d101      	bne.n	800be6a <xQueueReceiveFromISR+0x3e>
 800be66:	2301      	movs	r3, #1
 800be68:	e000      	b.n	800be6c <xQueueReceiveFromISR+0x40>
 800be6a:	2300      	movs	r3, #0
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d10a      	bne.n	800be86 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800be70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be74:	f383 8811 	msr	BASEPRI, r3
 800be78:	f3bf 8f6f 	isb	sy
 800be7c:	f3bf 8f4f 	dsb	sy
 800be80:	61fb      	str	r3, [r7, #28]
}
 800be82:	bf00      	nop
 800be84:	e7fe      	b.n	800be84 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800be86:	f001 fa67 	bl	800d358 <vPortValidateInterruptPriority>
	__asm volatile
 800be8a:	f3ef 8211 	mrs	r2, BASEPRI
 800be8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be92:	f383 8811 	msr	BASEPRI, r3
 800be96:	f3bf 8f6f 	isb	sy
 800be9a:	f3bf 8f4f 	dsb	sy
 800be9e:	61ba      	str	r2, [r7, #24]
 800bea0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800bea2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bea4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800beaa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800beac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d02f      	beq.n	800bf12 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800beb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800beb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bebc:	68b9      	ldr	r1, [r7, #8]
 800bebe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bec0:	f000 f89e 	bl	800c000 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bec6:	1e5a      	subs	r2, r3, #1
 800bec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beca:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800becc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bed4:	d112      	bne.n	800befc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed8:	691b      	ldr	r3, [r3, #16]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d016      	beq.n	800bf0c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bee0:	3310      	adds	r3, #16
 800bee2:	4618      	mov	r0, r3
 800bee4:	f000 fd62 	bl	800c9ac <xTaskRemoveFromEventList>
 800bee8:	4603      	mov	r3, r0
 800beea:	2b00      	cmp	r3, #0
 800beec:	d00e      	beq.n	800bf0c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d00b      	beq.n	800bf0c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2201      	movs	r2, #1
 800bef8:	601a      	str	r2, [r3, #0]
 800befa:	e007      	b.n	800bf0c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800befc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf00:	3301      	adds	r3, #1
 800bf02:	b2db      	uxtb	r3, r3
 800bf04:	b25a      	sxtb	r2, r3
 800bf06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800bf0c:	2301      	movs	r3, #1
 800bf0e:	637b      	str	r3, [r7, #52]	; 0x34
 800bf10:	e001      	b.n	800bf16 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800bf12:	2300      	movs	r3, #0
 800bf14:	637b      	str	r3, [r7, #52]	; 0x34
 800bf16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf18:	613b      	str	r3, [r7, #16]
	__asm volatile
 800bf1a:	693b      	ldr	r3, [r7, #16]
 800bf1c:	f383 8811 	msr	BASEPRI, r3
}
 800bf20:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bf22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bf24:	4618      	mov	r0, r3
 800bf26:	3738      	adds	r7, #56	; 0x38
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd80      	pop	{r7, pc}

0800bf2c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b086      	sub	sp, #24
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	60f8      	str	r0, [r7, #12]
 800bf34:	60b9      	str	r1, [r7, #8]
 800bf36:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bf38:	2300      	movs	r3, #0
 800bf3a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf40:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d10d      	bne.n	800bf66 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d14d      	bne.n	800bfee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	689b      	ldr	r3, [r3, #8]
 800bf56:	4618      	mov	r0, r3
 800bf58:	f000 ff06 	bl	800cd68 <xTaskPriorityDisinherit>
 800bf5c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	2200      	movs	r2, #0
 800bf62:	609a      	str	r2, [r3, #8]
 800bf64:	e043      	b.n	800bfee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d119      	bne.n	800bfa0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	6858      	ldr	r0, [r3, #4]
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf74:	461a      	mov	r2, r3
 800bf76:	68b9      	ldr	r1, [r7, #8]
 800bf78:	f001 ff56 	bl	800de28 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	685a      	ldr	r2, [r3, #4]
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf84:	441a      	add	r2, r3
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	685a      	ldr	r2, [r3, #4]
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	689b      	ldr	r3, [r3, #8]
 800bf92:	429a      	cmp	r2, r3
 800bf94:	d32b      	bcc.n	800bfee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	681a      	ldr	r2, [r3, #0]
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	605a      	str	r2, [r3, #4]
 800bf9e:	e026      	b.n	800bfee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	68d8      	ldr	r0, [r3, #12]
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfa8:	461a      	mov	r2, r3
 800bfaa:	68b9      	ldr	r1, [r7, #8]
 800bfac:	f001 ff3c 	bl	800de28 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	68da      	ldr	r2, [r3, #12]
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfb8:	425b      	negs	r3, r3
 800bfba:	441a      	add	r2, r3
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	68da      	ldr	r2, [r3, #12]
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	429a      	cmp	r2, r3
 800bfca:	d207      	bcs.n	800bfdc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	689a      	ldr	r2, [r3, #8]
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfd4:	425b      	negs	r3, r3
 800bfd6:	441a      	add	r2, r3
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2b02      	cmp	r3, #2
 800bfe0:	d105      	bne.n	800bfee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bfe2:	693b      	ldr	r3, [r7, #16]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d002      	beq.n	800bfee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bfe8:	693b      	ldr	r3, [r7, #16]
 800bfea:	3b01      	subs	r3, #1
 800bfec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bfee:	693b      	ldr	r3, [r7, #16]
 800bff0:	1c5a      	adds	r2, r3, #1
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bff6:	697b      	ldr	r3, [r7, #20]
}
 800bff8:	4618      	mov	r0, r3
 800bffa:	3718      	adds	r7, #24
 800bffc:	46bd      	mov	sp, r7
 800bffe:	bd80      	pop	{r7, pc}

0800c000 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b082      	sub	sp, #8
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
 800c008:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d018      	beq.n	800c044 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	68da      	ldr	r2, [r3, #12]
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c01a:	441a      	add	r2, r3
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	68da      	ldr	r2, [r3, #12]
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	689b      	ldr	r3, [r3, #8]
 800c028:	429a      	cmp	r2, r3
 800c02a:	d303      	bcc.n	800c034 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681a      	ldr	r2, [r3, #0]
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	68d9      	ldr	r1, [r3, #12]
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c03c:	461a      	mov	r2, r3
 800c03e:	6838      	ldr	r0, [r7, #0]
 800c040:	f001 fef2 	bl	800de28 <memcpy>
	}
}
 800c044:	bf00      	nop
 800c046:	3708      	adds	r7, #8
 800c048:	46bd      	mov	sp, r7
 800c04a:	bd80      	pop	{r7, pc}

0800c04c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b084      	sub	sp, #16
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c054:	f001 f89e 	bl	800d194 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c05e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c060:	e011      	b.n	800c086 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c066:	2b00      	cmp	r3, #0
 800c068:	d012      	beq.n	800c090 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	3324      	adds	r3, #36	; 0x24
 800c06e:	4618      	mov	r0, r3
 800c070:	f000 fc9c 	bl	800c9ac <xTaskRemoveFromEventList>
 800c074:	4603      	mov	r3, r0
 800c076:	2b00      	cmp	r3, #0
 800c078:	d001      	beq.n	800c07e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c07a:	f000 fd71 	bl	800cb60 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c07e:	7bfb      	ldrb	r3, [r7, #15]
 800c080:	3b01      	subs	r3, #1
 800c082:	b2db      	uxtb	r3, r3
 800c084:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	dce9      	bgt.n	800c062 <prvUnlockQueue+0x16>
 800c08e:	e000      	b.n	800c092 <prvUnlockQueue+0x46>
					break;
 800c090:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	22ff      	movs	r2, #255	; 0xff
 800c096:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c09a:	f001 f8ab 	bl	800d1f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c09e:	f001 f879 	bl	800d194 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c0a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c0aa:	e011      	b.n	800c0d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	691b      	ldr	r3, [r3, #16]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d012      	beq.n	800c0da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	3310      	adds	r3, #16
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	f000 fc77 	bl	800c9ac <xTaskRemoveFromEventList>
 800c0be:	4603      	mov	r3, r0
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d001      	beq.n	800c0c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c0c4:	f000 fd4c 	bl	800cb60 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c0c8:	7bbb      	ldrb	r3, [r7, #14]
 800c0ca:	3b01      	subs	r3, #1
 800c0cc:	b2db      	uxtb	r3, r3
 800c0ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c0d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	dce9      	bgt.n	800c0ac <prvUnlockQueue+0x60>
 800c0d8:	e000      	b.n	800c0dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c0da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	22ff      	movs	r2, #255	; 0xff
 800c0e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c0e4:	f001 f886 	bl	800d1f4 <vPortExitCritical>
}
 800c0e8:	bf00      	nop
 800c0ea:	3710      	adds	r7, #16
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}

0800c0f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b084      	sub	sp, #16
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c0f8:	f001 f84c 	bl	800d194 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c100:	2b00      	cmp	r3, #0
 800c102:	d102      	bne.n	800c10a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c104:	2301      	movs	r3, #1
 800c106:	60fb      	str	r3, [r7, #12]
 800c108:	e001      	b.n	800c10e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c10a:	2300      	movs	r3, #0
 800c10c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c10e:	f001 f871 	bl	800d1f4 <vPortExitCritical>

	return xReturn;
 800c112:	68fb      	ldr	r3, [r7, #12]
}
 800c114:	4618      	mov	r0, r3
 800c116:	3710      	adds	r7, #16
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}

0800c11c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b084      	sub	sp, #16
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c124:	f001 f836 	bl	800d194 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c130:	429a      	cmp	r2, r3
 800c132:	d102      	bne.n	800c13a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c134:	2301      	movs	r3, #1
 800c136:	60fb      	str	r3, [r7, #12]
 800c138:	e001      	b.n	800c13e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c13a:	2300      	movs	r3, #0
 800c13c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c13e:	f001 f859 	bl	800d1f4 <vPortExitCritical>

	return xReturn;
 800c142:	68fb      	ldr	r3, [r7, #12]
}
 800c144:	4618      	mov	r0, r3
 800c146:	3710      	adds	r7, #16
 800c148:	46bd      	mov	sp, r7
 800c14a:	bd80      	pop	{r7, pc}

0800c14c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b08e      	sub	sp, #56	; 0x38
 800c150:	af04      	add	r7, sp, #16
 800c152:	60f8      	str	r0, [r7, #12]
 800c154:	60b9      	str	r1, [r7, #8]
 800c156:	607a      	str	r2, [r7, #4]
 800c158:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c15a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d10a      	bne.n	800c176 <xTaskCreateStatic+0x2a>
	__asm volatile
 800c160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c164:	f383 8811 	msr	BASEPRI, r3
 800c168:	f3bf 8f6f 	isb	sy
 800c16c:	f3bf 8f4f 	dsb	sy
 800c170:	623b      	str	r3, [r7, #32]
}
 800c172:	bf00      	nop
 800c174:	e7fe      	b.n	800c174 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d10a      	bne.n	800c192 <xTaskCreateStatic+0x46>
	__asm volatile
 800c17c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c180:	f383 8811 	msr	BASEPRI, r3
 800c184:	f3bf 8f6f 	isb	sy
 800c188:	f3bf 8f4f 	dsb	sy
 800c18c:	61fb      	str	r3, [r7, #28]
}
 800c18e:	bf00      	nop
 800c190:	e7fe      	b.n	800c190 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c192:	23b4      	movs	r3, #180	; 0xb4
 800c194:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c196:	693b      	ldr	r3, [r7, #16]
 800c198:	2bb4      	cmp	r3, #180	; 0xb4
 800c19a:	d00a      	beq.n	800c1b2 <xTaskCreateStatic+0x66>
	__asm volatile
 800c19c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1a0:	f383 8811 	msr	BASEPRI, r3
 800c1a4:	f3bf 8f6f 	isb	sy
 800c1a8:	f3bf 8f4f 	dsb	sy
 800c1ac:	61bb      	str	r3, [r7, #24]
}
 800c1ae:	bf00      	nop
 800c1b0:	e7fe      	b.n	800c1b0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c1b2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c1b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d01e      	beq.n	800c1f8 <xTaskCreateStatic+0xac>
 800c1ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d01b      	beq.n	800c1f8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c1c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1c2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c1c8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1cc:	2202      	movs	r2, #2
 800c1ce:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	9303      	str	r3, [sp, #12]
 800c1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1d8:	9302      	str	r3, [sp, #8]
 800c1da:	f107 0314 	add.w	r3, r7, #20
 800c1de:	9301      	str	r3, [sp, #4]
 800c1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e2:	9300      	str	r3, [sp, #0]
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	687a      	ldr	r2, [r7, #4]
 800c1e8:	68b9      	ldr	r1, [r7, #8]
 800c1ea:	68f8      	ldr	r0, [r7, #12]
 800c1ec:	f000 f850 	bl	800c290 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c1f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c1f2:	f000 f8eb 	bl	800c3cc <prvAddNewTaskToReadyList>
 800c1f6:	e001      	b.n	800c1fc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c1fc:	697b      	ldr	r3, [r7, #20]
	}
 800c1fe:	4618      	mov	r0, r3
 800c200:	3728      	adds	r7, #40	; 0x28
 800c202:	46bd      	mov	sp, r7
 800c204:	bd80      	pop	{r7, pc}

0800c206 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c206:	b580      	push	{r7, lr}
 800c208:	b08c      	sub	sp, #48	; 0x30
 800c20a:	af04      	add	r7, sp, #16
 800c20c:	60f8      	str	r0, [r7, #12]
 800c20e:	60b9      	str	r1, [r7, #8]
 800c210:	603b      	str	r3, [r7, #0]
 800c212:	4613      	mov	r3, r2
 800c214:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c216:	88fb      	ldrh	r3, [r7, #6]
 800c218:	009b      	lsls	r3, r3, #2
 800c21a:	4618      	mov	r0, r3
 800c21c:	f001 f8dc 	bl	800d3d8 <pvPortMalloc>
 800c220:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c222:	697b      	ldr	r3, [r7, #20]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d00e      	beq.n	800c246 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c228:	20b4      	movs	r0, #180	; 0xb4
 800c22a:	f001 f8d5 	bl	800d3d8 <pvPortMalloc>
 800c22e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c230:	69fb      	ldr	r3, [r7, #28]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d003      	beq.n	800c23e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c236:	69fb      	ldr	r3, [r7, #28]
 800c238:	697a      	ldr	r2, [r7, #20]
 800c23a:	631a      	str	r2, [r3, #48]	; 0x30
 800c23c:	e005      	b.n	800c24a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c23e:	6978      	ldr	r0, [r7, #20]
 800c240:	f001 f996 	bl	800d570 <vPortFree>
 800c244:	e001      	b.n	800c24a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c246:	2300      	movs	r3, #0
 800c248:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c24a:	69fb      	ldr	r3, [r7, #28]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d017      	beq.n	800c280 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c250:	69fb      	ldr	r3, [r7, #28]
 800c252:	2200      	movs	r2, #0
 800c254:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c258:	88fa      	ldrh	r2, [r7, #6]
 800c25a:	2300      	movs	r3, #0
 800c25c:	9303      	str	r3, [sp, #12]
 800c25e:	69fb      	ldr	r3, [r7, #28]
 800c260:	9302      	str	r3, [sp, #8]
 800c262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c264:	9301      	str	r3, [sp, #4]
 800c266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c268:	9300      	str	r3, [sp, #0]
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	68b9      	ldr	r1, [r7, #8]
 800c26e:	68f8      	ldr	r0, [r7, #12]
 800c270:	f000 f80e 	bl	800c290 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c274:	69f8      	ldr	r0, [r7, #28]
 800c276:	f000 f8a9 	bl	800c3cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c27a:	2301      	movs	r3, #1
 800c27c:	61bb      	str	r3, [r7, #24]
 800c27e:	e002      	b.n	800c286 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c280:	f04f 33ff 	mov.w	r3, #4294967295
 800c284:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c286:	69bb      	ldr	r3, [r7, #24]
	}
 800c288:	4618      	mov	r0, r3
 800c28a:	3720      	adds	r7, #32
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}

0800c290 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b088      	sub	sp, #32
 800c294:	af00      	add	r7, sp, #0
 800c296:	60f8      	str	r0, [r7, #12]
 800c298:	60b9      	str	r1, [r7, #8]
 800c29a:	607a      	str	r2, [r7, #4]
 800c29c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c2a8:	3b01      	subs	r3, #1
 800c2aa:	009b      	lsls	r3, r3, #2
 800c2ac:	4413      	add	r3, r2
 800c2ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c2b0:	69bb      	ldr	r3, [r7, #24]
 800c2b2:	f023 0307 	bic.w	r3, r3, #7
 800c2b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c2b8:	69bb      	ldr	r3, [r7, #24]
 800c2ba:	f003 0307 	and.w	r3, r3, #7
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d00a      	beq.n	800c2d8 <prvInitialiseNewTask+0x48>
	__asm volatile
 800c2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2c6:	f383 8811 	msr	BASEPRI, r3
 800c2ca:	f3bf 8f6f 	isb	sy
 800c2ce:	f3bf 8f4f 	dsb	sy
 800c2d2:	617b      	str	r3, [r7, #20]
}
 800c2d4:	bf00      	nop
 800c2d6:	e7fe      	b.n	800c2d6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c2d8:	68bb      	ldr	r3, [r7, #8]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d01f      	beq.n	800c31e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c2de:	2300      	movs	r3, #0
 800c2e0:	61fb      	str	r3, [r7, #28]
 800c2e2:	e012      	b.n	800c30a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c2e4:	68ba      	ldr	r2, [r7, #8]
 800c2e6:	69fb      	ldr	r3, [r7, #28]
 800c2e8:	4413      	add	r3, r2
 800c2ea:	7819      	ldrb	r1, [r3, #0]
 800c2ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2ee:	69fb      	ldr	r3, [r7, #28]
 800c2f0:	4413      	add	r3, r2
 800c2f2:	3334      	adds	r3, #52	; 0x34
 800c2f4:	460a      	mov	r2, r1
 800c2f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c2f8:	68ba      	ldr	r2, [r7, #8]
 800c2fa:	69fb      	ldr	r3, [r7, #28]
 800c2fc:	4413      	add	r3, r2
 800c2fe:	781b      	ldrb	r3, [r3, #0]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d006      	beq.n	800c312 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c304:	69fb      	ldr	r3, [r7, #28]
 800c306:	3301      	adds	r3, #1
 800c308:	61fb      	str	r3, [r7, #28]
 800c30a:	69fb      	ldr	r3, [r7, #28]
 800c30c:	2b0f      	cmp	r3, #15
 800c30e:	d9e9      	bls.n	800c2e4 <prvInitialiseNewTask+0x54>
 800c310:	e000      	b.n	800c314 <prvInitialiseNewTask+0x84>
			{
				break;
 800c312:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c316:	2200      	movs	r2, #0
 800c318:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c31c:	e003      	b.n	800c326 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c31e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c320:	2200      	movs	r2, #0
 800c322:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c328:	2b06      	cmp	r3, #6
 800c32a:	d901      	bls.n	800c330 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c32c:	2306      	movs	r3, #6
 800c32e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c332:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c334:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c338:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c33a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c33c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c33e:	2200      	movs	r2, #0
 800c340:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c344:	3304      	adds	r3, #4
 800c346:	4618      	mov	r0, r3
 800c348:	f7ff f928 	bl	800b59c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c34c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c34e:	3318      	adds	r3, #24
 800c350:	4618      	mov	r0, r3
 800c352:	f7ff f923 	bl	800b59c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c358:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c35a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c35e:	f1c3 0207 	rsb	r2, r3, #7
 800c362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c364:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c368:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c36a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c36c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c36e:	2200      	movs	r2, #0
 800c370:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c376:	2200      	movs	r2, #0
 800c378:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c37e:	334c      	adds	r3, #76	; 0x4c
 800c380:	2260      	movs	r2, #96	; 0x60
 800c382:	2100      	movs	r1, #0
 800c384:	4618      	mov	r0, r3
 800c386:	f001 fd5d 	bl	800de44 <memset>
 800c38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c38c:	4a0c      	ldr	r2, [pc, #48]	; (800c3c0 <prvInitialiseNewTask+0x130>)
 800c38e:	651a      	str	r2, [r3, #80]	; 0x50
 800c390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c392:	4a0c      	ldr	r2, [pc, #48]	; (800c3c4 <prvInitialiseNewTask+0x134>)
 800c394:	655a      	str	r2, [r3, #84]	; 0x54
 800c396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c398:	4a0b      	ldr	r2, [pc, #44]	; (800c3c8 <prvInitialiseNewTask+0x138>)
 800c39a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c39c:	683a      	ldr	r2, [r7, #0]
 800c39e:	68f9      	ldr	r1, [r7, #12]
 800c3a0:	69b8      	ldr	r0, [r7, #24]
 800c3a2:	f000 fdcd 	bl	800cf40 <pxPortInitialiseStack>
 800c3a6:	4602      	mov	r2, r0
 800c3a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3aa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c3ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d002      	beq.n	800c3b8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c3b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3b6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c3b8:	bf00      	nop
 800c3ba:	3720      	adds	r7, #32
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bd80      	pop	{r7, pc}
 800c3c0:	0800e8c4 	.word	0x0800e8c4
 800c3c4:	0800e8e4 	.word	0x0800e8e4
 800c3c8:	0800e8a4 	.word	0x0800e8a4

0800c3cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b082      	sub	sp, #8
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c3d4:	f000 fede 	bl	800d194 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c3d8:	4b2a      	ldr	r3, [pc, #168]	; (800c484 <prvAddNewTaskToReadyList+0xb8>)
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	3301      	adds	r3, #1
 800c3de:	4a29      	ldr	r2, [pc, #164]	; (800c484 <prvAddNewTaskToReadyList+0xb8>)
 800c3e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c3e2:	4b29      	ldr	r3, [pc, #164]	; (800c488 <prvAddNewTaskToReadyList+0xbc>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d109      	bne.n	800c3fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c3ea:	4a27      	ldr	r2, [pc, #156]	; (800c488 <prvAddNewTaskToReadyList+0xbc>)
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c3f0:	4b24      	ldr	r3, [pc, #144]	; (800c484 <prvAddNewTaskToReadyList+0xb8>)
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	2b01      	cmp	r3, #1
 800c3f6:	d110      	bne.n	800c41a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c3f8:	f000 fbd6 	bl	800cba8 <prvInitialiseTaskLists>
 800c3fc:	e00d      	b.n	800c41a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c3fe:	4b23      	ldr	r3, [pc, #140]	; (800c48c <prvAddNewTaskToReadyList+0xc0>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d109      	bne.n	800c41a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c406:	4b20      	ldr	r3, [pc, #128]	; (800c488 <prvAddNewTaskToReadyList+0xbc>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c410:	429a      	cmp	r2, r3
 800c412:	d802      	bhi.n	800c41a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c414:	4a1c      	ldr	r2, [pc, #112]	; (800c488 <prvAddNewTaskToReadyList+0xbc>)
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c41a:	4b1d      	ldr	r3, [pc, #116]	; (800c490 <prvAddNewTaskToReadyList+0xc4>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	3301      	adds	r3, #1
 800c420:	4a1b      	ldr	r2, [pc, #108]	; (800c490 <prvAddNewTaskToReadyList+0xc4>)
 800c422:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c428:	2201      	movs	r2, #1
 800c42a:	409a      	lsls	r2, r3
 800c42c:	4b19      	ldr	r3, [pc, #100]	; (800c494 <prvAddNewTaskToReadyList+0xc8>)
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	4313      	orrs	r3, r2
 800c432:	4a18      	ldr	r2, [pc, #96]	; (800c494 <prvAddNewTaskToReadyList+0xc8>)
 800c434:	6013      	str	r3, [r2, #0]
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c43a:	4613      	mov	r3, r2
 800c43c:	009b      	lsls	r3, r3, #2
 800c43e:	4413      	add	r3, r2
 800c440:	009b      	lsls	r3, r3, #2
 800c442:	4a15      	ldr	r2, [pc, #84]	; (800c498 <prvAddNewTaskToReadyList+0xcc>)
 800c444:	441a      	add	r2, r3
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	3304      	adds	r3, #4
 800c44a:	4619      	mov	r1, r3
 800c44c:	4610      	mov	r0, r2
 800c44e:	f7ff f8b2 	bl	800b5b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c452:	f000 fecf 	bl	800d1f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c456:	4b0d      	ldr	r3, [pc, #52]	; (800c48c <prvAddNewTaskToReadyList+0xc0>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d00e      	beq.n	800c47c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c45e:	4b0a      	ldr	r3, [pc, #40]	; (800c488 <prvAddNewTaskToReadyList+0xbc>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c468:	429a      	cmp	r2, r3
 800c46a:	d207      	bcs.n	800c47c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c46c:	4b0b      	ldr	r3, [pc, #44]	; (800c49c <prvAddNewTaskToReadyList+0xd0>)
 800c46e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c472:	601a      	str	r2, [r3, #0]
 800c474:	f3bf 8f4f 	dsb	sy
 800c478:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c47c:	bf00      	nop
 800c47e:	3708      	adds	r7, #8
 800c480:	46bd      	mov	sp, r7
 800c482:	bd80      	pop	{r7, pc}
 800c484:	20000468 	.word	0x20000468
 800c488:	20000368 	.word	0x20000368
 800c48c:	20000474 	.word	0x20000474
 800c490:	20000484 	.word	0x20000484
 800c494:	20000470 	.word	0x20000470
 800c498:	2000036c 	.word	0x2000036c
 800c49c:	e000ed04 	.word	0xe000ed04

0800c4a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b084      	sub	sp, #16
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d017      	beq.n	800c4e2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c4b2:	4b13      	ldr	r3, [pc, #76]	; (800c500 <vTaskDelay+0x60>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d00a      	beq.n	800c4d0 <vTaskDelay+0x30>
	__asm volatile
 800c4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4be:	f383 8811 	msr	BASEPRI, r3
 800c4c2:	f3bf 8f6f 	isb	sy
 800c4c6:	f3bf 8f4f 	dsb	sy
 800c4ca:	60bb      	str	r3, [r7, #8]
}
 800c4cc:	bf00      	nop
 800c4ce:	e7fe      	b.n	800c4ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c4d0:	f000 f884 	bl	800c5dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c4d4:	2100      	movs	r1, #0
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f000 fccc 	bl	800ce74 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c4dc:	f000 f88c 	bl	800c5f8 <xTaskResumeAll>
 800c4e0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d107      	bne.n	800c4f8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c4e8:	4b06      	ldr	r3, [pc, #24]	; (800c504 <vTaskDelay+0x64>)
 800c4ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4ee:	601a      	str	r2, [r3, #0]
 800c4f0:	f3bf 8f4f 	dsb	sy
 800c4f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c4f8:	bf00      	nop
 800c4fa:	3710      	adds	r7, #16
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	bd80      	pop	{r7, pc}
 800c500:	20000490 	.word	0x20000490
 800c504:	e000ed04 	.word	0xe000ed04

0800c508 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b08a      	sub	sp, #40	; 0x28
 800c50c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c50e:	2300      	movs	r3, #0
 800c510:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c512:	2300      	movs	r3, #0
 800c514:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c516:	463a      	mov	r2, r7
 800c518:	1d39      	adds	r1, r7, #4
 800c51a:	f107 0308 	add.w	r3, r7, #8
 800c51e:	4618      	mov	r0, r3
 800c520:	f7f4 fb30 	bl	8000b84 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c524:	6839      	ldr	r1, [r7, #0]
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	68ba      	ldr	r2, [r7, #8]
 800c52a:	9202      	str	r2, [sp, #8]
 800c52c:	9301      	str	r3, [sp, #4]
 800c52e:	2300      	movs	r3, #0
 800c530:	9300      	str	r3, [sp, #0]
 800c532:	2300      	movs	r3, #0
 800c534:	460a      	mov	r2, r1
 800c536:	4921      	ldr	r1, [pc, #132]	; (800c5bc <vTaskStartScheduler+0xb4>)
 800c538:	4821      	ldr	r0, [pc, #132]	; (800c5c0 <vTaskStartScheduler+0xb8>)
 800c53a:	f7ff fe07 	bl	800c14c <xTaskCreateStatic>
 800c53e:	4603      	mov	r3, r0
 800c540:	4a20      	ldr	r2, [pc, #128]	; (800c5c4 <vTaskStartScheduler+0xbc>)
 800c542:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c544:	4b1f      	ldr	r3, [pc, #124]	; (800c5c4 <vTaskStartScheduler+0xbc>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d002      	beq.n	800c552 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c54c:	2301      	movs	r3, #1
 800c54e:	617b      	str	r3, [r7, #20]
 800c550:	e001      	b.n	800c556 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c552:	2300      	movs	r3, #0
 800c554:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c556:	697b      	ldr	r3, [r7, #20]
 800c558:	2b01      	cmp	r3, #1
 800c55a:	d11b      	bne.n	800c594 <vTaskStartScheduler+0x8c>
	__asm volatile
 800c55c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c560:	f383 8811 	msr	BASEPRI, r3
 800c564:	f3bf 8f6f 	isb	sy
 800c568:	f3bf 8f4f 	dsb	sy
 800c56c:	613b      	str	r3, [r7, #16]
}
 800c56e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c570:	4b15      	ldr	r3, [pc, #84]	; (800c5c8 <vTaskStartScheduler+0xc0>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	334c      	adds	r3, #76	; 0x4c
 800c576:	4a15      	ldr	r2, [pc, #84]	; (800c5cc <vTaskStartScheduler+0xc4>)
 800c578:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c57a:	4b15      	ldr	r3, [pc, #84]	; (800c5d0 <vTaskStartScheduler+0xc8>)
 800c57c:	f04f 32ff 	mov.w	r2, #4294967295
 800c580:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c582:	4b14      	ldr	r3, [pc, #80]	; (800c5d4 <vTaskStartScheduler+0xcc>)
 800c584:	2201      	movs	r2, #1
 800c586:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c588:	4b13      	ldr	r3, [pc, #76]	; (800c5d8 <vTaskStartScheduler+0xd0>)
 800c58a:	2200      	movs	r2, #0
 800c58c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c58e:	f000 fd5f 	bl	800d050 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c592:	e00e      	b.n	800c5b2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c59a:	d10a      	bne.n	800c5b2 <vTaskStartScheduler+0xaa>
	__asm volatile
 800c59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5a0:	f383 8811 	msr	BASEPRI, r3
 800c5a4:	f3bf 8f6f 	isb	sy
 800c5a8:	f3bf 8f4f 	dsb	sy
 800c5ac:	60fb      	str	r3, [r7, #12]
}
 800c5ae:	bf00      	nop
 800c5b0:	e7fe      	b.n	800c5b0 <vTaskStartScheduler+0xa8>
}
 800c5b2:	bf00      	nop
 800c5b4:	3718      	adds	r7, #24
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	bd80      	pop	{r7, pc}
 800c5ba:	bf00      	nop
 800c5bc:	0800e87c 	.word	0x0800e87c
 800c5c0:	0800cb79 	.word	0x0800cb79
 800c5c4:	2000048c 	.word	0x2000048c
 800c5c8:	20000368 	.word	0x20000368
 800c5cc:	20000030 	.word	0x20000030
 800c5d0:	20000488 	.word	0x20000488
 800c5d4:	20000474 	.word	0x20000474
 800c5d8:	2000046c 	.word	0x2000046c

0800c5dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c5dc:	b480      	push	{r7}
 800c5de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c5e0:	4b04      	ldr	r3, [pc, #16]	; (800c5f4 <vTaskSuspendAll+0x18>)
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	3301      	adds	r3, #1
 800c5e6:	4a03      	ldr	r2, [pc, #12]	; (800c5f4 <vTaskSuspendAll+0x18>)
 800c5e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c5ea:	bf00      	nop
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f2:	4770      	bx	lr
 800c5f4:	20000490 	.word	0x20000490

0800c5f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b084      	sub	sp, #16
 800c5fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c5fe:	2300      	movs	r3, #0
 800c600:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c602:	2300      	movs	r3, #0
 800c604:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c606:	4b41      	ldr	r3, [pc, #260]	; (800c70c <xTaskResumeAll+0x114>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d10a      	bne.n	800c624 <xTaskResumeAll+0x2c>
	__asm volatile
 800c60e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c612:	f383 8811 	msr	BASEPRI, r3
 800c616:	f3bf 8f6f 	isb	sy
 800c61a:	f3bf 8f4f 	dsb	sy
 800c61e:	603b      	str	r3, [r7, #0]
}
 800c620:	bf00      	nop
 800c622:	e7fe      	b.n	800c622 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c624:	f000 fdb6 	bl	800d194 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c628:	4b38      	ldr	r3, [pc, #224]	; (800c70c <xTaskResumeAll+0x114>)
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	3b01      	subs	r3, #1
 800c62e:	4a37      	ldr	r2, [pc, #220]	; (800c70c <xTaskResumeAll+0x114>)
 800c630:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c632:	4b36      	ldr	r3, [pc, #216]	; (800c70c <xTaskResumeAll+0x114>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d161      	bne.n	800c6fe <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c63a:	4b35      	ldr	r3, [pc, #212]	; (800c710 <xTaskResumeAll+0x118>)
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d05d      	beq.n	800c6fe <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c642:	e02e      	b.n	800c6a2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c644:	4b33      	ldr	r3, [pc, #204]	; (800c714 <xTaskResumeAll+0x11c>)
 800c646:	68db      	ldr	r3, [r3, #12]
 800c648:	68db      	ldr	r3, [r3, #12]
 800c64a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	3318      	adds	r3, #24
 800c650:	4618      	mov	r0, r3
 800c652:	f7ff f80d 	bl	800b670 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	3304      	adds	r3, #4
 800c65a:	4618      	mov	r0, r3
 800c65c:	f7ff f808 	bl	800b670 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c664:	2201      	movs	r2, #1
 800c666:	409a      	lsls	r2, r3
 800c668:	4b2b      	ldr	r3, [pc, #172]	; (800c718 <xTaskResumeAll+0x120>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	4313      	orrs	r3, r2
 800c66e:	4a2a      	ldr	r2, [pc, #168]	; (800c718 <xTaskResumeAll+0x120>)
 800c670:	6013      	str	r3, [r2, #0]
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c676:	4613      	mov	r3, r2
 800c678:	009b      	lsls	r3, r3, #2
 800c67a:	4413      	add	r3, r2
 800c67c:	009b      	lsls	r3, r3, #2
 800c67e:	4a27      	ldr	r2, [pc, #156]	; (800c71c <xTaskResumeAll+0x124>)
 800c680:	441a      	add	r2, r3
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	3304      	adds	r3, #4
 800c686:	4619      	mov	r1, r3
 800c688:	4610      	mov	r0, r2
 800c68a:	f7fe ff94 	bl	800b5b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c692:	4b23      	ldr	r3, [pc, #140]	; (800c720 <xTaskResumeAll+0x128>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c698:	429a      	cmp	r2, r3
 800c69a:	d302      	bcc.n	800c6a2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800c69c:	4b21      	ldr	r3, [pc, #132]	; (800c724 <xTaskResumeAll+0x12c>)
 800c69e:	2201      	movs	r2, #1
 800c6a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c6a2:	4b1c      	ldr	r3, [pc, #112]	; (800c714 <xTaskResumeAll+0x11c>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d1cc      	bne.n	800c644 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d001      	beq.n	800c6b4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c6b0:	f000 fb1c 	bl	800ccec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c6b4:	4b1c      	ldr	r3, [pc, #112]	; (800c728 <xTaskResumeAll+0x130>)
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d010      	beq.n	800c6e2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c6c0:	f000 f836 	bl	800c730 <xTaskIncrementTick>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d002      	beq.n	800c6d0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800c6ca:	4b16      	ldr	r3, [pc, #88]	; (800c724 <xTaskResumeAll+0x12c>)
 800c6cc:	2201      	movs	r2, #1
 800c6ce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	3b01      	subs	r3, #1
 800c6d4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d1f1      	bne.n	800c6c0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800c6dc:	4b12      	ldr	r3, [pc, #72]	; (800c728 <xTaskResumeAll+0x130>)
 800c6de:	2200      	movs	r2, #0
 800c6e0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c6e2:	4b10      	ldr	r3, [pc, #64]	; (800c724 <xTaskResumeAll+0x12c>)
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d009      	beq.n	800c6fe <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c6ea:	2301      	movs	r3, #1
 800c6ec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c6ee:	4b0f      	ldr	r3, [pc, #60]	; (800c72c <xTaskResumeAll+0x134>)
 800c6f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6f4:	601a      	str	r2, [r3, #0]
 800c6f6:	f3bf 8f4f 	dsb	sy
 800c6fa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c6fe:	f000 fd79 	bl	800d1f4 <vPortExitCritical>

	return xAlreadyYielded;
 800c702:	68bb      	ldr	r3, [r7, #8]
}
 800c704:	4618      	mov	r0, r3
 800c706:	3710      	adds	r7, #16
 800c708:	46bd      	mov	sp, r7
 800c70a:	bd80      	pop	{r7, pc}
 800c70c:	20000490 	.word	0x20000490
 800c710:	20000468 	.word	0x20000468
 800c714:	20000428 	.word	0x20000428
 800c718:	20000470 	.word	0x20000470
 800c71c:	2000036c 	.word	0x2000036c
 800c720:	20000368 	.word	0x20000368
 800c724:	2000047c 	.word	0x2000047c
 800c728:	20000478 	.word	0x20000478
 800c72c:	e000ed04 	.word	0xe000ed04

0800c730 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b086      	sub	sp, #24
 800c734:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c736:	2300      	movs	r3, #0
 800c738:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c73a:	4b4e      	ldr	r3, [pc, #312]	; (800c874 <xTaskIncrementTick+0x144>)
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	f040 808e 	bne.w	800c860 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c744:	4b4c      	ldr	r3, [pc, #304]	; (800c878 <xTaskIncrementTick+0x148>)
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	3301      	adds	r3, #1
 800c74a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c74c:	4a4a      	ldr	r2, [pc, #296]	; (800c878 <xTaskIncrementTick+0x148>)
 800c74e:	693b      	ldr	r3, [r7, #16]
 800c750:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c752:	693b      	ldr	r3, [r7, #16]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d120      	bne.n	800c79a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c758:	4b48      	ldr	r3, [pc, #288]	; (800c87c <xTaskIncrementTick+0x14c>)
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d00a      	beq.n	800c778 <xTaskIncrementTick+0x48>
	__asm volatile
 800c762:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c766:	f383 8811 	msr	BASEPRI, r3
 800c76a:	f3bf 8f6f 	isb	sy
 800c76e:	f3bf 8f4f 	dsb	sy
 800c772:	603b      	str	r3, [r7, #0]
}
 800c774:	bf00      	nop
 800c776:	e7fe      	b.n	800c776 <xTaskIncrementTick+0x46>
 800c778:	4b40      	ldr	r3, [pc, #256]	; (800c87c <xTaskIncrementTick+0x14c>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	60fb      	str	r3, [r7, #12]
 800c77e:	4b40      	ldr	r3, [pc, #256]	; (800c880 <xTaskIncrementTick+0x150>)
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	4a3e      	ldr	r2, [pc, #248]	; (800c87c <xTaskIncrementTick+0x14c>)
 800c784:	6013      	str	r3, [r2, #0]
 800c786:	4a3e      	ldr	r2, [pc, #248]	; (800c880 <xTaskIncrementTick+0x150>)
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	6013      	str	r3, [r2, #0]
 800c78c:	4b3d      	ldr	r3, [pc, #244]	; (800c884 <xTaskIncrementTick+0x154>)
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	3301      	adds	r3, #1
 800c792:	4a3c      	ldr	r2, [pc, #240]	; (800c884 <xTaskIncrementTick+0x154>)
 800c794:	6013      	str	r3, [r2, #0]
 800c796:	f000 faa9 	bl	800ccec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c79a:	4b3b      	ldr	r3, [pc, #236]	; (800c888 <xTaskIncrementTick+0x158>)
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	693a      	ldr	r2, [r7, #16]
 800c7a0:	429a      	cmp	r2, r3
 800c7a2:	d348      	bcc.n	800c836 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c7a4:	4b35      	ldr	r3, [pc, #212]	; (800c87c <xTaskIncrementTick+0x14c>)
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d104      	bne.n	800c7b8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c7ae:	4b36      	ldr	r3, [pc, #216]	; (800c888 <xTaskIncrementTick+0x158>)
 800c7b0:	f04f 32ff 	mov.w	r2, #4294967295
 800c7b4:	601a      	str	r2, [r3, #0]
					break;
 800c7b6:	e03e      	b.n	800c836 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7b8:	4b30      	ldr	r3, [pc, #192]	; (800c87c <xTaskIncrementTick+0x14c>)
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	68db      	ldr	r3, [r3, #12]
 800c7be:	68db      	ldr	r3, [r3, #12]
 800c7c0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c7c2:	68bb      	ldr	r3, [r7, #8]
 800c7c4:	685b      	ldr	r3, [r3, #4]
 800c7c6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c7c8:	693a      	ldr	r2, [r7, #16]
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	429a      	cmp	r2, r3
 800c7ce:	d203      	bcs.n	800c7d8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c7d0:	4a2d      	ldr	r2, [pc, #180]	; (800c888 <xTaskIncrementTick+0x158>)
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c7d6:	e02e      	b.n	800c836 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c7d8:	68bb      	ldr	r3, [r7, #8]
 800c7da:	3304      	adds	r3, #4
 800c7dc:	4618      	mov	r0, r3
 800c7de:	f7fe ff47 	bl	800b670 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d004      	beq.n	800c7f4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c7ea:	68bb      	ldr	r3, [r7, #8]
 800c7ec:	3318      	adds	r3, #24
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	f7fe ff3e 	bl	800b670 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c7f4:	68bb      	ldr	r3, [r7, #8]
 800c7f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7f8:	2201      	movs	r2, #1
 800c7fa:	409a      	lsls	r2, r3
 800c7fc:	4b23      	ldr	r3, [pc, #140]	; (800c88c <xTaskIncrementTick+0x15c>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	4313      	orrs	r3, r2
 800c802:	4a22      	ldr	r2, [pc, #136]	; (800c88c <xTaskIncrementTick+0x15c>)
 800c804:	6013      	str	r3, [r2, #0]
 800c806:	68bb      	ldr	r3, [r7, #8]
 800c808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c80a:	4613      	mov	r3, r2
 800c80c:	009b      	lsls	r3, r3, #2
 800c80e:	4413      	add	r3, r2
 800c810:	009b      	lsls	r3, r3, #2
 800c812:	4a1f      	ldr	r2, [pc, #124]	; (800c890 <xTaskIncrementTick+0x160>)
 800c814:	441a      	add	r2, r3
 800c816:	68bb      	ldr	r3, [r7, #8]
 800c818:	3304      	adds	r3, #4
 800c81a:	4619      	mov	r1, r3
 800c81c:	4610      	mov	r0, r2
 800c81e:	f7fe feca 	bl	800b5b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c822:	68bb      	ldr	r3, [r7, #8]
 800c824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c826:	4b1b      	ldr	r3, [pc, #108]	; (800c894 <xTaskIncrementTick+0x164>)
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c82c:	429a      	cmp	r2, r3
 800c82e:	d3b9      	bcc.n	800c7a4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c830:	2301      	movs	r3, #1
 800c832:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c834:	e7b6      	b.n	800c7a4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c836:	4b17      	ldr	r3, [pc, #92]	; (800c894 <xTaskIncrementTick+0x164>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c83c:	4914      	ldr	r1, [pc, #80]	; (800c890 <xTaskIncrementTick+0x160>)
 800c83e:	4613      	mov	r3, r2
 800c840:	009b      	lsls	r3, r3, #2
 800c842:	4413      	add	r3, r2
 800c844:	009b      	lsls	r3, r3, #2
 800c846:	440b      	add	r3, r1
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	2b01      	cmp	r3, #1
 800c84c:	d901      	bls.n	800c852 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800c84e:	2301      	movs	r3, #1
 800c850:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c852:	4b11      	ldr	r3, [pc, #68]	; (800c898 <xTaskIncrementTick+0x168>)
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d007      	beq.n	800c86a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800c85a:	2301      	movs	r3, #1
 800c85c:	617b      	str	r3, [r7, #20]
 800c85e:	e004      	b.n	800c86a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c860:	4b0e      	ldr	r3, [pc, #56]	; (800c89c <xTaskIncrementTick+0x16c>)
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	3301      	adds	r3, #1
 800c866:	4a0d      	ldr	r2, [pc, #52]	; (800c89c <xTaskIncrementTick+0x16c>)
 800c868:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c86a:	697b      	ldr	r3, [r7, #20]
}
 800c86c:	4618      	mov	r0, r3
 800c86e:	3718      	adds	r7, #24
 800c870:	46bd      	mov	sp, r7
 800c872:	bd80      	pop	{r7, pc}
 800c874:	20000490 	.word	0x20000490
 800c878:	2000046c 	.word	0x2000046c
 800c87c:	20000420 	.word	0x20000420
 800c880:	20000424 	.word	0x20000424
 800c884:	20000480 	.word	0x20000480
 800c888:	20000488 	.word	0x20000488
 800c88c:	20000470 	.word	0x20000470
 800c890:	2000036c 	.word	0x2000036c
 800c894:	20000368 	.word	0x20000368
 800c898:	2000047c 	.word	0x2000047c
 800c89c:	20000478 	.word	0x20000478

0800c8a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c8a0:	b480      	push	{r7}
 800c8a2:	b087      	sub	sp, #28
 800c8a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c8a6:	4b29      	ldr	r3, [pc, #164]	; (800c94c <vTaskSwitchContext+0xac>)
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d003      	beq.n	800c8b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c8ae:	4b28      	ldr	r3, [pc, #160]	; (800c950 <vTaskSwitchContext+0xb0>)
 800c8b0:	2201      	movs	r2, #1
 800c8b2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c8b4:	e044      	b.n	800c940 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800c8b6:	4b26      	ldr	r3, [pc, #152]	; (800c950 <vTaskSwitchContext+0xb0>)
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c8bc:	4b25      	ldr	r3, [pc, #148]	; (800c954 <vTaskSwitchContext+0xb4>)
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	fab3 f383 	clz	r3, r3
 800c8c8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c8ca:	7afb      	ldrb	r3, [r7, #11]
 800c8cc:	f1c3 031f 	rsb	r3, r3, #31
 800c8d0:	617b      	str	r3, [r7, #20]
 800c8d2:	4921      	ldr	r1, [pc, #132]	; (800c958 <vTaskSwitchContext+0xb8>)
 800c8d4:	697a      	ldr	r2, [r7, #20]
 800c8d6:	4613      	mov	r3, r2
 800c8d8:	009b      	lsls	r3, r3, #2
 800c8da:	4413      	add	r3, r2
 800c8dc:	009b      	lsls	r3, r3, #2
 800c8de:	440b      	add	r3, r1
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d10a      	bne.n	800c8fc <vTaskSwitchContext+0x5c>
	__asm volatile
 800c8e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ea:	f383 8811 	msr	BASEPRI, r3
 800c8ee:	f3bf 8f6f 	isb	sy
 800c8f2:	f3bf 8f4f 	dsb	sy
 800c8f6:	607b      	str	r3, [r7, #4]
}
 800c8f8:	bf00      	nop
 800c8fa:	e7fe      	b.n	800c8fa <vTaskSwitchContext+0x5a>
 800c8fc:	697a      	ldr	r2, [r7, #20]
 800c8fe:	4613      	mov	r3, r2
 800c900:	009b      	lsls	r3, r3, #2
 800c902:	4413      	add	r3, r2
 800c904:	009b      	lsls	r3, r3, #2
 800c906:	4a14      	ldr	r2, [pc, #80]	; (800c958 <vTaskSwitchContext+0xb8>)
 800c908:	4413      	add	r3, r2
 800c90a:	613b      	str	r3, [r7, #16]
 800c90c:	693b      	ldr	r3, [r7, #16]
 800c90e:	685b      	ldr	r3, [r3, #4]
 800c910:	685a      	ldr	r2, [r3, #4]
 800c912:	693b      	ldr	r3, [r7, #16]
 800c914:	605a      	str	r2, [r3, #4]
 800c916:	693b      	ldr	r3, [r7, #16]
 800c918:	685a      	ldr	r2, [r3, #4]
 800c91a:	693b      	ldr	r3, [r7, #16]
 800c91c:	3308      	adds	r3, #8
 800c91e:	429a      	cmp	r2, r3
 800c920:	d104      	bne.n	800c92c <vTaskSwitchContext+0x8c>
 800c922:	693b      	ldr	r3, [r7, #16]
 800c924:	685b      	ldr	r3, [r3, #4]
 800c926:	685a      	ldr	r2, [r3, #4]
 800c928:	693b      	ldr	r3, [r7, #16]
 800c92a:	605a      	str	r2, [r3, #4]
 800c92c:	693b      	ldr	r3, [r7, #16]
 800c92e:	685b      	ldr	r3, [r3, #4]
 800c930:	68db      	ldr	r3, [r3, #12]
 800c932:	4a0a      	ldr	r2, [pc, #40]	; (800c95c <vTaskSwitchContext+0xbc>)
 800c934:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c936:	4b09      	ldr	r3, [pc, #36]	; (800c95c <vTaskSwitchContext+0xbc>)
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	334c      	adds	r3, #76	; 0x4c
 800c93c:	4a08      	ldr	r2, [pc, #32]	; (800c960 <vTaskSwitchContext+0xc0>)
 800c93e:	6013      	str	r3, [r2, #0]
}
 800c940:	bf00      	nop
 800c942:	371c      	adds	r7, #28
 800c944:	46bd      	mov	sp, r7
 800c946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94a:	4770      	bx	lr
 800c94c:	20000490 	.word	0x20000490
 800c950:	2000047c 	.word	0x2000047c
 800c954:	20000470 	.word	0x20000470
 800c958:	2000036c 	.word	0x2000036c
 800c95c:	20000368 	.word	0x20000368
 800c960:	20000030 	.word	0x20000030

0800c964 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b084      	sub	sp, #16
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
 800c96c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d10a      	bne.n	800c98a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c974:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c978:	f383 8811 	msr	BASEPRI, r3
 800c97c:	f3bf 8f6f 	isb	sy
 800c980:	f3bf 8f4f 	dsb	sy
 800c984:	60fb      	str	r3, [r7, #12]
}
 800c986:	bf00      	nop
 800c988:	e7fe      	b.n	800c988 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c98a:	4b07      	ldr	r3, [pc, #28]	; (800c9a8 <vTaskPlaceOnEventList+0x44>)
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	3318      	adds	r3, #24
 800c990:	4619      	mov	r1, r3
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	f7fe fe33 	bl	800b5fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c998:	2101      	movs	r1, #1
 800c99a:	6838      	ldr	r0, [r7, #0]
 800c99c:	f000 fa6a 	bl	800ce74 <prvAddCurrentTaskToDelayedList>
}
 800c9a0:	bf00      	nop
 800c9a2:	3710      	adds	r7, #16
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	bd80      	pop	{r7, pc}
 800c9a8:	20000368 	.word	0x20000368

0800c9ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b086      	sub	sp, #24
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	68db      	ldr	r3, [r3, #12]
 800c9b8:	68db      	ldr	r3, [r3, #12]
 800c9ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c9bc:	693b      	ldr	r3, [r7, #16]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d10a      	bne.n	800c9d8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c9c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9c6:	f383 8811 	msr	BASEPRI, r3
 800c9ca:	f3bf 8f6f 	isb	sy
 800c9ce:	f3bf 8f4f 	dsb	sy
 800c9d2:	60fb      	str	r3, [r7, #12]
}
 800c9d4:	bf00      	nop
 800c9d6:	e7fe      	b.n	800c9d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c9d8:	693b      	ldr	r3, [r7, #16]
 800c9da:	3318      	adds	r3, #24
 800c9dc:	4618      	mov	r0, r3
 800c9de:	f7fe fe47 	bl	800b670 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c9e2:	4b1d      	ldr	r3, [pc, #116]	; (800ca58 <xTaskRemoveFromEventList+0xac>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d11c      	bne.n	800ca24 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c9ea:	693b      	ldr	r3, [r7, #16]
 800c9ec:	3304      	adds	r3, #4
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	f7fe fe3e 	bl	800b670 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c9f4:	693b      	ldr	r3, [r7, #16]
 800c9f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9f8:	2201      	movs	r2, #1
 800c9fa:	409a      	lsls	r2, r3
 800c9fc:	4b17      	ldr	r3, [pc, #92]	; (800ca5c <xTaskRemoveFromEventList+0xb0>)
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	4313      	orrs	r3, r2
 800ca02:	4a16      	ldr	r2, [pc, #88]	; (800ca5c <xTaskRemoveFromEventList+0xb0>)
 800ca04:	6013      	str	r3, [r2, #0]
 800ca06:	693b      	ldr	r3, [r7, #16]
 800ca08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca0a:	4613      	mov	r3, r2
 800ca0c:	009b      	lsls	r3, r3, #2
 800ca0e:	4413      	add	r3, r2
 800ca10:	009b      	lsls	r3, r3, #2
 800ca12:	4a13      	ldr	r2, [pc, #76]	; (800ca60 <xTaskRemoveFromEventList+0xb4>)
 800ca14:	441a      	add	r2, r3
 800ca16:	693b      	ldr	r3, [r7, #16]
 800ca18:	3304      	adds	r3, #4
 800ca1a:	4619      	mov	r1, r3
 800ca1c:	4610      	mov	r0, r2
 800ca1e:	f7fe fdca 	bl	800b5b6 <vListInsertEnd>
 800ca22:	e005      	b.n	800ca30 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ca24:	693b      	ldr	r3, [r7, #16]
 800ca26:	3318      	adds	r3, #24
 800ca28:	4619      	mov	r1, r3
 800ca2a:	480e      	ldr	r0, [pc, #56]	; (800ca64 <xTaskRemoveFromEventList+0xb8>)
 800ca2c:	f7fe fdc3 	bl	800b5b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ca30:	693b      	ldr	r3, [r7, #16]
 800ca32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca34:	4b0c      	ldr	r3, [pc, #48]	; (800ca68 <xTaskRemoveFromEventList+0xbc>)
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca3a:	429a      	cmp	r2, r3
 800ca3c:	d905      	bls.n	800ca4a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ca3e:	2301      	movs	r3, #1
 800ca40:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ca42:	4b0a      	ldr	r3, [pc, #40]	; (800ca6c <xTaskRemoveFromEventList+0xc0>)
 800ca44:	2201      	movs	r2, #1
 800ca46:	601a      	str	r2, [r3, #0]
 800ca48:	e001      	b.n	800ca4e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ca4e:	697b      	ldr	r3, [r7, #20]
}
 800ca50:	4618      	mov	r0, r3
 800ca52:	3718      	adds	r7, #24
 800ca54:	46bd      	mov	sp, r7
 800ca56:	bd80      	pop	{r7, pc}
 800ca58:	20000490 	.word	0x20000490
 800ca5c:	20000470 	.word	0x20000470
 800ca60:	2000036c 	.word	0x2000036c
 800ca64:	20000428 	.word	0x20000428
 800ca68:	20000368 	.word	0x20000368
 800ca6c:	2000047c 	.word	0x2000047c

0800ca70 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ca70:	b480      	push	{r7}
 800ca72:	b083      	sub	sp, #12
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ca78:	4b06      	ldr	r3, [pc, #24]	; (800ca94 <vTaskInternalSetTimeOutState+0x24>)
 800ca7a:	681a      	ldr	r2, [r3, #0]
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ca80:	4b05      	ldr	r3, [pc, #20]	; (800ca98 <vTaskInternalSetTimeOutState+0x28>)
 800ca82:	681a      	ldr	r2, [r3, #0]
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	605a      	str	r2, [r3, #4]
}
 800ca88:	bf00      	nop
 800ca8a:	370c      	adds	r7, #12
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca92:	4770      	bx	lr
 800ca94:	20000480 	.word	0x20000480
 800ca98:	2000046c 	.word	0x2000046c

0800ca9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b088      	sub	sp, #32
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
 800caa4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d10a      	bne.n	800cac2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800caac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cab0:	f383 8811 	msr	BASEPRI, r3
 800cab4:	f3bf 8f6f 	isb	sy
 800cab8:	f3bf 8f4f 	dsb	sy
 800cabc:	613b      	str	r3, [r7, #16]
}
 800cabe:	bf00      	nop
 800cac0:	e7fe      	b.n	800cac0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cac2:	683b      	ldr	r3, [r7, #0]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d10a      	bne.n	800cade <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800cac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cacc:	f383 8811 	msr	BASEPRI, r3
 800cad0:	f3bf 8f6f 	isb	sy
 800cad4:	f3bf 8f4f 	dsb	sy
 800cad8:	60fb      	str	r3, [r7, #12]
}
 800cada:	bf00      	nop
 800cadc:	e7fe      	b.n	800cadc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800cade:	f000 fb59 	bl	800d194 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cae2:	4b1d      	ldr	r3, [pc, #116]	; (800cb58 <xTaskCheckForTimeOut+0xbc>)
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	685b      	ldr	r3, [r3, #4]
 800caec:	69ba      	ldr	r2, [r7, #24]
 800caee:	1ad3      	subs	r3, r2, r3
 800caf0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cafa:	d102      	bne.n	800cb02 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cafc:	2300      	movs	r3, #0
 800cafe:	61fb      	str	r3, [r7, #28]
 800cb00:	e023      	b.n	800cb4a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681a      	ldr	r2, [r3, #0]
 800cb06:	4b15      	ldr	r3, [pc, #84]	; (800cb5c <xTaskCheckForTimeOut+0xc0>)
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	429a      	cmp	r2, r3
 800cb0c:	d007      	beq.n	800cb1e <xTaskCheckForTimeOut+0x82>
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	685b      	ldr	r3, [r3, #4]
 800cb12:	69ba      	ldr	r2, [r7, #24]
 800cb14:	429a      	cmp	r2, r3
 800cb16:	d302      	bcc.n	800cb1e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cb18:	2301      	movs	r3, #1
 800cb1a:	61fb      	str	r3, [r7, #28]
 800cb1c:	e015      	b.n	800cb4a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	697a      	ldr	r2, [r7, #20]
 800cb24:	429a      	cmp	r2, r3
 800cb26:	d20b      	bcs.n	800cb40 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	681a      	ldr	r2, [r3, #0]
 800cb2c:	697b      	ldr	r3, [r7, #20]
 800cb2e:	1ad2      	subs	r2, r2, r3
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cb34:	6878      	ldr	r0, [r7, #4]
 800cb36:	f7ff ff9b 	bl	800ca70 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	61fb      	str	r3, [r7, #28]
 800cb3e:	e004      	b.n	800cb4a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	2200      	movs	r2, #0
 800cb44:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cb46:	2301      	movs	r3, #1
 800cb48:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cb4a:	f000 fb53 	bl	800d1f4 <vPortExitCritical>

	return xReturn;
 800cb4e:	69fb      	ldr	r3, [r7, #28]
}
 800cb50:	4618      	mov	r0, r3
 800cb52:	3720      	adds	r7, #32
 800cb54:	46bd      	mov	sp, r7
 800cb56:	bd80      	pop	{r7, pc}
 800cb58:	2000046c 	.word	0x2000046c
 800cb5c:	20000480 	.word	0x20000480

0800cb60 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cb60:	b480      	push	{r7}
 800cb62:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cb64:	4b03      	ldr	r3, [pc, #12]	; (800cb74 <vTaskMissedYield+0x14>)
 800cb66:	2201      	movs	r2, #1
 800cb68:	601a      	str	r2, [r3, #0]
}
 800cb6a:	bf00      	nop
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb72:	4770      	bx	lr
 800cb74:	2000047c 	.word	0x2000047c

0800cb78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b082      	sub	sp, #8
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cb80:	f000 f852 	bl	800cc28 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cb84:	4b06      	ldr	r3, [pc, #24]	; (800cba0 <prvIdleTask+0x28>)
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	2b01      	cmp	r3, #1
 800cb8a:	d9f9      	bls.n	800cb80 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cb8c:	4b05      	ldr	r3, [pc, #20]	; (800cba4 <prvIdleTask+0x2c>)
 800cb8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb92:	601a      	str	r2, [r3, #0]
 800cb94:	f3bf 8f4f 	dsb	sy
 800cb98:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cb9c:	e7f0      	b.n	800cb80 <prvIdleTask+0x8>
 800cb9e:	bf00      	nop
 800cba0:	2000036c 	.word	0x2000036c
 800cba4:	e000ed04 	.word	0xe000ed04

0800cba8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b082      	sub	sp, #8
 800cbac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cbae:	2300      	movs	r3, #0
 800cbb0:	607b      	str	r3, [r7, #4]
 800cbb2:	e00c      	b.n	800cbce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cbb4:	687a      	ldr	r2, [r7, #4]
 800cbb6:	4613      	mov	r3, r2
 800cbb8:	009b      	lsls	r3, r3, #2
 800cbba:	4413      	add	r3, r2
 800cbbc:	009b      	lsls	r3, r3, #2
 800cbbe:	4a12      	ldr	r2, [pc, #72]	; (800cc08 <prvInitialiseTaskLists+0x60>)
 800cbc0:	4413      	add	r3, r2
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	f7fe fcca 	bl	800b55c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	3301      	adds	r3, #1
 800cbcc:	607b      	str	r3, [r7, #4]
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	2b06      	cmp	r3, #6
 800cbd2:	d9ef      	bls.n	800cbb4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cbd4:	480d      	ldr	r0, [pc, #52]	; (800cc0c <prvInitialiseTaskLists+0x64>)
 800cbd6:	f7fe fcc1 	bl	800b55c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cbda:	480d      	ldr	r0, [pc, #52]	; (800cc10 <prvInitialiseTaskLists+0x68>)
 800cbdc:	f7fe fcbe 	bl	800b55c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cbe0:	480c      	ldr	r0, [pc, #48]	; (800cc14 <prvInitialiseTaskLists+0x6c>)
 800cbe2:	f7fe fcbb 	bl	800b55c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cbe6:	480c      	ldr	r0, [pc, #48]	; (800cc18 <prvInitialiseTaskLists+0x70>)
 800cbe8:	f7fe fcb8 	bl	800b55c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cbec:	480b      	ldr	r0, [pc, #44]	; (800cc1c <prvInitialiseTaskLists+0x74>)
 800cbee:	f7fe fcb5 	bl	800b55c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cbf2:	4b0b      	ldr	r3, [pc, #44]	; (800cc20 <prvInitialiseTaskLists+0x78>)
 800cbf4:	4a05      	ldr	r2, [pc, #20]	; (800cc0c <prvInitialiseTaskLists+0x64>)
 800cbf6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cbf8:	4b0a      	ldr	r3, [pc, #40]	; (800cc24 <prvInitialiseTaskLists+0x7c>)
 800cbfa:	4a05      	ldr	r2, [pc, #20]	; (800cc10 <prvInitialiseTaskLists+0x68>)
 800cbfc:	601a      	str	r2, [r3, #0]
}
 800cbfe:	bf00      	nop
 800cc00:	3708      	adds	r7, #8
 800cc02:	46bd      	mov	sp, r7
 800cc04:	bd80      	pop	{r7, pc}
 800cc06:	bf00      	nop
 800cc08:	2000036c 	.word	0x2000036c
 800cc0c:	200003f8 	.word	0x200003f8
 800cc10:	2000040c 	.word	0x2000040c
 800cc14:	20000428 	.word	0x20000428
 800cc18:	2000043c 	.word	0x2000043c
 800cc1c:	20000454 	.word	0x20000454
 800cc20:	20000420 	.word	0x20000420
 800cc24:	20000424 	.word	0x20000424

0800cc28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b082      	sub	sp, #8
 800cc2c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cc2e:	e019      	b.n	800cc64 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cc30:	f000 fab0 	bl	800d194 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc34:	4b10      	ldr	r3, [pc, #64]	; (800cc78 <prvCheckTasksWaitingTermination+0x50>)
 800cc36:	68db      	ldr	r3, [r3, #12]
 800cc38:	68db      	ldr	r3, [r3, #12]
 800cc3a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	3304      	adds	r3, #4
 800cc40:	4618      	mov	r0, r3
 800cc42:	f7fe fd15 	bl	800b670 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cc46:	4b0d      	ldr	r3, [pc, #52]	; (800cc7c <prvCheckTasksWaitingTermination+0x54>)
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	3b01      	subs	r3, #1
 800cc4c:	4a0b      	ldr	r2, [pc, #44]	; (800cc7c <prvCheckTasksWaitingTermination+0x54>)
 800cc4e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cc50:	4b0b      	ldr	r3, [pc, #44]	; (800cc80 <prvCheckTasksWaitingTermination+0x58>)
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	3b01      	subs	r3, #1
 800cc56:	4a0a      	ldr	r2, [pc, #40]	; (800cc80 <prvCheckTasksWaitingTermination+0x58>)
 800cc58:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cc5a:	f000 facb 	bl	800d1f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cc5e:	6878      	ldr	r0, [r7, #4]
 800cc60:	f000 f810 	bl	800cc84 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cc64:	4b06      	ldr	r3, [pc, #24]	; (800cc80 <prvCheckTasksWaitingTermination+0x58>)
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d1e1      	bne.n	800cc30 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cc6c:	bf00      	nop
 800cc6e:	bf00      	nop
 800cc70:	3708      	adds	r7, #8
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd80      	pop	{r7, pc}
 800cc76:	bf00      	nop
 800cc78:	2000043c 	.word	0x2000043c
 800cc7c:	20000468 	.word	0x20000468
 800cc80:	20000450 	.word	0x20000450

0800cc84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b084      	sub	sp, #16
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	334c      	adds	r3, #76	; 0x4c
 800cc90:	4618      	mov	r0, r3
 800cc92:	f001 f997 	bl	800dfc4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d108      	bne.n	800ccb2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cca4:	4618      	mov	r0, r3
 800cca6:	f000 fc63 	bl	800d570 <vPortFree>
				vPortFree( pxTCB );
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	f000 fc60 	bl	800d570 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ccb0:	e018      	b.n	800cce4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800ccb8:	2b01      	cmp	r3, #1
 800ccba:	d103      	bne.n	800ccc4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ccbc:	6878      	ldr	r0, [r7, #4]
 800ccbe:	f000 fc57 	bl	800d570 <vPortFree>
	}
 800ccc2:	e00f      	b.n	800cce4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800ccca:	2b02      	cmp	r3, #2
 800cccc:	d00a      	beq.n	800cce4 <prvDeleteTCB+0x60>
	__asm volatile
 800ccce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccd2:	f383 8811 	msr	BASEPRI, r3
 800ccd6:	f3bf 8f6f 	isb	sy
 800ccda:	f3bf 8f4f 	dsb	sy
 800ccde:	60fb      	str	r3, [r7, #12]
}
 800cce0:	bf00      	nop
 800cce2:	e7fe      	b.n	800cce2 <prvDeleteTCB+0x5e>
	}
 800cce4:	bf00      	nop
 800cce6:	3710      	adds	r7, #16
 800cce8:	46bd      	mov	sp, r7
 800ccea:	bd80      	pop	{r7, pc}

0800ccec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ccec:	b480      	push	{r7}
 800ccee:	b083      	sub	sp, #12
 800ccf0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ccf2:	4b0c      	ldr	r3, [pc, #48]	; (800cd24 <prvResetNextTaskUnblockTime+0x38>)
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d104      	bne.n	800cd06 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ccfc:	4b0a      	ldr	r3, [pc, #40]	; (800cd28 <prvResetNextTaskUnblockTime+0x3c>)
 800ccfe:	f04f 32ff 	mov.w	r2, #4294967295
 800cd02:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cd04:	e008      	b.n	800cd18 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd06:	4b07      	ldr	r3, [pc, #28]	; (800cd24 <prvResetNextTaskUnblockTime+0x38>)
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	68db      	ldr	r3, [r3, #12]
 800cd0c:	68db      	ldr	r3, [r3, #12]
 800cd0e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	685b      	ldr	r3, [r3, #4]
 800cd14:	4a04      	ldr	r2, [pc, #16]	; (800cd28 <prvResetNextTaskUnblockTime+0x3c>)
 800cd16:	6013      	str	r3, [r2, #0]
}
 800cd18:	bf00      	nop
 800cd1a:	370c      	adds	r7, #12
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd22:	4770      	bx	lr
 800cd24:	20000420 	.word	0x20000420
 800cd28:	20000488 	.word	0x20000488

0800cd2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cd2c:	b480      	push	{r7}
 800cd2e:	b083      	sub	sp, #12
 800cd30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cd32:	4b0b      	ldr	r3, [pc, #44]	; (800cd60 <xTaskGetSchedulerState+0x34>)
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d102      	bne.n	800cd40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cd3a:	2301      	movs	r3, #1
 800cd3c:	607b      	str	r3, [r7, #4]
 800cd3e:	e008      	b.n	800cd52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cd40:	4b08      	ldr	r3, [pc, #32]	; (800cd64 <xTaskGetSchedulerState+0x38>)
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d102      	bne.n	800cd4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cd48:	2302      	movs	r3, #2
 800cd4a:	607b      	str	r3, [r7, #4]
 800cd4c:	e001      	b.n	800cd52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cd4e:	2300      	movs	r3, #0
 800cd50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cd52:	687b      	ldr	r3, [r7, #4]
	}
 800cd54:	4618      	mov	r0, r3
 800cd56:	370c      	adds	r7, #12
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5e:	4770      	bx	lr
 800cd60:	20000474 	.word	0x20000474
 800cd64:	20000490 	.word	0x20000490

0800cd68 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b086      	sub	sp, #24
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cd74:	2300      	movs	r3, #0
 800cd76:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d06e      	beq.n	800ce5c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cd7e:	4b3a      	ldr	r3, [pc, #232]	; (800ce68 <xTaskPriorityDisinherit+0x100>)
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	693a      	ldr	r2, [r7, #16]
 800cd84:	429a      	cmp	r2, r3
 800cd86:	d00a      	beq.n	800cd9e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800cd88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd8c:	f383 8811 	msr	BASEPRI, r3
 800cd90:	f3bf 8f6f 	isb	sy
 800cd94:	f3bf 8f4f 	dsb	sy
 800cd98:	60fb      	str	r3, [r7, #12]
}
 800cd9a:	bf00      	nop
 800cd9c:	e7fe      	b.n	800cd9c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cd9e:	693b      	ldr	r3, [r7, #16]
 800cda0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d10a      	bne.n	800cdbc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800cda6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdaa:	f383 8811 	msr	BASEPRI, r3
 800cdae:	f3bf 8f6f 	isb	sy
 800cdb2:	f3bf 8f4f 	dsb	sy
 800cdb6:	60bb      	str	r3, [r7, #8]
}
 800cdb8:	bf00      	nop
 800cdba:	e7fe      	b.n	800cdba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800cdbc:	693b      	ldr	r3, [r7, #16]
 800cdbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cdc0:	1e5a      	subs	r2, r3, #1
 800cdc2:	693b      	ldr	r3, [r7, #16]
 800cdc4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cdc6:	693b      	ldr	r3, [r7, #16]
 800cdc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdca:	693b      	ldr	r3, [r7, #16]
 800cdcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdce:	429a      	cmp	r2, r3
 800cdd0:	d044      	beq.n	800ce5c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cdd2:	693b      	ldr	r3, [r7, #16]
 800cdd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d140      	bne.n	800ce5c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cdda:	693b      	ldr	r3, [r7, #16]
 800cddc:	3304      	adds	r3, #4
 800cdde:	4618      	mov	r0, r3
 800cde0:	f7fe fc46 	bl	800b670 <uxListRemove>
 800cde4:	4603      	mov	r3, r0
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d115      	bne.n	800ce16 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800cdea:	693b      	ldr	r3, [r7, #16]
 800cdec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdee:	491f      	ldr	r1, [pc, #124]	; (800ce6c <xTaskPriorityDisinherit+0x104>)
 800cdf0:	4613      	mov	r3, r2
 800cdf2:	009b      	lsls	r3, r3, #2
 800cdf4:	4413      	add	r3, r2
 800cdf6:	009b      	lsls	r3, r3, #2
 800cdf8:	440b      	add	r3, r1
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d10a      	bne.n	800ce16 <xTaskPriorityDisinherit+0xae>
 800ce00:	693b      	ldr	r3, [r7, #16]
 800ce02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce04:	2201      	movs	r2, #1
 800ce06:	fa02 f303 	lsl.w	r3, r2, r3
 800ce0a:	43da      	mvns	r2, r3
 800ce0c:	4b18      	ldr	r3, [pc, #96]	; (800ce70 <xTaskPriorityDisinherit+0x108>)
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	4013      	ands	r3, r2
 800ce12:	4a17      	ldr	r2, [pc, #92]	; (800ce70 <xTaskPriorityDisinherit+0x108>)
 800ce14:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ce16:	693b      	ldr	r3, [r7, #16]
 800ce18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ce1a:	693b      	ldr	r3, [r7, #16]
 800ce1c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce1e:	693b      	ldr	r3, [r7, #16]
 800ce20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce22:	f1c3 0207 	rsb	r2, r3, #7
 800ce26:	693b      	ldr	r3, [r7, #16]
 800ce28:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ce2a:	693b      	ldr	r3, [r7, #16]
 800ce2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce2e:	2201      	movs	r2, #1
 800ce30:	409a      	lsls	r2, r3
 800ce32:	4b0f      	ldr	r3, [pc, #60]	; (800ce70 <xTaskPriorityDisinherit+0x108>)
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	4313      	orrs	r3, r2
 800ce38:	4a0d      	ldr	r2, [pc, #52]	; (800ce70 <xTaskPriorityDisinherit+0x108>)
 800ce3a:	6013      	str	r3, [r2, #0]
 800ce3c:	693b      	ldr	r3, [r7, #16]
 800ce3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce40:	4613      	mov	r3, r2
 800ce42:	009b      	lsls	r3, r3, #2
 800ce44:	4413      	add	r3, r2
 800ce46:	009b      	lsls	r3, r3, #2
 800ce48:	4a08      	ldr	r2, [pc, #32]	; (800ce6c <xTaskPriorityDisinherit+0x104>)
 800ce4a:	441a      	add	r2, r3
 800ce4c:	693b      	ldr	r3, [r7, #16]
 800ce4e:	3304      	adds	r3, #4
 800ce50:	4619      	mov	r1, r3
 800ce52:	4610      	mov	r0, r2
 800ce54:	f7fe fbaf 	bl	800b5b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ce58:	2301      	movs	r3, #1
 800ce5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ce5c:	697b      	ldr	r3, [r7, #20]
	}
 800ce5e:	4618      	mov	r0, r3
 800ce60:	3718      	adds	r7, #24
 800ce62:	46bd      	mov	sp, r7
 800ce64:	bd80      	pop	{r7, pc}
 800ce66:	bf00      	nop
 800ce68:	20000368 	.word	0x20000368
 800ce6c:	2000036c 	.word	0x2000036c
 800ce70:	20000470 	.word	0x20000470

0800ce74 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b084      	sub	sp, #16
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
 800ce7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ce7e:	4b29      	ldr	r3, [pc, #164]	; (800cf24 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ce84:	4b28      	ldr	r3, [pc, #160]	; (800cf28 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	3304      	adds	r3, #4
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	f7fe fbf0 	bl	800b670 <uxListRemove>
 800ce90:	4603      	mov	r3, r0
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d10b      	bne.n	800ceae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ce96:	4b24      	ldr	r3, [pc, #144]	; (800cf28 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce9c:	2201      	movs	r2, #1
 800ce9e:	fa02 f303 	lsl.w	r3, r2, r3
 800cea2:	43da      	mvns	r2, r3
 800cea4:	4b21      	ldr	r3, [pc, #132]	; (800cf2c <prvAddCurrentTaskToDelayedList+0xb8>)
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	4013      	ands	r3, r2
 800ceaa:	4a20      	ldr	r2, [pc, #128]	; (800cf2c <prvAddCurrentTaskToDelayedList+0xb8>)
 800ceac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ceb4:	d10a      	bne.n	800cecc <prvAddCurrentTaskToDelayedList+0x58>
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d007      	beq.n	800cecc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cebc:	4b1a      	ldr	r3, [pc, #104]	; (800cf28 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	3304      	adds	r3, #4
 800cec2:	4619      	mov	r1, r3
 800cec4:	481a      	ldr	r0, [pc, #104]	; (800cf30 <prvAddCurrentTaskToDelayedList+0xbc>)
 800cec6:	f7fe fb76 	bl	800b5b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ceca:	e026      	b.n	800cf1a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cecc:	68fa      	ldr	r2, [r7, #12]
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	4413      	add	r3, r2
 800ced2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ced4:	4b14      	ldr	r3, [pc, #80]	; (800cf28 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	68ba      	ldr	r2, [r7, #8]
 800ceda:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cedc:	68ba      	ldr	r2, [r7, #8]
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	429a      	cmp	r2, r3
 800cee2:	d209      	bcs.n	800cef8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cee4:	4b13      	ldr	r3, [pc, #76]	; (800cf34 <prvAddCurrentTaskToDelayedList+0xc0>)
 800cee6:	681a      	ldr	r2, [r3, #0]
 800cee8:	4b0f      	ldr	r3, [pc, #60]	; (800cf28 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	3304      	adds	r3, #4
 800ceee:	4619      	mov	r1, r3
 800cef0:	4610      	mov	r0, r2
 800cef2:	f7fe fb84 	bl	800b5fe <vListInsert>
}
 800cef6:	e010      	b.n	800cf1a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cef8:	4b0f      	ldr	r3, [pc, #60]	; (800cf38 <prvAddCurrentTaskToDelayedList+0xc4>)
 800cefa:	681a      	ldr	r2, [r3, #0]
 800cefc:	4b0a      	ldr	r3, [pc, #40]	; (800cf28 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	3304      	adds	r3, #4
 800cf02:	4619      	mov	r1, r3
 800cf04:	4610      	mov	r0, r2
 800cf06:	f7fe fb7a 	bl	800b5fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cf0a:	4b0c      	ldr	r3, [pc, #48]	; (800cf3c <prvAddCurrentTaskToDelayedList+0xc8>)
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	68ba      	ldr	r2, [r7, #8]
 800cf10:	429a      	cmp	r2, r3
 800cf12:	d202      	bcs.n	800cf1a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800cf14:	4a09      	ldr	r2, [pc, #36]	; (800cf3c <prvAddCurrentTaskToDelayedList+0xc8>)
 800cf16:	68bb      	ldr	r3, [r7, #8]
 800cf18:	6013      	str	r3, [r2, #0]
}
 800cf1a:	bf00      	nop
 800cf1c:	3710      	adds	r7, #16
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	bd80      	pop	{r7, pc}
 800cf22:	bf00      	nop
 800cf24:	2000046c 	.word	0x2000046c
 800cf28:	20000368 	.word	0x20000368
 800cf2c:	20000470 	.word	0x20000470
 800cf30:	20000454 	.word	0x20000454
 800cf34:	20000424 	.word	0x20000424
 800cf38:	20000420 	.word	0x20000420
 800cf3c:	20000488 	.word	0x20000488

0800cf40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cf40:	b480      	push	{r7}
 800cf42:	b085      	sub	sp, #20
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	60f8      	str	r0, [r7, #12]
 800cf48:	60b9      	str	r1, [r7, #8]
 800cf4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	3b04      	subs	r3, #4
 800cf50:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cf58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	3b04      	subs	r3, #4
 800cf5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cf60:	68bb      	ldr	r3, [r7, #8]
 800cf62:	f023 0201 	bic.w	r2, r3, #1
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	3b04      	subs	r3, #4
 800cf6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cf70:	4a0c      	ldr	r2, [pc, #48]	; (800cfa4 <pxPortInitialiseStack+0x64>)
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	3b14      	subs	r3, #20
 800cf7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cf7c:	687a      	ldr	r2, [r7, #4]
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	3b04      	subs	r3, #4
 800cf86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	f06f 0202 	mvn.w	r2, #2
 800cf8e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	3b20      	subs	r3, #32
 800cf94:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cf96:	68fb      	ldr	r3, [r7, #12]
}
 800cf98:	4618      	mov	r0, r3
 800cf9a:	3714      	adds	r7, #20
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa2:	4770      	bx	lr
 800cfa4:	0800cfa9 	.word	0x0800cfa9

0800cfa8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cfa8:	b480      	push	{r7}
 800cfaa:	b085      	sub	sp, #20
 800cfac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cfae:	2300      	movs	r3, #0
 800cfb0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cfb2:	4b12      	ldr	r3, [pc, #72]	; (800cffc <prvTaskExitError+0x54>)
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfba:	d00a      	beq.n	800cfd2 <prvTaskExitError+0x2a>
	__asm volatile
 800cfbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc0:	f383 8811 	msr	BASEPRI, r3
 800cfc4:	f3bf 8f6f 	isb	sy
 800cfc8:	f3bf 8f4f 	dsb	sy
 800cfcc:	60fb      	str	r3, [r7, #12]
}
 800cfce:	bf00      	nop
 800cfd0:	e7fe      	b.n	800cfd0 <prvTaskExitError+0x28>
	__asm volatile
 800cfd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfd6:	f383 8811 	msr	BASEPRI, r3
 800cfda:	f3bf 8f6f 	isb	sy
 800cfde:	f3bf 8f4f 	dsb	sy
 800cfe2:	60bb      	str	r3, [r7, #8]
}
 800cfe4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cfe6:	bf00      	nop
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d0fc      	beq.n	800cfe8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cfee:	bf00      	nop
 800cff0:	bf00      	nop
 800cff2:	3714      	adds	r7, #20
 800cff4:	46bd      	mov	sp, r7
 800cff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffa:	4770      	bx	lr
 800cffc:	2000002c 	.word	0x2000002c

0800d000 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d000:	4b07      	ldr	r3, [pc, #28]	; (800d020 <pxCurrentTCBConst2>)
 800d002:	6819      	ldr	r1, [r3, #0]
 800d004:	6808      	ldr	r0, [r1, #0]
 800d006:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d00a:	f380 8809 	msr	PSP, r0
 800d00e:	f3bf 8f6f 	isb	sy
 800d012:	f04f 0000 	mov.w	r0, #0
 800d016:	f380 8811 	msr	BASEPRI, r0
 800d01a:	4770      	bx	lr
 800d01c:	f3af 8000 	nop.w

0800d020 <pxCurrentTCBConst2>:
 800d020:	20000368 	.word	0x20000368
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d024:	bf00      	nop
 800d026:	bf00      	nop

0800d028 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d028:	4808      	ldr	r0, [pc, #32]	; (800d04c <prvPortStartFirstTask+0x24>)
 800d02a:	6800      	ldr	r0, [r0, #0]
 800d02c:	6800      	ldr	r0, [r0, #0]
 800d02e:	f380 8808 	msr	MSP, r0
 800d032:	f04f 0000 	mov.w	r0, #0
 800d036:	f380 8814 	msr	CONTROL, r0
 800d03a:	b662      	cpsie	i
 800d03c:	b661      	cpsie	f
 800d03e:	f3bf 8f4f 	dsb	sy
 800d042:	f3bf 8f6f 	isb	sy
 800d046:	df00      	svc	0
 800d048:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d04a:	bf00      	nop
 800d04c:	e000ed08 	.word	0xe000ed08

0800d050 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b086      	sub	sp, #24
 800d054:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d056:	4b46      	ldr	r3, [pc, #280]	; (800d170 <xPortStartScheduler+0x120>)
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	4a46      	ldr	r2, [pc, #280]	; (800d174 <xPortStartScheduler+0x124>)
 800d05c:	4293      	cmp	r3, r2
 800d05e:	d10a      	bne.n	800d076 <xPortStartScheduler+0x26>
	__asm volatile
 800d060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d064:	f383 8811 	msr	BASEPRI, r3
 800d068:	f3bf 8f6f 	isb	sy
 800d06c:	f3bf 8f4f 	dsb	sy
 800d070:	613b      	str	r3, [r7, #16]
}
 800d072:	bf00      	nop
 800d074:	e7fe      	b.n	800d074 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d076:	4b3e      	ldr	r3, [pc, #248]	; (800d170 <xPortStartScheduler+0x120>)
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	4a3f      	ldr	r2, [pc, #252]	; (800d178 <xPortStartScheduler+0x128>)
 800d07c:	4293      	cmp	r3, r2
 800d07e:	d10a      	bne.n	800d096 <xPortStartScheduler+0x46>
	__asm volatile
 800d080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d084:	f383 8811 	msr	BASEPRI, r3
 800d088:	f3bf 8f6f 	isb	sy
 800d08c:	f3bf 8f4f 	dsb	sy
 800d090:	60fb      	str	r3, [r7, #12]
}
 800d092:	bf00      	nop
 800d094:	e7fe      	b.n	800d094 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d096:	4b39      	ldr	r3, [pc, #228]	; (800d17c <xPortStartScheduler+0x12c>)
 800d098:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d09a:	697b      	ldr	r3, [r7, #20]
 800d09c:	781b      	ldrb	r3, [r3, #0]
 800d09e:	b2db      	uxtb	r3, r3
 800d0a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d0a2:	697b      	ldr	r3, [r7, #20]
 800d0a4:	22ff      	movs	r2, #255	; 0xff
 800d0a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d0a8:	697b      	ldr	r3, [r7, #20]
 800d0aa:	781b      	ldrb	r3, [r3, #0]
 800d0ac:	b2db      	uxtb	r3, r3
 800d0ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d0b0:	78fb      	ldrb	r3, [r7, #3]
 800d0b2:	b2db      	uxtb	r3, r3
 800d0b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d0b8:	b2da      	uxtb	r2, r3
 800d0ba:	4b31      	ldr	r3, [pc, #196]	; (800d180 <xPortStartScheduler+0x130>)
 800d0bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d0be:	4b31      	ldr	r3, [pc, #196]	; (800d184 <xPortStartScheduler+0x134>)
 800d0c0:	2207      	movs	r2, #7
 800d0c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d0c4:	e009      	b.n	800d0da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d0c6:	4b2f      	ldr	r3, [pc, #188]	; (800d184 <xPortStartScheduler+0x134>)
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	3b01      	subs	r3, #1
 800d0cc:	4a2d      	ldr	r2, [pc, #180]	; (800d184 <xPortStartScheduler+0x134>)
 800d0ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d0d0:	78fb      	ldrb	r3, [r7, #3]
 800d0d2:	b2db      	uxtb	r3, r3
 800d0d4:	005b      	lsls	r3, r3, #1
 800d0d6:	b2db      	uxtb	r3, r3
 800d0d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d0da:	78fb      	ldrb	r3, [r7, #3]
 800d0dc:	b2db      	uxtb	r3, r3
 800d0de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d0e2:	2b80      	cmp	r3, #128	; 0x80
 800d0e4:	d0ef      	beq.n	800d0c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d0e6:	4b27      	ldr	r3, [pc, #156]	; (800d184 <xPortStartScheduler+0x134>)
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	f1c3 0307 	rsb	r3, r3, #7
 800d0ee:	2b04      	cmp	r3, #4
 800d0f0:	d00a      	beq.n	800d108 <xPortStartScheduler+0xb8>
	__asm volatile
 800d0f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0f6:	f383 8811 	msr	BASEPRI, r3
 800d0fa:	f3bf 8f6f 	isb	sy
 800d0fe:	f3bf 8f4f 	dsb	sy
 800d102:	60bb      	str	r3, [r7, #8]
}
 800d104:	bf00      	nop
 800d106:	e7fe      	b.n	800d106 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d108:	4b1e      	ldr	r3, [pc, #120]	; (800d184 <xPortStartScheduler+0x134>)
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	021b      	lsls	r3, r3, #8
 800d10e:	4a1d      	ldr	r2, [pc, #116]	; (800d184 <xPortStartScheduler+0x134>)
 800d110:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d112:	4b1c      	ldr	r3, [pc, #112]	; (800d184 <xPortStartScheduler+0x134>)
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d11a:	4a1a      	ldr	r2, [pc, #104]	; (800d184 <xPortStartScheduler+0x134>)
 800d11c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	b2da      	uxtb	r2, r3
 800d122:	697b      	ldr	r3, [r7, #20]
 800d124:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d126:	4b18      	ldr	r3, [pc, #96]	; (800d188 <xPortStartScheduler+0x138>)
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	4a17      	ldr	r2, [pc, #92]	; (800d188 <xPortStartScheduler+0x138>)
 800d12c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d130:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d132:	4b15      	ldr	r3, [pc, #84]	; (800d188 <xPortStartScheduler+0x138>)
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	4a14      	ldr	r2, [pc, #80]	; (800d188 <xPortStartScheduler+0x138>)
 800d138:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d13c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d13e:	f000 f8dd 	bl	800d2fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d142:	4b12      	ldr	r3, [pc, #72]	; (800d18c <xPortStartScheduler+0x13c>)
 800d144:	2200      	movs	r2, #0
 800d146:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d148:	f000 f8fc 	bl	800d344 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d14c:	4b10      	ldr	r3, [pc, #64]	; (800d190 <xPortStartScheduler+0x140>)
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	4a0f      	ldr	r2, [pc, #60]	; (800d190 <xPortStartScheduler+0x140>)
 800d152:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d156:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d158:	f7ff ff66 	bl	800d028 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d15c:	f7ff fba0 	bl	800c8a0 <vTaskSwitchContext>
	prvTaskExitError();
 800d160:	f7ff ff22 	bl	800cfa8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d164:	2300      	movs	r3, #0
}
 800d166:	4618      	mov	r0, r3
 800d168:	3718      	adds	r7, #24
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}
 800d16e:	bf00      	nop
 800d170:	e000ed00 	.word	0xe000ed00
 800d174:	410fc271 	.word	0x410fc271
 800d178:	410fc270 	.word	0x410fc270
 800d17c:	e000e400 	.word	0xe000e400
 800d180:	20000494 	.word	0x20000494
 800d184:	20000498 	.word	0x20000498
 800d188:	e000ed20 	.word	0xe000ed20
 800d18c:	2000002c 	.word	0x2000002c
 800d190:	e000ef34 	.word	0xe000ef34

0800d194 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d194:	b480      	push	{r7}
 800d196:	b083      	sub	sp, #12
 800d198:	af00      	add	r7, sp, #0
	__asm volatile
 800d19a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d19e:	f383 8811 	msr	BASEPRI, r3
 800d1a2:	f3bf 8f6f 	isb	sy
 800d1a6:	f3bf 8f4f 	dsb	sy
 800d1aa:	607b      	str	r3, [r7, #4]
}
 800d1ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d1ae:	4b0f      	ldr	r3, [pc, #60]	; (800d1ec <vPortEnterCritical+0x58>)
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	3301      	adds	r3, #1
 800d1b4:	4a0d      	ldr	r2, [pc, #52]	; (800d1ec <vPortEnterCritical+0x58>)
 800d1b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d1b8:	4b0c      	ldr	r3, [pc, #48]	; (800d1ec <vPortEnterCritical+0x58>)
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	2b01      	cmp	r3, #1
 800d1be:	d10f      	bne.n	800d1e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d1c0:	4b0b      	ldr	r3, [pc, #44]	; (800d1f0 <vPortEnterCritical+0x5c>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	b2db      	uxtb	r3, r3
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d00a      	beq.n	800d1e0 <vPortEnterCritical+0x4c>
	__asm volatile
 800d1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ce:	f383 8811 	msr	BASEPRI, r3
 800d1d2:	f3bf 8f6f 	isb	sy
 800d1d6:	f3bf 8f4f 	dsb	sy
 800d1da:	603b      	str	r3, [r7, #0]
}
 800d1dc:	bf00      	nop
 800d1de:	e7fe      	b.n	800d1de <vPortEnterCritical+0x4a>
	}
}
 800d1e0:	bf00      	nop
 800d1e2:	370c      	adds	r7, #12
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ea:	4770      	bx	lr
 800d1ec:	2000002c 	.word	0x2000002c
 800d1f0:	e000ed04 	.word	0xe000ed04

0800d1f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d1f4:	b480      	push	{r7}
 800d1f6:	b083      	sub	sp, #12
 800d1f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d1fa:	4b12      	ldr	r3, [pc, #72]	; (800d244 <vPortExitCritical+0x50>)
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d10a      	bne.n	800d218 <vPortExitCritical+0x24>
	__asm volatile
 800d202:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d206:	f383 8811 	msr	BASEPRI, r3
 800d20a:	f3bf 8f6f 	isb	sy
 800d20e:	f3bf 8f4f 	dsb	sy
 800d212:	607b      	str	r3, [r7, #4]
}
 800d214:	bf00      	nop
 800d216:	e7fe      	b.n	800d216 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d218:	4b0a      	ldr	r3, [pc, #40]	; (800d244 <vPortExitCritical+0x50>)
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	3b01      	subs	r3, #1
 800d21e:	4a09      	ldr	r2, [pc, #36]	; (800d244 <vPortExitCritical+0x50>)
 800d220:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d222:	4b08      	ldr	r3, [pc, #32]	; (800d244 <vPortExitCritical+0x50>)
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d105      	bne.n	800d236 <vPortExitCritical+0x42>
 800d22a:	2300      	movs	r3, #0
 800d22c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d22e:	683b      	ldr	r3, [r7, #0]
 800d230:	f383 8811 	msr	BASEPRI, r3
}
 800d234:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d236:	bf00      	nop
 800d238:	370c      	adds	r7, #12
 800d23a:	46bd      	mov	sp, r7
 800d23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d240:	4770      	bx	lr
 800d242:	bf00      	nop
 800d244:	2000002c 	.word	0x2000002c
	...

0800d250 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d250:	f3ef 8009 	mrs	r0, PSP
 800d254:	f3bf 8f6f 	isb	sy
 800d258:	4b15      	ldr	r3, [pc, #84]	; (800d2b0 <pxCurrentTCBConst>)
 800d25a:	681a      	ldr	r2, [r3, #0]
 800d25c:	f01e 0f10 	tst.w	lr, #16
 800d260:	bf08      	it	eq
 800d262:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d266:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d26a:	6010      	str	r0, [r2, #0]
 800d26c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d270:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d274:	f380 8811 	msr	BASEPRI, r0
 800d278:	f3bf 8f4f 	dsb	sy
 800d27c:	f3bf 8f6f 	isb	sy
 800d280:	f7ff fb0e 	bl	800c8a0 <vTaskSwitchContext>
 800d284:	f04f 0000 	mov.w	r0, #0
 800d288:	f380 8811 	msr	BASEPRI, r0
 800d28c:	bc09      	pop	{r0, r3}
 800d28e:	6819      	ldr	r1, [r3, #0]
 800d290:	6808      	ldr	r0, [r1, #0]
 800d292:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d296:	f01e 0f10 	tst.w	lr, #16
 800d29a:	bf08      	it	eq
 800d29c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d2a0:	f380 8809 	msr	PSP, r0
 800d2a4:	f3bf 8f6f 	isb	sy
 800d2a8:	4770      	bx	lr
 800d2aa:	bf00      	nop
 800d2ac:	f3af 8000 	nop.w

0800d2b0 <pxCurrentTCBConst>:
 800d2b0:	20000368 	.word	0x20000368
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d2b4:	bf00      	nop
 800d2b6:	bf00      	nop

0800d2b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b082      	sub	sp, #8
 800d2bc:	af00      	add	r7, sp, #0
	__asm volatile
 800d2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2c2:	f383 8811 	msr	BASEPRI, r3
 800d2c6:	f3bf 8f6f 	isb	sy
 800d2ca:	f3bf 8f4f 	dsb	sy
 800d2ce:	607b      	str	r3, [r7, #4]
}
 800d2d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d2d2:	f7ff fa2d 	bl	800c730 <xTaskIncrementTick>
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d003      	beq.n	800d2e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d2dc:	4b06      	ldr	r3, [pc, #24]	; (800d2f8 <SysTick_Handler+0x40>)
 800d2de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2e2:	601a      	str	r2, [r3, #0]
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	f383 8811 	msr	BASEPRI, r3
}
 800d2ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d2f0:	bf00      	nop
 800d2f2:	3708      	adds	r7, #8
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	bd80      	pop	{r7, pc}
 800d2f8:	e000ed04 	.word	0xe000ed04

0800d2fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d2fc:	b480      	push	{r7}
 800d2fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d300:	4b0b      	ldr	r3, [pc, #44]	; (800d330 <vPortSetupTimerInterrupt+0x34>)
 800d302:	2200      	movs	r2, #0
 800d304:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d306:	4b0b      	ldr	r3, [pc, #44]	; (800d334 <vPortSetupTimerInterrupt+0x38>)
 800d308:	2200      	movs	r2, #0
 800d30a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d30c:	4b0a      	ldr	r3, [pc, #40]	; (800d338 <vPortSetupTimerInterrupt+0x3c>)
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	4a0a      	ldr	r2, [pc, #40]	; (800d33c <vPortSetupTimerInterrupt+0x40>)
 800d312:	fba2 2303 	umull	r2, r3, r2, r3
 800d316:	099b      	lsrs	r3, r3, #6
 800d318:	4a09      	ldr	r2, [pc, #36]	; (800d340 <vPortSetupTimerInterrupt+0x44>)
 800d31a:	3b01      	subs	r3, #1
 800d31c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d31e:	4b04      	ldr	r3, [pc, #16]	; (800d330 <vPortSetupTimerInterrupt+0x34>)
 800d320:	2207      	movs	r2, #7
 800d322:	601a      	str	r2, [r3, #0]
}
 800d324:	bf00      	nop
 800d326:	46bd      	mov	sp, r7
 800d328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32c:	4770      	bx	lr
 800d32e:	bf00      	nop
 800d330:	e000e010 	.word	0xe000e010
 800d334:	e000e018 	.word	0xe000e018
 800d338:	20000000 	.word	0x20000000
 800d33c:	10624dd3 	.word	0x10624dd3
 800d340:	e000e014 	.word	0xe000e014

0800d344 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d344:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d354 <vPortEnableVFP+0x10>
 800d348:	6801      	ldr	r1, [r0, #0]
 800d34a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d34e:	6001      	str	r1, [r0, #0]
 800d350:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d352:	bf00      	nop
 800d354:	e000ed88 	.word	0xe000ed88

0800d358 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d358:	b480      	push	{r7}
 800d35a:	b085      	sub	sp, #20
 800d35c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d35e:	f3ef 8305 	mrs	r3, IPSR
 800d362:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	2b0f      	cmp	r3, #15
 800d368:	d914      	bls.n	800d394 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d36a:	4a17      	ldr	r2, [pc, #92]	; (800d3c8 <vPortValidateInterruptPriority+0x70>)
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	4413      	add	r3, r2
 800d370:	781b      	ldrb	r3, [r3, #0]
 800d372:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d374:	4b15      	ldr	r3, [pc, #84]	; (800d3cc <vPortValidateInterruptPriority+0x74>)
 800d376:	781b      	ldrb	r3, [r3, #0]
 800d378:	7afa      	ldrb	r2, [r7, #11]
 800d37a:	429a      	cmp	r2, r3
 800d37c:	d20a      	bcs.n	800d394 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d382:	f383 8811 	msr	BASEPRI, r3
 800d386:	f3bf 8f6f 	isb	sy
 800d38a:	f3bf 8f4f 	dsb	sy
 800d38e:	607b      	str	r3, [r7, #4]
}
 800d390:	bf00      	nop
 800d392:	e7fe      	b.n	800d392 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d394:	4b0e      	ldr	r3, [pc, #56]	; (800d3d0 <vPortValidateInterruptPriority+0x78>)
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d39c:	4b0d      	ldr	r3, [pc, #52]	; (800d3d4 <vPortValidateInterruptPriority+0x7c>)
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	429a      	cmp	r2, r3
 800d3a2:	d90a      	bls.n	800d3ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d3a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3a8:	f383 8811 	msr	BASEPRI, r3
 800d3ac:	f3bf 8f6f 	isb	sy
 800d3b0:	f3bf 8f4f 	dsb	sy
 800d3b4:	603b      	str	r3, [r7, #0]
}
 800d3b6:	bf00      	nop
 800d3b8:	e7fe      	b.n	800d3b8 <vPortValidateInterruptPriority+0x60>
	}
 800d3ba:	bf00      	nop
 800d3bc:	3714      	adds	r7, #20
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c4:	4770      	bx	lr
 800d3c6:	bf00      	nop
 800d3c8:	e000e3f0 	.word	0xe000e3f0
 800d3cc:	20000494 	.word	0x20000494
 800d3d0:	e000ed0c 	.word	0xe000ed0c
 800d3d4:	20000498 	.word	0x20000498

0800d3d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	b08a      	sub	sp, #40	; 0x28
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d3e4:	f7ff f8fa 	bl	800c5dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d3e8:	4b5b      	ldr	r3, [pc, #364]	; (800d558 <pvPortMalloc+0x180>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d101      	bne.n	800d3f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d3f0:	f000 f920 	bl	800d634 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d3f4:	4b59      	ldr	r3, [pc, #356]	; (800d55c <pvPortMalloc+0x184>)
 800d3f6:	681a      	ldr	r2, [r3, #0]
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	4013      	ands	r3, r2
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	f040 8093 	bne.w	800d528 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d01d      	beq.n	800d444 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d408:	2208      	movs	r2, #8
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	4413      	add	r3, r2
 800d40e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	f003 0307 	and.w	r3, r3, #7
 800d416:	2b00      	cmp	r3, #0
 800d418:	d014      	beq.n	800d444 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	f023 0307 	bic.w	r3, r3, #7
 800d420:	3308      	adds	r3, #8
 800d422:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	f003 0307 	and.w	r3, r3, #7
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d00a      	beq.n	800d444 <pvPortMalloc+0x6c>
	__asm volatile
 800d42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d432:	f383 8811 	msr	BASEPRI, r3
 800d436:	f3bf 8f6f 	isb	sy
 800d43a:	f3bf 8f4f 	dsb	sy
 800d43e:	617b      	str	r3, [r7, #20]
}
 800d440:	bf00      	nop
 800d442:	e7fe      	b.n	800d442 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d06e      	beq.n	800d528 <pvPortMalloc+0x150>
 800d44a:	4b45      	ldr	r3, [pc, #276]	; (800d560 <pvPortMalloc+0x188>)
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	687a      	ldr	r2, [r7, #4]
 800d450:	429a      	cmp	r2, r3
 800d452:	d869      	bhi.n	800d528 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d454:	4b43      	ldr	r3, [pc, #268]	; (800d564 <pvPortMalloc+0x18c>)
 800d456:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d458:	4b42      	ldr	r3, [pc, #264]	; (800d564 <pvPortMalloc+0x18c>)
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d45e:	e004      	b.n	800d46a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d462:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d46c:	685b      	ldr	r3, [r3, #4]
 800d46e:	687a      	ldr	r2, [r7, #4]
 800d470:	429a      	cmp	r2, r3
 800d472:	d903      	bls.n	800d47c <pvPortMalloc+0xa4>
 800d474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d1f1      	bne.n	800d460 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d47c:	4b36      	ldr	r3, [pc, #216]	; (800d558 <pvPortMalloc+0x180>)
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d482:	429a      	cmp	r2, r3
 800d484:	d050      	beq.n	800d528 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d486:	6a3b      	ldr	r3, [r7, #32]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	2208      	movs	r2, #8
 800d48c:	4413      	add	r3, r2
 800d48e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d492:	681a      	ldr	r2, [r3, #0]
 800d494:	6a3b      	ldr	r3, [r7, #32]
 800d496:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d49a:	685a      	ldr	r2, [r3, #4]
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	1ad2      	subs	r2, r2, r3
 800d4a0:	2308      	movs	r3, #8
 800d4a2:	005b      	lsls	r3, r3, #1
 800d4a4:	429a      	cmp	r2, r3
 800d4a6:	d91f      	bls.n	800d4e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d4a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	4413      	add	r3, r2
 800d4ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d4b0:	69bb      	ldr	r3, [r7, #24]
 800d4b2:	f003 0307 	and.w	r3, r3, #7
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d00a      	beq.n	800d4d0 <pvPortMalloc+0xf8>
	__asm volatile
 800d4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4be:	f383 8811 	msr	BASEPRI, r3
 800d4c2:	f3bf 8f6f 	isb	sy
 800d4c6:	f3bf 8f4f 	dsb	sy
 800d4ca:	613b      	str	r3, [r7, #16]
}
 800d4cc:	bf00      	nop
 800d4ce:	e7fe      	b.n	800d4ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4d2:	685a      	ldr	r2, [r3, #4]
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	1ad2      	subs	r2, r2, r3
 800d4d8:	69bb      	ldr	r3, [r7, #24]
 800d4da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4de:	687a      	ldr	r2, [r7, #4]
 800d4e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d4e2:	69b8      	ldr	r0, [r7, #24]
 800d4e4:	f000 f908 	bl	800d6f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d4e8:	4b1d      	ldr	r3, [pc, #116]	; (800d560 <pvPortMalloc+0x188>)
 800d4ea:	681a      	ldr	r2, [r3, #0]
 800d4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ee:	685b      	ldr	r3, [r3, #4]
 800d4f0:	1ad3      	subs	r3, r2, r3
 800d4f2:	4a1b      	ldr	r2, [pc, #108]	; (800d560 <pvPortMalloc+0x188>)
 800d4f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d4f6:	4b1a      	ldr	r3, [pc, #104]	; (800d560 <pvPortMalloc+0x188>)
 800d4f8:	681a      	ldr	r2, [r3, #0]
 800d4fa:	4b1b      	ldr	r3, [pc, #108]	; (800d568 <pvPortMalloc+0x190>)
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	429a      	cmp	r2, r3
 800d500:	d203      	bcs.n	800d50a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d502:	4b17      	ldr	r3, [pc, #92]	; (800d560 <pvPortMalloc+0x188>)
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	4a18      	ldr	r2, [pc, #96]	; (800d568 <pvPortMalloc+0x190>)
 800d508:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d50c:	685a      	ldr	r2, [r3, #4]
 800d50e:	4b13      	ldr	r3, [pc, #76]	; (800d55c <pvPortMalloc+0x184>)
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	431a      	orrs	r2, r3
 800d514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d516:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d51a:	2200      	movs	r2, #0
 800d51c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d51e:	4b13      	ldr	r3, [pc, #76]	; (800d56c <pvPortMalloc+0x194>)
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	3301      	adds	r3, #1
 800d524:	4a11      	ldr	r2, [pc, #68]	; (800d56c <pvPortMalloc+0x194>)
 800d526:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d528:	f7ff f866 	bl	800c5f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d52c:	69fb      	ldr	r3, [r7, #28]
 800d52e:	f003 0307 	and.w	r3, r3, #7
 800d532:	2b00      	cmp	r3, #0
 800d534:	d00a      	beq.n	800d54c <pvPortMalloc+0x174>
	__asm volatile
 800d536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d53a:	f383 8811 	msr	BASEPRI, r3
 800d53e:	f3bf 8f6f 	isb	sy
 800d542:	f3bf 8f4f 	dsb	sy
 800d546:	60fb      	str	r3, [r7, #12]
}
 800d548:	bf00      	nop
 800d54a:	e7fe      	b.n	800d54a <pvPortMalloc+0x172>
	return pvReturn;
 800d54c:	69fb      	ldr	r3, [r7, #28]
}
 800d54e:	4618      	mov	r0, r3
 800d550:	3728      	adds	r7, #40	; 0x28
 800d552:	46bd      	mov	sp, r7
 800d554:	bd80      	pop	{r7, pc}
 800d556:	bf00      	nop
 800d558:	200040a4 	.word	0x200040a4
 800d55c:	200040b8 	.word	0x200040b8
 800d560:	200040a8 	.word	0x200040a8
 800d564:	2000409c 	.word	0x2000409c
 800d568:	200040ac 	.word	0x200040ac
 800d56c:	200040b0 	.word	0x200040b0

0800d570 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b086      	sub	sp, #24
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d04d      	beq.n	800d61e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d582:	2308      	movs	r3, #8
 800d584:	425b      	negs	r3, r3
 800d586:	697a      	ldr	r2, [r7, #20]
 800d588:	4413      	add	r3, r2
 800d58a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d58c:	697b      	ldr	r3, [r7, #20]
 800d58e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d590:	693b      	ldr	r3, [r7, #16]
 800d592:	685a      	ldr	r2, [r3, #4]
 800d594:	4b24      	ldr	r3, [pc, #144]	; (800d628 <vPortFree+0xb8>)
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	4013      	ands	r3, r2
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d10a      	bne.n	800d5b4 <vPortFree+0x44>
	__asm volatile
 800d59e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5a2:	f383 8811 	msr	BASEPRI, r3
 800d5a6:	f3bf 8f6f 	isb	sy
 800d5aa:	f3bf 8f4f 	dsb	sy
 800d5ae:	60fb      	str	r3, [r7, #12]
}
 800d5b0:	bf00      	nop
 800d5b2:	e7fe      	b.n	800d5b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d5b4:	693b      	ldr	r3, [r7, #16]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d00a      	beq.n	800d5d2 <vPortFree+0x62>
	__asm volatile
 800d5bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5c0:	f383 8811 	msr	BASEPRI, r3
 800d5c4:	f3bf 8f6f 	isb	sy
 800d5c8:	f3bf 8f4f 	dsb	sy
 800d5cc:	60bb      	str	r3, [r7, #8]
}
 800d5ce:	bf00      	nop
 800d5d0:	e7fe      	b.n	800d5d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d5d2:	693b      	ldr	r3, [r7, #16]
 800d5d4:	685a      	ldr	r2, [r3, #4]
 800d5d6:	4b14      	ldr	r3, [pc, #80]	; (800d628 <vPortFree+0xb8>)
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	4013      	ands	r3, r2
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d01e      	beq.n	800d61e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d5e0:	693b      	ldr	r3, [r7, #16]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d11a      	bne.n	800d61e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d5e8:	693b      	ldr	r3, [r7, #16]
 800d5ea:	685a      	ldr	r2, [r3, #4]
 800d5ec:	4b0e      	ldr	r3, [pc, #56]	; (800d628 <vPortFree+0xb8>)
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	43db      	mvns	r3, r3
 800d5f2:	401a      	ands	r2, r3
 800d5f4:	693b      	ldr	r3, [r7, #16]
 800d5f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d5f8:	f7fe fff0 	bl	800c5dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d5fc:	693b      	ldr	r3, [r7, #16]
 800d5fe:	685a      	ldr	r2, [r3, #4]
 800d600:	4b0a      	ldr	r3, [pc, #40]	; (800d62c <vPortFree+0xbc>)
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	4413      	add	r3, r2
 800d606:	4a09      	ldr	r2, [pc, #36]	; (800d62c <vPortFree+0xbc>)
 800d608:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d60a:	6938      	ldr	r0, [r7, #16]
 800d60c:	f000 f874 	bl	800d6f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d610:	4b07      	ldr	r3, [pc, #28]	; (800d630 <vPortFree+0xc0>)
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	3301      	adds	r3, #1
 800d616:	4a06      	ldr	r2, [pc, #24]	; (800d630 <vPortFree+0xc0>)
 800d618:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d61a:	f7fe ffed 	bl	800c5f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d61e:	bf00      	nop
 800d620:	3718      	adds	r7, #24
 800d622:	46bd      	mov	sp, r7
 800d624:	bd80      	pop	{r7, pc}
 800d626:	bf00      	nop
 800d628:	200040b8 	.word	0x200040b8
 800d62c:	200040a8 	.word	0x200040a8
 800d630:	200040b4 	.word	0x200040b4

0800d634 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d634:	b480      	push	{r7}
 800d636:	b085      	sub	sp, #20
 800d638:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d63a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d63e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d640:	4b27      	ldr	r3, [pc, #156]	; (800d6e0 <prvHeapInit+0xac>)
 800d642:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	f003 0307 	and.w	r3, r3, #7
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d00c      	beq.n	800d668 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	3307      	adds	r3, #7
 800d652:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	f023 0307 	bic.w	r3, r3, #7
 800d65a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d65c:	68ba      	ldr	r2, [r7, #8]
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	1ad3      	subs	r3, r2, r3
 800d662:	4a1f      	ldr	r2, [pc, #124]	; (800d6e0 <prvHeapInit+0xac>)
 800d664:	4413      	add	r3, r2
 800d666:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d66c:	4a1d      	ldr	r2, [pc, #116]	; (800d6e4 <prvHeapInit+0xb0>)
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d672:	4b1c      	ldr	r3, [pc, #112]	; (800d6e4 <prvHeapInit+0xb0>)
 800d674:	2200      	movs	r2, #0
 800d676:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	68ba      	ldr	r2, [r7, #8]
 800d67c:	4413      	add	r3, r2
 800d67e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d680:	2208      	movs	r2, #8
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	1a9b      	subs	r3, r3, r2
 800d686:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	f023 0307 	bic.w	r3, r3, #7
 800d68e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	4a15      	ldr	r2, [pc, #84]	; (800d6e8 <prvHeapInit+0xb4>)
 800d694:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d696:	4b14      	ldr	r3, [pc, #80]	; (800d6e8 <prvHeapInit+0xb4>)
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	2200      	movs	r2, #0
 800d69c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d69e:	4b12      	ldr	r3, [pc, #72]	; (800d6e8 <prvHeapInit+0xb4>)
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	68fa      	ldr	r2, [r7, #12]
 800d6ae:	1ad2      	subs	r2, r2, r3
 800d6b0:	683b      	ldr	r3, [r7, #0]
 800d6b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d6b4:	4b0c      	ldr	r3, [pc, #48]	; (800d6e8 <prvHeapInit+0xb4>)
 800d6b6:	681a      	ldr	r2, [r3, #0]
 800d6b8:	683b      	ldr	r3, [r7, #0]
 800d6ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d6bc:	683b      	ldr	r3, [r7, #0]
 800d6be:	685b      	ldr	r3, [r3, #4]
 800d6c0:	4a0a      	ldr	r2, [pc, #40]	; (800d6ec <prvHeapInit+0xb8>)
 800d6c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	685b      	ldr	r3, [r3, #4]
 800d6c8:	4a09      	ldr	r2, [pc, #36]	; (800d6f0 <prvHeapInit+0xbc>)
 800d6ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d6cc:	4b09      	ldr	r3, [pc, #36]	; (800d6f4 <prvHeapInit+0xc0>)
 800d6ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d6d2:	601a      	str	r2, [r3, #0]
}
 800d6d4:	bf00      	nop
 800d6d6:	3714      	adds	r7, #20
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6de:	4770      	bx	lr
 800d6e0:	2000049c 	.word	0x2000049c
 800d6e4:	2000409c 	.word	0x2000409c
 800d6e8:	200040a4 	.word	0x200040a4
 800d6ec:	200040ac 	.word	0x200040ac
 800d6f0:	200040a8 	.word	0x200040a8
 800d6f4:	200040b8 	.word	0x200040b8

0800d6f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d6f8:	b480      	push	{r7}
 800d6fa:	b085      	sub	sp, #20
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d700:	4b28      	ldr	r3, [pc, #160]	; (800d7a4 <prvInsertBlockIntoFreeList+0xac>)
 800d702:	60fb      	str	r3, [r7, #12]
 800d704:	e002      	b.n	800d70c <prvInsertBlockIntoFreeList+0x14>
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	60fb      	str	r3, [r7, #12]
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	687a      	ldr	r2, [r7, #4]
 800d712:	429a      	cmp	r2, r3
 800d714:	d8f7      	bhi.n	800d706 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	685b      	ldr	r3, [r3, #4]
 800d71e:	68ba      	ldr	r2, [r7, #8]
 800d720:	4413      	add	r3, r2
 800d722:	687a      	ldr	r2, [r7, #4]
 800d724:	429a      	cmp	r2, r3
 800d726:	d108      	bne.n	800d73a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	685a      	ldr	r2, [r3, #4]
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	685b      	ldr	r3, [r3, #4]
 800d730:	441a      	add	r2, r3
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	685b      	ldr	r3, [r3, #4]
 800d742:	68ba      	ldr	r2, [r7, #8]
 800d744:	441a      	add	r2, r3
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	429a      	cmp	r2, r3
 800d74c:	d118      	bne.n	800d780 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	681a      	ldr	r2, [r3, #0]
 800d752:	4b15      	ldr	r3, [pc, #84]	; (800d7a8 <prvInsertBlockIntoFreeList+0xb0>)
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	429a      	cmp	r2, r3
 800d758:	d00d      	beq.n	800d776 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	685a      	ldr	r2, [r3, #4]
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	685b      	ldr	r3, [r3, #4]
 800d764:	441a      	add	r2, r3
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	681a      	ldr	r2, [r3, #0]
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	601a      	str	r2, [r3, #0]
 800d774:	e008      	b.n	800d788 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d776:	4b0c      	ldr	r3, [pc, #48]	; (800d7a8 <prvInsertBlockIntoFreeList+0xb0>)
 800d778:	681a      	ldr	r2, [r3, #0]
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	601a      	str	r2, [r3, #0]
 800d77e:	e003      	b.n	800d788 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	681a      	ldr	r2, [r3, #0]
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d788:	68fa      	ldr	r2, [r7, #12]
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	429a      	cmp	r2, r3
 800d78e:	d002      	beq.n	800d796 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	687a      	ldr	r2, [r7, #4]
 800d794:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d796:	bf00      	nop
 800d798:	3714      	adds	r7, #20
 800d79a:	46bd      	mov	sp, r7
 800d79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a0:	4770      	bx	lr
 800d7a2:	bf00      	nop
 800d7a4:	2000409c 	.word	0x2000409c
 800d7a8:	200040a4 	.word	0x200040a4

0800d7ac <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800d7b0:	2201      	movs	r2, #1
 800d7b2:	490e      	ldr	r1, [pc, #56]	; (800d7ec <MX_USB_HOST_Init+0x40>)
 800d7b4:	480e      	ldr	r0, [pc, #56]	; (800d7f0 <MX_USB_HOST_Init+0x44>)
 800d7b6:	f7fb ffd7 	bl	8009768 <USBH_Init>
 800d7ba:	4603      	mov	r3, r0
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d001      	beq.n	800d7c4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800d7c0:	f7f3 ff44 	bl	800164c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800d7c4:	490b      	ldr	r1, [pc, #44]	; (800d7f4 <MX_USB_HOST_Init+0x48>)
 800d7c6:	480a      	ldr	r0, [pc, #40]	; (800d7f0 <MX_USB_HOST_Init+0x44>)
 800d7c8:	f7fc f884 	bl	80098d4 <USBH_RegisterClass>
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d001      	beq.n	800d7d6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800d7d2:	f7f3 ff3b 	bl	800164c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800d7d6:	4806      	ldr	r0, [pc, #24]	; (800d7f0 <MX_USB_HOST_Init+0x44>)
 800d7d8:	f7fc f908 	bl	80099ec <USBH_Start>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d001      	beq.n	800d7e6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800d7e2:	f7f3 ff33 	bl	800164c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800d7e6:	bf00      	nop
 800d7e8:	bd80      	pop	{r7, pc}
 800d7ea:	bf00      	nop
 800d7ec:	0800d7f9 	.word	0x0800d7f9
 800d7f0:	200044d4 	.word	0x200044d4
 800d7f4:	2000000c 	.word	0x2000000c

0800d7f8 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800d7f8:	b480      	push	{r7}
 800d7fa:	b083      	sub	sp, #12
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
 800d800:	460b      	mov	r3, r1
 800d802:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800d804:	78fb      	ldrb	r3, [r7, #3]
 800d806:	3b01      	subs	r3, #1
 800d808:	2b04      	cmp	r3, #4
 800d80a:	d819      	bhi.n	800d840 <USBH_UserProcess+0x48>
 800d80c:	a201      	add	r2, pc, #4	; (adr r2, 800d814 <USBH_UserProcess+0x1c>)
 800d80e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d812:	bf00      	nop
 800d814:	0800d841 	.word	0x0800d841
 800d818:	0800d831 	.word	0x0800d831
 800d81c:	0800d841 	.word	0x0800d841
 800d820:	0800d839 	.word	0x0800d839
 800d824:	0800d829 	.word	0x0800d829
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800d828:	4b09      	ldr	r3, [pc, #36]	; (800d850 <USBH_UserProcess+0x58>)
 800d82a:	2203      	movs	r2, #3
 800d82c:	701a      	strb	r2, [r3, #0]
  break;
 800d82e:	e008      	b.n	800d842 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800d830:	4b07      	ldr	r3, [pc, #28]	; (800d850 <USBH_UserProcess+0x58>)
 800d832:	2202      	movs	r2, #2
 800d834:	701a      	strb	r2, [r3, #0]
  break;
 800d836:	e004      	b.n	800d842 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800d838:	4b05      	ldr	r3, [pc, #20]	; (800d850 <USBH_UserProcess+0x58>)
 800d83a:	2201      	movs	r2, #1
 800d83c:	701a      	strb	r2, [r3, #0]
  break;
 800d83e:	e000      	b.n	800d842 <USBH_UserProcess+0x4a>

  default:
  break;
 800d840:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800d842:	bf00      	nop
 800d844:	370c      	adds	r7, #12
 800d846:	46bd      	mov	sp, r7
 800d848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84c:	4770      	bx	lr
 800d84e:	bf00      	nop
 800d850:	200040bc 	.word	0x200040bc

0800d854 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800d854:	b580      	push	{r7, lr}
 800d856:	b08a      	sub	sp, #40	; 0x28
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d85c:	f107 0314 	add.w	r3, r7, #20
 800d860:	2200      	movs	r2, #0
 800d862:	601a      	str	r2, [r3, #0]
 800d864:	605a      	str	r2, [r3, #4]
 800d866:	609a      	str	r2, [r3, #8]
 800d868:	60da      	str	r2, [r3, #12]
 800d86a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d874:	d147      	bne.n	800d906 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d876:	2300      	movs	r3, #0
 800d878:	613b      	str	r3, [r7, #16]
 800d87a:	4b25      	ldr	r3, [pc, #148]	; (800d910 <HAL_HCD_MspInit+0xbc>)
 800d87c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d87e:	4a24      	ldr	r2, [pc, #144]	; (800d910 <HAL_HCD_MspInit+0xbc>)
 800d880:	f043 0301 	orr.w	r3, r3, #1
 800d884:	6313      	str	r3, [r2, #48]	; 0x30
 800d886:	4b22      	ldr	r3, [pc, #136]	; (800d910 <HAL_HCD_MspInit+0xbc>)
 800d888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d88a:	f003 0301 	and.w	r3, r3, #1
 800d88e:	613b      	str	r3, [r7, #16]
 800d890:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800d892:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d896:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d898:	2300      	movs	r3, #0
 800d89a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d89c:	2300      	movs	r3, #0
 800d89e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800d8a0:	f107 0314 	add.w	r3, r7, #20
 800d8a4:	4619      	mov	r1, r3
 800d8a6:	481b      	ldr	r0, [pc, #108]	; (800d914 <HAL_HCD_MspInit+0xc0>)
 800d8a8:	f7f6 fa72 	bl	8003d90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800d8ac:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800d8b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d8b2:	2302      	movs	r3, #2
 800d8b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d8be:	230a      	movs	r3, #10
 800d8c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d8c2:	f107 0314 	add.w	r3, r7, #20
 800d8c6:	4619      	mov	r1, r3
 800d8c8:	4812      	ldr	r0, [pc, #72]	; (800d914 <HAL_HCD_MspInit+0xc0>)
 800d8ca:	f7f6 fa61 	bl	8003d90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d8ce:	4b10      	ldr	r3, [pc, #64]	; (800d910 <HAL_HCD_MspInit+0xbc>)
 800d8d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8d2:	4a0f      	ldr	r2, [pc, #60]	; (800d910 <HAL_HCD_MspInit+0xbc>)
 800d8d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d8d8:	6353      	str	r3, [r2, #52]	; 0x34
 800d8da:	2300      	movs	r3, #0
 800d8dc:	60fb      	str	r3, [r7, #12]
 800d8de:	4b0c      	ldr	r3, [pc, #48]	; (800d910 <HAL_HCD_MspInit+0xbc>)
 800d8e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d8e2:	4a0b      	ldr	r2, [pc, #44]	; (800d910 <HAL_HCD_MspInit+0xbc>)
 800d8e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d8e8:	6453      	str	r3, [r2, #68]	; 0x44
 800d8ea:	4b09      	ldr	r3, [pc, #36]	; (800d910 <HAL_HCD_MspInit+0xbc>)
 800d8ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d8ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d8f2:	60fb      	str	r3, [r7, #12]
 800d8f4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	2105      	movs	r1, #5
 800d8fa:	2043      	movs	r0, #67	; 0x43
 800d8fc:	f7f5 feae 	bl	800365c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d900:	2043      	movs	r0, #67	; 0x43
 800d902:	f7f5 fec7 	bl	8003694 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d906:	bf00      	nop
 800d908:	3728      	adds	r7, #40	; 0x28
 800d90a:	46bd      	mov	sp, r7
 800d90c:	bd80      	pop	{r7, pc}
 800d90e:	bf00      	nop
 800d910:	40023800 	.word	0x40023800
 800d914:	40020000 	.word	0x40020000

0800d918 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b082      	sub	sp, #8
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d926:	4618      	mov	r0, r3
 800d928:	f7fc fd0d 	bl	800a346 <USBH_LL_IncTimer>
}
 800d92c:	bf00      	nop
 800d92e:	3708      	adds	r7, #8
 800d930:	46bd      	mov	sp, r7
 800d932:	bd80      	pop	{r7, pc}

0800d934 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b082      	sub	sp, #8
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d942:	4618      	mov	r0, r3
 800d944:	f7fc fd51 	bl	800a3ea <USBH_LL_Connect>
}
 800d948:	bf00      	nop
 800d94a:	3708      	adds	r7, #8
 800d94c:	46bd      	mov	sp, r7
 800d94e:	bd80      	pop	{r7, pc}

0800d950 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d950:	b580      	push	{r7, lr}
 800d952:	b082      	sub	sp, #8
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d95e:	4618      	mov	r0, r3
 800d960:	f7fc fd66 	bl	800a430 <USBH_LL_Disconnect>
}
 800d964:	bf00      	nop
 800d966:	3708      	adds	r7, #8
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}

0800d96c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b082      	sub	sp, #8
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
 800d974:	460b      	mov	r3, r1
 800d976:	70fb      	strb	r3, [r7, #3]
 800d978:	4613      	mov	r3, r2
 800d97a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d982:	4618      	mov	r0, r3
 800d984:	f7fc fd9b 	bl	800a4be <USBH_LL_NotifyURBChange>
#endif
}
 800d988:	bf00      	nop
 800d98a:	3708      	adds	r7, #8
 800d98c:	46bd      	mov	sp, r7
 800d98e:	bd80      	pop	{r7, pc}

0800d990 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b082      	sub	sp, #8
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f7fc fcfb 	bl	800a39a <USBH_LL_PortEnabled>
}
 800d9a4:	bf00      	nop
 800d9a6:	3708      	adds	r7, #8
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	bd80      	pop	{r7, pc}

0800d9ac <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b082      	sub	sp, #8
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f7fc fd07 	bl	800a3ce <USBH_LL_PortDisabled>
}
 800d9c0:	bf00      	nop
 800d9c2:	3708      	adds	r7, #8
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	bd80      	pop	{r7, pc}

0800d9c8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b082      	sub	sp, #8
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800d9d6:	2b01      	cmp	r3, #1
 800d9d8:	d12a      	bne.n	800da30 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800d9da:	4a18      	ldr	r2, [pc, #96]	; (800da3c <USBH_LL_Init+0x74>)
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	4a15      	ldr	r2, [pc, #84]	; (800da3c <USBH_LL_Init+0x74>)
 800d9e6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d9ea:	4b14      	ldr	r3, [pc, #80]	; (800da3c <USBH_LL_Init+0x74>)
 800d9ec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d9f0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800d9f2:	4b12      	ldr	r3, [pc, #72]	; (800da3c <USBH_LL_Init+0x74>)
 800d9f4:	2208      	movs	r2, #8
 800d9f6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800d9f8:	4b10      	ldr	r3, [pc, #64]	; (800da3c <USBH_LL_Init+0x74>)
 800d9fa:	2201      	movs	r2, #1
 800d9fc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d9fe:	4b0f      	ldr	r3, [pc, #60]	; (800da3c <USBH_LL_Init+0x74>)
 800da00:	2200      	movs	r2, #0
 800da02:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800da04:	4b0d      	ldr	r3, [pc, #52]	; (800da3c <USBH_LL_Init+0x74>)
 800da06:	2202      	movs	r2, #2
 800da08:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800da0a:	4b0c      	ldr	r3, [pc, #48]	; (800da3c <USBH_LL_Init+0x74>)
 800da0c:	2200      	movs	r2, #0
 800da0e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800da10:	480a      	ldr	r0, [pc, #40]	; (800da3c <USBH_LL_Init+0x74>)
 800da12:	f7f6 fba4 	bl	800415e <HAL_HCD_Init>
 800da16:	4603      	mov	r3, r0
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d001      	beq.n	800da20 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800da1c:	f7f3 fe16 	bl	800164c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800da20:	4806      	ldr	r0, [pc, #24]	; (800da3c <USBH_LL_Init+0x74>)
 800da22:	f7f6 ff88 	bl	8004936 <HAL_HCD_GetCurrentFrame>
 800da26:	4603      	mov	r3, r0
 800da28:	4619      	mov	r1, r3
 800da2a:	6878      	ldr	r0, [r7, #4]
 800da2c:	f7fc fc7c 	bl	800a328 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800da30:	2300      	movs	r3, #0
}
 800da32:	4618      	mov	r0, r3
 800da34:	3708      	adds	r7, #8
 800da36:	46bd      	mov	sp, r7
 800da38:	bd80      	pop	{r7, pc}
 800da3a:	bf00      	nop
 800da3c:	200048b8 	.word	0x200048b8

0800da40 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b084      	sub	sp, #16
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da48:	2300      	movs	r3, #0
 800da4a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800da4c:	2300      	movs	r3, #0
 800da4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800da56:	4618      	mov	r0, r3
 800da58:	f7f6 fef7 	bl	800484a <HAL_HCD_Start>
 800da5c:	4603      	mov	r3, r0
 800da5e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800da60:	7bfb      	ldrb	r3, [r7, #15]
 800da62:	4618      	mov	r0, r3
 800da64:	f000 f95c 	bl	800dd20 <USBH_Get_USB_Status>
 800da68:	4603      	mov	r3, r0
 800da6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da6c:	7bbb      	ldrb	r3, [r7, #14]
}
 800da6e:	4618      	mov	r0, r3
 800da70:	3710      	adds	r7, #16
 800da72:	46bd      	mov	sp, r7
 800da74:	bd80      	pop	{r7, pc}

0800da76 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800da76:	b580      	push	{r7, lr}
 800da78:	b084      	sub	sp, #16
 800da7a:	af00      	add	r7, sp, #0
 800da7c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da7e:	2300      	movs	r3, #0
 800da80:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800da82:	2300      	movs	r3, #0
 800da84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800da8c:	4618      	mov	r0, r3
 800da8e:	f7f6 feff 	bl	8004890 <HAL_HCD_Stop>
 800da92:	4603      	mov	r3, r0
 800da94:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800da96:	7bfb      	ldrb	r3, [r7, #15]
 800da98:	4618      	mov	r0, r3
 800da9a:	f000 f941 	bl	800dd20 <USBH_Get_USB_Status>
 800da9e:	4603      	mov	r3, r0
 800daa0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800daa2:	7bbb      	ldrb	r3, [r7, #14]
}
 800daa4:	4618      	mov	r0, r3
 800daa6:	3710      	adds	r7, #16
 800daa8:	46bd      	mov	sp, r7
 800daaa:	bd80      	pop	{r7, pc}

0800daac <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b084      	sub	sp, #16
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800dab4:	2301      	movs	r3, #1
 800dab6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dabe:	4618      	mov	r0, r3
 800dac0:	f7f6 ff47 	bl	8004952 <HAL_HCD_GetCurrentSpeed>
 800dac4:	4603      	mov	r3, r0
 800dac6:	2b02      	cmp	r3, #2
 800dac8:	d00c      	beq.n	800dae4 <USBH_LL_GetSpeed+0x38>
 800daca:	2b02      	cmp	r3, #2
 800dacc:	d80d      	bhi.n	800daea <USBH_LL_GetSpeed+0x3e>
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d002      	beq.n	800dad8 <USBH_LL_GetSpeed+0x2c>
 800dad2:	2b01      	cmp	r3, #1
 800dad4:	d003      	beq.n	800dade <USBH_LL_GetSpeed+0x32>
 800dad6:	e008      	b.n	800daea <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800dad8:	2300      	movs	r3, #0
 800dada:	73fb      	strb	r3, [r7, #15]
    break;
 800dadc:	e008      	b.n	800daf0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800dade:	2301      	movs	r3, #1
 800dae0:	73fb      	strb	r3, [r7, #15]
    break;
 800dae2:	e005      	b.n	800daf0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800dae4:	2302      	movs	r3, #2
 800dae6:	73fb      	strb	r3, [r7, #15]
    break;
 800dae8:	e002      	b.n	800daf0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800daea:	2301      	movs	r3, #1
 800daec:	73fb      	strb	r3, [r7, #15]
    break;
 800daee:	bf00      	nop
  }
  return  speed;
 800daf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800daf2:	4618      	mov	r0, r3
 800daf4:	3710      	adds	r7, #16
 800daf6:	46bd      	mov	sp, r7
 800daf8:	bd80      	pop	{r7, pc}

0800dafa <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800dafa:	b580      	push	{r7, lr}
 800dafc:	b084      	sub	sp, #16
 800dafe:	af00      	add	r7, sp, #0
 800db00:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db02:	2300      	movs	r3, #0
 800db04:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800db06:	2300      	movs	r3, #0
 800db08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800db10:	4618      	mov	r0, r3
 800db12:	f7f6 feda 	bl	80048ca <HAL_HCD_ResetPort>
 800db16:	4603      	mov	r3, r0
 800db18:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800db1a:	7bfb      	ldrb	r3, [r7, #15]
 800db1c:	4618      	mov	r0, r3
 800db1e:	f000 f8ff 	bl	800dd20 <USBH_Get_USB_Status>
 800db22:	4603      	mov	r3, r0
 800db24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db26:	7bbb      	ldrb	r3, [r7, #14]
}
 800db28:	4618      	mov	r0, r3
 800db2a:	3710      	adds	r7, #16
 800db2c:	46bd      	mov	sp, r7
 800db2e:	bd80      	pop	{r7, pc}

0800db30 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b082      	sub	sp, #8
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
 800db38:	460b      	mov	r3, r1
 800db3a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800db42:	78fa      	ldrb	r2, [r7, #3]
 800db44:	4611      	mov	r1, r2
 800db46:	4618      	mov	r0, r3
 800db48:	f7f6 fee1 	bl	800490e <HAL_HCD_HC_GetXferCount>
 800db4c:	4603      	mov	r3, r0
}
 800db4e:	4618      	mov	r0, r3
 800db50:	3708      	adds	r7, #8
 800db52:	46bd      	mov	sp, r7
 800db54:	bd80      	pop	{r7, pc}

0800db56 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800db56:	b590      	push	{r4, r7, lr}
 800db58:	b089      	sub	sp, #36	; 0x24
 800db5a:	af04      	add	r7, sp, #16
 800db5c:	6078      	str	r0, [r7, #4]
 800db5e:	4608      	mov	r0, r1
 800db60:	4611      	mov	r1, r2
 800db62:	461a      	mov	r2, r3
 800db64:	4603      	mov	r3, r0
 800db66:	70fb      	strb	r3, [r7, #3]
 800db68:	460b      	mov	r3, r1
 800db6a:	70bb      	strb	r3, [r7, #2]
 800db6c:	4613      	mov	r3, r2
 800db6e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db70:	2300      	movs	r3, #0
 800db72:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800db74:	2300      	movs	r3, #0
 800db76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800db7e:	787c      	ldrb	r4, [r7, #1]
 800db80:	78ba      	ldrb	r2, [r7, #2]
 800db82:	78f9      	ldrb	r1, [r7, #3]
 800db84:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800db86:	9302      	str	r3, [sp, #8]
 800db88:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800db8c:	9301      	str	r3, [sp, #4]
 800db8e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800db92:	9300      	str	r3, [sp, #0]
 800db94:	4623      	mov	r3, r4
 800db96:	f7f6 fb44 	bl	8004222 <HAL_HCD_HC_Init>
 800db9a:	4603      	mov	r3, r0
 800db9c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800db9e:	7bfb      	ldrb	r3, [r7, #15]
 800dba0:	4618      	mov	r0, r3
 800dba2:	f000 f8bd 	bl	800dd20 <USBH_Get_USB_Status>
 800dba6:	4603      	mov	r3, r0
 800dba8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dbaa:	7bbb      	ldrb	r3, [r7, #14]
}
 800dbac:	4618      	mov	r0, r3
 800dbae:	3714      	adds	r7, #20
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	bd90      	pop	{r4, r7, pc}

0800dbb4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b084      	sub	sp, #16
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
 800dbbc:	460b      	mov	r3, r1
 800dbbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dbce:	78fa      	ldrb	r2, [r7, #3]
 800dbd0:	4611      	mov	r1, r2
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	f7f6 fbb4 	bl	8004340 <HAL_HCD_HC_Halt>
 800dbd8:	4603      	mov	r3, r0
 800dbda:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dbdc:	7bfb      	ldrb	r3, [r7, #15]
 800dbde:	4618      	mov	r0, r3
 800dbe0:	f000 f89e 	bl	800dd20 <USBH_Get_USB_Status>
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dbe8:	7bbb      	ldrb	r3, [r7, #14]
}
 800dbea:	4618      	mov	r0, r3
 800dbec:	3710      	adds	r7, #16
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	bd80      	pop	{r7, pc}

0800dbf2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800dbf2:	b590      	push	{r4, r7, lr}
 800dbf4:	b089      	sub	sp, #36	; 0x24
 800dbf6:	af04      	add	r7, sp, #16
 800dbf8:	6078      	str	r0, [r7, #4]
 800dbfa:	4608      	mov	r0, r1
 800dbfc:	4611      	mov	r1, r2
 800dbfe:	461a      	mov	r2, r3
 800dc00:	4603      	mov	r3, r0
 800dc02:	70fb      	strb	r3, [r7, #3]
 800dc04:	460b      	mov	r3, r1
 800dc06:	70bb      	strb	r3, [r7, #2]
 800dc08:	4613      	mov	r3, r2
 800dc0a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dc10:	2300      	movs	r3, #0
 800dc12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800dc1a:	787c      	ldrb	r4, [r7, #1]
 800dc1c:	78ba      	ldrb	r2, [r7, #2]
 800dc1e:	78f9      	ldrb	r1, [r7, #3]
 800dc20:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800dc24:	9303      	str	r3, [sp, #12]
 800dc26:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800dc28:	9302      	str	r3, [sp, #8]
 800dc2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc2c:	9301      	str	r3, [sp, #4]
 800dc2e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dc32:	9300      	str	r3, [sp, #0]
 800dc34:	4623      	mov	r3, r4
 800dc36:	f7f6 fba7 	bl	8004388 <HAL_HCD_HC_SubmitRequest>
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800dc3e:	7bfb      	ldrb	r3, [r7, #15]
 800dc40:	4618      	mov	r0, r3
 800dc42:	f000 f86d 	bl	800dd20 <USBH_Get_USB_Status>
 800dc46:	4603      	mov	r3, r0
 800dc48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc4a:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	3714      	adds	r7, #20
 800dc50:	46bd      	mov	sp, r7
 800dc52:	bd90      	pop	{r4, r7, pc}

0800dc54 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b082      	sub	sp, #8
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
 800dc5c:	460b      	mov	r3, r1
 800dc5e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dc66:	78fa      	ldrb	r2, [r7, #3]
 800dc68:	4611      	mov	r1, r2
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	f7f6 fe3b 	bl	80048e6 <HAL_HCD_HC_GetURBState>
 800dc70:	4603      	mov	r3, r0
}
 800dc72:	4618      	mov	r0, r3
 800dc74:	3708      	adds	r7, #8
 800dc76:	46bd      	mov	sp, r7
 800dc78:	bd80      	pop	{r7, pc}

0800dc7a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800dc7a:	b580      	push	{r7, lr}
 800dc7c:	b082      	sub	sp, #8
 800dc7e:	af00      	add	r7, sp, #0
 800dc80:	6078      	str	r0, [r7, #4]
 800dc82:	460b      	mov	r3, r1
 800dc84:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800dc8c:	2b01      	cmp	r3, #1
 800dc8e:	d103      	bne.n	800dc98 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800dc90:	78fb      	ldrb	r3, [r7, #3]
 800dc92:	4618      	mov	r0, r3
 800dc94:	f000 f870 	bl	800dd78 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800dc98:	20c8      	movs	r0, #200	; 0xc8
 800dc9a:	f7f4 f98f 	bl	8001fbc <HAL_Delay>
  return USBH_OK;
 800dc9e:	2300      	movs	r3, #0
}
 800dca0:	4618      	mov	r0, r3
 800dca2:	3708      	adds	r7, #8
 800dca4:	46bd      	mov	sp, r7
 800dca6:	bd80      	pop	{r7, pc}

0800dca8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800dca8:	b480      	push	{r7}
 800dcaa:	b085      	sub	sp, #20
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
 800dcb0:	460b      	mov	r3, r1
 800dcb2:	70fb      	strb	r3, [r7, #3]
 800dcb4:	4613      	mov	r3, r2
 800dcb6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dcbe:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800dcc0:	78fb      	ldrb	r3, [r7, #3]
 800dcc2:	68fa      	ldr	r2, [r7, #12]
 800dcc4:	212c      	movs	r1, #44	; 0x2c
 800dcc6:	fb01 f303 	mul.w	r3, r1, r3
 800dcca:	4413      	add	r3, r2
 800dccc:	333b      	adds	r3, #59	; 0x3b
 800dcce:	781b      	ldrb	r3, [r3, #0]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d009      	beq.n	800dce8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800dcd4:	78fb      	ldrb	r3, [r7, #3]
 800dcd6:	68fa      	ldr	r2, [r7, #12]
 800dcd8:	212c      	movs	r1, #44	; 0x2c
 800dcda:	fb01 f303 	mul.w	r3, r1, r3
 800dcde:	4413      	add	r3, r2
 800dce0:	3354      	adds	r3, #84	; 0x54
 800dce2:	78ba      	ldrb	r2, [r7, #2]
 800dce4:	701a      	strb	r2, [r3, #0]
 800dce6:	e008      	b.n	800dcfa <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800dce8:	78fb      	ldrb	r3, [r7, #3]
 800dcea:	68fa      	ldr	r2, [r7, #12]
 800dcec:	212c      	movs	r1, #44	; 0x2c
 800dcee:	fb01 f303 	mul.w	r3, r1, r3
 800dcf2:	4413      	add	r3, r2
 800dcf4:	3355      	adds	r3, #85	; 0x55
 800dcf6:	78ba      	ldrb	r2, [r7, #2]
 800dcf8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800dcfa:	2300      	movs	r3, #0
}
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	3714      	adds	r7, #20
 800dd00:	46bd      	mov	sp, r7
 800dd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd06:	4770      	bx	lr

0800dd08 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b082      	sub	sp, #8
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800dd10:	6878      	ldr	r0, [r7, #4]
 800dd12:	f7f4 f953 	bl	8001fbc <HAL_Delay>
}
 800dd16:	bf00      	nop
 800dd18:	3708      	adds	r7, #8
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	bd80      	pop	{r7, pc}
	...

0800dd20 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dd20:	b480      	push	{r7}
 800dd22:	b085      	sub	sp, #20
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	4603      	mov	r3, r0
 800dd28:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dd2e:	79fb      	ldrb	r3, [r7, #7]
 800dd30:	2b03      	cmp	r3, #3
 800dd32:	d817      	bhi.n	800dd64 <USBH_Get_USB_Status+0x44>
 800dd34:	a201      	add	r2, pc, #4	; (adr r2, 800dd3c <USBH_Get_USB_Status+0x1c>)
 800dd36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd3a:	bf00      	nop
 800dd3c:	0800dd4d 	.word	0x0800dd4d
 800dd40:	0800dd53 	.word	0x0800dd53
 800dd44:	0800dd59 	.word	0x0800dd59
 800dd48:	0800dd5f 	.word	0x0800dd5f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	73fb      	strb	r3, [r7, #15]
    break;
 800dd50:	e00b      	b.n	800dd6a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800dd52:	2302      	movs	r3, #2
 800dd54:	73fb      	strb	r3, [r7, #15]
    break;
 800dd56:	e008      	b.n	800dd6a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800dd58:	2301      	movs	r3, #1
 800dd5a:	73fb      	strb	r3, [r7, #15]
    break;
 800dd5c:	e005      	b.n	800dd6a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800dd5e:	2302      	movs	r3, #2
 800dd60:	73fb      	strb	r3, [r7, #15]
    break;
 800dd62:	e002      	b.n	800dd6a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800dd64:	2302      	movs	r3, #2
 800dd66:	73fb      	strb	r3, [r7, #15]
    break;
 800dd68:	bf00      	nop
  }
  return usb_status;
 800dd6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	3714      	adds	r7, #20
 800dd70:	46bd      	mov	sp, r7
 800dd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd76:	4770      	bx	lr

0800dd78 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b084      	sub	sp, #16
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	4603      	mov	r3, r0
 800dd80:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800dd82:	79fb      	ldrb	r3, [r7, #7]
 800dd84:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800dd86:	79fb      	ldrb	r3, [r7, #7]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d102      	bne.n	800dd92 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800dd8c:	2301      	movs	r3, #1
 800dd8e:	73fb      	strb	r3, [r7, #15]
 800dd90:	e001      	b.n	800dd96 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800dd92:	2300      	movs	r3, #0
 800dd94:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800dd96:	7bfb      	ldrb	r3, [r7, #15]
 800dd98:	461a      	mov	r2, r3
 800dd9a:	2101      	movs	r1, #1
 800dd9c:	4803      	ldr	r0, [pc, #12]	; (800ddac <MX_DriverVbusFS+0x34>)
 800dd9e:	f7f6 f9ab 	bl	80040f8 <HAL_GPIO_WritePin>
}
 800dda2:	bf00      	nop
 800dda4:	3710      	adds	r7, #16
 800dda6:	46bd      	mov	sp, r7
 800dda8:	bd80      	pop	{r7, pc}
 800ddaa:	bf00      	nop
 800ddac:	40020800 	.word	0x40020800

0800ddb0 <__errno>:
 800ddb0:	4b01      	ldr	r3, [pc, #4]	; (800ddb8 <__errno+0x8>)
 800ddb2:	6818      	ldr	r0, [r3, #0]
 800ddb4:	4770      	bx	lr
 800ddb6:	bf00      	nop
 800ddb8:	20000030 	.word	0x20000030

0800ddbc <__libc_init_array>:
 800ddbc:	b570      	push	{r4, r5, r6, lr}
 800ddbe:	4d0d      	ldr	r5, [pc, #52]	; (800ddf4 <__libc_init_array+0x38>)
 800ddc0:	4c0d      	ldr	r4, [pc, #52]	; (800ddf8 <__libc_init_array+0x3c>)
 800ddc2:	1b64      	subs	r4, r4, r5
 800ddc4:	10a4      	asrs	r4, r4, #2
 800ddc6:	2600      	movs	r6, #0
 800ddc8:	42a6      	cmp	r6, r4
 800ddca:	d109      	bne.n	800dde0 <__libc_init_array+0x24>
 800ddcc:	4d0b      	ldr	r5, [pc, #44]	; (800ddfc <__libc_init_array+0x40>)
 800ddce:	4c0c      	ldr	r4, [pc, #48]	; (800de00 <__libc_init_array+0x44>)
 800ddd0:	f000 fcc8 	bl	800e764 <_init>
 800ddd4:	1b64      	subs	r4, r4, r5
 800ddd6:	10a4      	asrs	r4, r4, #2
 800ddd8:	2600      	movs	r6, #0
 800ddda:	42a6      	cmp	r6, r4
 800dddc:	d105      	bne.n	800ddea <__libc_init_array+0x2e>
 800ddde:	bd70      	pop	{r4, r5, r6, pc}
 800dde0:	f855 3b04 	ldr.w	r3, [r5], #4
 800dde4:	4798      	blx	r3
 800dde6:	3601      	adds	r6, #1
 800dde8:	e7ee      	b.n	800ddc8 <__libc_init_array+0xc>
 800ddea:	f855 3b04 	ldr.w	r3, [r5], #4
 800ddee:	4798      	blx	r3
 800ddf0:	3601      	adds	r6, #1
 800ddf2:	e7f2      	b.n	800ddda <__libc_init_array+0x1e>
 800ddf4:	0800e940 	.word	0x0800e940
 800ddf8:	0800e940 	.word	0x0800e940
 800ddfc:	0800e940 	.word	0x0800e940
 800de00:	0800e944 	.word	0x0800e944

0800de04 <__retarget_lock_acquire_recursive>:
 800de04:	4770      	bx	lr

0800de06 <__retarget_lock_release_recursive>:
 800de06:	4770      	bx	lr

0800de08 <malloc>:
 800de08:	4b02      	ldr	r3, [pc, #8]	; (800de14 <malloc+0xc>)
 800de0a:	4601      	mov	r1, r0
 800de0c:	6818      	ldr	r0, [r3, #0]
 800de0e:	f000 b871 	b.w	800def4 <_malloc_r>
 800de12:	bf00      	nop
 800de14:	20000030 	.word	0x20000030

0800de18 <free>:
 800de18:	4b02      	ldr	r3, [pc, #8]	; (800de24 <free+0xc>)
 800de1a:	4601      	mov	r1, r0
 800de1c:	6818      	ldr	r0, [r3, #0]
 800de1e:	f000 b819 	b.w	800de54 <_free_r>
 800de22:	bf00      	nop
 800de24:	20000030 	.word	0x20000030

0800de28 <memcpy>:
 800de28:	440a      	add	r2, r1
 800de2a:	4291      	cmp	r1, r2
 800de2c:	f100 33ff 	add.w	r3, r0, #4294967295
 800de30:	d100      	bne.n	800de34 <memcpy+0xc>
 800de32:	4770      	bx	lr
 800de34:	b510      	push	{r4, lr}
 800de36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de3e:	4291      	cmp	r1, r2
 800de40:	d1f9      	bne.n	800de36 <memcpy+0xe>
 800de42:	bd10      	pop	{r4, pc}

0800de44 <memset>:
 800de44:	4402      	add	r2, r0
 800de46:	4603      	mov	r3, r0
 800de48:	4293      	cmp	r3, r2
 800de4a:	d100      	bne.n	800de4e <memset+0xa>
 800de4c:	4770      	bx	lr
 800de4e:	f803 1b01 	strb.w	r1, [r3], #1
 800de52:	e7f9      	b.n	800de48 <memset+0x4>

0800de54 <_free_r>:
 800de54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800de56:	2900      	cmp	r1, #0
 800de58:	d048      	beq.n	800deec <_free_r+0x98>
 800de5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de5e:	9001      	str	r0, [sp, #4]
 800de60:	2b00      	cmp	r3, #0
 800de62:	f1a1 0404 	sub.w	r4, r1, #4
 800de66:	bfb8      	it	lt
 800de68:	18e4      	addlt	r4, r4, r3
 800de6a:	f000 f937 	bl	800e0dc <__malloc_lock>
 800de6e:	4a20      	ldr	r2, [pc, #128]	; (800def0 <_free_r+0x9c>)
 800de70:	9801      	ldr	r0, [sp, #4]
 800de72:	6813      	ldr	r3, [r2, #0]
 800de74:	4615      	mov	r5, r2
 800de76:	b933      	cbnz	r3, 800de86 <_free_r+0x32>
 800de78:	6063      	str	r3, [r4, #4]
 800de7a:	6014      	str	r4, [r2, #0]
 800de7c:	b003      	add	sp, #12
 800de7e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800de82:	f000 b931 	b.w	800e0e8 <__malloc_unlock>
 800de86:	42a3      	cmp	r3, r4
 800de88:	d90b      	bls.n	800dea2 <_free_r+0x4e>
 800de8a:	6821      	ldr	r1, [r4, #0]
 800de8c:	1862      	adds	r2, r4, r1
 800de8e:	4293      	cmp	r3, r2
 800de90:	bf04      	itt	eq
 800de92:	681a      	ldreq	r2, [r3, #0]
 800de94:	685b      	ldreq	r3, [r3, #4]
 800de96:	6063      	str	r3, [r4, #4]
 800de98:	bf04      	itt	eq
 800de9a:	1852      	addeq	r2, r2, r1
 800de9c:	6022      	streq	r2, [r4, #0]
 800de9e:	602c      	str	r4, [r5, #0]
 800dea0:	e7ec      	b.n	800de7c <_free_r+0x28>
 800dea2:	461a      	mov	r2, r3
 800dea4:	685b      	ldr	r3, [r3, #4]
 800dea6:	b10b      	cbz	r3, 800deac <_free_r+0x58>
 800dea8:	42a3      	cmp	r3, r4
 800deaa:	d9fa      	bls.n	800dea2 <_free_r+0x4e>
 800deac:	6811      	ldr	r1, [r2, #0]
 800deae:	1855      	adds	r5, r2, r1
 800deb0:	42a5      	cmp	r5, r4
 800deb2:	d10b      	bne.n	800decc <_free_r+0x78>
 800deb4:	6824      	ldr	r4, [r4, #0]
 800deb6:	4421      	add	r1, r4
 800deb8:	1854      	adds	r4, r2, r1
 800deba:	42a3      	cmp	r3, r4
 800debc:	6011      	str	r1, [r2, #0]
 800debe:	d1dd      	bne.n	800de7c <_free_r+0x28>
 800dec0:	681c      	ldr	r4, [r3, #0]
 800dec2:	685b      	ldr	r3, [r3, #4]
 800dec4:	6053      	str	r3, [r2, #4]
 800dec6:	4421      	add	r1, r4
 800dec8:	6011      	str	r1, [r2, #0]
 800deca:	e7d7      	b.n	800de7c <_free_r+0x28>
 800decc:	d902      	bls.n	800ded4 <_free_r+0x80>
 800dece:	230c      	movs	r3, #12
 800ded0:	6003      	str	r3, [r0, #0]
 800ded2:	e7d3      	b.n	800de7c <_free_r+0x28>
 800ded4:	6825      	ldr	r5, [r4, #0]
 800ded6:	1961      	adds	r1, r4, r5
 800ded8:	428b      	cmp	r3, r1
 800deda:	bf04      	itt	eq
 800dedc:	6819      	ldreq	r1, [r3, #0]
 800dede:	685b      	ldreq	r3, [r3, #4]
 800dee0:	6063      	str	r3, [r4, #4]
 800dee2:	bf04      	itt	eq
 800dee4:	1949      	addeq	r1, r1, r5
 800dee6:	6021      	streq	r1, [r4, #0]
 800dee8:	6054      	str	r4, [r2, #4]
 800deea:	e7c7      	b.n	800de7c <_free_r+0x28>
 800deec:	b003      	add	sp, #12
 800deee:	bd30      	pop	{r4, r5, pc}
 800def0:	200040c0 	.word	0x200040c0

0800def4 <_malloc_r>:
 800def4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800def6:	1ccd      	adds	r5, r1, #3
 800def8:	f025 0503 	bic.w	r5, r5, #3
 800defc:	3508      	adds	r5, #8
 800defe:	2d0c      	cmp	r5, #12
 800df00:	bf38      	it	cc
 800df02:	250c      	movcc	r5, #12
 800df04:	2d00      	cmp	r5, #0
 800df06:	4606      	mov	r6, r0
 800df08:	db01      	blt.n	800df0e <_malloc_r+0x1a>
 800df0a:	42a9      	cmp	r1, r5
 800df0c:	d903      	bls.n	800df16 <_malloc_r+0x22>
 800df0e:	230c      	movs	r3, #12
 800df10:	6033      	str	r3, [r6, #0]
 800df12:	2000      	movs	r0, #0
 800df14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df16:	f000 f8e1 	bl	800e0dc <__malloc_lock>
 800df1a:	4921      	ldr	r1, [pc, #132]	; (800dfa0 <_malloc_r+0xac>)
 800df1c:	680a      	ldr	r2, [r1, #0]
 800df1e:	4614      	mov	r4, r2
 800df20:	b99c      	cbnz	r4, 800df4a <_malloc_r+0x56>
 800df22:	4f20      	ldr	r7, [pc, #128]	; (800dfa4 <_malloc_r+0xb0>)
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	b923      	cbnz	r3, 800df32 <_malloc_r+0x3e>
 800df28:	4621      	mov	r1, r4
 800df2a:	4630      	mov	r0, r6
 800df2c:	f000 f8a6 	bl	800e07c <_sbrk_r>
 800df30:	6038      	str	r0, [r7, #0]
 800df32:	4629      	mov	r1, r5
 800df34:	4630      	mov	r0, r6
 800df36:	f000 f8a1 	bl	800e07c <_sbrk_r>
 800df3a:	1c43      	adds	r3, r0, #1
 800df3c:	d123      	bne.n	800df86 <_malloc_r+0x92>
 800df3e:	230c      	movs	r3, #12
 800df40:	6033      	str	r3, [r6, #0]
 800df42:	4630      	mov	r0, r6
 800df44:	f000 f8d0 	bl	800e0e8 <__malloc_unlock>
 800df48:	e7e3      	b.n	800df12 <_malloc_r+0x1e>
 800df4a:	6823      	ldr	r3, [r4, #0]
 800df4c:	1b5b      	subs	r3, r3, r5
 800df4e:	d417      	bmi.n	800df80 <_malloc_r+0x8c>
 800df50:	2b0b      	cmp	r3, #11
 800df52:	d903      	bls.n	800df5c <_malloc_r+0x68>
 800df54:	6023      	str	r3, [r4, #0]
 800df56:	441c      	add	r4, r3
 800df58:	6025      	str	r5, [r4, #0]
 800df5a:	e004      	b.n	800df66 <_malloc_r+0x72>
 800df5c:	6863      	ldr	r3, [r4, #4]
 800df5e:	42a2      	cmp	r2, r4
 800df60:	bf0c      	ite	eq
 800df62:	600b      	streq	r3, [r1, #0]
 800df64:	6053      	strne	r3, [r2, #4]
 800df66:	4630      	mov	r0, r6
 800df68:	f000 f8be 	bl	800e0e8 <__malloc_unlock>
 800df6c:	f104 000b 	add.w	r0, r4, #11
 800df70:	1d23      	adds	r3, r4, #4
 800df72:	f020 0007 	bic.w	r0, r0, #7
 800df76:	1ac2      	subs	r2, r0, r3
 800df78:	d0cc      	beq.n	800df14 <_malloc_r+0x20>
 800df7a:	1a1b      	subs	r3, r3, r0
 800df7c:	50a3      	str	r3, [r4, r2]
 800df7e:	e7c9      	b.n	800df14 <_malloc_r+0x20>
 800df80:	4622      	mov	r2, r4
 800df82:	6864      	ldr	r4, [r4, #4]
 800df84:	e7cc      	b.n	800df20 <_malloc_r+0x2c>
 800df86:	1cc4      	adds	r4, r0, #3
 800df88:	f024 0403 	bic.w	r4, r4, #3
 800df8c:	42a0      	cmp	r0, r4
 800df8e:	d0e3      	beq.n	800df58 <_malloc_r+0x64>
 800df90:	1a21      	subs	r1, r4, r0
 800df92:	4630      	mov	r0, r6
 800df94:	f000 f872 	bl	800e07c <_sbrk_r>
 800df98:	3001      	adds	r0, #1
 800df9a:	d1dd      	bne.n	800df58 <_malloc_r+0x64>
 800df9c:	e7cf      	b.n	800df3e <_malloc_r+0x4a>
 800df9e:	bf00      	nop
 800dfa0:	200040c0 	.word	0x200040c0
 800dfa4:	200040c4 	.word	0x200040c4

0800dfa8 <cleanup_glue>:
 800dfa8:	b538      	push	{r3, r4, r5, lr}
 800dfaa:	460c      	mov	r4, r1
 800dfac:	6809      	ldr	r1, [r1, #0]
 800dfae:	4605      	mov	r5, r0
 800dfb0:	b109      	cbz	r1, 800dfb6 <cleanup_glue+0xe>
 800dfb2:	f7ff fff9 	bl	800dfa8 <cleanup_glue>
 800dfb6:	4621      	mov	r1, r4
 800dfb8:	4628      	mov	r0, r5
 800dfba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dfbe:	f7ff bf49 	b.w	800de54 <_free_r>
	...

0800dfc4 <_reclaim_reent>:
 800dfc4:	4b2c      	ldr	r3, [pc, #176]	; (800e078 <_reclaim_reent+0xb4>)
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	4283      	cmp	r3, r0
 800dfca:	b570      	push	{r4, r5, r6, lr}
 800dfcc:	4604      	mov	r4, r0
 800dfce:	d051      	beq.n	800e074 <_reclaim_reent+0xb0>
 800dfd0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800dfd2:	b143      	cbz	r3, 800dfe6 <_reclaim_reent+0x22>
 800dfd4:	68db      	ldr	r3, [r3, #12]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d14a      	bne.n	800e070 <_reclaim_reent+0xac>
 800dfda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dfdc:	6819      	ldr	r1, [r3, #0]
 800dfde:	b111      	cbz	r1, 800dfe6 <_reclaim_reent+0x22>
 800dfe0:	4620      	mov	r0, r4
 800dfe2:	f7ff ff37 	bl	800de54 <_free_r>
 800dfe6:	6961      	ldr	r1, [r4, #20]
 800dfe8:	b111      	cbz	r1, 800dff0 <_reclaim_reent+0x2c>
 800dfea:	4620      	mov	r0, r4
 800dfec:	f7ff ff32 	bl	800de54 <_free_r>
 800dff0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800dff2:	b111      	cbz	r1, 800dffa <_reclaim_reent+0x36>
 800dff4:	4620      	mov	r0, r4
 800dff6:	f7ff ff2d 	bl	800de54 <_free_r>
 800dffa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800dffc:	b111      	cbz	r1, 800e004 <_reclaim_reent+0x40>
 800dffe:	4620      	mov	r0, r4
 800e000:	f7ff ff28 	bl	800de54 <_free_r>
 800e004:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800e006:	b111      	cbz	r1, 800e00e <_reclaim_reent+0x4a>
 800e008:	4620      	mov	r0, r4
 800e00a:	f7ff ff23 	bl	800de54 <_free_r>
 800e00e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800e010:	b111      	cbz	r1, 800e018 <_reclaim_reent+0x54>
 800e012:	4620      	mov	r0, r4
 800e014:	f7ff ff1e 	bl	800de54 <_free_r>
 800e018:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800e01a:	b111      	cbz	r1, 800e022 <_reclaim_reent+0x5e>
 800e01c:	4620      	mov	r0, r4
 800e01e:	f7ff ff19 	bl	800de54 <_free_r>
 800e022:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800e024:	b111      	cbz	r1, 800e02c <_reclaim_reent+0x68>
 800e026:	4620      	mov	r0, r4
 800e028:	f7ff ff14 	bl	800de54 <_free_r>
 800e02c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e02e:	b111      	cbz	r1, 800e036 <_reclaim_reent+0x72>
 800e030:	4620      	mov	r0, r4
 800e032:	f7ff ff0f 	bl	800de54 <_free_r>
 800e036:	69a3      	ldr	r3, [r4, #24]
 800e038:	b1e3      	cbz	r3, 800e074 <_reclaim_reent+0xb0>
 800e03a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e03c:	4620      	mov	r0, r4
 800e03e:	4798      	blx	r3
 800e040:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e042:	b1b9      	cbz	r1, 800e074 <_reclaim_reent+0xb0>
 800e044:	4620      	mov	r0, r4
 800e046:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e04a:	f7ff bfad 	b.w	800dfa8 <cleanup_glue>
 800e04e:	5949      	ldr	r1, [r1, r5]
 800e050:	b941      	cbnz	r1, 800e064 <_reclaim_reent+0xa0>
 800e052:	3504      	adds	r5, #4
 800e054:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e056:	2d80      	cmp	r5, #128	; 0x80
 800e058:	68d9      	ldr	r1, [r3, #12]
 800e05a:	d1f8      	bne.n	800e04e <_reclaim_reent+0x8a>
 800e05c:	4620      	mov	r0, r4
 800e05e:	f7ff fef9 	bl	800de54 <_free_r>
 800e062:	e7ba      	b.n	800dfda <_reclaim_reent+0x16>
 800e064:	680e      	ldr	r6, [r1, #0]
 800e066:	4620      	mov	r0, r4
 800e068:	f7ff fef4 	bl	800de54 <_free_r>
 800e06c:	4631      	mov	r1, r6
 800e06e:	e7ef      	b.n	800e050 <_reclaim_reent+0x8c>
 800e070:	2500      	movs	r5, #0
 800e072:	e7ef      	b.n	800e054 <_reclaim_reent+0x90>
 800e074:	bd70      	pop	{r4, r5, r6, pc}
 800e076:	bf00      	nop
 800e078:	20000030 	.word	0x20000030

0800e07c <_sbrk_r>:
 800e07c:	b538      	push	{r3, r4, r5, lr}
 800e07e:	4d06      	ldr	r5, [pc, #24]	; (800e098 <_sbrk_r+0x1c>)
 800e080:	2300      	movs	r3, #0
 800e082:	4604      	mov	r4, r0
 800e084:	4608      	mov	r0, r1
 800e086:	602b      	str	r3, [r5, #0]
 800e088:	f7f3 fee4 	bl	8001e54 <_sbrk>
 800e08c:	1c43      	adds	r3, r0, #1
 800e08e:	d102      	bne.n	800e096 <_sbrk_r+0x1a>
 800e090:	682b      	ldr	r3, [r5, #0]
 800e092:	b103      	cbz	r3, 800e096 <_sbrk_r+0x1a>
 800e094:	6023      	str	r3, [r4, #0]
 800e096:	bd38      	pop	{r3, r4, r5, pc}
 800e098:	20004bc8 	.word	0x20004bc8

0800e09c <siprintf>:
 800e09c:	b40e      	push	{r1, r2, r3}
 800e09e:	b500      	push	{lr}
 800e0a0:	b09c      	sub	sp, #112	; 0x70
 800e0a2:	ab1d      	add	r3, sp, #116	; 0x74
 800e0a4:	9002      	str	r0, [sp, #8]
 800e0a6:	9006      	str	r0, [sp, #24]
 800e0a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e0ac:	4809      	ldr	r0, [pc, #36]	; (800e0d4 <siprintf+0x38>)
 800e0ae:	9107      	str	r1, [sp, #28]
 800e0b0:	9104      	str	r1, [sp, #16]
 800e0b2:	4909      	ldr	r1, [pc, #36]	; (800e0d8 <siprintf+0x3c>)
 800e0b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0b8:	9105      	str	r1, [sp, #20]
 800e0ba:	6800      	ldr	r0, [r0, #0]
 800e0bc:	9301      	str	r3, [sp, #4]
 800e0be:	a902      	add	r1, sp, #8
 800e0c0:	f000 f874 	bl	800e1ac <_svfiprintf_r>
 800e0c4:	9b02      	ldr	r3, [sp, #8]
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	701a      	strb	r2, [r3, #0]
 800e0ca:	b01c      	add	sp, #112	; 0x70
 800e0cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800e0d0:	b003      	add	sp, #12
 800e0d2:	4770      	bx	lr
 800e0d4:	20000030 	.word	0x20000030
 800e0d8:	ffff0208 	.word	0xffff0208

0800e0dc <__malloc_lock>:
 800e0dc:	4801      	ldr	r0, [pc, #4]	; (800e0e4 <__malloc_lock+0x8>)
 800e0de:	f7ff be91 	b.w	800de04 <__retarget_lock_acquire_recursive>
 800e0e2:	bf00      	nop
 800e0e4:	20004bc0 	.word	0x20004bc0

0800e0e8 <__malloc_unlock>:
 800e0e8:	4801      	ldr	r0, [pc, #4]	; (800e0f0 <__malloc_unlock+0x8>)
 800e0ea:	f7ff be8c 	b.w	800de06 <__retarget_lock_release_recursive>
 800e0ee:	bf00      	nop
 800e0f0:	20004bc0 	.word	0x20004bc0

0800e0f4 <__ssputs_r>:
 800e0f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0f8:	688e      	ldr	r6, [r1, #8]
 800e0fa:	429e      	cmp	r6, r3
 800e0fc:	4682      	mov	sl, r0
 800e0fe:	460c      	mov	r4, r1
 800e100:	4690      	mov	r8, r2
 800e102:	461f      	mov	r7, r3
 800e104:	d838      	bhi.n	800e178 <__ssputs_r+0x84>
 800e106:	898a      	ldrh	r2, [r1, #12]
 800e108:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e10c:	d032      	beq.n	800e174 <__ssputs_r+0x80>
 800e10e:	6825      	ldr	r5, [r4, #0]
 800e110:	6909      	ldr	r1, [r1, #16]
 800e112:	eba5 0901 	sub.w	r9, r5, r1
 800e116:	6965      	ldr	r5, [r4, #20]
 800e118:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e11c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e120:	3301      	adds	r3, #1
 800e122:	444b      	add	r3, r9
 800e124:	106d      	asrs	r5, r5, #1
 800e126:	429d      	cmp	r5, r3
 800e128:	bf38      	it	cc
 800e12a:	461d      	movcc	r5, r3
 800e12c:	0553      	lsls	r3, r2, #21
 800e12e:	d531      	bpl.n	800e194 <__ssputs_r+0xa0>
 800e130:	4629      	mov	r1, r5
 800e132:	f7ff fedf 	bl	800def4 <_malloc_r>
 800e136:	4606      	mov	r6, r0
 800e138:	b950      	cbnz	r0, 800e150 <__ssputs_r+0x5c>
 800e13a:	230c      	movs	r3, #12
 800e13c:	f8ca 3000 	str.w	r3, [sl]
 800e140:	89a3      	ldrh	r3, [r4, #12]
 800e142:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e146:	81a3      	strh	r3, [r4, #12]
 800e148:	f04f 30ff 	mov.w	r0, #4294967295
 800e14c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e150:	6921      	ldr	r1, [r4, #16]
 800e152:	464a      	mov	r2, r9
 800e154:	f7ff fe68 	bl	800de28 <memcpy>
 800e158:	89a3      	ldrh	r3, [r4, #12]
 800e15a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e15e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e162:	81a3      	strh	r3, [r4, #12]
 800e164:	6126      	str	r6, [r4, #16]
 800e166:	6165      	str	r5, [r4, #20]
 800e168:	444e      	add	r6, r9
 800e16a:	eba5 0509 	sub.w	r5, r5, r9
 800e16e:	6026      	str	r6, [r4, #0]
 800e170:	60a5      	str	r5, [r4, #8]
 800e172:	463e      	mov	r6, r7
 800e174:	42be      	cmp	r6, r7
 800e176:	d900      	bls.n	800e17a <__ssputs_r+0x86>
 800e178:	463e      	mov	r6, r7
 800e17a:	4632      	mov	r2, r6
 800e17c:	6820      	ldr	r0, [r4, #0]
 800e17e:	4641      	mov	r1, r8
 800e180:	f000 faa8 	bl	800e6d4 <memmove>
 800e184:	68a3      	ldr	r3, [r4, #8]
 800e186:	6822      	ldr	r2, [r4, #0]
 800e188:	1b9b      	subs	r3, r3, r6
 800e18a:	4432      	add	r2, r6
 800e18c:	60a3      	str	r3, [r4, #8]
 800e18e:	6022      	str	r2, [r4, #0]
 800e190:	2000      	movs	r0, #0
 800e192:	e7db      	b.n	800e14c <__ssputs_r+0x58>
 800e194:	462a      	mov	r2, r5
 800e196:	f000 fab7 	bl	800e708 <_realloc_r>
 800e19a:	4606      	mov	r6, r0
 800e19c:	2800      	cmp	r0, #0
 800e19e:	d1e1      	bne.n	800e164 <__ssputs_r+0x70>
 800e1a0:	6921      	ldr	r1, [r4, #16]
 800e1a2:	4650      	mov	r0, sl
 800e1a4:	f7ff fe56 	bl	800de54 <_free_r>
 800e1a8:	e7c7      	b.n	800e13a <__ssputs_r+0x46>
	...

0800e1ac <_svfiprintf_r>:
 800e1ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1b0:	4698      	mov	r8, r3
 800e1b2:	898b      	ldrh	r3, [r1, #12]
 800e1b4:	061b      	lsls	r3, r3, #24
 800e1b6:	b09d      	sub	sp, #116	; 0x74
 800e1b8:	4607      	mov	r7, r0
 800e1ba:	460d      	mov	r5, r1
 800e1bc:	4614      	mov	r4, r2
 800e1be:	d50e      	bpl.n	800e1de <_svfiprintf_r+0x32>
 800e1c0:	690b      	ldr	r3, [r1, #16]
 800e1c2:	b963      	cbnz	r3, 800e1de <_svfiprintf_r+0x32>
 800e1c4:	2140      	movs	r1, #64	; 0x40
 800e1c6:	f7ff fe95 	bl	800def4 <_malloc_r>
 800e1ca:	6028      	str	r0, [r5, #0]
 800e1cc:	6128      	str	r0, [r5, #16]
 800e1ce:	b920      	cbnz	r0, 800e1da <_svfiprintf_r+0x2e>
 800e1d0:	230c      	movs	r3, #12
 800e1d2:	603b      	str	r3, [r7, #0]
 800e1d4:	f04f 30ff 	mov.w	r0, #4294967295
 800e1d8:	e0d1      	b.n	800e37e <_svfiprintf_r+0x1d2>
 800e1da:	2340      	movs	r3, #64	; 0x40
 800e1dc:	616b      	str	r3, [r5, #20]
 800e1de:	2300      	movs	r3, #0
 800e1e0:	9309      	str	r3, [sp, #36]	; 0x24
 800e1e2:	2320      	movs	r3, #32
 800e1e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e1e8:	f8cd 800c 	str.w	r8, [sp, #12]
 800e1ec:	2330      	movs	r3, #48	; 0x30
 800e1ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e398 <_svfiprintf_r+0x1ec>
 800e1f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e1f6:	f04f 0901 	mov.w	r9, #1
 800e1fa:	4623      	mov	r3, r4
 800e1fc:	469a      	mov	sl, r3
 800e1fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e202:	b10a      	cbz	r2, 800e208 <_svfiprintf_r+0x5c>
 800e204:	2a25      	cmp	r2, #37	; 0x25
 800e206:	d1f9      	bne.n	800e1fc <_svfiprintf_r+0x50>
 800e208:	ebba 0b04 	subs.w	fp, sl, r4
 800e20c:	d00b      	beq.n	800e226 <_svfiprintf_r+0x7a>
 800e20e:	465b      	mov	r3, fp
 800e210:	4622      	mov	r2, r4
 800e212:	4629      	mov	r1, r5
 800e214:	4638      	mov	r0, r7
 800e216:	f7ff ff6d 	bl	800e0f4 <__ssputs_r>
 800e21a:	3001      	adds	r0, #1
 800e21c:	f000 80aa 	beq.w	800e374 <_svfiprintf_r+0x1c8>
 800e220:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e222:	445a      	add	r2, fp
 800e224:	9209      	str	r2, [sp, #36]	; 0x24
 800e226:	f89a 3000 	ldrb.w	r3, [sl]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	f000 80a2 	beq.w	800e374 <_svfiprintf_r+0x1c8>
 800e230:	2300      	movs	r3, #0
 800e232:	f04f 32ff 	mov.w	r2, #4294967295
 800e236:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e23a:	f10a 0a01 	add.w	sl, sl, #1
 800e23e:	9304      	str	r3, [sp, #16]
 800e240:	9307      	str	r3, [sp, #28]
 800e242:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e246:	931a      	str	r3, [sp, #104]	; 0x68
 800e248:	4654      	mov	r4, sl
 800e24a:	2205      	movs	r2, #5
 800e24c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e250:	4851      	ldr	r0, [pc, #324]	; (800e398 <_svfiprintf_r+0x1ec>)
 800e252:	f7f1 ffc5 	bl	80001e0 <memchr>
 800e256:	9a04      	ldr	r2, [sp, #16]
 800e258:	b9d8      	cbnz	r0, 800e292 <_svfiprintf_r+0xe6>
 800e25a:	06d0      	lsls	r0, r2, #27
 800e25c:	bf44      	itt	mi
 800e25e:	2320      	movmi	r3, #32
 800e260:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e264:	0711      	lsls	r1, r2, #28
 800e266:	bf44      	itt	mi
 800e268:	232b      	movmi	r3, #43	; 0x2b
 800e26a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e26e:	f89a 3000 	ldrb.w	r3, [sl]
 800e272:	2b2a      	cmp	r3, #42	; 0x2a
 800e274:	d015      	beq.n	800e2a2 <_svfiprintf_r+0xf6>
 800e276:	9a07      	ldr	r2, [sp, #28]
 800e278:	4654      	mov	r4, sl
 800e27a:	2000      	movs	r0, #0
 800e27c:	f04f 0c0a 	mov.w	ip, #10
 800e280:	4621      	mov	r1, r4
 800e282:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e286:	3b30      	subs	r3, #48	; 0x30
 800e288:	2b09      	cmp	r3, #9
 800e28a:	d94e      	bls.n	800e32a <_svfiprintf_r+0x17e>
 800e28c:	b1b0      	cbz	r0, 800e2bc <_svfiprintf_r+0x110>
 800e28e:	9207      	str	r2, [sp, #28]
 800e290:	e014      	b.n	800e2bc <_svfiprintf_r+0x110>
 800e292:	eba0 0308 	sub.w	r3, r0, r8
 800e296:	fa09 f303 	lsl.w	r3, r9, r3
 800e29a:	4313      	orrs	r3, r2
 800e29c:	9304      	str	r3, [sp, #16]
 800e29e:	46a2      	mov	sl, r4
 800e2a0:	e7d2      	b.n	800e248 <_svfiprintf_r+0x9c>
 800e2a2:	9b03      	ldr	r3, [sp, #12]
 800e2a4:	1d19      	adds	r1, r3, #4
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	9103      	str	r1, [sp, #12]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	bfbb      	ittet	lt
 800e2ae:	425b      	neglt	r3, r3
 800e2b0:	f042 0202 	orrlt.w	r2, r2, #2
 800e2b4:	9307      	strge	r3, [sp, #28]
 800e2b6:	9307      	strlt	r3, [sp, #28]
 800e2b8:	bfb8      	it	lt
 800e2ba:	9204      	strlt	r2, [sp, #16]
 800e2bc:	7823      	ldrb	r3, [r4, #0]
 800e2be:	2b2e      	cmp	r3, #46	; 0x2e
 800e2c0:	d10c      	bne.n	800e2dc <_svfiprintf_r+0x130>
 800e2c2:	7863      	ldrb	r3, [r4, #1]
 800e2c4:	2b2a      	cmp	r3, #42	; 0x2a
 800e2c6:	d135      	bne.n	800e334 <_svfiprintf_r+0x188>
 800e2c8:	9b03      	ldr	r3, [sp, #12]
 800e2ca:	1d1a      	adds	r2, r3, #4
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	9203      	str	r2, [sp, #12]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	bfb8      	it	lt
 800e2d4:	f04f 33ff 	movlt.w	r3, #4294967295
 800e2d8:	3402      	adds	r4, #2
 800e2da:	9305      	str	r3, [sp, #20]
 800e2dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e3a8 <_svfiprintf_r+0x1fc>
 800e2e0:	7821      	ldrb	r1, [r4, #0]
 800e2e2:	2203      	movs	r2, #3
 800e2e4:	4650      	mov	r0, sl
 800e2e6:	f7f1 ff7b 	bl	80001e0 <memchr>
 800e2ea:	b140      	cbz	r0, 800e2fe <_svfiprintf_r+0x152>
 800e2ec:	2340      	movs	r3, #64	; 0x40
 800e2ee:	eba0 000a 	sub.w	r0, r0, sl
 800e2f2:	fa03 f000 	lsl.w	r0, r3, r0
 800e2f6:	9b04      	ldr	r3, [sp, #16]
 800e2f8:	4303      	orrs	r3, r0
 800e2fa:	3401      	adds	r4, #1
 800e2fc:	9304      	str	r3, [sp, #16]
 800e2fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e302:	4826      	ldr	r0, [pc, #152]	; (800e39c <_svfiprintf_r+0x1f0>)
 800e304:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e308:	2206      	movs	r2, #6
 800e30a:	f7f1 ff69 	bl	80001e0 <memchr>
 800e30e:	2800      	cmp	r0, #0
 800e310:	d038      	beq.n	800e384 <_svfiprintf_r+0x1d8>
 800e312:	4b23      	ldr	r3, [pc, #140]	; (800e3a0 <_svfiprintf_r+0x1f4>)
 800e314:	bb1b      	cbnz	r3, 800e35e <_svfiprintf_r+0x1b2>
 800e316:	9b03      	ldr	r3, [sp, #12]
 800e318:	3307      	adds	r3, #7
 800e31a:	f023 0307 	bic.w	r3, r3, #7
 800e31e:	3308      	adds	r3, #8
 800e320:	9303      	str	r3, [sp, #12]
 800e322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e324:	4433      	add	r3, r6
 800e326:	9309      	str	r3, [sp, #36]	; 0x24
 800e328:	e767      	b.n	800e1fa <_svfiprintf_r+0x4e>
 800e32a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e32e:	460c      	mov	r4, r1
 800e330:	2001      	movs	r0, #1
 800e332:	e7a5      	b.n	800e280 <_svfiprintf_r+0xd4>
 800e334:	2300      	movs	r3, #0
 800e336:	3401      	adds	r4, #1
 800e338:	9305      	str	r3, [sp, #20]
 800e33a:	4619      	mov	r1, r3
 800e33c:	f04f 0c0a 	mov.w	ip, #10
 800e340:	4620      	mov	r0, r4
 800e342:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e346:	3a30      	subs	r2, #48	; 0x30
 800e348:	2a09      	cmp	r2, #9
 800e34a:	d903      	bls.n	800e354 <_svfiprintf_r+0x1a8>
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d0c5      	beq.n	800e2dc <_svfiprintf_r+0x130>
 800e350:	9105      	str	r1, [sp, #20]
 800e352:	e7c3      	b.n	800e2dc <_svfiprintf_r+0x130>
 800e354:	fb0c 2101 	mla	r1, ip, r1, r2
 800e358:	4604      	mov	r4, r0
 800e35a:	2301      	movs	r3, #1
 800e35c:	e7f0      	b.n	800e340 <_svfiprintf_r+0x194>
 800e35e:	ab03      	add	r3, sp, #12
 800e360:	9300      	str	r3, [sp, #0]
 800e362:	462a      	mov	r2, r5
 800e364:	4b0f      	ldr	r3, [pc, #60]	; (800e3a4 <_svfiprintf_r+0x1f8>)
 800e366:	a904      	add	r1, sp, #16
 800e368:	4638      	mov	r0, r7
 800e36a:	f3af 8000 	nop.w
 800e36e:	1c42      	adds	r2, r0, #1
 800e370:	4606      	mov	r6, r0
 800e372:	d1d6      	bne.n	800e322 <_svfiprintf_r+0x176>
 800e374:	89ab      	ldrh	r3, [r5, #12]
 800e376:	065b      	lsls	r3, r3, #25
 800e378:	f53f af2c 	bmi.w	800e1d4 <_svfiprintf_r+0x28>
 800e37c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e37e:	b01d      	add	sp, #116	; 0x74
 800e380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e384:	ab03      	add	r3, sp, #12
 800e386:	9300      	str	r3, [sp, #0]
 800e388:	462a      	mov	r2, r5
 800e38a:	4b06      	ldr	r3, [pc, #24]	; (800e3a4 <_svfiprintf_r+0x1f8>)
 800e38c:	a904      	add	r1, sp, #16
 800e38e:	4638      	mov	r0, r7
 800e390:	f000 f87a 	bl	800e488 <_printf_i>
 800e394:	e7eb      	b.n	800e36e <_svfiprintf_r+0x1c2>
 800e396:	bf00      	nop
 800e398:	0800e904 	.word	0x0800e904
 800e39c:	0800e90e 	.word	0x0800e90e
 800e3a0:	00000000 	.word	0x00000000
 800e3a4:	0800e0f5 	.word	0x0800e0f5
 800e3a8:	0800e90a 	.word	0x0800e90a

0800e3ac <_printf_common>:
 800e3ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3b0:	4616      	mov	r6, r2
 800e3b2:	4699      	mov	r9, r3
 800e3b4:	688a      	ldr	r2, [r1, #8]
 800e3b6:	690b      	ldr	r3, [r1, #16]
 800e3b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e3bc:	4293      	cmp	r3, r2
 800e3be:	bfb8      	it	lt
 800e3c0:	4613      	movlt	r3, r2
 800e3c2:	6033      	str	r3, [r6, #0]
 800e3c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e3c8:	4607      	mov	r7, r0
 800e3ca:	460c      	mov	r4, r1
 800e3cc:	b10a      	cbz	r2, 800e3d2 <_printf_common+0x26>
 800e3ce:	3301      	adds	r3, #1
 800e3d0:	6033      	str	r3, [r6, #0]
 800e3d2:	6823      	ldr	r3, [r4, #0]
 800e3d4:	0699      	lsls	r1, r3, #26
 800e3d6:	bf42      	ittt	mi
 800e3d8:	6833      	ldrmi	r3, [r6, #0]
 800e3da:	3302      	addmi	r3, #2
 800e3dc:	6033      	strmi	r3, [r6, #0]
 800e3de:	6825      	ldr	r5, [r4, #0]
 800e3e0:	f015 0506 	ands.w	r5, r5, #6
 800e3e4:	d106      	bne.n	800e3f4 <_printf_common+0x48>
 800e3e6:	f104 0a19 	add.w	sl, r4, #25
 800e3ea:	68e3      	ldr	r3, [r4, #12]
 800e3ec:	6832      	ldr	r2, [r6, #0]
 800e3ee:	1a9b      	subs	r3, r3, r2
 800e3f0:	42ab      	cmp	r3, r5
 800e3f2:	dc26      	bgt.n	800e442 <_printf_common+0x96>
 800e3f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e3f8:	1e13      	subs	r3, r2, #0
 800e3fa:	6822      	ldr	r2, [r4, #0]
 800e3fc:	bf18      	it	ne
 800e3fe:	2301      	movne	r3, #1
 800e400:	0692      	lsls	r2, r2, #26
 800e402:	d42b      	bmi.n	800e45c <_printf_common+0xb0>
 800e404:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e408:	4649      	mov	r1, r9
 800e40a:	4638      	mov	r0, r7
 800e40c:	47c0      	blx	r8
 800e40e:	3001      	adds	r0, #1
 800e410:	d01e      	beq.n	800e450 <_printf_common+0xa4>
 800e412:	6823      	ldr	r3, [r4, #0]
 800e414:	68e5      	ldr	r5, [r4, #12]
 800e416:	6832      	ldr	r2, [r6, #0]
 800e418:	f003 0306 	and.w	r3, r3, #6
 800e41c:	2b04      	cmp	r3, #4
 800e41e:	bf08      	it	eq
 800e420:	1aad      	subeq	r5, r5, r2
 800e422:	68a3      	ldr	r3, [r4, #8]
 800e424:	6922      	ldr	r2, [r4, #16]
 800e426:	bf0c      	ite	eq
 800e428:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e42c:	2500      	movne	r5, #0
 800e42e:	4293      	cmp	r3, r2
 800e430:	bfc4      	itt	gt
 800e432:	1a9b      	subgt	r3, r3, r2
 800e434:	18ed      	addgt	r5, r5, r3
 800e436:	2600      	movs	r6, #0
 800e438:	341a      	adds	r4, #26
 800e43a:	42b5      	cmp	r5, r6
 800e43c:	d11a      	bne.n	800e474 <_printf_common+0xc8>
 800e43e:	2000      	movs	r0, #0
 800e440:	e008      	b.n	800e454 <_printf_common+0xa8>
 800e442:	2301      	movs	r3, #1
 800e444:	4652      	mov	r2, sl
 800e446:	4649      	mov	r1, r9
 800e448:	4638      	mov	r0, r7
 800e44a:	47c0      	blx	r8
 800e44c:	3001      	adds	r0, #1
 800e44e:	d103      	bne.n	800e458 <_printf_common+0xac>
 800e450:	f04f 30ff 	mov.w	r0, #4294967295
 800e454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e458:	3501      	adds	r5, #1
 800e45a:	e7c6      	b.n	800e3ea <_printf_common+0x3e>
 800e45c:	18e1      	adds	r1, r4, r3
 800e45e:	1c5a      	adds	r2, r3, #1
 800e460:	2030      	movs	r0, #48	; 0x30
 800e462:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e466:	4422      	add	r2, r4
 800e468:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e46c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e470:	3302      	adds	r3, #2
 800e472:	e7c7      	b.n	800e404 <_printf_common+0x58>
 800e474:	2301      	movs	r3, #1
 800e476:	4622      	mov	r2, r4
 800e478:	4649      	mov	r1, r9
 800e47a:	4638      	mov	r0, r7
 800e47c:	47c0      	blx	r8
 800e47e:	3001      	adds	r0, #1
 800e480:	d0e6      	beq.n	800e450 <_printf_common+0xa4>
 800e482:	3601      	adds	r6, #1
 800e484:	e7d9      	b.n	800e43a <_printf_common+0x8e>
	...

0800e488 <_printf_i>:
 800e488:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e48c:	460c      	mov	r4, r1
 800e48e:	4691      	mov	r9, r2
 800e490:	7e27      	ldrb	r7, [r4, #24]
 800e492:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e494:	2f78      	cmp	r7, #120	; 0x78
 800e496:	4680      	mov	r8, r0
 800e498:	469a      	mov	sl, r3
 800e49a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e49e:	d807      	bhi.n	800e4b0 <_printf_i+0x28>
 800e4a0:	2f62      	cmp	r7, #98	; 0x62
 800e4a2:	d80a      	bhi.n	800e4ba <_printf_i+0x32>
 800e4a4:	2f00      	cmp	r7, #0
 800e4a6:	f000 80d8 	beq.w	800e65a <_printf_i+0x1d2>
 800e4aa:	2f58      	cmp	r7, #88	; 0x58
 800e4ac:	f000 80a3 	beq.w	800e5f6 <_printf_i+0x16e>
 800e4b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e4b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e4b8:	e03a      	b.n	800e530 <_printf_i+0xa8>
 800e4ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e4be:	2b15      	cmp	r3, #21
 800e4c0:	d8f6      	bhi.n	800e4b0 <_printf_i+0x28>
 800e4c2:	a001      	add	r0, pc, #4	; (adr r0, 800e4c8 <_printf_i+0x40>)
 800e4c4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e4c8:	0800e521 	.word	0x0800e521
 800e4cc:	0800e535 	.word	0x0800e535
 800e4d0:	0800e4b1 	.word	0x0800e4b1
 800e4d4:	0800e4b1 	.word	0x0800e4b1
 800e4d8:	0800e4b1 	.word	0x0800e4b1
 800e4dc:	0800e4b1 	.word	0x0800e4b1
 800e4e0:	0800e535 	.word	0x0800e535
 800e4e4:	0800e4b1 	.word	0x0800e4b1
 800e4e8:	0800e4b1 	.word	0x0800e4b1
 800e4ec:	0800e4b1 	.word	0x0800e4b1
 800e4f0:	0800e4b1 	.word	0x0800e4b1
 800e4f4:	0800e641 	.word	0x0800e641
 800e4f8:	0800e565 	.word	0x0800e565
 800e4fc:	0800e623 	.word	0x0800e623
 800e500:	0800e4b1 	.word	0x0800e4b1
 800e504:	0800e4b1 	.word	0x0800e4b1
 800e508:	0800e663 	.word	0x0800e663
 800e50c:	0800e4b1 	.word	0x0800e4b1
 800e510:	0800e565 	.word	0x0800e565
 800e514:	0800e4b1 	.word	0x0800e4b1
 800e518:	0800e4b1 	.word	0x0800e4b1
 800e51c:	0800e62b 	.word	0x0800e62b
 800e520:	680b      	ldr	r3, [r1, #0]
 800e522:	1d1a      	adds	r2, r3, #4
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	600a      	str	r2, [r1, #0]
 800e528:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e52c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e530:	2301      	movs	r3, #1
 800e532:	e0a3      	b.n	800e67c <_printf_i+0x1f4>
 800e534:	6825      	ldr	r5, [r4, #0]
 800e536:	6808      	ldr	r0, [r1, #0]
 800e538:	062e      	lsls	r6, r5, #24
 800e53a:	f100 0304 	add.w	r3, r0, #4
 800e53e:	d50a      	bpl.n	800e556 <_printf_i+0xce>
 800e540:	6805      	ldr	r5, [r0, #0]
 800e542:	600b      	str	r3, [r1, #0]
 800e544:	2d00      	cmp	r5, #0
 800e546:	da03      	bge.n	800e550 <_printf_i+0xc8>
 800e548:	232d      	movs	r3, #45	; 0x2d
 800e54a:	426d      	negs	r5, r5
 800e54c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e550:	485e      	ldr	r0, [pc, #376]	; (800e6cc <_printf_i+0x244>)
 800e552:	230a      	movs	r3, #10
 800e554:	e019      	b.n	800e58a <_printf_i+0x102>
 800e556:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e55a:	6805      	ldr	r5, [r0, #0]
 800e55c:	600b      	str	r3, [r1, #0]
 800e55e:	bf18      	it	ne
 800e560:	b22d      	sxthne	r5, r5
 800e562:	e7ef      	b.n	800e544 <_printf_i+0xbc>
 800e564:	680b      	ldr	r3, [r1, #0]
 800e566:	6825      	ldr	r5, [r4, #0]
 800e568:	1d18      	adds	r0, r3, #4
 800e56a:	6008      	str	r0, [r1, #0]
 800e56c:	0628      	lsls	r0, r5, #24
 800e56e:	d501      	bpl.n	800e574 <_printf_i+0xec>
 800e570:	681d      	ldr	r5, [r3, #0]
 800e572:	e002      	b.n	800e57a <_printf_i+0xf2>
 800e574:	0669      	lsls	r1, r5, #25
 800e576:	d5fb      	bpl.n	800e570 <_printf_i+0xe8>
 800e578:	881d      	ldrh	r5, [r3, #0]
 800e57a:	4854      	ldr	r0, [pc, #336]	; (800e6cc <_printf_i+0x244>)
 800e57c:	2f6f      	cmp	r7, #111	; 0x6f
 800e57e:	bf0c      	ite	eq
 800e580:	2308      	moveq	r3, #8
 800e582:	230a      	movne	r3, #10
 800e584:	2100      	movs	r1, #0
 800e586:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e58a:	6866      	ldr	r6, [r4, #4]
 800e58c:	60a6      	str	r6, [r4, #8]
 800e58e:	2e00      	cmp	r6, #0
 800e590:	bfa2      	ittt	ge
 800e592:	6821      	ldrge	r1, [r4, #0]
 800e594:	f021 0104 	bicge.w	r1, r1, #4
 800e598:	6021      	strge	r1, [r4, #0]
 800e59a:	b90d      	cbnz	r5, 800e5a0 <_printf_i+0x118>
 800e59c:	2e00      	cmp	r6, #0
 800e59e:	d04d      	beq.n	800e63c <_printf_i+0x1b4>
 800e5a0:	4616      	mov	r6, r2
 800e5a2:	fbb5 f1f3 	udiv	r1, r5, r3
 800e5a6:	fb03 5711 	mls	r7, r3, r1, r5
 800e5aa:	5dc7      	ldrb	r7, [r0, r7]
 800e5ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e5b0:	462f      	mov	r7, r5
 800e5b2:	42bb      	cmp	r3, r7
 800e5b4:	460d      	mov	r5, r1
 800e5b6:	d9f4      	bls.n	800e5a2 <_printf_i+0x11a>
 800e5b8:	2b08      	cmp	r3, #8
 800e5ba:	d10b      	bne.n	800e5d4 <_printf_i+0x14c>
 800e5bc:	6823      	ldr	r3, [r4, #0]
 800e5be:	07df      	lsls	r7, r3, #31
 800e5c0:	d508      	bpl.n	800e5d4 <_printf_i+0x14c>
 800e5c2:	6923      	ldr	r3, [r4, #16]
 800e5c4:	6861      	ldr	r1, [r4, #4]
 800e5c6:	4299      	cmp	r1, r3
 800e5c8:	bfde      	ittt	le
 800e5ca:	2330      	movle	r3, #48	; 0x30
 800e5cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e5d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e5d4:	1b92      	subs	r2, r2, r6
 800e5d6:	6122      	str	r2, [r4, #16]
 800e5d8:	f8cd a000 	str.w	sl, [sp]
 800e5dc:	464b      	mov	r3, r9
 800e5de:	aa03      	add	r2, sp, #12
 800e5e0:	4621      	mov	r1, r4
 800e5e2:	4640      	mov	r0, r8
 800e5e4:	f7ff fee2 	bl	800e3ac <_printf_common>
 800e5e8:	3001      	adds	r0, #1
 800e5ea:	d14c      	bne.n	800e686 <_printf_i+0x1fe>
 800e5ec:	f04f 30ff 	mov.w	r0, #4294967295
 800e5f0:	b004      	add	sp, #16
 800e5f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5f6:	4835      	ldr	r0, [pc, #212]	; (800e6cc <_printf_i+0x244>)
 800e5f8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e5fc:	6823      	ldr	r3, [r4, #0]
 800e5fe:	680e      	ldr	r6, [r1, #0]
 800e600:	061f      	lsls	r7, r3, #24
 800e602:	f856 5b04 	ldr.w	r5, [r6], #4
 800e606:	600e      	str	r6, [r1, #0]
 800e608:	d514      	bpl.n	800e634 <_printf_i+0x1ac>
 800e60a:	07d9      	lsls	r1, r3, #31
 800e60c:	bf44      	itt	mi
 800e60e:	f043 0320 	orrmi.w	r3, r3, #32
 800e612:	6023      	strmi	r3, [r4, #0]
 800e614:	b91d      	cbnz	r5, 800e61e <_printf_i+0x196>
 800e616:	6823      	ldr	r3, [r4, #0]
 800e618:	f023 0320 	bic.w	r3, r3, #32
 800e61c:	6023      	str	r3, [r4, #0]
 800e61e:	2310      	movs	r3, #16
 800e620:	e7b0      	b.n	800e584 <_printf_i+0xfc>
 800e622:	6823      	ldr	r3, [r4, #0]
 800e624:	f043 0320 	orr.w	r3, r3, #32
 800e628:	6023      	str	r3, [r4, #0]
 800e62a:	2378      	movs	r3, #120	; 0x78
 800e62c:	4828      	ldr	r0, [pc, #160]	; (800e6d0 <_printf_i+0x248>)
 800e62e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e632:	e7e3      	b.n	800e5fc <_printf_i+0x174>
 800e634:	065e      	lsls	r6, r3, #25
 800e636:	bf48      	it	mi
 800e638:	b2ad      	uxthmi	r5, r5
 800e63a:	e7e6      	b.n	800e60a <_printf_i+0x182>
 800e63c:	4616      	mov	r6, r2
 800e63e:	e7bb      	b.n	800e5b8 <_printf_i+0x130>
 800e640:	680b      	ldr	r3, [r1, #0]
 800e642:	6826      	ldr	r6, [r4, #0]
 800e644:	6960      	ldr	r0, [r4, #20]
 800e646:	1d1d      	adds	r5, r3, #4
 800e648:	600d      	str	r5, [r1, #0]
 800e64a:	0635      	lsls	r5, r6, #24
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	d501      	bpl.n	800e654 <_printf_i+0x1cc>
 800e650:	6018      	str	r0, [r3, #0]
 800e652:	e002      	b.n	800e65a <_printf_i+0x1d2>
 800e654:	0671      	lsls	r1, r6, #25
 800e656:	d5fb      	bpl.n	800e650 <_printf_i+0x1c8>
 800e658:	8018      	strh	r0, [r3, #0]
 800e65a:	2300      	movs	r3, #0
 800e65c:	6123      	str	r3, [r4, #16]
 800e65e:	4616      	mov	r6, r2
 800e660:	e7ba      	b.n	800e5d8 <_printf_i+0x150>
 800e662:	680b      	ldr	r3, [r1, #0]
 800e664:	1d1a      	adds	r2, r3, #4
 800e666:	600a      	str	r2, [r1, #0]
 800e668:	681e      	ldr	r6, [r3, #0]
 800e66a:	6862      	ldr	r2, [r4, #4]
 800e66c:	2100      	movs	r1, #0
 800e66e:	4630      	mov	r0, r6
 800e670:	f7f1 fdb6 	bl	80001e0 <memchr>
 800e674:	b108      	cbz	r0, 800e67a <_printf_i+0x1f2>
 800e676:	1b80      	subs	r0, r0, r6
 800e678:	6060      	str	r0, [r4, #4]
 800e67a:	6863      	ldr	r3, [r4, #4]
 800e67c:	6123      	str	r3, [r4, #16]
 800e67e:	2300      	movs	r3, #0
 800e680:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e684:	e7a8      	b.n	800e5d8 <_printf_i+0x150>
 800e686:	6923      	ldr	r3, [r4, #16]
 800e688:	4632      	mov	r2, r6
 800e68a:	4649      	mov	r1, r9
 800e68c:	4640      	mov	r0, r8
 800e68e:	47d0      	blx	sl
 800e690:	3001      	adds	r0, #1
 800e692:	d0ab      	beq.n	800e5ec <_printf_i+0x164>
 800e694:	6823      	ldr	r3, [r4, #0]
 800e696:	079b      	lsls	r3, r3, #30
 800e698:	d413      	bmi.n	800e6c2 <_printf_i+0x23a>
 800e69a:	68e0      	ldr	r0, [r4, #12]
 800e69c:	9b03      	ldr	r3, [sp, #12]
 800e69e:	4298      	cmp	r0, r3
 800e6a0:	bfb8      	it	lt
 800e6a2:	4618      	movlt	r0, r3
 800e6a4:	e7a4      	b.n	800e5f0 <_printf_i+0x168>
 800e6a6:	2301      	movs	r3, #1
 800e6a8:	4632      	mov	r2, r6
 800e6aa:	4649      	mov	r1, r9
 800e6ac:	4640      	mov	r0, r8
 800e6ae:	47d0      	blx	sl
 800e6b0:	3001      	adds	r0, #1
 800e6b2:	d09b      	beq.n	800e5ec <_printf_i+0x164>
 800e6b4:	3501      	adds	r5, #1
 800e6b6:	68e3      	ldr	r3, [r4, #12]
 800e6b8:	9903      	ldr	r1, [sp, #12]
 800e6ba:	1a5b      	subs	r3, r3, r1
 800e6bc:	42ab      	cmp	r3, r5
 800e6be:	dcf2      	bgt.n	800e6a6 <_printf_i+0x21e>
 800e6c0:	e7eb      	b.n	800e69a <_printf_i+0x212>
 800e6c2:	2500      	movs	r5, #0
 800e6c4:	f104 0619 	add.w	r6, r4, #25
 800e6c8:	e7f5      	b.n	800e6b6 <_printf_i+0x22e>
 800e6ca:	bf00      	nop
 800e6cc:	0800e915 	.word	0x0800e915
 800e6d0:	0800e926 	.word	0x0800e926

0800e6d4 <memmove>:
 800e6d4:	4288      	cmp	r0, r1
 800e6d6:	b510      	push	{r4, lr}
 800e6d8:	eb01 0402 	add.w	r4, r1, r2
 800e6dc:	d902      	bls.n	800e6e4 <memmove+0x10>
 800e6de:	4284      	cmp	r4, r0
 800e6e0:	4623      	mov	r3, r4
 800e6e2:	d807      	bhi.n	800e6f4 <memmove+0x20>
 800e6e4:	1e43      	subs	r3, r0, #1
 800e6e6:	42a1      	cmp	r1, r4
 800e6e8:	d008      	beq.n	800e6fc <memmove+0x28>
 800e6ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e6ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e6f2:	e7f8      	b.n	800e6e6 <memmove+0x12>
 800e6f4:	4402      	add	r2, r0
 800e6f6:	4601      	mov	r1, r0
 800e6f8:	428a      	cmp	r2, r1
 800e6fa:	d100      	bne.n	800e6fe <memmove+0x2a>
 800e6fc:	bd10      	pop	{r4, pc}
 800e6fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e702:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e706:	e7f7      	b.n	800e6f8 <memmove+0x24>

0800e708 <_realloc_r>:
 800e708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e70a:	4607      	mov	r7, r0
 800e70c:	4614      	mov	r4, r2
 800e70e:	460e      	mov	r6, r1
 800e710:	b921      	cbnz	r1, 800e71c <_realloc_r+0x14>
 800e712:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e716:	4611      	mov	r1, r2
 800e718:	f7ff bbec 	b.w	800def4 <_malloc_r>
 800e71c:	b922      	cbnz	r2, 800e728 <_realloc_r+0x20>
 800e71e:	f7ff fb99 	bl	800de54 <_free_r>
 800e722:	4625      	mov	r5, r4
 800e724:	4628      	mov	r0, r5
 800e726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e728:	f000 f814 	bl	800e754 <_malloc_usable_size_r>
 800e72c:	42a0      	cmp	r0, r4
 800e72e:	d20f      	bcs.n	800e750 <_realloc_r+0x48>
 800e730:	4621      	mov	r1, r4
 800e732:	4638      	mov	r0, r7
 800e734:	f7ff fbde 	bl	800def4 <_malloc_r>
 800e738:	4605      	mov	r5, r0
 800e73a:	2800      	cmp	r0, #0
 800e73c:	d0f2      	beq.n	800e724 <_realloc_r+0x1c>
 800e73e:	4631      	mov	r1, r6
 800e740:	4622      	mov	r2, r4
 800e742:	f7ff fb71 	bl	800de28 <memcpy>
 800e746:	4631      	mov	r1, r6
 800e748:	4638      	mov	r0, r7
 800e74a:	f7ff fb83 	bl	800de54 <_free_r>
 800e74e:	e7e9      	b.n	800e724 <_realloc_r+0x1c>
 800e750:	4635      	mov	r5, r6
 800e752:	e7e7      	b.n	800e724 <_realloc_r+0x1c>

0800e754 <_malloc_usable_size_r>:
 800e754:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e758:	1f18      	subs	r0, r3, #4
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	bfbc      	itt	lt
 800e75e:	580b      	ldrlt	r3, [r1, r0]
 800e760:	18c0      	addlt	r0, r0, r3
 800e762:	4770      	bx	lr

0800e764 <_init>:
 800e764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e766:	bf00      	nop
 800e768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e76a:	bc08      	pop	{r3}
 800e76c:	469e      	mov	lr, r3
 800e76e:	4770      	bx	lr

0800e770 <_fini>:
 800e770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e772:	bf00      	nop
 800e774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e776:	bc08      	pop	{r3}
 800e778:	469e      	mov	lr, r3
 800e77a:	4770      	bx	lr
